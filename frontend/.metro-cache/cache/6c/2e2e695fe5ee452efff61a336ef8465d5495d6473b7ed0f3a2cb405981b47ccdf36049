{"dependencies":[{"name":"@react-aria/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":97,"index":97}}],"key":"1YkQy8j1AiEA5UJkjTUYe2TKBMU=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":98},"end":{"line":2,"column":54,"index":152}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":153},"end":{"line":3,"column":55,"index":208}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"@react-aria/focus","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":209},"end":{"line":4,"column":49,"index":258}}],"key":"42Ka3xqFBlJqUlpORqJoyRxBjm0=","exportNames":["*"],"imports":1}},{"name":"@react-aria/label","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":259},"end":{"line":5,"column":45,"index":304}}],"key":"5wzhdZHdQjf2PCDavajv7B5b+u8=","exportNames":["*"],"imports":1}},{"name":"./useMove","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":305},"end":{"line":6,"column":36,"index":341}}],"key":"1QtvBFz/7nWHkHHp1/BPdopX/5s=","exportNames":["*"],"imports":1}},{"name":"@react-native-aria/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":342},"end":{"line":7,"column":49,"index":391}}],"key":"ijskzN+IV/diNKTT1BJzRK8qf8I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.useSliderThumb = useSliderThumb;\n  var _reactAriaUtils = require(_dependencyMap[0], \"@react-aria/utils\");\n  var _utils = require(_dependencyMap[1], \"./utils\");\n  var _react = require(_dependencyMap[2], \"react\");\n  var _reactAriaFocus = require(_dependencyMap[3], \"@react-aria/focus\");\n  var _reactAriaLabel = require(_dependencyMap[4], \"@react-aria/label\");\n  var _useMove = require(_dependencyMap[5], \"./useMove\");\n  var _reactNativeAriaUtils = require(_dependencyMap[6], \"@react-native-aria/utils\");\n  /**\n   * Provides behavior and accessibility for a thumb of a slider component.\n   *\n   * @param opts Options for this Slider thumb.\n   * @param state Slider state, created via `useSliderState`.\n   */\n  function useSliderThumb(opts, state, isReversed) {\n    let {\n      index,\n      isRequired,\n      isDisabled,\n      validationState,\n      trackLayout,\n      inputRef\n    } = opts;\n    let isVertical = opts.orientation === 'vertical';\n    let direction = (0, _reactNativeAriaUtils.isRTL)() ? 'rtl' : undefined;\n    let {\n      addGlobalListener,\n      removeGlobalListener\n    } = (0, _reactAriaUtils.useGlobalListeners)();\n    let labelId = _utils.sliderIds.get(state);\n    const {\n      labelProps,\n      fieldProps\n    } = (0, _reactAriaLabel.useLabel)({\n      ...opts,\n      'id': (0, _utils.getSliderThumbId)(state, index),\n      'aria-labelledby': `${labelId} ${opts['aria-labelledby'] ?? ''}`.trim()\n    });\n    const value = state.values[index];\n    const focusInput = (0, _react.useCallback)(() => {\n      if (inputRef.current) {\n        (0, _reactAriaUtils.focusWithoutScrolling)(inputRef.current);\n      }\n    }, [inputRef]);\n    const isFocused = state.focusedThumb === index;\n    (0, _react.useEffect)(() => {\n      if (isFocused) {\n        focusInput();\n      }\n    }, [isFocused, focusInput]);\n    const stateRef = (0, _react.useRef)(null);\n    stateRef.current = state;\n    let reverseX = isReversed || direction === 'rtl';\n    let currentPosition = (0, _react.useRef)(null);\n    let {\n      moveProps\n    } = (0, _useMove.useMove)({\n      onMoveStart() {\n        currentPosition.current = null;\n        state.setThumbDragging(index, true);\n      },\n      onMove({\n        deltaX,\n        deltaY,\n        pointerType\n      }) {\n        let size = isVertical ? trackLayout.height : trackLayout.width;\n        if (currentPosition.current == null) {\n          currentPosition.current = stateRef.current.getThumbPercent(index) * size;\n        }\n        if (pointerType === 'keyboard') {\n          // (invert left/right according to language direction) + (according to vertical)\n          let delta = ((reverseX ? -deltaX : deltaX) + (reverseX ? deltaY : -deltaY)) * stateRef.current.step;\n          currentPosition.current += delta * size;\n          stateRef.current.setThumbValue(index, stateRef.current.getThumbValue(index) + delta);\n        } else {\n          let delta = isVertical ? deltaY : deltaX;\n          if (reverseX) {\n            if (!isVertical) {\n              delta = -delta;\n            }\n          } else {\n            if (isVertical) {\n              delta = -delta;\n            }\n          }\n          currentPosition.current += delta;\n          stateRef.current.setThumbPercent(index, (0, _reactAriaUtils.clamp)(currentPosition.current / size, 0, 1));\n        }\n      },\n      onMoveEnd() {\n        state.setThumbDragging(index, false);\n      }\n    });\n\n    // Immediately register editability with the state\n    state.setThumbEditable(index, !isDisabled);\n    const {\n      focusableProps\n    } = (0, _reactAriaFocus.useFocusable)((0, _reactAriaUtils.mergeProps)(opts, {\n      onFocus: () => state.setFocusedThumb(index),\n      onBlur: () => state.setFocusedThumb(undefined)\n    }), inputRef);\n    let currentPointer = (0, _react.useRef)(undefined);\n    let onDown = id => {\n      focusInput();\n      currentPointer.current = id;\n      state.setThumbDragging(index, true);\n      addGlobalListener(window, 'mouseup', onUp, false);\n      addGlobalListener(window, 'touchend', onUp, false);\n      addGlobalListener(window, 'pointerup', onUp, false);\n    };\n    let onUp = e => {\n      var _e$changedTouches;\n      let id = e.pointerId ?? ((_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : _e$changedTouches[0].identifier);\n      if (id === currentPointer.current) {\n        focusInput();\n        state.setThumbDragging(index, false);\n        removeGlobalListener(window, 'mouseup', onUp, false);\n        removeGlobalListener(window, 'touchend', onUp, false);\n        removeGlobalListener(window, 'pointerup', onUp, false);\n      }\n    };\n\n    // We install mouse handlers for the drag motion on the thumb div, but\n    // not the key handler for moving the thumb with the slider.  Instead,\n    // we focus the range input, and let the browser handle the keyboard\n    // interactions; we then listen to input's onChange to update state.\n    return {\n      inputProps: (0, _reactAriaUtils.mergeProps)(focusableProps, fieldProps, {\n        'type': 'range',\n        'tabIndex': !isDisabled ? 0 : undefined,\n        'min': state.getThumbMinValue(index),\n        'max': state.getThumbMaxValue(index),\n        'step': state.step,\n        'value': value,\n        'disabled': isDisabled,\n        'aria-orientation': opts.orientation,\n        'aria-valuetext': state.getThumbValueLabel(index),\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': opts['aria-errormessage'],\n        'onChange': e => {\n          state.setThumbValue(index, parseFloat(e.target.value));\n        }\n      }),\n      thumbProps: !isDisabled ? (0, _reactAriaUtils.mergeProps)(moveProps, {\n        onMouseDown: e => {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onDown();\n        },\n        onPointerDown: e => {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onDown(e.pointerId);\n        },\n        onTouchStart: e => {\n          onDown(e.changedTouches[0].identifier);\n        }\n      }) : {},\n      labelProps\n    };\n  }\n});","lineCount":173,"map":[[7,2,14,0,"exports"],[7,9,14,0],[7,10,14,0,"useSliderThumb"],[7,24,14,0],[7,27,14,0,"useSliderThumb"],[7,41,14,0],[8,2,1,0],[8,6,1,0,"_reactAriaUtils"],[8,21,1,0],[8,24,1,0,"require"],[8,31,1,0],[8,32,1,0,"_dependencyMap"],[8,46,1,0],[9,2,2,0],[9,6,2,0,"_utils"],[9,12,2,0],[9,15,2,0,"require"],[9,22,2,0],[9,23,2,0,"_dependencyMap"],[9,37,2,0],[10,2,3,0],[10,6,3,0,"_react"],[10,12,3,0],[10,15,3,0,"require"],[10,22,3,0],[10,23,3,0,"_dependencyMap"],[10,37,3,0],[11,2,4,0],[11,6,4,0,"_reactAriaFocus"],[11,21,4,0],[11,24,4,0,"require"],[11,31,4,0],[11,32,4,0,"_dependencyMap"],[11,46,4,0],[12,2,5,0],[12,6,5,0,"_reactAriaLabel"],[12,21,5,0],[12,24,5,0,"require"],[12,31,5,0],[12,32,5,0,"_dependencyMap"],[12,46,5,0],[13,2,6,0],[13,6,6,0,"_useMove"],[13,14,6,0],[13,17,6,0,"require"],[13,24,6,0],[13,25,6,0,"_dependencyMap"],[13,39,6,0],[14,2,7,0],[14,6,7,0,"_reactNativeAriaUtils"],[14,27,7,0],[14,30,7,0,"require"],[14,37,7,0],[14,38,7,0,"_dependencyMap"],[14,52,7,0],[15,2,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,2,14,7],[21,11,14,16,"useSliderThumb"],[21,25,14,30,"useSliderThumb"],[21,26,14,31,"opts"],[21,30,14,35],[21,32,14,37,"state"],[21,37,14,42],[21,39,14,44,"isReversed"],[21,49,14,54],[21,51,14,56],[22,4,15,2],[22,8,15,6],[23,6,16,4,"index"],[23,11,16,9],[24,6,17,4,"isRequired"],[24,16,17,14],[25,6,18,4,"isDisabled"],[25,16,18,14],[26,6,19,4,"validationState"],[26,21,19,19],[27,6,20,4,"trackLayout"],[27,17,20,15],[28,6,21,4,"inputRef"],[29,4,22,2],[29,5,22,3],[29,8,22,6,"opts"],[29,12,22,10],[30,4,23,2],[30,8,23,6,"isVertical"],[30,18,23,16],[30,21,23,19,"opts"],[30,25,23,23],[30,26,23,24,"orientation"],[30,37,23,35],[30,42,23,40],[30,52,23,50],[31,4,24,2],[31,8,24,6,"direction"],[31,17,24,15],[31,20,24,18],[31,24,24,18,"isRTL"],[31,45,24,23],[31,46,24,23,"isRTL"],[31,51,24,23],[31,53,24,24],[31,54,24,25],[31,57,24,28],[31,62,24,33],[31,65,24,36,"undefined"],[31,74,24,45],[32,4,25,2],[32,8,25,6],[33,6,26,4,"addGlobalListener"],[33,23,26,21],[34,6,27,4,"removeGlobalListener"],[35,4,28,2],[35,5,28,3],[35,8,28,6],[35,12,28,6,"useGlobalListeners"],[35,27,28,24],[35,28,28,24,"useGlobalListeners"],[35,46,28,24],[35,48,28,25],[35,49,28,26],[36,4,29,2],[36,8,29,6,"labelId"],[36,15,29,13],[36,18,29,16,"sliderIds"],[36,24,29,25],[36,25,29,25,"sliderIds"],[36,34,29,25],[36,35,29,26,"get"],[36,38,29,29],[36,39,29,30,"state"],[36,44,29,35],[36,45,29,36],[37,4,30,2],[37,10,30,8],[38,6,31,4,"labelProps"],[38,16,31,14],[39,6,32,4,"fieldProps"],[40,4,33,2],[40,5,33,3],[40,8,33,6],[40,12,33,6,"useLabel"],[40,27,33,14],[40,28,33,14,"useLabel"],[40,36,33,14],[40,38,33,15],[41,6,34,4],[41,9,34,7,"opts"],[41,13,34,11],[42,6,35,4],[42,10,35,8],[42,12,35,10],[42,16,35,10,"getSliderThumbId"],[42,22,35,26],[42,23,35,26,"getSliderThumbId"],[42,39,35,26],[42,41,35,27,"state"],[42,46,35,32],[42,48,35,34,"index"],[42,53,35,39],[42,54,35,40],[43,6,36,4],[43,23,36,21],[43,25,36,23],[43,28,36,26,"labelId"],[43,35,36,33],[43,39,36,37,"opts"],[43,43,36,41],[43,44,36,42],[43,61,36,59],[43,62,36,60],[43,66,36,64],[43,68,36,66],[43,70,36,68],[43,71,36,69,"trim"],[43,75,36,73],[43,76,36,74],[44,4,37,2],[44,5,37,3],[44,6,37,4],[45,4,38,2],[45,10,38,8,"value"],[45,15,38,13],[45,18,38,16,"state"],[45,23,38,21],[45,24,38,22,"values"],[45,30,38,28],[45,31,38,29,"index"],[45,36,38,34],[45,37,38,35],[46,4,39,2],[46,10,39,8,"focusInput"],[46,20,39,18],[46,23,39,21],[46,27,39,21,"useCallback"],[46,33,39,32],[46,34,39,32,"useCallback"],[46,45,39,32],[46,47,39,33],[46,53,39,39],[47,6,40,4],[47,10,40,8,"inputRef"],[47,18,40,16],[47,19,40,17,"current"],[47,26,40,24],[47,28,40,26],[48,8,41,6],[48,12,41,6,"focusWithoutScrolling"],[48,27,41,27],[48,28,41,27,"focusWithoutScrolling"],[48,49,41,27],[48,51,41,28,"inputRef"],[48,59,41,36],[48,60,41,37,"current"],[48,67,41,44],[48,68,41,45],[49,6,42,4],[50,4,43,2],[50,5,43,3],[50,7,43,5],[50,8,43,6,"inputRef"],[50,16,43,14],[50,17,43,15],[50,18,43,16],[51,4,44,2],[51,10,44,8,"isFocused"],[51,19,44,17],[51,22,44,20,"state"],[51,27,44,25],[51,28,44,26,"focusedThumb"],[51,40,44,38],[51,45,44,43,"index"],[51,50,44,48],[52,4,45,2],[52,8,45,2,"useEffect"],[52,14,45,11],[52,15,45,11,"useEffect"],[52,24,45,11],[52,26,45,12],[52,32,45,18],[53,6,46,4],[53,10,46,8,"isFocused"],[53,19,46,17],[53,21,46,19],[54,8,47,6,"focusInput"],[54,18,47,16],[54,19,47,17],[54,20,47,18],[55,6,48,4],[56,4,49,2],[56,5,49,3],[56,7,49,5],[56,8,49,6,"isFocused"],[56,17,49,15],[56,19,49,17,"focusInput"],[56,29,49,27],[56,30,49,28],[56,31,49,29],[57,4,50,2],[57,10,50,8,"stateRef"],[57,18,50,16],[57,21,50,19],[57,25,50,19,"useRef"],[57,31,50,25],[57,32,50,25,"useRef"],[57,38,50,25],[57,40,50,26],[57,44,50,30],[57,45,50,31],[58,4,51,2,"stateRef"],[58,12,51,10],[58,13,51,11,"current"],[58,20,51,18],[58,23,51,21,"state"],[58,28,51,26],[59,4,52,2],[59,8,52,6,"reverseX"],[59,16,52,14],[59,19,52,17,"isReversed"],[59,29,52,27],[59,33,52,31,"direction"],[59,42,52,40],[59,47,52,45],[59,52,52,50],[60,4,53,2],[60,8,53,6,"currentPosition"],[60,23,53,21],[60,26,53,24],[60,30,53,24,"useRef"],[60,36,53,30],[60,37,53,30,"useRef"],[60,43,53,30],[60,45,53,31],[60,49,53,35],[60,50,53,36],[61,4,54,2],[61,8,54,6],[62,6,55,4,"moveProps"],[63,4,56,2],[63,5,56,3],[63,8,56,6],[63,12,56,6,"useMove"],[63,20,56,13],[63,21,56,13,"useMove"],[63,28,56,13],[63,30,56,14],[64,6,57,4,"onMoveStart"],[64,17,57,15,"onMoveStart"],[64,18,57,15],[64,20,57,18],[65,8,58,6,"currentPosition"],[65,23,58,21],[65,24,58,22,"current"],[65,31,58,29],[65,34,58,32],[65,38,58,36],[66,8,59,6,"state"],[66,13,59,11],[66,14,59,12,"setThumbDragging"],[66,30,59,28],[66,31,59,29,"index"],[66,36,59,34],[66,38,59,36],[66,42,59,40],[66,43,59,41],[67,6,60,4],[67,7,60,5],[68,6,61,4,"onMove"],[68,12,61,10,"onMove"],[68,13,61,11],[69,8,62,6,"deltaX"],[69,14,62,12],[70,8,63,6,"deltaY"],[70,14,63,12],[71,8,64,6,"pointerType"],[72,6,65,4],[72,7,65,5],[72,9,65,7],[73,8,66,6],[73,12,66,10,"size"],[73,16,66,14],[73,19,66,17,"isVertical"],[73,29,66,27],[73,32,66,30,"trackLayout"],[73,43,66,41],[73,44,66,42,"height"],[73,50,66,48],[73,53,66,51,"trackLayout"],[73,64,66,62],[73,65,66,63,"width"],[73,70,66,68],[74,8,67,6],[74,12,67,10,"currentPosition"],[74,27,67,25],[74,28,67,26,"current"],[74,35,67,33],[74,39,67,37],[74,43,67,41],[74,45,67,43],[75,10,68,8,"currentPosition"],[75,25,68,23],[75,26,68,24,"current"],[75,33,68,31],[75,36,68,34,"stateRef"],[75,44,68,42],[75,45,68,43,"current"],[75,52,68,50],[75,53,68,51,"getThumbPercent"],[75,68,68,66],[75,69,68,67,"index"],[75,74,68,72],[75,75,68,73],[75,78,68,76,"size"],[75,82,68,80],[76,8,69,6],[77,8,70,6],[77,12,70,10,"pointerType"],[77,23,70,21],[77,28,70,26],[77,38,70,36],[77,40,70,38],[78,10,71,8],[79,10,72,8],[79,14,72,12,"delta"],[79,19,72,17],[79,22,72,20],[79,23,72,21],[79,24,72,22,"reverseX"],[79,32,72,30],[79,35,72,33],[79,36,72,34,"deltaX"],[79,42,72,40],[79,45,72,43,"deltaX"],[79,51,72,49],[79,56,72,54,"reverseX"],[79,64,72,62],[79,67,72,65,"deltaY"],[79,73,72,71],[79,76,72,74],[79,77,72,75,"deltaY"],[79,83,72,81],[79,84,72,82],[79,88,72,86,"stateRef"],[79,96,72,94],[79,97,72,95,"current"],[79,104,72,102],[79,105,72,103,"step"],[79,109,72,107],[80,10,73,8,"currentPosition"],[80,25,73,23],[80,26,73,24,"current"],[80,33,73,31],[80,37,73,35,"delta"],[80,42,73,40],[80,45,73,43,"size"],[80,49,73,47],[81,10,74,8,"stateRef"],[81,18,74,16],[81,19,74,17,"current"],[81,26,74,24],[81,27,74,25,"setThumbValue"],[81,40,74,38],[81,41,74,39,"index"],[81,46,74,44],[81,48,74,46,"stateRef"],[81,56,74,54],[81,57,74,55,"current"],[81,64,74,62],[81,65,74,63,"getThumbValue"],[81,78,74,76],[81,79,74,77,"index"],[81,84,74,82],[81,85,74,83],[81,88,74,86,"delta"],[81,93,74,91],[81,94,74,92],[82,8,75,6],[82,9,75,7],[82,15,75,13],[83,10,76,8],[83,14,76,12,"delta"],[83,19,76,17],[83,22,76,20,"isVertical"],[83,32,76,30],[83,35,76,33,"deltaY"],[83,41,76,39],[83,44,76,42,"deltaX"],[83,50,76,48],[84,10,77,8],[84,14,77,12,"reverseX"],[84,22,77,20],[84,24,77,22],[85,12,78,10],[85,16,78,14],[85,17,78,15,"isVertical"],[85,27,78,25],[85,29,78,27],[86,14,79,12,"delta"],[86,19,79,17],[86,22,79,20],[86,23,79,21,"delta"],[86,28,79,26],[87,12,80,10],[88,10,81,8],[88,11,81,9],[88,17,81,15],[89,12,82,10],[89,16,82,14,"isVertical"],[89,26,82,24],[89,28,82,26],[90,14,83,12,"delta"],[90,19,83,17],[90,22,83,20],[90,23,83,21,"delta"],[90,28,83,26],[91,12,84,10],[92,10,85,8],[93,10,86,8,"currentPosition"],[93,25,86,23],[93,26,86,24,"current"],[93,33,86,31],[93,37,86,35,"delta"],[93,42,86,40],[94,10,87,8,"stateRef"],[94,18,87,16],[94,19,87,17,"current"],[94,26,87,24],[94,27,87,25,"setThumbPercent"],[94,42,87,40],[94,43,87,41,"index"],[94,48,87,46],[94,50,87,48],[94,54,87,48,"clamp"],[94,69,87,53],[94,70,87,53,"clamp"],[94,75,87,53],[94,77,87,54,"currentPosition"],[94,92,87,69],[94,93,87,70,"current"],[94,100,87,77],[94,103,87,80,"size"],[94,107,87,84],[94,109,87,86],[94,110,87,87],[94,112,87,89],[94,113,87,90],[94,114,87,91],[94,115,87,92],[95,8,88,6],[96,6,89,4],[96,7,89,5],[97,6,90,4,"onMoveEnd"],[97,15,90,13,"onMoveEnd"],[97,16,90,13],[97,18,90,16],[98,8,91,6,"state"],[98,13,91,11],[98,14,91,12,"setThumbDragging"],[98,30,91,28],[98,31,91,29,"index"],[98,36,91,34],[98,38,91,36],[98,43,91,41],[98,44,91,42],[99,6,92,4],[100,4,93,2],[100,5,93,3],[100,6,93,4],[102,4,95,2],[103,4,96,2,"state"],[103,9,96,7],[103,10,96,8,"setThumbEditable"],[103,26,96,24],[103,27,96,25,"index"],[103,32,96,30],[103,34,96,32],[103,35,96,33,"isDisabled"],[103,45,96,43],[103,46,96,44],[104,4,97,2],[104,10,97,8],[105,6,98,4,"focusableProps"],[106,4,99,2],[106,5,99,3],[106,8,99,6],[106,12,99,6,"useFocusable"],[106,27,99,18],[106,28,99,18,"useFocusable"],[106,40,99,18],[106,42,99,19],[106,46,99,19,"mergeProps"],[106,61,99,29],[106,62,99,29,"mergeProps"],[106,72,99,29],[106,74,99,30,"opts"],[106,78,99,34],[106,80,99,36],[107,6,100,4,"onFocus"],[107,13,100,11],[107,15,100,13,"onFocus"],[107,16,100,13],[107,21,100,19,"state"],[107,26,100,24],[107,27,100,25,"setFocusedThumb"],[107,42,100,40],[107,43,100,41,"index"],[107,48,100,46],[107,49,100,47],[108,6,101,4,"onBlur"],[108,12,101,10],[108,14,101,12,"onBlur"],[108,15,101,12],[108,20,101,18,"state"],[108,25,101,23],[108,26,101,24,"setFocusedThumb"],[108,41,101,39],[108,42,101,40,"undefined"],[108,51,101,49],[109,4,102,2],[109,5,102,3],[109,6,102,4],[109,8,102,6,"inputRef"],[109,16,102,14],[109,17,102,15],[110,4,103,2],[110,8,103,6,"currentPointer"],[110,22,103,20],[110,25,103,23],[110,29,103,23,"useRef"],[110,35,103,29],[110,36,103,29,"useRef"],[110,42,103,29],[110,44,103,30,"undefined"],[110,53,103,39],[110,54,103,40],[111,4,104,2],[111,8,104,6,"onDown"],[111,14,104,12],[111,17,104,15,"id"],[111,19,104,17],[111,23,104,21],[112,6,105,4,"focusInput"],[112,16,105,14],[112,17,105,15],[112,18,105,16],[113,6,106,4,"currentPointer"],[113,20,106,18],[113,21,106,19,"current"],[113,28,106,26],[113,31,106,29,"id"],[113,33,106,31],[114,6,107,4,"state"],[114,11,107,9],[114,12,107,10,"setThumbDragging"],[114,28,107,26],[114,29,107,27,"index"],[114,34,107,32],[114,36,107,34],[114,40,107,38],[114,41,107,39],[115,6,108,4,"addGlobalListener"],[115,23,108,21],[115,24,108,22,"window"],[115,30,108,28],[115,32,108,30],[115,41,108,39],[115,43,108,41,"onUp"],[115,47,108,45],[115,49,108,47],[115,54,108,52],[115,55,108,53],[116,6,109,4,"addGlobalListener"],[116,23,109,21],[116,24,109,22,"window"],[116,30,109,28],[116,32,109,30],[116,42,109,40],[116,44,109,42,"onUp"],[116,48,109,46],[116,50,109,48],[116,55,109,53],[116,56,109,54],[117,6,110,4,"addGlobalListener"],[117,23,110,21],[117,24,110,22,"window"],[117,30,110,28],[117,32,110,30],[117,43,110,41],[117,45,110,43,"onUp"],[117,49,110,47],[117,51,110,49],[117,56,110,54],[117,57,110,55],[118,4,111,2],[118,5,111,3],[119,4,112,2],[119,8,112,6,"onUp"],[119,12,112,10],[119,15,112,13,"e"],[119,16,112,14],[119,20,112,18],[120,6,113,4],[120,10,113,8,"_e$changedTouches"],[120,27,113,25],[121,6,114,4],[121,10,114,8,"id"],[121,12,114,10],[121,15,114,13,"e"],[121,16,114,14],[121,17,114,15,"pointerId"],[121,26,114,24],[121,31,114,29],[121,32,114,30,"_e$changedTouches"],[121,49,114,47],[121,52,114,50,"e"],[121,53,114,51],[121,54,114,52,"changedTouches"],[121,68,114,66],[121,74,114,72],[121,78,114,76],[121,82,114,80,"_e$changedTouches"],[121,99,114,97],[121,104,114,102],[121,109,114,107],[121,110,114,108],[121,113,114,111],[121,118,114,116],[121,119,114,117],[121,122,114,120,"_e$changedTouches"],[121,139,114,137],[121,140,114,138],[121,141,114,139],[121,142,114,140],[121,143,114,141,"identifier"],[121,153,114,151],[121,154,114,152],[122,6,115,4],[122,10,115,8,"id"],[122,12,115,10],[122,17,115,15,"currentPointer"],[122,31,115,29],[122,32,115,30,"current"],[122,39,115,37],[122,41,115,39],[123,8,116,6,"focusInput"],[123,18,116,16],[123,19,116,17],[123,20,116,18],[124,8,117,6,"state"],[124,13,117,11],[124,14,117,12,"setThumbDragging"],[124,30,117,28],[124,31,117,29,"index"],[124,36,117,34],[124,38,117,36],[124,43,117,41],[124,44,117,42],[125,8,118,6,"removeGlobalListener"],[125,28,118,26],[125,29,118,27,"window"],[125,35,118,33],[125,37,118,35],[125,46,118,44],[125,48,118,46,"onUp"],[125,52,118,50],[125,54,118,52],[125,59,118,57],[125,60,118,58],[126,8,119,6,"removeGlobalListener"],[126,28,119,26],[126,29,119,27,"window"],[126,35,119,33],[126,37,119,35],[126,47,119,45],[126,49,119,47,"onUp"],[126,53,119,51],[126,55,119,53],[126,60,119,58],[126,61,119,59],[127,8,120,6,"removeGlobalListener"],[127,28,120,26],[127,29,120,27,"window"],[127,35,120,33],[127,37,120,35],[127,48,120,46],[127,50,120,48,"onUp"],[127,54,120,52],[127,56,120,54],[127,61,120,59],[127,62,120,60],[128,6,121,4],[129,4,122,2],[129,5,122,3],[131,4,124,2],[132,4,125,2],[133,4,126,2],[134,4,127,2],[135,4,128,2],[135,11,128,9],[136,6,129,4,"inputProps"],[136,16,129,14],[136,18,129,16],[136,22,129,16,"mergeProps"],[136,37,129,26],[136,38,129,26,"mergeProps"],[136,48,129,26],[136,50,129,27,"focusableProps"],[136,64,129,41],[136,66,129,43,"fieldProps"],[136,76,129,53],[136,78,129,55],[137,8,130,6],[137,14,130,12],[137,16,130,14],[137,23,130,21],[138,8,131,6],[138,18,131,16],[138,20,131,18],[138,21,131,19,"isDisabled"],[138,31,131,29],[138,34,131,32],[138,35,131,33],[138,38,131,36,"undefined"],[138,47,131,45],[139,8,132,6],[139,13,132,11],[139,15,132,13,"state"],[139,20,132,18],[139,21,132,19,"getThumbMinValue"],[139,37,132,35],[139,38,132,36,"index"],[139,43,132,41],[139,44,132,42],[140,8,133,6],[140,13,133,11],[140,15,133,13,"state"],[140,20,133,18],[140,21,133,19,"getThumbMaxValue"],[140,37,133,35],[140,38,133,36,"index"],[140,43,133,41],[140,44,133,42],[141,8,134,6],[141,14,134,12],[141,16,134,14,"state"],[141,21,134,19],[141,22,134,20,"step"],[141,26,134,24],[142,8,135,6],[142,15,135,13],[142,17,135,15,"value"],[142,22,135,20],[143,8,136,6],[143,18,136,16],[143,20,136,18,"isDisabled"],[143,30,136,28],[144,8,137,6],[144,26,137,24],[144,28,137,26,"opts"],[144,32,137,30],[144,33,137,31,"orientation"],[144,44,137,42],[145,8,138,6],[145,24,138,22],[145,26,138,24,"state"],[145,31,138,29],[145,32,138,30,"getThumbValueLabel"],[145,50,138,48],[145,51,138,49,"index"],[145,56,138,54],[145,57,138,55],[146,8,139,6],[146,23,139,21],[146,25,139,23,"isRequired"],[146,35,139,33],[146,39,139,37,"undefined"],[146,48,139,46],[147,8,140,6],[147,22,140,20],[147,24,140,22,"validationState"],[147,39,140,37],[147,44,140,42],[147,53,140,51],[147,57,140,55,"undefined"],[147,66,140,64],[148,8,141,6],[148,27,141,25],[148,29,141,27,"opts"],[148,33,141,31],[148,34,141,32],[148,53,141,51],[148,54,141,52],[149,8,142,6],[149,18,142,16],[149,20,142,18,"e"],[149,21,142,19],[149,25,142,23],[150,10,143,8,"state"],[150,15,143,13],[150,16,143,14,"setThumbValue"],[150,29,143,27],[150,30,143,28,"index"],[150,35,143,33],[150,37,143,35,"parseFloat"],[150,47,143,45],[150,48,143,46,"e"],[150,49,143,47],[150,50,143,48,"target"],[150,56,143,54],[150,57,143,55,"value"],[150,62,143,60],[150,63,143,61],[150,64,143,62],[151,8,144,6],[152,6,145,4],[152,7,145,5],[152,8,145,6],[153,6,146,4,"thumbProps"],[153,16,146,14],[153,18,146,16],[153,19,146,17,"isDisabled"],[153,29,146,27],[153,32,146,30],[153,36,146,30,"mergeProps"],[153,51,146,40],[153,52,146,40,"mergeProps"],[153,62,146,40],[153,64,146,41,"moveProps"],[153,73,146,50],[153,75,146,52],[154,8,147,6,"onMouseDown"],[154,19,147,17],[154,21,147,19,"e"],[154,22,147,20],[154,26,147,24],[155,10,148,8],[155,14,148,12,"e"],[155,15,148,13],[155,16,148,14,"button"],[155,22,148,20],[155,27,148,25],[155,28,148,26],[155,32,148,30,"e"],[155,33,148,31],[155,34,148,32,"altKey"],[155,40,148,38],[155,44,148,42,"e"],[155,45,148,43],[155,46,148,44,"ctrlKey"],[155,53,148,51],[155,57,148,55,"e"],[155,58,148,56],[155,59,148,57,"metaKey"],[155,66,148,64],[155,68,148,66],[156,12,149,10],[157,10,150,8],[158,10,151,8,"onDown"],[158,16,151,14],[158,17,151,15],[158,18,151,16],[159,8,152,6],[159,9,152,7],[160,8,153,6,"onPointerDown"],[160,21,153,19],[160,23,153,21,"e"],[160,24,153,22],[160,28,153,26],[161,10,154,8],[161,14,154,12,"e"],[161,15,154,13],[161,16,154,14,"button"],[161,22,154,20],[161,27,154,25],[161,28,154,26],[161,32,154,30,"e"],[161,33,154,31],[161,34,154,32,"altKey"],[161,40,154,38],[161,44,154,42,"e"],[161,45,154,43],[161,46,154,44,"ctrlKey"],[161,53,154,51],[161,57,154,55,"e"],[161,58,154,56],[161,59,154,57,"metaKey"],[161,66,154,64],[161,68,154,66],[162,12,155,10],[163,10,156,8],[164,10,157,8,"onDown"],[164,16,157,14],[164,17,157,15,"e"],[164,18,157,16],[164,19,157,17,"pointerId"],[164,28,157,26],[164,29,157,27],[165,8,158,6],[165,9,158,7],[166,8,159,6,"onTouchStart"],[166,20,159,18],[166,22,159,20,"e"],[166,23,159,21],[166,27,159,25],[167,10,160,8,"onDown"],[167,16,160,14],[167,17,160,15,"e"],[167,18,160,16],[167,19,160,17,"changedTouches"],[167,33,160,31],[167,34,160,32],[167,35,160,33],[167,36,160,34],[167,37,160,35,"identifier"],[167,47,160,45],[167,48,160,46],[168,8,161,6],[169,6,162,4],[169,7,162,5],[169,8,162,6],[169,11,162,9],[169,12,162,10],[169,13,162,11],[170,6,163,4,"labelProps"],[171,4,164,2],[171,5,164,3],[172,2,165,0],[173,0,165,1],[173,3]],"functionMap":{"names":["<global>","useSliderThumb","focusInput","useEffect$argument_0","useMove$argument_0.onMoveStart","useMove$argument_0.onMove","useMove$argument_0.onMoveEnd","mergeProps$argument_1.onFocus","mergeProps$argument_1.onBlur","onDown","onUp","mergeProps$argument_2.onChange","mergeProps$argument_1.onMouseDown","mergeProps$argument_1.onPointerDown","mergeProps$argument_1.onTouchStart"],"mappings":"AAA;OCa;iCCyB;GDI;YEE;GFI;IGQ;KHG;IIC;KJ4B;IKC;KLE;aMQ,kCN;YOC,sCP;eQG;GRO;aSC;GTU;kBUoB;OVE;mBWG;OXK;qBYC;OZK;oBaC;ObE;CDI"},"hasCjsExports":false},"type":"js/module"}]}