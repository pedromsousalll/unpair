{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"ListCollection\", {\n    enumerable: true,\n    get: function () {\n      return $a02d57049d202695$export$d085fb9e920b5ca7;\n    }\n  });\n  /*\n   * Copyright 2020 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n  class $a02d57049d202695$export$d085fb9e920b5ca7 {\n    *[Symbol.iterator]() {\n      yield* this.iterable;\n    }\n    get size() {\n      return this._size;\n    }\n    getKeys() {\n      return this.keyMap.keys();\n    }\n    getKeyBefore(key) {\n      let node = this.keyMap.get(key);\n      var _node_prevKey;\n      return node ? (_node_prevKey = node.prevKey) !== null && _node_prevKey !== void 0 ? _node_prevKey : null : null;\n    }\n    getKeyAfter(key) {\n      let node = this.keyMap.get(key);\n      var _node_nextKey;\n      return node ? (_node_nextKey = node.nextKey) !== null && _node_nextKey !== void 0 ? _node_nextKey : null : null;\n    }\n    getFirstKey() {\n      return this.firstKey;\n    }\n    getLastKey() {\n      return this.lastKey;\n    }\n    getItem(key) {\n      var _this_keyMap_get;\n      return (_this_keyMap_get = this.keyMap.get(key)) !== null && _this_keyMap_get !== void 0 ? _this_keyMap_get : null;\n    }\n    at(idx) {\n      const keys = [...this.getKeys()];\n      return this.getItem(keys[idx]);\n    }\n    getChildren(key) {\n      let node = this.keyMap.get(key);\n      return (node === null || node === void 0 ? void 0 : node.childNodes) || [];\n    }\n    constructor(nodes) {\n      this.keyMap = new Map();\n      this.firstKey = null;\n      this.lastKey = null;\n      this.iterable = nodes;\n      let visit = node => {\n        this.keyMap.set(node.key, node);\n        if (node.childNodes && node.type === 'section') for (let child of node.childNodes) visit(child);\n      };\n      for (let node of nodes) visit(node);\n      let last = null;\n      let index = 0;\n      let size = 0;\n      for (let [key, node] of this.keyMap) {\n        if (last) {\n          last.nextKey = key;\n          node.prevKey = last.key;\n        } else {\n          this.firstKey = key;\n          node.prevKey = undefined;\n        }\n        if (node.type === 'item') node.index = index++;\n        // Only count sections and items when determining size so that\n        // loaders and separators in RAC/S2 don't influence the emptyState determination\n        if (node.type === 'section' || node.type === 'item') size++;\n        last = node;\n        // Set nextKey as undefined since this might be the last node\n        // If it isn't the last node, last.nextKey will properly set at start of new loop\n        last.nextKey = undefined;\n      }\n      this._size = size;\n      var _last_key;\n      this.lastKey = (_last_key = last === null || last === void 0 ? void 0 : last.key) !== null && _last_key !== void 0 ? _last_key : null;\n    }\n  }\n});","lineCount":97,"map":[[7,2,88,0,"Object"],[7,8,88,0],[7,9,88,0,"defineProperty"],[7,23,88,0],[7,24,88,0,"exports"],[7,31,88,0],[8,4,88,0,"enumerable"],[8,14,88,0],[9,4,88,0,"get"],[9,7,88,0],[9,18,88,0,"get"],[9,19,88,0],[10,6,88,0],[10,13,88,8,"$a02d57049d202695$export$d085fb9e920b5ca7"],[10,54,88,49],[11,4,88,49],[12,2,88,49],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,2,11,4],[24,8,11,10,"$a02d57049d202695$export$d085fb9e920b5ca7"],[24,49,11,51],[24,50,11,52],[25,4,12,4],[25,6,12,6,"Symbol"],[25,12,12,12],[25,13,12,13,"iterator"],[25,21,12,21],[25,25,12,25],[26,6,13,8],[26,13,13,15],[26,17,13,19],[26,18,13,20,"iterable"],[26,26,13,28],[27,4,14,4],[28,4,15,4],[28,8,15,8,"size"],[28,12,15,12,"size"],[28,13,15,12],[28,15,15,15],[29,6,16,8],[29,13,16,15],[29,17,16,19],[29,18,16,20,"_size"],[29,23,16,25],[30,4,17,4],[31,4,18,4,"getKeys"],[31,11,18,11,"getKeys"],[31,12,18,11],[31,14,18,14],[32,6,19,8],[32,13,19,15],[32,17,19,19],[32,18,19,20,"keyMap"],[32,24,19,26],[32,25,19,27,"keys"],[32,29,19,31],[32,30,19,32],[32,31,19,33],[33,4,20,4],[34,4,21,4,"getKeyBefore"],[34,16,21,16,"getKeyBefore"],[34,17,21,17,"key"],[34,20,21,20],[34,22,21,22],[35,6,22,8],[35,10,22,12,"node"],[35,14,22,16],[35,17,22,19],[35,21,22,23],[35,22,22,24,"keyMap"],[35,28,22,30],[35,29,22,31,"get"],[35,32,22,34],[35,33,22,35,"key"],[35,36,22,38],[35,37,22,39],[36,6,23,8],[36,10,23,12,"_node_prevKey"],[36,23,23,25],[37,6,24,8],[37,13,24,15,"node"],[37,17,24,19],[37,20,24,22],[37,21,24,23,"_node_prevKey"],[37,34,24,36],[37,37,24,39,"node"],[37,41,24,43],[37,42,24,44,"prevKey"],[37,49,24,51],[37,55,24,57],[37,59,24,61],[37,63,24,65,"_node_prevKey"],[37,76,24,78],[37,81,24,83],[37,86,24,88],[37,87,24,89],[37,90,24,92,"_node_prevKey"],[37,103,24,105],[37,106,24,108],[37,110,24,112],[37,113,24,115],[37,117,24,119],[38,4,25,4],[39,4,26,4,"getKeyAfter"],[39,15,26,15,"getKeyAfter"],[39,16,26,16,"key"],[39,19,26,19],[39,21,26,21],[40,6,27,8],[40,10,27,12,"node"],[40,14,27,16],[40,17,27,19],[40,21,27,23],[40,22,27,24,"keyMap"],[40,28,27,30],[40,29,27,31,"get"],[40,32,27,34],[40,33,27,35,"key"],[40,36,27,38],[40,37,27,39],[41,6,28,8],[41,10,28,12,"_node_nextKey"],[41,23,28,25],[42,6,29,8],[42,13,29,15,"node"],[42,17,29,19],[42,20,29,22],[42,21,29,23,"_node_nextKey"],[42,34,29,36],[42,37,29,39,"node"],[42,41,29,43],[42,42,29,44,"nextKey"],[42,49,29,51],[42,55,29,57],[42,59,29,61],[42,63,29,65,"_node_nextKey"],[42,76,29,78],[42,81,29,83],[42,86,29,88],[42,87,29,89],[42,90,29,92,"_node_nextKey"],[42,103,29,105],[42,106,29,108],[42,110,29,112],[42,113,29,115],[42,117,29,119],[43,4,30,4],[44,4,31,4,"getFirstKey"],[44,15,31,15,"getFirstKey"],[44,16,31,15],[44,18,31,18],[45,6,32,8],[45,13,32,15],[45,17,32,19],[45,18,32,20,"firstKey"],[45,26,32,28],[46,4,33,4],[47,4,34,4,"getLastKey"],[47,14,34,14,"getLastKey"],[47,15,34,14],[47,17,34,17],[48,6,35,8],[48,13,35,15],[48,17,35,19],[48,18,35,20,"lastKey"],[48,25,35,27],[49,4,36,4],[50,4,37,4,"getItem"],[50,11,37,11,"getItem"],[50,12,37,12,"key"],[50,15,37,15],[50,17,37,17],[51,6,38,8],[51,10,38,12,"_this_keyMap_get"],[51,26,38,28],[52,6,39,8],[52,13,39,15],[52,14,39,16,"_this_keyMap_get"],[52,30,39,32],[52,33,39,35],[52,37,39,39],[52,38,39,40,"keyMap"],[52,44,39,46],[52,45,39,47,"get"],[52,48,39,50],[52,49,39,51,"key"],[52,52,39,54],[52,53,39,55],[52,59,39,61],[52,63,39,65],[52,67,39,69,"_this_keyMap_get"],[52,83,39,85],[52,88,39,90],[52,93,39,95],[52,94,39,96],[52,97,39,99,"_this_keyMap_get"],[52,113,39,115],[52,116,39,118],[52,120,39,122],[53,4,40,4],[54,4,41,4,"at"],[54,6,41,6,"at"],[54,7,41,7,"idx"],[54,10,41,10],[54,12,41,12],[55,6,42,8],[55,12,42,14,"keys"],[55,16,42,18],[55,19,42,21],[55,20,43,12],[55,23,43,15],[55,27,43,19],[55,28,43,20,"getKeys"],[55,35,43,27],[55,36,43,28],[55,37,43,29],[55,38,44,9],[56,6,45,8],[56,13,45,15],[56,17,45,19],[56,18,45,20,"getItem"],[56,25,45,27],[56,26,45,28,"keys"],[56,30,45,32],[56,31,45,33,"idx"],[56,34,45,36],[56,35,45,37],[56,36,45,38],[57,4,46,4],[58,4,47,4,"getChildren"],[58,15,47,15,"getChildren"],[58,16,47,16,"key"],[58,19,47,19],[58,21,47,21],[59,6,48,8],[59,10,48,12,"node"],[59,14,48,16],[59,17,48,19],[59,21,48,23],[59,22,48,24,"keyMap"],[59,28,48,30],[59,29,48,31,"get"],[59,32,48,34],[59,33,48,35,"key"],[59,36,48,38],[59,37,48,39],[60,6,49,8],[60,13,49,15],[60,14,49,16,"node"],[60,18,49,20],[60,23,49,25],[60,27,49,29],[60,31,49,33,"node"],[60,35,49,37],[60,40,49,42],[60,45,49,47],[60,46,49,48],[60,49,49,51],[60,54,49,56],[60,55,49,57],[60,58,49,60,"node"],[60,62,49,64],[60,63,49,65,"childNodes"],[60,73,49,75],[60,78,49,80],[60,80,49,82],[61,4,50,4],[62,4,51,4,"constructor"],[62,15,51,15,"constructor"],[62,16,51,16,"nodes"],[62,21,51,21],[62,23,51,22],[63,6,52,8],[63,10,52,12],[63,11,52,13,"keyMap"],[63,17,52,19],[63,20,52,22],[63,24,52,26,"Map"],[63,27,52,29],[63,28,52,30],[63,29,52,31],[64,6,53,8],[64,10,53,12],[64,11,53,13,"firstKey"],[64,19,53,21],[64,22,53,24],[64,26,53,28],[65,6,54,8],[65,10,54,12],[65,11,54,13,"lastKey"],[65,18,54,20],[65,21,54,23],[65,25,54,27],[66,6,55,8],[66,10,55,12],[66,11,55,13,"iterable"],[66,19,55,21],[66,22,55,24,"nodes"],[66,27,55,29],[67,6,56,8],[67,10,56,12,"visit"],[67,15,56,17],[67,18,56,21,"node"],[67,22,56,25],[67,26,56,28],[68,8,57,12],[68,12,57,16],[68,13,57,17,"keyMap"],[68,19,57,23],[68,20,57,24,"set"],[68,23,57,27],[68,24,57,28,"node"],[68,28,57,32],[68,29,57,33,"key"],[68,32,57,36],[68,34,57,38,"node"],[68,38,57,42],[68,39,57,43],[69,8,58,12],[69,12,58,16,"node"],[69,16,58,20],[69,17,58,21,"childNodes"],[69,27,58,31],[69,31,58,35,"node"],[69,35,58,39],[69,36,58,40,"type"],[69,40,58,44],[69,45,58,49],[69,54,58,58],[69,56,58,60],[69,61,58,65],[69,65,58,69,"child"],[69,70,58,74],[69,74,58,78,"node"],[69,78,58,82],[69,79,58,83,"childNodes"],[69,89,58,93],[69,91,58,94,"visit"],[69,96,58,99],[69,97,58,100,"child"],[69,102,58,105],[69,103,58,106],[70,6,59,8],[70,7,59,9],[71,6,60,8],[71,11,60,13],[71,15,60,17,"node"],[71,19,60,21],[71,23,60,25,"nodes"],[71,28,60,30],[71,30,60,31,"visit"],[71,35,60,36],[71,36,60,37,"node"],[71,40,60,41],[71,41,60,42],[72,6,61,8],[72,10,61,12,"last"],[72,14,61,16],[72,17,61,19],[72,21,61,23],[73,6,62,8],[73,10,62,12,"index"],[73,15,62,17],[73,18,62,20],[73,19,62,21],[74,6,63,8],[74,10,63,12,"size"],[74,14,63,16],[74,17,63,19],[74,18,63,20],[75,6,64,8],[75,11,64,13],[75,15,64,17],[75,16,64,18,"key"],[75,19,64,21],[75,21,64,23,"node"],[75,25,64,27],[75,26,64,28],[75,30,64,32],[75,34,64,36],[75,35,64,37,"keyMap"],[75,41,64,43],[75,43,64,44],[76,8,65,12],[76,12,65,16,"last"],[76,16,65,20],[76,18,65,22],[77,10,66,16,"last"],[77,14,66,20],[77,15,66,21,"nextKey"],[77,22,66,28],[77,25,66,31,"key"],[77,28,66,34],[78,10,67,16,"node"],[78,14,67,20],[78,15,67,21,"prevKey"],[78,22,67,28],[78,25,67,31,"last"],[78,29,67,35],[78,30,67,36,"key"],[78,33,67,39],[79,8,68,12],[79,9,68,13],[79,15,68,19],[80,10,69,16],[80,14,69,20],[80,15,69,21,"firstKey"],[80,23,69,29],[80,26,69,32,"key"],[80,29,69,35],[81,10,70,16,"node"],[81,14,70,20],[81,15,70,21,"prevKey"],[81,22,70,28],[81,25,70,31,"undefined"],[81,34,70,40],[82,8,71,12],[83,8,72,12],[83,12,72,16,"node"],[83,16,72,20],[83,17,72,21,"type"],[83,21,72,25],[83,26,72,30],[83,32,72,36],[83,34,72,38,"node"],[83,38,72,42],[83,39,72,43,"index"],[83,44,72,48],[83,47,72,51,"index"],[83,52,72,56],[83,54,72,58],[84,8,73,12],[85,8,74,12],[86,8,75,12],[86,12,75,16,"node"],[86,16,75,20],[86,17,75,21,"type"],[86,21,75,25],[86,26,75,30],[86,35,75,39],[86,39,75,43,"node"],[86,43,75,47],[86,44,75,48,"type"],[86,48,75,52],[86,53,75,57],[86,59,75,63],[86,61,75,65,"size"],[86,65,75,69],[86,67,75,71],[87,8,76,12,"last"],[87,12,76,16],[87,15,76,19,"node"],[87,19,76,23],[88,8,77,12],[89,8,78,12],[90,8,79,12,"last"],[90,12,79,16],[90,13,79,17,"nextKey"],[90,20,79,24],[90,23,79,27,"undefined"],[90,32,79,36],[91,6,80,8],[92,6,81,8],[92,10,81,12],[92,11,81,13,"_size"],[92,16,81,18],[92,19,81,21,"size"],[92,23,81,25],[93,6,82,8],[93,10,82,12,"_last_key"],[93,19,82,21],[94,6,83,8],[94,10,83,12],[94,11,83,13,"lastKey"],[94,18,83,20],[94,21,83,23],[94,22,83,24,"_last_key"],[94,31,83,33],[94,34,83,36,"last"],[94,38,83,40],[94,43,83,45],[94,47,83,49],[94,51,83,53,"last"],[94,55,83,57],[94,60,83,62],[94,65,83,67],[94,66,83,68],[94,69,83,71],[94,74,83,76],[94,75,83,77],[94,78,83,80,"last"],[94,82,83,84],[94,83,83,85,"key"],[94,86,83,88],[94,92,83,94],[94,96,83,98],[94,100,83,102,"_last_key"],[94,109,83,111],[94,114,83,116],[94,119,83,121],[94,120,83,122],[94,123,83,125,"_last_key"],[94,132,83,134],[94,135,83,137],[94,139,83,141],[95,4,84,4],[96,2,85,0],[97,0,85,1],[97,3]],"functionMap":{"names":["<global>","$a02d57049d202695$export$d085fb9e920b5ca7","$a02d57049d202695$export$d085fb9e920b5ca7#@@iterator","$a02d57049d202695$export$d085fb9e920b5ca7#get__size","$a02d57049d202695$export$d085fb9e920b5ca7#getKeys","$a02d57049d202695$export$d085fb9e920b5ca7#getKeyBefore","$a02d57049d202695$export$d085fb9e920b5ca7#getKeyAfter","$a02d57049d202695$export$d085fb9e920b5ca7#getFirstKey","$a02d57049d202695$export$d085fb9e920b5ca7#getLastKey","$a02d57049d202695$export$d085fb9e920b5ca7#getItem","$a02d57049d202695$export$d085fb9e920b5ca7#at","$a02d57049d202695$export$d085fb9e920b5ca7#getChildren","$a02d57049d202695$export$d085fb9e920b5ca7#constructor","visit"],"mappings":"AAA;ICU;ICC;KDE;IEC;KFE;IGC;KHE;IIC;KJI;IKC;KLI;IMC;KNE;IOC;KPE;IQC;KRG;ISC;KTK;IUC;KVG;IWC;oBCK;SDG;KXyB;CDC"},"hasCjsExports":false},"type":"js/module"}]}