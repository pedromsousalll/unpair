{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"TreeCollection\", {\n    enumerable: true,\n    get: function () {\n      return $05ca4cd7c4a5a999$export$863faf230ee2118a;\n    }\n  });\n  /*\n   * Copyright 2020 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n  class $05ca4cd7c4a5a999$export$863faf230ee2118a {\n    *[Symbol.iterator]() {\n      yield* this.iterable;\n    }\n    get size() {\n      return this.keyMap.size;\n    }\n    getKeys() {\n      return this.keyMap.keys();\n    }\n    getKeyBefore(key) {\n      let node = this.keyMap.get(key);\n      var _node_prevKey;\n      return node ? (_node_prevKey = node.prevKey) !== null && _node_prevKey !== void 0 ? _node_prevKey : null : null;\n    }\n    getKeyAfter(key) {\n      let node = this.keyMap.get(key);\n      var _node_nextKey;\n      return node ? (_node_nextKey = node.nextKey) !== null && _node_nextKey !== void 0 ? _node_nextKey : null : null;\n    }\n    getFirstKey() {\n      return this.firstKey;\n    }\n    getLastKey() {\n      return this.lastKey;\n    }\n    getItem(key) {\n      var _this_keyMap_get;\n      return (_this_keyMap_get = this.keyMap.get(key)) !== null && _this_keyMap_get !== void 0 ? _this_keyMap_get : null;\n    }\n    at(idx) {\n      const keys = [...this.getKeys()];\n      return this.getItem(keys[idx]);\n    }\n    constructor(nodes, {\n      expandedKeys: expandedKeys\n    } = {}) {\n      this.keyMap = new Map();\n      this.firstKey = null;\n      this.lastKey = null;\n      this.iterable = nodes;\n      expandedKeys = expandedKeys || new Set();\n      let visit = node => {\n        this.keyMap.set(node.key, node);\n        if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) for (let child of node.childNodes) visit(child);\n      };\n      for (let node of nodes) visit(node);\n      let last = null;\n      let index = 0;\n      for (let [key, node] of this.keyMap) {\n        if (last) {\n          last.nextKey = key;\n          node.prevKey = last.key;\n        } else {\n          this.firstKey = key;\n          node.prevKey = undefined;\n        }\n        if (node.type === 'item') node.index = index++;\n        last = node;\n        // Set nextKey as undefined since this might be the last node\n        // If it isn't the last node, last.nextKey will properly set at start of new loop\n        last.nextKey = undefined;\n      }\n      var _last_key;\n      this.lastKey = (_last_key = last === null || last === void 0 ? void 0 : last.key) !== null && _last_key !== void 0 ? _last_key : null;\n    }\n  }\n});","lineCount":91,"map":[[7,2,80,0,"Object"],[7,8,80,0],[7,9,80,0,"defineProperty"],[7,23,80,0],[7,24,80,0,"exports"],[7,31,80,0],[8,4,80,0,"enumerable"],[8,14,80,0],[9,4,80,0,"get"],[9,7,80,0],[9,18,80,0,"get"],[9,19,80,0],[10,6,80,0],[10,13,80,8,"$05ca4cd7c4a5a999$export$863faf230ee2118a"],[10,54,80,49],[11,4,80,49],[12,2,80,49],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,2,11,4],[24,8,11,10,"$05ca4cd7c4a5a999$export$863faf230ee2118a"],[24,49,11,51],[24,50,11,52],[25,4,12,4],[25,6,12,6,"Symbol"],[25,12,12,12],[25,13,12,13,"iterator"],[25,21,12,21],[25,25,12,25],[26,6,13,8],[26,13,13,15],[26,17,13,19],[26,18,13,20,"iterable"],[26,26,13,28],[27,4,14,4],[28,4,15,4],[28,8,15,8,"size"],[28,12,15,12,"size"],[28,13,15,12],[28,15,15,15],[29,6,16,8],[29,13,16,15],[29,17,16,19],[29,18,16,20,"keyMap"],[29,24,16,26],[29,25,16,27,"size"],[29,29,16,31],[30,4,17,4],[31,4,18,4,"getKeys"],[31,11,18,11,"getKeys"],[31,12,18,11],[31,14,18,14],[32,6,19,8],[32,13,19,15],[32,17,19,19],[32,18,19,20,"keyMap"],[32,24,19,26],[32,25,19,27,"keys"],[32,29,19,31],[32,30,19,32],[32,31,19,33],[33,4,20,4],[34,4,21,4,"getKeyBefore"],[34,16,21,16,"getKeyBefore"],[34,17,21,17,"key"],[34,20,21,20],[34,22,21,22],[35,6,22,8],[35,10,22,12,"node"],[35,14,22,16],[35,17,22,19],[35,21,22,23],[35,22,22,24,"keyMap"],[35,28,22,30],[35,29,22,31,"get"],[35,32,22,34],[35,33,22,35,"key"],[35,36,22,38],[35,37,22,39],[36,6,23,8],[36,10,23,12,"_node_prevKey"],[36,23,23,25],[37,6,24,8],[37,13,24,15,"node"],[37,17,24,19],[37,20,24,22],[37,21,24,23,"_node_prevKey"],[37,34,24,36],[37,37,24,39,"node"],[37,41,24,43],[37,42,24,44,"prevKey"],[37,49,24,51],[37,55,24,57],[37,59,24,61],[37,63,24,65,"_node_prevKey"],[37,76,24,78],[37,81,24,83],[37,86,24,88],[37,87,24,89],[37,90,24,92,"_node_prevKey"],[37,103,24,105],[37,106,24,108],[37,110,24,112],[37,113,24,115],[37,117,24,119],[38,4,25,4],[39,4,26,4,"getKeyAfter"],[39,15,26,15,"getKeyAfter"],[39,16,26,16,"key"],[39,19,26,19],[39,21,26,21],[40,6,27,8],[40,10,27,12,"node"],[40,14,27,16],[40,17,27,19],[40,21,27,23],[40,22,27,24,"keyMap"],[40,28,27,30],[40,29,27,31,"get"],[40,32,27,34],[40,33,27,35,"key"],[40,36,27,38],[40,37,27,39],[41,6,28,8],[41,10,28,12,"_node_nextKey"],[41,23,28,25],[42,6,29,8],[42,13,29,15,"node"],[42,17,29,19],[42,20,29,22],[42,21,29,23,"_node_nextKey"],[42,34,29,36],[42,37,29,39,"node"],[42,41,29,43],[42,42,29,44,"nextKey"],[42,49,29,51],[42,55,29,57],[42,59,29,61],[42,63,29,65,"_node_nextKey"],[42,76,29,78],[42,81,29,83],[42,86,29,88],[42,87,29,89],[42,90,29,92,"_node_nextKey"],[42,103,29,105],[42,106,29,108],[42,110,29,112],[42,113,29,115],[42,117,29,119],[43,4,30,4],[44,4,31,4,"getFirstKey"],[44,15,31,15,"getFirstKey"],[44,16,31,15],[44,18,31,18],[45,6,32,8],[45,13,32,15],[45,17,32,19],[45,18,32,20,"firstKey"],[45,26,32,28],[46,4,33,4],[47,4,34,4,"getLastKey"],[47,14,34,14,"getLastKey"],[47,15,34,14],[47,17,34,17],[48,6,35,8],[48,13,35,15],[48,17,35,19],[48,18,35,20,"lastKey"],[48,25,35,27],[49,4,36,4],[50,4,37,4,"getItem"],[50,11,37,11,"getItem"],[50,12,37,12,"key"],[50,15,37,15],[50,17,37,17],[51,6,38,8],[51,10,38,12,"_this_keyMap_get"],[51,26,38,28],[52,6,39,8],[52,13,39,15],[52,14,39,16,"_this_keyMap_get"],[52,30,39,32],[52,33,39,35],[52,37,39,39],[52,38,39,40,"keyMap"],[52,44,39,46],[52,45,39,47,"get"],[52,48,39,50],[52,49,39,51,"key"],[52,52,39,54],[52,53,39,55],[52,59,39,61],[52,63,39,65],[52,67,39,69,"_this_keyMap_get"],[52,83,39,85],[52,88,39,90],[52,93,39,95],[52,94,39,96],[52,97,39,99,"_this_keyMap_get"],[52,113,39,115],[52,116,39,118],[52,120,39,122],[53,4,40,4],[54,4,41,4,"at"],[54,6,41,6,"at"],[54,7,41,7,"idx"],[54,10,41,10],[54,12,41,12],[55,6,42,8],[55,12,42,14,"keys"],[55,16,42,18],[55,19,42,21],[55,20,43,12],[55,23,43,15],[55,27,43,19],[55,28,43,20,"getKeys"],[55,35,43,27],[55,36,43,28],[55,37,43,29],[55,38,44,9],[56,6,45,8],[56,13,45,15],[56,17,45,19],[56,18,45,20,"getItem"],[56,25,45,27],[56,26,45,28,"keys"],[56,30,45,32],[56,31,45,33,"idx"],[56,34,45,36],[56,35,45,37],[56,36,45,38],[57,4,46,4],[58,4,47,4,"constructor"],[58,15,47,15,"constructor"],[58,16,47,16,"nodes"],[58,21,47,21],[58,23,47,23],[59,6,47,25,"expandedKeys"],[59,18,47,37],[59,20,47,39,"expandedKeys"],[60,4,47,52],[60,5,47,53],[60,8,47,56],[60,9,47,57],[60,10,47,58],[60,12,47,59],[61,6,48,8],[61,10,48,12],[61,11,48,13,"keyMap"],[61,17,48,19],[61,20,48,22],[61,24,48,26,"Map"],[61,27,48,29],[61,28,48,30],[61,29,48,31],[62,6,49,8],[62,10,49,12],[62,11,49,13,"firstKey"],[62,19,49,21],[62,22,49,24],[62,26,49,28],[63,6,50,8],[63,10,50,12],[63,11,50,13,"lastKey"],[63,18,50,20],[63,21,50,23],[63,25,50,27],[64,6,51,8],[64,10,51,12],[64,11,51,13,"iterable"],[64,19,51,21],[64,22,51,24,"nodes"],[64,27,51,29],[65,6,52,8,"expandedKeys"],[65,18,52,20],[65,21,52,23,"expandedKeys"],[65,33,52,35],[65,37,52,39],[65,41,52,43,"Set"],[65,44,52,46],[65,45,52,47],[65,46,52,48],[66,6,53,8],[66,10,53,12,"visit"],[66,15,53,17],[66,18,53,21,"node"],[66,22,53,25],[66,26,53,28],[67,8,54,12],[67,12,54,16],[67,13,54,17,"keyMap"],[67,19,54,23],[67,20,54,24,"set"],[67,23,54,27],[67,24,54,28,"node"],[67,28,54,32],[67,29,54,33,"key"],[67,32,54,36],[67,34,54,38,"node"],[67,38,54,42],[67,39,54,43],[68,8,55,12],[68,12,55,16,"node"],[68,16,55,20],[68,17,55,21,"childNodes"],[68,27,55,31],[68,32,55,36,"node"],[68,36,55,40],[68,37,55,41,"type"],[68,41,55,45],[68,46,55,50],[68,55,55,59],[68,59,55,63,"expandedKeys"],[68,71,55,75],[68,72,55,76,"has"],[68,75,55,79],[68,76,55,80,"node"],[68,80,55,84],[68,81,55,85,"key"],[68,84,55,88],[68,85,55,89],[68,86,55,90],[68,88,55,92],[68,93,55,97],[68,97,55,101,"child"],[68,102,55,106],[68,106,55,110,"node"],[68,110,55,114],[68,111,55,115,"childNodes"],[68,121,55,125],[68,123,55,126,"visit"],[68,128,55,131],[68,129,55,132,"child"],[68,134,55,137],[68,135,55,138],[69,6,56,8],[69,7,56,9],[70,6,57,8],[70,11,57,13],[70,15,57,17,"node"],[70,19,57,21],[70,23,57,25,"nodes"],[70,28,57,30],[70,30,57,31,"visit"],[70,35,57,36],[70,36,57,37,"node"],[70,40,57,41],[70,41,57,42],[71,6,58,8],[71,10,58,12,"last"],[71,14,58,16],[71,17,58,19],[71,21,58,23],[72,6,59,8],[72,10,59,12,"index"],[72,15,59,17],[72,18,59,20],[72,19,59,21],[73,6,60,8],[73,11,60,13],[73,15,60,17],[73,16,60,18,"key"],[73,19,60,21],[73,21,60,23,"node"],[73,25,60,27],[73,26,60,28],[73,30,60,32],[73,34,60,36],[73,35,60,37,"keyMap"],[73,41,60,43],[73,43,60,44],[74,8,61,12],[74,12,61,16,"last"],[74,16,61,20],[74,18,61,22],[75,10,62,16,"last"],[75,14,62,20],[75,15,62,21,"nextKey"],[75,22,62,28],[75,25,62,31,"key"],[75,28,62,34],[76,10,63,16,"node"],[76,14,63,20],[76,15,63,21,"prevKey"],[76,22,63,28],[76,25,63,31,"last"],[76,29,63,35],[76,30,63,36,"key"],[76,33,63,39],[77,8,64,12],[77,9,64,13],[77,15,64,19],[78,10,65,16],[78,14,65,20],[78,15,65,21,"firstKey"],[78,23,65,29],[78,26,65,32,"key"],[78,29,65,35],[79,10,66,16,"node"],[79,14,66,20],[79,15,66,21,"prevKey"],[79,22,66,28],[79,25,66,31,"undefined"],[79,34,66,40],[80,8,67,12],[81,8,68,12],[81,12,68,16,"node"],[81,16,68,20],[81,17,68,21,"type"],[81,21,68,25],[81,26,68,30],[81,32,68,36],[81,34,68,38,"node"],[81,38,68,42],[81,39,68,43,"index"],[81,44,68,48],[81,47,68,51,"index"],[81,52,68,56],[81,54,68,58],[82,8,69,12,"last"],[82,12,69,16],[82,15,69,19,"node"],[82,19,69,23],[83,8,70,12],[84,8,71,12],[85,8,72,12,"last"],[85,12,72,16],[85,13,72,17,"nextKey"],[85,20,72,24],[85,23,72,27,"undefined"],[85,32,72,36],[86,6,73,8],[87,6,74,8],[87,10,74,12,"_last_key"],[87,19,74,21],[88,6,75,8],[88,10,75,12],[88,11,75,13,"lastKey"],[88,18,75,20],[88,21,75,23],[88,22,75,24,"_last_key"],[88,31,75,33],[88,34,75,36,"last"],[88,38,75,40],[88,43,75,45],[88,47,75,49],[88,51,75,53,"last"],[88,55,75,57],[88,60,75,62],[88,65,75,67],[88,66,75,68],[88,69,75,71],[88,74,75,76],[88,75,75,77],[88,78,75,80,"last"],[88,82,75,84],[88,83,75,85,"key"],[88,86,75,88],[88,92,75,94],[88,96,75,98],[88,100,75,102,"_last_key"],[88,109,75,111],[88,114,75,116],[88,119,75,121],[88,120,75,122],[88,123,75,125,"_last_key"],[88,132,75,134],[88,135,75,137],[88,139,75,141],[89,4,76,4],[90,2,77,0],[91,0,77,1],[91,3]],"functionMap":{"names":["<global>","$05ca4cd7c4a5a999$export$863faf230ee2118a","$05ca4cd7c4a5a999$export$863faf230ee2118a#@@iterator","$05ca4cd7c4a5a999$export$863faf230ee2118a#get__size","$05ca4cd7c4a5a999$export$863faf230ee2118a#getKeys","$05ca4cd7c4a5a999$export$863faf230ee2118a#getKeyBefore","$05ca4cd7c4a5a999$export$863faf230ee2118a#getKeyAfter","$05ca4cd7c4a5a999$export$863faf230ee2118a#getFirstKey","$05ca4cd7c4a5a999$export$863faf230ee2118a#getLastKey","$05ca4cd7c4a5a999$export$863faf230ee2118a#getItem","$05ca4cd7c4a5a999$export$863faf230ee2118a#at","$05ca4cd7c4a5a999$export$863faf230ee2118a#constructor","visit"],"mappings":"AAA;ICU;ICC;KDE;IEC;KFE;IGC;KHE;IIC;KJI;IKC;KLI;IMC;KNE;IOC;KPE;IQC;KRG;ISC;KTK;IUC;oBCM;SDG;KVoB;CDC"},"hasCjsExports":false},"type":"js/module"}]}