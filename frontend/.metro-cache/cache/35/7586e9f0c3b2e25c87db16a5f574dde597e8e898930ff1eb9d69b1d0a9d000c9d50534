{"dependencies":[{"name":"@firebase/app","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":125,"index":125}}],"key":"yqoiliQRTUQ9dvZxqpPLznnKsQ4=","exportNames":["*"],"imports":1}},{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":126},"end":{"line":2,"column":371,"index":497}}],"key":"BkBYK9w6fHruAfQL7S4qWsYds2s=","exportNames":["*"],"imports":1}},{"name":"@firebase/logger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":498},"end":{"line":3,"column":52,"index":550}}],"key":"ORGtDHPxrSEUSLP9WZfOMGsHx5g=","exportNames":["*"],"imports":1}},{"name":"@firebase/component","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":551},"end":{"line":4,"column":48,"index":599}}],"key":"Us9erpYucP7UHYJWKKSJ2tNZDvI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"$\", {\n    enumerable: true,\n    get: function () {\n      return SAMLAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"A\", {\n    enumerable: true,\n    get: function () {\n      return ActionCodeOperation;\n    }\n  });\n  Object.defineProperty(exports, \"B\", {\n    enumerable: true,\n    get: function () {\n      return useDeviceLanguage;\n    }\n  });\n  Object.defineProperty(exports, \"C\", {\n    enumerable: true,\n    get: function () {\n      return updateCurrentUser;\n    }\n  });\n  Object.defineProperty(exports, \"D\", {\n    enumerable: true,\n    get: function () {\n      return signOut;\n    }\n  });\n  Object.defineProperty(exports, \"E\", {\n    enumerable: true,\n    get: function () {\n      return revokeAccessToken;\n    }\n  });\n  Object.defineProperty(exports, \"F\", {\n    enumerable: true,\n    get: function () {\n      return FactorId;\n    }\n  });\n  Object.defineProperty(exports, \"G\", {\n    enumerable: true,\n    get: function () {\n      return deleteUser;\n    }\n  });\n  Object.defineProperty(exports, \"H\", {\n    enumerable: true,\n    get: function () {\n      return debugErrorMap;\n    }\n  });\n  Object.defineProperty(exports, \"I\", {\n    enumerable: true,\n    get: function () {\n      return prodErrorMap;\n    }\n  });\n  Object.defineProperty(exports, \"J\", {\n    enumerable: true,\n    get: function () {\n      return AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;\n    }\n  });\n  Object.defineProperty(exports, \"K\", {\n    enumerable: true,\n    get: function () {\n      return initializeAuth;\n    }\n  });\n  Object.defineProperty(exports, \"L\", {\n    enumerable: true,\n    get: function () {\n      return connectAuthEmulator;\n    }\n  });\n  Object.defineProperty(exports, \"M\", {\n    enumerable: true,\n    get: function () {\n      return AuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"N\", {\n    enumerable: true,\n    get: function () {\n      return EmailAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"O\", {\n    enumerable: true,\n    get: function () {\n      return OperationType;\n    }\n  });\n  Object.defineProperty(exports, \"P\", {\n    enumerable: true,\n    get: function () {\n      return PhoneAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Q\", {\n    enumerable: true,\n    get: function () {\n      return OAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"R\", {\n    enumerable: true,\n    get: function () {\n      return RecaptchaVerifier;\n    }\n  });\n  Object.defineProperty(exports, \"S\", {\n    enumerable: true,\n    get: function () {\n      return SignInMethod;\n    }\n  });\n  Object.defineProperty(exports, \"T\", {\n    enumerable: true,\n    get: function () {\n      return TotpMultiFactorGenerator;\n    }\n  });\n  Object.defineProperty(exports, \"U\", {\n    enumerable: true,\n    get: function () {\n      return PhoneAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"V\", {\n    enumerable: true,\n    get: function () {\n      return inMemoryPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"W\", {\n    enumerable: true,\n    get: function () {\n      return EmailAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"X\", {\n    enumerable: true,\n    get: function () {\n      return FacebookAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Y\", {\n    enumerable: true,\n    get: function () {\n      return GoogleAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Z\", {\n    enumerable: true,\n    get: function () {\n      return GithubAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"_\", {\n    enumerable: true,\n    get: function () {\n      return OAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"a\", {\n    enumerable: true,\n    get: function () {\n      return browserCookiePersistence;\n    }\n  });\n  Object.defineProperty(exports, \"a0\", {\n    enumerable: true,\n    get: function () {\n      return TwitterAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"a1\", {\n    enumerable: true,\n    get: function () {\n      return signInAnonymously;\n    }\n  });\n  Object.defineProperty(exports, \"a2\", {\n    enumerable: true,\n    get: function () {\n      return signInWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a3\", {\n    enumerable: true,\n    get: function () {\n      return linkWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a4\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a5\", {\n    enumerable: true,\n    get: function () {\n      return signInWithCustomToken;\n    }\n  });\n  Object.defineProperty(exports, \"a6\", {\n    enumerable: true,\n    get: function () {\n      return sendPasswordResetEmail;\n    }\n  });\n  Object.defineProperty(exports, \"a7\", {\n    enumerable: true,\n    get: function () {\n      return confirmPasswordReset;\n    }\n  });\n  Object.defineProperty(exports, \"a8\", {\n    enumerable: true,\n    get: function () {\n      return applyActionCode;\n    }\n  });\n  Object.defineProperty(exports, \"a9\", {\n    enumerable: true,\n    get: function () {\n      return checkActionCode;\n    }\n  });\n  Object.defineProperty(exports, \"aA\", {\n    enumerable: true,\n    get: function () {\n      return _getProjectConfig;\n    }\n  });\n  Object.defineProperty(exports, \"aB\", {\n    enumerable: true,\n    get: function () {\n      return _isIOS7Or8;\n    }\n  });\n  Object.defineProperty(exports, \"aC\", {\n    enumerable: true,\n    get: function () {\n      return _createError;\n    }\n  });\n  Object.defineProperty(exports, \"aD\", {\n    enumerable: true,\n    get: function () {\n      return _assert;\n    }\n  });\n  Object.defineProperty(exports, \"aE\", {\n    enumerable: true,\n    get: function () {\n      return AuthEventManager;\n    }\n  });\n  Object.defineProperty(exports, \"aF\", {\n    enumerable: true,\n    get: function () {\n      return _getInstance;\n    }\n  });\n  Object.defineProperty(exports, \"aG\", {\n    enumerable: true,\n    get: function () {\n      return _persistenceKeyName;\n    }\n  });\n  Object.defineProperty(exports, \"aH\", {\n    enumerable: true,\n    get: function () {\n      return _getRedirectResult;\n    }\n  });\n  Object.defineProperty(exports, \"aI\", {\n    enumerable: true,\n    get: function () {\n      return _overrideRedirectResult;\n    }\n  });\n  Object.defineProperty(exports, \"aJ\", {\n    enumerable: true,\n    get: function () {\n      return _clearRedirectOutcomes;\n    }\n  });\n  Object.defineProperty(exports, \"aK\", {\n    enumerable: true,\n    get: function () {\n      return _castAuth;\n    }\n  });\n  Object.defineProperty(exports, \"aL\", {\n    enumerable: true,\n    get: function () {\n      return UserImpl;\n    }\n  });\n  Object.defineProperty(exports, \"aM\", {\n    enumerable: true,\n    get: function () {\n      return AuthImpl;\n    }\n  });\n  Object.defineProperty(exports, \"aN\", {\n    enumerable: true,\n    get: function () {\n      return _getClientVersion;\n    }\n  });\n  Object.defineProperty(exports, \"aO\", {\n    enumerable: true,\n    get: function () {\n      return _generateEventId;\n    }\n  });\n  Object.defineProperty(exports, \"aP\", {\n    enumerable: true,\n    get: function () {\n      return AuthPopup;\n    }\n  });\n  Object.defineProperty(exports, \"aQ\", {\n    enumerable: true,\n    get: function () {\n      return FetchProvider;\n    }\n  });\n  Object.defineProperty(exports, \"aR\", {\n    enumerable: true,\n    get: function () {\n      return SAMLAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"aa\", {\n    enumerable: true,\n    get: function () {\n      return verifyPasswordResetCode;\n    }\n  });\n  Object.defineProperty(exports, \"ab\", {\n    enumerable: true,\n    get: function () {\n      return createUserWithEmailAndPassword;\n    }\n  });\n  Object.defineProperty(exports, \"ac\", {\n    enumerable: true,\n    get: function () {\n      return signInWithEmailAndPassword;\n    }\n  });\n  Object.defineProperty(exports, \"ad\", {\n    enumerable: true,\n    get: function () {\n      return sendSignInLinkToEmail;\n    }\n  });\n  Object.defineProperty(exports, \"ae\", {\n    enumerable: true,\n    get: function () {\n      return isSignInWithEmailLink;\n    }\n  });\n  Object.defineProperty(exports, \"af\", {\n    enumerable: true,\n    get: function () {\n      return signInWithEmailLink;\n    }\n  });\n  Object.defineProperty(exports, \"ag\", {\n    enumerable: true,\n    get: function () {\n      return fetchSignInMethodsForEmail;\n    }\n  });\n  Object.defineProperty(exports, \"ah\", {\n    enumerable: true,\n    get: function () {\n      return sendEmailVerification;\n    }\n  });\n  Object.defineProperty(exports, \"ai\", {\n    enumerable: true,\n    get: function () {\n      return verifyBeforeUpdateEmail;\n    }\n  });\n  Object.defineProperty(exports, \"aj\", {\n    enumerable: true,\n    get: function () {\n      return ActionCodeURL;\n    }\n  });\n  Object.defineProperty(exports, \"ak\", {\n    enumerable: true,\n    get: function () {\n      return parseActionCodeURL;\n    }\n  });\n  Object.defineProperty(exports, \"al\", {\n    enumerable: true,\n    get: function () {\n      return updateProfile;\n    }\n  });\n  Object.defineProperty(exports, \"am\", {\n    enumerable: true,\n    get: function () {\n      return updateEmail;\n    }\n  });\n  Object.defineProperty(exports, \"an\", {\n    enumerable: true,\n    get: function () {\n      return updatePassword;\n    }\n  });\n  Object.defineProperty(exports, \"ao\", {\n    enumerable: true,\n    get: function () {\n      return getIdToken;\n    }\n  });\n  Object.defineProperty(exports, \"ap\", {\n    enumerable: true,\n    get: function () {\n      return getIdTokenResult;\n    }\n  });\n  Object.defineProperty(exports, \"aq\", {\n    enumerable: true,\n    get: function () {\n      return unlink;\n    }\n  });\n  Object.defineProperty(exports, \"ar\", {\n    enumerable: true,\n    get: function () {\n      return getAdditionalUserInfo;\n    }\n  });\n  Object.defineProperty(exports, \"as\", {\n    enumerable: true,\n    get: function () {\n      return reload;\n    }\n  });\n  Object.defineProperty(exports, \"at\", {\n    enumerable: true,\n    get: function () {\n      return getMultiFactorResolver;\n    }\n  });\n  Object.defineProperty(exports, \"au\", {\n    enumerable: true,\n    get: function () {\n      return multiFactor;\n    }\n  });\n  Object.defineProperty(exports, \"av\", {\n    enumerable: true,\n    get: function () {\n      return debugAssert;\n    }\n  });\n  Object.defineProperty(exports, \"aw\", {\n    enumerable: true,\n    get: function () {\n      return _isIOS;\n    }\n  });\n  Object.defineProperty(exports, \"ax\", {\n    enumerable: true,\n    get: function () {\n      return _isAndroid;\n    }\n  });\n  Object.defineProperty(exports, \"ay\", {\n    enumerable: true,\n    get: function () {\n      return _fail;\n    }\n  });\n  Object.defineProperty(exports, \"az\", {\n    enumerable: true,\n    get: function () {\n      return _getRedirectUrl;\n    }\n  });\n  Object.defineProperty(exports, \"b\", {\n    enumerable: true,\n    get: function () {\n      return browserLocalPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"c\", {\n    enumerable: true,\n    get: function () {\n      return browserSessionPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"d\", {\n    enumerable: true,\n    get: function () {\n      return signInWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"e\", {\n    enumerable: true,\n    get: function () {\n      return linkWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"f\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"g\", {\n    enumerable: true,\n    get: function () {\n      return signInWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"h\", {\n    enumerable: true,\n    get: function () {\n      return linkWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"i\", {\n    enumerable: true,\n    get: function () {\n      return indexedDBLocalPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"j\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"k\", {\n    enumerable: true,\n    get: function () {\n      return getRedirectResult;\n    }\n  });\n  Object.defineProperty(exports, \"l\", {\n    enumerable: true,\n    get: function () {\n      return linkWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"m\", {\n    enumerable: true,\n    get: function () {\n      return browserPopupRedirectResolver;\n    }\n  });\n  Object.defineProperty(exports, \"n\", {\n    enumerable: true,\n    get: function () {\n      return PhoneMultiFactorGenerator;\n    }\n  });\n  Object.defineProperty(exports, \"o\", {\n    enumerable: true,\n    get: function () {\n      return TotpSecret;\n    }\n  });\n  Object.defineProperty(exports, \"p\", {\n    enumerable: true,\n    get: function () {\n      return getAuth;\n    }\n  });\n  Object.defineProperty(exports, \"q\", {\n    enumerable: true,\n    get: function () {\n      return ProviderId;\n    }\n  });\n  Object.defineProperty(exports, \"r\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"s\", {\n    enumerable: true,\n    get: function () {\n      return signInWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"t\", {\n    enumerable: true,\n    get: function () {\n      return setPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"u\", {\n    enumerable: true,\n    get: function () {\n      return updatePhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"v\", {\n    enumerable: true,\n    get: function () {\n      return initializeRecaptchaConfig;\n    }\n  });\n  Object.defineProperty(exports, \"w\", {\n    enumerable: true,\n    get: function () {\n      return validatePassword;\n    }\n  });\n  Object.defineProperty(exports, \"x\", {\n    enumerable: true,\n    get: function () {\n      return onIdTokenChanged;\n    }\n  });\n  Object.defineProperty(exports, \"y\", {\n    enumerable: true,\n    get: function () {\n      return beforeAuthStateChanged;\n    }\n  });\n  Object.defineProperty(exports, \"z\", {\n    enumerable: true,\n    get: function () {\n      return onAuthStateChanged;\n    }\n  });\n  var _firebaseApp = require(_dependencyMap[0], \"@firebase/app\");\n  var _firebaseUtil = require(_dependencyMap[1], \"@firebase/util\");\n  var _firebaseLogger = require(_dependencyMap[2], \"@firebase/logger\");\n  var _firebaseComponent = require(_dependencyMap[3], \"@firebase/component\");\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * An enum of factors that may be used for multifactor authentication.\n   *\n   * @public\n   */\n  const FactorId = {\n    /** Phone as second factor */\n    PHONE: 'phone',\n    TOTP: 'totp'\n  };\n  /**\n   * Enumeration of supported providers.\n   *\n   * @public\n   */\n  const ProviderId = {\n    /** Facebook provider ID */\n    FACEBOOK: 'facebook.com',\n    /** GitHub provider ID */\n    GITHUB: 'github.com',\n    /** Google provider ID */\n    GOOGLE: 'google.com',\n    /** Password provider */\n    PASSWORD: 'password',\n    /** Phone provider */\n    PHONE: 'phone',\n    /** Twitter provider ID */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported sign-in methods.\n   *\n   * @public\n   */\n  const SignInMethod = {\n    /** Email link sign in method */\n    EMAIL_LINK: 'emailLink',\n    /** Email/password sign in method */\n    EMAIL_PASSWORD: 'password',\n    /** Facebook sign in method */\n    FACEBOOK: 'facebook.com',\n    /** GitHub sign in method */\n    GITHUB: 'github.com',\n    /** Google sign in method */\n    GOOGLE: 'google.com',\n    /** Phone sign in method */\n    PHONE: 'phone',\n    /** Twitter sign in method */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported operation types.\n   *\n   * @public\n   */\n  const OperationType = {\n    /** Operation involving linking an additional provider to an already signed-in user. */\n    LINK: 'link',\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\n    REAUTHENTICATE: 'reauthenticate',\n    /** Operation involving signing in a user. */\n    SIGN_IN: 'signIn'\n  };\n  /**\n   * An enumeration of the possible email action types.\n   *\n   * @public\n   */\n  const ActionCodeOperation = {\n    /** The email link sign-in action. */\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n    /** The password reset action. */\n    PASSWORD_RESET: 'PASSWORD_RESET',\n    /** The email revocation action. */\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\n    /** The revert second factor addition email action. */\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n    /** The revert second factor addition email action. */\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n    /** The email verification action. */\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _debugErrorMap() {\n    return {\n      [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n      [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n      [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',\n      [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',\n      [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',\n      [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',\n      [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n      [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n      [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n      [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n      [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',\n      [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',\n      [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n      [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n      [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.',\n      [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n      [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n      [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n      [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',\n      [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n      [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.',\n      [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',\n      [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n      [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',\n      [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n      [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n      [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n      [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n      [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n      [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n      [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n      [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n      [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',\n      [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',\n      [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',\n      [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',\n      [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n      [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n      [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',\n      [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n      [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',\n      [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n      [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n      [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n      [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n      [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',\n      [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',\n      [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n      [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n      [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n      [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n      [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',\n      [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n      [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n      [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n      [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n      [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n      [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n      [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n      [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n      [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',\n      [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n      [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n      [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',\n      [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',\n      [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.',\n      [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n      [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n      [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n      [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n      [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n      [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n      [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n      [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n      [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n      [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n      [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n      [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n      [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',\n      [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',\n      [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n      [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n      [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n      [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n      [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n      [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',\n      [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n      [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n      [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n      [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n      [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n      [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.',\n      [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n      [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n      [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n      [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n      [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n      [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n      [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n      [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n      [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n      [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n      [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' + 'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n    };\n  }\n  function _prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return {\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'\n    };\n  }\n  /**\n   * A verbose error map with detailed descriptions for most error codes.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const debugErrorMap = _debugErrorMap;\n  /**\n   * A minimal error map with all verbose error messages stripped.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const prodErrorMap = _prodErrorMap;\n  const _DEFAULT_AUTH_ERROR_FACTORY = new _firebaseUtil.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n  /**\n   * A map of potential `Auth` error codes, for easier comparison with errors\n   * thrown by the SDK.\n   *\n   * @remarks\n   * Note that you can't tree-shake individual keys\n   * in the map, so by using the map you might substantially increase your\n   * bundle size.\n   *\n   * @public\n   */\n  const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n    ARGUMENT_ERROR: 'auth/argument-error',\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n    CODE_EXPIRED: 'auth/code-expired',\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n    EMAIL_EXISTS: 'auth/email-already-in-use',\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n    INTERNAL_ERROR: 'auth/internal-error',\n    INVALID_API_KEY: 'auth/invalid-api-key',\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n    INVALID_APP_ID: 'auth/invalid-app-id',\n    INVALID_AUTH: 'auth/invalid-user-token',\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n    INVALID_CODE: 'auth/invalid-verification-code',\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n    INVALID_EMAIL: 'auth/invalid-email',\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\n    INVALID_PASSWORD: 'auth/wrong-password',\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n    INVALID_SENDER: 'auth/invalid-sender',\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n    MISSING_CODE: 'auth/missing-verification-code',\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\n    MODULE_DESTROYED: 'auth/app-deleted',\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n    NULL_USER: 'auth/null-user',\n    NO_AUTH_EVENT: 'auth/no-auth-event',\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n    POPUP_BLOCKED: 'auth/popup-blocked',\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n    TIMEOUT: 'auth/timeout',\n    TOKEN_EXPIRED: 'auth/user-token-expired',\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\n    USER_CANCELLED: 'auth/user-cancelled',\n    USER_DELETED: 'auth/user-not-found',\n    USER_DISABLED: 'auth/user-disabled',\n    USER_MISMATCH: 'auth/user-mismatch',\n    USER_SIGNED_OUT: 'auth/user-signed-out',\n    WEAK_PASSWORD: 'auth/weak-password',\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n    ALREADY_INITIALIZED: 'auth/already-initialized',\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n    INVALID_REQ_TYPE: 'auth/invalid-req-type',\n    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const logClient = new _firebaseLogger.Logger('@firebase/auth');\n  function _logWarn(msg, ...args) {\n    if (logClient.logLevel <= _firebaseLogger.LogLevel.WARN) {\n      logClient.warn(`Auth (${_firebaseApp.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n  function _logError(msg, ...args) {\n    if (logClient.logLevel <= _firebaseLogger.LogLevel.ERROR) {\n      logClient.error(`Auth (${_firebaseApp.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _fail(authOrCode, ...rest) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n  function _createError(authOrCode, ...rest) {\n    return createErrorInternal(authOrCode, ...rest);\n  }\n  function _errorWithCustomMessage(auth, code, message) {\n    const errorMap = {\n      ...prodErrorMap(),\n      [code]: message\n    };\n    const factory = new _firebaseUtil.ErrorFactory('auth', 'Firebase', errorMap);\n    return factory.create(code, {\n      appName: auth.name\n    });\n  }\n  function _serverAppCurrentUserOperationNotSupportedError(auth) {\n    return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n  }\n  function _assertInstanceOf(auth, object, instance) {\n    const constructorInstance = instance;\n    if (!(object instanceof constructorInstance)) {\n      if (constructorInstance.name !== object.constructor.name) {\n        _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);\n    }\n  }\n  function createErrorInternal(authOrCode, ...rest) {\n    if (typeof authOrCode !== 'string') {\n      const code = rest[0];\n      const fullParams = [...rest.slice(1)];\n      if (fullParams[0]) {\n        fullParams[0].appName = authOrCode.name;\n      }\n      return authOrCode._errorFactory.create(code, ...fullParams);\n    }\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n  }\n  function _assert(assertion, authOrCode, ...rest) {\n    if (!assertion) {\n      throw createErrorInternal(authOrCode, ...rest);\n    }\n  }\n  /**\n   * Unconditionally fails, throwing an internal error with the given message.\n   *\n   * @param failure type of failure encountered\n   * @throws Error\n   */\n  function debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\n    _logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n  }\n  /**\n   * Fails if the given assertion condition is false, throwing an Error with the\n   * given message if it did.\n   *\n   * @param assertion\n   * @param message\n   */\n  function debugAssert(assertion, message) {\n    if (!assertion) {\n      debugFail(message);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getCurrentUrl() {\n    return typeof self !== 'undefined' && self.location?.href || '';\n  }\n  function _isHttpOrHttps() {\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n  }\n  function _getCurrentScheme() {\n    return typeof self !== 'undefined' && self.location?.protocol || null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine whether the browser is working online\n   */\n  function _isOnline() {\n    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    _isHttpOrHttps() || (0, _firebaseUtil.isBrowserExtension)() || 'connection' in navigator)) {\n      return navigator.onLine;\n    }\n    // If we can't determine the state, assume it is online.\n    return true;\n  }\n  function _getUserLanguage() {\n    if (typeof navigator === 'undefined') {\n      return null;\n    }\n    const navigatorLanguage = navigator;\n    return (\n      // Most reliable, but only supported in Chrome/Firefox.\n      navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n      // Supported in most browsers, but returns the language of the browser\n      // UI, not the language set in browser settings.\n      navigatorLanguage.language ||\n      // Couldn't determine language.\n      null\n    );\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * A structure to help pick between a range of long and short delay durations\n   * depending on the current environment. In general, the long delay is used for\n   * mobile environments whereas short delays are used for desktop environments.\n   */\n  class Delay {\n    constructor(shortDelay, longDelay) {\n      this.shortDelay = shortDelay;\n      this.longDelay = longDelay;\n      // Internal error when improperly initialized.\n      debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n      this.isMobile = (0, _firebaseUtil.isMobileCordova)() || (0, _firebaseUtil.isReactNative)();\n    }\n    get() {\n      if (!_isOnline()) {\n        // Pick the shorter timeout.\n        return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n      }\n      // If running in a mobile environment, return the long delay, otherwise\n      // return the short delay.\n      // This could be improved in the future to dynamically change based on other\n      // variables instead of just reading the current environment.\n      return this.isMobile ? this.longDelay : this.shortDelay;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _emulatorUrl(config, path) {\n    debugAssert(config.emulator, 'Emulator should always be set here');\n    const {\n      url\n    } = config.emulator;\n    if (!path) {\n      return url;\n    }\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class FetchProvider {\n    static initialize(fetchImpl, headersImpl, responseImpl) {\n      this.fetchImpl = fetchImpl;\n      if (headersImpl) {\n        this.headersImpl = headersImpl;\n      }\n      if (responseImpl) {\n        this.responseImpl = responseImpl;\n      }\n    }\n    static fetch() {\n      if (this.fetchImpl) {\n        return this.fetchImpl;\n      }\n      if (typeof self !== 'undefined' && 'fetch' in self) {\n        return self.fetch;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n        return globalThis.fetch;\n      }\n      if (typeof fetch !== 'undefined') {\n        return fetch;\n      }\n      debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static headers() {\n      if (this.headersImpl) {\n        return this.headersImpl;\n      }\n      if (typeof self !== 'undefined' && 'Headers' in self) {\n        return self.Headers;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n        return globalThis.Headers;\n      }\n      if (typeof Headers !== 'undefined') {\n        return Headers;\n      }\n      debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static response() {\n      if (this.responseImpl) {\n        return this.responseImpl;\n      }\n      if (typeof self !== 'undefined' && 'Response' in self) {\n        return self.Response;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Response) {\n        return globalThis.Response;\n      }\n      if (typeof Response !== 'undefined') {\n        return Response;\n      }\n      debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Map from errors returned by the server to errors to developer visible errors\n   */\n  const SERVER_ERROR_MAP = {\n    // Custom token errors.\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Create Auth URI errors.\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Sign in with email and password errors (some apply to sign up too).\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n    // invalid.\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n\n    // Sign up with email and password errors.\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n\n    // Verify assertion for sign in with credential errors:\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Send Password reset email errors:\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Operations that require ID token in request:\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n\n    // Other errors.\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n\n    // Phone Auth related errors.\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n\n    // Other action code errors when additional settings passed.\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n    // This is OK as this error will be caught by client side validation.\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n\n    // getProjectConfig errors when clientId is passed.\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n\n    // User actions (sign-up or deletion) disabled errors.\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n\n    // Multi factor related errors.\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n\n    // Blocking functions related errors.\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Recaptcha related errors.\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const CookieAuthProxiedEndpoints = [\"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, \"/v1/token\" /* Endpoint.TOKEN */];\n  const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\n  function _addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) {\n      return {\n        ...request,\n        tenantId: auth.tenantId\n      };\n    }\n    return request;\n  }\n  async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n      let body = {};\n      let params = {};\n      if (request) {\n        if (method === \"GET\" /* HttpMethod.GET */) {\n          params = request;\n        } else {\n          body = {\n            body: JSON.stringify(request)\n          };\n        }\n      }\n      const query = (0, _firebaseUtil.querystring)({\n        key: auth.config.apiKey,\n        ...params\n      }).slice(1);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n      if (auth.languageCode) {\n        headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n      }\n      const fetchArgs = {\n        method,\n        headers,\n        ...body\n      };\n      /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n         problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n         'RequestInitializerDict' is not implemented.\"\n         https://github.com/cloudflare/next-on-pages/issues/487 */\n      if (!(0, _firebaseUtil.isCloudflareWorker)()) {\n        fetchArgs.referrerPolicy = 'no-referrer';\n      }\n      if (auth.emulatorConfig && (0, _firebaseUtil.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        fetchArgs.credentials = 'include';\n      }\n      return FetchProvider.fetch()(await _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n    });\n  }\n  async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n    auth._canInitEmulator = false;\n    const errorMap = {\n      ...SERVER_ERROR_MAP,\n      ...customErrorMap\n    };\n    try {\n      const networkTimeout = new NetworkTimeout(auth);\n      const response = await Promise.race([fetchFn(), networkTimeout.promise]);\n      // If we've reached this point, the fetch succeeded and the networkTimeout\n      // didn't throw; clear the network timeout delay so that Node won't hang\n      networkTimeout.clearNetworkTimeout();\n      const json = await response.json();\n      if ('needConfirmation' in json) {\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n      }\n      if (response.ok && !('errorMessage' in json)) {\n        return json;\n      } else {\n        const errorMessage = response.ok ? json.errorMessage : json.error.message;\n        const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n        if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n          throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n        } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n          throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n        } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n          throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n        }\n        const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n        if (serverErrorMessage) {\n          throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n        } else {\n          _fail(auth, authError);\n        }\n      }\n    } catch (e) {\n      if (e instanceof _firebaseUtil.FirebaseError) {\n        throw e;\n      }\n      // Changing this to a different error code will log user out when there is a network error\n      // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n      // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n      _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n        'message': String(e)\n      });\n    }\n  }\n  async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n    if ('mfaPendingCredential' in serverResponse) {\n      _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n        _serverResponse: serverResponse\n      });\n    }\n    return serverResponse;\n  }\n  async function _getFinalTarget(auth, host, path, query) {\n    const base = `${host}${path}?${query}`;\n    const authInternal = auth;\n    const finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;\n    // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n    // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n    // from the response\n    if (CookieAuthProxiedEndpoints.includes(path)) {\n      // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n      // here since auth initialization calls this function.\n      await authInternal._persistenceManagerAvailable;\n      if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n        const cookiePersistence = authInternal._getPersistence();\n        return cookiePersistence._getFinalTarget(finalTarget).toString();\n      }\n    }\n    return finalTarget;\n  }\n  function _parseEnforcementState(enforcementStateStr) {\n    switch (enforcementStateStr) {\n      case 'ENFORCE':\n        return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n      case 'AUDIT':\n        return \"AUDIT\" /* EnforcementState.AUDIT */;\n      case 'OFF':\n        return \"OFF\" /* EnforcementState.OFF */;\n      default:\n        return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n    }\n  }\n  class NetworkTimeout {\n    clearNetworkTimeout() {\n      clearTimeout(this.timer);\n    }\n    constructor(auth) {\n      this.auth = auth;\n      // Node timers and browser timers are fundamentally incompatible, but we\n      // don't care about the value here\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timer = null;\n      this.promise = new Promise((_, reject) => {\n        this.timer = setTimeout(() => {\n          return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, DEFAULT_API_TIMEOUT_MS.get());\n      });\n    }\n  }\n  function _makeTaggedError(auth, code, response) {\n    const errorParams = {\n      appName: auth.name\n    };\n    if (response.email) {\n      errorParams.email = response.email;\n    }\n    if (response.phoneNumber) {\n      errorParams.phoneNumber = response.phoneNumber;\n    }\n    const error = _createError(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function isV2(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;\n  }\n  function isEnterprise(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n  }\n  class RecaptchaConfig {\n    constructor(response) {\n      /**\n       * The reCAPTCHA site key.\n       */\n      this.siteKey = '';\n      /**\n       * The list of providers and their enablement status for reCAPTCHA Enterprise.\n       */\n      this.recaptchaEnforcementState = [];\n      if (response.recaptchaKey === undefined) {\n        throw new Error('recaptchaKey undefined');\n      }\n      // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n      this.siteKey = response.recaptchaKey.split('/')[3];\n      this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n    }\n    /**\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n     *\n     * @param providerStr - The provider whose enforcement state is to be returned.\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n     */\n    getProviderEnforcementState(providerStr) {\n      if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n        return null;\n      }\n      for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n        if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n          return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n        }\n      }\n      return null;\n    }\n    /**\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n     *\n     * @param providerStr - The provider whose enablement state is to be returned.\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n     */\n    isProviderEnabled(providerStr) {\n      return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n    }\n    /**\n     * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n     * returns false.\n     *\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n     */\n    isAnyProviderEnabled() {\n      return this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) || this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function getRecaptchaParams(auth) {\n    return (await _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '';\n  }\n  async function getRecaptchaConfig(auth, request) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function deleteAccount(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n  }\n  async function deleteLinkedAccounts(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  async function getAccountInfo(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) {\n      return undefined;\n    }\n    try {\n      // Convert to date object.\n      const date = new Date(Number(utcTimestamp));\n      // Test date is valid.\n      if (!isNaN(date.getTime())) {\n        // Convert to UTC date string.\n        return date.toUTCString();\n      }\n    } catch (e) {\n      // Do nothing. undefined will be returned.\n    }\n    return undefined;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function getIdToken(user, forceRefresh = false) {\n    return (0, _firebaseUtil.getModularInstance)(user).getIdToken(forceRefresh);\n  }\n  /**\n   * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  async function getIdTokenResult(user, forceRefresh = false) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const token = await userInternal.getIdToken(forceRefresh);\n    const claims = _parseToken(token);\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n    const signInProvider = firebase?.['sign_in_provider'];\n    return {\n      claims,\n      token,\n      authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n      issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n      expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n      signInProvider: signInProvider || null,\n      signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n    };\n  }\n  function secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n  }\n  function _parseToken(token) {\n    const [algorithm, payload, signature] = token.split('.');\n    if (algorithm === undefined || payload === undefined || signature === undefined) {\n      _logError('JWT malformed, contained fewer than 3 sections');\n      return null;\n    }\n    try {\n      const decoded = (0, _firebaseUtil.base64Decode)(payload);\n      if (!decoded) {\n        _logError('Failed to decode base64 JWT payload');\n        return null;\n      }\n      return JSON.parse(decoded);\n    } catch (e) {\n      _logError('Caught error parsing JWT payload as JSON', e?.toString());\n      return null;\n    }\n  }\n  /**\n   * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n   */\n  function _tokenExpiresIn(token) {\n    const parsedToken = _parseToken(token);\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n    if (bypassAuthState) {\n      return promise;\n    }\n    try {\n      return await promise;\n    } catch (e) {\n      if (e instanceof _firebaseUtil.FirebaseError && isUserInvalidated(e)) {\n        if (user.auth.currentUser === user) {\n          await user.auth.signOut();\n        }\n      }\n      throw e;\n    }\n  }\n  function isUserInvalidated({\n    code\n  }) {\n    return code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class ProactiveRefresh {\n    constructor(user) {\n      this.user = user;\n      this.isRunning = false;\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timerId = null;\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n    }\n    _start() {\n      if (this.isRunning) {\n        return;\n      }\n      this.isRunning = true;\n      this.schedule();\n    }\n    _stop() {\n      if (!this.isRunning) {\n        return;\n      }\n      this.isRunning = false;\n      if (this.timerId !== null) {\n        clearTimeout(this.timerId);\n      }\n    }\n    getInterval(wasError) {\n      if (wasError) {\n        const interval = this.errorBackoff;\n        this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n        return interval;\n      } else {\n        // Reset the error backoff\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n        const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n        const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n        return Math.max(0, interval);\n      }\n    }\n    schedule(wasError = false) {\n      if (!this.isRunning) {\n        // Just in case...\n        return;\n      }\n      const interval = this.getInterval(wasError);\n      this.timerId = setTimeout(async () => {\n        await this.iteration();\n      }, interval);\n    }\n    async iteration() {\n      try {\n        await this.user.getIdToken(true);\n      } catch (e) {\n        // Only retry on network errors\n        if (e?.code === `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          this.schedule(/* wasError */true);\n        }\n        return;\n      }\n      this.schedule();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserMetadata {\n    constructor(createdAt, lastLoginAt) {\n      this.createdAt = createdAt;\n      this.lastLoginAt = lastLoginAt;\n      this._initializeTime();\n    }\n    _initializeTime() {\n      this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n      this.creationTime = utcTimestampToDateString(this.createdAt);\n    }\n    _copy(metadata) {\n      this.createdAt = metadata.createdAt;\n      this.lastLoginAt = metadata.lastLoginAt;\n      this._initializeTime();\n    }\n    toJSON() {\n      return {\n        createdAt: this.createdAt,\n        lastLoginAt: this.lastLoginAt\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reloadWithoutSaving(user) {\n    const auth = user.auth;\n    const idToken = await user.getIdToken();\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {\n      idToken\n    }));\n    _assert(response?.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const coreAccount = response.users[0];\n    user._notifyReloadListener(coreAccount);\n    const newProviderData = coreAccount.providerUserInfo?.length ? extractProviderData(coreAccount.providerUserInfo) : [];\n    const providerData = mergeProviderData(user.providerData, newProviderData);\n    // Preserves the non-nonymous status of the stored user, even if no more\n    // credentials (federated or email/password) are linked to the user. If\n    // the user was previously anonymous, then use provider data to update.\n    // On the other hand, if it was not anonymous before, it should never be\n    // considered anonymous now.\n    const oldIsAnonymous = user.isAnonymous;\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !providerData?.length;\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n    const updates = {\n      uid: coreAccount.localId,\n      displayName: coreAccount.displayName || null,\n      photoURL: coreAccount.photoUrl || null,\n      email: coreAccount.email || null,\n      emailVerified: coreAccount.emailVerified || false,\n      phoneNumber: coreAccount.phoneNumber || null,\n      tenantId: coreAccount.tenantId || null,\n      providerData,\n      metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n      isAnonymous\n    };\n    Object.assign(user, updates);\n  }\n  /**\n   * Reloads user account data, if signed in.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function reload(user) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _reloadWithoutSaving(userInternal);\n    // Even though the current user hasn't changed, update\n    // current user will trigger a persistence update w/ the\n    // new info.\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\n  }\n  function mergeProviderData(original, newData) {\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n    return [...deduped, ...newData];\n  }\n  function extractProviderData(providers) {\n    return providers.map(({\n      providerId,\n      ...provider\n    }) => {\n      return {\n        providerId,\n        uid: provider.rawId || '',\n        displayName: provider.displayName || null,\n        email: provider.email || null,\n        phoneNumber: provider.phoneNumber || null,\n        photoURL: provider.photoUrl || null\n      };\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function requestStsToken(auth, refreshToken) {\n    const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n      const body = (0, _firebaseUtil.querystring)({\n        'grant_type': 'refresh_token',\n        'refresh_token': refreshToken\n      }).slice(1);\n      const {\n        tokenApiHost,\n        apiKey\n      } = auth.config;\n      const url = await _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n      const options = {\n        method: \"POST\" /* HttpMethod.POST */,\n        headers,\n        body\n      };\n      if (auth.emulatorConfig && (0, _firebaseUtil.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        options.credentials = 'include';\n      }\n      return FetchProvider.fetch()(url, options);\n    });\n    // The response comes back in snake_case. Convert to camel:\n    return {\n      accessToken: response.access_token,\n      expiresIn: response.expires_in,\n      refreshToken: response.refresh_token\n    };\n  }\n  async function revokeToken(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * We need to mark this class as internal explicitly to exclude it in the public typings, because\n   * it references AuthInternal which has a circular dependency with UserInternal.\n   *\n   * @internal\n   */\n  class StsTokenManager {\n    constructor() {\n      this.refreshToken = null;\n      this.accessToken = null;\n      this.expirationTime = null;\n    }\n    get isExpired() {\n      return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n    }\n    updateFromServerResponse(response) {\n      _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n      this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n    }\n    updateFromIdToken(idToken) {\n      _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = _tokenExpiresIn(idToken);\n      this.updateTokensAndExpiration(idToken, null, expiresIn);\n    }\n    async getToken(auth, forceRefresh = false) {\n      if (!forceRefresh && this.accessToken && !this.isExpired) {\n        return this.accessToken;\n      }\n      _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n      if (this.refreshToken) {\n        await this.refresh(auth, this.refreshToken);\n        return this.accessToken;\n      }\n      return null;\n    }\n    clearRefreshToken() {\n      this.refreshToken = null;\n    }\n    async refresh(auth, oldToken) {\n      const {\n        accessToken,\n        refreshToken,\n        expiresIn\n      } = await requestStsToken(auth, oldToken);\n      this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n    }\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n      this.refreshToken = refreshToken || null;\n      this.accessToken = accessToken || null;\n      this.expirationTime = Date.now() + expiresInSec * 1000;\n    }\n    static fromJSON(appName, object) {\n      const {\n        refreshToken,\n        accessToken,\n        expirationTime\n      } = object;\n      const manager = new StsTokenManager();\n      if (refreshToken) {\n        _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.refreshToken = refreshToken;\n      }\n      if (accessToken) {\n        _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.accessToken = accessToken;\n      }\n      if (expirationTime) {\n        _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.expirationTime = expirationTime;\n      }\n      return manager;\n    }\n    toJSON() {\n      return {\n        refreshToken: this.refreshToken,\n        accessToken: this.accessToken,\n        expirationTime: this.expirationTime\n      };\n    }\n    _assign(stsTokenManager) {\n      this.accessToken = stsTokenManager.accessToken;\n      this.refreshToken = stsTokenManager.refreshToken;\n      this.expirationTime = stsTokenManager.expirationTime;\n    }\n    _clone() {\n      return Object.assign(new StsTokenManager(), this.toJSON());\n    }\n    _performRefresh() {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function assertStringOrUndefined(assertion, appName) {\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n      appName\n    });\n  }\n  class UserImpl {\n    constructor({\n      uid,\n      auth,\n      stsTokenManager,\n      ...opt\n    }) {\n      // For the user object, provider is always Firebase.\n      this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n      this.proactiveRefresh = new ProactiveRefresh(this);\n      this.reloadUserInfo = null;\n      this.reloadListener = null;\n      this.uid = uid;\n      this.auth = auth;\n      this.stsTokenManager = stsTokenManager;\n      this.accessToken = stsTokenManager.accessToken;\n      this.displayName = opt.displayName || null;\n      this.email = opt.email || null;\n      this.emailVerified = opt.emailVerified || false;\n      this.phoneNumber = opt.phoneNumber || null;\n      this.photoURL = opt.photoURL || null;\n      this.isAnonymous = opt.isAnonymous || false;\n      this.tenantId = opt.tenantId || null;\n      this.providerData = opt.providerData ? [...opt.providerData] : [];\n      this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    async getIdToken(forceRefresh) {\n      const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n      _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      if (this.accessToken !== accessToken) {\n        this.accessToken = accessToken;\n        await this.auth._persistUserIfCurrent(this);\n        this.auth._notifyListenersIfCurrent(this);\n      }\n      return accessToken;\n    }\n    getIdTokenResult(forceRefresh) {\n      return getIdTokenResult(this, forceRefresh);\n    }\n    reload() {\n      return reload(this);\n    }\n    _assign(user) {\n      if (this === user) {\n        return;\n      }\n      _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.displayName = user.displayName;\n      this.photoURL = user.photoURL;\n      this.email = user.email;\n      this.emailVerified = user.emailVerified;\n      this.phoneNumber = user.phoneNumber;\n      this.isAnonymous = user.isAnonymous;\n      this.tenantId = user.tenantId;\n      this.providerData = user.providerData.map(userInfo => ({\n        ...userInfo\n      }));\n      this.metadata._copy(user.metadata);\n      this.stsTokenManager._assign(user.stsTokenManager);\n    }\n    _clone(auth) {\n      const newUser = new UserImpl({\n        ...this,\n        auth,\n        stsTokenManager: this.stsTokenManager._clone()\n      });\n      newUser.metadata._copy(this.metadata);\n      return newUser;\n    }\n    _onReload(callback) {\n      // There should only ever be one listener, and that is a single instance of MultiFactorUser\n      _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.reloadListener = callback;\n      if (this.reloadUserInfo) {\n        this._notifyReloadListener(this.reloadUserInfo);\n        this.reloadUserInfo = null;\n      }\n    }\n    _notifyReloadListener(userInfo) {\n      if (this.reloadListener) {\n        this.reloadListener(userInfo);\n      } else {\n        // If no listener is subscribed yet, save the result so it's available when they do subscribe\n        this.reloadUserInfo = userInfo;\n      }\n    }\n    _startProactiveRefresh() {\n      this.proactiveRefresh._start();\n    }\n    _stopProactiveRefresh() {\n      this.proactiveRefresh._stop();\n    }\n    async _updateTokensIfNecessary(response, reload = false) {\n      let tokensRefreshed = false;\n      if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n        this.stsTokenManager.updateFromServerResponse(response);\n        tokensRefreshed = true;\n      }\n      if (reload) {\n        await _reloadWithoutSaving(this);\n      }\n      await this.auth._persistUserIfCurrent(this);\n      if (tokensRefreshed) {\n        this.auth._notifyListenersIfCurrent(this);\n      }\n    }\n    async delete() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n      }\n      const idToken = await this.getIdToken();\n      await _logoutIfInvalidated(this, deleteAccount(this.auth, {\n        idToken\n      }));\n      this.stsTokenManager.clearRefreshToken();\n      // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n      //       cancels pending actions...\n      return this.auth.signOut();\n    }\n    toJSON() {\n      return {\n        uid: this.uid,\n        email: this.email || undefined,\n        emailVerified: this.emailVerified,\n        displayName: this.displayName || undefined,\n        isAnonymous: this.isAnonymous,\n        photoURL: this.photoURL || undefined,\n        phoneNumber: this.phoneNumber || undefined,\n        tenantId: this.tenantId || undefined,\n        providerData: this.providerData.map(userInfo => ({\n          ...userInfo\n        })),\n        stsTokenManager: this.stsTokenManager.toJSON(),\n        // Redirect event ID must be maintained in case there is a pending\n        // redirect event.\n        _redirectEventId: this._redirectEventId,\n        ...this.metadata.toJSON(),\n        // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n        apiKey: this.auth.config.apiKey,\n        appName: this.auth.name\n        // Missing authDomain will be tolerated by the legacy SDK.\n        // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n      };\n    }\n    get refreshToken() {\n      return this.stsTokenManager.refreshToken || '';\n    }\n    static _fromJSON(auth, object) {\n      const displayName = object.displayName ?? undefined;\n      const email = object.email ?? undefined;\n      const phoneNumber = object.phoneNumber ?? undefined;\n      const photoURL = object.photoURL ?? undefined;\n      const tenantId = object.tenantId ?? undefined;\n      const _redirectEventId = object._redirectEventId ?? undefined;\n      const createdAt = object.createdAt ?? undefined;\n      const lastLoginAt = object.lastLoginAt ?? undefined;\n      const {\n        uid,\n        emailVerified,\n        isAnonymous,\n        providerData,\n        stsTokenManager: plainObjectTokenManager\n      } = object;\n      _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n      _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(displayName, auth.name);\n      assertStringOrUndefined(email, auth.name);\n      _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(phoneNumber, auth.name);\n      assertStringOrUndefined(photoURL, auth.name);\n      assertStringOrUndefined(tenantId, auth.name);\n      assertStringOrUndefined(_redirectEventId, auth.name);\n      assertStringOrUndefined(createdAt, auth.name);\n      assertStringOrUndefined(lastLoginAt, auth.name);\n      const user = new UserImpl({\n        uid,\n        auth,\n        email,\n        emailVerified,\n        displayName,\n        isAnonymous,\n        photoURL,\n        phoneNumber,\n        tenantId,\n        stsTokenManager,\n        createdAt,\n        lastLoginAt\n      });\n      if (providerData && Array.isArray(providerData)) {\n        user.providerData = providerData.map(userInfo => ({\n          ...userInfo\n        }));\n      }\n      if (_redirectEventId) {\n        user._redirectEventId = _redirectEventId;\n      }\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromServerResponse(idTokenResponse);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: idTokenResponse.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // Updates the user info and data and resolves with a user instance.\n      await _reloadWithoutSaving(user);\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromGetAccountInfoResponse(auth, response, idToken) {\n      const coreAccount = response.users[0];\n      _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n      const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromIdToken(idToken);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: coreAccount.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // update the user with data from the GetAccountInfo response.\n      const updates = {\n        uid: coreAccount.localId,\n        displayName: coreAccount.displayName || null,\n        photoURL: coreAccount.photoUrl || null,\n        email: coreAccount.email || null,\n        emailVerified: coreAccount.emailVerified || false,\n        phoneNumber: coreAccount.phoneNumber || null,\n        tenantId: coreAccount.tenantId || null,\n        providerData,\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n        isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length\n      };\n      Object.assign(user, updates);\n      return user;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const instanceCache = new Map();\n  function _getInstance(cls) {\n    debugAssert(cls instanceof Function, 'Expected a class definition');\n    let instance = instanceCache.get(cls);\n    if (instance) {\n      debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n      return instance;\n    }\n    instance = new cls();\n    instanceCache.set(cls, instance);\n    return instance;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class InMemoryPersistence {\n    constructor() {\n      this.type = \"NONE\" /* PersistenceType.NONE */;\n      this.storage = {};\n    }\n    async _isAvailable() {\n      return true;\n    }\n    async _set(key, value) {\n      this.storage[key] = value;\n    }\n    async _get(key) {\n      const value = this.storage[key];\n      return value === undefined ? null : value;\n    }\n    async _remove(key) {\n      delete this.storage[key];\n    }\n    _addListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n    _removeListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n  }\n  InMemoryPersistence.type = 'NONE';\n  /**\n   * An implementation of {@link Persistence} of type 'NONE'.\n   *\n   * @public\n   */\n  const inMemoryPersistence = InMemoryPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _persistenceKeyName(key, apiKey, appName) {\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n  }\n  class PersistenceUserManager {\n    constructor(persistence, auth, userKey) {\n      this.persistence = persistence;\n      this.auth = auth;\n      this.userKey = userKey;\n      const {\n        config,\n        name\n      } = this.auth;\n      this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n      this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n      this.boundEventHandler = auth._onStorageEvent.bind(auth);\n      this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    setCurrentUser(user) {\n      return this.persistence._set(this.fullUserKey, user.toJSON());\n    }\n    async getCurrentUser() {\n      const blob = await this.persistence._get(this.fullUserKey);\n      if (!blob) {\n        return null;\n      }\n      if (typeof blob === 'string') {\n        const response = await getAccountInfo(this.auth, {\n          idToken: blob\n        }).catch(() => undefined);\n        if (!response) {\n          return null;\n        }\n        return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n      }\n      return UserImpl._fromJSON(this.auth, blob);\n    }\n    removeCurrentUser() {\n      return this.persistence._remove(this.fullUserKey);\n    }\n    savePersistenceForRedirect() {\n      return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n    }\n    async setPersistence(newPersistence) {\n      if (this.persistence === newPersistence) {\n        return;\n      }\n      const currentUser = await this.getCurrentUser();\n      await this.removeCurrentUser();\n      this.persistence = newPersistence;\n      if (currentUser) {\n        return this.setCurrentUser(currentUser);\n      }\n    }\n    delete() {\n      this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n    }\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\n      if (!persistenceHierarchy.length) {\n        return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n      }\n      // Eliminate any persistences that are not available\n      const availablePersistences = (await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (await persistence._isAvailable()) {\n          return persistence;\n        }\n        return undefined;\n      }))).filter(persistence => persistence);\n      // Fall back to the first persistence listed, or in memory if none available\n      let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n      const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n      // Pull out the existing user, setting the chosen persistence to that\n      // persistence if the user exists.\n      let userToMigrate = null;\n      // Note, here we check for a user in _all_ persistences, not just the\n      // ones deemed available. If we can migrate a user out of a broken\n      // persistence, we will (but only if that persistence supports migration).\n      for (const persistence of persistenceHierarchy) {\n        try {\n          const blob = await persistence._get(key);\n          if (blob) {\n            let user;\n            if (typeof blob === 'string') {\n              const response = await getAccountInfo(auth, {\n                idToken: blob\n              }).catch(() => undefined);\n              if (!response) {\n                break;\n              }\n              user = await UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n            } else {\n              user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n            }\n            if (persistence !== selectedPersistence) {\n              userToMigrate = user;\n            }\n            selectedPersistence = persistence;\n            break;\n          }\n        } catch {}\n      }\n      // If we find the user in a persistence that does support migration, use\n      // that migration path (of only persistences that support migration)\n      const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n      // If the persistence does _not_ allow migration, just finish off here\n      if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\n      }\n      selectedPersistence = migrationHierarchy[0];\n      if (userToMigrate) {\n        // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n        // we'll just let it bubble to surface the error.\n        await selectedPersistence._set(key, userToMigrate.toJSON());\n      }\n      // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n      // such as users getting stuck with a previous account after signing out and refreshing the tab.\n      await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      }));\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine the browser for the purposes of reporting usage to the API\n   */\n  function _getBrowserName(userAgent) {\n    const ua = userAgent.toLowerCase();\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n      return \"Opera\" /* BrowserName.OPERA */;\n    } else if (_isIEMobile(ua)) {\n      // Windows phone IEMobile browser.\n      return \"IEMobile\" /* BrowserName.IEMOBILE */;\n    } else if (ua.includes('msie') || ua.includes('trident/')) {\n      return \"IE\" /* BrowserName.IE */;\n    } else if (ua.includes('edge/')) {\n      return \"Edge\" /* BrowserName.EDGE */;\n    } else if (_isFirefox(ua)) {\n      return \"Firefox\" /* BrowserName.FIREFOX */;\n    } else if (ua.includes('silk/')) {\n      return \"Silk\" /* BrowserName.SILK */;\n    } else if (_isBlackBerry(ua)) {\n      // Blackberry browser.\n      return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n    } else if (_isWebOS(ua)) {\n      // WebOS default browser.\n      return \"Webos\" /* BrowserName.WEBOS */;\n    } else if (_isSafari(ua)) {\n      return \"Safari\" /* BrowserName.SAFARI */;\n    } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n      return \"Chrome\" /* BrowserName.CHROME */;\n    } else if (_isAndroid(ua)) {\n      // Android stock browser.\n      return \"Android\" /* BrowserName.ANDROID */;\n    } else {\n      // Most modern browsers have name/version at end of user agent string.\n      const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n      const matches = userAgent.match(re);\n      if (matches?.length === 2) {\n        return matches[1];\n      }\n    }\n    return \"Other\" /* BrowserName.OTHER */;\n  }\n  function _isFirefox(ua = (0, _firebaseUtil.getUA)()) {\n    return /firefox\\//i.test(ua);\n  }\n  function _isSafari(userAgent = (0, _firebaseUtil.getUA)()) {\n    const ua = userAgent.toLowerCase();\n    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n  }\n  function _isChromeIOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /crios\\//i.test(ua);\n  }\n  function _isIEMobile(ua = (0, _firebaseUtil.getUA)()) {\n    return /iemobile/i.test(ua);\n  }\n  function _isAndroid(ua = (0, _firebaseUtil.getUA)()) {\n    return /android/i.test(ua);\n  }\n  function _isBlackBerry(ua = (0, _firebaseUtil.getUA)()) {\n    return /blackberry/i.test(ua);\n  }\n  function _isWebOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /webos/i.test(ua);\n  }\n  function _isIOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n  }\n  function _isIOS7Or8(ua = (0, _firebaseUtil.getUA)()) {\n    return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n  }\n  function _isIOSStandalone(ua = (0, _firebaseUtil.getUA)()) {\n    return _isIOS(ua) && !!window.navigator?.standalone;\n  }\n  function _isIE10() {\n    return (0, _firebaseUtil.isIE)() && document.documentMode === 10;\n  }\n  function _isMobileBrowser(ua = (0, _firebaseUtil.getUA)()) {\n    // TODO: implement getBrowserName equivalent for OS.\n    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /*\n   * Determine the SDK version string\n   */\n  function _getClientVersion(clientPlatform, frameworks = []) {\n    let reportedPlatform;\n    switch (clientPlatform) {\n      case \"Browser\" /* ClientPlatform.BROWSER */:\n        // In a browser environment, report the browser name.\n        reportedPlatform = _getBrowserName((0, _firebaseUtil.getUA)());\n        break;\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        // Technically a worker runs from a browser but we need to differentiate a\n        // worker from a browser.\n        // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n        reportedPlatform = `${_getBrowserName((0, _firebaseUtil.getUA)())}-${clientPlatform}`;\n        break;\n      default:\n        reportedPlatform = clientPlatform;\n    }\n    const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${_firebaseApp.SDK_VERSION}/${reportedFrameworks}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthMiddlewareQueue {\n    constructor(auth) {\n      this.auth = auth;\n      this.queue = [];\n    }\n    pushCallback(callback, onAbort) {\n      // The callback could be sync or async. Wrap it into a\n      // function that is always async.\n      const wrappedCallback = user => new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n      // Attach the onAbort if present\n      wrappedCallback.onAbort = onAbort;\n      this.queue.push(wrappedCallback);\n      const index = this.queue.length - 1;\n      return () => {\n        // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n        // indexing of other elements.\n        this.queue[index] = () => Promise.resolve();\n      };\n    }\n    async runMiddleware(nextUser) {\n      if (this.auth.currentUser === nextUser) {\n        return;\n      }\n      // While running the middleware, build a temporary stack of onAbort\n      // callbacks to call if one middleware callback rejects.\n      const onAbortStack = [];\n      try {\n        for (const beforeStateCallback of this.queue) {\n          await beforeStateCallback(nextUser);\n          // Only push the onAbort if the callback succeeds\n          if (beforeStateCallback.onAbort) {\n            onAbortStack.push(beforeStateCallback.onAbort);\n          }\n        }\n      } catch (e) {\n        // Run all onAbort, with separate try/catch to ignore any errors and\n        // continue\n        onAbortStack.reverse();\n        for (const onAbort of onAbortStack) {\n          try {\n            onAbort();\n          } catch (_) {\n            /* swallow error */\n          }\n        }\n        throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n          originalMessage: e?.message\n        });\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n   *\n   * @param auth Auth object.\n   * @param request Password policy request.\n   * @returns Password policy response.\n   */\n  async function _getPasswordPolicy(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Minimum min password length enforced by the backend, even if no minimum length is set.\n  const MINIMUM_MIN_PASSWORD_LENGTH = 6;\n  /**\n   * Stores password policy requirements and provides password validation against the policy.\n   *\n   * @internal\n   */\n  class PasswordPolicyImpl {\n    constructor(response) {\n      // Only include custom strength options defined in the response.\n      const responseOptions = response.customStrengthOptions;\n      this.customStrengthOptions = {};\n      // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n      this.customStrengthOptions.minPasswordLength = responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n      if (responseOptions.maxPasswordLength) {\n        this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n      }\n      if (responseOptions.containsLowercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n      }\n      if (responseOptions.containsUppercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n      }\n      if (responseOptions.containsNumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n      }\n      if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n      }\n      this.enforcementState = response.enforcementState;\n      if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n        this.enforcementState = 'OFF';\n      }\n      // Use an empty string if no non-alphanumeric characters are specified in the response.\n      this.allowedNonAlphanumericCharacters = response.allowedNonAlphanumericCharacters?.join('') ?? '';\n      this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n      this.schemaVersion = response.schemaVersion;\n    }\n    validatePassword(password) {\n      const status = {\n        isValid: true,\n        passwordPolicy: this\n      };\n      // Check the password length and character options.\n      this.validatePasswordLengthOptions(password, status);\n      this.validatePasswordCharacterOptions(password, status);\n      // Combine the status into single isValid property.\n      status.isValid && (status.isValid = status.meetsMinPasswordLength ?? true);\n      status.isValid && (status.isValid = status.meetsMaxPasswordLength ?? true);\n      status.isValid && (status.isValid = status.containsLowercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsUppercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsNumericCharacter ?? true);\n      status.isValid && (status.isValid = status.containsNonAlphanumericCharacter ?? true);\n      return status;\n    }\n    /**\n     * Validates that the password meets the length options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordLengthOptions(password, status) {\n      const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n      const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n      if (minPasswordLength) {\n        status.meetsMinPasswordLength = password.length >= minPasswordLength;\n      }\n      if (maxPasswordLength) {\n        status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n      }\n    }\n    /**\n     * Validates that the password meets the character options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordCharacterOptions(password, status) {\n      // Assign statuses for requirements even if the password is an empty string.\n      this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n      let passwordChar;\n      for (let i = 0; i < password.length; i++) {\n        passwordChar = password.charAt(i);\n        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n      }\n    }\n    /**\n     * Updates the running validation status with the statuses for the character options.\n     * Expected to be called each time a character is processed to update each option status\n     * based on the current character.\n     *\n     * @param status Validation status.\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n     * @param containsNumericCharacter Whether the character is a numeric character.\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n     */\n    updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n      if (this.customStrengthOptions.containsLowercaseLetter) {\n        status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsUppercaseLetter) {\n        status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsNumericCharacter) {\n        status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n      }\n      if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n        status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthImpl {\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n      this.app = app;\n      this.heartbeatServiceProvider = heartbeatServiceProvider;\n      this.appCheckServiceProvider = appCheckServiceProvider;\n      this.config = config;\n      this.currentUser = null;\n      this.emulatorConfig = null;\n      this.operations = Promise.resolve();\n      this.authStateSubscription = new Subscription(this);\n      this.idTokenSubscription = new Subscription(this);\n      this.beforeStateQueue = new AuthMiddlewareQueue(this);\n      this.redirectUser = null;\n      this.isProactiveRefreshEnabled = false;\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n      // Any network calls will set this to true and prevent subsequent emulator\n      // initialization\n      this._canInitEmulator = true;\n      this._isInitialized = false;\n      this._deleted = false;\n      this._initializationPromise = null;\n      this._popupRedirectResolver = null;\n      this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n      this._agentRecaptchaConfig = null;\n      this._tenantRecaptchaConfigs = {};\n      this._projectPasswordPolicy = null;\n      this._tenantPasswordPolicies = {};\n      this._resolvePersistenceManagerAvailable = undefined;\n      // Tracks the last notified UID for state change listeners to prevent\n      // repeated calls to the callbacks. Undefined means it's never been\n      // called, whereas null means it's been called with a signed out user\n      this.lastNotifiedUid = undefined;\n      this.languageCode = null;\n      this.tenantId = null;\n      this.settings = {\n        appVerificationDisabledForTesting: false\n      };\n      this.frameworks = [];\n      this.name = app.name;\n      this.clientVersion = config.sdkClientVersion;\n      // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n      // persistenceMananger to be available. see _getFinalTarget for more context\n      this._persistenceManagerAvailable = new Promise(resolve => this._resolvePersistenceManagerAvailable = resolve);\n    }\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n      if (popupRedirectResolver) {\n        this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n      }\n      // Have to check for app deletion throughout initialization (after each\n      // promise resolution)\n      this._initializationPromise = this.queue(async () => {\n        if (this._deleted) {\n          return;\n        }\n        this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n        this._resolvePersistenceManagerAvailable?.();\n        if (this._deleted) {\n          return;\n        }\n        // Initialize the resolver early if necessary (only applicable to web:\n        // this will cause the iframe to load immediately in certain cases)\n        if (this._popupRedirectResolver?._shouldInitProactively) {\n          // If this fails, don't halt auth loading\n          try {\n            await this._popupRedirectResolver._initialize(this);\n          } catch (e) {\n            /* Ignore the error */\n          }\n        }\n        await this.initializeCurrentUser(popupRedirectResolver);\n        this.lastNotifiedUid = this.currentUser?.uid || null;\n        if (this._deleted) {\n          return;\n        }\n        this._isInitialized = true;\n      });\n      return this._initializationPromise;\n    }\n    /**\n     * If the persistence is changed in another window, the user manager will let us know\n     */\n    async _onStorageEvent() {\n      if (this._deleted) {\n        return;\n      }\n      const user = await this.assertedPersistence.getCurrentUser();\n      if (!this.currentUser && !user) {\n        // No change, do nothing (was signed out and remained signed out).\n        return;\n      }\n      // If the same user is to be synchronized.\n      if (this.currentUser && user && this.currentUser.uid === user.uid) {\n        // Data update, simply copy data changes.\n        this._currentUser._assign(user);\n        // If tokens changed from previous user tokens, this will trigger\n        // notifyAuthListeners_.\n        await this.currentUser.getIdToken();\n        return;\n      }\n      // Update current Auth state. Either a new login or logout.\n      // Skip blocking callbacks, they should not apply to a change in another tab.\n      await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n    }\n    async initializeCurrentUserFromIdToken(idToken) {\n      try {\n        const response = await getAccountInfo(this, {\n          idToken\n        });\n        const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n        await this.directlySetCurrentUser(user);\n      } catch (err) {\n        console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n        await this.directlySetCurrentUser(null);\n      }\n    }\n    async initializeCurrentUser(popupRedirectResolver) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        const idToken = this.app.settings.authIdToken;\n        if (idToken) {\n          // Start the auth operation in the next tick to allow a moment for the customer's app to\n          // attach an emulator, if desired.\n          return new Promise(resolve => {\n            setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n          });\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      // First check to see if we have a pending redirect event.\n      const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();\n      let futureCurrentUser = previouslyStoredUser;\n      let needsTocheckMiddleware = false;\n      if (popupRedirectResolver && this.config.authDomain) {\n        await this.getOrInitRedirectPersistenceManager();\n        const redirectUserEventId = this.redirectUser?._redirectEventId;\n        const storedUserEventId = futureCurrentUser?._redirectEventId;\n        const result = await this.tryRedirectSignIn(popupRedirectResolver);\n        // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n        // matches the redirect user, then we want to initially sign in with the\n        // new user object from result.\n        // TODO(samgho): More thoroughly test all of this\n        if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && result?.user) {\n          futureCurrentUser = result.user;\n          needsTocheckMiddleware = true;\n        }\n      }\n      // If no user in persistence, there is no current user. Set to null.\n      if (!futureCurrentUser) {\n        return this.directlySetCurrentUser(null);\n      }\n      if (!futureCurrentUser._redirectEventId) {\n        // This isn't a redirect link operation, we can reload and bail.\n        // First though, ensure that we check the middleware is happy.\n        if (needsTocheckMiddleware) {\n          try {\n            await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n          } catch (e) {\n            futureCurrentUser = previouslyStoredUser;\n            // We know this is available since the bit is only set when the\n            // resolver is available\n            this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n          }\n        }\n        if (futureCurrentUser) {\n          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      await this.getOrInitRedirectPersistenceManager();\n      // If the redirect user's event ID matches the current user's event ID,\n      // DO NOT reload the current user, otherwise they'll be cleared from storage.\n      // This is important for the reauthenticateWithRedirect() flow.\n      if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n        return this.directlySetCurrentUser(futureCurrentUser);\n      }\n      return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n    }\n    async tryRedirectSignIn(redirectResolver) {\n      // The redirect user needs to be checked (and signed in if available)\n      // during auth initialization. All of the normal sign in and link/reauth\n      // flows call back into auth and push things onto the promise queue. We\n      // need to await the result of the redirect sign in *inside the promise\n      // queue*. This presents a problem: we run into deadlock. See:\n      //    ┌> [Initialization] ─────┐\n      //    ┌> [<other queue tasks>] │\n      //    └─ [getRedirectResult] <─┘\n      //    where [] are tasks on the queue and arrows denote awaits\n      // Initialization will never complete because it's waiting on something\n      // that's waiting for initialization to complete!\n      //\n      // Instead, this method calls getRedirectResult() (stored in\n      // _completeRedirectFn) with an optional parameter that instructs all of\n      // the underlying auth operations to skip anything that mutates auth state.\n      let result = null;\n      try {\n        // We know this._popupRedirectResolver is set since redirectResolver\n        // is passed in. The _completeRedirectFn expects the unwrapped extern.\n        result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n      } catch (e) {\n        // Swallow any errors here; the code can retrieve them in\n        // getRedirectResult().\n        await this._setRedirectUser(null);\n      }\n      return result;\n    }\n    async reloadAndSetCurrentUserOrClear(user) {\n      try {\n        await _reloadWithoutSaving(user);\n      } catch (e) {\n        if (e?.code !== `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          // Something's wrong with the user's token. Log them out and remove\n          // them from storage\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      return this.directlySetCurrentUser(user);\n    }\n    useDeviceLanguage() {\n      this.languageCode = _getUserLanguage();\n    }\n    async _delete() {\n      this._deleted = true;\n    }\n    async updateCurrentUser(userExtern) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // The public updateCurrentUser method needs to make a copy of the user,\n      // and also check that the project matches\n      const user = userExtern ? (0, _firebaseUtil.getModularInstance)(userExtern) : null;\n      if (user) {\n        _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n      }\n      return this._updateCurrentUser(user && user._clone(this));\n    }\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n      if (this._deleted) {\n        return;\n      }\n      if (user) {\n        _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n      }\n      if (!skipBeforeStateCallbacks) {\n        await this.beforeStateQueue.runMiddleware(user);\n      }\n      return this.queue(async () => {\n        await this.directlySetCurrentUser(user);\n        this.notifyAuthListeners();\n      });\n    }\n    async signOut() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // Run first, to block _setRedirectUser() if any callbacks fail.\n      await this.beforeStateQueue.runMiddleware(null);\n      // Clear the redirect user when signOut is called\n      if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n        await this._setRedirectUser(null);\n      }\n      // Prevent callbacks from being called again in _updateCurrentUser, as\n      // they were already called in the first line.\n      return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);\n    }\n    setPersistence(persistence) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      return this.queue(async () => {\n        await this.assertedPersistence.setPersistence(_getInstance(persistence));\n      });\n    }\n    _getRecaptchaConfig() {\n      if (this.tenantId == null) {\n        return this._agentRecaptchaConfig;\n      } else {\n        return this._tenantRecaptchaConfigs[this.tenantId];\n      }\n    }\n    async validatePassword(password) {\n      if (!this._getPasswordPolicyInternal()) {\n        await this._updatePasswordPolicy();\n      }\n      // Password policy will be defined after fetching.\n      const passwordPolicy = this._getPasswordPolicyInternal();\n      // Check that the policy schema version is supported by the SDK.\n      // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n      if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n        return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n      }\n      return passwordPolicy.validatePassword(password);\n    }\n    _getPasswordPolicyInternal() {\n      if (this.tenantId === null) {\n        return this._projectPasswordPolicy;\n      } else {\n        return this._tenantPasswordPolicies[this.tenantId];\n      }\n    }\n    async _updatePasswordPolicy() {\n      const response = await _getPasswordPolicy(this);\n      const passwordPolicy = new PasswordPolicyImpl(response);\n      if (this.tenantId === null) {\n        this._projectPasswordPolicy = passwordPolicy;\n      } else {\n        this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n      }\n    }\n    _getPersistenceType() {\n      return this.assertedPersistence.persistence.type;\n    }\n    _getPersistence() {\n      return this.assertedPersistence.persistence;\n    }\n    _updateErrorMap(errorMap) {\n      this._errorFactory = new _firebaseUtil.ErrorFactory('auth', 'Firebase', errorMap());\n    }\n    onAuthStateChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n    }\n    beforeAuthStateChanged(callback, onAbort) {\n      return this.beforeStateQueue.pushCallback(callback, onAbort);\n    }\n    onIdTokenChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n    }\n    authStateReady() {\n      return new Promise((resolve, reject) => {\n        if (this.currentUser) {\n          resolve();\n        } else {\n          const unsubscribe = this.onAuthStateChanged(() => {\n            unsubscribe();\n            resolve();\n          }, reject);\n        }\n      });\n    }\n    /**\n     * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n     */\n    async revokeAccessToken(token) {\n      if (this.currentUser) {\n        const idToken = await this.currentUser.getIdToken();\n        // Generalize this to accept other providers once supported.\n        const request = {\n          providerId: 'apple.com',\n          tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n          token,\n          idToken\n        };\n        if (this.tenantId != null) {\n          request.tenantId = this.tenantId;\n        }\n        await revokeToken(this, request);\n      }\n    }\n    toJSON() {\n      return {\n        apiKey: this.config.apiKey,\n        authDomain: this.config.authDomain,\n        appName: this.name,\n        currentUser: this._currentUser?.toJSON()\n      };\n    }\n    async _setRedirectUser(user, popupRedirectResolver) {\n      const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n      return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n    }\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n      if (!this.redirectPersistenceManager) {\n        const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n        _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n        this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();\n      }\n      return this.redirectPersistenceManager;\n    }\n    async _redirectUserForId(id) {\n      // Make sure we've cleared any pending persistence actions if we're not in\n      // the initializer\n      if (this._isInitialized) {\n        await this.queue(async () => {});\n      }\n      if (this._currentUser?._redirectEventId === id) {\n        return this._currentUser;\n      }\n      if (this.redirectUser?._redirectEventId === id) {\n        return this.redirectUser;\n      }\n      return null;\n    }\n    async _persistUserIfCurrent(user) {\n      if (user === this.currentUser) {\n        return this.queue(async () => this.directlySetCurrentUser(user));\n      }\n    }\n    /** Notifies listeners only if the user is current */\n    _notifyListenersIfCurrent(user) {\n      if (user === this.currentUser) {\n        this.notifyAuthListeners();\n      }\n    }\n    _key() {\n      return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n    }\n    _startProactiveRefresh() {\n      this.isProactiveRefreshEnabled = true;\n      if (this.currentUser) {\n        this._currentUser._startProactiveRefresh();\n      }\n    }\n    _stopProactiveRefresh() {\n      this.isProactiveRefreshEnabled = false;\n      if (this.currentUser) {\n        this._currentUser._stopProactiveRefresh();\n      }\n    }\n    /** Returns the current user cast as the internal type */\n    get _currentUser() {\n      return this.currentUser;\n    }\n    notifyAuthListeners() {\n      if (!this._isInitialized) {\n        return;\n      }\n      this.idTokenSubscription.next(this.currentUser);\n      const currentUid = this.currentUser?.uid ?? null;\n      if (this.lastNotifiedUid !== currentUid) {\n        this.lastNotifiedUid = currentUid;\n        this.authStateSubscription.next(this.currentUser);\n      }\n    }\n    registerStateListener(subscription, nextOrObserver, error, completed) {\n      if (this._deleted) {\n        return () => {};\n      }\n      const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n      let isUnsubscribed = false;\n      const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n      _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // The callback needs to be called asynchronously per the spec.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      promise.then(() => {\n        if (isUnsubscribed) {\n          return;\n        }\n        cb(this.currentUser);\n      });\n      if (typeof nextOrObserver === 'function') {\n        const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      } else {\n        const unsubscribe = subscription.addObserver(nextOrObserver);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      }\n    }\n    /**\n     * Unprotected (from race conditions) method to set the current user. This\n     * should only be called from within a queued callback. This is necessary\n     * because the queue shouldn't rely on another queued callback.\n     */\n    async directlySetCurrentUser(user) {\n      if (this.currentUser && this.currentUser !== user) {\n        this._currentUser._stopProactiveRefresh();\n      }\n      if (user && this.isProactiveRefreshEnabled) {\n        user._startProactiveRefresh();\n      }\n      this.currentUser = user;\n      if (user) {\n        await this.assertedPersistence.setCurrentUser(user);\n      } else {\n        await this.assertedPersistence.removeCurrentUser();\n      }\n    }\n    queue(action) {\n      // In case something errors, the callback still should be called in order\n      // to keep the promise chain alive\n      this.operations = this.operations.then(action, action);\n      return this.operations;\n    }\n    get assertedPersistence() {\n      _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.persistenceManager;\n    }\n    _logFramework(framework) {\n      if (!framework || this.frameworks.includes(framework)) {\n        return;\n      }\n      this.frameworks.push(framework);\n      // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n      // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n      this.frameworks.sort();\n      this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n    }\n    _getFrameworks() {\n      return this.frameworks;\n    }\n    async _getAdditionalHeaders() {\n      // Additional headers on every request\n      const headers = {\n        [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n      };\n      if (this.app.options.appId) {\n        headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n      }\n      // If the heartbeat service exists, add the heartbeat string\n      const heartbeatsHeader = await this.heartbeatServiceProvider.getImmediate({\n        optional: true\n      })?.getHeartbeatsHeader();\n      if (heartbeatsHeader) {\n        headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n      }\n      // If the App Check service exists, add the App Check token in the headers\n      const appCheckToken = await this._getAppCheckToken();\n      if (appCheckToken) {\n        headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n      }\n      return headers;\n    }\n    async _getAppCheckToken() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app) && this.app.settings.appCheckToken) {\n        return this.app.settings.appCheckToken;\n      }\n      const appCheckTokenResult = await this.appCheckServiceProvider.getImmediate({\n        optional: true\n      })?.getToken();\n      if (appCheckTokenResult?.error) {\n        // Context: appCheck.getToken() will never throw even if an error happened.\n        // In the error case, a dummy token will be returned along with an error field describing\n        // the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n        _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n      }\n      return appCheckTokenResult?.token;\n    }\n  }\n  /**\n   * Method to be used to cast down to our private implementation of Auth.\n   * It will also handle unwrapping from the compat type if necessary\n   *\n   * @param auth Auth object passed in from developer\n   */\n  function _castAuth(auth) {\n    return (0, _firebaseUtil.getModularInstance)(auth);\n  }\n  /** Helper class to wrap subscriber logic */\n  class Subscription {\n    constructor(auth) {\n      this.auth = auth;\n      this.observer = null;\n      this.addObserver = (0, _firebaseUtil.createSubscribe)(observer => this.observer = observer);\n    }\n    get next() {\n      _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.observer.next.bind(this.observer);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  let externalJSProvider = {\n    async loadJS() {\n      throw new Error('Unable to load external scripts');\n    },\n    recaptchaV2Script: '',\n    recaptchaEnterpriseScript: '',\n    gapiScript: ''\n  };\n  function _setExternalJSProvider(p) {\n    externalJSProvider = p;\n  }\n  function _loadJS(url) {\n    return externalJSProvider.loadJS(url);\n  }\n  function _recaptchaV2ScriptUrl() {\n    return externalJSProvider.recaptchaV2Script;\n  }\n  function _recaptchaEnterpriseScriptUrl() {\n    return externalJSProvider.recaptchaEnterpriseScript;\n  }\n  function _gapiScriptUrl() {\n    return externalJSProvider.gapiScript;\n  }\n  function _generateCallbackName(prefix) {\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const _SOLVE_TIME_MS = 500;\n  const _EXPIRATION_TIME_MS = 60000;\n  const _WIDGET_ID_START = 1000000000000;\n  class MockReCaptcha {\n    constructor(auth) {\n      this.auth = auth;\n      this.counter = _WIDGET_ID_START;\n      this._widgets = new Map();\n    }\n    render(container, parameters) {\n      const id = this.counter;\n      this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n      this.counter++;\n      return id;\n    }\n    reset(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      void this._widgets.get(id)?.delete();\n      this._widgets.delete(id);\n    }\n    getResponse(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      return this._widgets.get(id)?.getResponse() || '';\n    }\n    async execute(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      void this._widgets.get(id)?.execute();\n      return '';\n    }\n  }\n  class MockGreCAPTCHATopLevel {\n    constructor() {\n      this.enterprise = new MockGreCAPTCHA();\n    }\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n  class MockGreCAPTCHA {\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n  class MockWidget {\n    constructor(containerOrId, appName, params) {\n      this.params = params;\n      this.timerId = null;\n      this.deleted = false;\n      this.responseToken = null;\n      this.clickHandler = () => {\n        this.execute();\n      };\n      const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, {\n        appName\n      });\n      this.container = container;\n      this.isVisible = this.params.size !== 'invisible';\n      if (this.isVisible) {\n        this.execute();\n      } else {\n        this.container.addEventListener('click', this.clickHandler);\n      }\n    }\n    getResponse() {\n      this.checkIfDeleted();\n      return this.responseToken;\n    }\n    delete() {\n      this.checkIfDeleted();\n      this.deleted = true;\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n        this.timerId = null;\n      }\n      this.container.removeEventListener('click', this.clickHandler);\n    }\n    execute() {\n      this.checkIfDeleted();\n      if (this.timerId) {\n        return;\n      }\n      this.timerId = window.setTimeout(() => {\n        this.responseToken = generateRandomAlphaNumericString(50);\n        const {\n          callback,\n          'expired-callback': expiredCallback\n        } = this.params;\n        if (callback) {\n          try {\n            callback(this.responseToken);\n          } catch (e) {}\n        }\n        this.timerId = window.setTimeout(() => {\n          this.timerId = null;\n          this.responseToken = null;\n          if (expiredCallback) {\n            try {\n              expiredCallback();\n            } catch (e) {}\n          }\n          if (this.isVisible) {\n            this.execute();\n          }\n        }, _EXPIRATION_TIME_MS);\n      }, _SOLVE_TIME_MS);\n    }\n    checkIfDeleted() {\n      if (this.deleted) {\n        throw new Error('reCAPTCHA mock was already deleted!');\n      }\n    }\n  }\n  function generateRandomAlphaNumericString(len) {\n    const chars = [];\n    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (let i = 0; i < len; i++) {\n      chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n    }\n    return chars.join('');\n  }\n\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\n  const FAKE_TOKEN = 'NO_RECAPTCHA';\n  class RecaptchaEnterpriseVerifier {\n    /**\n     *\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     */\n    constructor(authExtern) {\n      /**\n       * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n       */\n      this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n      this.auth = _castAuth(authExtern);\n    }\n    /**\n     * Executes the verification process.\n     *\n     * @returns A Promise for a token that can be used to assert the validity of a request.\n     */\n    async verify(action = 'verify', forceRefresh = false) {\n      async function retrieveSiteKey(auth) {\n        if (!forceRefresh) {\n          if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n            return auth._agentRecaptchaConfig.siteKey;\n          }\n          if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n            return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n          }\n        }\n        return new Promise(async (resolve, reject) => {\n          getRecaptchaConfig(auth, {\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }).then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          }).catch(error => {\n            reject(error);\n          });\n        });\n      }\n      function retrieveRecaptchaToken(siteKey, resolve, reject) {\n        const grecaptcha = window.grecaptcha;\n        if (isEnterprise(grecaptcha)) {\n          grecaptcha.enterprise.ready(() => {\n            grecaptcha.enterprise.execute(siteKey, {\n              action\n            }).then(token => {\n              resolve(token);\n            }).catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n          });\n        } else {\n          reject(Error('No reCAPTCHA enterprise script loaded.'));\n        }\n      }\n      // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n      if (this.auth.settings.appVerificationDisabledForTesting) {\n        const mockRecaptcha = new MockGreCAPTCHATopLevel();\n        return mockRecaptcha.execute('siteKey', {\n          action: 'verify'\n        });\n      }\n      return new Promise((resolve, reject) => {\n        retrieveSiteKey(this.auth).then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (typeof window === 'undefined') {\n              reject(new Error('RecaptchaVerifier is only supported in browser'));\n              return;\n            }\n            let url = _recaptchaEnterpriseScriptUrl();\n            if (url.length !== 0) {\n              url += siteKey;\n            }\n            _loadJS(url).then(() => {\n              retrieveRecaptchaToken(siteKey, resolve, reject);\n            }).catch(error => {\n              reject(error);\n            });\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n  async function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\n    let captchaResponse;\n    if (isFakeToken) {\n      captchaResponse = FAKE_TOKEN;\n    } else {\n      try {\n        captchaResponse = await verifier.verify(action);\n      } catch (error) {\n        captchaResponse = await verifier.verify(action, true);\n      }\n    }\n    const newRequest = {\n      ...request\n    };\n    if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ || action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n      if ('phoneEnrollmentInfo' in newRequest) {\n        const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n        const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneEnrollmentInfo': {\n            phoneNumber,\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      } else if ('phoneSignInInfo' in newRequest) {\n        const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneSignInInfo': {\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      }\n      return newRequest;\n    }\n    if (!isCaptchaResp) {\n      Object.assign(newRequest, {\n        captchaResponse\n      });\n    } else {\n      Object.assign(newRequest, {\n        'captchaResp': captchaResponse\n      });\n    }\n    Object.assign(newRequest, {\n      'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    });\n    Object.assign(newRequest, {\n      'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    return newRequest;\n  }\n  async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n    if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return actionMethod(authInstance, request).catch(async error => {\n          if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n            console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n            return actionMethod(authInstance, requestWithRecaptcha);\n          } else {\n            return Promise.reject(error);\n          }\n        });\n      }\n    } else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);\n        return actionMethod(authInstance, requestWithRecaptcha).catch(async error => {\n          if (authInstance._getRecaptchaConfig()?.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n            // AUDIT mode\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` || error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n              console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n              // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n              // check fails.\n              // Fallback to reCAPTCHA v2 flow.\n              const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n              // isCaptchaResp\n              true // isFakeToken\n              );\n              // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n              return actionMethod(authInstance, requestWithRecaptchaFields);\n            }\n          }\n          // ENFORCE mode or AUDIT mode with any other error.\n          return Promise.reject(error);\n        });\n      } else {\n        // Do reCAPTCHA v2 flow.\n        const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n        // isCaptchaResp\n        true // isFakeToken\n        );\n        // This will call the PhoneApiCaller to fetch and inject v2 token.\n        return actionMethod(authInstance, requestWithRecaptchaFields);\n      }\n    } else {\n      return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n    }\n  }\n  async function _initializeRecaptchaConfig(auth) {\n    const authInternal = _castAuth(auth);\n    const response = await getRecaptchaConfig(authInternal, {\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n      version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    const config = new RecaptchaConfig(response);\n    if (authInternal.tenantId == null) {\n      authInternal._agentRecaptchaConfig = config;\n    } else {\n      authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n    }\n    if (config.isAnyProviderEnabled()) {\n      const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n      void verifier.verify();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Initializes an {@link Auth} instance with fine-grained control over\n   * {@link Dependencies}.\n   *\n   * @remarks\n   *\n   * This function allows more control over the {@link Auth} instance than\n   * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n   * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n   * initialize Auth and works for most use cases. Use `initializeAuth` if you\n   * need control over which persistence layer is used, or to minimize bundle\n   * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n   *\n   * For example, if your app only uses anonymous accounts and you only want\n   * accounts saved for the current session, initialize `Auth` with:\n   *\n   * ```js\n   * const auth = initializeAuth(app, {\n   *   persistence: browserSessionPersistence,\n   *   popupRedirectResolver: undefined,\n   * });\n   * ```\n   *\n   * @public\n   */\n  function initializeAuth(app, deps) {\n    const provider = (0, _firebaseApp._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      const auth = provider.getImmediate();\n      const initialOptions = provider.getOptions();\n      if ((0, _firebaseUtil.deepEqual)(initialOptions, deps ?? {})) {\n        return auth;\n      } else {\n        _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n      }\n    }\n    const auth = provider.initialize({\n      options: deps\n    });\n    return auth;\n  }\n  function _initializeAuthInstance(auth, deps) {\n    const persistence = deps?.persistence || [];\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n    if (deps?.errorMap) {\n      auth._updateErrorMap(deps.errorMap);\n    }\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n  }\n\n  /**\n   * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n   * Firebase Auth services.\n   *\n   * @remarks\n   * This must be called synchronously immediately following the first call to\n   * {@link initializeAuth}.  Do not use with production credentials as emulator\n   * traffic is not encrypted.\n   *\n   *\n   * @example\n   * ```javascript\n   * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n   * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n   * `true` to disable the warning banner attached to the DOM.\n   *\n   * @public\n   */\n  function connectAuthEmulator(auth, url, options) {\n    const authInternal = _castAuth(auth);\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n    const disableWarnings = !!options?.disableWarnings;\n    const protocol = extractProtocol(url);\n    const {\n      host,\n      port\n    } = extractHostAndPort(url);\n    const portStr = port === null ? '' : `:${port}`;\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    const emulator = {\n      url: `${protocol}//${host}${portStr}/`\n    };\n    const emulatorConfig = Object.freeze({\n      host,\n      port,\n      protocol: protocol.replace(':', ''),\n      options: Object.freeze({\n        disableWarnings\n      })\n    });\n    // There are a few scenarios to guard against if the Auth instance has already started:\n    if (!authInternal._canInitEmulator) {\n      // Applications may not initialize the emulator for the first time if Auth has already started\n      // to make network requests.\n      _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // Applications may not alter the configuration of the emulator (aka pass a different config)\n      // once Auth has started to make network requests.\n      _assert((0, _firebaseUtil.deepEqual)(emulator, authInternal.config.emulator) && (0, _firebaseUtil.deepEqual)(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n      // connections, so long as the config matches the existing config. This results in a no-op.\n      return;\n    }\n    authInternal.config.emulator = emulator;\n    authInternal.emulatorConfig = emulatorConfig;\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    // Workaround to get cookies in Firebase Studio\n    if ((0, _firebaseUtil.isCloudWorkstation)(host)) {\n      void (0, _firebaseUtil.pingServer)(`${protocol}//${host}${portStr}`);\n      (0, _firebaseUtil.updateEmulatorBanner)('Auth', true);\n    } else if (!disableWarnings) {\n      emitEmulatorWarning();\n    }\n  }\n  function extractProtocol(url) {\n    const protocolEnd = url.indexOf(':');\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n  }\n  function extractHostAndPort(url) {\n    const protocol = extractProtocol(url);\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) {\n      return {\n        host: '',\n        port: null\n      };\n    }\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n      const host = bracketedIPv6[1];\n      return {\n        host,\n        port: parsePort(hostAndPort.substr(host.length + 1))\n      };\n    } else {\n      const [host, port] = hostAndPort.split(':');\n      return {\n        host,\n        port: parsePort(port)\n      };\n    }\n  }\n  function parsePort(portStr) {\n    if (!portStr) {\n      return null;\n    }\n    const port = Number(portStr);\n    if (isNaN(port)) {\n      return null;\n    }\n    return port;\n  }\n  function emitEmulatorWarning() {\n    function attachBanner() {\n      const el = document.createElement('p');\n      const sty = el.style;\n      el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n      sty.position = 'fixed';\n      sty.width = '100%';\n      sty.backgroundColor = '#ffffff';\n      sty.border = '.1em solid #000000';\n      sty.color = '#b50000';\n      sty.bottom = '0px';\n      sty.left = '0px';\n      sty.margin = '0px';\n      sty.zIndex = '10000';\n      sty.textAlign = 'center';\n      el.classList.add('firebase-emulator-warning');\n      document.body.appendChild(el);\n    }\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\n      console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n    }\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', attachBanner);\n      } else {\n        attachBanner();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by an {@link AuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class AuthCredential {\n    /** @internal */\n    constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    signInMethod) {\n      this.providerId = providerId;\n      this.signInMethod = signInMethod;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getIdTokenResponse(_auth) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _linkToIdToken(_auth, _idToken) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getReauthenticationResolver(_auth) {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function resetPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function updateEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  // Used for linking an email/password account to an existing idToken. Uses the same request/response\n  // format as updateEmailPassword.\n  async function linkEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n  }\n  async function applyActionCode$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithPassword(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function sendOobCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n  }\n  async function sendEmailVerification$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendPasswordResetEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendSignInLinkToEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function verifyAndChangeEmail(auth, request) {\n    return sendOobCode(auth, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithEmailLink$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n  async function signInWithEmailLinkForLinking(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n   * {@link ProviderId}.PASSWORD\n   *\n   * @remarks\n   * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @public\n   */\n  class EmailAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(/** @internal */\n    _email, /** @internal */\n    _password, signInMethod, /** @internal */\n    _tenantId = null) {\n      super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\n      this._email = _email;\n      this._password = _password;\n      this._tenantId = _tenantId;\n    }\n    /** @internal */\n    static _fromEmailAndPassword(email, password) {\n      return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n    }\n    /** @internal */\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\n      return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      return {\n        email: this._email,\n        password: this._password,\n        signInMethod: this.signInMethod,\n        tenantId: this._tenantId\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n     *\n     * @param json - Either `object` or the stringified representation of the object. When string is\n     * provided, `JSON.parse` would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      if (obj?.email && obj?.password) {\n        if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n          return this._fromEmailAndPassword(obj.email, obj.password);\n        } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n          return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n        }\n      }\n      return null;\n    }\n    /** @internal */\n    async _getIdTokenResponse(auth) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLink$1(auth, {\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    async _linkToIdToken(auth, idToken) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            idToken,\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLinkForLinking(auth, {\n            idToken,\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return this._getIdTokenResponse(auth);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithIdp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI$1 = 'http://localhost';\n  /**\n   * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class OAuthCredential extends AuthCredential {\n    constructor() {\n      super(...arguments);\n      this.pendingToken = null;\n    }\n    /** @internal */\n    static _fromParams(params) {\n      const cred = new OAuthCredential(params.providerId, params.signInMethod);\n      if (params.idToken || params.accessToken) {\n        // OAuth 2 and either ID token or access token.\n        if (params.idToken) {\n          cred.idToken = params.idToken;\n        }\n        if (params.accessToken) {\n          cred.accessToken = params.accessToken;\n        }\n        // Add nonce if available and no pendingToken is present.\n        if (params.nonce && !params.pendingToken) {\n          cred.nonce = params.nonce;\n        }\n        if (params.pendingToken) {\n          cred.pendingToken = params.pendingToken;\n        }\n      } else if (params.oauthToken && params.oauthTokenSecret) {\n        // OAuth 1 and OAuth token with token secret\n        cred.accessToken = params.oauthToken;\n        cred.secret = params.oauthTokenSecret;\n      } else {\n        _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      return cred;\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        idToken: this.idToken,\n        accessToken: this.accessToken,\n        secret: this.secret,\n        nonce: this.nonce,\n        pendingToken: this.pendingToken,\n        providerId: this.providerId,\n        signInMethod: this.signInMethod\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        ...rest\n      } = obj;\n      if (!providerId || !signInMethod) {\n        return null;\n      }\n      const cred = new OAuthCredential(providerId, signInMethod);\n      cred.idToken = rest.idToken || undefined;\n      cred.accessToken = rest.accessToken || undefined;\n      cred.secret = rest.secret;\n      cred.nonce = rest.nonce;\n      cred.pendingToken = rest.pendingToken || null;\n      return cred;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    buildRequest() {\n      const request = {\n        requestUri: IDP_REQUEST_URI$1,\n        returnSecureToken: true\n      };\n      if (this.pendingToken) {\n        request.pendingToken = this.pendingToken;\n      } else {\n        const postBody = {};\n        if (this.idToken) {\n          postBody['id_token'] = this.idToken;\n        }\n        if (this.accessToken) {\n          postBody['access_token'] = this.accessToken;\n        }\n        if (this.secret) {\n          postBody['oauth_token_secret'] = this.secret;\n        }\n        postBody['providerId'] = this.providerId;\n        if (this.nonce && !this.pendingToken) {\n          postBody['nonce'] = this.nonce;\n        }\n        request.postBody = (0, _firebaseUtil.querystring)(postBody);\n      }\n      return request;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function sendPhoneVerificationCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\n  }\n  async function signInWithPhoneNumber$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n  }\n  async function linkWithPhoneNumber$1(auth, request) {\n    const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n    if (response.temporaryProof) {\n      throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n    }\n    return response;\n  }\n  const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n  };\n  async function verifyPhoneNumberForExisting(auth, request) {\n    const apiRequest = {\n      ...request,\n      operation: 'REAUTH'\n    };\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Represents the credentials returned by {@link PhoneAuthProvider}.\n   *\n   * @public\n   */\n  class PhoneAuthCredential extends AuthCredential {\n    constructor(params) {\n      super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\n      this.params = params;\n    }\n    /** @internal */\n    static _fromVerification(verificationId, verificationCode) {\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode\n      });\n    }\n    /** @internal */\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\n      return new PhoneAuthCredential({\n        phoneNumber,\n        temporaryProof\n      });\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      return linkWithPhoneNumber$1(auth, {\n        idToken,\n        ...this._makeVerificationRequest()\n      });\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _makeVerificationRequest() {\n      const {\n        temporaryProof,\n        phoneNumber,\n        verificationId,\n        verificationCode\n      } = this.params;\n      if (temporaryProof && phoneNumber) {\n        return {\n          temporaryProof,\n          phoneNumber\n        };\n      }\n      return {\n        sessionInfo: verificationId,\n        code: verificationCode\n      };\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      const obj = {\n        providerId: this.providerId\n      };\n      if (this.params.phoneNumber) {\n        obj.phoneNumber = this.params.phoneNumber;\n      }\n      if (this.params.temporaryProof) {\n        obj.temporaryProof = this.params.temporaryProof;\n      }\n      if (this.params.verificationCode) {\n        obj.verificationCode = this.params.verificationCode;\n      }\n      if (this.params.verificationId) {\n        obj.verificationId = this.params.verificationId;\n      }\n      return obj;\n    }\n    /** Generates a phone credential based on a plain object or a JSON string. */\n    static fromJSON(json) {\n      if (typeof json === 'string') {\n        json = JSON.parse(json);\n      }\n      const {\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      } = json;\n      if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n        return null;\n      }\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      });\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Maps the mode string in action code URL to Action Code Info operation.\n   *\n   * @param mode\n   */\n  function parseMode(mode) {\n    switch (mode) {\n      case 'recoverEmail':\n        return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n      case 'resetPassword':\n        return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n      case 'signIn':\n        return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n      case 'verifyEmail':\n        return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n      case 'verifyAndChangeEmail':\n        return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n      case 'revertSecondFactorAddition':\n        return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n      default:\n        return null;\n    }\n  }\n  /**\n   * Helper to parse FDL links\n   *\n   * @param url\n   */\n  function parseDeepLink(url) {\n    const link = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(url))['link'];\n    // Double link case (automatic redirect).\n    const doubleDeepLink = link ? (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(link))['deep_link_id'] : null;\n    // iOS custom scheme links.\n    const iOSDeepLink = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(url))['deep_link_id'];\n    const iOSDoubleDeepLink = iOSDeepLink ? (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(iOSDeepLink))['link'] : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n  }\n  /**\n   * A utility class to parse email action URLs such as password reset, email verification,\n   * email link sign in, etc.\n   *\n   * @public\n   */\n  class ActionCodeURL {\n    /**\n     * @param actionLink - The link from which to extract the URL.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @internal\n     */\n    constructor(actionLink) {\n      const searchParams = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(actionLink));\n      const apiKey = searchParams[\"apiKey\" /* QueryField.API_KEY */] ?? null;\n      const code = searchParams[\"oobCode\" /* QueryField.CODE */] ?? null;\n      const operation = parseMode(searchParams[\"mode\" /* QueryField.MODE */] ?? null);\n      // Validate API key, code and mode.\n      _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.apiKey = apiKey;\n      this.operation = operation;\n      this.code = code;\n      this.continueUrl = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */] ?? null;\n      this.languageCode = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */] ?? null;\n      this.tenantId = searchParams[\"tenantId\" /* QueryField.TENANT_ID */] ?? null;\n    }\n    /**\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n     * otherwise returns null.\n     *\n     * @param link  - The email action link string.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @public\n     */\n    static parseLink(link) {\n      const actionLink = parseDeepLink(link);\n      try {\n        return new ActionCodeURL(actionLink);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if\n   * the link is valid, otherwise returns null.\n   *\n   * @public\n   */\n  function parseActionCodeURL(link) {\n    return ActionCodeURL.parseLink(link);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating {@link EmailAuthCredential}.\n   *\n   * @public\n   */\n  class EmailAuthProvider {\n    constructor() {\n      /**\n       * Always set to {@link ProviderId}.PASSWORD, even for email link.\n       */\n      this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and password.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credential(email, password);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n     * ```\n     *\n     * @param email - Email address.\n     * @param password - User account password.\n     * @returns The auth provider credential.\n     */\n    static credential(email, password) {\n      return EmailAuthCredential._fromEmailAndPassword(email, password);\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n     * email link operation.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * await sendSignInLinkToEmail(auth, email);\n     * // Obtain emailLink from user.\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n     * ```\n     *\n     * @param auth - The {@link Auth} instance used to verify the link.\n     * @param email - Email address.\n     * @param emailLink - Sign-in email link.\n     * @returns - The auth provider credential.\n     */\n    static credentialWithLink(email, emailLink) {\n      const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n      _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n    }\n  }\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  EmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The base class for all Federated providers (OAuth (including OIDC), SAML).\n   *\n   * This class is not meant to be instantiated directly.\n   *\n   * @public\n   */\n  class FederatedAuthProvider {\n    /**\n     * Constructor for generic OAuth providers.\n     *\n     * @param providerId - Provider for which credentials should be generated.\n     */\n    constructor(providerId) {\n      this.providerId = providerId;\n      /** @internal */\n      this.defaultLanguageCode = null;\n      /** @internal */\n      this.customParameters = {};\n    }\n    /**\n     * Set the language gode.\n     *\n     * @param languageCode - language code\n     */\n    setDefaultLanguage(languageCode) {\n      this.defaultLanguageCode = languageCode;\n    }\n    /**\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n     * operations.\n     *\n     * @remarks\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n     *\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n     */\n    setCustomParameters(customOAuthParameters) {\n      this.customParameters = customOAuthParameters;\n      return this;\n    }\n    /**\n     * Retrieve the current list of {@link CustomParameters}.\n     */\n    getCustomParameters() {\n      return this.customParameters;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Common code to all OAuth providers. This is separate from the\n   * {@link OAuthProvider} so that child providers (like\n   * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n   * Instead, they rely on a static `credential` method.\n   */\n  class BaseOAuthProvider extends FederatedAuthProvider {\n    constructor() {\n      super(...arguments);\n      /** @internal */\n      this.scopes = [];\n    }\n    /**\n     * Add an OAuth scope to the credential.\n     *\n     * @param scope - Provider OAuth scope to add.\n     */\n    addScope(scope) {\n      // If not already added, add scope to list.\n      if (!this.scopes.includes(scope)) {\n        this.scopes.push(scope);\n      }\n      return this;\n    }\n    /**\n     * Retrieve the current list of OAuth scopes.\n     */\n    getScopes() {\n      return [...this.scopes];\n    }\n  }\n  /**\n   * Provider for generating generic {@link OAuthCredential}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new OAuthProvider('google.com');\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a OAuth Access Token for the provider.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a OAuth Access Token for the provider.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class OAuthProvider extends BaseOAuthProvider {\n    /**\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return OAuthCredential._fromParams(obj);\n    }\n    /**\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n     *\n     * @remarks\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n     * the raw nonce must match the nonce field in the ID token.\n     *\n     * @example\n     * ```javascript\n     * // `googleUser` from the onsuccess Google Sign In callback.\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\n     * const provider = new OAuthProvider('google.com');\n     * const credential = provider.credential({\n     *   idToken: googleUser.getAuthResponse().id_token,\n     * });\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param params - Either the options object containing the ID token, access token and raw nonce\n     * or the ID token string.\n     */\n    credential(params) {\n      return this._credential({\n        ...params,\n        nonce: params.rawNonce\n      });\n    }\n    /** An internal credential method that accepts more permissive options */\n    _credential(params) {\n      _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      // For OAuthCredential, sign in method is same as providerId.\n      return OAuthCredential._fromParams({\n        ...params,\n        providerId: this.providerId,\n        signInMethod: this.providerId\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n    }\n    static oauthCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce,\n        providerId\n      } = tokenResponse;\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      }\n      if (!providerId) {\n        return null;\n      }\n      try {\n        return new OAuthProvider(providerId)._credential({\n          idToken: oauthIdToken,\n          accessToken: oauthAccessToken,\n          nonce,\n          pendingToken\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('user_birthday');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = FacebookAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = FacebookAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  class FacebookAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"facebook.com\" /* ProviderId.FACEBOOK */);\n    }\n    /**\n     * Creates a credential for Facebook.\n     *\n     * @example\n     * ```javascript\n     * // `event` from the Facebook auth.authResponseChange callback.\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param accessToken - Facebook access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: FacebookAuthProvider.PROVIDER_ID,\n        signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  FacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GoogleAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Google Access Token.\n   *   const credential = GoogleAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Google Access Token.\n   * const credential = GoogleAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  class GoogleAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"google.com\" /* ProviderId.GOOGLE */);\n      this.addScope('profile');\n    }\n    /**\n     * Creates a credential for Google. At least one of ID token and access token is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param idToken - Google ID token.\n     * @param accessToken - Google access token.\n     */\n    static credential(idToken, accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GoogleAuthProvider.PROVIDER_ID,\n        signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n        idToken,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken\n      } = tokenResponse;\n      if (!oauthIdToken && !oauthAccessToken) {\n        // This could be an oauth 1 credential or a phone credential\n        return null;\n      }\n      try {\n        return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  GoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n   *\n   * @remarks\n   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n   * the {@link signInWithPopup} handler:\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GithubAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('repo');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a GitHub Access Token.\n   *   const credential = GithubAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GithubAuthProvider();\n   * provider.addScope('repo');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a GitHub Access Token.\n   * const credential = GithubAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class GithubAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"github.com\" /* ProviderId.GITHUB */);\n    }\n    /**\n     * Creates a credential for GitHub.\n     *\n     * @param accessToken - GitHub access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GithubAuthProvider.PROVIDER_ID,\n        signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI = 'http://localhost';\n  /**\n   * @public\n   */\n  class SAMLAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(providerId, pendingToken) {\n      super(providerId, providerId);\n      this.pendingToken = pendingToken;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        signInMethod: this.signInMethod,\n        providerId: this.providerId,\n        pendingToken: this.pendingToken\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        pendingToken\n      } = obj;\n      if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n        return null;\n      }\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    /**\n     * Helper static method to avoid exposing the constructor to end users.\n     *\n     * @internal\n     */\n    static _create(providerId, pendingToken) {\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    buildRequest() {\n      return {\n        requestUri: IDP_REQUEST_URI,\n        returnSecureToken: true,\n        pendingToken: this.pendingToken\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const SAML_PROVIDER_PREFIX = 'saml.';\n  /**\n   * An {@link AuthProvider} for SAML.\n   *\n   * @public\n   */\n  class SAMLAuthProvider extends FederatedAuthProvider {\n    /**\n     * Constructor. The providerId must start with \"saml.\"\n     * @param providerId - SAML provider ID.\n     */\n    constructor(providerId) {\n      _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      super(providerId);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n     * successful SAML flow completes.\n     *\n     * @remarks\n     *\n     * For example, to get an {@link AuthCredential}, you could write the\n     * following code:\n     *\n     * ```js\n     * const userCredential = await signInWithPopup(auth, samlProvider);\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n     * ```\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n    }\n    /**\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const credential = SAMLAuthCredential.fromJSON(json);\n      _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return credential;\n    }\n    static samlCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        pendingToken,\n        providerId\n      } = tokenResponse;\n      if (!pendingToken || !providerId) {\n        return null;\n      }\n      try {\n        return SAMLAuthCredential._create(providerId, pendingToken);\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new TwitterAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Twitter Access Token and Secret.\n   *   const credential = TwitterAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   *   const secret = credential.secret;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new TwitterAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Twitter Access Token and Secret.\n   * const credential = TwitterAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * const secret = credential.secret;\n   * ```\n   *\n   * @public\n   */\n  class TwitterAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"twitter.com\" /* ProviderId.TWITTER */);\n    }\n    /**\n     * Creates a credential for Twitter.\n     *\n     * @param token - Twitter access token.\n     * @param secret - Twitter secret.\n     */\n    static credential(token, secret) {\n      return OAuthCredential._fromParams({\n        providerId: TwitterAuthProvider.PROVIDER_ID,\n        signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n        oauthToken: token,\n        oauthTokenSecret: secret\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthAccessToken,\n        oauthTokenSecret\n      } = tokenResponse;\n      if (!oauthAccessToken || !oauthTokenSecret) {\n        return null;\n      }\n      try {\n        return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  TwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signUp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserCredentialImpl {\n    constructor(params) {\n      this.user = params.user;\n      this.providerId = params.providerId;\n      this._tokenResponse = params._tokenResponse;\n      this.operationType = params.operationType;\n    }\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n      const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n      const providerId = providerIdForResponse(idTokenResponse);\n      const userCred = new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: idTokenResponse,\n        operationType\n      });\n      return userCred;\n    }\n    static async _forOperation(user, operationType, response) {\n      await user._updateTokensIfNecessary(response, /* reload */true);\n      const providerId = providerIdForResponse(response);\n      return new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: response,\n        operationType\n      });\n    }\n  }\n  function providerIdForResponse(response) {\n    if (response.providerId) {\n      return response.providerId;\n    }\n    if ('phoneNumber' in response) {\n      return \"phone\" /* ProviderId.PHONE */;\n    }\n    return null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in as an anonymous user.\n   *\n   * @remarks\n   * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n   * new anonymous user identity will be created and returned.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  async function signInAnonymously(auth) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    await authInternal._initializationPromise;\n    if (authInternal.currentUser?.isAnonymous) {\n      // If an anonymous user is already signed in, no need to sign them in again.\n      return new UserCredentialImpl({\n        user: authInternal.currentUser,\n        providerId: null,\n        operationType: \"signIn\" /* OperationType.SIGN_IN */\n      });\n    }\n    const response = await signUp(authInternal, {\n      returnSecureToken: true\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorError extends _firebaseUtil.FirebaseError {\n    constructor(auth, error, operationType, user) {\n      super(error.code, error.message);\n      this.operationType = operationType;\n      this.user = user;\n      // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(this, MultiFactorError.prototype);\n      this.customData = {\n        appName: auth.name,\n        tenantId: auth.tenantId ?? undefined,\n        _serverResponse: error.customData._serverResponse,\n        operationType\n      };\n    }\n    static _fromErrorAndOperation(auth, error, operationType, user) {\n      return new MultiFactorError(auth, error, operationType, user);\n    }\n  }\n  function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(error => {\n      if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n        throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Takes a set of UserInfo provider data and converts it to a set of names\n   */\n  function providerDataAsNames(providerData) {\n    return new Set(providerData.map(({\n      providerId\n    }) => providerId).filter(pid => !!pid));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Unlinks a provider from a user account.\n   *\n   * @param user - The user.\n   * @param providerId - The provider to unlink.\n   *\n   * @public\n   */\n  async function unlink(user, providerId) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _assertLinkedStatus(true, userInternal, providerId);\n    const {\n      providerUserInfo\n    } = await deleteLinkedAccounts(userInternal.auth, {\n      idToken: await userInternal.getIdToken(),\n      deleteProvider: [providerId]\n    });\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n      userInternal.phoneNumber = null;\n    }\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    return userInternal;\n  }\n  async function _link$1(user, credential, bypassAuthState = false) {\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n    return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n  }\n  async function _assertLinkedStatus(expected, user, provider) {\n    await _reloadWithoutSaving(user);\n    const providerIds = providerDataAsNames(user.providerData);\n    const code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n    _assert(providerIds.has(provider) === expected, user.auth, code);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reauthenticate(user, credential, bypassAuthState = false) {\n    const {\n      auth\n    } = user;\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n    try {\n      const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n      _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const parsed = _parseToken(response.idToken);\n      _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const {\n        sub: localId\n      } = parsed;\n      _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      return UserCredentialImpl._forOperation(user, operationType, response);\n    } catch (e) {\n      // Convert user deleted error into user mismatch\n      if (e?.code === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n        _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _signInWithCredential(auth, credential, bypassAuthState = false) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"signIn\" /* OperationType.SIGN_IN */;\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n    if (!bypassAuthState) {\n      await auth._updateCurrentUser(userCredential.user);\n    }\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function signInWithCredential(auth, credential) {\n    return _signInWithCredential(_castAuth(auth), credential);\n  }\n  /**\n   * Links the user account with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function linkWithCredential(user, credential) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\n    return _link$1(userInternal, credential);\n  }\n  /**\n   * Re-authenticates a user using a fresh credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n   * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n   * or a `TOKEN_EXPIRED` error.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function reauthenticateWithCredential(user, credential) {\n    return _reauthenticate((0, _firebaseUtil.getModularInstance)(user), credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithCustomToken$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in using a custom token.\n   *\n   * @remarks\n   * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n   * be generated by an auth backend using the\n   * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n   * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n   *\n   * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param customToken - The custom token to sign in with.\n   *\n   * @public\n   */\n  async function signInWithCustomToken(auth, customToken) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const response = await signInWithCustomToken$1(authInternal, {\n      token: customToken,\n      returnSecureToken: true\n    });\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(cred.user);\n    return cred;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorInfoImpl {\n    constructor(factorId, response) {\n      this.factorId = factorId;\n      this.uid = response.mfaEnrollmentId;\n      this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n      this.displayName = response.displayName;\n    }\n    static _fromServerResponse(auth, enrollment) {\n      if ('phoneInfo' in enrollment) {\n        return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      } else if ('totpInfo' in enrollment) {\n        return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      }\n      return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }\n  class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"phone\" /* FactorId.PHONE */, response);\n      this.phoneNumber = response.phoneInfo;\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new PhoneMultiFactorInfoImpl(enrollment);\n    }\n  }\n  class TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"totp\" /* FactorId.TOTP */, response);\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new TotpMultiFactorInfoImpl(enrollment);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    _assert(actionCodeSettings.url?.length > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n    _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.linkDomain = actionCodeSettings.linkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n      _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n      request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n      _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n      request.androidInstallApp = actionCodeSettings.android.installApp;\n      request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n      request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates the password policy cached in the {@link Auth} instance if a policy is already\n   * cached for the project or tenant.\n   *\n   * @remarks\n   * We only fetch the password policy if the password did not meet policy requirements and\n   * there is an existing policy cached. A developer must call validatePassword at least\n   * once for the cache to be automatically updated.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @private\n   */\n  async function recachePasswordPolicy(auth) {\n    const authInternal = _castAuth(auth);\n    if (authInternal._getPasswordPolicyInternal()) {\n      await authInternal._updatePasswordPolicy();\n    }\n  }\n  /**\n   * Sends a password reset email to the given email address. This method does not throw an error when\n   * there's no user account with the given email address and\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   *\n   * @remarks\n   * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n   * the email sent to the user, along with the new password specified by the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain code from user.\n   * await confirmPasswordReset('user@example.com', code);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n    }\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A confirmation code sent to the user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  async function confirmPasswordReset(auth, oobCode, newPassword) {\n    await resetPassword((0, _firebaseUtil.getModularInstance)(auth), {\n      oobCode,\n      newPassword\n    }).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    // Do not return the email.\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function applyActionCode(auth, oobCode) {\n    await applyActionCode$1((0, _firebaseUtil.getModularInstance)(auth), {\n      oobCode\n    });\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns metadata about the code.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function checkActionCode(auth, oobCode) {\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const response = await resetPassword(authModular, {\n      oobCode\n    });\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\n    // VERIFY_AND_CHANGE_EMAIL.\n    // New email should not be empty if the request type is\n    // VERIFY_AND_CHANGE_EMAIL.\n    // Multi-factor info could not be empty if the request type is\n    // REVERT_SECOND_FACTOR_ADDITION.\n    const operation = response.requestType;\n    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    switch (operation) {\n      case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n        break;\n      case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n        _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        break;\n      case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n        _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // fall through\n      default:\n        _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    // The multi-factor info for revert second factor addition\n    let multiFactorInfo = null;\n    if (response.mfaInfo) {\n      multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n    }\n    return {\n      data: {\n        email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n        previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n        multiFactorInfo\n      },\n      operation\n    };\n  }\n  /**\n   * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns the user's email address if valid.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param code - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function verifyPasswordResetCode(auth, code) {\n    const {\n      data\n    } = await checkActionCode((0, _firebaseUtil.getModularInstance)(auth), code);\n    // Email should always be present since a code was sent to it\n    return data.email;\n  }\n  /**\n   * Creates a new user account associated with the specified email address and password.\n   *\n   * @remarks\n   * On successful creation of the user account, this user will also be signed in to your application.\n   *\n   * User account creation can fail if the account already exists or the password is invalid.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The email address acts as a unique identifier for the user and enables an email-based\n   * password reset. This function will create a new user account and set the initial user password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param password - The user's chosen password.\n   *\n   * @public\n   */\n  async function createUserWithEmailAndPassword(auth, email, password) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const request = {\n      returnSecureToken: true,\n      email,\n      password,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    const response = await signUpResponse.catch(error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in using an email and password.\n   *\n   * @remarks\n   * Fails with an error if the email address and password do not match. When\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n   * email/password.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The user's password is NOT the password used to access the user's email account. The\n   * email address serves as a unique identifier for the user, and the password is used to access\n   * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The users email address.\n   * @param password - The users password.\n   *\n   * @public\n   */\n  function signInWithEmailAndPassword(auth, email, password) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    return signInWithCredential((0, _firebaseUtil.getModularInstance)(auth), EmailAuthProvider.credential(email, password)).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Sends a sign-in email link to the user with the specified email.\n   *\n   * @remarks\n   * The sign-in operation has to always be completed in the app unlike other out of band email\n   * actions (password reset and email verifications). This is because, at the end of the flow,\n   * the user is expected to be signed in and their Auth state persisted within the app.\n   *\n   * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n   * address and the email link supplied in the email sent to the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   * @param authInternal - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    function setActionCodeSettings(request, actionCodeSettings) {\n      _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n      }\n    }\n    setActionCodeSettings(request, actionCodeSettings);\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function isSignInWithEmailLink(auth, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    return actionCodeUrl?.operation === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @remarks\n   * If no link is passed, the link is inferred from the current URL.\n   *\n   * Fails with an error if the email address is invalid or OTP in email link expires.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  async function signInWithEmailLink(auth, email, emailLink) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\n    // instance.\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n    return signInWithCredential(authModular, credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function createAuthUri(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Gets the list of possible sign in methods for the given email address. This method returns an\n   * empty list when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, irrespective of the number of authentication methods available for the given email.\n   *\n   * @remarks\n   * This is useful to differentiate methods of sign-in for the same provider, eg.\n   * {@link EmailAuthProvider} which has 2 methods of sign-in,\n   * {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   *\n   * Deprecated. Migrating off of this method is recommended as a security best-practice.\n   * Learn more in the Identity Platform documentation for\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n   * @public\n   */\n  async function fetchSignInMethodsForEmail(auth, email) {\n    // createAuthUri returns an error if continue URI is not http or https.\n    // For environments like Cordova, Chrome extensions, native frameworks, file\n    // systems, etc, use http://localhost as continue URL.\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n    const request = {\n      identifier: email,\n      continueUri\n    };\n    const {\n      signinMethods\n    } = await createAuthUri((0, _firebaseUtil.getModularInstance)(auth), request);\n    return signinMethods || [];\n  }\n  /**\n   * Sends a verification email to a user.\n   *\n   * @remarks\n   * The verification process is completed by calling {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendEmailVerification(user, actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendEmailVerification(user, actionCodeSettings) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n      idToken\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await sendEmailVerification$1(userInternal.auth, request);\n    if (email !== user.email) {\n      await user.reload();\n    }\n  }\n  /**\n   * Sends a verification email to a new email address.\n   *\n   * @remarks\n   * The user's email will be updated to the new one after being verified.\n   *\n   * If you have a custom email action handler, you can complete the verification process by calling\n   * {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address to be verified before update.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n      idToken,\n      newEmail\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await verifyAndChangeEmail(userInternal.auth, request);\n    if (email !== user.email) {\n      // If the local copy of the email on user is outdated, reload the\n      // user.\n      await user.reload();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function updateProfile$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates a user's profile data.\n   *\n   * @param user - The user.\n   * @param profile - The profile's `displayName` and `photoURL` to update.\n   *\n   * @public\n   */\n  async function updateProfile(user, {\n    displayName,\n    photoURL: photoUrl\n  }) {\n    if (displayName === undefined && photoUrl === undefined) {\n      return;\n    }\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await userInternal.getIdToken();\n    const profileRequest = {\n      idToken,\n      displayName,\n      photoUrl,\n      returnSecureToken: true\n    };\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n    userInternal.displayName = response.displayName || null;\n    userInternal.photoURL = response.photoUrl || null;\n    // Update the password provider as well\n    const passwordProvider = userInternal.providerData.find(({\n      providerId\n    }) => providerId === \"password\" /* ProviderId.PASSWORD */);\n    if (passwordProvider) {\n      passwordProvider.displayName = userInternal.displayName;\n      passwordProvider.photoURL = userInternal.photoURL;\n    }\n    await userInternal._updateTokensIfNecessary(response);\n  }\n  /**\n   * Updates the user's email address.\n   *\n   * @remarks\n   * An email will be sent to the original email address (if it was set) that allows to revoke the\n   * email address change, in order to protect them from account hijacking.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address.\n   *\n   * Throws \"auth/operation-not-allowed\" error when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n   *\n   * @public\n   */\n  function updateEmail(user, newEmail) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    return updateEmailOrPassword(userInternal, newEmail, null);\n  }\n  /**\n   * Updates the user's password.\n   *\n   * @remarks\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function updatePassword(user, newPassword) {\n    return updateEmailOrPassword((0, _firebaseUtil.getModularInstance)(user), null, newPassword);\n  }\n  async function updateEmailOrPassword(user, email, password) {\n    const {\n      auth\n    } = user;\n    const idToken = await user.getIdToken();\n    const request = {\n      idToken,\n      returnSecureToken: true\n    };\n    if (email) {\n      request.email = email;\n    }\n    if (password) {\n      request.password = password;\n    }\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n    await user._updateTokensIfNecessary(response, /* reload */true);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Parse the `AdditionalUserInfo` from the ID token response.\n   *\n   */\n  function _fromIdTokenResponse(idTokenResponse) {\n    if (!idTokenResponse) {\n      return null;\n    }\n    const {\n      providerId\n    } = idTokenResponse;\n    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n    if (!providerId && idTokenResponse?.idToken) {\n      const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.['sign_in_provider'];\n      if (signInProvider) {\n        const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n        // Uses generic class in accordance with the legacy SDK.\n        return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n      }\n    }\n    if (!providerId) {\n      return null;\n    }\n    switch (providerId) {\n      case \"facebook.com\" /* ProviderId.FACEBOOK */:\n        return new FacebookAdditionalUserInfo(isNewUser, profile);\n      case \"github.com\" /* ProviderId.GITHUB */:\n        return new GithubAdditionalUserInfo(isNewUser, profile);\n      case \"google.com\" /* ProviderId.GOOGLE */:\n        return new GoogleAdditionalUserInfo(isNewUser, profile);\n      case \"twitter.com\" /* ProviderId.TWITTER */:\n        return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n      case \"custom\" /* ProviderId.CUSTOM */:\n      case \"anonymous\" /* ProviderId.ANONYMOUS */:\n        return new GenericAdditionalUserInfo(isNewUser, null);\n      default:\n        return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n  }\n  class GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile = {}) {\n      this.isNewUser = isNewUser;\n      this.providerId = providerId;\n      this.profile = profile;\n    }\n  }\n  class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile, username) {\n      super(isNewUser, providerId, profile);\n      this.username = username;\n    }\n  }\n  class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\n    }\n  }\n  class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof profile?.login === 'string' ? profile?.login : null);\n    }\n  }\n  class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\n    }\n  }\n  class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile, screenName) {\n      super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\n    }\n  }\n  /**\n   * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n   *\n   * @param userCredential - The user credential.\n   *\n   * @public\n   */\n  function getAdditionalUserInfo(userCredential) {\n    const {\n      user,\n      _tokenResponse\n    } = userCredential;\n    if (user.isAnonymous && !_tokenResponse) {\n      // Handle the special case where signInAnonymously() gets called twice.\n      // No network call is made so there's nothing to actually fill this in\n      return {\n        providerId: null,\n        isNewUser: false,\n        profile: null\n      };\n    }\n    return _fromIdTokenResponse(_tokenResponse);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Non-optional auth methods.\n  /**\n   * Changes the type of persistence on the {@link Auth} instance for the currently saved\n   * `Auth` session and applies this type of persistence for future sign-in requests, including\n   * sign-in with redirect requests.\n   *\n   * @remarks\n   * This makes it easy for a user signing in to specify whether their session should be\n   * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n   * that are shared by other users or have sensitive data.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * setPersistence(auth, browserSessionPersistence);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param persistence - The {@link Persistence} to use.\n   * @returns A `Promise` that resolves once the persistence change has completed\n   *\n   * @public\n   */\n  function setPersistence(auth, persistence) {\n    return (0, _firebaseUtil.getModularInstance)(auth).setPersistence(persistence);\n  }\n  /**\n   * Loads the reCAPTCHA configuration into the `Auth` instance.\n   *\n   * @remarks\n   * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n   * verification flow should be triggered for each auth provider, into the\n   * current Auth session.\n   *\n   * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n   * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n   * verification, the SDK will transparently load the reCAPTCHA config and restart the\n   * auth flows.\n   *\n   * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n   * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * initializeRecaptchaConfig(auth);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function initializeRecaptchaConfig(auth) {\n    return _initializeRecaptchaConfig(auth);\n  }\n  /**\n   * Validates the password against the password policy configured for the project or tenant.\n   *\n   * @remarks\n   * If no tenant ID is set on the `Auth` instance, then this method will use the password\n   * policy configured for the project. Otherwise, this method will use the policy configured\n   * for the tenant. If a password policy has not been configured, then the default policy\n   * configured for all projects will be used.\n   *\n   * If an auth flow fails because a submitted password does not meet the password policy\n   * requirements and this method has previously been called, then this method will use the\n   * most recent policy available when called again.\n   *\n   * @example\n   * ```javascript\n   * validatePassword(auth, 'some-password');\n   * ```\n   *\n   * @param auth The {@link Auth} instance.\n   * @param password The password to validate.\n   *\n   * @public\n   */\n  async function validatePassword(auth, password) {\n    const authInternal = _castAuth(auth);\n    return authInternal.validatePassword(password);\n  }\n  /**\n   * Adds an observer for changes to the signed-in user's ID token.\n   *\n   * @remarks\n   * This includes sign-in, sign-out, and token refresh events.\n   * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onIdTokenChanged(auth, nextOrObserver, error, completed) {\n    return (0, _firebaseUtil.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Adds a blocking callback that runs before an auth state change\n   * sets a new user.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param callback - callback triggered before new user value is set.\n   *   If this throws, it blocks the user from being set.\n   * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n   *   callback throws, allowing you to undo any side effects.\n   */\n  function beforeAuthStateChanged(auth, callback, onAbort) {\n    return (0, _firebaseUtil.getModularInstance)(auth).beforeAuthStateChanged(callback, onAbort);\n  }\n  /**\n   * Adds an observer for changes to the user's sign-in state.\n   *\n   * @remarks\n   * To keep the old behavior, see {@link onIdTokenChanged}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onAuthStateChanged(auth, nextOrObserver, error, completed) {\n    return (0, _firebaseUtil.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Sets the current language to the default device/browser preference.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function useDeviceLanguage(auth) {\n    (0, _firebaseUtil.getModularInstance)(auth).useDeviceLanguage();\n  }\n  /**\n   * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n   * {@link Auth} instance.\n   *\n   * @remarks\n   * A new instance copy of the user provided will be made and set as currentUser.\n   *\n   * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n   * like other sign in methods.\n   *\n   * The operation fails with an error if the user to be updated belongs to a different Firebase\n   * project.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param user - The new {@link User}.\n   *\n   * @public\n   */\n  function updateCurrentUser(auth, user) {\n    return (0, _firebaseUtil.getModularInstance)(auth).updateCurrentUser(user);\n  }\n  /**\n   * Signs out the current user.\n   *\n   * @remarks\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signOut(auth) {\n    return (0, _firebaseUtil.getModularInstance)(auth).signOut();\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param token - The Apple OAuth access token.\n   *\n   * @public\n   */\n  function revokeAccessToken(auth, token) {\n    const authInternal = _castAuth(auth);\n    return authInternal.revokeAccessToken(token);\n  }\n  /**\n   * Deletes and signs out the user.\n   *\n   * @remarks\n   * Important: this is a security-sensitive operation that requires the user to have recently\n   * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function deleteUser(user) {\n    return (0, _firebaseUtil.getModularInstance)(user).delete();\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorSessionImpl {\n    constructor(type, credential, user) {\n      this.type = type;\n      this.credential = credential;\n      this.user = user;\n    }\n    static _fromIdtoken(idToken, user) {\n      return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n    }\n    static _fromMfaPendingCredential(mfaPendingCredential) {\n      return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n    }\n    toJSON() {\n      const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n      return {\n        multiFactorSession: {\n          [key]: this.credential\n        }\n      };\n    }\n    static fromJSON(obj) {\n      if (obj?.multiFactorSession) {\n        if (obj.multiFactorSession?.pendingCredential) {\n          return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n        } else if (obj.multiFactorSession?.idToken) {\n          return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n        }\n      }\n      return null;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorResolverImpl {\n    constructor(session, hints, signInResolver) {\n      this.session = session;\n      this.hints = hints;\n      this.signInResolver = signInResolver;\n    }\n    /** @internal */\n    static _fromError(authExtern, error) {\n      const auth = _castAuth(authExtern);\n      const serverResponse = error.customData._serverResponse;\n      const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n      _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n      return new MultiFactorResolverImpl(session, hints, async assertion => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = {\n          ...serverResponse,\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        };\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case \"signIn\" /* OperationType.SIGN_IN */:\n            const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n            _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n          default:\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n      });\n    }\n    async resolveSignIn(assertionExtern) {\n      const assertion = assertionExtern;\n      return this.signInResolver(assertion);\n    }\n  }\n  /**\n   * Provides a {@link MultiFactorResolver} suitable for completion of a\n   * multi-factor flow.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param error - The {@link MultiFactorError} raised during a sign-in, or\n   * reauthentication operation.\n   *\n   * @public\n   */\n  function getMultiFactorResolver(auth, error) {\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const errorInternal = error;\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(errorInternal.customData._serverResponse?.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function startEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function withdrawMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n  }\n  class MultiFactorUserImpl {\n    constructor(user) {\n      this.user = user;\n      this.enrolledFactors = [];\n      user._onReload(userInfo => {\n        if (userInfo.mfaInfo) {\n          this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n        }\n      });\n    }\n    static _fromUser(user) {\n      return new MultiFactorUserImpl(user);\n    }\n    async getSession() {\n      return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n    }\n    async enroll(assertionExtern, displayName) {\n      const assertion = assertionExtern;\n      const session = await this.getSession();\n      const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n      // New tokens will be issued after enrollment of the new second factors.\n      // They need to be updated on the user.\n      await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n      // The user needs to be reloaded to get the new multi-factor information\n      // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n      // will be updated.\n      return this.user.reload();\n    }\n    async unenroll(infoOrUid) {\n      const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n      const idToken = await this.user.getIdToken();\n      try {\n        const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        }));\n        // Remove the second factor from the user's list.\n        this.enrolledFactors = this.enrolledFactors.filter(({\n          uid\n        }) => uid !== mfaEnrollmentId);\n        // Depending on whether the backend decided to revoke the user's session,\n        // the tokenResponse may be empty. If the tokens were not updated (and they\n        // are now invalid), reloading the user will discover this and invalidate\n        // the user's state accordingly.\n        await this.user._updateTokensIfNecessary(idTokenResponse);\n        await this.user.reload();\n      } catch (e) {\n        throw e;\n      }\n    }\n  }\n  const multiFactorUserCache = new WeakMap();\n  /**\n   * The {@link MultiFactorUser} corresponding to the user.\n   *\n   * @remarks\n   * This is used to access all multi-factor properties and operations related to the user.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function multiFactor(user) {\n    const userModular = (0, _firebaseUtil.getModularInstance)(user);\n    if (!multiFactorUserCache.has(userModular)) {\n      multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n    }\n    return multiFactorUserCache.get(userModular);\n  }\n  const STORAGE_AVAILABLE_KEY = '__sak';\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // There are two different browser persistence types: local and session.\n  // Both have the same implementation but use a different underlying storage\n  // object.\n  class BrowserPersistenceClass {\n    constructor(storageRetriever, type) {\n      this.storageRetriever = storageRetriever;\n      this.type = type;\n    }\n    _isAvailable() {\n      try {\n        if (!this.storage) {\n          return Promise.resolve(false);\n        }\n        this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n        this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n        return Promise.resolve(true);\n      } catch {\n        return Promise.resolve(false);\n      }\n    }\n    _set(key, value) {\n      this.storage.setItem(key, JSON.stringify(value));\n      return Promise.resolve();\n    }\n    _get(key) {\n      const json = this.storage.getItem(key);\n      return Promise.resolve(json ? JSON.parse(json) : null);\n    }\n    _remove(key) {\n      this.storage.removeItem(key);\n      return Promise.resolve();\n    }\n    get storage() {\n      return this.storageRetriever();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // The polling period in case events are not supported\n  const _POLLING_INTERVAL_MS$1 = 1000;\n  // The IE 10 localStorage cross tab synchronization delay in milliseconds\n  const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\n  class BrowserLocalPersistence extends BrowserPersistenceClass {\n    constructor() {\n      super(() => window.localStorage, \"LOCAL\" /* PersistenceType.LOCAL */);\n      this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\n      this.listeners = {};\n      this.localCache = {};\n      // setTimeout return value is platform specific\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.pollTimer = null;\n      // Whether to use polling instead of depending on window events\n      this.fallbackToPolling = _isMobileBrowser();\n      this._shouldAllowMigration = true;\n    }\n    forAllChangedKeys(cb) {\n      // Check all keys with listeners on them.\n      for (const key of Object.keys(this.listeners)) {\n        // Get value from localStorage.\n        const newValue = this.storage.getItem(key);\n        const oldValue = this.localCache[key];\n        // If local map value does not match, trigger listener with storage event.\n        // Differentiate this simulated event from the real storage event.\n        if (newValue !== oldValue) {\n          cb(key, oldValue, newValue);\n        }\n      }\n    }\n    onStorageEvent(event, poll = false) {\n      // Key would be null in some situations, like when localStorage is cleared\n      if (!event.key) {\n        this.forAllChangedKeys((key, _oldValue, newValue) => {\n          this.notifyListeners(key, newValue);\n        });\n        return;\n      }\n      const key = event.key;\n      // Check the mechanism how this event was detected.\n      // The first event will dictate the mechanism to be used.\n      if (poll) {\n        // Environment detects storage changes via polling.\n        // Remove storage event listener to prevent possible event duplication.\n        this.detachListener();\n      } else {\n        // Environment detects storage changes via storage event listener.\n        // Remove polling listener to prevent possible event duplication.\n        this.stopPolling();\n      }\n      const triggerListeners = () => {\n        // Keep local map up to date in case storage event is triggered before\n        // poll.\n        const storedValue = this.storage.getItem(key);\n        if (!poll && this.localCache[key] === storedValue) {\n          // Real storage event which has already been detected, do nothing.\n          // This seems to trigger in some IE browsers for some reason.\n          return;\n        }\n        this.notifyListeners(key, storedValue);\n      };\n      const storedValue = this.storage.getItem(key);\n      if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {\n        // IE 10 has this weird bug where a storage event would trigger with the\n        // correct key, oldValue and newValue but localStorage.getItem(key) does\n        // not yield the updated value until a few milliseconds. This ensures\n        // this recovers from that situation.\n        setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n      } else {\n        triggerListeners();\n      }\n    }\n    notifyListeners(key, value) {\n      this.localCache[key] = value;\n      const listeners = this.listeners[key];\n      if (listeners) {\n        for (const listener of Array.from(listeners)) {\n          listener(value ? JSON.parse(value) : value);\n        }\n      }\n    }\n    startPolling() {\n      this.stopPolling();\n      this.pollTimer = setInterval(() => {\n        this.forAllChangedKeys((key, oldValue, newValue) => {\n          this.onStorageEvent(new StorageEvent('storage', {\n            key,\n            oldValue,\n            newValue\n          }), /* poll */true);\n        });\n      }, _POLLING_INTERVAL_MS$1);\n    }\n    stopPolling() {\n      if (this.pollTimer) {\n        clearInterval(this.pollTimer);\n        this.pollTimer = null;\n      }\n    }\n    attachListener() {\n      window.addEventListener('storage', this.boundEventHandler);\n    }\n    detachListener() {\n      window.removeEventListener('storage', this.boundEventHandler);\n    }\n    _addListener(key, listener) {\n      if (Object.keys(this.listeners).length === 0) {\n        // Whether browser can detect storage event when it had already been pushed to the background.\n        // This may happen in some mobile browsers. A localStorage change in the foreground window\n        // will not be detected in the background window via the storage event.\n        // This was detected in iOS 7.x mobile browsers\n        if (this.fallbackToPolling) {\n          this.startPolling();\n        } else {\n          this.attachListener();\n        }\n      }\n      if (!this.listeners[key]) {\n        this.listeners[key] = new Set();\n        // Populate the cache to avoid spuriously triggering on first poll.\n        this.localCache[key] = this.storage.getItem(key);\n      }\n      this.listeners[key].add(listener);\n    }\n    _removeListener(key, listener) {\n      if (this.listeners[key]) {\n        this.listeners[key].delete(listener);\n        if (this.listeners[key].size === 0) {\n          delete this.listeners[key];\n        }\n      }\n      if (Object.keys(this.listeners).length === 0) {\n        this.detachListener();\n        this.stopPolling();\n      }\n    }\n    // Update local cache on base operations:\n    async _set(key, value) {\n      await super._set(key, value);\n      this.localCache[key] = JSON.stringify(value);\n    }\n    async _get(key) {\n      const value = await super._get(key);\n      this.localCache[key] = JSON.stringify(value);\n      return value;\n    }\n    async _remove(key) {\n      await super._remove(key);\n      delete this.localCache[key];\n    }\n  }\n  BrowserLocalPersistence.type = 'LOCAL';\n  /**\n   * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const browserLocalPersistence = BrowserLocalPersistence;\n\n  /**\n   * @license\n   * Copyright 2025 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const POLLING_INTERVAL_MS = 1000;\n  // Pull a cookie value from document.cookie\n  function getDocumentCookie(name) {\n    const escapedName = name.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&');\n    const matcher = RegExp(`${escapedName}=([^;]+)`);\n    return document.cookie.match(matcher)?.[1] ?? null;\n  }\n  // Produce a sanitized cookie name from the persistence key\n  function getCookieName(key) {\n    // __HOST- doesn't work in localhost https://issues.chromium.org/issues/40196122 but it has\n    // desirable security properties, so lets use a different cookie name while in dev-mode.\n    // Already checked isSecureContext in _isAvailable, so if it's http we're hitting local.\n    const isDevMode = window.location.protocol === 'http:';\n    return `${isDevMode ? '__dev_' : '__HOST-'}FIREBASE_${key.split(':')[3]}`;\n  }\n  class CookiePersistence {\n    constructor() {\n      this.type = \"COOKIE\" /* PersistenceType.COOKIE */;\n      this.listenerUnsubscribes = new Map();\n    }\n    // used to get the URL to the backend to proxy to\n    _getFinalTarget(originalUrl) {\n      if (typeof window === undefined) {\n        return originalUrl;\n      }\n      const url = new URL(`${window.location.origin}/__cookies__`);\n      url.searchParams.set('finalTarget', originalUrl);\n      return url;\n    }\n    // To be a usable persistence method in a chain browserCookiePersistence ensures that\n    // prerequisites have been met, namely that we're in a secureContext, navigator and document are\n    // available and cookies are enabled. Not all UAs support these method, so fallback accordingly.\n    async _isAvailable() {\n      if (typeof isSecureContext === 'boolean' && !isSecureContext) {\n        return false;\n      }\n      if (typeof navigator === 'undefined' || typeof document === 'undefined') {\n        return false;\n      }\n      return navigator.cookieEnabled ?? true;\n    }\n    // Set should be a noop as we expect middleware to handle this\n    async _set(_key, _value) {\n      return;\n    }\n    // Attempt to get the cookie from cookieStore, fallback to document.cookie\n    async _get(key) {\n      if (!this._isAvailable()) {\n        return null;\n      }\n      const name = getCookieName(key);\n      if (window.cookieStore) {\n        const cookie = await window.cookieStore.get(name);\n        return cookie?.value;\n      }\n      return getDocumentCookie(name);\n    }\n    // Log out by overriding the idToken with a sentinel value of \"\"\n    async _remove(key) {\n      if (!this._isAvailable()) {\n        return;\n      }\n      // To make sure we don't hit signout over and over again, only do this operation if we need to\n      // with the logout sentinel value of \"\" this can cause race conditions. Unnecessary set-cookie\n      // headers will reduce CDN hit rates too.\n      const existingValue = await this._get(key);\n      if (!existingValue) {\n        return;\n      }\n      const name = getCookieName(key);\n      document.cookie = `${name}=;Max-Age=34560000;Partitioned;Secure;SameSite=Strict;Path=/;Priority=High`;\n      await fetch(`/__cookies__`, {\n        method: 'DELETE'\n      }).catch(() => undefined);\n    }\n    // Listen for cookie changes, both cookieStore and fallback to polling document.cookie\n    _addListener(key, listener) {\n      if (!this._isAvailable()) {\n        return;\n      }\n      const name = getCookieName(key);\n      if (window.cookieStore) {\n        const cb = event => {\n          const changedCookie = event.changed.find(change => change.name === name);\n          if (changedCookie) {\n            listener(changedCookie.value);\n          }\n          const deletedCookie = event.deleted.find(change => change.name === name);\n          if (deletedCookie) {\n            listener(null);\n          }\n        };\n        const unsubscribe = () => window.cookieStore.removeEventListener('change', cb);\n        this.listenerUnsubscribes.set(listener, unsubscribe);\n        return window.cookieStore.addEventListener('change', cb);\n      }\n      let lastValue = getDocumentCookie(name);\n      const interval = setInterval(() => {\n        const currentValue = getDocumentCookie(name);\n        if (currentValue !== lastValue) {\n          listener(currentValue);\n          lastValue = currentValue;\n        }\n      }, POLLING_INTERVAL_MS);\n      const unsubscribe = () => clearInterval(interval);\n      this.listenerUnsubscribes.set(listener, unsubscribe);\n    }\n    _removeListener(_key, listener) {\n      const unsubscribe = this.listenerUnsubscribes.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      unsubscribe();\n      this.listenerUnsubscribes.delete(listener);\n    }\n  }\n  CookiePersistence.type = 'COOKIE';\n  /**\n   * An implementation of {@link Persistence} of type `COOKIE`, for use on the client side in\n   * applications leveraging hybrid rendering and middleware.\n   *\n   * @remarks This persistence method requires companion middleware to function, such as that provided\n   * by {@link https://firebaseopensource.com/projects/firebaseextended/reactfire/ | ReactFire} for\n   * NextJS.\n   * @beta\n   */\n  const browserCookiePersistence = CookiePersistence;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class BrowserSessionPersistence extends BrowserPersistenceClass {\n    constructor() {\n      super(() => window.sessionStorage, \"SESSION\" /* PersistenceType.SESSION */);\n    }\n    _addListener(_key, _listener) {\n      // Listeners are not supported for session storage since it cannot be shared across windows\n      return;\n    }\n    _removeListener(_key, _listener) {\n      // Listeners are not supported for session storage since it cannot be shared across windows\n      return;\n    }\n  }\n  BrowserSessionPersistence.type = 'SESSION';\n  /**\n   * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const browserSessionPersistence = BrowserSessionPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n   *\n   * @param promises - Array of promises to wait on.\n   */\n  function _allSettled(promises) {\n    return Promise.all(promises.map(async promise => {\n      try {\n        const value = await promise;\n        return {\n          fulfilled: true,\n          value\n        };\n      } catch (reason) {\n        return {\n          fulfilled: false,\n          reason\n        };\n      }\n    }));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface class for receiving messages.\n   *\n   */\n  class Receiver {\n    constructor(eventTarget) {\n      this.eventTarget = eventTarget;\n      this.handlersMap = {};\n      this.boundEventHandler = this.handleEvent.bind(this);\n    }\n    /**\n     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n     *\n     * @param eventTarget - An event target (such as window or self) through which the underlying\n     * messages will be received.\n     */\n    static _getInstance(eventTarget) {\n      // The results are stored in an array since objects can't be keys for other\n      // objects. In addition, setting a unique property on an event target as a\n      // hash map key may not be allowed due to CORS restrictions.\n      const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));\n      if (existingInstance) {\n        return existingInstance;\n      }\n      const newInstance = new Receiver(eventTarget);\n      this.receivers.push(newInstance);\n      return newInstance;\n    }\n    isListeningto(eventTarget) {\n      return this.eventTarget === eventTarget;\n    }\n    /**\n     * Fans out a MessageEvent to the appropriate listeners.\n     *\n     * @remarks\n     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n     * finished processing.\n     *\n     * @param event - The MessageEvent.\n     *\n     */\n    async handleEvent(event) {\n      const messageEvent = event;\n      const {\n        eventId,\n        eventType,\n        data\n      } = messageEvent.data;\n      const handlers = this.handlersMap[eventType];\n      if (!handlers?.size) {\n        return;\n      }\n      messageEvent.ports[0].postMessage({\n        status: \"ack\" /* _Status.ACK */,\n        eventId,\n        eventType\n      });\n      const promises = Array.from(handlers).map(async handler => handler(messageEvent.origin, data));\n      const response = await _allSettled(promises);\n      messageEvent.ports[0].postMessage({\n        status: \"done\" /* _Status.DONE */,\n        eventId,\n        eventType,\n        response\n      });\n    }\n    /**\n     * Subscribe an event handler for a particular event.\n     *\n     * @param eventType - Event name to subscribe to.\n     * @param eventHandler - The event handler which should receive the events.\n     *\n     */\n    _subscribe(eventType, eventHandler) {\n      if (Object.keys(this.handlersMap).length === 0) {\n        this.eventTarget.addEventListener('message', this.boundEventHandler);\n      }\n      if (!this.handlersMap[eventType]) {\n        this.handlersMap[eventType] = new Set();\n      }\n      this.handlersMap[eventType].add(eventHandler);\n    }\n    /**\n     * Unsubscribe an event handler from a particular event.\n     *\n     * @param eventType - Event name to unsubscribe from.\n     * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.\n     *\n     */\n    _unsubscribe(eventType, eventHandler) {\n      if (this.handlersMap[eventType] && eventHandler) {\n        this.handlersMap[eventType].delete(eventHandler);\n      }\n      if (!eventHandler || this.handlersMap[eventType].size === 0) {\n        delete this.handlersMap[eventType];\n      }\n      if (Object.keys(this.handlersMap).length === 0) {\n        this.eventTarget.removeEventListener('message', this.boundEventHandler);\n      }\n    }\n  }\n  Receiver.receivers = [];\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _generateEventId(prefix = '', digits = 10) {\n    let random = '';\n    for (let i = 0; i < digits; i++) {\n      random += Math.floor(Math.random() * 10);\n    }\n    return prefix + random;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface for sending messages and waiting for a completion response.\n   *\n   */\n  class Sender {\n    constructor(target) {\n      this.target = target;\n      this.handlers = new Set();\n    }\n    /**\n     * Unsubscribe the handler and remove it from our tracking Set.\n     *\n     * @param handler - The handler to unsubscribe.\n     */\n    removeMessageHandler(handler) {\n      if (handler.messageChannel) {\n        handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\n        handler.messageChannel.port1.close();\n      }\n      this.handlers.delete(handler);\n    }\n    /**\n     * Send a message to the Receiver located at {@link target}.\n     *\n     * @remarks\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n     * receiver has had a chance to fully process the event.\n     *\n     * @param eventType - Type of event to send.\n     * @param data - The payload of the event.\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\n     *\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\n     */\n    async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {\n      const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n      if (!messageChannel) {\n        throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */);\n      }\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let completionTimer;\n      let handler;\n      return new Promise((resolve, reject) => {\n        const eventId = _generateEventId('', 20);\n        messageChannel.port1.start();\n        const ackTimer = setTimeout(() => {\n          reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */));\n        }, timeout);\n        handler = {\n          messageChannel,\n          onMessage(event) {\n            const messageEvent = event;\n            if (messageEvent.data.eventId !== eventId) {\n              return;\n            }\n            switch (messageEvent.data.status) {\n              case \"ack\" /* _Status.ACK */:\n                // The receiver should ACK first.\n                clearTimeout(ackTimer);\n                completionTimer = setTimeout(() => {\n                  reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */));\n                }, 3000 /* _TimeoutDuration.COMPLETION */);\n                break;\n              case \"done\" /* _Status.DONE */:\n                // Once the receiver's handlers are finished we will get the results.\n                clearTimeout(completionTimer);\n                resolve(messageEvent.data.response);\n                break;\n              default:\n                clearTimeout(ackTimer);\n                clearTimeout(completionTimer);\n                reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */));\n                break;\n            }\n          }\n        };\n        this.handlers.add(handler);\n        messageChannel.port1.addEventListener('message', handler.onMessage);\n        this.target.postMessage({\n          eventType,\n          eventId,\n          data\n        }, [messageChannel.port2]);\n      }).finally(() => {\n        if (handler) {\n          this.removeMessageHandler(handler);\n        }\n      });\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Lazy accessor for window, since the compat layer won't tree shake this out,\n   * we need to make sure not to mess with window unless we have to\n   */\n  function _window() {\n    return window;\n  }\n  function _setWindowLocation(url) {\n    _window().location.href = url;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _isWorker() {\n    return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';\n  }\n  async function _getActiveServiceWorker() {\n    if (!navigator?.serviceWorker) {\n      return null;\n    }\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      return registration.active;\n    } catch {\n      return null;\n    }\n  }\n  function _getServiceWorkerController() {\n    return navigator?.serviceWorker?.controller || null;\n  }\n  function _getWorkerGlobalScope() {\n    return _isWorker() ? self : null;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const DB_NAME = 'firebaseLocalStorageDb';\n  const DB_VERSION = 1;\n  const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\n  const DB_DATA_KEYPATH = 'fbase_key';\n  /**\n   * Promise wrapper for IDBRequest\n   *\n   * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n   *\n   */\n  class DBPromise {\n    constructor(request) {\n      this.request = request;\n    }\n    toPromise() {\n      return new Promise((resolve, reject) => {\n        this.request.addEventListener('success', () => {\n          resolve(this.request.result);\n        });\n        this.request.addEventListener('error', () => {\n          reject(this.request.error);\n        });\n      });\n    }\n  }\n  function getObjectStore(db, isReadWrite) {\n    return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly').objectStore(DB_OBJECTSTORE_NAME);\n  }\n  function _deleteDatabase() {\n    const request = indexedDB.deleteDatabase(DB_NAME);\n    return new DBPromise(request).toPromise();\n  }\n  function _openDatabase() {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    return new Promise((resolve, reject) => {\n      request.addEventListener('error', () => {\n        reject(request.error);\n      });\n      request.addEventListener('upgradeneeded', () => {\n        const db = request.result;\n        try {\n          db.createObjectStore(DB_OBJECTSTORE_NAME, {\n            keyPath: DB_DATA_KEYPATH\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n      request.addEventListener('success', async () => {\n        const db = request.result;\n        // Strange bug that occurs in Firefox when multiple tabs are opened at the\n        // same time. The only way to recover seems to be deleting the database\n        // and re-initializing it.\n        // https://github.com/firebase/firebase-js-sdk/issues/634\n        if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n          // Need to close the database or else you get a `blocked` event\n          db.close();\n          await _deleteDatabase();\n          resolve(await _openDatabase());\n        } else {\n          resolve(db);\n        }\n      });\n    });\n  }\n  async function _putObject(db, key, value) {\n    const request = getObjectStore(db, true).put({\n      [DB_DATA_KEYPATH]: key,\n      value\n    });\n    return new DBPromise(request).toPromise();\n  }\n  async function getObject(db, key) {\n    const request = getObjectStore(db, false).get(key);\n    const data = await new DBPromise(request).toPromise();\n    return data === undefined ? null : data.value;\n  }\n  function _deleteObject(db, key) {\n    const request = getObjectStore(db, true).delete(key);\n    return new DBPromise(request).toPromise();\n  }\n  const _POLLING_INTERVAL_MS = 800;\n  const _TRANSACTION_RETRY_COUNT = 3;\n  class IndexedDBLocalPersistence {\n    constructor() {\n      this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\n      this._shouldAllowMigration = true;\n      this.listeners = {};\n      this.localCache = {};\n      // setTimeout return value is platform specific\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.pollTimer = null;\n      this.pendingWrites = 0;\n      this.receiver = null;\n      this.sender = null;\n      this.serviceWorkerReceiverAvailable = false;\n      this.activeServiceWorker = null;\n      // Fire & forget the service worker registration as it may never resolve\n      this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {}, () => {});\n    }\n    async _openDb() {\n      if (this.db) {\n        return this.db;\n      }\n      this.db = await _openDatabase();\n      return this.db;\n    }\n    async _withRetries(op) {\n      let numAttempts = 0;\n      while (true) {\n        try {\n          const db = await this._openDb();\n          return await op(db);\n        } catch (e) {\n          if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n            throw e;\n          }\n          if (this.db) {\n            this.db.close();\n            this.db = undefined;\n          }\n          // TODO: consider adding exponential backoff\n        }\n      }\n    }\n    /**\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n     * postMessage interface to send these events to the worker ourselves.\n     */\n    async initializeServiceWorkerMessaging() {\n      return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n    }\n    /**\n     * As the worker we should listen to events from the main window.\n     */\n    async initializeReceiver() {\n      this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\n      // Refresh from persistence if we receive a KeyChanged message.\n      this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, async (_origin, data) => {\n        const keys = await this._poll();\n        return {\n          keyProcessed: keys.includes(data.key)\n        };\n      });\n      // Let the sender know that we are listening so they give us more timeout.\n      this.receiver._subscribe(\"ping\" /* _EventType.PING */, async (_origin, _data) => {\n        return [\"keyChanged\" /* _EventType.KEY_CHANGED */];\n      });\n    }\n    /**\n     * As the main window, we should let the worker know when keys change (set and remove).\n     *\n     * @remarks\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n     * may not resolve.\n     */\n    async initializeSender() {\n      // Check to see if there's an active service worker.\n      this.activeServiceWorker = await _getActiveServiceWorker();\n      if (!this.activeServiceWorker) {\n        return;\n      }\n      this.sender = new Sender(this.activeServiceWorker);\n      // Ping the service worker to check what events they can handle.\n      const results = await this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);\n      if (!results) {\n        return;\n      }\n      if (results[0]?.fulfilled && results[0]?.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */)) {\n        this.serviceWorkerReceiverAvailable = true;\n      }\n    }\n    /**\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\n     * worker will just trigger a full sync anyway.\n     *\n     * @remarks\n     * For now, we only support one service worker per page.\n     *\n     * @param key - Storage key which changed.\n     */\n    async notifyServiceWorker(key) {\n      if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {\n        return;\n      }\n      try {\n        await this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, {\n          key\n        },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable ? 800 /* _TimeoutDuration.LONG_ACK */ : 50 /* _TimeoutDuration.ACK */);\n      } catch {\n        // This is a best effort approach. Ignore errors.\n      }\n    }\n    async _isAvailable() {\n      try {\n        if (!indexedDB) {\n          return false;\n        }\n        const db = await _openDatabase();\n        await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n        await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n        return true;\n      } catch {}\n      return false;\n    }\n    async _withPendingWrite(write) {\n      this.pendingWrites++;\n      try {\n        await write();\n      } finally {\n        this.pendingWrites--;\n      }\n    }\n    async _set(key, value) {\n      return this._withPendingWrite(async () => {\n        await this._withRetries(db => _putObject(db, key, value));\n        this.localCache[key] = value;\n        return this.notifyServiceWorker(key);\n      });\n    }\n    async _get(key) {\n      const obj = await this._withRetries(db => getObject(db, key));\n      this.localCache[key] = obj;\n      return obj;\n    }\n    async _remove(key) {\n      return this._withPendingWrite(async () => {\n        await this._withRetries(db => _deleteObject(db, key));\n        delete this.localCache[key];\n        return this.notifyServiceWorker(key);\n      });\n    }\n    async _poll() {\n      // TODO: check if we need to fallback if getAll is not supported\n      const result = await this._withRetries(db => {\n        const getAllRequest = getObjectStore(db, false).getAll();\n        return new DBPromise(getAllRequest).toPromise();\n      });\n      if (!result) {\n        return [];\n      }\n      // If we have pending writes in progress abort, we'll get picked up on the next poll\n      if (this.pendingWrites !== 0) {\n        return [];\n      }\n      const keys = [];\n      const keysInResult = new Set();\n      if (result.length !== 0) {\n        for (const {\n          fbase_key: key,\n          value\n        } of result) {\n          keysInResult.add(key);\n          if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n            this.notifyListeners(key, value);\n            keys.push(key);\n          }\n        }\n      }\n      for (const localKey of Object.keys(this.localCache)) {\n        if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n          // Deleted\n          this.notifyListeners(localKey, null);\n          keys.push(localKey);\n        }\n      }\n      return keys;\n    }\n    notifyListeners(key, newValue) {\n      this.localCache[key] = newValue;\n      const listeners = this.listeners[key];\n      if (listeners) {\n        for (const listener of Array.from(listeners)) {\n          listener(newValue);\n        }\n      }\n    }\n    startPolling() {\n      this.stopPolling();\n      this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\n    }\n    stopPolling() {\n      if (this.pollTimer) {\n        clearInterval(this.pollTimer);\n        this.pollTimer = null;\n      }\n    }\n    _addListener(key, listener) {\n      if (Object.keys(this.listeners).length === 0) {\n        this.startPolling();\n      }\n      if (!this.listeners[key]) {\n        this.listeners[key] = new Set();\n        // Populate the cache to avoid spuriously triggering on first poll.\n        void this._get(key); // This can happen in the background async and we can return immediately.\n      }\n      this.listeners[key].add(listener);\n    }\n    _removeListener(key, listener) {\n      if (this.listeners[key]) {\n        this.listeners[key].delete(listener);\n        if (this.listeners[key].size === 0) {\n          delete this.listeners[key];\n        }\n      }\n      if (Object.keys(this.listeners).length === 0) {\n        this.stopPolling();\n      }\n    }\n  }\n  IndexedDBLocalPersistence.type = 'LOCAL';\n  /**\n   * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const indexedDBLocalPersistence = IndexedDBLocalPersistence;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // ReCaptcha will load using the same callback, so the callback function needs\n  // to be kept around\n  const _JSLOAD_CALLBACK = _generateCallbackName('rcb');\n  const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n  /**\n   * Loader for the GReCaptcha library. There should only ever be one of this.\n   */\n  class ReCaptchaLoaderImpl {\n    constructor() {\n      this.hostLanguage = '';\n      this.counter = 0;\n      /**\n       * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n       * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n       * `window.grecaptcha.render()` will not. Another load will add it.\n       */\n      this.librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n    }\n    load(auth, hl = '') {\n      _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n        return Promise.resolve(_window().grecaptcha);\n      }\n      return new Promise((resolve, reject) => {\n        const networkTimeout = _window().setTimeout(() => {\n          reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, NETWORK_TIMEOUT_DELAY.get());\n        _window()[_JSLOAD_CALLBACK] = () => {\n          _window().clearTimeout(networkTimeout);\n          delete _window()[_JSLOAD_CALLBACK];\n          const recaptcha = _window().grecaptcha;\n          if (!recaptcha || !isV2(recaptcha)) {\n            reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n            return;\n          }\n          // Wrap the recaptcha render function so that we know if the developer has\n          // called it separately\n          const render = recaptcha.render;\n          recaptcha.render = (container, params) => {\n            const widgetId = render(container, params);\n            this.counter++;\n            return widgetId;\n          };\n          this.hostLanguage = hl;\n          resolve(recaptcha);\n        };\n        const url = `${_recaptchaV2ScriptUrl()}?${(0, _firebaseUtil.querystring)({\n          onload: _JSLOAD_CALLBACK,\n          render: 'explicit',\n          hl\n        })}`;\n        _loadJS(url).catch(() => {\n          clearTimeout(networkTimeout);\n          reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n        });\n      });\n    }\n    clearedOneInstance() {\n      this.counter--;\n    }\n    shouldResolveImmediately(hl) {\n      // We can resolve immediately if:\n      //   • grecaptcha is already defined AND (\n      //     1. the requested language codes are the same OR\n      //     2. there exists already a ReCaptcha on the page\n      //     3. the library was already loaded by the app\n      // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n      // that are already in the page\n      return !!_window().grecaptcha?.render && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n    }\n  }\n  function isHostLanguageValid(hl) {\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n  }\n  class MockReCaptchaLoaderImpl {\n    async load(auth) {\n      return new MockReCaptcha(auth);\n    }\n    clearedOneInstance() {}\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n  const DEFAULT_PARAMS = {\n    theme: 'light',\n    type: 'image'\n  };\n  /**\n   * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n   *\n   * @remarks\n   * `RecaptchaVerifier` does not work in a Node.js environment.\n   *\n   * @public\n   */\n  class RecaptchaVerifier {\n    /**\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     * @param containerOrId - The reCAPTCHA container parameter.\n     *\n     * @remarks\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n     * an element ID. The corresponding element must also must be in the DOM at the time of\n     * initialization.\n     *\n     * @param parameters - The optional reCAPTCHA parameters.\n     *\n     * @remarks\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n     * 'invisible'.\n     */\n    constructor(authExtern, containerOrId, parameters = {\n      ...DEFAULT_PARAMS\n    }) {\n      this.parameters = parameters;\n      /**\n       * The application verifier type.\n       *\n       * @remarks\n       * For a reCAPTCHA verifier, this is 'recaptcha'.\n       */\n      this.type = RECAPTCHA_VERIFIER_TYPE;\n      this.destroyed = false;\n      this.widgetId = null;\n      this.tokenChangeListeners = new Set();\n      this.renderPromise = null;\n      this.recaptcha = null;\n      this.auth = _castAuth(authExtern);\n      this.isInvisible = this.parameters.size === 'invisible';\n      _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n      const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.container = container;\n      this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n      this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n      this.validateStartingState();\n      // TODO: Figure out if sdk version is needed\n    }\n    /**\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n     *\n     * @returns A Promise for the reCAPTCHA token.\n     */\n    async verify() {\n      this.assertNotDestroyed();\n      const id = await this.render();\n      const recaptcha = this.getAssertedRecaptcha();\n      const response = recaptcha.getResponse(id);\n      if (response) {\n        return response;\n      }\n      return new Promise(resolve => {\n        const tokenChange = token => {\n          if (!token) {\n            return; // Ignore token expirations.\n          }\n          this.tokenChangeListeners.delete(tokenChange);\n          resolve(token);\n        };\n        this.tokenChangeListeners.add(tokenChange);\n        if (this.isInvisible) {\n          recaptcha.execute(id);\n        }\n      });\n    }\n    /**\n     * Renders the reCAPTCHA widget on the page.\n     *\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\n     */\n    render() {\n      try {\n        this.assertNotDestroyed();\n      } catch (e) {\n        // This method returns a promise. Since it's not async (we want to return the\n        // _same_ promise if rendering is still occurring), the API surface should\n        // reject with the error rather than just throw\n        return Promise.reject(e);\n      }\n      if (this.renderPromise) {\n        return this.renderPromise;\n      }\n      this.renderPromise = this.makeRenderPromise().catch(e => {\n        this.renderPromise = null;\n        throw e;\n      });\n      return this.renderPromise;\n    }\n    /** @internal */\n    _reset() {\n      this.assertNotDestroyed();\n      if (this.widgetId !== null) {\n        this.getAssertedRecaptcha().reset(this.widgetId);\n      }\n    }\n    /**\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\n     */\n    clear() {\n      this.assertNotDestroyed();\n      this.destroyed = true;\n      this._recaptchaLoader.clearedOneInstance();\n      if (!this.isInvisible) {\n        this.container.childNodes.forEach(node => {\n          this.container.removeChild(node);\n        });\n      }\n    }\n    validateStartingState() {\n      _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    }\n    makeTokenCallback(existing) {\n      return token => {\n        this.tokenChangeListeners.forEach(listener => listener(token));\n        if (typeof existing === 'function') {\n          existing(token);\n        } else if (typeof existing === 'string') {\n          const globalFunc = _window()[existing];\n          if (typeof globalFunc === 'function') {\n            globalFunc(token);\n          }\n        }\n      };\n    }\n    assertNotDestroyed() {\n      _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    async makeRenderPromise() {\n      await this.init();\n      if (!this.widgetId) {\n        let container = this.container;\n        if (!this.isInvisible) {\n          const guaranteedEmpty = document.createElement('div');\n          container.appendChild(guaranteedEmpty);\n          container = guaranteedEmpty;\n        }\n        this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n      }\n      return this.widgetId;\n    }\n    async init() {\n      _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      await domReady();\n      this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\n      const siteKey = await getRecaptchaParams(this.auth);\n      _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.parameters.sitekey = siteKey;\n    }\n    getAssertedRecaptcha() {\n      _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.recaptcha;\n    }\n  }\n  function domReady() {\n    let resolver = null;\n    return new Promise(resolve => {\n      if (document.readyState === 'complete') {\n        resolve();\n        return;\n      }\n      // Document not ready, wait for load before resolving.\n      // Save resolver, so we can remove listener in case it was externally\n      // cancelled.\n      resolver = () => resolve();\n      window.addEventListener('load', resolver);\n    }).catch(e => {\n      if (resolver) {\n        window.removeEventListener('load', resolver);\n      }\n      throw e;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class ConfirmationResultImpl {\n    constructor(verificationId, onConfirmation) {\n      this.verificationId = verificationId;\n      this.onConfirmation = onConfirmation;\n    }\n    confirm(verificationCode) {\n      const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n      return this.onConfirmation(authCredential);\n    }\n  }\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   * @remarks\n   * This method sends a code via SMS to the given\n   * phone number, and returns a {@link ConfirmationResult}. After the user\n   * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n   * with the code to sign the user in.\n   *\n   * For abuse prevention, this method requires a {@link ApplicationVerifier}.\n   * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.\n   * This function can work on other platforms that do not support the\n   * {@link RecaptchaVerifier} (like React Native), but you need to use a\n   * third-party {@link ApplicationVerifier} implementation.\n   *\n   * If you've enabled project-level reCAPTCHA Enterprise bot protection in\n   * Enforce mode, you can omit the {@link ApplicationVerifier}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain a verificationCode from the user.\n   * const credential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, (0, _firebaseUtil.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\n  }\n  /**\n   * Links the user account with the given phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _firebaseUtil.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\n  }\n  /**\n   * Re-authenticates a user using a fresh phone credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n   *\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _firebaseUtil.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\n  }\n  /**\n   * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n   *\n   */\n  async function _verifyPhoneNumber(auth, options, verifier) {\n    if (!auth._getRecaptchaConfig()) {\n      try {\n        await _initializeRecaptchaConfig(auth);\n      } catch (error) {\n        // If an error occurs while fetching the config, there is no way to know the enablement state\n        // of Phone provider, so we proceed with recaptcha V2 verification.\n        // The error is likely \"recaptchaKey undefined\", as reCAPTCHA Enterprise is not\n        // enabled for any provider.\n        console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');\n      }\n    }\n    try {\n      let phoneInfoOptions;\n      if (typeof options === 'string') {\n        phoneInfoOptions = {\n          phoneNumber: options\n        };\n      } else {\n        phoneInfoOptions = options;\n      }\n      if ('session' in phoneInfoOptions) {\n        const session = phoneInfoOptions.session;\n        if ('phoneNumber' in phoneInfoOptions) {\n          _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          const startPhoneMfaEnrollmentRequest = {\n            idToken: session.credential,\n            phoneEnrollmentInfo: {\n              phoneNumber: phoneInfoOptions.phoneNumber,\n              clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n            }\n          };\n          const startEnrollPhoneMfaActionCallback = async (authInstance, request) => {\n            // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n            if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {\n              _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n              return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);\n            }\n            return startEnrollPhoneMfa(authInstance, request);\n          };\n          const startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */, startEnrollPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n          const response = await startPhoneMfaEnrollmentResponse.catch(error => {\n            return Promise.reject(error);\n          });\n          return response.phoneSessionInfo.sessionInfo;\n        } else {\n          _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          const mfaEnrollmentId = phoneInfoOptions.multiFactorHint?.uid || phoneInfoOptions.multiFactorUid;\n          _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\n          const startPhoneMfaSignInRequest = {\n            mfaPendingCredential: session.credential,\n            mfaEnrollmentId,\n            phoneSignInInfo: {\n              clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n            }\n          };\n          const startSignInPhoneMfaActionCallback = async (authInstance, request) => {\n            // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n            if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {\n              _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n              return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);\n            }\n            return startSignInPhoneMfa(authInstance, request);\n          };\n          const startPhoneMfaSignInResponse = handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */, startSignInPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n          const response = await startPhoneMfaSignInResponse.catch(error => {\n            return Promise.reject(error);\n          });\n          return response.phoneResponseInfo.sessionInfo;\n        }\n      } else {\n        const sendPhoneVerificationCodeRequest = {\n          phoneNumber: phoneInfoOptions.phoneNumber,\n          clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n        };\n        const sendPhoneVerificationCodeActionCallback = async (authInstance, request) => {\n          // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n          if (request.captchaResponse === FAKE_TOKEN) {\n            _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n            return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);\n          }\n          return sendPhoneVerificationCode(authInstance, request);\n        };\n        const sendPhoneVerificationCodeResponse = handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, \"sendVerificationCode\" /* RecaptchaActionName.SEND_VERIFICATION_CODE */, sendPhoneVerificationCodeActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n        const response = await sendPhoneVerificationCodeResponse.catch(error => {\n          return Promise.reject(error);\n        });\n        return response.sessionInfo;\n      }\n    } finally {\n      verifier?._reset();\n    }\n  }\n  /**\n   * Updates the user's phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * await updatePhoneNumber(user, phoneCredential);\n   * ```\n   *\n   * @param user - The user.\n   * @param credential - A credential authenticating the new phone number.\n   *\n   * @public\n   */\n  async function updatePhoneNumber(user, credential) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    await _link$1(userInternal, credential);\n  }\n  // Helper function that fetches and injects a reCAPTCHA v2 token into the request.\n  async function injectRecaptchaV2Token(auth, request, recaptchaV2Verifier) {\n    _assert(recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const recaptchaV2Token = await recaptchaV2Verifier.verify();\n    _assert(typeof recaptchaV2Token === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const newRequest = {\n      ...request\n    };\n    if ('phoneEnrollmentInfo' in newRequest) {\n      const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n      const captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;\n      const clientType = newRequest.phoneEnrollmentInfo.clientType;\n      const recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;\n      Object.assign(newRequest, {\n        'phoneEnrollmentInfo': {\n          phoneNumber,\n          recaptchaToken: recaptchaV2Token,\n          captchaResponse,\n          clientType,\n          recaptchaVersion\n        }\n      });\n      return newRequest;\n    } else if ('phoneSignInInfo' in newRequest) {\n      const captchaResponse = newRequest.phoneSignInInfo.captchaResponse;\n      const clientType = newRequest.phoneSignInInfo.clientType;\n      const recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;\n      Object.assign(newRequest, {\n        'phoneSignInInfo': {\n          recaptchaToken: recaptchaV2Token,\n          captchaResponse,\n          clientType,\n          recaptchaVersion\n        }\n      });\n      return newRequest;\n    } else {\n      Object.assign(newRequest, {\n        'recaptchaToken': recaptchaV2Token\n      });\n      return newRequest;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link PhoneAuthCredential}.\n   *\n   * @remarks\n   * `PhoneAuthProvider` does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, phoneCredential);\n   * ```\n   *\n   * @public\n   */\n  class PhoneAuthProvider {\n    /**\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n     *\n     */\n    constructor(auth) {\n      /** Always set to {@link ProviderId}.PHONE. */\n      this.providerId = PhoneAuthProvider.PROVIDER_ID;\n      this.auth = _castAuth(auth);\n    }\n    /**\n     *\n     * Starts a phone number authentication flow by sending a verification code to the given phone\n     * number.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n     * E.164 format (e.g. +16505550101).\n     * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents\n     * requests from unauthorized clients. This SDK includes an implementation\n     * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled\n     * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is\n     * optional; in all other configurations, the parameter is required.\n     *\n     * @returns A Promise for a verification ID that can be passed to\n     * {@link PhoneAuthProvider.credential} to identify this flow.\n     */\n    verifyPhoneNumber(phoneOptions, applicationVerifier) {\n      return _verifyPhoneNumber(this.auth, phoneOptions, (0, _firebaseUtil.getModularInstance)(applicationVerifier));\n    }\n    /**\n     * Creates a phone auth credential, given the verification ID from\n     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n     * mobile device.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = await confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n     * @param verificationCode - The verification code sent to the user's mobile device.\n     *\n     * @returns The auth provider credential.\n     */\n    static credential(verificationId, verificationCode) {\n      return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential}.\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      const credential = userCredential;\n      return PhoneAuthProvider.credentialFromTaggedObject(credential);\n    }\n    /**\n     * Returns an {@link AuthCredential} when passed an error.\n     *\n     * @remarks\n     *\n     * This method works for errors like\n     * `auth/account-exists-with-different-credentials`. This is useful for\n     * recovering when attempting to set a user's phone number but the number\n     * in question is already tied to another account. For example, the following\n     * code tries to update the current user's phone number, and if that\n     * fails, links the user with the account associated with that number:\n     *\n     * ```js\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n     * try {\n     *   const code = ''; // Prompt the user for the verification code\n     *   await updatePhoneNumber(\n     *       auth.currentUser,\n     *       PhoneAuthProvider.credential(verificationId, code));\n     * } catch (e) {\n     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n     *     const cred = PhoneAuthProvider.credentialFromError(e);\n     *     await linkWithCredential(auth.currentUser, cred);\n     *   }\n     * }\n     *\n     * // At this point, auth.currentUser.phoneNumber === number.\n     * ```\n     *\n     * @param error - The error to generate a credential from.\n     */\n    static credentialFromError(error) {\n      return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        phoneNumber,\n        temporaryProof\n      } = tokenResponse;\n      if (phoneNumber && temporaryProof) {\n        return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n      }\n      return null;\n    }\n  }\n  /** Always set to {@link ProviderId}.PHONE. */\n  PhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  PhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Chooses a popup/redirect resolver to use. This prefers the override (which\n   * is directly passed in), and falls back to the property set on the auth\n   * object. If neither are available, this function errors w/ an argument error.\n   */\n  function _withDefaultResolver(auth, resolverOverride) {\n    if (resolverOverride) {\n      return _getInstance(resolverOverride);\n    }\n    _assert(auth._popupRedirectResolver, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return auth._popupRedirectResolver;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class IdpCredential extends AuthCredential {\n    constructor(params) {\n      super(\"custom\" /* ProviderId.CUSTOM */, \"custom\" /* ProviderId.CUSTOM */);\n      this.params = params;\n    }\n    _getIdTokenResponse(auth) {\n      return signInWithIdp(auth, this._buildIdpRequest());\n    }\n    _linkToIdToken(auth, idToken) {\n      return signInWithIdp(auth, this._buildIdpRequest(idToken));\n    }\n    _getReauthenticationResolver(auth) {\n      return signInWithIdp(auth, this._buildIdpRequest());\n    }\n    _buildIdpRequest(idToken) {\n      const request = {\n        requestUri: this.params.requestUri,\n        sessionId: this.params.sessionId,\n        postBody: this.params.postBody,\n        tenantId: this.params.tenantId,\n        pendingToken: this.params.pendingToken,\n        returnSecureToken: true,\n        returnIdpCredential: true\n      };\n      if (idToken) {\n        request.idToken = idToken;\n      }\n      return request;\n    }\n  }\n  function _signIn(params) {\n    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\n  }\n  function _reauth(params) {\n    const {\n      auth,\n      user\n    } = params;\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\n  }\n  async function _link(params) {\n    const {\n      auth,\n      user\n    } = params;\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return _link$1(user, new IdpCredential(params), params.bypassAuthState);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n   * events\n   */\n  class AbstractPopupRedirectOperation {\n    constructor(auth, filter, resolver, user, bypassAuthState = false) {\n      this.auth = auth;\n      this.resolver = resolver;\n      this.user = user;\n      this.bypassAuthState = bypassAuthState;\n      this.pendingPromise = null;\n      this.eventManager = null;\n      this.filter = Array.isArray(filter) ? filter : [filter];\n    }\n    execute() {\n      return new Promise(async (resolve, reject) => {\n        this.pendingPromise = {\n          resolve,\n          reject\n        };\n        try {\n          this.eventManager = await this.resolver._initialize(this.auth);\n          await this.onExecution();\n          this.eventManager.registerConsumer(this);\n        } catch (e) {\n          this.reject(e);\n        }\n      });\n    }\n    async onAuthEvent(event) {\n      const {\n        urlResponse,\n        sessionId,\n        postBody,\n        tenantId,\n        error,\n        type\n      } = event;\n      if (error) {\n        this.reject(error);\n        return;\n      }\n      const params = {\n        auth: this.auth,\n        requestUri: urlResponse,\n        sessionId: sessionId,\n        tenantId: tenantId || undefined,\n        postBody: postBody || undefined,\n        user: this.user,\n        bypassAuthState: this.bypassAuthState\n      };\n      try {\n        this.resolve(await this.getIdpTask(type)(params));\n      } catch (e) {\n        this.reject(e);\n      }\n    }\n    onError(error) {\n      this.reject(error);\n    }\n    getIdpTask(type) {\n      switch (type) {\n        case \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */:\n        case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n          return _signIn;\n        case \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */:\n        case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n          return _link;\n        case \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */:\n        case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n          return _reauth;\n        default:\n          _fail(this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    resolve(cred) {\n      debugAssert(this.pendingPromise, 'Pending promise was never set');\n      this.pendingPromise.resolve(cred);\n      this.unregisterAndCleanUp();\n    }\n    reject(error) {\n      debugAssert(this.pendingPromise, 'Pending promise was never set');\n      this.pendingPromise.reject(error);\n      this.unregisterAndCleanUp();\n    }\n    unregisterAndCleanUp() {\n      if (this.eventManager) {\n        this.eventManager.unregisterConsumer(this);\n      }\n      this.pendingPromise = null;\n      this.cleanUp();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n  /**\n   * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n   *\n   * @remarks\n   * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n   * unsuccessful, returns an error object containing additional information about the error.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function signInWithPopup(auth, provider, resolver) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_createError(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n    }\n    const authInternal = _castAuth(auth);\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\n    const action = new PopupOperation(authInternal, \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */, provider, resolverInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n   * OAuth flow.\n   *\n   * @remarks\n   * If the reauthentication is successful, the returned result will contain the user and the\n   * provider's credential.\n   *\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   * // Reauthenticate using a popup.\n   * await reauthenticateWithPopup(result.user, provider);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function reauthenticateWithPopup(user, provider, resolver) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_createError(userInternal.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n    }\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n   *\n   * @remarks\n   * If the linking is successful, the returned result will contain the user and the provider's credential.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using some other provider.\n   * const result = await signInWithEmailAndPassword(auth, email, password);\n   * // Link using a popup.\n   * const provider = new FacebookAuthProvider();\n   * await linkWithPopup(result.user, provider);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function linkWithPopup(user, provider, resolver) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    const action = new PopupOperation(userInternal.auth, \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */, provider, resolverInternal, userInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n   * events\n   *\n   */\n  class PopupOperation extends AbstractPopupRedirectOperation {\n    constructor(auth, filter, provider, resolver, user) {\n      super(auth, filter, resolver, user);\n      this.provider = provider;\n      this.authWindow = null;\n      this.pollId = null;\n      if (PopupOperation.currentPopupAction) {\n        PopupOperation.currentPopupAction.cancel();\n      }\n      PopupOperation.currentPopupAction = this;\n    }\n    async executeNotNull() {\n      const result = await this.execute();\n      _assert(result, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return result;\n    }\n    async onExecution() {\n      debugAssert(this.filter.length === 1, 'Popup operations only handle one event');\n      const eventId = _generateEventId();\n      this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0],\n      // There's always one, see constructor\n      eventId);\n      this.authWindow.associatedEvent = eventId;\n      // Check for web storage support and origin validation _after_ the popup is\n      // loaded. These operations are slow (~1 second or so) Rather than\n      // waiting on them before opening the window, optimistically open the popup\n      // and check for storage support at the same time. If storage support is\n      // not available, this will cause the whole thing to reject properly. It\n      // will also close the popup, but since the promise has already rejected,\n      // the popup closed by user poll will reject into the void.\n      this.resolver._originValidation(this.auth).catch(e => {\n        this.reject(e);\n      });\n      this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n        if (!isSupported) {\n          this.reject(_createError(this.auth, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));\n        }\n      });\n      // Handle user closure. Notice this does *not* use await\n      this.pollUserCancellation();\n    }\n    get eventId() {\n      return this.authWindow?.associatedEvent || null;\n    }\n    cancel() {\n      this.reject(_createError(this.auth, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));\n    }\n    cleanUp() {\n      if (this.authWindow) {\n        this.authWindow.close();\n      }\n      if (this.pollId) {\n        window.clearTimeout(this.pollId);\n      }\n      this.authWindow = null;\n      this.pollId = null;\n      PopupOperation.currentPopupAction = null;\n    }\n    pollUserCancellation() {\n      const poll = () => {\n        if (this.authWindow?.window?.closed) {\n          // Make sure that there is sufficient time for whatever action to\n          // complete. The window could have closed but the sign in network\n          // call could still be in flight. This is specifically true for\n          // Firefox or if the opener is in an iframe, in which case the oauth\n          // helper closes the popup.\n          this.pollId = window.setTimeout(() => {\n            this.pollId = null;\n            this.reject(_createError(this.auth, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));\n          }, 8000 /* _Timeout.AUTH_EVENT */);\n          return;\n        }\n        this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n      };\n      poll();\n    }\n  }\n  // Only one popup is ever shown at once. The lifecycle of the current popup\n  // can be managed / cancelled by the constructor.\n  PopupOperation.currentPopupAction = null;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const PENDING_REDIRECT_KEY = 'pendingRedirect';\n  // We only get one redirect outcome for any one auth, so just store it\n  // in here.\n  const redirectOutcomeMap = new Map();\n  class RedirectAction extends AbstractPopupRedirectOperation {\n    constructor(auth, resolver, bypassAuthState = false) {\n      super(auth, [\"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, \"unknown\" /* AuthEventType.UNKNOWN */], resolver, undefined, bypassAuthState);\n      this.eventId = null;\n    }\n    /**\n     * Override the execute function; if we already have a redirect result, then\n     * just return it.\n     */\n    async execute() {\n      let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n      if (!readyOutcome) {\n        try {\n          const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\n          const result = hasPendingRedirect ? await super.execute() : null;\n          readyOutcome = () => Promise.resolve(result);\n        } catch (e) {\n          readyOutcome = () => Promise.reject(e);\n        }\n        redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n      }\n      // If we're not bypassing auth state, the ready outcome should be set to\n      // null.\n      if (!this.bypassAuthState) {\n        redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n      }\n      return readyOutcome();\n    }\n    async onAuthEvent(event) {\n      if (event.type === \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {\n        return super.onAuthEvent(event);\n      } else if (event.type === \"unknown\" /* AuthEventType.UNKNOWN */) {\n        // This is a sentinel value indicating there's no pending redirect\n        this.resolve(null);\n        return;\n      }\n      if (event.eventId) {\n        const user = await this.auth._redirectUserForId(event.eventId);\n        if (user) {\n          this.user = user;\n          return super.onAuthEvent(event);\n        } else {\n          this.resolve(null);\n        }\n      }\n    }\n    async onExecution() {}\n    cleanUp() {}\n  }\n  async function _getAndClearPendingRedirectStatus(resolver, auth) {\n    const key = pendingRedirectKey(auth);\n    const persistence = resolverPersistence(resolver);\n    if (!(await persistence._isAvailable())) {\n      return false;\n    }\n    const hasPendingRedirect = (await persistence._get(key)) === 'true';\n    await persistence._remove(key);\n    return hasPendingRedirect;\n  }\n  async function _setPendingRedirectStatus(resolver, auth) {\n    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n  }\n  function _clearRedirectOutcomes() {\n    redirectOutcomeMap.clear();\n  }\n  function _overrideRedirectResult(auth, result) {\n    redirectOutcomeMap.set(auth._key(), result);\n  }\n  function resolverPersistence(resolver) {\n    return _getInstance(resolver._redirectPersistence);\n  }\n  function pendingRedirectKey(auth) {\n    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Authenticates a Firebase client using a full-page redirect flow.\n   *\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link signInWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // You can add additional scopes to the provider:\n   * provider.addScope('user_birthday');\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * // As this API can be used for sign-in, linking and reauthentication,\n   * // check the operationType to determine what triggered this redirect\n   * // operation.\n   * const operationType = result.operationType;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function signInWithRedirect(auth, provider, resolver) {\n    return _signInWithRedirect(auth, provider, resolver);\n  }\n  async function _signInWithRedirect(auth, provider, resolver) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await authInternal._initializationPromise;\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\n    await _setPendingRedirectStatus(resolverInternal, authInternal);\n    return resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */);\n  }\n  /**\n   * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link reauthenticateWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * // Reauthenticate using a redirect.\n   * await reauthenticateWithRedirect(result.user, provider);\n   * // This will again trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function reauthenticateWithRedirect(user, provider, resolver) {\n    return _reauthenticateWithRedirect(user, provider, resolver);\n  }\n  async function _reauthenticateWithRedirect(user, provider, resolver) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await userInternal.auth._initializationPromise;\n    // Allow the resolver to error before persisting the redirect user\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n    const eventId = await prepareUserForRedirect(userInternal);\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, eventId);\n  }\n  /**\n   * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link linkWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using some other provider.\n   * const result = await signInWithEmailAndPassword(auth, email, password);\n   * // Link using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * await linkWithRedirect(result.user, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function linkWithRedirect(user, provider, resolver) {\n    return _linkWithRedirect(user, provider, resolver);\n  }\n  async function _linkWithRedirect(user, provider, resolver) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await userInternal.auth._initializationPromise;\n    // Allow the resolver to error before persisting the redirect user\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    await _assertLinkedStatus(false, userInternal, provider.providerId);\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n    const eventId = await prepareUserForRedirect(userInternal);\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, eventId);\n  }\n  /**\n   * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n   *\n   * @remarks\n   * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n   * error. If no redirect operation was called, returns `null`.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // You can add additional scopes to the provider:\n   * provider.addScope('user_birthday');\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * // As this API can be used for sign-in, linking and reauthentication,\n   * // check the operationType to determine what triggered this redirect\n   * // operation.\n   * const operationType = result.operationType;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function getRedirectResult(auth, resolver) {\n    await _castAuth(auth)._initializationPromise;\n    return _getRedirectResult(auth, resolver, false);\n  }\n  async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const resolver = _withDefaultResolver(authInternal, resolverExtern);\n    const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n    const result = await action.execute();\n    if (result && !bypassAuthState) {\n      delete result.user._redirectEventId;\n      await authInternal._persistUserIfCurrent(result.user);\n      await authInternal._setRedirectUser(null, resolverExtern);\n    }\n    return result;\n  }\n  async function prepareUserForRedirect(user) {\n    const eventId = _generateEventId(`${user.uid}:::`);\n    user._redirectEventId = eventId;\n    await user.auth._setRedirectUser(user);\n    await user.auth._persistUserIfCurrent(user);\n    return eventId;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // The amount of time to store the UIDs of seen events; this is\n  // set to 10 min by default\n  const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\n  class AuthEventManager {\n    constructor(auth) {\n      this.auth = auth;\n      this.cachedEventUids = new Set();\n      this.consumers = new Set();\n      this.queuedRedirectEvent = null;\n      this.hasHandledPotentialRedirect = false;\n      this.lastProcessedEventTime = Date.now();\n    }\n    registerConsumer(authEventConsumer) {\n      this.consumers.add(authEventConsumer);\n      if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\n        this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n        this.saveEventToCache(this.queuedRedirectEvent);\n        this.queuedRedirectEvent = null;\n      }\n    }\n    unregisterConsumer(authEventConsumer) {\n      this.consumers.delete(authEventConsumer);\n    }\n    onEvent(event) {\n      // Check if the event has already been handled\n      if (this.hasEventBeenHandled(event)) {\n        return false;\n      }\n      let handled = false;\n      this.consumers.forEach(consumer => {\n        if (this.isEventForConsumer(event, consumer)) {\n          handled = true;\n          this.sendToConsumer(event, consumer);\n          this.saveEventToCache(event);\n        }\n      });\n      if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n        // If we've already seen a redirect before, or this is a popup event,\n        // bail now\n        return handled;\n      }\n      this.hasHandledPotentialRedirect = true;\n      // If the redirect wasn't handled, hang on to it\n      if (!handled) {\n        this.queuedRedirectEvent = event;\n        handled = true;\n      }\n      return handled;\n    }\n    sendToConsumer(event, consumer) {\n      if (event.error && !isNullRedirectEvent(event)) {\n        const code = event.error.code?.split('auth/')[1] || \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */;\n        consumer.onError(_createError(this.auth, code));\n      } else {\n        consumer.onAuthEvent(event);\n      }\n    }\n    isEventForConsumer(event, consumer) {\n      const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;\n      return consumer.filter.includes(event.type) && eventIdMatches;\n    }\n    hasEventBeenHandled(event) {\n      if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {\n        this.cachedEventUids.clear();\n      }\n      return this.cachedEventUids.has(eventUid(event));\n    }\n    saveEventToCache(event) {\n      this.cachedEventUids.add(eventUid(event));\n      this.lastProcessedEventTime = Date.now();\n    }\n  }\n  function eventUid(e) {\n    return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n  }\n  function isNullRedirectEvent({\n    type,\n    error\n  }) {\n    return type === \"unknown\" /* AuthEventType.UNKNOWN */ && error?.code === `auth/${\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */}`;\n  }\n  function isRedirectEvent(event) {\n    switch (event.type) {\n      case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n      case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n      case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n        return true;\n      case \"unknown\" /* AuthEventType.UNKNOWN */:\n        return isNullRedirectEvent(event);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _getProjectConfig(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/projects\" /* Endpoint.GET_PROJECT_CONFIG */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n  const HTTP_REGEX = /^https?/;\n  async function _validateOrigin(auth) {\n    // Skip origin validation if we are in an emulated environment\n    if (auth.config.emulator) {\n      return;\n    }\n    const {\n      authorizedDomains\n    } = await _getProjectConfig(auth);\n    for (const domain of authorizedDomains) {\n      try {\n        if (matchDomain(domain)) {\n          return;\n        }\n      } catch {\n        // Do nothing if there's a URL error; just continue searching\n      }\n    }\n    // In the old SDK, this error also provides helpful messages.\n    _fail(auth, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */);\n  }\n  function matchDomain(expected) {\n    const currentUrl = _getCurrentUrl();\n    const {\n      protocol,\n      hostname\n    } = new URL(currentUrl);\n    if (expected.startsWith('chrome-extension://')) {\n      const ceUrl = new URL(expected);\n      if (ceUrl.hostname === '' && hostname === '') {\n        // For some reason we're not parsing chrome URLs properly\n        return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');\n      }\n      return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n    }\n    if (!HTTP_REGEX.test(protocol)) {\n      return false;\n    }\n    if (IP_ADDRESS_REGEX.test(expected)) {\n      // The domain has to be exactly equal to the pattern, as an IP domain will\n      // only contain the IP, no extra character.\n      return hostname === expected;\n    }\n    // Dots in pattern should be escaped.\n    const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n    // Non ip address domains.\n    // domain.com = *.domain.com OR domain.com\n    const re = new RegExp('^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');\n    return re.test(hostname);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const NETWORK_TIMEOUT = new Delay(30000, 60000);\n  /**\n   * Reset unloaded GApi modules. If gapi.load fails due to a network error,\n   * it will stop working after a retrial. This is a hack to fix this issue.\n   */\n  function resetUnloadedGapiModules() {\n    // Clear last failed gapi.load state to force next gapi.load to first\n    // load the failed gapi.iframes module.\n    // Get gapix.beacon context.\n    const beacon = _window().___jsl;\n    // Get current hint.\n    if (beacon?.H) {\n      // Get gapi hint.\n      for (const hint of Object.keys(beacon.H)) {\n        // Requested modules.\n        beacon.H[hint].r = beacon.H[hint].r || [];\n        // Loaded modules.\n        beacon.H[hint].L = beacon.H[hint].L || [];\n        // Set requested modules to a copy of the loaded modules.\n        beacon.H[hint].r = [...beacon.H[hint].L];\n        // Clear pending callbacks.\n        if (beacon.CP) {\n          for (let i = 0; i < beacon.CP.length; i++) {\n            // Remove all failed pending callbacks.\n            beacon.CP[i] = null;\n          }\n        }\n      }\n    }\n  }\n  function loadGapi(auth) {\n    return new Promise((resolve, reject) => {\n      // Function to run when gapi.load is ready.\n      function loadGapiIframe() {\n        // The developer may have tried to previously run gapi.load and failed.\n        // Run this to fix that.\n        resetUnloadedGapiModules();\n        gapi.load('gapi.iframes', {\n          callback: () => {\n            resolve(gapi.iframes.getContext());\n          },\n          ontimeout: () => {\n            // The above reset may be sufficient, but having this reset after\n            // failure ensures that if the developer calls gapi.load after the\n            // connection is re-established and before another attempt to embed\n            // the iframe, it would work and would not be broken because of our\n            // failed attempt.\n            // Timeout when gapi.iframes.Iframe not loaded.\n            resetUnloadedGapiModules();\n            reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n          },\n          timeout: NETWORK_TIMEOUT.get()\n        });\n      }\n      if (_window().gapi?.iframes?.Iframe) {\n        // If gapi.iframes.Iframe available, resolve.\n        resolve(gapi.iframes.getContext());\n      } else if (!!_window().gapi?.load) {\n        // Gapi loader ready, load gapi.iframes.\n        loadGapiIframe();\n      } else {\n        // Create a new iframe callback when this is called so as not to overwrite\n        // any previous defined callback. This happens if this method is called\n        // multiple times in parallel and could result in the later callback\n        // overwriting the previous one. This would end up with a iframe\n        // timeout.\n        const cbName = _generateCallbackName('iframefcb');\n        // GApi loader not available, dynamically load platform.js.\n        _window()[cbName] = () => {\n          // GApi loader should be ready.\n          if (!!gapi.load) {\n            loadGapiIframe();\n          } else {\n            // Gapi loader failed, throw error.\n            reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n          }\n        };\n        // Load GApi loader.\n        return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`).catch(e => reject(e));\n      }\n    }).catch(error => {\n      // Reset cached promise to allow for retrial.\n      cachedGApiLoader = null;\n      throw error;\n    });\n  }\n  let cachedGApiLoader = null;\n  function _loadGapi(auth) {\n    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n    return cachedGApiLoader;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const PING_TIMEOUT = new Delay(5000, 15000);\n  const IFRAME_PATH = '__/auth/iframe';\n  const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\n  const IFRAME_ATTRIBUTES = {\n    style: {\n      position: 'absolute',\n      top: '-100px',\n      width: '1px',\n      height: '1px'\n    },\n    'aria-hidden': 'true',\n    tabindex: '-1'\n  };\n  // Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n  // anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\n  const EID_FROM_APIHOST = new Map([[\"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */, 'p'],\n  // production\n  ['staging-identitytoolkit.sandbox.googleapis.com', 's'],\n  // staging\n  ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n  ]);\n  function getIframeUrl(auth) {\n    const config = auth.config;\n    _assert(config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n    const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n    const params = {\n      apiKey: config.apiKey,\n      appName: auth.name,\n      v: _firebaseApp.SDK_VERSION\n    };\n    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n    if (eid) {\n      params.eid = eid;\n    }\n    const frameworks = auth._getFrameworks();\n    if (frameworks.length) {\n      params.fw = frameworks.join(',');\n    }\n    return `${url}?${(0, _firebaseUtil.querystring)(params).slice(1)}`;\n  }\n  async function _openIframe(auth) {\n    const context = await _loadGapi(auth);\n    const gapi = _window().gapi;\n    _assert(gapi, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return context.open({\n      where: document.body,\n      url: getIframeUrl(auth),\n      messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n      attributes: IFRAME_ATTRIBUTES,\n      dontclear: true\n    }, iframe => new Promise(async (resolve, reject) => {\n      await iframe.restyle({\n        // Prevent iframe from closing on mouse out.\n        setHideOnLeave: false\n      });\n      const networkError = _createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);\n      // Confirm iframe is correctly loaded.\n      // To fallback on failure, set a timeout.\n      const networkErrorTimer = _window().setTimeout(() => {\n        reject(networkError);\n      }, PING_TIMEOUT.get());\n      // Clear timer and resolve pending iframe ready promise.\n      function clearTimerAndResolve() {\n        _window().clearTimeout(networkErrorTimer);\n        resolve(iframe);\n      }\n      // This returns an IThenable. However the reject part does not call\n      // when the iframe is not loaded.\n      iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n        reject(networkError);\n      });\n    }));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const BASE_POPUP_OPTIONS = {\n    location: 'yes',\n    resizable: 'yes',\n    statusbar: 'yes',\n    toolbar: 'no'\n  };\n  const DEFAULT_WIDTH = 500;\n  const DEFAULT_HEIGHT = 600;\n  const TARGET_BLANK = '_blank';\n  const FIREFOX_EMPTY_URL = 'http://localhost';\n  class AuthPopup {\n    constructor(window) {\n      this.window = window;\n      this.associatedEvent = null;\n    }\n    close() {\n      if (this.window) {\n        try {\n          this.window.close();\n        } catch (e) {}\n      }\n    }\n  }\n  function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n    let target = '';\n    const options = {\n      ...BASE_POPUP_OPTIONS,\n      width: width.toString(),\n      height: height.toString(),\n      top,\n      left\n    };\n    // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n    // specified, even though the popup is not necessarily blocked.\n    const ua = (0, _firebaseUtil.getUA)().toLowerCase();\n    if (name) {\n      target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n    }\n    if (_isFirefox(ua)) {\n      // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n      url = url || FIREFOX_EMPTY_URL;\n      // Firefox disables by default scrolling on popup windows, which can create\n      // issues when the user has many Google accounts, for instance.\n      options.scrollbars = 'yes';\n    }\n    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');\n    if (_isIOSStandalone(ua) && target !== '_self') {\n      openAsNewWindowIOS(url || '', target);\n      return new AuthPopup(null);\n    }\n    // about:blank getting sanitized causing browsers like IE/Edge to display\n    // brief error message before redirecting to handler.\n    const newWin = window.open(url || '', target, optionsString);\n    _assert(newWin, auth, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */);\n    // Flaky on IE edge, encapsulate with a try and catch.\n    try {\n      newWin.focus();\n    } catch (e) {}\n    return new AuthPopup(newWin);\n  }\n  function openAsNewWindowIOS(url, target) {\n    const el = document.createElement('a');\n    el.href = url;\n    el.target = target;\n    const click = document.createEvent('MouseEvent');\n    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\n    el.dispatchEvent(click);\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * URL for Authentication widget which will initiate the OAuth handshake\n   *\n   * @internal\n   */\n  const WIDGET_PATH = '__/auth/handler';\n  /**\n   * URL for emulated environment\n   *\n   * @internal\n   */\n  const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n  /**\n   * Fragment name for the App Check token that gets passed to the widget\n   *\n   * @internal\n   */\n  const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\n  async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n    _assert(auth.config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n    _assert(auth.config.apiKey, auth, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */);\n    const params = {\n      apiKey: auth.config.apiKey,\n      appName: auth.name,\n      authType,\n      redirectUrl,\n      v: _firebaseApp.SDK_VERSION,\n      eventId\n    };\n    if (provider instanceof FederatedAuthProvider) {\n      provider.setDefaultLanguage(auth.languageCode);\n      params.providerId = provider.providerId || '';\n      if (!(0, _firebaseUtil.isEmpty)(provider.getCustomParameters())) {\n        params.customParameters = JSON.stringify(provider.getCustomParameters());\n      }\n      // TODO set additionalParams from the provider as well?\n      for (const [key, value] of Object.entries(additionalParams || {})) {\n        params[key] = value;\n      }\n    }\n    if (provider instanceof BaseOAuthProvider) {\n      const scopes = provider.getScopes().filter(scope => scope !== '');\n      if (scopes.length > 0) {\n        params.scopes = scopes.join(',');\n      }\n    }\n    if (auth.tenantId) {\n      params.tid = auth.tenantId;\n    }\n    // TODO: maybe set eid as endpointId\n    // TODO: maybe set fw as Frameworks.join(\",\")\n    const paramsDict = params;\n    for (const key of Object.keys(paramsDict)) {\n      if (paramsDict[key] === undefined) {\n        delete paramsDict[key];\n      }\n    }\n    // Sets the App Check token to pass to the widget\n    const appCheckToken = await auth._getAppCheckToken();\n    const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : '';\n    // Start at index 1 to skip the leading '&' in the query string\n    return `${getHandlerBase(auth)}?${(0, _firebaseUtil.querystring)(paramsDict).slice(1)}${appCheckTokenFragment}`;\n  }\n  function getHandlerBase({\n    config\n  }) {\n    if (!config.emulator) {\n      return `https://${config.authDomain}/${WIDGET_PATH}`;\n    }\n    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The special web storage event\n   *\n   */\n  const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\n  class BrowserPopupRedirectResolver {\n    constructor() {\n      this.eventManagers = {};\n      this.iframes = {};\n      this.originValidationPromises = {};\n      this._redirectPersistence = browserSessionPersistence;\n      this._completeRedirectFn = _getRedirectResult;\n      this._overrideRedirectResult = _overrideRedirectResult;\n    }\n    // Wrapping in async even though we don't await anywhere in order\n    // to make sure errors are raised as promise rejections\n    async _openPopup(auth, provider, authType, eventId) {\n      debugAssert(this.eventManagers[auth._key()]?.manager, '_initialize() not called before _openPopup()');\n      const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n      return _open(auth, url, _generateEventId());\n    }\n    async _openRedirect(auth, provider, authType, eventId) {\n      await this._originValidation(auth);\n      const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n      _setWindowLocation(url);\n      return new Promise(() => {});\n    }\n    _initialize(auth) {\n      const key = auth._key();\n      if (this.eventManagers[key]) {\n        const {\n          manager,\n          promise\n        } = this.eventManagers[key];\n        if (manager) {\n          return Promise.resolve(manager);\n        } else {\n          debugAssert(promise, 'If manager is not set, promise should be');\n          return promise;\n        }\n      }\n      const promise = this.initAndGetManager(auth);\n      this.eventManagers[key] = {\n        promise\n      };\n      // If the promise is rejected, the key should be removed so that the\n      // operation can be retried later.\n      promise.catch(() => {\n        delete this.eventManagers[key];\n      });\n      return promise;\n    }\n    async initAndGetManager(auth) {\n      const iframe = await _openIframe(auth);\n      const manager = new AuthEventManager(auth);\n      iframe.register('authEvent', iframeEvent => {\n        _assert(iframeEvent?.authEvent, auth, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */);\n        // TODO: Consider splitting redirect and popup events earlier on\n        const handled = manager.onEvent(iframeEvent.authEvent);\n        return {\n          status: handled ? \"ACK\" /* GapiOutcome.ACK */ : \"ERROR\" /* GapiOutcome.ERROR */\n        };\n      }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n      this.eventManagers[auth._key()] = {\n        manager\n      };\n      this.iframes[auth._key()] = iframe;\n      return manager;\n    }\n    _isIframeWebStorageSupported(auth, cb) {\n      const iframe = this.iframes[auth._key()];\n      iframe.send(WEB_STORAGE_SUPPORT_KEY, {\n        type: WEB_STORAGE_SUPPORT_KEY\n      }, result => {\n        const isSupported = result?.[0]?.[WEB_STORAGE_SUPPORT_KEY];\n        if (isSupported !== undefined) {\n          cb(!!isSupported);\n        }\n        _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n    }\n    _originValidation(auth) {\n      const key = auth._key();\n      if (!this.originValidationPromises[key]) {\n        this.originValidationPromises[key] = _validateOrigin(auth);\n      }\n      return this.originValidationPromises[key];\n    }\n    get _shouldInitProactively() {\n      // Mobile browsers and Safari need to optimistically initialize\n      return _isMobileBrowser() || _isSafari() || _isIOS();\n    }\n  }\n  /**\n   * An implementation of {@link PopupRedirectResolver} suitable for browser\n   * based applications.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @public\n   */\n  const browserPopupRedirectResolver = BrowserPopupRedirectResolver;\n  class MultiFactorAssertionImpl {\n    constructor(factorId) {\n      this.factorId = factorId;\n    }\n    _process(auth, session, displayName) {\n      switch (session.type) {\n        case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n          return this._finalizeEnroll(auth, session.credential, displayName);\n        case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n          return this._finalizeSignIn(auth, session.credential);\n        default:\n          return debugFail('unexpected MultiFactorSessionType');\n      }\n    }\n  }\n\n  /**\n   * {@inheritdoc PhoneMultiFactorAssertion}\n   *\n   * @public\n   */\n  class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(credential) {\n      super(\"phone\" /* FactorId.PHONE */);\n      this.credential = credential;\n    }\n    /** @internal */\n    static _fromCredential(credential) {\n      return new PhoneMultiFactorAssertionImpl(credential);\n    }\n    /** @internal */\n    _finalizeEnroll(auth, idToken, displayName) {\n      return finalizeEnrollPhoneMfa(auth, {\n        idToken,\n        displayName,\n        phoneVerificationInfo: this.credential._makeVerificationRequest()\n      });\n    }\n    /** @internal */\n    _finalizeSignIn(auth, mfaPendingCredential) {\n      return finalizeSignInPhoneMfa(auth, {\n        mfaPendingCredential,\n        phoneVerificationInfo: this.credential._makeVerificationRequest()\n      });\n    }\n  }\n  /**\n   * Provider for generating a {@link PhoneMultiFactorAssertion}.\n   *\n   * @public\n   */\n  class PhoneMultiFactorGenerator {\n    constructor() {}\n    /**\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n     *\n     * @remarks\n     * This method does not work in a Node.js environment.\n     *\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}\n     */\n    static assertion(credential) {\n      return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n    }\n  }\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  PhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * @public\n   */\n  class TotpMultiFactorGenerator {\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n     * the TOTP (time-based one-time password) second factor.\n     * This assertion is used to complete enrollment in TOTP second factor.\n     *\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorUser.enroll}.\n     */\n    static assertionForEnrollment(secret, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n    }\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n     * This assertion is used to complete signIn with TOTP as the second factor.\n     *\n     * @param enrollmentId identifies the enrolled TOTP second factor.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}.\n     */\n    static assertionForSignIn(enrollmentId, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n    }\n    /**\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\n     * Used for generating a QR code URL or inputting into a TOTP app.\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\n     *\n     * @param session The {@link MultiFactorSession} that the user is part of.\n     * @returns A promise to {@link TotpSecret}.\n     */\n    static async generateSecret(session) {\n      const mfaSession = session;\n      _assert(typeof mfaSession.user?.auth !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n        idToken: mfaSession.credential,\n        totpEnrollmentInfo: {}\n      });\n      return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n    }\n  }\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  TotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\n  class TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(otp, enrollmentId, secret) {\n      super(\"totp\" /* FactorId.TOTP */);\n      this.otp = otp;\n      this.enrollmentId = enrollmentId;\n      this.secret = secret;\n    }\n    /** @internal */\n    static _fromSecret(secret, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n    }\n    /** @internal */\n    static _fromEnrollmentId(enrollmentId, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n    }\n    /** @internal */\n    async _finalizeEnroll(auth, idToken, displayName) {\n      _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return finalizeEnrollTotpMfa(auth, {\n        idToken,\n        displayName,\n        totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n      });\n    }\n    /** @internal */\n    async _finalizeSignIn(auth, mfaPendingCredential) {\n      _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      const totpVerificationInfo = {\n        verificationCode: this.otp\n      };\n      return finalizeSignInTotpMfa(auth, {\n        mfaPendingCredential,\n        mfaEnrollmentId: this.enrollmentId,\n        totpVerificationInfo\n      });\n    }\n  }\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * Stores the shared secret key and other parameters to generate time-based OTPs.\n   * Implements methods to retrieve the shared secret key and generate a QR code URL.\n   * @public\n   */\n  class TotpSecret {\n    // The public members are declared outside the constructor so the docs can be generated.\n    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n      this.sessionInfo = sessionInfo;\n      this.auth = auth;\n      this.secretKey = secretKey;\n      this.hashingAlgorithm = hashingAlgorithm;\n      this.codeLength = codeLength;\n      this.codeIntervalSeconds = codeIntervalSeconds;\n      this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    /** @internal */\n    static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n      return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n    }\n    /** @internal */\n    _makeTotpVerificationInfo(otp) {\n      return {\n        sessionInfo: this.sessionInfo,\n        verificationCode: otp\n      };\n    }\n    /**\n     * Returns a QR code URL as described in\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n     *\n     * @param accountName the name of the account/app along with a user identifier.\n     * @param issuer issuer of the TOTP (likely the app name).\n     * @returns A QR code URL string.\n     */\n    generateQrCodeUrl(accountName, issuer) {\n      let useDefaults = false;\n      if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n        useDefaults = true;\n      }\n      if (useDefaults) {\n        if (_isEmptyString(accountName)) {\n          accountName = this.auth.currentUser?.email || 'unknownuser';\n        }\n        if (_isEmptyString(issuer)) {\n          issuer = this.auth.name;\n        }\n      }\n      return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n    }\n  }\n  /** @internal */\n  function _isEmptyString(input) {\n    return typeof input === 'undefined' || input?.length === 0;\n  }\n  var name = \"@firebase/auth\";\n  var version = \"1.11.0\";\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthInterop {\n    constructor(auth) {\n      this.auth = auth;\n      this.internalListeners = new Map();\n    }\n    getUid() {\n      this.assertAuthConfigured();\n      return this.auth.currentUser?.uid || null;\n    }\n    async getToken(forceRefresh) {\n      this.assertAuthConfigured();\n      await this.auth._initializationPromise;\n      if (!this.auth.currentUser) {\n        return null;\n      }\n      const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n      return {\n        accessToken\n      };\n    }\n    addAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      if (this.internalListeners.has(listener)) {\n        return;\n      }\n      const unsubscribe = this.auth.onIdTokenChanged(user => {\n        listener(user?.stsTokenManager.accessToken || null);\n      });\n      this.internalListeners.set(listener, unsubscribe);\n      this.updateProactiveRefresh();\n    }\n    removeAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      const unsubscribe = this.internalListeners.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      this.internalListeners.delete(listener);\n      unsubscribe();\n      this.updateProactiveRefresh();\n    }\n    assertAuthConfigured() {\n      _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n    }\n    updateProactiveRefresh() {\n      if (this.internalListeners.size > 0) {\n        this.auth._startProactiveRefresh();\n      } else {\n        this.auth._stopProactiveRefresh();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getVersionForPlatform(clientPlatform) {\n    switch (clientPlatform) {\n      case \"Node\" /* ClientPlatform.NODE */:\n        return 'node';\n      case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n        return 'rn';\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        return 'webworker';\n      case \"Cordova\" /* ClientPlatform.CORDOVA */:\n        return 'cordova';\n      case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n        return 'web-extension';\n      default:\n        return undefined;\n    }\n  }\n  /** @internal */\n  function registerAuth(clientPlatform) {\n    (0, _firebaseApp._registerComponent)(new _firebaseComponent.Component(\"auth\" /* _ComponentName.AUTH */, (container, {\n      options: deps\n    }) => {\n      const app = container.getProvider('app').getImmediate();\n      const heartbeatServiceProvider = container.getProvider('heartbeat');\n      const appCheckServiceProvider = container.getProvider('app-check-internal');\n      const {\n        apiKey,\n        authDomain\n      } = app.options;\n      _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n        appName: app.name\n      });\n      const config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n        tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n        apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n    /**\n     * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n     * For why we do this, See go/firebase-next-auth-init\n     */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n    /**\n     * Because all firebase products that depend on auth depend on auth-internal directly,\n     * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n     */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n      const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n      authInternalProvider.initialize();\n    }));\n    (0, _firebaseApp._registerComponent)(new _firebaseComponent.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n      const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n      return (auth => new AuthInterop(auth))(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n    (0, _firebaseApp.registerVersion)(name, version, getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    (0, _firebaseApp.registerVersion)(name, version, 'esm2020');\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\n  const authIdTokenMaxAge = (0, _firebaseUtil.getExperimentalSetting)('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\n  let lastPostedIdToken = null;\n  const mintCookieFactory = url => async user => {\n    const idTokenResult = user && (await user.getIdTokenResult());\n    const idTokenAge = idTokenResult && (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;\n    if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n      return;\n    }\n    // Specifically trip null => undefined when logged out, to delete any existing cookie\n    const idToken = idTokenResult?.token;\n    if (lastPostedIdToken === idToken) {\n      return;\n    }\n    lastPostedIdToken = idToken;\n    await fetch(url, {\n      method: idToken ? 'POST' : 'DELETE',\n      headers: idToken ? {\n        'Authorization': `Bearer ${idToken}`\n      } : {}\n    });\n  };\n  /**\n   * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n   * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n   *\n   * @param app - The Firebase App.\n   *\n   * @public\n   */\n  function getAuth(app = (0, _firebaseApp.getApp)()) {\n    const provider = (0, _firebaseApp._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      return provider.getImmediate();\n    }\n    const auth = initializeAuth(app, {\n      popupRedirectResolver: browserPopupRedirectResolver,\n      persistence: [indexedDBLocalPersistence, browserLocalPersistence, browserSessionPersistence]\n    });\n    const authTokenSyncPath = (0, _firebaseUtil.getExperimentalSetting)('authTokenSyncURL');\n    // Only do the Cookie exchange in a secure context\n    if (authTokenSyncPath && typeof isSecureContext === 'boolean' && isSecureContext) {\n      // Don't allow urls (XSS possibility), only paths on the same domain\n      const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);\n      if (location.origin === authTokenSyncUrl.origin) {\n        const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());\n        beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\n        onIdTokenChanged(auth, user => mintCookie(user));\n      }\n    }\n    const authEmulatorHost = (0, _firebaseUtil.getDefaultEmulatorHost)('auth');\n    if (authEmulatorHost) {\n      connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n    }\n    return auth;\n  }\n  function getScriptParentElement() {\n    return document.getElementsByTagName('head')?.[0] ?? document;\n  }\n  _setExternalJSProvider({\n    loadJS(url) {\n      // TODO: consider adding timeout support & cancellation\n      return new Promise((resolve, reject) => {\n        const el = document.createElement('script');\n        el.setAttribute('src', url);\n        el.onload = resolve;\n        el.onerror = e => {\n          const error = _createError(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          error.customData = e;\n          reject(error);\n        };\n        el.type = 'text/javascript';\n        el.charset = 'UTF-8';\n        getScriptParentElement().appendChild(el);\n      });\n    },\n    gapiScript: 'https://apis.google.com/js/api.js',\n    recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',\n    recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='\n  });\n  registerAuth(\"Browser\" /* ClientPlatform.BROWSER */);\n});","lineCount":11716,"map":[[7,2,11154,0,"Object"],[7,8,11154,0],[7,9,11154,0,"defineProperty"],[7,23,11154,0],[7,24,11154,0,"exports"],[7,31,11154,0],[8,4,11154,0,"enumerable"],[8,14,11154,0],[9,4,11154,0,"get"],[9,7,11154,0],[9,18,11154,0,"get"],[9,19,11154,0],[10,6,11154,0],[10,13,11154,9,"SAMLAuthProvider"],[10,29,11154,25],[11,4,11154,25],[12,2,11154,25],[13,2,11154,0,"Object"],[13,8,11154,0],[13,9,11154,0,"defineProperty"],[13,23,11154,0],[13,24,11154,0,"exports"],[13,31,11154,0],[14,4,11154,0,"enumerable"],[14,14,11154,0],[15,4,11154,0,"get"],[15,7,11154,0],[15,18,11154,0,"get"],[15,19,11154,0],[16,6,11154,0],[16,13,11154,32,"ActionCodeOperation"],[16,32,11154,51],[17,4,11154,51],[18,2,11154,51],[19,2,11154,0,"Object"],[19,8,11154,0],[19,9,11154,0,"defineProperty"],[19,23,11154,0],[19,24,11154,0,"exports"],[19,31,11154,0],[20,4,11154,0,"enumerable"],[20,14,11154,0],[21,4,11154,0,"get"],[21,7,11154,0],[21,18,11154,0,"get"],[21,19,11154,0],[22,6,11154,0],[22,13,11154,58,"useDeviceLanguage"],[22,30,11154,75],[23,4,11154,75],[24,2,11154,75],[25,2,11154,0,"Object"],[25,8,11154,0],[25,9,11154,0,"defineProperty"],[25,23,11154,0],[25,24,11154,0,"exports"],[25,31,11154,0],[26,4,11154,0,"enumerable"],[26,14,11154,0],[27,4,11154,0,"get"],[27,7,11154,0],[27,18,11154,0,"get"],[27,19,11154,0],[28,6,11154,0],[28,13,11154,82,"updateCurrentUser"],[28,30,11154,99],[29,4,11154,99],[30,2,11154,99],[31,2,11154,0,"Object"],[31,8,11154,0],[31,9,11154,0,"defineProperty"],[31,23,11154,0],[31,24,11154,0,"exports"],[31,31,11154,0],[32,4,11154,0,"enumerable"],[32,14,11154,0],[33,4,11154,0,"get"],[33,7,11154,0],[33,18,11154,0,"get"],[33,19,11154,0],[34,6,11154,0],[34,13,11154,106,"signOut"],[34,20,11154,113],[35,4,11154,113],[36,2,11154,113],[37,2,11154,0,"Object"],[37,8,11154,0],[37,9,11154,0,"defineProperty"],[37,23,11154,0],[37,24,11154,0,"exports"],[37,31,11154,0],[38,4,11154,0,"enumerable"],[38,14,11154,0],[39,4,11154,0,"get"],[39,7,11154,0],[39,18,11154,0,"get"],[39,19,11154,0],[40,6,11154,0],[40,13,11154,120,"revokeAccessToken"],[40,30,11154,137],[41,4,11154,137],[42,2,11154,137],[43,2,11154,0,"Object"],[43,8,11154,0],[43,9,11154,0,"defineProperty"],[43,23,11154,0],[43,24,11154,0,"exports"],[43,31,11154,0],[44,4,11154,0,"enumerable"],[44,14,11154,0],[45,4,11154,0,"get"],[45,7,11154,0],[45,18,11154,0,"get"],[45,19,11154,0],[46,6,11154,0],[46,13,11154,144,"FactorId"],[46,21,11154,152],[47,4,11154,152],[48,2,11154,152],[49,2,11154,0,"Object"],[49,8,11154,0],[49,9,11154,0,"defineProperty"],[49,23,11154,0],[49,24,11154,0,"exports"],[49,31,11154,0],[50,4,11154,0,"enumerable"],[50,14,11154,0],[51,4,11154,0,"get"],[51,7,11154,0],[51,18,11154,0,"get"],[51,19,11154,0],[52,6,11154,0],[52,13,11154,159,"deleteUser"],[52,23,11154,169],[53,4,11154,169],[54,2,11154,169],[55,2,11154,0,"Object"],[55,8,11154,0],[55,9,11154,0,"defineProperty"],[55,23,11154,0],[55,24,11154,0,"exports"],[55,31,11154,0],[56,4,11154,0,"enumerable"],[56,14,11154,0],[57,4,11154,0,"get"],[57,7,11154,0],[57,18,11154,0,"get"],[57,19,11154,0],[58,6,11154,0],[58,13,11154,176,"debugErrorMap"],[58,26,11154,189],[59,4,11154,189],[60,2,11154,189],[61,2,11154,0,"Object"],[61,8,11154,0],[61,9,11154,0,"defineProperty"],[61,23,11154,0],[61,24,11154,0,"exports"],[61,31,11154,0],[62,4,11154,0,"enumerable"],[62,14,11154,0],[63,4,11154,0,"get"],[63,7,11154,0],[63,18,11154,0,"get"],[63,19,11154,0],[64,6,11154,0],[64,13,11154,196,"prodErrorMap"],[64,25,11154,208],[65,4,11154,208],[66,2,11154,208],[67,2,11154,0,"Object"],[67,8,11154,0],[67,9,11154,0,"defineProperty"],[67,23,11154,0],[67,24,11154,0,"exports"],[67,31,11154,0],[68,4,11154,0,"enumerable"],[68,14,11154,0],[69,4,11154,0,"get"],[69,7,11154,0],[69,18,11154,0,"get"],[69,19,11154,0],[70,6,11154,0],[70,13,11154,215,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[70,55,11154,257],[71,4,11154,257],[72,2,11154,257],[73,2,11154,0,"Object"],[73,8,11154,0],[73,9,11154,0,"defineProperty"],[73,23,11154,0],[73,24,11154,0,"exports"],[73,31,11154,0],[74,4,11154,0,"enumerable"],[74,14,11154,0],[75,4,11154,0,"get"],[75,7,11154,0],[75,18,11154,0,"get"],[75,19,11154,0],[76,6,11154,0],[76,13,11154,264,"initializeAuth"],[76,27,11154,278],[77,4,11154,278],[78,2,11154,278],[79,2,11154,0,"Object"],[79,8,11154,0],[79,9,11154,0,"defineProperty"],[79,23,11154,0],[79,24,11154,0,"exports"],[79,31,11154,0],[80,4,11154,0,"enumerable"],[80,14,11154,0],[81,4,11154,0,"get"],[81,7,11154,0],[81,18,11154,0,"get"],[81,19,11154,0],[82,6,11154,0],[82,13,11154,285,"connectAuthEmulator"],[82,32,11154,304],[83,4,11154,304],[84,2,11154,304],[85,2,11154,0,"Object"],[85,8,11154,0],[85,9,11154,0,"defineProperty"],[85,23,11154,0],[85,24,11154,0,"exports"],[85,31,11154,0],[86,4,11154,0,"enumerable"],[86,14,11154,0],[87,4,11154,0,"get"],[87,7,11154,0],[87,18,11154,0,"get"],[87,19,11154,0],[88,6,11154,0],[88,13,11154,311,"AuthCredential"],[88,27,11154,325],[89,4,11154,325],[90,2,11154,325],[91,2,11154,0,"Object"],[91,8,11154,0],[91,9,11154,0,"defineProperty"],[91,23,11154,0],[91,24,11154,0,"exports"],[91,31,11154,0],[92,4,11154,0,"enumerable"],[92,14,11154,0],[93,4,11154,0,"get"],[93,7,11154,0],[93,18,11154,0,"get"],[93,19,11154,0],[94,6,11154,0],[94,13,11154,332,"EmailAuthCredential"],[94,32,11154,351],[95,4,11154,351],[96,2,11154,351],[97,2,11154,0,"Object"],[97,8,11154,0],[97,9,11154,0,"defineProperty"],[97,23,11154,0],[97,24,11154,0,"exports"],[97,31,11154,0],[98,4,11154,0,"enumerable"],[98,14,11154,0],[99,4,11154,0,"get"],[99,7,11154,0],[99,18,11154,0,"get"],[99,19,11154,0],[100,6,11154,0],[100,13,11154,358,"OperationType"],[100,26,11154,371],[101,4,11154,371],[102,2,11154,371],[103,2,11154,0,"Object"],[103,8,11154,0],[103,9,11154,0,"defineProperty"],[103,23,11154,0],[103,24,11154,0,"exports"],[103,31,11154,0],[104,4,11154,0,"enumerable"],[104,14,11154,0],[105,4,11154,0,"get"],[105,7,11154,0],[105,18,11154,0,"get"],[105,19,11154,0],[106,6,11154,0],[106,13,11154,378,"PhoneAuthProvider"],[106,30,11154,395],[107,4,11154,395],[108,2,11154,395],[109,2,11154,0,"Object"],[109,8,11154,0],[109,9,11154,0,"defineProperty"],[109,23,11154,0],[109,24,11154,0,"exports"],[109,31,11154,0],[110,4,11154,0,"enumerable"],[110,14,11154,0],[111,4,11154,0,"get"],[111,7,11154,0],[111,18,11154,0,"get"],[111,19,11154,0],[112,6,11154,0],[112,13,11154,402,"OAuthCredential"],[112,28,11154,417],[113,4,11154,417],[114,2,11154,417],[115,2,11154,0,"Object"],[115,8,11154,0],[115,9,11154,0,"defineProperty"],[115,23,11154,0],[115,24,11154,0,"exports"],[115,31,11154,0],[116,4,11154,0,"enumerable"],[116,14,11154,0],[117,4,11154,0,"get"],[117,7,11154,0],[117,18,11154,0,"get"],[117,19,11154,0],[118,6,11154,0],[118,13,11154,424,"RecaptchaVerifier"],[118,30,11154,441],[119,4,11154,441],[120,2,11154,441],[121,2,11154,0,"Object"],[121,8,11154,0],[121,9,11154,0,"defineProperty"],[121,23,11154,0],[121,24,11154,0,"exports"],[121,31,11154,0],[122,4,11154,0,"enumerable"],[122,14,11154,0],[123,4,11154,0,"get"],[123,7,11154,0],[123,18,11154,0,"get"],[123,19,11154,0],[124,6,11154,0],[124,13,11154,448,"SignInMethod"],[124,25,11154,460],[125,4,11154,460],[126,2,11154,460],[127,2,11154,0,"Object"],[127,8,11154,0],[127,9,11154,0,"defineProperty"],[127,23,11154,0],[127,24,11154,0,"exports"],[127,31,11154,0],[128,4,11154,0,"enumerable"],[128,14,11154,0],[129,4,11154,0,"get"],[129,7,11154,0],[129,18,11154,0,"get"],[129,19,11154,0],[130,6,11154,0],[130,13,11154,467,"TotpMultiFactorGenerator"],[130,37,11154,491],[131,4,11154,491],[132,2,11154,491],[133,2,11154,0,"Object"],[133,8,11154,0],[133,9,11154,0,"defineProperty"],[133,23,11154,0],[133,24,11154,0,"exports"],[133,31,11154,0],[134,4,11154,0,"enumerable"],[134,14,11154,0],[135,4,11154,0,"get"],[135,7,11154,0],[135,18,11154,0,"get"],[135,19,11154,0],[136,6,11154,0],[136,13,11154,498,"PhoneAuthCredential"],[136,32,11154,517],[137,4,11154,517],[138,2,11154,517],[139,2,11154,0,"Object"],[139,8,11154,0],[139,9,11154,0,"defineProperty"],[139,23,11154,0],[139,24,11154,0,"exports"],[139,31,11154,0],[140,4,11154,0,"enumerable"],[140,14,11154,0],[141,4,11154,0,"get"],[141,7,11154,0],[141,18,11154,0,"get"],[141,19,11154,0],[142,6,11154,0],[142,13,11154,524,"inMemoryPersistence"],[142,32,11154,543],[143,4,11154,543],[144,2,11154,543],[145,2,11154,0,"Object"],[145,8,11154,0],[145,9,11154,0,"defineProperty"],[145,23,11154,0],[145,24,11154,0,"exports"],[145,31,11154,0],[146,4,11154,0,"enumerable"],[146,14,11154,0],[147,4,11154,0,"get"],[147,7,11154,0],[147,18,11154,0,"get"],[147,19,11154,0],[148,6,11154,0],[148,13,11154,550,"EmailAuthProvider"],[148,30,11154,567],[149,4,11154,567],[150,2,11154,567],[151,2,11154,0,"Object"],[151,8,11154,0],[151,9,11154,0,"defineProperty"],[151,23,11154,0],[151,24,11154,0,"exports"],[151,31,11154,0],[152,4,11154,0,"enumerable"],[152,14,11154,0],[153,4,11154,0,"get"],[153,7,11154,0],[153,18,11154,0,"get"],[153,19,11154,0],[154,6,11154,0],[154,13,11154,574,"FacebookAuthProvider"],[154,33,11154,594],[155,4,11154,594],[156,2,11154,594],[157,2,11154,0,"Object"],[157,8,11154,0],[157,9,11154,0,"defineProperty"],[157,23,11154,0],[157,24,11154,0,"exports"],[157,31,11154,0],[158,4,11154,0,"enumerable"],[158,14,11154,0],[159,4,11154,0,"get"],[159,7,11154,0],[159,18,11154,0,"get"],[159,19,11154,0],[160,6,11154,0],[160,13,11154,601,"GoogleAuthProvider"],[160,31,11154,619],[161,4,11154,619],[162,2,11154,619],[163,2,11154,0,"Object"],[163,8,11154,0],[163,9,11154,0,"defineProperty"],[163,23,11154,0],[163,24,11154,0,"exports"],[163,31,11154,0],[164,4,11154,0,"enumerable"],[164,14,11154,0],[165,4,11154,0,"get"],[165,7,11154,0],[165,18,11154,0,"get"],[165,19,11154,0],[166,6,11154,0],[166,13,11154,626,"GithubAuthProvider"],[166,31,11154,644],[167,4,11154,644],[168,2,11154,644],[169,2,11154,0,"Object"],[169,8,11154,0],[169,9,11154,0,"defineProperty"],[169,23,11154,0],[169,24,11154,0,"exports"],[169,31,11154,0],[170,4,11154,0,"enumerable"],[170,14,11154,0],[171,4,11154,0,"get"],[171,7,11154,0],[171,18,11154,0,"get"],[171,19,11154,0],[172,6,11154,0],[172,13,11154,651,"OAuthProvider"],[172,26,11154,664],[173,4,11154,664],[174,2,11154,664],[175,2,11154,0,"Object"],[175,8,11154,0],[175,9,11154,0,"defineProperty"],[175,23,11154,0],[175,24,11154,0,"exports"],[175,31,11154,0],[176,4,11154,0,"enumerable"],[176,14,11154,0],[177,4,11154,0,"get"],[177,7,11154,0],[177,18,11154,0,"get"],[177,19,11154,0],[178,6,11154,0],[178,13,11154,671,"browserCookiePersistence"],[178,37,11154,695],[179,4,11154,695],[180,2,11154,695],[181,2,11154,0,"Object"],[181,8,11154,0],[181,9,11154,0,"defineProperty"],[181,23,11154,0],[181,24,11154,0,"exports"],[181,31,11154,0],[182,4,11154,0,"enumerable"],[182,14,11154,0],[183,4,11154,0,"get"],[183,7,11154,0],[183,18,11154,0,"get"],[183,19,11154,0],[184,6,11154,0],[184,13,11154,702,"TwitterAuthProvider"],[184,32,11154,721],[185,4,11154,721],[186,2,11154,721],[187,2,11154,0,"Object"],[187,8,11154,0],[187,9,11154,0,"defineProperty"],[187,23,11154,0],[187,24,11154,0,"exports"],[187,31,11154,0],[188,4,11154,0,"enumerable"],[188,14,11154,0],[189,4,11154,0,"get"],[189,7,11154,0],[189,18,11154,0,"get"],[189,19,11154,0],[190,6,11154,0],[190,13,11154,729,"signInAnonymously"],[190,30,11154,746],[191,4,11154,746],[192,2,11154,746],[193,2,11154,0,"Object"],[193,8,11154,0],[193,9,11154,0,"defineProperty"],[193,23,11154,0],[193,24,11154,0,"exports"],[193,31,11154,0],[194,4,11154,0,"enumerable"],[194,14,11154,0],[195,4,11154,0,"get"],[195,7,11154,0],[195,18,11154,0,"get"],[195,19,11154,0],[196,6,11154,0],[196,13,11154,754,"signInWithCredential"],[196,33,11154,774],[197,4,11154,774],[198,2,11154,774],[199,2,11154,0,"Object"],[199,8,11154,0],[199,9,11154,0,"defineProperty"],[199,23,11154,0],[199,24,11154,0,"exports"],[199,31,11154,0],[200,4,11154,0,"enumerable"],[200,14,11154,0],[201,4,11154,0,"get"],[201,7,11154,0],[201,18,11154,0,"get"],[201,19,11154,0],[202,6,11154,0],[202,13,11154,782,"linkWithCredential"],[202,31,11154,800],[203,4,11154,800],[204,2,11154,800],[205,2,11154,0,"Object"],[205,8,11154,0],[205,9,11154,0,"defineProperty"],[205,23,11154,0],[205,24,11154,0,"exports"],[205,31,11154,0],[206,4,11154,0,"enumerable"],[206,14,11154,0],[207,4,11154,0,"get"],[207,7,11154,0],[207,18,11154,0,"get"],[207,19,11154,0],[208,6,11154,0],[208,13,11154,808,"reauthenticateWithCredential"],[208,41,11154,836],[209,4,11154,836],[210,2,11154,836],[211,2,11154,0,"Object"],[211,8,11154,0],[211,9,11154,0,"defineProperty"],[211,23,11154,0],[211,24,11154,0,"exports"],[211,31,11154,0],[212,4,11154,0,"enumerable"],[212,14,11154,0],[213,4,11154,0,"get"],[213,7,11154,0],[213,18,11154,0,"get"],[213,19,11154,0],[214,6,11154,0],[214,13,11154,844,"signInWithCustomToken"],[214,34,11154,865],[215,4,11154,865],[216,2,11154,865],[217,2,11154,0,"Object"],[217,8,11154,0],[217,9,11154,0,"defineProperty"],[217,23,11154,0],[217,24,11154,0,"exports"],[217,31,11154,0],[218,4,11154,0,"enumerable"],[218,14,11154,0],[219,4,11154,0,"get"],[219,7,11154,0],[219,18,11154,0,"get"],[219,19,11154,0],[220,6,11154,0],[220,13,11154,873,"sendPasswordResetEmail"],[220,35,11154,895],[221,4,11154,895],[222,2,11154,895],[223,2,11154,0,"Object"],[223,8,11154,0],[223,9,11154,0,"defineProperty"],[223,23,11154,0],[223,24,11154,0,"exports"],[223,31,11154,0],[224,4,11154,0,"enumerable"],[224,14,11154,0],[225,4,11154,0,"get"],[225,7,11154,0],[225,18,11154,0,"get"],[225,19,11154,0],[226,6,11154,0],[226,13,11154,903,"confirmPasswordReset"],[226,33,11154,923],[227,4,11154,923],[228,2,11154,923],[229,2,11154,0,"Object"],[229,8,11154,0],[229,9,11154,0,"defineProperty"],[229,23,11154,0],[229,24,11154,0,"exports"],[229,31,11154,0],[230,4,11154,0,"enumerable"],[230,14,11154,0],[231,4,11154,0,"get"],[231,7,11154,0],[231,18,11154,0,"get"],[231,19,11154,0],[232,6,11154,0],[232,13,11154,931,"applyActionCode"],[232,28,11154,946],[233,4,11154,946],[234,2,11154,946],[235,2,11154,0,"Object"],[235,8,11154,0],[235,9,11154,0,"defineProperty"],[235,23,11154,0],[235,24,11154,0,"exports"],[235,31,11154,0],[236,4,11154,0,"enumerable"],[236,14,11154,0],[237,4,11154,0,"get"],[237,7,11154,0],[237,18,11154,0,"get"],[237,19,11154,0],[238,6,11154,0],[238,13,11154,954,"checkActionCode"],[238,28,11154,969],[239,4,11154,969],[240,2,11154,969],[241,2,11154,0,"Object"],[241,8,11154,0],[241,9,11154,0,"defineProperty"],[241,23,11154,0],[241,24,11154,0,"exports"],[241,31,11154,0],[242,4,11154,0,"enumerable"],[242,14,11154,0],[243,4,11154,0,"get"],[243,7,11154,0],[243,18,11154,0,"get"],[243,19,11154,0],[244,6,11154,0],[244,13,11154,977,"_getProjectConfig"],[244,30,11154,994],[245,4,11154,994],[246,2,11154,994],[247,2,11154,0,"Object"],[247,8,11154,0],[247,9,11154,0,"defineProperty"],[247,23,11154,0],[247,24,11154,0,"exports"],[247,31,11154,0],[248,4,11154,0,"enumerable"],[248,14,11154,0],[249,4,11154,0,"get"],[249,7,11154,0],[249,18,11154,0,"get"],[249,19,11154,0],[250,6,11154,0],[250,13,11154,1002,"_isIOS7Or8"],[250,23,11154,1012],[251,4,11154,1012],[252,2,11154,1012],[253,2,11154,0,"Object"],[253,8,11154,0],[253,9,11154,0,"defineProperty"],[253,23,11154,0],[253,24,11154,0,"exports"],[253,31,11154,0],[254,4,11154,0,"enumerable"],[254,14,11154,0],[255,4,11154,0,"get"],[255,7,11154,0],[255,18,11154,0,"get"],[255,19,11154,0],[256,6,11154,0],[256,13,11154,1020,"_createError"],[256,25,11154,1032],[257,4,11154,1032],[258,2,11154,1032],[259,2,11154,0,"Object"],[259,8,11154,0],[259,9,11154,0,"defineProperty"],[259,23,11154,0],[259,24,11154,0,"exports"],[259,31,11154,0],[260,4,11154,0,"enumerable"],[260,14,11154,0],[261,4,11154,0,"get"],[261,7,11154,0],[261,18,11154,0,"get"],[261,19,11154,0],[262,6,11154,0],[262,13,11154,1040,"_assert"],[262,20,11154,1047],[263,4,11154,1047],[264,2,11154,1047],[265,2,11154,0,"Object"],[265,8,11154,0],[265,9,11154,0,"defineProperty"],[265,23,11154,0],[265,24,11154,0,"exports"],[265,31,11154,0],[266,4,11154,0,"enumerable"],[266,14,11154,0],[267,4,11154,0,"get"],[267,7,11154,0],[267,18,11154,0,"get"],[267,19,11154,0],[268,6,11154,0],[268,13,11154,1055,"AuthEventManager"],[268,29,11154,1071],[269,4,11154,1071],[270,2,11154,1071],[271,2,11154,0,"Object"],[271,8,11154,0],[271,9,11154,0,"defineProperty"],[271,23,11154,0],[271,24,11154,0,"exports"],[271,31,11154,0],[272,4,11154,0,"enumerable"],[272,14,11154,0],[273,4,11154,0,"get"],[273,7,11154,0],[273,18,11154,0,"get"],[273,19,11154,0],[274,6,11154,0],[274,13,11154,1079,"_getInstance"],[274,25,11154,1091],[275,4,11154,1091],[276,2,11154,1091],[277,2,11154,0,"Object"],[277,8,11154,0],[277,9,11154,0,"defineProperty"],[277,23,11154,0],[277,24,11154,0,"exports"],[277,31,11154,0],[278,4,11154,0,"enumerable"],[278,14,11154,0],[279,4,11154,0,"get"],[279,7,11154,0],[279,18,11154,0,"get"],[279,19,11154,0],[280,6,11154,0],[280,13,11154,1099,"_persistenceKeyName"],[280,32,11154,1118],[281,4,11154,1118],[282,2,11154,1118],[283,2,11154,0,"Object"],[283,8,11154,0],[283,9,11154,0,"defineProperty"],[283,23,11154,0],[283,24,11154,0,"exports"],[283,31,11154,0],[284,4,11154,0,"enumerable"],[284,14,11154,0],[285,4,11154,0,"get"],[285,7,11154,0],[285,18,11154,0,"get"],[285,19,11154,0],[286,6,11154,0],[286,13,11154,1126,"_getRedirectResult"],[286,31,11154,1144],[287,4,11154,1144],[288,2,11154,1144],[289,2,11154,0,"Object"],[289,8,11154,0],[289,9,11154,0,"defineProperty"],[289,23,11154,0],[289,24,11154,0,"exports"],[289,31,11154,0],[290,4,11154,0,"enumerable"],[290,14,11154,0],[291,4,11154,0,"get"],[291,7,11154,0],[291,18,11154,0,"get"],[291,19,11154,0],[292,6,11154,0],[292,13,11154,1152,"_overrideRedirectResult"],[292,36,11154,1175],[293,4,11154,1175],[294,2,11154,1175],[295,2,11154,0,"Object"],[295,8,11154,0],[295,9,11154,0,"defineProperty"],[295,23,11154,0],[295,24,11154,0,"exports"],[295,31,11154,0],[296,4,11154,0,"enumerable"],[296,14,11154,0],[297,4,11154,0,"get"],[297,7,11154,0],[297,18,11154,0,"get"],[297,19,11154,0],[298,6,11154,0],[298,13,11154,1183,"_clearRedirectOutcomes"],[298,35,11154,1205],[299,4,11154,1205],[300,2,11154,1205],[301,2,11154,0,"Object"],[301,8,11154,0],[301,9,11154,0,"defineProperty"],[301,23,11154,0],[301,24,11154,0,"exports"],[301,31,11154,0],[302,4,11154,0,"enumerable"],[302,14,11154,0],[303,4,11154,0,"get"],[303,7,11154,0],[303,18,11154,0,"get"],[303,19,11154,0],[304,6,11154,0],[304,13,11154,1213,"_castAuth"],[304,22,11154,1222],[305,4,11154,1222],[306,2,11154,1222],[307,2,11154,0,"Object"],[307,8,11154,0],[307,9,11154,0,"defineProperty"],[307,23,11154,0],[307,24,11154,0,"exports"],[307,31,11154,0],[308,4,11154,0,"enumerable"],[308,14,11154,0],[309,4,11154,0,"get"],[309,7,11154,0],[309,18,11154,0,"get"],[309,19,11154,0],[310,6,11154,0],[310,13,11154,1230,"UserImpl"],[310,21,11154,1238],[311,4,11154,1238],[312,2,11154,1238],[313,2,11154,0,"Object"],[313,8,11154,0],[313,9,11154,0,"defineProperty"],[313,23,11154,0],[313,24,11154,0,"exports"],[313,31,11154,0],[314,4,11154,0,"enumerable"],[314,14,11154,0],[315,4,11154,0,"get"],[315,7,11154,0],[315,18,11154,0,"get"],[315,19,11154,0],[316,6,11154,0],[316,13,11154,1246,"AuthImpl"],[316,21,11154,1254],[317,4,11154,1254],[318,2,11154,1254],[319,2,11154,0,"Object"],[319,8,11154,0],[319,9,11154,0,"defineProperty"],[319,23,11154,0],[319,24,11154,0,"exports"],[319,31,11154,0],[320,4,11154,0,"enumerable"],[320,14,11154,0],[321,4,11154,0,"get"],[321,7,11154,0],[321,18,11154,0,"get"],[321,19,11154,0],[322,6,11154,0],[322,13,11154,1262,"_getClientVersion"],[322,30,11154,1279],[323,4,11154,1279],[324,2,11154,1279],[325,2,11154,0,"Object"],[325,8,11154,0],[325,9,11154,0,"defineProperty"],[325,23,11154,0],[325,24,11154,0,"exports"],[325,31,11154,0],[326,4,11154,0,"enumerable"],[326,14,11154,0],[327,4,11154,0,"get"],[327,7,11154,0],[327,18,11154,0,"get"],[327,19,11154,0],[328,6,11154,0],[328,13,11154,1287,"_generateEventId"],[328,29,11154,1303],[329,4,11154,1303],[330,2,11154,1303],[331,2,11154,0,"Object"],[331,8,11154,0],[331,9,11154,0,"defineProperty"],[331,23,11154,0],[331,24,11154,0,"exports"],[331,31,11154,0],[332,4,11154,0,"enumerable"],[332,14,11154,0],[333,4,11154,0,"get"],[333,7,11154,0],[333,18,11154,0,"get"],[333,19,11154,0],[334,6,11154,0],[334,13,11154,1311,"AuthPopup"],[334,22,11154,1320],[335,4,11154,1320],[336,2,11154,1320],[337,2,11154,0,"Object"],[337,8,11154,0],[337,9,11154,0,"defineProperty"],[337,23,11154,0],[337,24,11154,0,"exports"],[337,31,11154,0],[338,4,11154,0,"enumerable"],[338,14,11154,0],[339,4,11154,0,"get"],[339,7,11154,0],[339,18,11154,0,"get"],[339,19,11154,0],[340,6,11154,0],[340,13,11154,1328,"FetchProvider"],[340,26,11154,1341],[341,4,11154,1341],[342,2,11154,1341],[343,2,11154,0,"Object"],[343,8,11154,0],[343,9,11154,0,"defineProperty"],[343,23,11154,0],[343,24,11154,0,"exports"],[343,31,11154,0],[344,4,11154,0,"enumerable"],[344,14,11154,0],[345,4,11154,0,"get"],[345,7,11154,0],[345,18,11154,0,"get"],[345,19,11154,0],[346,6,11154,0],[346,13,11154,1349,"SAMLAuthCredential"],[346,31,11154,1367],[347,4,11154,1367],[348,2,11154,1367],[349,2,11154,0,"Object"],[349,8,11154,0],[349,9,11154,0,"defineProperty"],[349,23,11154,0],[349,24,11154,0,"exports"],[349,31,11154,0],[350,4,11154,0,"enumerable"],[350,14,11154,0],[351,4,11154,0,"get"],[351,7,11154,0],[351,18,11154,0,"get"],[351,19,11154,0],[352,6,11154,0],[352,13,11154,1375,"verifyPasswordResetCode"],[352,36,11154,1398],[353,4,11154,1398],[354,2,11154,1398],[355,2,11154,0,"Object"],[355,8,11154,0],[355,9,11154,0,"defineProperty"],[355,23,11154,0],[355,24,11154,0,"exports"],[355,31,11154,0],[356,4,11154,0,"enumerable"],[356,14,11154,0],[357,4,11154,0,"get"],[357,7,11154,0],[357,18,11154,0,"get"],[357,19,11154,0],[358,6,11154,0],[358,13,11154,1406,"createUserWithEmailAndPassword"],[358,43,11154,1436],[359,4,11154,1436],[360,2,11154,1436],[361,2,11154,0,"Object"],[361,8,11154,0],[361,9,11154,0,"defineProperty"],[361,23,11154,0],[361,24,11154,0,"exports"],[361,31,11154,0],[362,4,11154,0,"enumerable"],[362,14,11154,0],[363,4,11154,0,"get"],[363,7,11154,0],[363,18,11154,0,"get"],[363,19,11154,0],[364,6,11154,0],[364,13,11154,1444,"signInWithEmailAndPassword"],[364,39,11154,1470],[365,4,11154,1470],[366,2,11154,1470],[367,2,11154,0,"Object"],[367,8,11154,0],[367,9,11154,0,"defineProperty"],[367,23,11154,0],[367,24,11154,0,"exports"],[367,31,11154,0],[368,4,11154,0,"enumerable"],[368,14,11154,0],[369,4,11154,0,"get"],[369,7,11154,0],[369,18,11154,0,"get"],[369,19,11154,0],[370,6,11154,0],[370,13,11154,1478,"sendSignInLinkToEmail"],[370,34,11154,1499],[371,4,11154,1499],[372,2,11154,1499],[373,2,11154,0,"Object"],[373,8,11154,0],[373,9,11154,0,"defineProperty"],[373,23,11154,0],[373,24,11154,0,"exports"],[373,31,11154,0],[374,4,11154,0,"enumerable"],[374,14,11154,0],[375,4,11154,0,"get"],[375,7,11154,0],[375,18,11154,0,"get"],[375,19,11154,0],[376,6,11154,0],[376,13,11154,1507,"isSignInWithEmailLink"],[376,34,11154,1528],[377,4,11154,1528],[378,2,11154,1528],[379,2,11154,0,"Object"],[379,8,11154,0],[379,9,11154,0,"defineProperty"],[379,23,11154,0],[379,24,11154,0,"exports"],[379,31,11154,0],[380,4,11154,0,"enumerable"],[380,14,11154,0],[381,4,11154,0,"get"],[381,7,11154,0],[381,18,11154,0,"get"],[381,19,11154,0],[382,6,11154,0],[382,13,11154,1536,"signInWithEmailLink"],[382,32,11154,1555],[383,4,11154,1555],[384,2,11154,1555],[385,2,11154,0,"Object"],[385,8,11154,0],[385,9,11154,0,"defineProperty"],[385,23,11154,0],[385,24,11154,0,"exports"],[385,31,11154,0],[386,4,11154,0,"enumerable"],[386,14,11154,0],[387,4,11154,0,"get"],[387,7,11154,0],[387,18,11154,0,"get"],[387,19,11154,0],[388,6,11154,0],[388,13,11154,1563,"fetchSignInMethodsForEmail"],[388,39,11154,1589],[389,4,11154,1589],[390,2,11154,1589],[391,2,11154,0,"Object"],[391,8,11154,0],[391,9,11154,0,"defineProperty"],[391,23,11154,0],[391,24,11154,0,"exports"],[391,31,11154,0],[392,4,11154,0,"enumerable"],[392,14,11154,0],[393,4,11154,0,"get"],[393,7,11154,0],[393,18,11154,0,"get"],[393,19,11154,0],[394,6,11154,0],[394,13,11154,1597,"sendEmailVerification"],[394,34,11154,1618],[395,4,11154,1618],[396,2,11154,1618],[397,2,11154,0,"Object"],[397,8,11154,0],[397,9,11154,0,"defineProperty"],[397,23,11154,0],[397,24,11154,0,"exports"],[397,31,11154,0],[398,4,11154,0,"enumerable"],[398,14,11154,0],[399,4,11154,0,"get"],[399,7,11154,0],[399,18,11154,0,"get"],[399,19,11154,0],[400,6,11154,0],[400,13,11154,1626,"verifyBeforeUpdateEmail"],[400,36,11154,1649],[401,4,11154,1649],[402,2,11154,1649],[403,2,11154,0,"Object"],[403,8,11154,0],[403,9,11154,0,"defineProperty"],[403,23,11154,0],[403,24,11154,0,"exports"],[403,31,11154,0],[404,4,11154,0,"enumerable"],[404,14,11154,0],[405,4,11154,0,"get"],[405,7,11154,0],[405,18,11154,0,"get"],[405,19,11154,0],[406,6,11154,0],[406,13,11154,1657,"ActionCodeURL"],[406,26,11154,1670],[407,4,11154,1670],[408,2,11154,1670],[409,2,11154,0,"Object"],[409,8,11154,0],[409,9,11154,0,"defineProperty"],[409,23,11154,0],[409,24,11154,0,"exports"],[409,31,11154,0],[410,4,11154,0,"enumerable"],[410,14,11154,0],[411,4,11154,0,"get"],[411,7,11154,0],[411,18,11154,0,"get"],[411,19,11154,0],[412,6,11154,0],[412,13,11154,1678,"parseActionCodeURL"],[412,31,11154,1696],[413,4,11154,1696],[414,2,11154,1696],[415,2,11154,0,"Object"],[415,8,11154,0],[415,9,11154,0,"defineProperty"],[415,23,11154,0],[415,24,11154,0,"exports"],[415,31,11154,0],[416,4,11154,0,"enumerable"],[416,14,11154,0],[417,4,11154,0,"get"],[417,7,11154,0],[417,18,11154,0,"get"],[417,19,11154,0],[418,6,11154,0],[418,13,11154,1704,"updateProfile"],[418,26,11154,1717],[419,4,11154,1717],[420,2,11154,1717],[421,2,11154,0,"Object"],[421,8,11154,0],[421,9,11154,0,"defineProperty"],[421,23,11154,0],[421,24,11154,0,"exports"],[421,31,11154,0],[422,4,11154,0,"enumerable"],[422,14,11154,0],[423,4,11154,0,"get"],[423,7,11154,0],[423,18,11154,0,"get"],[423,19,11154,0],[424,6,11154,0],[424,13,11154,1725,"updateEmail"],[424,24,11154,1736],[425,4,11154,1736],[426,2,11154,1736],[427,2,11154,0,"Object"],[427,8,11154,0],[427,9,11154,0,"defineProperty"],[427,23,11154,0],[427,24,11154,0,"exports"],[427,31,11154,0],[428,4,11154,0,"enumerable"],[428,14,11154,0],[429,4,11154,0,"get"],[429,7,11154,0],[429,18,11154,0,"get"],[429,19,11154,0],[430,6,11154,0],[430,13,11154,1744,"updatePassword"],[430,27,11154,1758],[431,4,11154,1758],[432,2,11154,1758],[433,2,11154,0,"Object"],[433,8,11154,0],[433,9,11154,0,"defineProperty"],[433,23,11154,0],[433,24,11154,0,"exports"],[433,31,11154,0],[434,4,11154,0,"enumerable"],[434,14,11154,0],[435,4,11154,0,"get"],[435,7,11154,0],[435,18,11154,0,"get"],[435,19,11154,0],[436,6,11154,0],[436,13,11154,1766,"getIdToken"],[436,23,11154,1776],[437,4,11154,1776],[438,2,11154,1776],[439,2,11154,0,"Object"],[439,8,11154,0],[439,9,11154,0,"defineProperty"],[439,23,11154,0],[439,24,11154,0,"exports"],[439,31,11154,0],[440,4,11154,0,"enumerable"],[440,14,11154,0],[441,4,11154,0,"get"],[441,7,11154,0],[441,18,11154,0,"get"],[441,19,11154,0],[442,6,11154,0],[442,13,11154,1784,"getIdTokenResult"],[442,29,11154,1800],[443,4,11154,1800],[444,2,11154,1800],[445,2,11154,0,"Object"],[445,8,11154,0],[445,9,11154,0,"defineProperty"],[445,23,11154,0],[445,24,11154,0,"exports"],[445,31,11154,0],[446,4,11154,0,"enumerable"],[446,14,11154,0],[447,4,11154,0,"get"],[447,7,11154,0],[447,18,11154,0,"get"],[447,19,11154,0],[448,6,11154,0],[448,13,11154,1808,"unlink"],[448,19,11154,1814],[449,4,11154,1814],[450,2,11154,1814],[451,2,11154,0,"Object"],[451,8,11154,0],[451,9,11154,0,"defineProperty"],[451,23,11154,0],[451,24,11154,0,"exports"],[451,31,11154,0],[452,4,11154,0,"enumerable"],[452,14,11154,0],[453,4,11154,0,"get"],[453,7,11154,0],[453,18,11154,0,"get"],[453,19,11154,0],[454,6,11154,0],[454,13,11154,1822,"getAdditionalUserInfo"],[454,34,11154,1843],[455,4,11154,1843],[456,2,11154,1843],[457,2,11154,0,"Object"],[457,8,11154,0],[457,9,11154,0,"defineProperty"],[457,23,11154,0],[457,24,11154,0,"exports"],[457,31,11154,0],[458,4,11154,0,"enumerable"],[458,14,11154,0],[459,4,11154,0,"get"],[459,7,11154,0],[459,18,11154,0,"get"],[459,19,11154,0],[460,6,11154,0],[460,13,11154,1851,"reload"],[460,19,11154,1857],[461,4,11154,1857],[462,2,11154,1857],[463,2,11154,0,"Object"],[463,8,11154,0],[463,9,11154,0,"defineProperty"],[463,23,11154,0],[463,24,11154,0,"exports"],[463,31,11154,0],[464,4,11154,0,"enumerable"],[464,14,11154,0],[465,4,11154,0,"get"],[465,7,11154,0],[465,18,11154,0,"get"],[465,19,11154,0],[466,6,11154,0],[466,13,11154,1865,"getMultiFactorResolver"],[466,35,11154,1887],[467,4,11154,1887],[468,2,11154,1887],[469,2,11154,0,"Object"],[469,8,11154,0],[469,9,11154,0,"defineProperty"],[469,23,11154,0],[469,24,11154,0,"exports"],[469,31,11154,0],[470,4,11154,0,"enumerable"],[470,14,11154,0],[471,4,11154,0,"get"],[471,7,11154,0],[471,18,11154,0,"get"],[471,19,11154,0],[472,6,11154,0],[472,13,11154,1895,"multiFactor"],[472,24,11154,1906],[473,4,11154,1906],[474,2,11154,1906],[475,2,11154,0,"Object"],[475,8,11154,0],[475,9,11154,0,"defineProperty"],[475,23,11154,0],[475,24,11154,0,"exports"],[475,31,11154,0],[476,4,11154,0,"enumerable"],[476,14,11154,0],[477,4,11154,0,"get"],[477,7,11154,0],[477,18,11154,0,"get"],[477,19,11154,0],[478,6,11154,0],[478,13,11154,1914,"debugAssert"],[478,24,11154,1925],[479,4,11154,1925],[480,2,11154,1925],[481,2,11154,0,"Object"],[481,8,11154,0],[481,9,11154,0,"defineProperty"],[481,23,11154,0],[481,24,11154,0,"exports"],[481,31,11154,0],[482,4,11154,0,"enumerable"],[482,14,11154,0],[483,4,11154,0,"get"],[483,7,11154,0],[483,18,11154,0,"get"],[483,19,11154,0],[484,6,11154,0],[484,13,11154,1933,"_isIOS"],[484,19,11154,1939],[485,4,11154,1939],[486,2,11154,1939],[487,2,11154,0,"Object"],[487,8,11154,0],[487,9,11154,0,"defineProperty"],[487,23,11154,0],[487,24,11154,0,"exports"],[487,31,11154,0],[488,4,11154,0,"enumerable"],[488,14,11154,0],[489,4,11154,0,"get"],[489,7,11154,0],[489,18,11154,0,"get"],[489,19,11154,0],[490,6,11154,0],[490,13,11154,1947,"_isAndroid"],[490,23,11154,1957],[491,4,11154,1957],[492,2,11154,1957],[493,2,11154,0,"Object"],[493,8,11154,0],[493,9,11154,0,"defineProperty"],[493,23,11154,0],[493,24,11154,0,"exports"],[493,31,11154,0],[494,4,11154,0,"enumerable"],[494,14,11154,0],[495,4,11154,0,"get"],[495,7,11154,0],[495,18,11154,0,"get"],[495,19,11154,0],[496,6,11154,0],[496,13,11154,1965,"_fail"],[496,18,11154,1970],[497,4,11154,1970],[498,2,11154,1970],[499,2,11154,0,"Object"],[499,8,11154,0],[499,9,11154,0,"defineProperty"],[499,23,11154,0],[499,24,11154,0,"exports"],[499,31,11154,0],[500,4,11154,0,"enumerable"],[500,14,11154,0],[501,4,11154,0,"get"],[501,7,11154,0],[501,18,11154,0,"get"],[501,19,11154,0],[502,6,11154,0],[502,13,11154,1978,"_getRedirectUrl"],[502,28,11154,1993],[503,4,11154,1993],[504,2,11154,1993],[505,2,11154,0,"Object"],[505,8,11154,0],[505,9,11154,0,"defineProperty"],[505,23,11154,0],[505,24,11154,0,"exports"],[505,31,11154,0],[506,4,11154,0,"enumerable"],[506,14,11154,0],[507,4,11154,0,"get"],[507,7,11154,0],[507,18,11154,0,"get"],[507,19,11154,0],[508,6,11154,0],[508,13,11154,2001,"browserLocalPersistence"],[508,36,11154,2024],[509,4,11154,2024],[510,2,11154,2024],[511,2,11154,0,"Object"],[511,8,11154,0],[511,9,11154,0,"defineProperty"],[511,23,11154,0],[511,24,11154,0,"exports"],[511,31,11154,0],[512,4,11154,0,"enumerable"],[512,14,11154,0],[513,4,11154,0,"get"],[513,7,11154,0],[513,18,11154,0,"get"],[513,19,11154,0],[514,6,11154,0],[514,13,11154,2031,"browserSessionPersistence"],[514,38,11154,2056],[515,4,11154,2056],[516,2,11154,2056],[517,2,11154,0,"Object"],[517,8,11154,0],[517,9,11154,0,"defineProperty"],[517,23,11154,0],[517,24,11154,0,"exports"],[517,31,11154,0],[518,4,11154,0,"enumerable"],[518,14,11154,0],[519,4,11154,0,"get"],[519,7,11154,0],[519,18,11154,0,"get"],[519,19,11154,0],[520,6,11154,0],[520,13,11154,2063,"signInWithPopup"],[520,28,11154,2078],[521,4,11154,2078],[522,2,11154,2078],[523,2,11154,0,"Object"],[523,8,11154,0],[523,9,11154,0,"defineProperty"],[523,23,11154,0],[523,24,11154,0,"exports"],[523,31,11154,0],[524,4,11154,0,"enumerable"],[524,14,11154,0],[525,4,11154,0,"get"],[525,7,11154,0],[525,18,11154,0,"get"],[525,19,11154,0],[526,6,11154,0],[526,13,11154,2085,"linkWithPopup"],[526,26,11154,2098],[527,4,11154,2098],[528,2,11154,2098],[529,2,11154,0,"Object"],[529,8,11154,0],[529,9,11154,0,"defineProperty"],[529,23,11154,0],[529,24,11154,0,"exports"],[529,31,11154,0],[530,4,11154,0,"enumerable"],[530,14,11154,0],[531,4,11154,0,"get"],[531,7,11154,0],[531,18,11154,0,"get"],[531,19,11154,0],[532,6,11154,0],[532,13,11154,2105,"reauthenticateWithPopup"],[532,36,11154,2128],[533,4,11154,2128],[534,2,11154,2128],[535,2,11154,0,"Object"],[535,8,11154,0],[535,9,11154,0,"defineProperty"],[535,23,11154,0],[535,24,11154,0,"exports"],[535,31,11154,0],[536,4,11154,0,"enumerable"],[536,14,11154,0],[537,4,11154,0,"get"],[537,7,11154,0],[537,18,11154,0,"get"],[537,19,11154,0],[538,6,11154,0],[538,13,11154,2135,"signInWithRedirect"],[538,31,11154,2153],[539,4,11154,2153],[540,2,11154,2153],[541,2,11154,0,"Object"],[541,8,11154,0],[541,9,11154,0,"defineProperty"],[541,23,11154,0],[541,24,11154,0,"exports"],[541,31,11154,0],[542,4,11154,0,"enumerable"],[542,14,11154,0],[543,4,11154,0,"get"],[543,7,11154,0],[543,18,11154,0,"get"],[543,19,11154,0],[544,6,11154,0],[544,13,11154,2160,"linkWithRedirect"],[544,29,11154,2176],[545,4,11154,2176],[546,2,11154,2176],[547,2,11154,0,"Object"],[547,8,11154,0],[547,9,11154,0,"defineProperty"],[547,23,11154,0],[547,24,11154,0,"exports"],[547,31,11154,0],[548,4,11154,0,"enumerable"],[548,14,11154,0],[549,4,11154,0,"get"],[549,7,11154,0],[549,18,11154,0,"get"],[549,19,11154,0],[550,6,11154,0],[550,13,11154,2183,"indexedDBLocalPersistence"],[550,38,11154,2208],[551,4,11154,2208],[552,2,11154,2208],[553,2,11154,0,"Object"],[553,8,11154,0],[553,9,11154,0,"defineProperty"],[553,23,11154,0],[553,24,11154,0,"exports"],[553,31,11154,0],[554,4,11154,0,"enumerable"],[554,14,11154,0],[555,4,11154,0,"get"],[555,7,11154,0],[555,18,11154,0,"get"],[555,19,11154,0],[556,6,11154,0],[556,13,11154,2215,"reauthenticateWithRedirect"],[556,39,11154,2241],[557,4,11154,2241],[558,2,11154,2241],[559,2,11154,0,"Object"],[559,8,11154,0],[559,9,11154,0,"defineProperty"],[559,23,11154,0],[559,24,11154,0,"exports"],[559,31,11154,0],[560,4,11154,0,"enumerable"],[560,14,11154,0],[561,4,11154,0,"get"],[561,7,11154,0],[561,18,11154,0,"get"],[561,19,11154,0],[562,6,11154,0],[562,13,11154,2248,"getRedirectResult"],[562,30,11154,2265],[563,4,11154,2265],[564,2,11154,2265],[565,2,11154,0,"Object"],[565,8,11154,0],[565,9,11154,0,"defineProperty"],[565,23,11154,0],[565,24,11154,0,"exports"],[565,31,11154,0],[566,4,11154,0,"enumerable"],[566,14,11154,0],[567,4,11154,0,"get"],[567,7,11154,0],[567,18,11154,0,"get"],[567,19,11154,0],[568,6,11154,0],[568,13,11154,2272,"linkWithPhoneNumber"],[568,32,11154,2291],[569,4,11154,2291],[570,2,11154,2291],[571,2,11154,0,"Object"],[571,8,11154,0],[571,9,11154,0,"defineProperty"],[571,23,11154,0],[571,24,11154,0,"exports"],[571,31,11154,0],[572,4,11154,0,"enumerable"],[572,14,11154,0],[573,4,11154,0,"get"],[573,7,11154,0],[573,18,11154,0,"get"],[573,19,11154,0],[574,6,11154,0],[574,13,11154,2298,"browserPopupRedirectResolver"],[574,41,11154,2326],[575,4,11154,2326],[576,2,11154,2326],[577,2,11154,0,"Object"],[577,8,11154,0],[577,9,11154,0,"defineProperty"],[577,23,11154,0],[577,24,11154,0,"exports"],[577,31,11154,0],[578,4,11154,0,"enumerable"],[578,14,11154,0],[579,4,11154,0,"get"],[579,7,11154,0],[579,18,11154,0,"get"],[579,19,11154,0],[580,6,11154,0],[580,13,11154,2333,"PhoneMultiFactorGenerator"],[580,38,11154,2358],[581,4,11154,2358],[582,2,11154,2358],[583,2,11154,0,"Object"],[583,8,11154,0],[583,9,11154,0,"defineProperty"],[583,23,11154,0],[583,24,11154,0,"exports"],[583,31,11154,0],[584,4,11154,0,"enumerable"],[584,14,11154,0],[585,4,11154,0,"get"],[585,7,11154,0],[585,18,11154,0,"get"],[585,19,11154,0],[586,6,11154,0],[586,13,11154,2365,"TotpSecret"],[586,23,11154,2375],[587,4,11154,2375],[588,2,11154,2375],[589,2,11154,0,"Object"],[589,8,11154,0],[589,9,11154,0,"defineProperty"],[589,23,11154,0],[589,24,11154,0,"exports"],[589,31,11154,0],[590,4,11154,0,"enumerable"],[590,14,11154,0],[591,4,11154,0,"get"],[591,7,11154,0],[591,18,11154,0,"get"],[591,19,11154,0],[592,6,11154,0],[592,13,11154,2382,"getAuth"],[592,20,11154,2389],[593,4,11154,2389],[594,2,11154,2389],[595,2,11154,0,"Object"],[595,8,11154,0],[595,9,11154,0,"defineProperty"],[595,23,11154,0],[595,24,11154,0,"exports"],[595,31,11154,0],[596,4,11154,0,"enumerable"],[596,14,11154,0],[597,4,11154,0,"get"],[597,7,11154,0],[597,18,11154,0,"get"],[597,19,11154,0],[598,6,11154,0],[598,13,11154,2396,"ProviderId"],[598,23,11154,2406],[599,4,11154,2406],[600,2,11154,2406],[601,2,11154,0,"Object"],[601,8,11154,0],[601,9,11154,0,"defineProperty"],[601,23,11154,0],[601,24,11154,0,"exports"],[601,31,11154,0],[602,4,11154,0,"enumerable"],[602,14,11154,0],[603,4,11154,0,"get"],[603,7,11154,0],[603,18,11154,0,"get"],[603,19,11154,0],[604,6,11154,0],[604,13,11154,2413,"reauthenticateWithPhoneNumber"],[604,42,11154,2442],[605,4,11154,2442],[606,2,11154,2442],[607,2,11154,0,"Object"],[607,8,11154,0],[607,9,11154,0,"defineProperty"],[607,23,11154,0],[607,24,11154,0,"exports"],[607,31,11154,0],[608,4,11154,0,"enumerable"],[608,14,11154,0],[609,4,11154,0,"get"],[609,7,11154,0],[609,18,11154,0,"get"],[609,19,11154,0],[610,6,11154,0],[610,13,11154,2449,"signInWithPhoneNumber"],[610,34,11154,2470],[611,4,11154,2470],[612,2,11154,2470],[613,2,11154,0,"Object"],[613,8,11154,0],[613,9,11154,0,"defineProperty"],[613,23,11154,0],[613,24,11154,0,"exports"],[613,31,11154,0],[614,4,11154,0,"enumerable"],[614,14,11154,0],[615,4,11154,0,"get"],[615,7,11154,0],[615,18,11154,0,"get"],[615,19,11154,0],[616,6,11154,0],[616,13,11154,2477,"setPersistence"],[616,27,11154,2491],[617,4,11154,2491],[618,2,11154,2491],[619,2,11154,0,"Object"],[619,8,11154,0],[619,9,11154,0,"defineProperty"],[619,23,11154,0],[619,24,11154,0,"exports"],[619,31,11154,0],[620,4,11154,0,"enumerable"],[620,14,11154,0],[621,4,11154,0,"get"],[621,7,11154,0],[621,18,11154,0,"get"],[621,19,11154,0],[622,6,11154,0],[622,13,11154,2498,"updatePhoneNumber"],[622,30,11154,2515],[623,4,11154,2515],[624,2,11154,2515],[625,2,11154,0,"Object"],[625,8,11154,0],[625,9,11154,0,"defineProperty"],[625,23,11154,0],[625,24,11154,0,"exports"],[625,31,11154,0],[626,4,11154,0,"enumerable"],[626,14,11154,0],[627,4,11154,0,"get"],[627,7,11154,0],[627,18,11154,0,"get"],[627,19,11154,0],[628,6,11154,0],[628,13,11154,2522,"initializeRecaptchaConfig"],[628,38,11154,2547],[629,4,11154,2547],[630,2,11154,2547],[631,2,11154,0,"Object"],[631,8,11154,0],[631,9,11154,0,"defineProperty"],[631,23,11154,0],[631,24,11154,0,"exports"],[631,31,11154,0],[632,4,11154,0,"enumerable"],[632,14,11154,0],[633,4,11154,0,"get"],[633,7,11154,0],[633,18,11154,0,"get"],[633,19,11154,0],[634,6,11154,0],[634,13,11154,2554,"validatePassword"],[634,29,11154,2570],[635,4,11154,2570],[636,2,11154,2570],[637,2,11154,0,"Object"],[637,8,11154,0],[637,9,11154,0,"defineProperty"],[637,23,11154,0],[637,24,11154,0,"exports"],[637,31,11154,0],[638,4,11154,0,"enumerable"],[638,14,11154,0],[639,4,11154,0,"get"],[639,7,11154,0],[639,18,11154,0,"get"],[639,19,11154,0],[640,6,11154,0],[640,13,11154,2577,"onIdTokenChanged"],[640,29,11154,2593],[641,4,11154,2593],[642,2,11154,2593],[643,2,11154,0,"Object"],[643,8,11154,0],[643,9,11154,0,"defineProperty"],[643,23,11154,0],[643,24,11154,0,"exports"],[643,31,11154,0],[644,4,11154,0,"enumerable"],[644,14,11154,0],[645,4,11154,0,"get"],[645,7,11154,0],[645,18,11154,0,"get"],[645,19,11154,0],[646,6,11154,0],[646,13,11154,2600,"beforeAuthStateChanged"],[646,35,11154,2622],[647,4,11154,2622],[648,2,11154,2622],[649,2,11154,0,"Object"],[649,8,11154,0],[649,9,11154,0,"defineProperty"],[649,23,11154,0],[649,24,11154,0,"exports"],[649,31,11154,0],[650,4,11154,0,"enumerable"],[650,14,11154,0],[651,4,11154,0,"get"],[651,7,11154,0],[651,18,11154,0,"get"],[651,19,11154,0],[652,6,11154,0],[652,13,11154,2629,"onAuthStateChanged"],[652,31,11154,2647],[653,4,11154,2647],[654,2,11154,2647],[655,2,1,0],[655,6,1,0,"_firebaseApp"],[655,18,1,0],[655,21,1,0,"require"],[655,28,1,0],[655,29,1,0,"_dependencyMap"],[655,43,1,0],[656,2,2,0],[656,6,2,0,"_firebaseUtil"],[656,19,2,0],[656,22,2,0,"require"],[656,29,2,0],[656,30,2,0,"_dependencyMap"],[656,44,2,0],[657,2,3,0],[657,6,3,0,"_firebaseLogger"],[657,21,3,0],[657,24,3,0,"require"],[657,31,3,0],[657,32,3,0,"_dependencyMap"],[657,46,3,0],[658,2,4,0],[658,6,4,0,"_firebaseComponent"],[658,24,4,0],[658,27,4,0,"require"],[658,34,4,0],[658,35,4,0,"_dependencyMap"],[658,49,4,0],[659,2,6,0],[660,0,7,0],[661,0,8,0],[662,0,9,0],[663,0,10,0],[664,0,11,0],[665,0,12,0],[666,0,13,0],[667,0,14,0],[668,0,15,0],[669,0,16,0],[670,0,17,0],[671,0,18,0],[672,0,19,0],[673,0,20,0],[674,0,21,0],[675,2,22,0],[676,0,23,0],[677,0,24,0],[678,0,25,0],[679,0,26,0],[680,2,27,0],[680,8,27,6,"FactorId"],[680,16,27,14],[680,19,27,17],[681,4,28,4],[682,4,29,4,"PHONE"],[682,9,29,9],[682,11,29,11],[682,18,29,18],[683,4,30,4,"TOTP"],[683,8,30,8],[683,10,30,10],[684,2,31,0],[684,3,31,1],[685,2,32,0],[686,0,33,0],[687,0,34,0],[688,0,35,0],[689,0,36,0],[690,2,37,0],[690,8,37,6,"ProviderId"],[690,18,37,16],[690,21,37,19],[691,4,38,4],[692,4,39,4,"FACEBOOK"],[692,12,39,12],[692,14,39,14],[692,28,39,28],[693,4,40,4],[694,4,41,4,"GITHUB"],[694,10,41,10],[694,12,41,12],[694,24,41,24],[695,4,42,4],[696,4,43,4,"GOOGLE"],[696,10,43,10],[696,12,43,12],[696,24,43,24],[697,4,44,4],[698,4,45,4,"PASSWORD"],[698,12,45,12],[698,14,45,14],[698,24,45,24],[699,4,46,4],[700,4,47,4,"PHONE"],[700,9,47,9],[700,11,47,11],[700,18,47,18],[701,4,48,4],[702,4,49,4,"TWITTER"],[702,11,49,11],[702,13,49,13],[703,2,50,0],[703,3,50,1],[704,2,51,0],[705,0,52,0],[706,0,53,0],[707,0,54,0],[708,0,55,0],[709,2,56,0],[709,8,56,6,"SignInMethod"],[709,20,56,18],[709,23,56,21],[710,4,57,4],[711,4,58,4,"EMAIL_LINK"],[711,14,58,14],[711,16,58,16],[711,27,58,27],[712,4,59,4],[713,4,60,4,"EMAIL_PASSWORD"],[713,18,60,18],[713,20,60,20],[713,30,60,30],[714,4,61,4],[715,4,62,4,"FACEBOOK"],[715,12,62,12],[715,14,62,14],[715,28,62,28],[716,4,63,4],[717,4,64,4,"GITHUB"],[717,10,64,10],[717,12,64,12],[717,24,64,24],[718,4,65,4],[719,4,66,4,"GOOGLE"],[719,10,66,10],[719,12,66,12],[719,24,66,24],[720,4,67,4],[721,4,68,4,"PHONE"],[721,9,68,9],[721,11,68,11],[721,18,68,18],[722,4,69,4],[723,4,70,4,"TWITTER"],[723,11,70,11],[723,13,70,13],[724,2,71,0],[724,3,71,1],[725,2,72,0],[726,0,73,0],[727,0,74,0],[728,0,75,0],[729,0,76,0],[730,2,77,0],[730,8,77,6,"OperationType"],[730,21,77,19],[730,24,77,22],[731,4,78,4],[732,4,79,4,"LINK"],[732,8,79,8],[732,10,79,10],[732,16,79,16],[733,4,80,4],[734,4,81,4,"REAUTHENTICATE"],[734,18,81,18],[734,20,81,20],[734,36,81,36],[735,4,82,4],[736,4,83,4,"SIGN_IN"],[736,11,83,11],[736,13,83,13],[737,2,84,0],[737,3,84,1],[738,2,85,0],[739,0,86,0],[740,0,87,0],[741,0,88,0],[742,0,89,0],[743,2,90,0],[743,8,90,6,"ActionCodeOperation"],[743,27,90,25],[743,30,90,28],[744,4,91,4],[745,4,92,4,"EMAIL_SIGNIN"],[745,16,92,16],[745,18,92,18],[745,32,92,32],[746,4,93,4],[747,4,94,4,"PASSWORD_RESET"],[747,18,94,18],[747,20,94,20],[747,36,94,36],[748,4,95,4],[749,4,96,4,"RECOVER_EMAIL"],[749,17,96,17],[749,19,96,19],[749,34,96,34],[750,4,97,4],[751,4,98,4,"REVERT_SECOND_FACTOR_ADDITION"],[751,33,98,33],[751,35,98,35],[751,66,98,66],[752,4,99,4],[753,4,100,4,"VERIFY_AND_CHANGE_EMAIL"],[753,27,100,27],[753,29,100,29],[753,54,100,54],[754,4,101,4],[755,4,102,4,"VERIFY_EMAIL"],[755,16,102,16],[755,18,102,18],[756,2,103,0],[756,3,103,1],[758,2,105,0],[759,0,106,0],[760,0,107,0],[761,0,108,0],[762,0,109,0],[763,0,110,0],[764,0,111,0],[765,0,112,0],[766,0,113,0],[767,0,114,0],[768,0,115,0],[769,0,116,0],[770,0,117,0],[771,0,118,0],[772,0,119,0],[773,0,120,0],[774,2,121,0],[774,11,121,9,"_debugErrorMap"],[774,25,121,23,"_debugErrorMap"],[774,26,121,23],[774,28,121,26],[775,4,122,4],[775,11,122,11],[776,6,123,8],[776,7,123,9],[776,35,123,37],[776,36,123,38],[776,79,123,81],[776,133,123,135],[777,6,124,8],[777,7,124,9],[777,23,124,25],[777,24,124,26],[777,61,124,63],[777,63,124,65],[778,6,125,8],[778,7,125,9],[778,27,125,29],[778,28,125,30],[778,69,125,71],[778,132,125,134],[778,135,126,12],[778,206,126,83],[778,209,127,12],[778,267,127,70],[779,6,128,8],[779,7,128,9],[779,26,128,28],[779,27,128,29],[779,67,128,69],[779,135,128,137],[779,138,129,12],[779,208,129,82],[779,211,130,12],[779,225,130,26],[780,6,131,8],[780,7,131,9],[780,29,131,31],[780,30,131,32],[780,73,131,75],[780,141,131,143],[780,144,132,12],[780,216,132,84],[780,219,133,12],[780,244,133,37],[781,6,134,8],[781,7,134,9],[781,21,134,23],[781,22,134,24],[781,57,134,59],[781,129,134,131],[781,132,135,12],[781,140,135,20],[782,6,136,8],[782,7,136,9],[782,26,136,28],[782,27,136,29],[782,67,136,69],[782,100,136,102],[783,6,137,8],[783,7,137,9],[783,25,137,27],[783,26,137,28],[783,65,137,67],[783,97,137,99],[784,6,138,8],[784,7,138,9],[784,34,138,36],[784,35,138,37],[784,83,138,85],[784,153,138,155],[785,6,139,8],[785,7,139,9],[785,30,139,32],[785,31,139,33],[785,73,139,75],[785,128,139,130],[786,6,140,8],[786,7,140,9],[786,30,140,32],[786,31,140,33],[786,84,140,86],[786,157,140,159],[786,160,141,12],[786,197,141,49],[787,6,142,8],[787,7,142,9],[787,46,142,48],[787,47,142,49],[787,100,142,102],[787,180,142,182],[787,183,143,12],[787,258,143,87],[787,261,144,12],[787,295,144,46],[788,6,145,8],[788,7,145,9],[788,35,145,37],[788,36,145,38],[788,85,145,87],[788,168,145,170],[788,171,146,12],[788,184,146,25],[789,6,147,8],[789,7,147,9],[789,40,147,42],[789,41,147,43],[789,95,147,97],[789,150,147,152],[790,6,148,8],[790,7,148,9],[790,29,148,31],[790,30,148,32],[790,65,148,67],[790,122,148,124],[791,6,149,8],[791,7,149,9],[791,31,149,33],[791,32,149,34],[791,77,149,79],[791,148,149,150],[791,151,150,12],[791,210,150,71],[791,213,151,12],[791,246,151,45],[792,6,152,8],[792,7,152,9],[792,28,152,30],[792,29,152,31],[792,68,152,70],[792,98,152,100],[793,6,153,8],[793,7,153,9],[793,32,153,34],[793,33,153,35],[793,77,153,79],[793,159,153,161],[794,6,154,8],[794,7,154,9],[794,23,154,25],[794,24,154,26],[794,61,154,63],[794,98,154,100],[795,6,155,8],[795,7,155,9],[795,31,155,33],[795,32,155,34],[795,77,155,79],[795,151,155,153],[795,154,156,12],[795,215,156,73],[796,6,157,8],[796,7,157,9],[796,23,157,25],[796,24,157,26],[796,61,157,63],[796,131,157,133],[797,6,158,8],[797,7,158,9],[797,27,158,29],[797,28,158,30],[797,63,158,65],[797,134,158,136],[797,137,159,12],[797,208,159,83],[797,211,160,12],[797,254,160,55],[798,6,161,8],[798,7,161,9],[798,27,161,29],[798,28,161,30],[798,69,161,71],[798,106,161,108],[799,6,162,8],[799,7,162,9],[799,34,162,36],[799,35,162,37],[799,70,162,72],[799,142,162,144],[799,145,163,12],[799,219,163,86],[799,222,164,12],[799,263,164,53],[800,6,165,8],[800,7,165,9],[800,29,165,31],[800,30,165,32],[800,73,165,75],[800,127,165,129],[801,6,166,8],[801,7,166,9],[801,38,166,40],[801,39,166,41],[801,91,166,93],[801,166,166,168],[801,169,167,12],[801,229,167,72],[801,232,168,12],[801,293,168,73],[801,296,169,12],[801,329,169,45],[802,6,170,8],[802,7,170,9],[802,29,170,31],[802,30,170,32],[802,73,170,75],[802,144,170,146],[803,6,171,8],[803,7,171,9],[803,36,171,38],[803,37,171,39],[803,87,171,89],[803,178,171,180],[804,6,172,8],[804,7,172,9],[804,22,172,24],[804,23,172,25],[804,59,172,61],[804,98,172,100],[805,6,173,8],[805,7,173,9],[805,32,173,34],[805,33,173,35],[805,79,173,81],[805,147,173,149],[806,6,174,8],[806,7,174,9],[806,24,174,26],[806,25,174,27],[806,63,174,65],[806,132,174,134],[807,6,175,8],[807,7,175,9],[807,26,175,28],[807,27,175,29],[807,67,175,69],[807,116,175,118],[808,6,176,8],[808,7,176,9],[808,27,176,29],[808,28,176,30],[808,69,176,71],[808,139,176,141],[809,6,177,8],[809,7,177,9],[809,32,177,34],[809,33,177,35],[809,79,177,81],[809,173,177,175],[809,176,178,12],[809,258,178,94],[810,6,179,8],[810,7,179,9],[810,37,179,39],[810,38,179,40],[810,80,179,82],[810,160,179,162],[811,6,180,8],[811,7,180,9],[811,31,180,33],[811,32,180,34],[811,77,180,79],[811,149,180,151],[811,152,181,12],[811,184,181,44],[812,6,182,8],[812,7,182,9],[812,32,182,34],[812,33,182,35],[812,79,182,81],[812,150,182,152],[812,153,183,12],[812,173,183,32],[813,6,184,8],[813,7,184,9],[813,28,184,30],[813,29,184,31],[813,66,184,68],[813,137,184,139],[813,140,185,12],[813,213,185,85],[814,6,186,8],[814,7,186,9],[814,28,186,30],[814,29,186,31],[814,68,186,70],[814,140,186,142],[814,143,187,12],[814,179,187,48],[815,6,188,8],[815,7,188,9],[815,23,188,25],[815,24,188,26],[815,63,188,65],[815,126,188,128],[816,6,189,8],[816,7,189,9],[816,33,189,35],[816,34,189,36],[816,76,189,78],[816,159,189,161],[817,6,190,8],[817,7,190,9],[817,29,190,31],[817,30,190,32],[817,73,190,75],[817,146,190,148],[817,149,191,12],[817,220,191,83],[817,223,192,12],[817,294,192,83],[817,297,193,12],[817,327,193,42],[818,6,194,8],[818,7,194,9],[818,28,194,30],[818,29,194,31],[818,71,194,73],[818,110,194,112],[819,6,195,8],[819,7,195,9],[819,32,195,34],[819,33,195,35],[819,79,195,81],[819,151,195,153],[819,154,196,12],[819,191,196,49],[820,6,197,8],[820,7,197,9],[820,23,197,25],[820,24,197,26],[820,61,197,63],[820,153,197,155],[820,156,198,12],[820,238,198,94],[821,6,199,8],[821,7,199,9],[821,32,199,34],[821,33,199,35],[821,76,199,78],[821,150,199,152],[822,6,200,8],[822,7,200,9],[822,26,200,28],[822,27,200,29],[822,67,200,69],[822,110,200,112],[823,6,201,8],[823,7,201,9],[823,22,201,24],[823,23,201,25],[823,59,201,61],[823,118,201,120],[824,6,202,8],[824,7,202,9],[824,33,202,35],[824,34,202,36],[824,85,202,87],[824,175,202,177],[825,6,203,8],[825,7,203,9],[825,36,203,38],[825,37,203,39],[825,79,203,81],[825,150,203,152],[825,153,204,12],[825,209,204,68],[826,6,205,8],[826,7,205,9],[826,31,205,33],[826,32,205,34],[826,77,205,79],[826,145,205,147],[826,148,206,12],[826,209,206,73],[827,6,207,8],[827,7,207,9],[827,34,207,36],[827,35,207,37],[827,70,207,72],[827,146,207,148],[828,6,208,8],[828,7,208,9],[828,29,208,31],[828,30,208,32],[828,73,208,75],[828,122,208,124],[829,6,209,8],[829,7,209,9],[829,29,209,31],[829,30,209,32],[829,73,209,75],[829,110,209,112],[830,6,210,8],[830,7,210,9],[830,30,210,32],[830,31,210,33],[830,75,210,77],[830,142,210,144],[831,6,211,8],[831,7,211,9],[831,33,211,35],[831,34,211,36],[831,81,211,83],[831,149,211,151],[831,152,212,12],[831,225,212,85],[831,228,213,12],[831,254,213,38],[832,6,214,8],[832,7,214,9],[832,25,214,27],[832,26,214,28],[832,65,214,67],[832,104,214,106],[833,6,215,8],[833,7,215,9],[833,34,215,36],[833,35,215,37],[833,74,215,76],[833,116,215,118],[834,6,216,8],[834,7,216,9],[834,37,216,39],[834,38,216,40],[834,80,216,82],[834,146,216,148],[835,6,217,8],[835,7,217,9],[835,29,217,31],[835,30,217,32],[835,73,217,75],[835,144,217,146],[836,6,218,8],[836,7,218,9],[836,32,218,34],[836,33,218,35],[836,76,218,78],[836,146,218,148],[837,6,219,8],[837,7,219,9],[837,20,219,22],[837,21,219,23],[837,60,219,62],[837,108,219,110],[838,6,220,8],[838,7,220,9],[838,36,220,38],[838,37,220,39],[838,78,220,80],[838,152,220,154],[839,6,221,8],[839,7,221,9],[839,35,221,37],[839,36,221,38],[839,71,221,73],[839,143,221,145],[840,6,222,8],[840,7,222,9],[840,49,222,51],[840,50,222,52],[840,90,222,92],[840,160,222,162],[840,163,223,12],[840,232,223,81],[840,235,224,12],[840,251,224,28],[841,6,225,8],[841,7,225,9],[841,31,225,33],[841,32,225,34],[841,77,225,79],[841,174,225,176],[842,6,226,8],[842,7,226,9],[842,22,226,24],[842,23,226,25],[842,59,226,61],[842,96,226,98],[843,6,227,8],[843,7,227,9],[843,25,227,27],[843,26,227,28],[843,65,227,67],[843,125,227,127],[844,6,228,8],[844,7,228,9],[844,18,228,20],[844,19,228,21],[844,51,228,53],[844,124,228,126],[844,127,229,12],[844,161,229,46],[845,6,230,8],[845,7,230,9],[845,30,230,32],[845,31,230,33],[845,75,230,77],[845,143,230,145],[845,146,231,12],[845,219,231,85],[845,222,232,12],[845,237,232,27],[846,6,233,8],[846,7,233,9],[846,52,233,54],[846,53,233,55],[846,99,233,101],[846,172,233,174],[846,175,234,12],[846,248,234,85],[846,251,235,12],[846,286,235,47],[847,6,236,8],[847,7,236,9],[847,22,236,24],[847,23,236,25],[847,59,236,61],[847,150,236,152],[848,6,237,8],[848,7,237,9],[848,29,237,31],[848,30,237,32],[848,73,237,75],[848,145,237,147],[849,6,238,8],[849,7,238,9],[849,32,238,34],[849,33,238,35],[849,79,238,81],[849,144,238,146],[850,6,239,8],[850,7,239,9],[850,23,239,25],[850,24,239,26],[850,61,239,63],[850,120,239,122],[851,6,240,8],[851,7,240,9],[851,35,240,37],[851,36,240,38],[851,85,240,87],[851,159,240,161],[852,6,241,8],[852,7,241,9],[852,35,241,37],[852,36,241,38],[852,85,241,87],[852,135,241,137],[853,6,242,8],[853,7,242,9],[853,28,242,30],[853,29,242,31],[853,71,242,73],[853,131,242,133],[854,6,243,8],[854,7,243,9],[854,37,243,39],[854,38,243,40],[854,91,243,93],[854,147,243,149],[855,6,244,8],[855,7,244,9],[855,45,244,47],[855,46,244,48],[855,97,244,99],[855,172,244,174],[856,6,245,8],[856,7,245,9],[856,27,245,29],[856,28,245,30],[856,69,245,71],[856,138,245,140],[857,6,246,8],[857,7,246,9],[857,16,246,18],[857,17,246,19],[857,47,246,49],[857,77,246,79],[858,6,247,8],[858,7,247,9],[858,27,247,29],[858,28,247,30],[858,64,247,66],[858,136,247,138],[859,6,248,8],[859,7,248,9],[859,26,248,28],[859,27,248,29],[859,77,248,79],[859,150,248,152],[859,153,249,12],[859,171,249,30],[860,6,250,8],[860,7,250,9],[860,34,250,36],[860,35,250,37],[860,77,250,79],[860,148,250,150],[860,151,251,12],[860,188,251,49],[861,6,252,8],[861,7,252,9],[861,33,252,35],[861,34,252,36],[861,81,252,83],[861,198,252,200],[862,6,253,8],[862,7,253,9],[862,37,253,39],[862,38,253,40],[862,84,253,86],[862,158,253,160],[863,6,254,8],[863,7,254,9],[863,37,254,39],[863,38,254,40],[863,89,254,91],[863,149,254,151],[864,6,255,8],[864,7,255,9],[864,25,255,27],[864,26,255,28],[864,65,255,67],[864,107,255,109],[865,6,256,8],[865,7,256,9],[865,23,256,25],[865,24,256,26],[865,61,256,63],[865,132,256,134],[866,6,257,8],[866,7,257,9],[866,23,257,25],[866,24,257,26],[866,59,257,61],[866,132,257,134],[866,135,258,12],[866,155,258,32],[867,6,259,8],[867,7,259,9],[867,22,259,24],[867,23,259,25],[867,59,259,61],[867,116,259,118],[868,6,260,8],[868,7,260,9],[868,22,260,24],[868,23,260,25],[868,59,260,61],[868,137,260,139],[869,6,261,8],[869,7,261,9],[869,24,261,26],[869,25,261,27],[869,63,261,65],[869,65,261,67],[870,6,262,8],[870,7,262,9],[870,22,262,24],[870,23,262,25],[870,59,262,61],[870,108,262,110],[871,6,263,8],[871,7,263,9],[871,32,263,34],[871,33,263,35],[871,79,263,81],[871,157,263,159],[872,6,264,8],[872,7,264,9],[872,28,264,30],[872,29,264,31],[872,71,264,73],[872,119,264,121],[872,122,265,12],[872,195,265,85],[872,198,266,12],[872,278,266,92],[872,281,267,12],[872,313,267,44],[873,6,268,8],[873,7,268,9],[873,32,268,34],[873,33,268,35],[873,79,268,81],[873,148,268,150],[874,6,269,8],[874,7,269,9],[874,32,269,34],[874,33,269,35],[874,79,269,81],[874,148,269,150],[875,6,270,8],[875,7,270,9],[875,33,270,35],[875,34,270,36],[875,81,270,83],[875,151,270,153],[876,6,271,8],[876,7,271,9],[876,30,271,32],[876,31,271,33],[876,75,271,77],[876,142,271,144],[877,6,272,8],[877,7,272,9],[877,28,272,30],[877,29,272,31],[877,71,272,73],[877,146,272,148],[878,6,273,8],[878,7,273,9],[878,34,273,36],[878,35,273,37],[878,83,273,85],[878,154,273,156],[879,6,274,8],[879,7,274,9],[879,25,274,27],[879,26,274,28],[879,65,274,67],[879,94,274,96],[880,6,275,8],[880,7,275,9],[880,34,275,36],[880,35,275,37],[880,83,275,85],[880,154,275,156],[881,6,276,8],[881,7,276,9],[881,51,276,53],[881,52,276,54],[881,117,276,119],[881,245,276,247],[882,6,277,8],[882,7,277,9],[882,44,277,46],[882,45,277,47],[882,103,277,105],[882,149,277,151],[883,6,278,8],[883,7,278,9],[883,36,278,38],[883,37,278,39],[883,87,278,89],[883,179,278,181],[883,182,279,12],[884,4,280,4],[884,5,280,5],[885,2,281,0],[886,2,282,0],[886,11,282,9,"_prodErrorMap"],[886,24,282,22,"_prodErrorMap"],[886,25,282,22],[886,27,282,25],[887,4,283,4],[888,4,284,4],[889,4,285,4],[890,4,286,4],[890,11,286,11],[891,6,287,8],[891,7,287,9],[891,46,287,48],[891,47,287,49],[891,100,287,102],[891,180,287,182],[891,183,288,12],[891,258,288,87],[891,261,289,12],[892,4,290,4],[892,5,290,5],[893,2,291,0],[894,2,292,0],[895,0,293,0],[896,0,294,0],[897,0,295,0],[898,0,296,0],[899,0,297,0],[900,0,298,0],[901,2,299,0],[901,8,299,6,"debugErrorMap"],[901,21,299,19],[901,24,299,22,"_debugErrorMap"],[901,38,299,36],[902,2,300,0],[903,0,301,0],[904,0,302,0],[905,0,303,0],[906,0,304,0],[907,0,305,0],[908,0,306,0],[909,2,307,0],[909,8,307,6,"prodErrorMap"],[909,20,307,18],[909,23,307,21,"_prodErrorMap"],[909,36,307,34],[910,2,308,0],[910,8,308,6,"_DEFAULT_AUTH_ERROR_FACTORY"],[910,35,308,33],[910,38,308,36],[910,42,308,40,"ErrorFactory"],[910,55,308,52],[910,56,308,52,"ErrorFactory"],[910,68,308,52],[910,69,308,53],[910,75,308,59],[910,77,308,61],[910,87,308,71],[910,89,308,73,"_prodErrorMap"],[910,102,308,86],[910,103,308,87],[910,104,308,88],[910,105,308,89],[911,2,309,0],[912,0,310,0],[913,0,311,0],[914,0,312,0],[915,0,313,0],[916,0,314,0],[917,0,315,0],[918,0,316,0],[919,0,317,0],[920,0,318,0],[921,0,319,0],[922,2,320,0],[922,8,320,6,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[922,50,320,48],[922,53,320,51],[923,4,321,4,"ADMIN_ONLY_OPERATION"],[923,24,321,24],[923,26,321,26],[923,59,321,59],[924,4,322,4,"ARGUMENT_ERROR"],[924,18,322,18],[924,20,322,20],[924,41,322,41],[925,4,323,4,"APP_NOT_AUTHORIZED"],[925,22,323,22],[925,24,323,24],[925,49,323,49],[926,4,324,4,"APP_NOT_INSTALLED"],[926,21,324,21],[926,23,324,23],[926,47,324,47],[927,4,325,4,"CAPTCHA_CHECK_FAILED"],[927,24,325,24],[927,26,325,26],[927,53,325,53],[928,4,326,4,"CODE_EXPIRED"],[928,16,326,16],[928,18,326,18],[928,37,326,37],[929,4,327,4,"CORDOVA_NOT_READY"],[929,21,327,21],[929,23,327,23],[929,47,327,47],[930,4,328,4,"CORS_UNSUPPORTED"],[930,20,328,20],[930,22,328,22],[930,45,328,45],[931,4,329,4,"CREDENTIAL_ALREADY_IN_USE"],[931,29,329,29],[931,31,329,31],[931,63,329,63],[932,4,330,4,"CREDENTIAL_MISMATCH"],[932,23,330,23],[932,25,330,25],[932,53,330,53],[933,4,331,4,"CREDENTIAL_TOO_OLD_LOGIN_AGAIN"],[933,34,331,34],[933,36,331,36],[933,64,331,64],[934,4,332,4,"DEPENDENT_SDK_INIT_BEFORE_AUTH"],[934,34,332,34],[934,36,332,36],[934,80,332,80],[935,4,333,4,"DYNAMIC_LINK_NOT_ACTIVATED"],[935,30,333,30],[935,32,333,32],[935,65,333,65],[936,4,334,4,"EMAIL_CHANGE_NEEDS_VERIFICATION"],[936,35,334,35],[936,37,334,37],[936,75,334,75],[937,4,335,4,"EMAIL_EXISTS"],[937,16,335,16],[937,18,335,18],[937,45,335,45],[938,4,336,4,"EMULATOR_CONFIG_FAILED"],[938,26,336,26],[938,28,336,28],[938,57,336,57],[939,4,337,4,"EXPIRED_OOB_CODE"],[939,20,337,20],[939,22,337,22],[939,48,337,48],[940,4,338,4,"EXPIRED_POPUP_REQUEST"],[940,25,338,25],[940,27,338,27],[940,57,338,57],[941,4,339,4,"INTERNAL_ERROR"],[941,18,339,18],[941,20,339,20],[941,41,339,41],[942,4,340,4,"INVALID_API_KEY"],[942,19,340,19],[942,21,340,21],[942,43,340,43],[943,4,341,4,"INVALID_APP_CREDENTIAL"],[943,26,341,26],[943,28,341,28],[943,57,341,57],[944,4,342,4,"INVALID_APP_ID"],[944,18,342,18],[944,20,342,20],[944,41,342,41],[945,4,343,4,"INVALID_AUTH"],[945,16,343,16],[945,18,343,18],[945,43,343,43],[946,4,344,4,"INVALID_AUTH_EVENT"],[946,22,344,22],[946,24,344,24],[946,49,344,49],[947,4,345,4,"INVALID_CERT_HASH"],[947,21,345,21],[947,23,345,23],[947,47,345,47],[948,4,346,4,"INVALID_CODE"],[948,16,346,16],[948,18,346,18],[948,50,346,50],[949,4,347,4,"INVALID_CONTINUE_URI"],[949,24,347,24],[949,26,347,26],[949,53,347,53],[950,4,348,4,"INVALID_CORDOVA_CONFIGURATION"],[950,33,348,33],[950,35,348,35],[950,71,348,71],[951,4,349,4,"INVALID_CUSTOM_TOKEN"],[951,24,349,24],[951,26,349,26],[951,53,349,53],[952,4,350,4,"INVALID_DYNAMIC_LINK_DOMAIN"],[952,31,350,31],[952,33,350,33],[952,67,350,67],[953,4,351,4,"INVALID_EMAIL"],[953,17,351,17],[953,19,351,19],[953,39,351,39],[954,4,352,4,"INVALID_EMULATOR_SCHEME"],[954,27,352,27],[954,29,352,29],[954,59,352,59],[955,4,353,4,"INVALID_IDP_RESPONSE"],[955,24,353,24],[955,26,353,26],[955,51,353,51],[956,4,354,4,"INVALID_LOGIN_CREDENTIALS"],[956,29,354,29],[956,31,354,31],[956,56,354,56],[957,4,355,4,"INVALID_MESSAGE_PAYLOAD"],[957,27,355,27],[957,29,355,29],[957,59,355,59],[958,4,356,4,"INVALID_MFA_SESSION"],[958,23,356,23],[958,25,356,25],[958,60,356,60],[959,4,357,4,"INVALID_OAUTH_CLIENT_ID"],[959,27,357,27],[959,29,357,29],[959,59,357,59],[960,4,358,4,"INVALID_OAUTH_PROVIDER"],[960,26,358,26],[960,28,358,28],[960,57,358,57],[961,4,359,4,"INVALID_OOB_CODE"],[961,20,359,20],[961,22,359,22],[961,48,359,48],[962,4,360,4,"INVALID_ORIGIN"],[962,18,360,18],[962,20,360,20],[962,46,360,46],[963,4,361,4,"INVALID_PASSWORD"],[963,20,361,20],[963,22,361,22],[963,43,361,43],[964,4,362,4,"INVALID_PERSISTENCE"],[964,23,362,23],[964,25,362,25],[964,56,362,56],[965,4,363,4,"INVALID_PHONE_NUMBER"],[965,24,363,24],[965,26,363,26],[965,53,363,53],[966,4,364,4,"INVALID_PROVIDER_ID"],[966,23,364,23],[966,25,364,25],[966,51,364,51],[967,4,365,4,"INVALID_RECIPIENT_EMAIL"],[967,27,365,27],[967,29,365,29],[967,59,365,59],[968,4,366,4,"INVALID_SENDER"],[968,18,366,18],[968,20,366,20],[968,41,366,41],[969,4,367,4,"INVALID_SESSION_INFO"],[969,24,367,24],[969,26,367,26],[969,56,367,56],[970,4,368,4,"INVALID_TENANT_ID"],[970,21,368,21],[970,23,368,23],[970,47,368,47],[971,4,369,4,"MFA_INFO_NOT_FOUND"],[971,22,369,22],[971,24,369,24],[971,58,369,58],[972,4,370,4,"MFA_REQUIRED"],[972,16,370,16],[972,18,370,18],[972,51,370,51],[973,4,371,4,"MISSING_ANDROID_PACKAGE_NAME"],[973,32,371,32],[973,34,371,34],[973,65,371,65],[974,4,372,4,"MISSING_APP_CREDENTIAL"],[974,26,372,26],[974,28,372,28],[974,57,372,57],[975,4,373,4,"MISSING_AUTH_DOMAIN"],[975,23,373,23],[975,25,373,25],[975,59,373,59],[976,4,374,4,"MISSING_CODE"],[976,16,374,16],[976,18,374,18],[976,50,374,50],[977,4,375,4,"MISSING_CONTINUE_URI"],[977,24,375,24],[977,26,375,26],[977,53,375,53],[978,4,376,4,"MISSING_IFRAME_START"],[978,24,376,24],[978,26,376,26],[978,53,376,53],[979,4,377,4,"MISSING_IOS_BUNDLE_ID"],[979,25,377,25],[979,27,377,27],[979,55,377,55],[980,4,378,4,"MISSING_OR_INVALID_NONCE"],[980,28,378,28],[980,30,378,30],[980,61,378,61],[981,4,379,4,"MISSING_MFA_INFO"],[981,20,379,20],[981,22,379,22],[981,54,379,54],[982,4,380,4,"MISSING_MFA_SESSION"],[982,23,380,23],[982,25,380,25],[982,60,380,60],[983,4,381,4,"MISSING_PHONE_NUMBER"],[983,24,381,24],[983,26,381,26],[983,53,381,53],[984,4,382,4,"MISSING_SESSION_INFO"],[984,24,382,24],[984,26,382,26],[984,56,382,56],[985,4,383,4,"MODULE_DESTROYED"],[985,20,383,20],[985,22,383,22],[985,40,383,40],[986,4,384,4,"NEED_CONFIRMATION"],[986,21,384,21],[986,23,384,23],[986,70,384,70],[987,4,385,4,"NETWORK_REQUEST_FAILED"],[987,26,385,26],[987,28,385,28],[987,57,385,57],[988,4,386,4,"NULL_USER"],[988,13,386,13],[988,15,386,15],[988,31,386,31],[989,4,387,4,"NO_AUTH_EVENT"],[989,17,387,17],[989,19,387,19],[989,39,387,39],[990,4,388,4,"NO_SUCH_PROVIDER"],[990,20,388,20],[990,22,388,22],[990,45,388,45],[991,4,389,4,"OPERATION_NOT_ALLOWED"],[991,25,389,25],[991,27,389,27],[991,55,389,55],[992,4,390,4,"OPERATION_NOT_SUPPORTED"],[992,27,390,27],[992,29,390,29],[992,79,390,79],[993,4,391,4,"POPUP_BLOCKED"],[993,17,391,17],[993,19,391,19],[993,39,391,39],[994,4,392,4,"POPUP_CLOSED_BY_USER"],[994,24,392,24],[994,26,392,26],[994,53,392,53],[995,4,393,4,"PROVIDER_ALREADY_LINKED"],[995,27,393,27],[995,29,393,29],[995,59,393,59],[996,4,394,4,"QUOTA_EXCEEDED"],[996,18,394,18],[996,20,394,20],[996,41,394,41],[997,4,395,4,"REDIRECT_CANCELLED_BY_USER"],[997,30,395,30],[997,32,395,32],[997,65,395,65],[998,4,396,4,"REDIRECT_OPERATION_PENDING"],[998,30,396,30],[998,32,396,32],[998,65,396,65],[999,4,397,4,"REJECTED_CREDENTIAL"],[999,23,397,23],[999,25,397,25],[999,51,397,51],[1000,4,398,4,"SECOND_FACTOR_ALREADY_ENROLLED"],[1000,34,398,34],[1000,36,398,36],[1000,71,398,71],[1001,4,399,4,"SECOND_FACTOR_LIMIT_EXCEEDED"],[1001,32,399,32],[1001,34,399,34],[1001,77,399,77],[1002,4,400,4,"TENANT_ID_MISMATCH"],[1002,22,400,22],[1002,24,400,24],[1002,49,400,49],[1003,4,401,4,"TIMEOUT"],[1003,11,401,11],[1003,13,401,13],[1003,27,401,27],[1004,4,402,4,"TOKEN_EXPIRED"],[1004,17,402,17],[1004,19,402,19],[1004,44,402,44],[1005,4,403,4,"TOO_MANY_ATTEMPTS_TRY_LATER"],[1005,31,403,31],[1005,33,403,33],[1005,57,403,57],[1006,4,404,4,"UNAUTHORIZED_DOMAIN"],[1006,23,404,23],[1006,25,404,25],[1006,57,404,57],[1007,4,405,4,"UNSUPPORTED_FIRST_FACTOR"],[1007,28,405,28],[1007,30,405,30],[1007,61,405,61],[1008,4,406,4,"UNSUPPORTED_PERSISTENCE"],[1008,27,406,27],[1008,29,406,29],[1008,64,406,64],[1009,4,407,4,"UNSUPPORTED_TENANT_OPERATION"],[1009,32,407,32],[1009,34,407,34],[1009,69,407,69],[1010,4,408,4,"UNVERIFIED_EMAIL"],[1010,20,408,20],[1010,22,408,22],[1010,45,408,45],[1011,4,409,4,"USER_CANCELLED"],[1011,18,409,18],[1011,20,409,20],[1011,41,409,41],[1012,4,410,4,"USER_DELETED"],[1012,16,410,16],[1012,18,410,18],[1012,39,410,39],[1013,4,411,4,"USER_DISABLED"],[1013,17,411,17],[1013,19,411,19],[1013,39,411,39],[1014,4,412,4,"USER_MISMATCH"],[1014,17,412,17],[1014,19,412,19],[1014,39,412,39],[1015,4,413,4,"USER_SIGNED_OUT"],[1015,19,413,19],[1015,21,413,21],[1015,43,413,43],[1016,4,414,4,"WEAK_PASSWORD"],[1016,17,414,17],[1016,19,414,19],[1016,39,414,39],[1017,4,415,4,"WEB_STORAGE_UNSUPPORTED"],[1017,27,415,27],[1017,29,415,29],[1017,59,415,59],[1018,4,416,4,"ALREADY_INITIALIZED"],[1018,23,416,23],[1018,25,416,25],[1018,51,416,51],[1019,4,417,4,"RECAPTCHA_NOT_ENABLED"],[1019,25,417,25],[1019,27,417,27],[1019,55,417,55],[1020,4,418,4,"MISSING_RECAPTCHA_TOKEN"],[1020,27,418,27],[1020,29,418,29],[1020,59,418,59],[1021,4,419,4,"INVALID_RECAPTCHA_TOKEN"],[1021,27,419,27],[1021,29,419,29],[1021,59,419,59],[1022,4,420,4,"INVALID_RECAPTCHA_ACTION"],[1022,28,420,28],[1022,30,420,30],[1022,61,420,61],[1023,4,421,4,"MISSING_CLIENT_TYPE"],[1023,23,421,23],[1023,25,421,25],[1023,51,421,51],[1024,4,422,4,"MISSING_RECAPTCHA_VERSION"],[1024,29,422,29],[1024,31,422,31],[1024,63,422,63],[1025,4,423,4,"INVALID_RECAPTCHA_VERSION"],[1025,29,423,29],[1025,31,423,31],[1025,63,423,63],[1026,4,424,4,"INVALID_REQ_TYPE"],[1026,20,424,20],[1026,22,424,22],[1026,45,424,45],[1027,4,425,4,"INVALID_HOSTING_LINK_DOMAIN"],[1027,31,425,31],[1027,33,425,33],[1028,2,426,0],[1028,3,426,1],[1030,2,428,0],[1031,0,429,0],[1032,0,430,0],[1033,0,431,0],[1034,0,432,0],[1035,0,433,0],[1036,0,434,0],[1037,0,435,0],[1038,0,436,0],[1039,0,437,0],[1040,0,438,0],[1041,0,439,0],[1042,0,440,0],[1043,0,441,0],[1044,0,442,0],[1045,0,443,0],[1046,2,444,0],[1046,8,444,6,"logClient"],[1046,17,444,15],[1046,20,444,18],[1046,24,444,22,"Logger"],[1046,39,444,28],[1046,40,444,28,"Logger"],[1046,46,444,28],[1046,47,444,29],[1046,63,444,45],[1046,64,444,46],[1047,2,445,0],[1047,11,445,9,"_logWarn"],[1047,19,445,17,"_logWarn"],[1047,20,445,18,"msg"],[1047,23,445,21],[1047,25,445,23],[1047,28,445,26,"args"],[1047,32,445,30],[1047,34,445,32],[1048,4,446,4],[1048,8,446,8,"logClient"],[1048,17,446,17],[1048,18,446,18,"logLevel"],[1048,26,446,26],[1048,30,446,30,"LogLevel"],[1048,45,446,38],[1048,46,446,38,"LogLevel"],[1048,54,446,38],[1048,55,446,39,"WARN"],[1048,59,446,43],[1048,61,446,45],[1049,6,447,8,"logClient"],[1049,15,447,17],[1049,16,447,18,"warn"],[1049,20,447,22],[1049,21,447,23],[1049,30,447,32,"SDK_VERSION"],[1049,42,447,43],[1049,43,447,43,"SDK_VERSION"],[1049,54,447,43],[1049,60,447,49,"msg"],[1049,63,447,52],[1049,65,447,54],[1049,67,447,56],[1049,70,447,59,"args"],[1049,74,447,63],[1049,75,447,64],[1050,4,448,4],[1051,2,449,0],[1052,2,450,0],[1052,11,450,9,"_logError"],[1052,20,450,18,"_logError"],[1052,21,450,19,"msg"],[1052,24,450,22],[1052,26,450,24],[1052,29,450,27,"args"],[1052,33,450,31],[1052,35,450,33],[1053,4,451,4],[1053,8,451,8,"logClient"],[1053,17,451,17],[1053,18,451,18,"logLevel"],[1053,26,451,26],[1053,30,451,30,"LogLevel"],[1053,45,451,38],[1053,46,451,38,"LogLevel"],[1053,54,451,38],[1053,55,451,39,"ERROR"],[1053,60,451,44],[1053,62,451,46],[1054,6,452,8,"logClient"],[1054,15,452,17],[1054,16,452,18,"error"],[1054,21,452,23],[1054,22,452,24],[1054,31,452,33,"SDK_VERSION"],[1054,43,452,44],[1054,44,452,44,"SDK_VERSION"],[1054,55,452,44],[1054,61,452,50,"msg"],[1054,64,452,53],[1054,66,452,55],[1054,68,452,57],[1054,71,452,60,"args"],[1054,75,452,64],[1054,76,452,65],[1055,4,453,4],[1056,2,454,0],[1058,2,456,0],[1059,0,457,0],[1060,0,458,0],[1061,0,459,0],[1062,0,460,0],[1063,0,461,0],[1064,0,462,0],[1065,0,463,0],[1066,0,464,0],[1067,0,465,0],[1068,0,466,0],[1069,0,467,0],[1070,0,468,0],[1071,0,469,0],[1072,0,470,0],[1073,0,471,0],[1074,2,472,0],[1074,11,472,9,"_fail"],[1074,16,472,14,"_fail"],[1074,17,472,15,"authOrCode"],[1074,27,472,25],[1074,29,472,27],[1074,32,472,30,"rest"],[1074,36,472,34],[1074,38,472,36],[1075,4,473,4],[1075,10,473,10,"createErrorInternal"],[1075,29,473,29],[1075,30,473,30,"authOrCode"],[1075,40,473,40],[1075,42,473,42],[1075,45,473,45,"rest"],[1075,49,473,49],[1075,50,473,50],[1076,2,474,0],[1077,2,475,0],[1077,11,475,9,"_createError"],[1077,23,475,21,"_createError"],[1077,24,475,22,"authOrCode"],[1077,34,475,32],[1077,36,475,34],[1077,39,475,37,"rest"],[1077,43,475,41],[1077,45,475,43],[1078,4,476,4],[1078,11,476,11,"createErrorInternal"],[1078,30,476,30],[1078,31,476,31,"authOrCode"],[1078,41,476,41],[1078,43,476,43],[1078,46,476,46,"rest"],[1078,50,476,50],[1078,51,476,51],[1079,2,477,0],[1080,2,478,0],[1080,11,478,9,"_errorWithCustomMessage"],[1080,34,478,32,"_errorWithCustomMessage"],[1080,35,478,33,"auth"],[1080,39,478,37],[1080,41,478,39,"code"],[1080,45,478,43],[1080,47,478,45,"message"],[1080,54,478,52],[1080,56,478,54],[1081,4,479,4],[1081,10,479,10,"errorMap"],[1081,18,479,18],[1081,21,479,21],[1082,6,480,8],[1082,9,480,11,"prodErrorMap"],[1082,21,480,23],[1082,22,480,24],[1082,23,480,25],[1083,6,481,8],[1083,7,481,9,"code"],[1083,11,481,13],[1083,14,481,16,"message"],[1084,4,482,4],[1084,5,482,5],[1085,4,483,4],[1085,10,483,10,"factory"],[1085,17,483,17],[1085,20,483,20],[1085,24,483,24,"ErrorFactory"],[1085,37,483,36],[1085,38,483,36,"ErrorFactory"],[1085,50,483,36],[1085,51,483,37],[1085,57,483,43],[1085,59,483,45],[1085,69,483,55],[1085,71,483,57,"errorMap"],[1085,79,483,65],[1085,80,483,66],[1086,4,484,4],[1086,11,484,11,"factory"],[1086,18,484,18],[1086,19,484,19,"create"],[1086,25,484,25],[1086,26,484,26,"code"],[1086,30,484,30],[1086,32,484,32],[1087,6,485,8,"appName"],[1087,13,485,15],[1087,15,485,17,"auth"],[1087,19,485,21],[1087,20,485,22,"name"],[1088,4,486,4],[1088,5,486,5],[1088,6,486,6],[1089,2,487,0],[1090,2,488,0],[1090,11,488,9,"_serverAppCurrentUserOperationNotSupportedError"],[1090,58,488,56,"_serverAppCurrentUserOperationNotSupportedError"],[1090,59,488,57,"auth"],[1090,63,488,61],[1090,65,488,63],[1091,4,489,4],[1091,11,489,11,"_errorWithCustomMessage"],[1091,34,489,34],[1091,35,489,35,"auth"],[1091,39,489,39],[1091,41,489,41],[1091,86,489,86],[1091,87,489,87],[1091,132,489,132],[1091,228,489,228],[1091,229,489,229],[1092,2,490,0],[1093,2,491,0],[1093,11,491,9,"_assertInstanceOf"],[1093,28,491,26,"_assertInstanceOf"],[1093,29,491,27,"auth"],[1093,33,491,31],[1093,35,491,33,"object"],[1093,41,491,39],[1093,43,491,41,"instance"],[1093,51,491,49],[1093,53,491,51],[1094,4,492,4],[1094,10,492,10,"constructorInstance"],[1094,29,492,29],[1094,32,492,32,"instance"],[1094,40,492,40],[1095,4,493,4],[1095,8,493,8],[1095,10,493,10,"object"],[1095,16,493,16],[1095,28,493,28,"constructorInstance"],[1095,47,493,47],[1095,48,493,48],[1095,50,493,50],[1096,6,494,8],[1096,10,494,12,"constructorInstance"],[1096,29,494,31],[1096,30,494,32,"name"],[1096,34,494,36],[1096,39,494,41,"object"],[1096,45,494,47],[1096,46,494,48,"constructor"],[1096,57,494,59],[1096,58,494,60,"name"],[1096,62,494,64],[1096,64,494,66],[1097,8,495,12,"_fail"],[1097,13,495,17],[1097,14,495,18,"auth"],[1097,18,495,22],[1097,20,495,24],[1097,36,495,40],[1097,37,495,41],[1097,71,495,75],[1097,72,495,76],[1098,6,496,8],[1099,6,497,8],[1099,12,497,14,"_errorWithCustomMessage"],[1099,35,497,37],[1099,36,497,38,"auth"],[1099,40,497,42],[1099,42,497,44],[1099,58,497,60],[1099,59,497,61],[1099,95,497,97],[1099,106,497,108,"object"],[1099,112,497,114],[1099,113,497,115,"constructor"],[1099,124,497,126],[1099,125,497,127,"name"],[1099,129,497,131],[1099,165,497,167],[1099,168,498,12],[1099,221,498,65],[1099,222,498,66],[1100,4,499,4],[1101,2,500,0],[1102,2,501,0],[1102,11,501,9,"createErrorInternal"],[1102,30,501,28,"createErrorInternal"],[1102,31,501,29,"authOrCode"],[1102,41,501,39],[1102,43,501,41],[1102,46,501,44,"rest"],[1102,50,501,48],[1102,52,501,50],[1103,4,502,4],[1103,8,502,8],[1103,15,502,15,"authOrCode"],[1103,25,502,25],[1103,30,502,30],[1103,38,502,38],[1103,40,502,40],[1104,6,503,8],[1104,12,503,14,"code"],[1104,16,503,18],[1104,19,503,21,"rest"],[1104,23,503,25],[1104,24,503,26],[1104,25,503,27],[1104,26,503,28],[1105,6,504,8],[1105,12,504,14,"fullParams"],[1105,22,504,24],[1105,25,504,27],[1105,26,504,28],[1105,29,504,31,"rest"],[1105,33,504,35],[1105,34,504,36,"slice"],[1105,39,504,41],[1105,40,504,42],[1105,41,504,43],[1105,42,504,44],[1105,43,504,45],[1106,6,505,8],[1106,10,505,12,"fullParams"],[1106,20,505,22],[1106,21,505,23],[1106,22,505,24],[1106,23,505,25],[1106,25,505,27],[1107,8,506,12,"fullParams"],[1107,18,506,22],[1107,19,506,23],[1107,20,506,24],[1107,21,506,25],[1107,22,506,26,"appName"],[1107,29,506,33],[1107,32,506,36,"authOrCode"],[1107,42,506,46],[1107,43,506,47,"name"],[1107,47,506,51],[1108,6,507,8],[1109,6,508,8],[1109,13,508,15,"authOrCode"],[1109,23,508,25],[1109,24,508,26,"_errorFactory"],[1109,37,508,39],[1109,38,508,40,"create"],[1109,44,508,46],[1109,45,508,47,"code"],[1109,49,508,51],[1109,51,508,53],[1109,54,508,56,"fullParams"],[1109,64,508,66],[1109,65,508,67],[1110,4,509,4],[1111,4,510,4],[1111,11,510,11,"_DEFAULT_AUTH_ERROR_FACTORY"],[1111,38,510,38],[1111,39,510,39,"create"],[1111,45,510,45],[1111,46,510,46,"authOrCode"],[1111,56,510,56],[1111,58,510,58],[1111,61,510,61,"rest"],[1111,65,510,65],[1111,66,510,66],[1112,2,511,0],[1113,2,512,0],[1113,11,512,9,"_assert"],[1113,18,512,16,"_assert"],[1113,19,512,17,"assertion"],[1113,28,512,26],[1113,30,512,28,"authOrCode"],[1113,40,512,38],[1113,42,512,40],[1113,45,512,43,"rest"],[1113,49,512,47],[1113,51,512,49],[1114,4,513,4],[1114,8,513,8],[1114,9,513,9,"assertion"],[1114,18,513,18],[1114,20,513,20],[1115,6,514,8],[1115,12,514,14,"createErrorInternal"],[1115,31,514,33],[1115,32,514,34,"authOrCode"],[1115,42,514,44],[1115,44,514,46],[1115,47,514,49,"rest"],[1115,51,514,53],[1115,52,514,54],[1116,4,515,4],[1117,2,516,0],[1118,2,517,0],[1119,0,518,0],[1120,0,519,0],[1121,0,520,0],[1122,0,521,0],[1123,0,522,0],[1124,2,523,0],[1124,11,523,9,"debugFail"],[1124,20,523,18,"debugFail"],[1124,21,523,19,"failure"],[1124,28,523,26],[1124,30,523,28],[1125,4,524,4],[1126,4,525,4],[1127,4,526,4],[1127,10,526,10,"message"],[1127,17,526,17],[1127,20,526,20],[1127,49,526,49],[1127,52,526,52,"failure"],[1127,59,526,59],[1128,4,527,4,"_logError"],[1128,13,527,13],[1128,14,527,14,"message"],[1128,21,527,21],[1128,22,527,22],[1129,4,528,4],[1130,4,529,4],[1131,4,530,4],[1132,4,531,4],[1132,10,531,10],[1132,14,531,14,"Error"],[1132,19,531,19],[1132,20,531,20,"message"],[1132,27,531,27],[1132,28,531,28],[1133,2,532,0],[1134,2,533,0],[1135,0,534,0],[1136,0,535,0],[1137,0,536,0],[1138,0,537,0],[1139,0,538,0],[1140,0,539,0],[1141,2,540,0],[1141,11,540,9,"debugAssert"],[1141,22,540,20,"debugAssert"],[1141,23,540,21,"assertion"],[1141,32,540,30],[1141,34,540,32,"message"],[1141,41,540,39],[1141,43,540,41],[1142,4,541,4],[1142,8,541,8],[1142,9,541,9,"assertion"],[1142,18,541,18],[1142,20,541,20],[1143,6,542,8,"debugFail"],[1143,15,542,17],[1143,16,542,18,"message"],[1143,23,542,25],[1143,24,542,26],[1144,4,543,4],[1145,2,544,0],[1147,2,546,0],[1148,0,547,0],[1149,0,548,0],[1150,0,549,0],[1151,0,550,0],[1152,0,551,0],[1153,0,552,0],[1154,0,553,0],[1155,0,554,0],[1156,0,555,0],[1157,0,556,0],[1158,0,557,0],[1159,0,558,0],[1160,0,559,0],[1161,0,560,0],[1162,0,561,0],[1163,2,562,0],[1163,11,562,9,"_getCurrentUrl"],[1163,25,562,23,"_getCurrentUrl"],[1163,26,562,23],[1163,28,562,26],[1164,4,563,4],[1164,11,563,12],[1164,18,563,19,"self"],[1164,22,563,23],[1164,27,563,28],[1164,38,563,39],[1164,42,563,43,"self"],[1164,46,563,47],[1164,47,563,48,"location"],[1164,55,563,56],[1164,57,563,58,"href"],[1164,61,563,62],[1164,65,563,67],[1164,67,563,69],[1165,2,564,0],[1166,2,565,0],[1166,11,565,9,"_isHttpOrHttps"],[1166,25,565,23,"_isHttpOrHttps"],[1166,26,565,23],[1166,28,565,26],[1167,4,566,4],[1167,11,566,11,"_getCurrentScheme"],[1167,28,566,28],[1167,29,566,29],[1167,30,566,30],[1167,35,566,35],[1167,42,566,42],[1167,46,566,46,"_getCurrentScheme"],[1167,63,566,63],[1167,64,566,64],[1167,65,566,65],[1167,70,566,70],[1167,78,566,78],[1168,2,567,0],[1169,2,568,0],[1169,11,568,9,"_getCurrentScheme"],[1169,28,568,26,"_getCurrentScheme"],[1169,29,568,26],[1169,31,568,29],[1170,4,569,4],[1170,11,569,12],[1170,18,569,19,"self"],[1170,22,569,23],[1170,27,569,28],[1170,38,569,39],[1170,42,569,43,"self"],[1170,46,569,47],[1170,47,569,48,"location"],[1170,55,569,56],[1170,57,569,58,"protocol"],[1170,65,569,66],[1170,69,569,71],[1170,73,569,75],[1171,2,570,0],[1173,2,572,0],[1174,0,573,0],[1175,0,574,0],[1176,0,575,0],[1177,0,576,0],[1178,0,577,0],[1179,0,578,0],[1180,0,579,0],[1181,0,580,0],[1182,0,581,0],[1183,0,582,0],[1184,0,583,0],[1185,0,584,0],[1186,0,585,0],[1187,0,586,0],[1188,0,587,0],[1189,2,588,0],[1190,0,589,0],[1191,0,590,0],[1192,2,591,0],[1192,11,591,9,"_isOnline"],[1192,20,591,18,"_isOnline"],[1192,21,591,18],[1192,23,591,21],[1193,4,592,4],[1193,8,592,8],[1193,15,592,15,"navigator"],[1193,24,592,24],[1193,29,592,29],[1193,40,592,40],[1193,44,593,8,"navigator"],[1193,53,593,17],[1193,57,594,8],[1193,65,594,16],[1193,69,594,20,"navigator"],[1193,78,594,29],[1193,82,595,8],[1193,89,595,15,"navigator"],[1193,98,595,24],[1193,99,595,25,"onLine"],[1193,105,595,31],[1193,110,595,36],[1193,119,595,45],[1194,4,596,8],[1195,4,597,8],[1196,4,598,8],[1197,4,599,8],[1198,4,600,8],[1199,4,601,9,"_isHttpOrHttps"],[1199,18,601,23],[1199,19,601,24],[1199,20,601,25],[1199,24,601,29],[1199,28,601,29,"isBrowserExtension"],[1199,41,601,47],[1199,42,601,47,"isBrowserExtension"],[1199,60,601,47],[1199,62,601,48],[1199,63,601,49],[1199,67,601,53],[1199,79,601,65],[1199,83,601,69,"navigator"],[1199,92,601,78],[1199,93,601,79],[1199,95,601,81],[1200,6,602,8],[1200,13,602,15,"navigator"],[1200,22,602,24],[1200,23,602,25,"onLine"],[1200,29,602,31],[1201,4,603,4],[1202,4,604,4],[1203,4,605,4],[1203,11,605,11],[1203,15,605,15],[1204,2,606,0],[1205,2,607,0],[1205,11,607,9,"_getUserLanguage"],[1205,27,607,25,"_getUserLanguage"],[1205,28,607,25],[1205,30,607,28],[1206,4,608,4],[1206,8,608,8],[1206,15,608,15,"navigator"],[1206,24,608,24],[1206,29,608,29],[1206,40,608,40],[1206,42,608,42],[1207,6,609,8],[1207,13,609,15],[1207,17,609,19],[1208,4,610,4],[1209,4,611,4],[1209,10,611,10,"navigatorLanguage"],[1209,27,611,27],[1209,30,611,30,"navigator"],[1209,39,611,39],[1210,4,612,4],[1211,6,613,4],[1212,6,614,5,"navigatorLanguage"],[1212,23,614,22],[1212,24,614,23,"languages"],[1212,33,614,32],[1212,37,614,36,"navigatorLanguage"],[1212,54,614,53],[1212,55,614,54,"languages"],[1212,64,614,63],[1212,65,614,64],[1212,66,614,65],[1212,67,614,66],[1213,6,615,8],[1214,6,616,8],[1215,6,617,8,"navigatorLanguage"],[1215,23,617,25],[1215,24,617,26,"language"],[1215,32,617,34],[1216,6,618,8],[1217,6,619,8],[1218,4,619,12],[1219,2,620,0],[1221,2,622,0],[1222,0,623,0],[1223,0,624,0],[1224,0,625,0],[1225,0,626,0],[1226,0,627,0],[1227,0,628,0],[1228,0,629,0],[1229,0,630,0],[1230,0,631,0],[1231,0,632,0],[1232,0,633,0],[1233,0,634,0],[1234,0,635,0],[1235,0,636,0],[1236,0,637,0],[1237,2,638,0],[1238,0,639,0],[1239,0,640,0],[1240,0,641,0],[1241,0,642,0],[1242,2,643,0],[1242,8,643,6,"Delay"],[1242,13,643,11],[1242,14,643,12],[1243,4,644,4,"constructor"],[1243,15,644,15,"constructor"],[1243,16,644,16,"shortDelay"],[1243,26,644,26],[1243,28,644,28,"longDelay"],[1243,37,644,37],[1243,39,644,39],[1244,6,645,8],[1244,10,645,12],[1244,11,645,13,"shortDelay"],[1244,21,645,23],[1244,24,645,26,"shortDelay"],[1244,34,645,36],[1245,6,646,8],[1245,10,646,12],[1245,11,646,13,"longDelay"],[1245,20,646,22],[1245,23,646,25,"longDelay"],[1245,32,646,34],[1246,6,647,8],[1247,6,648,8,"debugAssert"],[1247,17,648,19],[1247,18,648,20,"longDelay"],[1247,27,648,29],[1247,30,648,32,"shortDelay"],[1247,40,648,42],[1247,42,648,44],[1247,87,648,89],[1247,88,648,90],[1248,6,649,8],[1248,10,649,12],[1248,11,649,13,"isMobile"],[1248,19,649,21],[1248,22,649,24],[1248,26,649,24,"isMobileCordova"],[1248,39,649,39],[1248,40,649,39,"isMobileCordova"],[1248,55,649,39],[1248,57,649,40],[1248,58,649,41],[1248,62,649,45],[1248,66,649,45,"isReactNative"],[1248,79,649,58],[1248,80,649,58,"isReactNative"],[1248,93,649,58],[1248,95,649,59],[1248,96,649,60],[1249,4,650,4],[1250,4,651,4,"get"],[1250,7,651,7,"get"],[1250,8,651,7],[1250,10,651,10],[1251,6,652,8],[1251,10,652,12],[1251,11,652,13,"_isOnline"],[1251,20,652,22],[1251,21,652,23],[1251,22,652,24],[1251,24,652,26],[1252,8,653,12],[1253,8,654,12],[1253,15,654,19,"Math"],[1253,19,654,23],[1253,20,654,24,"min"],[1253,23,654,27],[1253,24,654,28],[1253,28,654,32],[1253,29,654,33],[1253,53,654,57],[1253,57,654,61],[1253,58,654,62,"shortDelay"],[1253,68,654,72],[1253,69,654,73],[1254,6,655,8],[1255,6,656,8],[1256,6,657,8],[1257,6,658,8],[1258,6,659,8],[1259,6,660,8],[1259,13,660,15],[1259,17,660,19],[1259,18,660,20,"isMobile"],[1259,26,660,28],[1259,29,660,31],[1259,33,660,35],[1259,34,660,36,"longDelay"],[1259,43,660,45],[1259,46,660,48],[1259,50,660,52],[1259,51,660,53,"shortDelay"],[1259,61,660,63],[1260,4,661,4],[1261,2,662,0],[1263,2,664,0],[1264,0,665,0],[1265,0,666,0],[1266,0,667,0],[1267,0,668,0],[1268,0,669,0],[1269,0,670,0],[1270,0,671,0],[1271,0,672,0],[1272,0,673,0],[1273,0,674,0],[1274,0,675,0],[1275,0,676,0],[1276,0,677,0],[1277,0,678,0],[1278,0,679,0],[1279,2,680,0],[1279,11,680,9,"_emulatorUrl"],[1279,23,680,21,"_emulatorUrl"],[1279,24,680,22,"config"],[1279,30,680,28],[1279,32,680,30,"path"],[1279,36,680,34],[1279,38,680,36],[1280,4,681,4,"debugAssert"],[1280,15,681,15],[1280,16,681,16,"config"],[1280,22,681,22],[1280,23,681,23,"emulator"],[1280,31,681,31],[1280,33,681,33],[1280,69,681,69],[1280,70,681,70],[1281,4,682,4],[1281,10,682,10],[1282,6,682,12,"url"],[1283,4,682,16],[1283,5,682,17],[1283,8,682,20,"config"],[1283,14,682,26],[1283,15,682,27,"emulator"],[1283,23,682,35],[1284,4,683,4],[1284,8,683,8],[1284,9,683,9,"path"],[1284,13,683,13],[1284,15,683,15],[1285,6,684,8],[1285,13,684,15,"url"],[1285,16,684,18],[1286,4,685,4],[1287,4,686,4],[1287,11,686,11],[1287,14,686,14,"url"],[1287,17,686,17],[1287,20,686,20,"path"],[1287,24,686,24],[1287,25,686,25,"startsWith"],[1287,35,686,35],[1287,36,686,36],[1287,39,686,39],[1287,40,686,40],[1287,43,686,43,"path"],[1287,47,686,47],[1287,48,686,48,"slice"],[1287,53,686,53],[1287,54,686,54],[1287,55,686,55],[1287,56,686,56],[1287,59,686,59,"path"],[1287,63,686,63],[1287,65,686,65],[1288,2,687,0],[1290,2,689,0],[1291,0,690,0],[1292,0,691,0],[1293,0,692,0],[1294,0,693,0],[1295,0,694,0],[1296,0,695,0],[1297,0,696,0],[1298,0,697,0],[1299,0,698,0],[1300,0,699,0],[1301,0,700,0],[1302,0,701,0],[1303,0,702,0],[1304,0,703,0],[1305,0,704,0],[1306,2,705,0],[1306,8,705,6,"FetchProvider"],[1306,21,705,19],[1306,22,705,20],[1307,4,706,4],[1307,11,706,11,"initialize"],[1307,21,706,21,"initialize"],[1307,22,706,22,"fetchImpl"],[1307,31,706,31],[1307,33,706,33,"headersImpl"],[1307,44,706,44],[1307,46,706,46,"responseImpl"],[1307,58,706,58],[1307,60,706,60],[1308,6,707,8],[1308,10,707,12],[1308,11,707,13,"fetchImpl"],[1308,20,707,22],[1308,23,707,25,"fetchImpl"],[1308,32,707,34],[1309,6,708,8],[1309,10,708,12,"headersImpl"],[1309,21,708,23],[1309,23,708,25],[1310,8,709,12],[1310,12,709,16],[1310,13,709,17,"headersImpl"],[1310,24,709,28],[1310,27,709,31,"headersImpl"],[1310,38,709,42],[1311,6,710,8],[1312,6,711,8],[1312,10,711,12,"responseImpl"],[1312,22,711,24],[1312,24,711,26],[1313,8,712,12],[1313,12,712,16],[1313,13,712,17,"responseImpl"],[1313,25,712,29],[1313,28,712,32,"responseImpl"],[1313,40,712,44],[1314,6,713,8],[1315,4,714,4],[1316,4,715,4],[1316,11,715,11,"fetch"],[1316,16,715,16,"fetch"],[1316,17,715,16],[1316,19,715,19],[1317,6,716,8],[1317,10,716,12],[1317,14,716,16],[1317,15,716,17,"fetchImpl"],[1317,24,716,26],[1317,26,716,28],[1318,8,717,12],[1318,15,717,19],[1318,19,717,23],[1318,20,717,24,"fetchImpl"],[1318,29,717,33],[1319,6,718,8],[1320,6,719,8],[1320,10,719,12],[1320,17,719,19,"self"],[1320,21,719,23],[1320,26,719,28],[1320,37,719,39],[1320,41,719,43],[1320,48,719,50],[1320,52,719,54,"self"],[1320,56,719,58],[1320,58,719,60],[1321,8,720,12],[1321,15,720,19,"self"],[1321,19,720,23],[1321,20,720,24,"fetch"],[1321,25,720,29],[1322,6,721,8],[1323,6,722,8],[1323,10,722,12],[1323,17,722,19,"globalThis"],[1323,27,722,29],[1323,32,722,34],[1323,43,722,45],[1323,47,722,49,"globalThis"],[1323,57,722,59],[1323,58,722,60,"fetch"],[1323,63,722,65],[1323,65,722,67],[1324,8,723,12],[1324,15,723,19,"globalThis"],[1324,25,723,29],[1324,26,723,30,"fetch"],[1324,31,723,35],[1325,6,724,8],[1326,6,725,8],[1326,10,725,12],[1326,17,725,19,"fetch"],[1326,22,725,24],[1326,27,725,29],[1326,38,725,40],[1326,40,725,42],[1327,8,726,12],[1327,15,726,19,"fetch"],[1327,20,726,24],[1328,6,727,8],[1329,6,728,8,"debugFail"],[1329,15,728,17],[1329,16,728,18],[1329,129,728,131],[1329,130,728,132],[1330,4,729,4],[1331,4,730,4],[1331,11,730,11,"headers"],[1331,18,730,18,"headers"],[1331,19,730,18],[1331,21,730,21],[1332,6,731,8],[1332,10,731,12],[1332,14,731,16],[1332,15,731,17,"headersImpl"],[1332,26,731,28],[1332,28,731,30],[1333,8,732,12],[1333,15,732,19],[1333,19,732,23],[1333,20,732,24,"headersImpl"],[1333,31,732,35],[1334,6,733,8],[1335,6,734,8],[1335,10,734,12],[1335,17,734,19,"self"],[1335,21,734,23],[1335,26,734,28],[1335,37,734,39],[1335,41,734,43],[1335,50,734,52],[1335,54,734,56,"self"],[1335,58,734,60],[1335,60,734,62],[1336,8,735,12],[1336,15,735,19,"self"],[1336,19,735,23],[1336,20,735,24,"Headers"],[1336,27,735,31],[1337,6,736,8],[1338,6,737,8],[1338,10,737,12],[1338,17,737,19,"globalThis"],[1338,27,737,29],[1338,32,737,34],[1338,43,737,45],[1338,47,737,49,"globalThis"],[1338,57,737,59],[1338,58,737,60,"Headers"],[1338,65,737,67],[1338,67,737,69],[1339,8,738,12],[1339,15,738,19,"globalThis"],[1339,25,738,29],[1339,26,738,30,"Headers"],[1339,33,738,37],[1340,6,739,8],[1341,6,740,8],[1341,10,740,12],[1341,17,740,19,"Headers"],[1341,24,740,26],[1341,29,740,31],[1341,40,740,42],[1341,42,740,44],[1342,8,741,12],[1342,15,741,19,"Headers"],[1342,22,741,26],[1343,6,742,8],[1344,6,743,8,"debugFail"],[1344,15,743,17],[1344,16,743,18],[1344,131,743,133],[1344,132,743,134],[1345,4,744,4],[1346,4,745,4],[1346,11,745,11,"response"],[1346,19,745,19,"response"],[1346,20,745,19],[1346,22,745,22],[1347,6,746,8],[1347,10,746,12],[1347,14,746,16],[1347,15,746,17,"responseImpl"],[1347,27,746,29],[1347,29,746,31],[1348,8,747,12],[1348,15,747,19],[1348,19,747,23],[1348,20,747,24,"responseImpl"],[1348,32,747,36],[1349,6,748,8],[1350,6,749,8],[1350,10,749,12],[1350,17,749,19,"self"],[1350,21,749,23],[1350,26,749,28],[1350,37,749,39],[1350,41,749,43],[1350,51,749,53],[1350,55,749,57,"self"],[1350,59,749,61],[1350,61,749,63],[1351,8,750,12],[1351,15,750,19,"self"],[1351,19,750,23],[1351,20,750,24,"Response"],[1351,28,750,32],[1352,6,751,8],[1353,6,752,8],[1353,10,752,12],[1353,17,752,19,"globalThis"],[1353,27,752,29],[1353,32,752,34],[1353,43,752,45],[1353,47,752,49,"globalThis"],[1353,57,752,59],[1353,58,752,60,"Response"],[1353,66,752,68],[1353,68,752,70],[1354,8,753,12],[1354,15,753,19,"globalThis"],[1354,25,753,29],[1354,26,753,30,"Response"],[1354,34,753,38],[1355,6,754,8],[1356,6,755,8],[1356,10,755,12],[1356,17,755,19,"Response"],[1356,25,755,27],[1356,30,755,32],[1356,41,755,43],[1356,43,755,45],[1357,8,756,12],[1357,15,756,19,"Response"],[1357,23,756,27],[1358,6,757,8],[1359,6,758,8,"debugFail"],[1359,15,758,17],[1359,16,758,18],[1359,132,758,134],[1359,133,758,135],[1360,4,759,4],[1361,2,760,0],[1363,2,762,0],[1364,0,763,0],[1365,0,764,0],[1366,0,765,0],[1367,0,766,0],[1368,0,767,0],[1369,0,768,0],[1370,0,769,0],[1371,0,770,0],[1372,0,771,0],[1373,0,772,0],[1374,0,773,0],[1375,0,774,0],[1376,0,775,0],[1377,0,776,0],[1378,0,777,0],[1379,2,778,0],[1380,0,779,0],[1381,0,780,0],[1382,2,781,0],[1382,8,781,6,"SERVER_ERROR_MAP"],[1382,24,781,22],[1382,27,781,25],[1383,4,782,4],[1384,4,783,4],[1384,5,783,5],[1384,26,783,26],[1384,27,783,27],[1384,67,783,67],[1384,90,783,90],[1384,91,783,91],[1386,4,784,4],[1387,4,785,4],[1387,5,785,5],[1387,27,785,27],[1387,28,785,28],[1387,69,785,69],[1387,85,785,85],[1387,86,785,86],[1389,4,786,4],[1390,4,787,4],[1390,5,787,5],[1390,25,787,25],[1390,26,787,26],[1390,65,787,65],[1390,80,787,80],[1390,81,787,81],[1392,4,788,4],[1393,4,789,4],[1393,5,789,5],[1393,27,789,27],[1393,28,789,28],[1393,69,789,69],[1393,85,789,85],[1393,86,789,86],[1395,4,790,4],[1396,4,791,4],[1396,5,791,5],[1396,23,791,23],[1396,24,791,24],[1396,61,791,61],[1396,77,791,77],[1396,78,791,78],[1398,4,792,4],[1399,4,793,4],[1399,5,793,5],[1399,23,793,23],[1399,24,793,24],[1399,61,793,61],[1399,79,793,79],[1399,80,793,80],[1401,4,794,4],[1402,4,795,4],[1403,4,796,4],[1403,5,796,5],[1403,32,796,32],[1403,33,796,33],[1403,79,796,79],[1403,99,796,99],[1403,100,796,100],[1405,4,797,4],[1406,4,798,4],[1406,5,798,5],[1406,19,798,19],[1406,20,798,20],[1406,53,798,53],[1406,75,798,75],[1406,76,798,76],[1407,4,799,4],[1407,5,799,5],[1407,30,799,30],[1407,31,799,31],[1407,75,799,75],[1407,98,799,98],[1407,99,799,99],[1409,4,800,4],[1410,4,801,4],[1410,5,801,5],[1410,27,801,27],[1410,28,801,28],[1410,69,801,69],[1410,89,801,89],[1410,90,801,90],[1411,4,802,4],[1411,5,802,5],[1411,28,802,28],[1411,29,802,29],[1411,71,802,71],[1411,91,802,91],[1411,92,802,92],[1412,4,803,4],[1412,5,803,5],[1412,39,803,39],[1412,40,803,40],[1412,93,803,93],[1412,120,803,120],[1412,121,803,121],[1414,4,804,4],[1415,4,805,4],[1415,5,805,5],[1415,23,805,23],[1415,24,805,24],[1415,61,805,61],[1415,77,805,77],[1415,78,805,78],[1417,4,806,4],[1418,4,807,4],[1418,5,807,5],[1418,22,807,22],[1418,23,807,23],[1418,59,807,59],[1418,75,807,75],[1418,76,807,76],[1419,4,808,4],[1419,5,808,5],[1419,34,808,34],[1419,35,808,35],[1419,83,808,83],[1419,102,808,102],[1419,103,808,103],[1420,4,809,4],[1420,5,809,5],[1420,23,809,23],[1420,24,809,24],[1420,61,809,61],[1420,82,809,82],[1420,83,809,83],[1421,4,810,4],[1421,5,810,5],[1421,23,810,23],[1421,24,810,24],[1421,61,810,61],[1421,82,810,82],[1421,83,810,83],[1423,4,811,4],[1424,4,812,4],[1424,5,812,5],[1424,23,812,23],[1424,24,812,24],[1424,61,812,61],[1424,77,812,77],[1424,78,812,78],[1426,4,813,4],[1427,4,814,4],[1427,5,814,5],[1427,37,814,37],[1427,38,814,38],[1427,89,814,89],[1427,112,814,112],[1427,113,814,113],[1428,4,815,4],[1428,5,815,5],[1428,23,815,23],[1428,24,815,24],[1428,61,815,61],[1428,81,815,81],[1428,82,815,82],[1429,4,816,4],[1429,5,816,5],[1429,20,816,20],[1429,21,816,21],[1429,55,816,55],[1429,75,816,75],[1429,76,816,76],[1430,4,817,4],[1430,5,817,5],[1430,21,817,21],[1430,22,817,22],[1430,57,817,57],[1430,77,817,77],[1430,78,817,78],[1432,4,818,4],[1433,4,819,4],[1433,5,819,5],[1433,34,819,34],[1433,35,819,35],[1433,83,819,83],[1433,102,819,102],[1433,103,819,103],[1434,4,820,4],[1434,5,820,5],[1434,42,820,42],[1434,43,820,43],[1434,99,820,99],[1434,136,820,136],[1434,137,820,137],[1436,4,821,4],[1437,4,822,4],[1437,5,822,5],[1437,19,822,19],[1437,20,822,20],[1437,53,822,53],[1437,80,822,80],[1437,81,822,81],[1438,4,823,4],[1438,5,823,5],[1438,27,823,27],[1438,28,823,28],[1438,69,823,69],[1438,94,823,94],[1438,95,823,95],[1439,4,824,4],[1439,5,824,5],[1439,30,824,30],[1439,31,824,31],[1439,75,824,75],[1439,95,824,95],[1439,96,824,96],[1440,4,825,4],[1440,5,825,5],[1440,27,825,27],[1440,28,825,28],[1440,69,825,69],[1440,94,825,94],[1440,95,825,95],[1441,4,826,4],[1441,5,826,5],[1441,22,826,22],[1441,23,826,23],[1441,59,826,59],[1441,73,826,73],[1441,74,826,74],[1443,4,827,4],[1444,4,828,4],[1445,4,829,4],[1446,4,830,4],[1446,5,830,5],[1446,35,830,35],[1446,36,830,36],[1446,85,830,85],[1446,111,830,111],[1446,112,830,112],[1447,4,831,4],[1447,5,831,5],[1447,26,831,26],[1447,27,831,27],[1447,67,831,67],[1447,94,831,94],[1447,95,831,95],[1449,4,832,4],[1450,4,833,4],[1450,5,833,5],[1450,30,833,30],[1450,31,833,31],[1450,75,833,75],[1450,100,833,100],[1450,101,833,101],[1452,4,834,4],[1453,4,835,4],[1453,5,835,5],[1453,27,835,27],[1453,28,835,28],[1453,69,835,69],[1453,97,835,97],[1453,98,835,98],[1455,4,836,4],[1456,4,837,4],[1456,5,837,5],[1456,37,837,37],[1456,38,837,38],[1456,89,837,89],[1456,119,837,119],[1456,120,837,120],[1457,4,838,4],[1457,5,838,5],[1457,31,838,31],[1457,32,838,32],[1457,77,838,77],[1457,106,838,106],[1457,107,838,107],[1458,4,839,4],[1458,5,839,5],[1458,32,839,32],[1458,33,839,33],[1458,79,839,79],[1458,106,839,106],[1458,107,839,107],[1459,4,840,4],[1459,5,840,5],[1459,37,840,37],[1459,38,840,38],[1459,89,840,89],[1459,119,840,119],[1459,120,840,120],[1460,4,841,4],[1460,5,841,5],[1460,27,841,27],[1460,28,841,28],[1460,69,841,69],[1460,99,841,99],[1460,100,841,100],[1461,4,842,4],[1461,5,842,5],[1461,35,842,35],[1461,36,842,36],[1461,85,842,85],[1461,123,842,123],[1461,124,842,124],[1463,4,843,4],[1464,4,844,4],[1464,5,844,5],[1464,39,844,39],[1464,40,844,40],[1464,93,844,93],[1464,109,844,109],[1464,110,844,110],[1466,4,845,4],[1467,4,846,4],[1467,5,846,5],[1467,28,846,28],[1467,29,846,29],[1467,71,846,71],[1467,94,846,94],[1467,95,846,95],[1468,4,847,4],[1468,5,847,5],[1468,30,847,30],[1468,31,847,31],[1468,75,847,75],[1468,100,847,100],[1468,101,847,101],[1469,4,848,4],[1469,5,848,5],[1469,30,848,30],[1469,31,848,31],[1469,75,848,75],[1469,100,848,100],[1469,101,848,101],[1470,4,849,4],[1470,5,849,5],[1470,31,849,31],[1470,32,849,32],[1470,77,849,77],[1470,103,849,103],[1470,104,849,104],[1471,4,850,4],[1471,5,850,5],[1471,26,850,26],[1471,27,850,27],[1471,67,850,67],[1471,88,850,88],[1471,89,850,89],[1472,4,851,4],[1472,5,851,5],[1472,32,851,32],[1472,33,851,33],[1472,79,851,79],[1472,106,851,106],[1472,107,851,107],[1473,4,852,4],[1473,5,852,5],[1473,32,852,32],[1473,33,852,33],[1473,79,852,79],[1473,106,852,106],[1473,107,852,107],[1474,4,853,4],[1474,5,853,5],[1474,23,853,23],[1474,24,853,24],[1474,61,853,61],[1474,79,853,79],[1474,80,853,80],[1475,2,854,0],[1475,3,854,1],[1477,2,856,0],[1478,0,857,0],[1479,0,858,0],[1480,0,859,0],[1481,0,860,0],[1482,0,861,0],[1483,0,862,0],[1484,0,863,0],[1485,0,864,0],[1486,0,865,0],[1487,0,866,0],[1488,0,867,0],[1489,0,868,0],[1490,0,869,0],[1491,0,870,0],[1492,0,871,0],[1493,2,872,0],[1493,8,872,6,"CookieAuthProxiedEndpoints"],[1493,34,872,32],[1493,37,872,35],[1493,38,873,4],[1493,74,873,40],[1493,75,873,41],[1493,117,874,4],[1493,151,874,38],[1493,152,874,39],[1493,192,875,4],[1493,220,875,32],[1493,221,875,33],[1493,254,876,4],[1493,287,876,37],[1493,288,876,38],[1493,326,877,4],[1493,362,877,40],[1493,363,877,41],[1493,405,878,4],[1493,416,878,15],[1493,417,878,16],[1493,438,879,1],[1494,2,880,0],[1494,8,880,6,"DEFAULT_API_TIMEOUT_MS"],[1494,30,880,28],[1494,33,880,31],[1494,37,880,35,"Delay"],[1494,42,880,40],[1494,43,880,41],[1494,48,880,46],[1494,50,880,48],[1494,55,880,53],[1494,56,880,54],[1495,2,881,0],[1495,11,881,9,"_addTidIfNecessary"],[1495,29,881,27,"_addTidIfNecessary"],[1495,30,881,28,"auth"],[1495,34,881,32],[1495,36,881,34,"request"],[1495,43,881,41],[1495,45,881,43],[1496,4,882,4],[1496,8,882,8,"auth"],[1496,12,882,12],[1496,13,882,13,"tenantId"],[1496,21,882,21],[1496,25,882,25],[1496,26,882,26,"request"],[1496,33,882,33],[1496,34,882,34,"tenantId"],[1496,42,882,42],[1496,44,882,44],[1497,6,883,8],[1497,13,883,15],[1498,8,884,12],[1498,11,884,15,"request"],[1498,18,884,22],[1499,8,885,12,"tenantId"],[1499,16,885,20],[1499,18,885,22,"auth"],[1499,22,885,26],[1499,23,885,27,"tenantId"],[1500,6,886,8],[1500,7,886,9],[1501,4,887,4],[1502,4,888,4],[1502,11,888,11,"request"],[1502,18,888,18],[1503,2,889,0],[1504,2,890,0],[1504,17,890,15,"_performApiRequest"],[1504,35,890,33,"_performApiRequest"],[1504,36,890,34,"auth"],[1504,40,890,38],[1504,42,890,40,"method"],[1504,48,890,46],[1504,50,890,48,"path"],[1504,54,890,52],[1504,56,890,54,"request"],[1504,63,890,61],[1504,65,890,63,"customErrorMap"],[1504,79,890,77],[1504,82,890,80],[1504,83,890,81],[1504,84,890,82],[1504,86,890,84],[1505,4,891,4],[1505,11,891,11,"_performFetchWithErrorHandling"],[1505,41,891,41],[1505,42,891,42,"auth"],[1505,46,891,46],[1505,48,891,48,"customErrorMap"],[1505,62,891,62],[1505,64,891,64],[1505,76,891,76],[1506,6,892,8],[1506,10,892,12,"body"],[1506,14,892,16],[1506,17,892,19],[1506,18,892,20],[1506,19,892,21],[1507,6,893,8],[1507,10,893,12,"params"],[1507,16,893,18],[1507,19,893,21],[1507,20,893,22],[1507,21,893,23],[1508,6,894,8],[1508,10,894,12,"request"],[1508,17,894,19],[1508,19,894,21],[1509,8,895,12],[1509,12,895,16,"method"],[1509,18,895,22],[1509,23,895,27],[1509,28,895,32],[1509,29,895,33],[1509,51,895,55],[1510,10,896,16,"params"],[1510,16,896,22],[1510,19,896,25,"request"],[1510,26,896,32],[1511,8,897,12],[1511,9,897,13],[1511,15,898,17],[1512,10,899,16,"body"],[1512,14,899,20],[1512,17,899,23],[1513,12,900,20,"body"],[1513,16,900,24],[1513,18,900,26,"JSON"],[1513,22,900,30],[1513,23,900,31,"stringify"],[1513,32,900,40],[1513,33,900,41,"request"],[1513,40,900,48],[1514,10,901,16],[1514,11,901,17],[1515,8,902,12],[1516,6,903,8],[1517,6,904,8],[1517,12,904,14,"query"],[1517,17,904,19],[1517,20,904,22],[1517,24,904,22,"querystring"],[1517,37,904,33],[1517,38,904,33,"querystring"],[1517,49,904,33],[1517,51,904,34],[1518,8,905,12,"key"],[1518,11,905,15],[1518,13,905,17,"auth"],[1518,17,905,21],[1518,18,905,22,"config"],[1518,24,905,28],[1518,25,905,29,"apiKey"],[1518,31,905,35],[1519,8,906,12],[1519,11,906,15,"params"],[1520,6,907,8],[1520,7,907,9],[1520,8,907,10],[1520,9,907,11,"slice"],[1520,14,907,16],[1520,15,907,17],[1520,16,907,18],[1520,17,907,19],[1521,6,908,8],[1521,12,908,14,"headers"],[1521,19,908,21],[1521,22,908,24],[1521,28,908,30,"auth"],[1521,32,908,34],[1521,33,908,35,"_getAdditionalHeaders"],[1521,54,908,56],[1521,55,908,57],[1521,56,908,58],[1522,6,909,8,"headers"],[1522,13,909,15],[1522,14,909,16],[1522,28,909,30],[1522,29,909,31],[1522,59,909,61],[1522,62,909,64],[1522,80,909,82],[1523,6,910,8],[1523,10,910,12,"auth"],[1523,14,910,16],[1523,15,910,17,"languageCode"],[1523,27,910,29],[1523,29,910,31],[1524,8,911,12,"headers"],[1524,15,911,19],[1524,16,911,20],[1524,35,911,39],[1524,36,911,40],[1524,71,911,75],[1524,74,911,78,"auth"],[1524,78,911,82],[1524,79,911,83,"languageCode"],[1524,91,911,95],[1525,6,912,8],[1526,6,913,8],[1526,12,913,14,"fetchArgs"],[1526,21,913,23],[1526,24,913,26],[1527,8,914,12,"method"],[1527,14,914,18],[1528,8,915,12,"headers"],[1528,15,915,19],[1529,8,916,12],[1529,11,916,15,"body"],[1530,6,917,8],[1530,7,917,9],[1531,6,918,8],[1532,0,919,0],[1533,0,920,0],[1534,0,921,0],[1535,6,922,8],[1535,10,922,12],[1535,11,922,13],[1535,15,922,13,"isCloudflareWorker"],[1535,28,922,31],[1535,29,922,31,"isCloudflareWorker"],[1535,47,922,31],[1535,49,922,32],[1535,50,922,33],[1535,52,922,35],[1536,8,923,12,"fetchArgs"],[1536,17,923,21],[1536,18,923,22,"referrerPolicy"],[1536,32,923,36],[1536,35,923,39],[1536,48,923,52],[1537,6,924,8],[1538,6,925,8],[1538,10,925,12,"auth"],[1538,14,925,16],[1538,15,925,17,"emulatorConfig"],[1538,29,925,31],[1538,33,925,35],[1538,37,925,35,"isCloudWorkstation"],[1538,50,925,53],[1538,51,925,53,"isCloudWorkstation"],[1538,69,925,53],[1538,71,925,54,"auth"],[1538,75,925,58],[1538,76,925,59,"emulatorConfig"],[1538,90,925,73],[1538,91,925,74,"host"],[1538,95,925,78],[1538,96,925,79],[1538,98,925,81],[1539,8,926,12,"fetchArgs"],[1539,17,926,21],[1539,18,926,22,"credentials"],[1539,29,926,33],[1539,32,926,36],[1539,41,926,45],[1540,6,927,8],[1541,6,928,8],[1541,13,928,15,"FetchProvider"],[1541,26,928,28],[1541,27,928,29,"fetch"],[1541,32,928,34],[1541,33,928,35],[1541,34,928,36],[1541,35,928,37],[1541,41,928,43,"_getFinalTarget"],[1541,56,928,58],[1541,57,928,59,"auth"],[1541,61,928,63],[1541,63,928,65,"auth"],[1541,67,928,69],[1541,68,928,70,"config"],[1541,74,928,76],[1541,75,928,77,"apiHost"],[1541,82,928,84],[1541,84,928,86,"path"],[1541,88,928,90],[1541,90,928,92,"query"],[1541,95,928,97],[1541,96,928,98],[1541,98,928,100,"fetchArgs"],[1541,107,928,109],[1541,108,928,110],[1542,4,929,4],[1542,5,929,5],[1542,6,929,6],[1543,2,930,0],[1544,2,931,0],[1544,17,931,15,"_performFetchWithErrorHandling"],[1544,47,931,45,"_performFetchWithErrorHandling"],[1544,48,931,46,"auth"],[1544,52,931,50],[1544,54,931,52,"customErrorMap"],[1544,68,931,66],[1544,70,931,68,"fetchFn"],[1544,77,931,75],[1544,79,931,77],[1545,4,932,4,"auth"],[1545,8,932,8],[1545,9,932,9,"_canInitEmulator"],[1545,25,932,25],[1545,28,932,28],[1545,33,932,33],[1546,4,933,4],[1546,10,933,10,"errorMap"],[1546,18,933,18],[1546,21,933,21],[1547,6,933,23],[1547,9,933,26,"SERVER_ERROR_MAP"],[1547,25,933,42],[1548,6,933,44],[1548,9,933,47,"customErrorMap"],[1549,4,933,62],[1549,5,933,63],[1550,4,934,4],[1550,8,934,8],[1551,6,935,8],[1551,12,935,14,"networkTimeout"],[1551,26,935,28],[1551,29,935,31],[1551,33,935,35,"NetworkTimeout"],[1551,47,935,49],[1551,48,935,50,"auth"],[1551,52,935,54],[1551,53,935,55],[1552,6,936,8],[1552,12,936,14,"response"],[1552,20,936,22],[1552,23,936,25],[1552,29,936,31,"Promise"],[1552,36,936,38],[1552,37,936,39,"race"],[1552,41,936,43],[1552,42,936,44],[1552,43,937,12,"fetchFn"],[1552,50,937,19],[1552,51,937,20],[1552,52,937,21],[1552,54,938,12,"networkTimeout"],[1552,68,938,26],[1552,69,938,27,"promise"],[1552,76,938,34],[1552,77,939,9],[1552,78,939,10],[1553,6,940,8],[1554,6,941,8],[1555,6,942,8,"networkTimeout"],[1555,20,942,22],[1555,21,942,23,"clearNetworkTimeout"],[1555,40,942,42],[1555,41,942,43],[1555,42,942,44],[1556,6,943,8],[1556,12,943,14,"json"],[1556,16,943,18],[1556,19,943,21],[1556,25,943,27,"response"],[1556,33,943,35],[1556,34,943,36,"json"],[1556,38,943,40],[1556,39,943,41],[1556,40,943,42],[1557,6,944,8],[1557,10,944,12],[1557,28,944,30],[1557,32,944,34,"json"],[1557,36,944,38],[1557,38,944,40],[1558,8,945,12],[1558,14,945,18,"_makeTaggedError"],[1558,30,945,34],[1558,31,945,35,"auth"],[1558,35,945,39],[1558,37,945,41],[1558,79,945,83],[1558,80,945,84],[1558,119,945,123,"json"],[1558,123,945,127],[1558,124,945,128],[1559,6,946,8],[1560,6,947,8],[1560,10,947,12,"response"],[1560,18,947,20],[1560,19,947,21,"ok"],[1560,21,947,23],[1560,25,947,27],[1560,27,947,29],[1560,41,947,43],[1560,45,947,47,"json"],[1560,49,947,51],[1560,50,947,52],[1560,52,947,54],[1561,8,948,12],[1561,15,948,19,"json"],[1561,19,948,23],[1562,6,949,8],[1562,7,949,9],[1562,13,950,13],[1563,8,951,12],[1563,14,951,18,"errorMessage"],[1563,26,951,30],[1563,29,951,33,"response"],[1563,37,951,41],[1563,38,951,42,"ok"],[1563,40,951,44],[1563,43,951,47,"json"],[1563,47,951,51],[1563,48,951,52,"errorMessage"],[1563,60,951,64],[1563,63,951,67,"json"],[1563,67,951,71],[1563,68,951,72,"error"],[1563,73,951,77],[1563,74,951,78,"message"],[1563,81,951,85],[1564,8,952,12],[1564,14,952,18],[1564,15,952,19,"serverErrorCode"],[1564,30,952,34],[1564,32,952,36,"serverErrorMessage"],[1564,50,952,54],[1564,51,952,55],[1564,54,952,58,"errorMessage"],[1564,66,952,70],[1564,67,952,71,"split"],[1564,72,952,76],[1564,73,952,77],[1564,78,952,82],[1564,79,952,83],[1565,8,953,12],[1565,12,953,16,"serverErrorCode"],[1565,27,953,31],[1565,32,953,36],[1565,66,953,70],[1565,67,953,71],[1565,119,953,123],[1566,10,954,16],[1566,16,954,22,"_makeTaggedError"],[1566,32,954,38],[1566,33,954,39,"auth"],[1566,37,954,43],[1566,39,954,45],[1566,66,954,72],[1566,67,954,73],[1566,114,954,120,"json"],[1566,118,954,124],[1566,119,954,125],[1567,8,955,12],[1567,9,955,13],[1567,15,956,17],[1567,19,956,21,"serverErrorCode"],[1567,34,956,36],[1567,39,956,41],[1567,53,956,55],[1567,54,956,56],[1567,86,956,88],[1568,10,957,16],[1568,16,957,22,"_makeTaggedError"],[1568,32,957,38],[1568,33,957,39,"auth"],[1568,37,957,43],[1568,39,957,45],[1568,61,957,67],[1568,62,957,68],[1568,96,957,102,"json"],[1568,100,957,106],[1568,101,957,107],[1569,8,958,12],[1569,9,958,13],[1569,15,959,17],[1569,19,959,21,"serverErrorCode"],[1569,34,959,36],[1569,39,959,41],[1569,54,959,56],[1569,55,959,57],[1569,88,959,90],[1570,10,960,16],[1570,16,960,22,"_makeTaggedError"],[1570,32,960,38],[1570,33,960,39,"auth"],[1570,37,960,43],[1570,39,960,45],[1570,54,960,60],[1570,55,960,61],[1570,90,960,96,"json"],[1570,94,960,100],[1570,95,960,101],[1571,8,961,12],[1572,8,962,12],[1572,14,962,18,"authError"],[1572,23,962,27],[1572,26,962,30,"errorMap"],[1572,34,962,38],[1572,35,962,39,"serverErrorCode"],[1572,50,962,54],[1572,51,962,55],[1572,55,963,16,"serverErrorCode"],[1572,70,963,31],[1572,71,964,21,"toLowerCase"],[1572,82,964,32],[1572,83,964,33],[1572,84,964,34],[1572,85,965,21,"replace"],[1572,92,965,28],[1572,93,965,29],[1572,102,965,38],[1572,104,965,40],[1572,107,965,43],[1572,108,965,44],[1573,8,966,12],[1573,12,966,16,"serverErrorMessage"],[1573,30,966,34],[1573,32,966,36],[1574,10,967,16],[1574,16,967,22,"_errorWithCustomMessage"],[1574,39,967,45],[1574,40,967,46,"auth"],[1574,44,967,50],[1574,46,967,52,"authError"],[1574,55,967,61],[1574,57,967,63,"serverErrorMessage"],[1574,75,967,81],[1574,76,967,82],[1575,8,968,12],[1575,9,968,13],[1575,15,969,17],[1576,10,970,16,"_fail"],[1576,15,970,21],[1576,16,970,22,"auth"],[1576,20,970,26],[1576,22,970,28,"authError"],[1576,31,970,37],[1576,32,970,38],[1577,8,971,12],[1578,6,972,8],[1579,4,973,4],[1579,5,973,5],[1579,6,974,4],[1579,13,974,11,"e"],[1579,14,974,12],[1579,16,974,14],[1580,6,975,8],[1580,10,975,12,"e"],[1580,11,975,13],[1580,23,975,25,"FirebaseError"],[1580,36,975,38],[1580,37,975,38,"FirebaseError"],[1580,50,975,38],[1580,52,975,40],[1581,8,976,12],[1581,14,976,18,"e"],[1581,15,976,19],[1582,6,977,8],[1583,6,978,8],[1584,6,979,8],[1585,6,980,8],[1586,6,981,8,"_fail"],[1586,11,981,13],[1586,12,981,14,"auth"],[1586,16,981,18],[1586,18,981,20],[1586,42,981,44],[1586,43,981,45],[1586,87,981,89],[1587,8,981,91],[1587,17,981,100],[1587,19,981,102,"String"],[1587,25,981,108],[1587,26,981,109,"e"],[1587,27,981,110],[1588,6,981,112],[1588,7,981,113],[1588,8,981,114],[1589,4,982,4],[1590,2,983,0],[1591,2,984,0],[1591,17,984,15,"_performSignInRequest"],[1591,38,984,36,"_performSignInRequest"],[1591,39,984,37,"auth"],[1591,43,984,41],[1591,45,984,43,"method"],[1591,51,984,49],[1591,53,984,51,"path"],[1591,57,984,55],[1591,59,984,57,"request"],[1591,66,984,64],[1591,68,984,66,"customErrorMap"],[1591,82,984,80],[1591,85,984,83],[1591,86,984,84],[1591,87,984,85],[1591,89,984,87],[1592,4,985,4],[1592,10,985,10,"serverResponse"],[1592,24,985,24],[1592,27,985,27],[1592,33,985,33,"_performApiRequest"],[1592,51,985,51],[1592,52,985,52,"auth"],[1592,56,985,56],[1592,58,985,58,"method"],[1592,64,985,64],[1592,66,985,66,"path"],[1592,70,985,70],[1592,72,985,72,"request"],[1592,79,985,79],[1592,81,985,81,"customErrorMap"],[1592,95,985,95],[1592,96,985,96],[1593,4,986,4],[1593,8,986,8],[1593,30,986,30],[1593,34,986,34,"serverResponse"],[1593,48,986,48],[1593,50,986,50],[1594,6,987,8,"_fail"],[1594,11,987,13],[1594,12,987,14,"auth"],[1594,16,987,18],[1594,18,987,20],[1594,46,987,48],[1594,47,987,49],[1594,81,987,83],[1595,8,988,12,"_serverResponse"],[1595,23,988,27],[1595,25,988,29,"serverResponse"],[1596,6,989,8],[1596,7,989,9],[1596,8,989,10],[1597,4,990,4],[1598,4,991,4],[1598,11,991,11,"serverResponse"],[1598,25,991,25],[1599,2,992,0],[1600,2,993,0],[1600,17,993,15,"_getFinalTarget"],[1600,32,993,30,"_getFinalTarget"],[1600,33,993,31,"auth"],[1600,37,993,35],[1600,39,993,37,"host"],[1600,43,993,41],[1600,45,993,43,"path"],[1600,49,993,47],[1600,51,993,49,"query"],[1600,56,993,54],[1600,58,993,56],[1601,4,994,4],[1601,10,994,10,"base"],[1601,14,994,14],[1601,17,994,17],[1601,20,994,20,"host"],[1601,24,994,24],[1601,27,994,27,"path"],[1601,31,994,31],[1601,35,994,35,"query"],[1601,40,994,40],[1601,42,994,42],[1602,4,995,4],[1602,10,995,10,"authInternal"],[1602,22,995,22],[1602,25,995,25,"auth"],[1602,29,995,29],[1603,4,996,4],[1603,10,996,10,"finalTarget"],[1603,21,996,21],[1603,24,996,24,"authInternal"],[1603,36,996,36],[1603,37,996,37,"config"],[1603,43,996,43],[1603,44,996,44,"emulator"],[1603,52,996,52],[1603,55,997,10,"_emulatorUrl"],[1603,67,997,22],[1603,68,997,23,"auth"],[1603,72,997,27],[1603,73,997,28,"config"],[1603,79,997,34],[1603,81,997,36,"base"],[1603,85,997,40],[1603,86,997,41],[1603,89,998,10],[1603,92,998,13,"auth"],[1603,96,998,17],[1603,97,998,18,"config"],[1603,103,998,24],[1603,104,998,25,"apiScheme"],[1603,113,998,34],[1603,119,998,40,"base"],[1603,123,998,44],[1603,125,998,46],[1604,4,999,4],[1605,4,1000,4],[1606,4,1001,4],[1607,4,1002,4],[1607,8,1002,8,"CookieAuthProxiedEndpoints"],[1607,34,1002,34],[1607,35,1002,35,"includes"],[1607,43,1002,43],[1607,44,1002,44,"path"],[1607,48,1002,48],[1607,49,1002,49],[1607,51,1002,51],[1608,6,1003,8],[1609,6,1004,8],[1610,6,1005,8],[1610,12,1005,14,"authInternal"],[1610,24,1005,26],[1610,25,1005,27,"_persistenceManagerAvailable"],[1610,53,1005,55],[1611,6,1006,8],[1611,10,1006,12,"authInternal"],[1611,22,1006,24],[1611,23,1006,25,"_getPersistenceType"],[1611,42,1006,44],[1611,43,1006,45],[1611,44,1006,46],[1611,49,1006,51],[1611,57,1006,59],[1611,58,1006,60],[1611,88,1006,90],[1612,8,1007,12],[1612,14,1007,18,"cookiePersistence"],[1612,31,1007,35],[1612,34,1007,38,"authInternal"],[1612,46,1007,50],[1612,47,1007,51,"_getPersistence"],[1612,62,1007,66],[1612,63,1007,67],[1612,64,1007,68],[1613,8,1008,12],[1613,15,1008,19,"cookiePersistence"],[1613,32,1008,36],[1613,33,1008,37,"_getFinalTarget"],[1613,48,1008,52],[1613,49,1008,53,"finalTarget"],[1613,60,1008,64],[1613,61,1008,65],[1613,62,1008,66,"toString"],[1613,70,1008,74],[1613,71,1008,75],[1613,72,1008,76],[1614,6,1009,8],[1615,4,1010,4],[1616,4,1011,4],[1616,11,1011,11,"finalTarget"],[1616,22,1011,22],[1617,2,1012,0],[1618,2,1013,0],[1618,11,1013,9,"_parseEnforcementState"],[1618,33,1013,31,"_parseEnforcementState"],[1618,34,1013,32,"enforcementStateStr"],[1618,53,1013,51],[1618,55,1013,53],[1619,4,1014,4],[1619,12,1014,12,"enforcementStateStr"],[1619,31,1014,31],[1620,6,1015,8],[1620,11,1015,13],[1620,20,1015,22],[1621,8,1016,12],[1621,15,1016,19],[1621,24,1016,28],[1621,25,1016,29],[1622,6,1017,8],[1622,11,1017,13],[1622,18,1017,20],[1623,8,1018,12],[1623,15,1018,19],[1623,22,1018,26],[1623,23,1018,27],[1624,6,1019,8],[1624,11,1019,13],[1624,16,1019,18],[1625,8,1020,12],[1625,15,1020,19],[1625,20,1020,24],[1625,21,1020,25],[1626,6,1021,8],[1627,8,1022,12],[1627,15,1022,19],[1627,46,1022,50],[1627,47,1022,51],[1628,4,1023,4],[1629,2,1024,0],[1630,2,1025,0],[1630,8,1025,6,"NetworkTimeout"],[1630,22,1025,20],[1630,23,1025,21],[1631,4,1026,4,"clearNetworkTimeout"],[1631,23,1026,23,"clearNetworkTimeout"],[1631,24,1026,23],[1631,26,1026,26],[1632,6,1027,8,"clearTimeout"],[1632,18,1027,20],[1632,19,1027,21],[1632,23,1027,25],[1632,24,1027,26,"timer"],[1632,29,1027,31],[1632,30,1027,32],[1633,4,1028,4],[1634,4,1029,4,"constructor"],[1634,15,1029,15,"constructor"],[1634,16,1029,16,"auth"],[1634,20,1029,20],[1634,22,1029,22],[1635,6,1030,8],[1635,10,1030,12],[1635,11,1030,13,"auth"],[1635,15,1030,17],[1635,18,1030,20,"auth"],[1635,22,1030,24],[1636,6,1031,8],[1637,6,1032,8],[1638,6,1033,8],[1639,6,1034,8],[1639,10,1034,12],[1639,11,1034,13,"timer"],[1639,16,1034,18],[1639,19,1034,21],[1639,23,1034,25],[1640,6,1035,8],[1640,10,1035,12],[1640,11,1035,13,"promise"],[1640,18,1035,20],[1640,21,1035,23],[1640,25,1035,27,"Promise"],[1640,32,1035,34],[1640,33,1035,35],[1640,34,1035,36,"_"],[1640,35,1035,37],[1640,37,1035,39,"reject"],[1640,43,1035,45],[1640,48,1035,50],[1641,8,1036,12],[1641,12,1036,16],[1641,13,1036,17,"timer"],[1641,18,1036,22],[1641,21,1036,25,"setTimeout"],[1641,31,1036,35],[1641,32,1036,36],[1641,38,1036,42],[1642,10,1037,16],[1642,17,1037,23,"reject"],[1642,23,1037,29],[1642,24,1037,30,"_createError"],[1642,36,1037,42],[1642,37,1037,43],[1642,41,1037,47],[1642,42,1037,48,"auth"],[1642,46,1037,52],[1642,48,1037,54],[1642,72,1037,78],[1642,73,1037,79],[1642,115,1037,121],[1642,116,1037,122],[1642,117,1037,123],[1643,8,1038,12],[1643,9,1038,13],[1643,11,1038,15,"DEFAULT_API_TIMEOUT_MS"],[1643,33,1038,37],[1643,34,1038,38,"get"],[1643,37,1038,41],[1643,38,1038,42],[1643,39,1038,43],[1643,40,1038,44],[1644,6,1039,8],[1644,7,1039,9],[1644,8,1039,10],[1645,4,1040,4],[1646,2,1041,0],[1647,2,1042,0],[1647,11,1042,9,"_makeTaggedError"],[1647,27,1042,25,"_makeTaggedError"],[1647,28,1042,26,"auth"],[1647,32,1042,30],[1647,34,1042,32,"code"],[1647,38,1042,36],[1647,40,1042,38,"response"],[1647,48,1042,46],[1647,50,1042,48],[1648,4,1043,4],[1648,10,1043,10,"errorParams"],[1648,21,1043,21],[1648,24,1043,24],[1649,6,1044,8,"appName"],[1649,13,1044,15],[1649,15,1044,17,"auth"],[1649,19,1044,21],[1649,20,1044,22,"name"],[1650,4,1045,4],[1650,5,1045,5],[1651,4,1046,4],[1651,8,1046,8,"response"],[1651,16,1046,16],[1651,17,1046,17,"email"],[1651,22,1046,22],[1651,24,1046,24],[1652,6,1047,8,"errorParams"],[1652,17,1047,19],[1652,18,1047,20,"email"],[1652,23,1047,25],[1652,26,1047,28,"response"],[1652,34,1047,36],[1652,35,1047,37,"email"],[1652,40,1047,42],[1653,4,1048,4],[1654,4,1049,4],[1654,8,1049,8,"response"],[1654,16,1049,16],[1654,17,1049,17,"phoneNumber"],[1654,28,1049,28],[1654,30,1049,30],[1655,6,1050,8,"errorParams"],[1655,17,1050,19],[1655,18,1050,20,"phoneNumber"],[1655,29,1050,31],[1655,32,1050,34,"response"],[1655,40,1050,42],[1655,41,1050,43,"phoneNumber"],[1655,52,1050,54],[1656,4,1051,4],[1657,4,1052,4],[1657,10,1052,10,"error"],[1657,15,1052,15],[1657,18,1052,18,"_createError"],[1657,30,1052,30],[1657,31,1052,31,"auth"],[1657,35,1052,35],[1657,37,1052,37,"code"],[1657,41,1052,41],[1657,43,1052,43,"errorParams"],[1657,54,1052,54],[1657,55,1052,55],[1658,4,1053,4],[1659,4,1054,4,"error"],[1659,9,1054,9],[1659,10,1054,10,"customData"],[1659,20,1054,20],[1659,21,1054,21,"_tokenResponse"],[1659,35,1054,35],[1659,38,1054,38,"response"],[1659,46,1054,46],[1660,4,1055,4],[1660,11,1055,11,"error"],[1660,16,1055,16],[1661,2,1056,0],[1663,2,1058,0],[1664,0,1059,0],[1665,0,1060,0],[1666,0,1061,0],[1667,0,1062,0],[1668,0,1063,0],[1669,0,1064,0],[1670,0,1065,0],[1671,0,1066,0],[1672,0,1067,0],[1673,0,1068,0],[1674,0,1069,0],[1675,0,1070,0],[1676,0,1071,0],[1677,0,1072,0],[1678,0,1073,0],[1679,2,1074,0],[1679,11,1074,9,"isV2"],[1679,15,1074,13,"isV2"],[1679,16,1074,14,"grecaptcha"],[1679,26,1074,24],[1679,28,1074,26],[1680,4,1075,4],[1680,11,1075,12,"grecaptcha"],[1680,21,1075,22],[1680,26,1075,27,"undefined"],[1680,35,1075,36],[1680,39,1076,8,"grecaptcha"],[1680,49,1076,18],[1680,50,1076,19,"getResponse"],[1680,61,1076,30],[1680,66,1076,35,"undefined"],[1680,75,1076,44],[1681,2,1077,0],[1682,2,1078,0],[1682,11,1078,9,"isEnterprise"],[1682,23,1078,21,"isEnterprise"],[1682,24,1078,22,"grecaptcha"],[1682,34,1078,32],[1682,36,1078,34],[1683,4,1079,4],[1683,11,1079,12,"grecaptcha"],[1683,21,1079,22],[1683,26,1079,27,"undefined"],[1683,35,1079,36],[1683,39,1080,8,"grecaptcha"],[1683,49,1080,18],[1683,50,1080,19,"enterprise"],[1683,60,1080,29],[1683,65,1080,34,"undefined"],[1683,74,1080,43],[1684,2,1081,0],[1685,2,1082,0],[1685,8,1082,6,"RecaptchaConfig"],[1685,23,1082,21],[1685,24,1082,22],[1686,4,1083,4,"constructor"],[1686,15,1083,15,"constructor"],[1686,16,1083,16,"response"],[1686,24,1083,24],[1686,26,1083,26],[1687,6,1084,8],[1688,0,1085,0],[1689,0,1086,0],[1690,6,1087,8],[1690,10,1087,12],[1690,11,1087,13,"siteKey"],[1690,18,1087,20],[1690,21,1087,23],[1690,23,1087,25],[1691,6,1088,8],[1692,0,1089,0],[1693,0,1090,0],[1694,6,1091,8],[1694,10,1091,12],[1694,11,1091,13,"recaptchaEnforcementState"],[1694,36,1091,38],[1694,39,1091,41],[1694,41,1091,43],[1695,6,1092,8],[1695,10,1092,12,"response"],[1695,18,1092,20],[1695,19,1092,21,"recaptchaKey"],[1695,31,1092,33],[1695,36,1092,38,"undefined"],[1695,45,1092,47],[1695,47,1092,49],[1696,8,1093,12],[1696,14,1093,18],[1696,18,1093,22,"Error"],[1696,23,1093,27],[1696,24,1093,28],[1696,48,1093,52],[1696,49,1093,53],[1697,6,1094,8],[1698,6,1095,8],[1699,6,1096,8],[1699,10,1096,12],[1699,11,1096,13,"siteKey"],[1699,18,1096,20],[1699,21,1096,23,"response"],[1699,29,1096,31],[1699,30,1096,32,"recaptchaKey"],[1699,42,1096,44],[1699,43,1096,45,"split"],[1699,48,1096,50],[1699,49,1096,51],[1699,52,1096,54],[1699,53,1096,55],[1699,54,1096,56],[1699,55,1096,57],[1699,56,1096,58],[1700,6,1097,8],[1700,10,1097,12],[1700,11,1097,13,"recaptchaEnforcementState"],[1700,36,1097,38],[1700,39,1097,41,"response"],[1700,47,1097,49],[1700,48,1097,50,"recaptchaEnforcementState"],[1700,73,1097,75],[1701,4,1098,4],[1702,4,1099,4],[1703,0,1100,0],[1704,0,1101,0],[1705,0,1102,0],[1706,0,1103,0],[1707,0,1104,0],[1708,4,1105,4,"getProviderEnforcementState"],[1708,31,1105,31,"getProviderEnforcementState"],[1708,32,1105,32,"providerStr"],[1708,43,1105,43],[1708,45,1105,45],[1709,6,1106,8],[1709,10,1106,12],[1709,11,1106,13],[1709,15,1106,17],[1709,16,1106,18,"recaptchaEnforcementState"],[1709,41,1106,43],[1709,45,1107,12],[1709,49,1107,16],[1709,50,1107,17,"recaptchaEnforcementState"],[1709,75,1107,42],[1709,76,1107,43,"length"],[1709,82,1107,49],[1709,87,1107,54],[1709,88,1107,55],[1709,90,1107,57],[1710,8,1108,12],[1710,15,1108,19],[1710,19,1108,23],[1711,6,1109,8],[1712,6,1110,8],[1712,11,1110,13],[1712,17,1110,19,"recaptchaEnforcementState"],[1712,42,1110,44],[1712,46,1110,48],[1712,50,1110,52],[1712,51,1110,53,"recaptchaEnforcementState"],[1712,76,1110,78],[1712,78,1110,80],[1713,8,1111,12],[1713,12,1111,16,"recaptchaEnforcementState"],[1713,37,1111,41],[1713,38,1111,42,"provider"],[1713,46,1111,50],[1713,50,1112,16,"recaptchaEnforcementState"],[1713,75,1112,41],[1713,76,1112,42,"provider"],[1713,84,1112,50],[1713,89,1112,55,"providerStr"],[1713,100,1112,66],[1713,102,1112,68],[1714,10,1113,16],[1714,17,1113,23,"_parseEnforcementState"],[1714,39,1113,45],[1714,40,1113,46,"recaptchaEnforcementState"],[1714,65,1113,71],[1714,66,1113,72,"enforcementState"],[1714,82,1113,88],[1714,83,1113,89],[1715,8,1114,12],[1716,6,1115,8],[1717,6,1116,8],[1717,13,1116,15],[1717,17,1116,19],[1718,4,1117,4],[1719,4,1118,4],[1720,0,1119,0],[1721,0,1120,0],[1722,0,1121,0],[1723,0,1122,0],[1724,0,1123,0],[1725,4,1124,4,"isProviderEnabled"],[1725,21,1124,21,"isProviderEnabled"],[1725,22,1124,22,"providerStr"],[1725,33,1124,33],[1725,35,1124,35],[1726,6,1125,8],[1726,13,1125,16],[1726,17,1125,20],[1726,18,1125,21,"getProviderEnforcementState"],[1726,45,1125,48],[1726,46,1125,49,"providerStr"],[1726,57,1125,60],[1726,58,1125,61],[1726,63,1126,12],[1726,72,1126,21],[1726,73,1126,22],[1726,107,1127,12],[1726,111,1127,16],[1726,112,1127,17,"getProviderEnforcementState"],[1726,139,1127,44],[1726,140,1127,45,"providerStr"],[1726,151,1127,56],[1726,152,1127,57],[1726,157,1127,62],[1726,164,1127,69],[1726,165,1127,70],[1727,4,1128,4],[1728,4,1129,4],[1729,0,1130,0],[1730,0,1131,0],[1731,0,1132,0],[1732,0,1133,0],[1733,0,1134,0],[1734,4,1135,4,"isAnyProviderEnabled"],[1734,24,1135,24,"isAnyProviderEnabled"],[1734,25,1135,24],[1734,27,1135,27],[1735,6,1136,8],[1735,13,1136,16],[1735,17,1136,20],[1735,18,1136,21,"isProviderEnabled"],[1735,35,1136,38],[1735,36,1136,39],[1735,61,1136,64],[1735,62,1136,65],[1735,113,1136,116],[1735,114,1136,117],[1735,118,1137,12],[1735,122,1137,16],[1735,123,1137,17,"isProviderEnabled"],[1735,140,1137,34],[1735,141,1137,35],[1735,157,1137,51],[1735,158,1137,52],[1735,200,1137,94],[1735,201,1137,95],[1736,4,1138,4],[1737,2,1139,0],[1739,2,1141,0],[1740,0,1142,0],[1741,0,1143,0],[1742,0,1144,0],[1743,0,1145,0],[1744,0,1146,0],[1745,0,1147,0],[1746,0,1148,0],[1747,0,1149,0],[1748,0,1150,0],[1749,0,1151,0],[1750,0,1152,0],[1751,0,1153,0],[1752,0,1154,0],[1753,0,1155,0],[1754,0,1156,0],[1755,2,1157,0],[1755,17,1157,15,"getRecaptchaParams"],[1755,35,1157,33,"getRecaptchaParams"],[1755,36,1157,34,"auth"],[1755,40,1157,38],[1755,42,1157,40],[1756,4,1158,4],[1756,11,1158,12],[1756,12,1158,13],[1756,18,1158,19,"_performApiRequest"],[1756,36,1158,37],[1756,37,1158,38,"auth"],[1756,41,1158,42],[1756,43,1158,44],[1756,48,1158,49],[1756,49,1158,50],[1756,71,1158,72],[1756,92,1158,93],[1756,93,1158,94],[1756,127,1158,128],[1756,128,1158,129],[1756,130,1158,131,"recaptchaSiteKey"],[1756,146,1158,147],[1756,150,1158,151],[1756,152,1158,153],[1757,2,1159,0],[1758,2,1160,0],[1758,17,1160,15,"getRecaptchaConfig"],[1758,35,1160,33,"getRecaptchaConfig"],[1758,36,1160,34,"auth"],[1758,40,1160,38],[1758,42,1160,40,"request"],[1758,49,1160,47],[1758,51,1160,49],[1759,4,1161,4],[1759,11,1161,11,"_performApiRequest"],[1759,29,1161,29],[1759,30,1161,30,"auth"],[1759,34,1161,34],[1759,36,1161,36],[1759,41,1161,41],[1759,42,1161,42],[1759,64,1161,64],[1759,85,1161,85],[1759,86,1161,86],[1759,123,1161,123,"_addTidIfNecessary"],[1759,141,1161,141],[1759,142,1161,142,"auth"],[1759,146,1161,146],[1759,148,1161,148,"request"],[1759,155,1161,155],[1759,156,1161,156],[1759,157,1161,157],[1760,2,1162,0],[1762,2,1164,0],[1763,0,1165,0],[1764,0,1166,0],[1765,0,1167,0],[1766,0,1168,0],[1767,0,1169,0],[1768,0,1170,0],[1769,0,1171,0],[1770,0,1172,0],[1771,0,1173,0],[1772,0,1174,0],[1773,0,1175,0],[1774,0,1176,0],[1775,0,1177,0],[1776,0,1178,0],[1777,0,1179,0],[1778,2,1180,0],[1778,17,1180,15,"deleteAccount"],[1778,30,1180,28,"deleteAccount"],[1778,31,1180,29,"auth"],[1778,35,1180,33],[1778,37,1180,35,"request"],[1778,44,1180,42],[1778,46,1180,44],[1779,4,1181,4],[1779,11,1181,11,"_performApiRequest"],[1779,29,1181,29],[1779,30,1181,30,"auth"],[1779,34,1181,34],[1779,36,1181,36],[1779,42,1181,42],[1779,43,1181,43],[1779,66,1181,66],[1779,87,1181,87],[1779,88,1181,88],[1779,119,1181,119,"request"],[1779,126,1181,126],[1779,127,1181,127],[1780,2,1182,0],[1781,2,1183,0],[1781,17,1183,15,"deleteLinkedAccounts"],[1781,37,1183,35,"deleteLinkedAccounts"],[1781,38,1183,36,"auth"],[1781,42,1183,40],[1781,44,1183,42,"request"],[1781,51,1183,49],[1781,53,1183,51],[1782,4,1184,4],[1782,11,1184,11,"_performApiRequest"],[1782,29,1184,29],[1782,30,1184,30,"auth"],[1782,34,1184,34],[1782,36,1184,36],[1782,42,1184,42],[1782,43,1184,43],[1782,66,1184,66],[1782,87,1184,87],[1782,88,1184,88],[1782,121,1184,121,"request"],[1782,128,1184,128],[1782,129,1184,129],[1783,2,1185,0],[1784,2,1186,0],[1784,17,1186,15,"getAccountInfo"],[1784,31,1186,29,"getAccountInfo"],[1784,32,1186,30,"auth"],[1784,36,1186,34],[1784,38,1186,36,"request"],[1784,45,1186,43],[1784,47,1186,45],[1785,4,1187,4],[1785,11,1187,11,"_performApiRequest"],[1785,29,1187,29],[1785,30,1187,30,"auth"],[1785,34,1187,34],[1785,36,1187,36],[1785,42,1187,42],[1785,43,1187,43],[1785,66,1187,66],[1785,87,1187,87],[1785,88,1187,88],[1785,121,1187,121,"request"],[1785,128,1187,128],[1785,129,1187,129],[1786,2,1188,0],[1788,2,1190,0],[1789,0,1191,0],[1790,0,1192,0],[1791,0,1193,0],[1792,0,1194,0],[1793,0,1195,0],[1794,0,1196,0],[1795,0,1197,0],[1796,0,1198,0],[1797,0,1199,0],[1798,0,1200,0],[1799,0,1201,0],[1800,0,1202,0],[1801,0,1203,0],[1802,0,1204,0],[1803,0,1205,0],[1804,2,1206,0],[1804,11,1206,9,"utcTimestampToDateString"],[1804,35,1206,33,"utcTimestampToDateString"],[1804,36,1206,34,"utcTimestamp"],[1804,48,1206,46],[1804,50,1206,48],[1805,4,1207,4],[1805,8,1207,8],[1805,9,1207,9,"utcTimestamp"],[1805,21,1207,21],[1805,23,1207,23],[1806,6,1208,8],[1806,13,1208,15,"undefined"],[1806,22,1208,24],[1807,4,1209,4],[1808,4,1210,4],[1808,8,1210,8],[1809,6,1211,8],[1810,6,1212,8],[1810,12,1212,14,"date"],[1810,16,1212,18],[1810,19,1212,21],[1810,23,1212,25,"Date"],[1810,27,1212,29],[1810,28,1212,30,"Number"],[1810,34,1212,36],[1810,35,1212,37,"utcTimestamp"],[1810,47,1212,49],[1810,48,1212,50],[1810,49,1212,51],[1811,6,1213,8],[1812,6,1214,8],[1812,10,1214,12],[1812,11,1214,13,"isNaN"],[1812,16,1214,18],[1812,17,1214,19,"date"],[1812,21,1214,23],[1812,22,1214,24,"getTime"],[1812,29,1214,31],[1812,30,1214,32],[1812,31,1214,33],[1812,32,1214,34],[1812,34,1214,36],[1813,8,1215,12],[1814,8,1216,12],[1814,15,1216,19,"date"],[1814,19,1216,23],[1814,20,1216,24,"toUTCString"],[1814,31,1216,35],[1814,32,1216,36],[1814,33,1216,37],[1815,6,1217,8],[1816,4,1218,4],[1816,5,1218,5],[1816,6,1219,4],[1816,13,1219,11,"e"],[1816,14,1219,12],[1816,16,1219,14],[1817,6,1220,8],[1818,4,1220,8],[1819,4,1222,4],[1819,11,1222,11,"undefined"],[1819,20,1222,20],[1820,2,1223,0],[1822,2,1225,0],[1823,0,1226,0],[1824,0,1227,0],[1825,0,1228,0],[1826,0,1229,0],[1827,0,1230,0],[1828,0,1231,0],[1829,0,1232,0],[1830,0,1233,0],[1831,0,1234,0],[1832,0,1235,0],[1833,0,1236,0],[1834,0,1237,0],[1835,0,1238,0],[1836,0,1239,0],[1837,0,1240,0],[1838,2,1241,0],[1839,0,1242,0],[1840,0,1243,0],[1841,0,1244,0],[1842,0,1245,0],[1843,0,1246,0],[1844,0,1247,0],[1845,0,1248,0],[1846,0,1249,0],[1847,0,1250,0],[1848,0,1251,0],[1849,0,1252,0],[1850,2,1253,0],[1850,11,1253,9,"getIdToken"],[1850,21,1253,19,"getIdToken"],[1850,22,1253,20,"user"],[1850,26,1253,24],[1850,28,1253,26,"forceRefresh"],[1850,40,1253,38],[1850,43,1253,41],[1850,48,1253,46],[1850,50,1253,48],[1851,4,1254,4],[1851,11,1254,11],[1851,15,1254,11,"getModularInstance"],[1851,28,1254,29],[1851,29,1254,29,"getModularInstance"],[1851,47,1254,29],[1851,49,1254,30,"user"],[1851,53,1254,34],[1851,54,1254,35],[1851,55,1254,36,"getIdToken"],[1851,65,1254,46],[1851,66,1254,47,"forceRefresh"],[1851,78,1254,59],[1851,79,1254,60],[1852,2,1255,0],[1853,2,1256,0],[1854,0,1257,0],[1855,0,1258,0],[1856,0,1259,0],[1857,0,1260,0],[1858,0,1261,0],[1859,0,1262,0],[1860,0,1263,0],[1861,0,1264,0],[1862,0,1265,0],[1863,0,1266,0],[1864,0,1267,0],[1865,2,1268,0],[1865,17,1268,15,"getIdTokenResult"],[1865,33,1268,31,"getIdTokenResult"],[1865,34,1268,32,"user"],[1865,38,1268,36],[1865,40,1268,38,"forceRefresh"],[1865,52,1268,50],[1865,55,1268,53],[1865,60,1268,58],[1865,62,1268,60],[1866,4,1269,4],[1866,10,1269,10,"userInternal"],[1866,22,1269,22],[1866,25,1269,25],[1866,29,1269,25,"getModularInstance"],[1866,42,1269,43],[1866,43,1269,43,"getModularInstance"],[1866,61,1269,43],[1866,63,1269,44,"user"],[1866,67,1269,48],[1866,68,1269,49],[1867,4,1270,4],[1867,10,1270,10,"token"],[1867,15,1270,15],[1867,18,1270,18],[1867,24,1270,24,"userInternal"],[1867,36,1270,36],[1867,37,1270,37,"getIdToken"],[1867,47,1270,47],[1867,48,1270,48,"forceRefresh"],[1867,60,1270,60],[1867,61,1270,61],[1868,4,1271,4],[1868,10,1271,10,"claims"],[1868,16,1271,16],[1868,19,1271,19,"_parseToken"],[1868,30,1271,30],[1868,31,1271,31,"token"],[1868,36,1271,36],[1868,37,1271,37],[1869,4,1272,4,"_assert"],[1869,11,1272,11],[1869,12,1272,12,"claims"],[1869,18,1272,18],[1869,22,1272,22,"claims"],[1869,28,1272,28],[1869,29,1272,29,"exp"],[1869,32,1272,32],[1869,36,1272,36,"claims"],[1869,42,1272,42],[1869,43,1272,43,"auth_time"],[1869,52,1272,52],[1869,56,1272,56,"claims"],[1869,62,1272,62],[1869,63,1272,63,"iat"],[1869,66,1272,66],[1869,68,1272,68,"userInternal"],[1869,80,1272,80],[1869,81,1272,81,"auth"],[1869,85,1272,85],[1869,87,1272,87],[1869,103,1272,103],[1869,104,1272,104],[1869,138,1272,138],[1869,139,1272,139],[1870,4,1273,4],[1870,10,1273,10,"firebase"],[1870,18,1273,18],[1870,21,1273,21],[1870,28,1273,28,"claims"],[1870,34,1273,34],[1870,35,1273,35,"firebase"],[1870,43,1273,43],[1870,48,1273,48],[1870,56,1273,56],[1870,59,1273,59,"claims"],[1870,65,1273,65],[1870,66,1273,66,"firebase"],[1870,74,1273,74],[1870,77,1273,77,"undefined"],[1870,86,1273,86],[1871,4,1274,4],[1871,10,1274,10,"signInProvider"],[1871,24,1274,24],[1871,27,1274,27,"firebase"],[1871,35,1274,35],[1871,38,1274,38],[1871,56,1274,56],[1871,57,1274,57],[1872,4,1275,4],[1872,11,1275,11],[1873,6,1276,8,"claims"],[1873,12,1276,14],[1874,6,1277,8,"token"],[1874,11,1277,13],[1875,6,1278,8,"authTime"],[1875,14,1278,16],[1875,16,1278,18,"utcTimestampToDateString"],[1875,40,1278,42],[1875,41,1278,43,"secondsStringToMilliseconds"],[1875,68,1278,70],[1875,69,1278,71,"claims"],[1875,75,1278,77],[1875,76,1278,78,"auth_time"],[1875,85,1278,87],[1875,86,1278,88],[1875,87,1278,89],[1876,6,1279,8,"issuedAtTime"],[1876,18,1279,20],[1876,20,1279,22,"utcTimestampToDateString"],[1876,44,1279,46],[1876,45,1279,47,"secondsStringToMilliseconds"],[1876,72,1279,74],[1876,73,1279,75,"claims"],[1876,79,1279,81],[1876,80,1279,82,"iat"],[1876,83,1279,85],[1876,84,1279,86],[1876,85,1279,87],[1877,6,1280,8,"expirationTime"],[1877,20,1280,22],[1877,22,1280,24,"utcTimestampToDateString"],[1877,46,1280,48],[1877,47,1280,49,"secondsStringToMilliseconds"],[1877,74,1280,76],[1877,75,1280,77,"claims"],[1877,81,1280,83],[1877,82,1280,84,"exp"],[1877,85,1280,87],[1877,86,1280,88],[1877,87,1280,89],[1878,6,1281,8,"signInProvider"],[1878,20,1281,22],[1878,22,1281,24,"signInProvider"],[1878,36,1281,38],[1878,40,1281,42],[1878,44,1281,46],[1879,6,1282,8,"signInSecondFactor"],[1879,24,1282,26],[1879,26,1282,28,"firebase"],[1879,34,1282,36],[1879,37,1282,39],[1879,60,1282,62],[1879,61,1282,63],[1879,65,1282,67],[1880,4,1283,4],[1880,5,1283,5],[1881,2,1284,0],[1882,2,1285,0],[1882,11,1285,9,"secondsStringToMilliseconds"],[1882,38,1285,36,"secondsStringToMilliseconds"],[1882,39,1285,37,"seconds"],[1882,46,1285,44],[1882,48,1285,46],[1883,4,1286,4],[1883,11,1286,11,"Number"],[1883,17,1286,17],[1883,18,1286,18,"seconds"],[1883,25,1286,25],[1883,26,1286,26],[1883,29,1286,29],[1883,33,1286,33],[1884,2,1287,0],[1885,2,1288,0],[1885,11,1288,9,"_parseToken"],[1885,22,1288,20,"_parseToken"],[1885,23,1288,21,"token"],[1885,28,1288,26],[1885,30,1288,28],[1886,4,1289,4],[1886,10,1289,10],[1886,11,1289,11,"algorithm"],[1886,20,1289,20],[1886,22,1289,22,"payload"],[1886,29,1289,29],[1886,31,1289,31,"signature"],[1886,40,1289,40],[1886,41,1289,41],[1886,44,1289,44,"token"],[1886,49,1289,49],[1886,50,1289,50,"split"],[1886,55,1289,55],[1886,56,1289,56],[1886,59,1289,59],[1886,60,1289,60],[1887,4,1290,4],[1887,8,1290,8,"algorithm"],[1887,17,1290,17],[1887,22,1290,22,"undefined"],[1887,31,1290,31],[1887,35,1291,8,"payload"],[1887,42,1291,15],[1887,47,1291,20,"undefined"],[1887,56,1291,29],[1887,60,1292,8,"signature"],[1887,69,1292,17],[1887,74,1292,22,"undefined"],[1887,83,1292,31],[1887,85,1292,33],[1888,6,1293,8,"_logError"],[1888,15,1293,17],[1888,16,1293,18],[1888,64,1293,66],[1888,65,1293,67],[1889,6,1294,8],[1889,13,1294,15],[1889,17,1294,19],[1890,4,1295,4],[1891,4,1296,4],[1891,8,1296,8],[1892,6,1297,8],[1892,12,1297,14,"decoded"],[1892,19,1297,21],[1892,22,1297,24],[1892,26,1297,24,"base64Decode"],[1892,39,1297,36],[1892,40,1297,36,"base64Decode"],[1892,52,1297,36],[1892,54,1297,37,"payload"],[1892,61,1297,44],[1892,62,1297,45],[1893,6,1298,8],[1893,10,1298,12],[1893,11,1298,13,"decoded"],[1893,18,1298,20],[1893,20,1298,22],[1894,8,1299,12,"_logError"],[1894,17,1299,21],[1894,18,1299,22],[1894,55,1299,59],[1894,56,1299,60],[1895,8,1300,12],[1895,15,1300,19],[1895,19,1300,23],[1896,6,1301,8],[1897,6,1302,8],[1897,13,1302,15,"JSON"],[1897,17,1302,19],[1897,18,1302,20,"parse"],[1897,23,1302,25],[1897,24,1302,26,"decoded"],[1897,31,1302,33],[1897,32,1302,34],[1898,4,1303,4],[1898,5,1303,5],[1898,6,1304,4],[1898,13,1304,11,"e"],[1898,14,1304,12],[1898,16,1304,14],[1899,6,1305,8,"_logError"],[1899,15,1305,17],[1899,16,1305,18],[1899,58,1305,60],[1899,60,1305,62,"e"],[1899,61,1305,63],[1899,63,1305,65,"toString"],[1899,71,1305,73],[1899,72,1305,74],[1899,73,1305,75],[1899,74,1305,76],[1900,6,1306,8],[1900,13,1306,15],[1900,17,1306,19],[1901,4,1307,4],[1902,2,1308,0],[1903,2,1309,0],[1904,0,1310,0],[1905,0,1311,0],[1906,2,1312,0],[1906,11,1312,9,"_tokenExpiresIn"],[1906,26,1312,24,"_tokenExpiresIn"],[1906,27,1312,25,"token"],[1906,32,1312,30],[1906,34,1312,32],[1907,4,1313,4],[1907,10,1313,10,"parsedToken"],[1907,21,1313,21],[1907,24,1313,24,"_parseToken"],[1907,35,1313,35],[1907,36,1313,36,"token"],[1907,41,1313,41],[1907,42,1313,42],[1908,4,1314,4,"_assert"],[1908,11,1314,11],[1908,12,1314,12,"parsedToken"],[1908,23,1314,23],[1908,25,1314,25],[1908,41,1314,41],[1908,42,1314,42],[1908,76,1314,76],[1908,77,1314,77],[1909,4,1315,4,"_assert"],[1909,11,1315,11],[1909,12,1315,12],[1909,19,1315,19,"parsedToken"],[1909,30,1315,30],[1909,31,1315,31,"exp"],[1909,34,1315,34],[1909,39,1315,39],[1909,50,1315,50],[1909,52,1315,52],[1909,68,1315,68],[1909,69,1315,69],[1909,103,1315,103],[1909,104,1315,104],[1910,4,1316,4,"_assert"],[1910,11,1316,11],[1910,12,1316,12],[1910,19,1316,19,"parsedToken"],[1910,30,1316,30],[1910,31,1316,31,"iat"],[1910,34,1316,34],[1910,39,1316,39],[1910,50,1316,50],[1910,52,1316,52],[1910,68,1316,68],[1910,69,1316,69],[1910,103,1316,103],[1910,104,1316,104],[1911,4,1317,4],[1911,11,1317,11,"Number"],[1911,17,1317,17],[1911,18,1317,18,"parsedToken"],[1911,29,1317,29],[1911,30,1317,30,"exp"],[1911,33,1317,33],[1911,34,1317,34],[1911,37,1317,37,"Number"],[1911,43,1317,43],[1911,44,1317,44,"parsedToken"],[1911,55,1317,55],[1911,56,1317,56,"iat"],[1911,59,1317,59],[1911,60,1317,60],[1912,2,1318,0],[1914,2,1320,0],[1915,0,1321,0],[1916,0,1322,0],[1917,0,1323,0],[1918,0,1324,0],[1919,0,1325,0],[1920,0,1326,0],[1921,0,1327,0],[1922,0,1328,0],[1923,0,1329,0],[1924,0,1330,0],[1925,0,1331,0],[1926,0,1332,0],[1927,0,1333,0],[1928,0,1334,0],[1929,0,1335,0],[1930,2,1336,0],[1930,17,1336,15,"_logoutIfInvalidated"],[1930,37,1336,35,"_logoutIfInvalidated"],[1930,38,1336,36,"user"],[1930,42,1336,40],[1930,44,1336,42,"promise"],[1930,51,1336,49],[1930,53,1336,51,"bypassAuthState"],[1930,68,1336,66],[1930,71,1336,69],[1930,76,1336,74],[1930,78,1336,76],[1931,4,1337,4],[1931,8,1337,8,"bypassAuthState"],[1931,23,1337,23],[1931,25,1337,25],[1932,6,1338,8],[1932,13,1338,15,"promise"],[1932,20,1338,22],[1933,4,1339,4],[1934,4,1340,4],[1934,8,1340,8],[1935,6,1341,8],[1935,13,1341,15],[1935,19,1341,21,"promise"],[1935,26,1341,28],[1936,4,1342,4],[1936,5,1342,5],[1936,6,1343,4],[1936,13,1343,11,"e"],[1936,14,1343,12],[1936,16,1343,14],[1937,6,1344,8],[1937,10,1344,12,"e"],[1937,11,1344,13],[1937,23,1344,25,"FirebaseError"],[1937,36,1344,38],[1937,37,1344,38,"FirebaseError"],[1937,50,1344,38],[1937,54,1344,42,"isUserInvalidated"],[1937,71,1344,59],[1937,72,1344,60,"e"],[1937,73,1344,61],[1937,74,1344,62],[1937,76,1344,64],[1938,8,1345,12],[1938,12,1345,16,"user"],[1938,16,1345,20],[1938,17,1345,21,"auth"],[1938,21,1345,25],[1938,22,1345,26,"currentUser"],[1938,33,1345,37],[1938,38,1345,42,"user"],[1938,42,1345,46],[1938,44,1345,48],[1939,10,1346,16],[1939,16,1346,22,"user"],[1939,20,1346,26],[1939,21,1346,27,"auth"],[1939,25,1346,31],[1939,26,1346,32,"signOut"],[1939,33,1346,39],[1939,34,1346,40],[1939,35,1346,41],[1940,8,1347,12],[1941,6,1348,8],[1942,6,1349,8],[1942,12,1349,14,"e"],[1942,13,1349,15],[1943,4,1350,4],[1944,2,1351,0],[1945,2,1352,0],[1945,11,1352,9,"isUserInvalidated"],[1945,28,1352,26,"isUserInvalidated"],[1945,29,1352,27],[1946,4,1352,29,"code"],[1947,2,1352,34],[1947,3,1352,35],[1947,5,1352,37],[1948,4,1353,4],[1948,11,1353,12,"code"],[1948,15,1353,16],[1948,20,1353,21],[1948,28,1353,29],[1948,43,1353,44],[1948,44,1353,45],[1948,79,1353,80],[1948,83,1354,8,"code"],[1948,87,1354,12],[1948,92,1354,17],[1948,100,1354,25],[1948,120,1354,45],[1948,121,1354,46],[1948,156,1354,81],[1949,2,1355,0],[1951,2,1357,0],[1952,0,1358,0],[1953,0,1359,0],[1954,0,1360,0],[1955,0,1361,0],[1956,0,1362,0],[1957,0,1363,0],[1958,0,1364,0],[1959,0,1365,0],[1960,0,1366,0],[1961,0,1367,0],[1962,0,1368,0],[1963,0,1369,0],[1964,0,1370,0],[1965,0,1371,0],[1966,0,1372,0],[1967,2,1373,0],[1967,8,1373,6,"ProactiveRefresh"],[1967,24,1373,22],[1967,25,1373,23],[1968,4,1374,4,"constructor"],[1968,15,1374,15,"constructor"],[1968,16,1374,16,"user"],[1968,20,1374,20],[1968,22,1374,22],[1969,6,1375,8],[1969,10,1375,12],[1969,11,1375,13,"user"],[1969,15,1375,17],[1969,18,1375,20,"user"],[1969,22,1375,24],[1970,6,1376,8],[1970,10,1376,12],[1970,11,1376,13,"isRunning"],[1970,20,1376,22],[1970,23,1376,25],[1970,28,1376,30],[1971,6,1377,8],[1972,6,1378,8],[1973,6,1379,8],[1974,6,1380,8],[1975,6,1381,8],[1975,10,1381,12],[1975,11,1381,13,"timerId"],[1975,18,1381,20],[1975,21,1381,23],[1975,25,1381,27],[1976,6,1382,8],[1976,10,1382,12],[1976,11,1382,13,"errorBackoff"],[1976,23,1382,25],[1976,26,1382,28],[1976,31,1382,33],[1976,32,1382,34],[1977,4,1383,4],[1978,4,1384,4,"_start"],[1978,10,1384,10,"_start"],[1978,11,1384,10],[1978,13,1384,13],[1979,6,1385,8],[1979,10,1385,12],[1979,14,1385,16],[1979,15,1385,17,"isRunning"],[1979,24,1385,26],[1979,26,1385,28],[1980,8,1386,12],[1981,6,1387,8],[1982,6,1388,8],[1982,10,1388,12],[1982,11,1388,13,"isRunning"],[1982,20,1388,22],[1982,23,1388,25],[1982,27,1388,29],[1983,6,1389,8],[1983,10,1389,12],[1983,11,1389,13,"schedule"],[1983,19,1389,21],[1983,20,1389,22],[1983,21,1389,23],[1984,4,1390,4],[1985,4,1391,4,"_stop"],[1985,9,1391,9,"_stop"],[1985,10,1391,9],[1985,12,1391,12],[1986,6,1392,8],[1986,10,1392,12],[1986,11,1392,13],[1986,15,1392,17],[1986,16,1392,18,"isRunning"],[1986,25,1392,27],[1986,27,1392,29],[1987,8,1393,12],[1988,6,1394,8],[1989,6,1395,8],[1989,10,1395,12],[1989,11,1395,13,"isRunning"],[1989,20,1395,22],[1989,23,1395,25],[1989,28,1395,30],[1990,6,1396,8],[1990,10,1396,12],[1990,14,1396,16],[1990,15,1396,17,"timerId"],[1990,22,1396,24],[1990,27,1396,29],[1990,31,1396,33],[1990,33,1396,35],[1991,8,1397,12,"clearTimeout"],[1991,20,1397,24],[1991,21,1397,25],[1991,25,1397,29],[1991,26,1397,30,"timerId"],[1991,33,1397,37],[1991,34,1397,38],[1992,6,1398,8],[1993,4,1399,4],[1994,4,1400,4,"getInterval"],[1994,15,1400,15,"getInterval"],[1994,16,1400,16,"wasError"],[1994,24,1400,24],[1994,26,1400,26],[1995,6,1401,8],[1995,10,1401,12,"wasError"],[1995,18,1401,20],[1995,20,1401,22],[1996,8,1402,12],[1996,14,1402,18,"interval"],[1996,22,1402,26],[1996,25,1402,29],[1996,29,1402,33],[1996,30,1402,34,"errorBackoff"],[1996,42,1402,46],[1997,8,1403,12],[1997,12,1403,16],[1997,13,1403,17,"errorBackoff"],[1997,25,1403,29],[1997,28,1403,32,"Math"],[1997,32,1403,36],[1997,33,1403,37,"min"],[1997,36,1403,40],[1997,37,1403,41],[1997,41,1403,45],[1997,42,1403,46,"errorBackoff"],[1997,54,1403,58],[1997,57,1403,61],[1997,58,1403,62],[1997,60,1403,64],[1997,66,1403,70],[1997,67,1403,71],[1997,99,1403,103],[1997,100,1403,104],[1998,8,1404,12],[1998,15,1404,19,"interval"],[1998,23,1404,27],[1999,6,1405,8],[1999,7,1405,9],[1999,13,1406,13],[2000,8,1407,12],[2001,8,1408,12],[2001,12,1408,16],[2001,13,1408,17,"errorBackoff"],[2001,25,1408,29],[2001,28,1408,32],[2001,33,1408,37],[2001,34,1408,38],[2002,8,1409,12],[2002,14,1409,18,"expTime"],[2002,21,1409,25],[2002,24,1409,28],[2002,28,1409,32],[2002,29,1409,33,"user"],[2002,33,1409,37],[2002,34,1409,38,"stsTokenManager"],[2002,49,1409,53],[2002,50,1409,54,"expirationTime"],[2002,64,1409,68],[2002,68,1409,72],[2002,69,1409,73],[2003,8,1410,12],[2003,14,1410,18,"interval"],[2003,22,1410,26],[2003,25,1410,29,"expTime"],[2003,32,1410,36],[2003,35,1410,39,"Date"],[2003,39,1410,43],[2003,40,1410,44,"now"],[2003,43,1410,47],[2003,44,1410,48],[2003,45,1410,49],[2003,48,1410,52],[2003,54,1410,58],[2003,55,1410,59],[2004,8,1411,12],[2004,15,1411,19,"Math"],[2004,19,1411,23],[2004,20,1411,24,"max"],[2004,23,1411,27],[2004,24,1411,28],[2004,25,1411,29],[2004,27,1411,31,"interval"],[2004,35,1411,39],[2004,36,1411,40],[2005,6,1412,8],[2006,4,1413,4],[2007,4,1414,4,"schedule"],[2007,12,1414,12,"schedule"],[2007,13,1414,13,"wasError"],[2007,21,1414,21],[2007,24,1414,24],[2007,29,1414,29],[2007,31,1414,31],[2008,6,1415,8],[2008,10,1415,12],[2008,11,1415,13],[2008,15,1415,17],[2008,16,1415,18,"isRunning"],[2008,25,1415,27],[2008,27,1415,29],[2009,8,1416,12],[2010,8,1417,12],[2011,6,1418,8],[2012,6,1419,8],[2012,12,1419,14,"interval"],[2012,20,1419,22],[2012,23,1419,25],[2012,27,1419,29],[2012,28,1419,30,"getInterval"],[2012,39,1419,41],[2012,40,1419,42,"wasError"],[2012,48,1419,50],[2012,49,1419,51],[2013,6,1420,8],[2013,10,1420,12],[2013,11,1420,13,"timerId"],[2013,18,1420,20],[2013,21,1420,23,"setTimeout"],[2013,31,1420,33],[2013,32,1420,34],[2013,44,1420,46],[2014,8,1421,12],[2014,14,1421,18],[2014,18,1421,22],[2014,19,1421,23,"iteration"],[2014,28,1421,32],[2014,29,1421,33],[2014,30,1421,34],[2015,6,1422,8],[2015,7,1422,9],[2015,9,1422,11,"interval"],[2015,17,1422,19],[2015,18,1422,20],[2016,4,1423,4],[2017,4,1424,4],[2017,10,1424,10,"iteration"],[2017,19,1424,19,"iteration"],[2017,20,1424,19],[2017,22,1424,22],[2018,6,1425,8],[2018,10,1425,12],[2019,8,1426,12],[2019,14,1426,18],[2019,18,1426,22],[2019,19,1426,23,"user"],[2019,23,1426,27],[2019,24,1426,28,"getIdToken"],[2019,34,1426,38],[2019,35,1426,39],[2019,39,1426,43],[2019,40,1426,44],[2020,6,1427,8],[2020,7,1427,9],[2020,8,1428,8],[2020,15,1428,15,"e"],[2020,16,1428,16],[2020,18,1428,18],[2021,8,1429,12],[2022,8,1430,12],[2022,12,1430,16,"e"],[2022,13,1430,17],[2022,15,1430,19,"code"],[2022,19,1430,23],[2022,24,1431,16],[2022,32,1431,24],[2022,56,1431,48],[2022,57,1431,49],[2022,101,1431,93],[2022,103,1431,95],[2023,10,1432,16],[2023,14,1432,20],[2023,15,1432,21,"schedule"],[2023,23,1432,29],[2023,24,1432,30],[2023,38,1432,45],[2023,42,1432,49],[2023,43,1432,50],[2024,8,1433,12],[2025,8,1434,12],[2026,6,1435,8],[2027,6,1436,8],[2027,10,1436,12],[2027,11,1436,13,"schedule"],[2027,19,1436,21],[2027,20,1436,22],[2027,21,1436,23],[2028,4,1437,4],[2029,2,1438,0],[2031,2,1440,0],[2032,0,1441,0],[2033,0,1442,0],[2034,0,1443,0],[2035,0,1444,0],[2036,0,1445,0],[2037,0,1446,0],[2038,0,1447,0],[2039,0,1448,0],[2040,0,1449,0],[2041,0,1450,0],[2042,0,1451,0],[2043,0,1452,0],[2044,0,1453,0],[2045,0,1454,0],[2046,0,1455,0],[2047,2,1456,0],[2047,8,1456,6,"UserMetadata"],[2047,20,1456,18],[2047,21,1456,19],[2048,4,1457,4,"constructor"],[2048,15,1457,15,"constructor"],[2048,16,1457,16,"createdAt"],[2048,25,1457,25],[2048,27,1457,27,"lastLoginAt"],[2048,38,1457,38],[2048,40,1457,40],[2049,6,1458,8],[2049,10,1458,12],[2049,11,1458,13,"createdAt"],[2049,20,1458,22],[2049,23,1458,25,"createdAt"],[2049,32,1458,34],[2050,6,1459,8],[2050,10,1459,12],[2050,11,1459,13,"lastLoginAt"],[2050,22,1459,24],[2050,25,1459,27,"lastLoginAt"],[2050,36,1459,38],[2051,6,1460,8],[2051,10,1460,12],[2051,11,1460,13,"_initializeTime"],[2051,26,1460,28],[2051,27,1460,29],[2051,28,1460,30],[2052,4,1461,4],[2053,4,1462,4,"_initializeTime"],[2053,19,1462,19,"_initializeTime"],[2053,20,1462,19],[2053,22,1462,22],[2054,6,1463,8],[2054,10,1463,12],[2054,11,1463,13,"lastSignInTime"],[2054,25,1463,27],[2054,28,1463,30,"utcTimestampToDateString"],[2054,52,1463,54],[2054,53,1463,55],[2054,57,1463,59],[2054,58,1463,60,"lastLoginAt"],[2054,69,1463,71],[2054,70,1463,72],[2055,6,1464,8],[2055,10,1464,12],[2055,11,1464,13,"creationTime"],[2055,23,1464,25],[2055,26,1464,28,"utcTimestampToDateString"],[2055,50,1464,52],[2055,51,1464,53],[2055,55,1464,57],[2055,56,1464,58,"createdAt"],[2055,65,1464,67],[2055,66,1464,68],[2056,4,1465,4],[2057,4,1466,4,"_copy"],[2057,9,1466,9,"_copy"],[2057,10,1466,10,"metadata"],[2057,18,1466,18],[2057,20,1466,20],[2058,6,1467,8],[2058,10,1467,12],[2058,11,1467,13,"createdAt"],[2058,20,1467,22],[2058,23,1467,25,"metadata"],[2058,31,1467,33],[2058,32,1467,34,"createdAt"],[2058,41,1467,43],[2059,6,1468,8],[2059,10,1468,12],[2059,11,1468,13,"lastLoginAt"],[2059,22,1468,24],[2059,25,1468,27,"metadata"],[2059,33,1468,35],[2059,34,1468,36,"lastLoginAt"],[2059,45,1468,47],[2060,6,1469,8],[2060,10,1469,12],[2060,11,1469,13,"_initializeTime"],[2060,26,1469,28],[2060,27,1469,29],[2060,28,1469,30],[2061,4,1470,4],[2062,4,1471,4,"toJSON"],[2062,10,1471,10,"toJSON"],[2062,11,1471,10],[2062,13,1471,13],[2063,6,1472,8],[2063,13,1472,15],[2064,8,1473,12,"createdAt"],[2064,17,1473,21],[2064,19,1473,23],[2064,23,1473,27],[2064,24,1473,28,"createdAt"],[2064,33,1473,37],[2065,8,1474,12,"lastLoginAt"],[2065,19,1474,23],[2065,21,1474,25],[2065,25,1474,29],[2065,26,1474,30,"lastLoginAt"],[2066,6,1475,8],[2066,7,1475,9],[2067,4,1476,4],[2068,2,1477,0],[2070,2,1479,0],[2071,0,1480,0],[2072,0,1481,0],[2073,0,1482,0],[2074,0,1483,0],[2075,0,1484,0],[2076,0,1485,0],[2077,0,1486,0],[2078,0,1487,0],[2079,0,1488,0],[2080,0,1489,0],[2081,0,1490,0],[2082,0,1491,0],[2083,0,1492,0],[2084,0,1493,0],[2085,0,1494,0],[2086,2,1495,0],[2086,17,1495,15,"_reloadWithoutSaving"],[2086,37,1495,35,"_reloadWithoutSaving"],[2086,38,1495,36,"user"],[2086,42,1495,40],[2086,44,1495,42],[2087,4,1496,4],[2087,10,1496,10,"auth"],[2087,14,1496,14],[2087,17,1496,17,"user"],[2087,21,1496,21],[2087,22,1496,22,"auth"],[2087,26,1496,26],[2088,4,1497,4],[2088,10,1497,10,"idToken"],[2088,17,1497,17],[2088,20,1497,20],[2088,26,1497,26,"user"],[2088,30,1497,30],[2088,31,1497,31,"getIdToken"],[2088,41,1497,41],[2088,42,1497,42],[2088,43,1497,43],[2089,4,1498,4],[2089,10,1498,10,"response"],[2089,18,1498,18],[2089,21,1498,21],[2089,27,1498,27,"_logoutIfInvalidated"],[2089,47,1498,47],[2089,48,1498,48,"user"],[2089,52,1498,52],[2089,54,1498,54,"getAccountInfo"],[2089,68,1498,68],[2089,69,1498,69,"auth"],[2089,73,1498,73],[2089,75,1498,75],[2090,6,1498,77,"idToken"],[2091,4,1498,85],[2091,5,1498,86],[2091,6,1498,87],[2091,7,1498,88],[2092,4,1499,4,"_assert"],[2092,11,1499,11],[2092,12,1499,12,"response"],[2092,20,1499,20],[2092,22,1499,22,"users"],[2092,27,1499,27],[2092,28,1499,28,"length"],[2092,34,1499,34],[2092,36,1499,36,"auth"],[2092,40,1499,40],[2092,42,1499,42],[2092,58,1499,58],[2092,59,1499,59],[2092,93,1499,93],[2092,94,1499,94],[2093,4,1500,4],[2093,10,1500,10,"coreAccount"],[2093,21,1500,21],[2093,24,1500,24,"response"],[2093,32,1500,32],[2093,33,1500,33,"users"],[2093,38,1500,38],[2093,39,1500,39],[2093,40,1500,40],[2093,41,1500,41],[2094,4,1501,4,"user"],[2094,8,1501,8],[2094,9,1501,9,"_notifyReloadListener"],[2094,30,1501,30],[2094,31,1501,31,"coreAccount"],[2094,42,1501,42],[2094,43,1501,43],[2095,4,1502,4],[2095,10,1502,10,"newProviderData"],[2095,25,1502,25],[2095,28,1502,28,"coreAccount"],[2095,39,1502,39],[2095,40,1502,40,"providerUserInfo"],[2095,56,1502,56],[2095,58,1502,58,"length"],[2095,64,1502,64],[2095,67,1503,10,"extractProviderData"],[2095,86,1503,29],[2095,87,1503,30,"coreAccount"],[2095,98,1503,41],[2095,99,1503,42,"providerUserInfo"],[2095,115,1503,58],[2095,116,1503,59],[2095,119,1504,10],[2095,121,1504,12],[2096,4,1505,4],[2096,10,1505,10,"providerData"],[2096,22,1505,22],[2096,25,1505,25,"mergeProviderData"],[2096,42,1505,42],[2096,43,1505,43,"user"],[2096,47,1505,47],[2096,48,1505,48,"providerData"],[2096,60,1505,60],[2096,62,1505,62,"newProviderData"],[2096,77,1505,77],[2096,78,1505,78],[2097,4,1506,4],[2098,4,1507,4],[2099,4,1508,4],[2100,4,1509,4],[2101,4,1510,4],[2102,4,1511,4],[2102,10,1511,10,"oldIsAnonymous"],[2102,24,1511,24],[2102,27,1511,27,"user"],[2102,31,1511,31],[2102,32,1511,32,"isAnonymous"],[2102,43,1511,43],[2103,4,1512,4],[2103,10,1512,10,"newIsAnonymous"],[2103,24,1512,24],[2103,27,1512,27],[2103,29,1512,29,"user"],[2103,33,1512,33],[2103,34,1512,34,"email"],[2103,39,1512,39],[2103,43,1512,43,"coreAccount"],[2103,54,1512,54],[2103,55,1512,55,"passwordHash"],[2103,67,1512,67],[2103,68,1512,68],[2103,72,1512,72],[2103,73,1512,73,"providerData"],[2103,85,1512,85],[2103,87,1512,87,"length"],[2103,93,1512,93],[2104,4,1513,4],[2104,10,1513,10,"isAnonymous"],[2104,21,1513,21],[2104,24,1513,24],[2104,25,1513,25,"oldIsAnonymous"],[2104,39,1513,39],[2104,42,1513,42],[2104,47,1513,47],[2104,50,1513,50,"newIsAnonymous"],[2104,64,1513,64],[2105,4,1514,4],[2105,10,1514,10,"updates"],[2105,17,1514,17],[2105,20,1514,20],[2106,6,1515,8,"uid"],[2106,9,1515,11],[2106,11,1515,13,"coreAccount"],[2106,22,1515,24],[2106,23,1515,25,"localId"],[2106,30,1515,32],[2107,6,1516,8,"displayName"],[2107,17,1516,19],[2107,19,1516,21,"coreAccount"],[2107,30,1516,32],[2107,31,1516,33,"displayName"],[2107,42,1516,44],[2107,46,1516,48],[2107,50,1516,52],[2108,6,1517,8,"photoURL"],[2108,14,1517,16],[2108,16,1517,18,"coreAccount"],[2108,27,1517,29],[2108,28,1517,30,"photoUrl"],[2108,36,1517,38],[2108,40,1517,42],[2108,44,1517,46],[2109,6,1518,8,"email"],[2109,11,1518,13],[2109,13,1518,15,"coreAccount"],[2109,24,1518,26],[2109,25,1518,27,"email"],[2109,30,1518,32],[2109,34,1518,36],[2109,38,1518,40],[2110,6,1519,8,"emailVerified"],[2110,19,1519,21],[2110,21,1519,23,"coreAccount"],[2110,32,1519,34],[2110,33,1519,35,"emailVerified"],[2110,46,1519,48],[2110,50,1519,52],[2110,55,1519,57],[2111,6,1520,8,"phoneNumber"],[2111,17,1520,19],[2111,19,1520,21,"coreAccount"],[2111,30,1520,32],[2111,31,1520,33,"phoneNumber"],[2111,42,1520,44],[2111,46,1520,48],[2111,50,1520,52],[2112,6,1521,8,"tenantId"],[2112,14,1521,16],[2112,16,1521,18,"coreAccount"],[2112,27,1521,29],[2112,28,1521,30,"tenantId"],[2112,36,1521,38],[2112,40,1521,42],[2112,44,1521,46],[2113,6,1522,8,"providerData"],[2113,18,1522,20],[2114,6,1523,8,"metadata"],[2114,14,1523,16],[2114,16,1523,18],[2114,20,1523,22,"UserMetadata"],[2114,32,1523,34],[2114,33,1523,35,"coreAccount"],[2114,44,1523,46],[2114,45,1523,47,"createdAt"],[2114,54,1523,56],[2114,56,1523,58,"coreAccount"],[2114,67,1523,69],[2114,68,1523,70,"lastLoginAt"],[2114,79,1523,81],[2114,80,1523,82],[2115,6,1524,8,"isAnonymous"],[2116,4,1525,4],[2116,5,1525,5],[2117,4,1526,4,"Object"],[2117,10,1526,10],[2117,11,1526,11,"assign"],[2117,17,1526,17],[2117,18,1526,18,"user"],[2117,22,1526,22],[2117,24,1526,24,"updates"],[2117,31,1526,31],[2117,32,1526,32],[2118,2,1527,0],[2119,2,1528,0],[2120,0,1529,0],[2121,0,1530,0],[2122,0,1531,0],[2123,0,1532,0],[2124,0,1533,0],[2125,0,1534,0],[2126,2,1535,0],[2126,17,1535,15,"reload"],[2126,23,1535,21,"reload"],[2126,24,1535,22,"user"],[2126,28,1535,26],[2126,30,1535,28],[2127,4,1536,4],[2127,10,1536,10,"userInternal"],[2127,22,1536,22],[2127,25,1536,25],[2127,29,1536,25,"getModularInstance"],[2127,42,1536,43],[2127,43,1536,43,"getModularInstance"],[2127,61,1536,43],[2127,63,1536,44,"user"],[2127,67,1536,48],[2127,68,1536,49],[2128,4,1537,4],[2128,10,1537,10,"_reloadWithoutSaving"],[2128,30,1537,30],[2128,31,1537,31,"userInternal"],[2128,43,1537,43],[2128,44,1537,44],[2129,4,1538,4],[2130,4,1539,4],[2131,4,1540,4],[2132,4,1541,4],[2132,10,1541,10,"userInternal"],[2132,22,1541,22],[2132,23,1541,23,"auth"],[2132,27,1541,27],[2132,28,1541,28,"_persistUserIfCurrent"],[2132,49,1541,49],[2132,50,1541,50,"userInternal"],[2132,62,1541,62],[2132,63,1541,63],[2133,4,1542,4,"userInternal"],[2133,16,1542,16],[2133,17,1542,17,"auth"],[2133,21,1542,21],[2133,22,1542,22,"_notifyListenersIfCurrent"],[2133,47,1542,47],[2133,48,1542,48,"userInternal"],[2133,60,1542,60],[2133,61,1542,61],[2134,2,1543,0],[2135,2,1544,0],[2135,11,1544,9,"mergeProviderData"],[2135,28,1544,26,"mergeProviderData"],[2135,29,1544,27,"original"],[2135,37,1544,35],[2135,39,1544,37,"newData"],[2135,46,1544,44],[2135,48,1544,46],[2136,4,1545,4],[2136,10,1545,10,"deduped"],[2136,17,1545,17],[2136,20,1545,20,"original"],[2136,28,1545,28],[2136,29,1545,29,"filter"],[2136,35,1545,35],[2136,36,1545,36,"o"],[2136,37,1545,37],[2136,41,1545,41],[2136,42,1545,42,"newData"],[2136,49,1545,49],[2136,50,1545,50,"some"],[2136,54,1545,54],[2136,55,1545,55,"n"],[2136,56,1545,56],[2136,60,1545,60,"n"],[2136,61,1545,61],[2136,62,1545,62,"providerId"],[2136,72,1545,72],[2136,77,1545,77,"o"],[2136,78,1545,78],[2136,79,1545,79,"providerId"],[2136,89,1545,89],[2136,90,1545,90],[2136,91,1545,91],[2137,4,1546,4],[2137,11,1546,11],[2137,12,1546,12],[2137,15,1546,15,"deduped"],[2137,22,1546,22],[2137,24,1546,24],[2137,27,1546,27,"newData"],[2137,34,1546,34],[2137,35,1546,35],[2138,2,1547,0],[2139,2,1548,0],[2139,11,1548,9,"extractProviderData"],[2139,30,1548,28,"extractProviderData"],[2139,31,1548,29,"providers"],[2139,40,1548,38],[2139,42,1548,40],[2140,4,1549,4],[2140,11,1549,11,"providers"],[2140,20,1549,20],[2140,21,1549,21,"map"],[2140,24,1549,24],[2140,25,1549,25],[2140,26,1549,26],[2141,6,1549,28,"providerId"],[2141,16,1549,38],[2142,6,1549,40],[2142,9,1549,43,"provider"],[2143,4,1549,52],[2143,5,1549,53],[2143,10,1549,58],[2144,6,1550,8],[2144,13,1550,15],[2145,8,1551,12,"providerId"],[2145,18,1551,22],[2146,8,1552,12,"uid"],[2146,11,1552,15],[2146,13,1552,17,"provider"],[2146,21,1552,25],[2146,22,1552,26,"rawId"],[2146,27,1552,31],[2146,31,1552,35],[2146,33,1552,37],[2147,8,1553,12,"displayName"],[2147,19,1553,23],[2147,21,1553,25,"provider"],[2147,29,1553,33],[2147,30,1553,34,"displayName"],[2147,41,1553,45],[2147,45,1553,49],[2147,49,1553,53],[2148,8,1554,12,"email"],[2148,13,1554,17],[2148,15,1554,19,"provider"],[2148,23,1554,27],[2148,24,1554,28,"email"],[2148,29,1554,33],[2148,33,1554,37],[2148,37,1554,41],[2149,8,1555,12,"phoneNumber"],[2149,19,1555,23],[2149,21,1555,25,"provider"],[2149,29,1555,33],[2149,30,1555,34,"phoneNumber"],[2149,41,1555,45],[2149,45,1555,49],[2149,49,1555,53],[2150,8,1556,12,"photoURL"],[2150,16,1556,20],[2150,18,1556,22,"provider"],[2150,26,1556,30],[2150,27,1556,31,"photoUrl"],[2150,35,1556,39],[2150,39,1556,43],[2151,6,1557,8],[2151,7,1557,9],[2152,4,1558,4],[2152,5,1558,5],[2152,6,1558,6],[2153,2,1559,0],[2155,2,1561,0],[2156,0,1562,0],[2157,0,1563,0],[2158,0,1564,0],[2159,0,1565,0],[2160,0,1566,0],[2161,0,1567,0],[2162,0,1568,0],[2163,0,1569,0],[2164,0,1570,0],[2165,0,1571,0],[2166,0,1572,0],[2167,0,1573,0],[2168,0,1574,0],[2169,0,1575,0],[2170,0,1576,0],[2171,2,1577,0],[2171,17,1577,15,"requestStsToken"],[2171,32,1577,30,"requestStsToken"],[2171,33,1577,31,"auth"],[2171,37,1577,35],[2171,39,1577,37,"refreshToken"],[2171,51,1577,49],[2171,53,1577,51],[2172,4,1578,4],[2172,10,1578,10,"response"],[2172,18,1578,18],[2172,21,1578,21],[2172,27,1578,27,"_performFetchWithErrorHandling"],[2172,57,1578,57],[2172,58,1578,58,"auth"],[2172,62,1578,62],[2172,64,1578,64],[2172,65,1578,65],[2172,66,1578,66],[2172,68,1578,68],[2172,80,1578,80],[2173,6,1579,8],[2173,12,1579,14,"body"],[2173,16,1579,18],[2173,19,1579,21],[2173,23,1579,21,"querystring"],[2173,36,1579,32],[2173,37,1579,32,"querystring"],[2173,48,1579,32],[2173,50,1579,33],[2174,8,1580,12],[2174,20,1580,24],[2174,22,1580,26],[2174,37,1580,41],[2175,8,1581,12],[2175,23,1581,27],[2175,25,1581,29,"refreshToken"],[2176,6,1582,8],[2176,7,1582,9],[2176,8,1582,10],[2176,9,1582,11,"slice"],[2176,14,1582,16],[2176,15,1582,17],[2176,16,1582,18],[2176,17,1582,19],[2177,6,1583,8],[2177,12,1583,14],[2178,8,1583,16,"tokenApiHost"],[2178,20,1583,28],[2179,8,1583,30,"apiKey"],[2180,6,1583,37],[2180,7,1583,38],[2180,10,1583,41,"auth"],[2180,14,1583,45],[2180,15,1583,46,"config"],[2180,21,1583,52],[2181,6,1584,8],[2181,12,1584,14,"url"],[2181,15,1584,17],[2181,18,1584,20],[2181,24,1584,26,"_getFinalTarget"],[2181,39,1584,41],[2181,40,1584,42,"auth"],[2181,44,1584,46],[2181,46,1584,48,"tokenApiHost"],[2181,58,1584,60],[2181,60,1584,62],[2181,71,1584,73],[2181,72,1584,74],[2181,94,1584,96],[2181,101,1584,103,"apiKey"],[2181,107,1584,109],[2181,109,1584,111],[2181,110,1584,112],[2182,6,1585,8],[2182,12,1585,14,"headers"],[2182,19,1585,21],[2182,22,1585,24],[2182,28,1585,30,"auth"],[2182,32,1585,34],[2182,33,1585,35,"_getAdditionalHeaders"],[2182,54,1585,56],[2182,55,1585,57],[2182,56,1585,58],[2183,6,1586,8,"headers"],[2183,13,1586,15],[2183,14,1586,16],[2183,28,1586,30],[2183,29,1586,31],[2183,59,1586,61],[2183,62,1586,64],[2183,97,1586,99],[2184,6,1587,8],[2184,12,1587,14,"options"],[2184,19,1587,21],[2184,22,1587,24],[2185,8,1588,12,"method"],[2185,14,1588,18],[2185,16,1588,20],[2185,22,1588,26],[2185,23,1588,27],[2186,8,1589,12,"headers"],[2186,15,1589,19],[2187,8,1590,12,"body"],[2188,6,1591,8],[2188,7,1591,9],[2189,6,1592,8],[2189,10,1592,12,"auth"],[2189,14,1592,16],[2189,15,1592,17,"emulatorConfig"],[2189,29,1592,31],[2189,33,1593,12],[2189,37,1593,12,"isCloudWorkstation"],[2189,50,1593,30],[2189,51,1593,30,"isCloudWorkstation"],[2189,69,1593,30],[2189,71,1593,31,"auth"],[2189,75,1593,35],[2189,76,1593,36,"emulatorConfig"],[2189,90,1593,50],[2189,91,1593,51,"host"],[2189,95,1593,55],[2189,96,1593,56],[2189,98,1593,58],[2190,8,1594,12,"options"],[2190,15,1594,19],[2190,16,1594,20,"credentials"],[2190,27,1594,31],[2190,30,1594,34],[2190,39,1594,43],[2191,6,1595,8],[2192,6,1596,8],[2192,13,1596,15,"FetchProvider"],[2192,26,1596,28],[2192,27,1596,29,"fetch"],[2192,32,1596,34],[2192,33,1596,35],[2192,34,1596,36],[2192,35,1596,37,"url"],[2192,38,1596,40],[2192,40,1596,42,"options"],[2192,47,1596,49],[2192,48,1596,50],[2193,4,1597,4],[2193,5,1597,5],[2193,6,1597,6],[2194,4,1598,4],[2195,4,1599,4],[2195,11,1599,11],[2196,6,1600,8,"accessToken"],[2196,17,1600,19],[2196,19,1600,21,"response"],[2196,27,1600,29],[2196,28,1600,30,"access_token"],[2196,40,1600,42],[2197,6,1601,8,"expiresIn"],[2197,15,1601,17],[2197,17,1601,19,"response"],[2197,25,1601,27],[2197,26,1601,28,"expires_in"],[2197,36,1601,38],[2198,6,1602,8,"refreshToken"],[2198,18,1602,20],[2198,20,1602,22,"response"],[2198,28,1602,30],[2198,29,1602,31,"refresh_token"],[2199,4,1603,4],[2199,5,1603,5],[2200,2,1604,0],[2201,2,1605,0],[2201,17,1605,15,"revokeToken"],[2201,28,1605,26,"revokeToken"],[2201,29,1605,27,"auth"],[2201,33,1605,31],[2201,35,1605,33,"request"],[2201,42,1605,40],[2201,44,1605,42],[2202,4,1606,4],[2202,11,1606,11,"_performApiRequest"],[2202,29,1606,29],[2202,30,1606,30,"auth"],[2202,34,1606,34],[2202,36,1606,36],[2202,42,1606,42],[2202,43,1606,43],[2202,66,1606,66],[2202,92,1606,92],[2202,93,1606,93],[2202,122,1606,122,"_addTidIfNecessary"],[2202,140,1606,140],[2202,141,1606,141,"auth"],[2202,145,1606,145],[2202,147,1606,147,"request"],[2202,154,1606,154],[2202,155,1606,155],[2202,156,1606,156],[2203,2,1607,0],[2205,2,1609,0],[2206,0,1610,0],[2207,0,1611,0],[2208,0,1612,0],[2209,0,1613,0],[2210,0,1614,0],[2211,0,1615,0],[2212,0,1616,0],[2213,0,1617,0],[2214,0,1618,0],[2215,0,1619,0],[2216,0,1620,0],[2217,0,1621,0],[2218,0,1622,0],[2219,0,1623,0],[2220,0,1624,0],[2221,2,1625,0],[2222,0,1626,0],[2223,0,1627,0],[2224,0,1628,0],[2225,0,1629,0],[2226,0,1630,0],[2227,2,1631,0],[2227,8,1631,6,"StsTokenManager"],[2227,23,1631,21],[2227,24,1631,22],[2228,4,1632,4,"constructor"],[2228,15,1632,15,"constructor"],[2228,16,1632,15],[2228,18,1632,18],[2229,6,1633,8],[2229,10,1633,12],[2229,11,1633,13,"refreshToken"],[2229,23,1633,25],[2229,26,1633,28],[2229,30,1633,32],[2230,6,1634,8],[2230,10,1634,12],[2230,11,1634,13,"accessToken"],[2230,22,1634,24],[2230,25,1634,27],[2230,29,1634,31],[2231,6,1635,8],[2231,10,1635,12],[2231,11,1635,13,"expirationTime"],[2231,25,1635,27],[2231,28,1635,30],[2231,32,1635,34],[2232,4,1636,4],[2233,4,1637,4],[2233,8,1637,8,"isExpired"],[2233,17,1637,17,"isExpired"],[2233,18,1637,17],[2233,20,1637,20],[2234,6,1638,8],[2234,13,1638,16],[2234,14,1638,17],[2234,18,1638,21],[2234,19,1638,22,"expirationTime"],[2234,33,1638,36],[2234,37,1639,12,"Date"],[2234,41,1639,16],[2234,42,1639,17,"now"],[2234,45,1639,20],[2234,46,1639,21],[2234,47,1639,22],[2234,50,1639,25],[2234,54,1639,29],[2234,55,1639,30,"expirationTime"],[2234,69,1639,44],[2234,72,1639,47],[2234,77,1639,52],[2234,78,1639,53],[2235,4,1640,4],[2236,4,1641,4,"updateFromServerResponse"],[2236,28,1641,28,"updateFromServerResponse"],[2236,29,1641,29,"response"],[2236,37,1641,37],[2236,39,1641,39],[2237,6,1642,8,"_assert"],[2237,13,1642,15],[2237,14,1642,16,"response"],[2237,22,1642,24],[2237,23,1642,25,"idToken"],[2237,30,1642,32],[2237,32,1642,34],[2237,48,1642,50],[2237,49,1642,51],[2237,83,1642,85],[2237,84,1642,86],[2238,6,1643,8,"_assert"],[2238,13,1643,15],[2238,14,1643,16],[2238,21,1643,23,"response"],[2238,29,1643,31],[2238,30,1643,32,"idToken"],[2238,37,1643,39],[2238,42,1643,44],[2238,53,1643,55],[2238,55,1643,57],[2238,71,1643,73],[2238,72,1643,74],[2238,106,1643,108],[2238,107,1643,109],[2239,6,1644,8,"_assert"],[2239,13,1644,15],[2239,14,1644,16],[2239,21,1644,23,"response"],[2239,29,1644,31],[2239,30,1644,32,"refreshToken"],[2239,42,1644,44],[2239,47,1644,49],[2239,58,1644,60],[2239,60,1644,62],[2239,76,1644,78],[2239,77,1644,79],[2239,111,1644,113],[2239,112,1644,114],[2240,6,1645,8],[2240,12,1645,14,"expiresIn"],[2240,21,1645,23],[2240,24,1645,26],[2240,35,1645,37],[2240,39,1645,41,"response"],[2240,47,1645,49],[2240,51,1645,53],[2240,58,1645,60,"response"],[2240,66,1645,68],[2240,67,1645,69,"expiresIn"],[2240,76,1645,78],[2240,81,1645,83],[2240,92,1645,94],[2240,95,1646,14,"Number"],[2240,101,1646,20],[2240,102,1646,21,"response"],[2240,110,1646,29],[2240,111,1646,30,"expiresIn"],[2240,120,1646,39],[2240,121,1646,40],[2240,124,1647,14,"_tokenExpiresIn"],[2240,139,1647,29],[2240,140,1647,30,"response"],[2240,148,1647,38],[2240,149,1647,39,"idToken"],[2240,156,1647,46],[2240,157,1647,47],[2241,6,1648,8],[2241,10,1648,12],[2241,11,1648,13,"updateTokensAndExpiration"],[2241,36,1648,38],[2241,37,1648,39,"response"],[2241,45,1648,47],[2241,46,1648,48,"idToken"],[2241,53,1648,55],[2241,55,1648,57,"response"],[2241,63,1648,65],[2241,64,1648,66,"refreshToken"],[2241,76,1648,78],[2241,78,1648,80,"expiresIn"],[2241,87,1648,89],[2241,88,1648,90],[2242,4,1649,4],[2243,4,1650,4,"updateFromIdToken"],[2243,21,1650,21,"updateFromIdToken"],[2243,22,1650,22,"idToken"],[2243,29,1650,29],[2243,31,1650,31],[2244,6,1651,8,"_assert"],[2244,13,1651,15],[2244,14,1651,16,"idToken"],[2244,21,1651,23],[2244,22,1651,24,"length"],[2244,28,1651,30],[2244,33,1651,35],[2244,34,1651,36],[2244,36,1651,38],[2244,52,1651,54],[2244,53,1651,55],[2244,87,1651,89],[2244,88,1651,90],[2245,6,1652,8],[2245,12,1652,14,"expiresIn"],[2245,21,1652,23],[2245,24,1652,26,"_tokenExpiresIn"],[2245,39,1652,41],[2245,40,1652,42,"idToken"],[2245,47,1652,49],[2245,48,1652,50],[2246,6,1653,8],[2246,10,1653,12],[2246,11,1653,13,"updateTokensAndExpiration"],[2246,36,1653,38],[2246,37,1653,39,"idToken"],[2246,44,1653,46],[2246,46,1653,48],[2246,50,1653,52],[2246,52,1653,54,"expiresIn"],[2246,61,1653,63],[2246,62,1653,64],[2247,4,1654,4],[2248,4,1655,4],[2248,10,1655,10,"getToken"],[2248,18,1655,18,"getToken"],[2248,19,1655,19,"auth"],[2248,23,1655,23],[2248,25,1655,25,"forceRefresh"],[2248,37,1655,37],[2248,40,1655,40],[2248,45,1655,45],[2248,47,1655,47],[2249,6,1656,8],[2249,10,1656,12],[2249,11,1656,13,"forceRefresh"],[2249,23,1656,25],[2249,27,1656,29],[2249,31,1656,33],[2249,32,1656,34,"accessToken"],[2249,43,1656,45],[2249,47,1656,49],[2249,48,1656,50],[2249,52,1656,54],[2249,53,1656,55,"isExpired"],[2249,62,1656,64],[2249,64,1656,66],[2250,8,1657,12],[2250,15,1657,19],[2250,19,1657,23],[2250,20,1657,24,"accessToken"],[2250,31,1657,35],[2251,6,1658,8],[2252,6,1659,8,"_assert"],[2252,13,1659,15],[2252,14,1659,16],[2252,18,1659,20],[2252,19,1659,21,"refreshToken"],[2252,31,1659,33],[2252,33,1659,35,"auth"],[2252,37,1659,39],[2252,39,1659,41],[2252,59,1659,61],[2252,60,1659,62],[2252,93,1659,95],[2252,94,1659,96],[2253,6,1660,8],[2253,10,1660,12],[2253,14,1660,16],[2253,15,1660,17,"refreshToken"],[2253,27,1660,29],[2253,29,1660,31],[2254,8,1661,12],[2254,14,1661,18],[2254,18,1661,22],[2254,19,1661,23,"refresh"],[2254,26,1661,30],[2254,27,1661,31,"auth"],[2254,31,1661,35],[2254,33,1661,37],[2254,37,1661,41],[2254,38,1661,42,"refreshToken"],[2254,50,1661,54],[2254,51,1661,55],[2255,8,1662,12],[2255,15,1662,19],[2255,19,1662,23],[2255,20,1662,24,"accessToken"],[2255,31,1662,35],[2256,6,1663,8],[2257,6,1664,8],[2257,13,1664,15],[2257,17,1664,19],[2258,4,1665,4],[2259,4,1666,4,"clearRefreshToken"],[2259,21,1666,21,"clearRefreshToken"],[2259,22,1666,21],[2259,24,1666,24],[2260,6,1667,8],[2260,10,1667,12],[2260,11,1667,13,"refreshToken"],[2260,23,1667,25],[2260,26,1667,28],[2260,30,1667,32],[2261,4,1668,4],[2262,4,1669,4],[2262,10,1669,10,"refresh"],[2262,17,1669,17,"refresh"],[2262,18,1669,18,"auth"],[2262,22,1669,22],[2262,24,1669,24,"oldToken"],[2262,32,1669,32],[2262,34,1669,34],[2263,6,1670,8],[2263,12,1670,14],[2264,8,1670,16,"accessToken"],[2264,19,1670,27],[2265,8,1670,29,"refreshToken"],[2265,20,1670,41],[2266,8,1670,43,"expiresIn"],[2267,6,1670,53],[2267,7,1670,54],[2267,10,1670,57],[2267,16,1670,63,"requestStsToken"],[2267,31,1670,78],[2267,32,1670,79,"auth"],[2267,36,1670,83],[2267,38,1670,85,"oldToken"],[2267,46,1670,93],[2267,47,1670,94],[2268,6,1671,8],[2268,10,1671,12],[2268,11,1671,13,"updateTokensAndExpiration"],[2268,36,1671,38],[2268,37,1671,39,"accessToken"],[2268,48,1671,50],[2268,50,1671,52,"refreshToken"],[2268,62,1671,64],[2268,64,1671,66,"Number"],[2268,70,1671,72],[2268,71,1671,73,"expiresIn"],[2268,80,1671,82],[2268,81,1671,83],[2268,82,1671,84],[2269,4,1672,4],[2270,4,1673,4,"updateTokensAndExpiration"],[2270,29,1673,29,"updateTokensAndExpiration"],[2270,30,1673,30,"accessToken"],[2270,41,1673,41],[2270,43,1673,43,"refreshToken"],[2270,55,1673,55],[2270,57,1673,57,"expiresInSec"],[2270,69,1673,69],[2270,71,1673,71],[2271,6,1674,8],[2271,10,1674,12],[2271,11,1674,13,"refreshToken"],[2271,23,1674,25],[2271,26,1674,28,"refreshToken"],[2271,38,1674,40],[2271,42,1674,44],[2271,46,1674,48],[2272,6,1675,8],[2272,10,1675,12],[2272,11,1675,13,"accessToken"],[2272,22,1675,24],[2272,25,1675,27,"accessToken"],[2272,36,1675,38],[2272,40,1675,42],[2272,44,1675,46],[2273,6,1676,8],[2273,10,1676,12],[2273,11,1676,13,"expirationTime"],[2273,25,1676,27],[2273,28,1676,30,"Date"],[2273,32,1676,34],[2273,33,1676,35,"now"],[2273,36,1676,38],[2273,37,1676,39],[2273,38,1676,40],[2273,41,1676,43,"expiresInSec"],[2273,53,1676,55],[2273,56,1676,58],[2273,60,1676,62],[2274,4,1677,4],[2275,4,1678,4],[2275,11,1678,11,"fromJSON"],[2275,19,1678,19,"fromJSON"],[2275,20,1678,20,"appName"],[2275,27,1678,27],[2275,29,1678,29,"object"],[2275,35,1678,35],[2275,37,1678,37],[2276,6,1679,8],[2276,12,1679,14],[2277,8,1679,16,"refreshToken"],[2277,20,1679,28],[2278,8,1679,30,"accessToken"],[2278,19,1679,41],[2279,8,1679,43,"expirationTime"],[2280,6,1679,58],[2280,7,1679,59],[2280,10,1679,62,"object"],[2280,16,1679,68],[2281,6,1680,8],[2281,12,1680,14,"manager"],[2281,19,1680,21],[2281,22,1680,24],[2281,26,1680,28,"StsTokenManager"],[2281,41,1680,43],[2281,42,1680,44],[2281,43,1680,45],[2282,6,1681,8],[2282,10,1681,12,"refreshToken"],[2282,22,1681,24],[2282,24,1681,26],[2283,8,1682,12,"_assert"],[2283,15,1682,19],[2283,16,1682,20],[2283,23,1682,27,"refreshToken"],[2283,35,1682,39],[2283,40,1682,44],[2283,48,1682,52],[2283,50,1682,54],[2283,66,1682,70],[2283,67,1682,71],[2283,103,1682,107],[2284,10,1683,16,"appName"],[2285,8,1684,12],[2285,9,1684,13],[2285,10,1684,14],[2286,8,1685,12,"manager"],[2286,15,1685,19],[2286,16,1685,20,"refreshToken"],[2286,28,1685,32],[2286,31,1685,35,"refreshToken"],[2286,43,1685,47],[2287,6,1686,8],[2288,6,1687,8],[2288,10,1687,12,"accessToken"],[2288,21,1687,23],[2288,23,1687,25],[2289,8,1688,12,"_assert"],[2289,15,1688,19],[2289,16,1688,20],[2289,23,1688,27,"accessToken"],[2289,34,1688,38],[2289,39,1688,43],[2289,47,1688,51],[2289,49,1688,53],[2289,65,1688,69],[2289,66,1688,70],[2289,102,1688,106],[2290,10,1689,16,"appName"],[2291,8,1690,12],[2291,9,1690,13],[2291,10,1690,14],[2292,8,1691,12,"manager"],[2292,15,1691,19],[2292,16,1691,20,"accessToken"],[2292,27,1691,31],[2292,30,1691,34,"accessToken"],[2292,41,1691,45],[2293,6,1692,8],[2294,6,1693,8],[2294,10,1693,12,"expirationTime"],[2294,24,1693,26],[2294,26,1693,28],[2295,8,1694,12,"_assert"],[2295,15,1694,19],[2295,16,1694,20],[2295,23,1694,27,"expirationTime"],[2295,37,1694,41],[2295,42,1694,46],[2295,50,1694,54],[2295,52,1694,56],[2295,68,1694,72],[2295,69,1694,73],[2295,105,1694,109],[2296,10,1695,16,"appName"],[2297,8,1696,12],[2297,9,1696,13],[2297,10,1696,14],[2298,8,1697,12,"manager"],[2298,15,1697,19],[2298,16,1697,20,"expirationTime"],[2298,30,1697,34],[2298,33,1697,37,"expirationTime"],[2298,47,1697,51],[2299,6,1698,8],[2300,6,1699,8],[2300,13,1699,15,"manager"],[2300,20,1699,22],[2301,4,1700,4],[2302,4,1701,4,"toJSON"],[2302,10,1701,10,"toJSON"],[2302,11,1701,10],[2302,13,1701,13],[2303,6,1702,8],[2303,13,1702,15],[2304,8,1703,12,"refreshToken"],[2304,20,1703,24],[2304,22,1703,26],[2304,26,1703,30],[2304,27,1703,31,"refreshToken"],[2304,39,1703,43],[2305,8,1704,12,"accessToken"],[2305,19,1704,23],[2305,21,1704,25],[2305,25,1704,29],[2305,26,1704,30,"accessToken"],[2305,37,1704,41],[2306,8,1705,12,"expirationTime"],[2306,22,1705,26],[2306,24,1705,28],[2306,28,1705,32],[2306,29,1705,33,"expirationTime"],[2307,6,1706,8],[2307,7,1706,9],[2308,4,1707,4],[2309,4,1708,4,"_assign"],[2309,11,1708,11,"_assign"],[2309,12,1708,12,"stsTokenManager"],[2309,27,1708,27],[2309,29,1708,29],[2310,6,1709,8],[2310,10,1709,12],[2310,11,1709,13,"accessToken"],[2310,22,1709,24],[2310,25,1709,27,"stsTokenManager"],[2310,40,1709,42],[2310,41,1709,43,"accessToken"],[2310,52,1709,54],[2311,6,1710,8],[2311,10,1710,12],[2311,11,1710,13,"refreshToken"],[2311,23,1710,25],[2311,26,1710,28,"stsTokenManager"],[2311,41,1710,43],[2311,42,1710,44,"refreshToken"],[2311,54,1710,56],[2312,6,1711,8],[2312,10,1711,12],[2312,11,1711,13,"expirationTime"],[2312,25,1711,27],[2312,28,1711,30,"stsTokenManager"],[2312,43,1711,45],[2312,44,1711,46,"expirationTime"],[2312,58,1711,60],[2313,4,1712,4],[2314,4,1713,4,"_clone"],[2314,10,1713,10,"_clone"],[2314,11,1713,10],[2314,13,1713,13],[2315,6,1714,8],[2315,13,1714,15,"Object"],[2315,19,1714,21],[2315,20,1714,22,"assign"],[2315,26,1714,28],[2315,27,1714,29],[2315,31,1714,33,"StsTokenManager"],[2315,46,1714,48],[2315,47,1714,49],[2315,48,1714,50],[2315,50,1714,52],[2315,54,1714,56],[2315,55,1714,57,"toJSON"],[2315,61,1714,63],[2315,62,1714,64],[2315,63,1714,65],[2315,64,1714,66],[2316,4,1715,4],[2317,4,1716,4,"_performRefresh"],[2317,19,1716,19,"_performRefresh"],[2317,20,1716,19],[2317,22,1716,22],[2318,6,1717,8],[2318,13,1717,15,"debugFail"],[2318,22,1717,24],[2318,23,1717,25],[2318,40,1717,42],[2318,41,1717,43],[2319,4,1718,4],[2320,2,1719,0],[2322,2,1721,0],[2323,0,1722,0],[2324,0,1723,0],[2325,0,1724,0],[2326,0,1725,0],[2327,0,1726,0],[2328,0,1727,0],[2329,0,1728,0],[2330,0,1729,0],[2331,0,1730,0],[2332,0,1731,0],[2333,0,1732,0],[2334,0,1733,0],[2335,0,1734,0],[2336,0,1735,0],[2337,0,1736,0],[2338,2,1737,0],[2338,11,1737,9,"assertStringOrUndefined"],[2338,34,1737,32,"assertStringOrUndefined"],[2338,35,1737,33,"assertion"],[2338,44,1737,42],[2338,46,1737,44,"appName"],[2338,53,1737,51],[2338,55,1737,53],[2339,4,1738,4,"_assert"],[2339,11,1738,11],[2339,12,1738,12],[2339,19,1738,19,"assertion"],[2339,28,1738,28],[2339,33,1738,33],[2339,41,1738,41],[2339,45,1738,45],[2339,52,1738,52,"assertion"],[2339,61,1738,61],[2339,66,1738,66],[2339,77,1738,77],[2339,79,1738,79],[2339,95,1738,95],[2339,96,1738,96],[2339,132,1738,132],[2340,6,1738,134,"appName"],[2341,4,1738,142],[2341,5,1738,143],[2341,6,1738,144],[2342,2,1739,0],[2343,2,1740,0],[2343,8,1740,6,"UserImpl"],[2343,16,1740,14],[2343,17,1740,15],[2344,4,1741,4,"constructor"],[2344,15,1741,15,"constructor"],[2344,16,1741,16],[2345,6,1741,18,"uid"],[2345,9,1741,21],[2346,6,1741,23,"auth"],[2346,10,1741,27],[2347,6,1741,29,"stsTokenManager"],[2347,21,1741,44],[2348,6,1741,46],[2348,9,1741,49,"opt"],[2349,4,1741,53],[2349,5,1741,54],[2349,7,1741,56],[2350,6,1742,8],[2351,6,1743,8],[2351,10,1743,12],[2351,11,1743,13,"providerId"],[2351,21,1743,23],[2351,24,1743,26],[2351,34,1743,36],[2351,35,1743,37],[2352,6,1744,8],[2352,10,1744,12],[2352,11,1744,13,"proactiveRefresh"],[2352,27,1744,29],[2352,30,1744,32],[2352,34,1744,36,"ProactiveRefresh"],[2352,50,1744,52],[2352,51,1744,53],[2352,55,1744,57],[2352,56,1744,58],[2353,6,1745,8],[2353,10,1745,12],[2353,11,1745,13,"reloadUserInfo"],[2353,25,1745,27],[2353,28,1745,30],[2353,32,1745,34],[2354,6,1746,8],[2354,10,1746,12],[2354,11,1746,13,"reloadListener"],[2354,25,1746,27],[2354,28,1746,30],[2354,32,1746,34],[2355,6,1747,8],[2355,10,1747,12],[2355,11,1747,13,"uid"],[2355,14,1747,16],[2355,17,1747,19,"uid"],[2355,20,1747,22],[2356,6,1748,8],[2356,10,1748,12],[2356,11,1748,13,"auth"],[2356,15,1748,17],[2356,18,1748,20,"auth"],[2356,22,1748,24],[2357,6,1749,8],[2357,10,1749,12],[2357,11,1749,13,"stsTokenManager"],[2357,26,1749,28],[2357,29,1749,31,"stsTokenManager"],[2357,44,1749,46],[2358,6,1750,8],[2358,10,1750,12],[2358,11,1750,13,"accessToken"],[2358,22,1750,24],[2358,25,1750,27,"stsTokenManager"],[2358,40,1750,42],[2358,41,1750,43,"accessToken"],[2358,52,1750,54],[2359,6,1751,8],[2359,10,1751,12],[2359,11,1751,13,"displayName"],[2359,22,1751,24],[2359,25,1751,27,"opt"],[2359,28,1751,30],[2359,29,1751,31,"displayName"],[2359,40,1751,42],[2359,44,1751,46],[2359,48,1751,50],[2360,6,1752,8],[2360,10,1752,12],[2360,11,1752,13,"email"],[2360,16,1752,18],[2360,19,1752,21,"opt"],[2360,22,1752,24],[2360,23,1752,25,"email"],[2360,28,1752,30],[2360,32,1752,34],[2360,36,1752,38],[2361,6,1753,8],[2361,10,1753,12],[2361,11,1753,13,"emailVerified"],[2361,24,1753,26],[2361,27,1753,29,"opt"],[2361,30,1753,32],[2361,31,1753,33,"emailVerified"],[2361,44,1753,46],[2361,48,1753,50],[2361,53,1753,55],[2362,6,1754,8],[2362,10,1754,12],[2362,11,1754,13,"phoneNumber"],[2362,22,1754,24],[2362,25,1754,27,"opt"],[2362,28,1754,30],[2362,29,1754,31,"phoneNumber"],[2362,40,1754,42],[2362,44,1754,46],[2362,48,1754,50],[2363,6,1755,8],[2363,10,1755,12],[2363,11,1755,13,"photoURL"],[2363,19,1755,21],[2363,22,1755,24,"opt"],[2363,25,1755,27],[2363,26,1755,28,"photoURL"],[2363,34,1755,36],[2363,38,1755,40],[2363,42,1755,44],[2364,6,1756,8],[2364,10,1756,12],[2364,11,1756,13,"isAnonymous"],[2364,22,1756,24],[2364,25,1756,27,"opt"],[2364,28,1756,30],[2364,29,1756,31,"isAnonymous"],[2364,40,1756,42],[2364,44,1756,46],[2364,49,1756,51],[2365,6,1757,8],[2365,10,1757,12],[2365,11,1757,13,"tenantId"],[2365,19,1757,21],[2365,22,1757,24,"opt"],[2365,25,1757,27],[2365,26,1757,28,"tenantId"],[2365,34,1757,36],[2365,38,1757,40],[2365,42,1757,44],[2366,6,1758,8],[2366,10,1758,12],[2366,11,1758,13,"providerData"],[2366,23,1758,25],[2366,26,1758,28,"opt"],[2366,29,1758,31],[2366,30,1758,32,"providerData"],[2366,42,1758,44],[2366,45,1758,47],[2366,46,1758,48],[2366,49,1758,51,"opt"],[2366,52,1758,54],[2366,53,1758,55,"providerData"],[2366,65,1758,67],[2366,66,1758,68],[2366,69,1758,71],[2366,71,1758,73],[2367,6,1759,8],[2367,10,1759,12],[2367,11,1759,13,"metadata"],[2367,19,1759,21],[2367,22,1759,24],[2367,26,1759,28,"UserMetadata"],[2367,38,1759,40],[2367,39,1759,41,"opt"],[2367,42,1759,44],[2367,43,1759,45,"createdAt"],[2367,52,1759,54],[2367,56,1759,58,"undefined"],[2367,65,1759,67],[2367,67,1759,69,"opt"],[2367,70,1759,72],[2367,71,1759,73,"lastLoginAt"],[2367,82,1759,84],[2367,86,1759,88,"undefined"],[2367,95,1759,97],[2367,96,1759,98],[2368,4,1760,4],[2369,4,1761,4],[2369,10,1761,10,"getIdToken"],[2369,20,1761,20,"getIdToken"],[2369,21,1761,21,"forceRefresh"],[2369,33,1761,33],[2369,35,1761,35],[2370,6,1762,8],[2370,12,1762,14,"accessToken"],[2370,23,1762,25],[2370,26,1762,28],[2370,32,1762,34,"_logoutIfInvalidated"],[2370,52,1762,54],[2370,53,1762,55],[2370,57,1762,59],[2370,59,1762,61],[2370,63,1762,65],[2370,64,1762,66,"stsTokenManager"],[2370,79,1762,81],[2370,80,1762,82,"getToken"],[2370,88,1762,90],[2370,89,1762,91],[2370,93,1762,95],[2370,94,1762,96,"auth"],[2370,98,1762,100],[2370,100,1762,102,"forceRefresh"],[2370,112,1762,114],[2370,113,1762,115],[2370,114,1762,116],[2371,6,1763,8,"_assert"],[2371,13,1763,15],[2371,14,1763,16,"accessToken"],[2371,25,1763,27],[2371,27,1763,29],[2371,31,1763,33],[2371,32,1763,34,"auth"],[2371,36,1763,38],[2371,38,1763,40],[2371,54,1763,56],[2371,55,1763,57],[2371,89,1763,91],[2371,90,1763,92],[2372,6,1764,8],[2372,10,1764,12],[2372,14,1764,16],[2372,15,1764,17,"accessToken"],[2372,26,1764,28],[2372,31,1764,33,"accessToken"],[2372,42,1764,44],[2372,44,1764,46],[2373,8,1765,12],[2373,12,1765,16],[2373,13,1765,17,"accessToken"],[2373,24,1765,28],[2373,27,1765,31,"accessToken"],[2373,38,1765,42],[2374,8,1766,12],[2374,14,1766,18],[2374,18,1766,22],[2374,19,1766,23,"auth"],[2374,23,1766,27],[2374,24,1766,28,"_persistUserIfCurrent"],[2374,45,1766,49],[2374,46,1766,50],[2374,50,1766,54],[2374,51,1766,55],[2375,8,1767,12],[2375,12,1767,16],[2375,13,1767,17,"auth"],[2375,17,1767,21],[2375,18,1767,22,"_notifyListenersIfCurrent"],[2375,43,1767,47],[2375,44,1767,48],[2375,48,1767,52],[2375,49,1767,53],[2376,6,1768,8],[2377,6,1769,8],[2377,13,1769,15,"accessToken"],[2377,24,1769,26],[2378,4,1770,4],[2379,4,1771,4,"getIdTokenResult"],[2379,20,1771,20,"getIdTokenResult"],[2379,21,1771,21,"forceRefresh"],[2379,33,1771,33],[2379,35,1771,35],[2380,6,1772,8],[2380,13,1772,15,"getIdTokenResult"],[2380,29,1772,31],[2380,30,1772,32],[2380,34,1772,36],[2380,36,1772,38,"forceRefresh"],[2380,48,1772,50],[2380,49,1772,51],[2381,4,1773,4],[2382,4,1774,4,"reload"],[2382,10,1774,10,"reload"],[2382,11,1774,10],[2382,13,1774,13],[2383,6,1775,8],[2383,13,1775,15,"reload"],[2383,19,1775,21],[2383,20,1775,22],[2383,24,1775,26],[2383,25,1775,27],[2384,4,1776,4],[2385,4,1777,4,"_assign"],[2385,11,1777,11,"_assign"],[2385,12,1777,12,"user"],[2385,16,1777,16],[2385,18,1777,18],[2386,6,1778,8],[2386,10,1778,12],[2386,14,1778,16],[2386,19,1778,21,"user"],[2386,23,1778,25],[2386,25,1778,27],[2387,8,1779,12],[2388,6,1780,8],[2389,6,1781,8,"_assert"],[2389,13,1781,15],[2389,14,1781,16],[2389,18,1781,20],[2389,19,1781,21,"uid"],[2389,22,1781,24],[2389,27,1781,29,"user"],[2389,31,1781,33],[2389,32,1781,34,"uid"],[2389,35,1781,37],[2389,37,1781,39],[2389,41,1781,43],[2389,42,1781,44,"auth"],[2389,46,1781,48],[2389,48,1781,50],[2389,64,1781,66],[2389,65,1781,67],[2389,99,1781,101],[2389,100,1781,102],[2390,6,1782,8],[2390,10,1782,12],[2390,11,1782,13,"displayName"],[2390,22,1782,24],[2390,25,1782,27,"user"],[2390,29,1782,31],[2390,30,1782,32,"displayName"],[2390,41,1782,43],[2391,6,1783,8],[2391,10,1783,12],[2391,11,1783,13,"photoURL"],[2391,19,1783,21],[2391,22,1783,24,"user"],[2391,26,1783,28],[2391,27,1783,29,"photoURL"],[2391,35,1783,37],[2392,6,1784,8],[2392,10,1784,12],[2392,11,1784,13,"email"],[2392,16,1784,18],[2392,19,1784,21,"user"],[2392,23,1784,25],[2392,24,1784,26,"email"],[2392,29,1784,31],[2393,6,1785,8],[2393,10,1785,12],[2393,11,1785,13,"emailVerified"],[2393,24,1785,26],[2393,27,1785,29,"user"],[2393,31,1785,33],[2393,32,1785,34,"emailVerified"],[2393,45,1785,47],[2394,6,1786,8],[2394,10,1786,12],[2394,11,1786,13,"phoneNumber"],[2394,22,1786,24],[2394,25,1786,27,"user"],[2394,29,1786,31],[2394,30,1786,32,"phoneNumber"],[2394,41,1786,43],[2395,6,1787,8],[2395,10,1787,12],[2395,11,1787,13,"isAnonymous"],[2395,22,1787,24],[2395,25,1787,27,"user"],[2395,29,1787,31],[2395,30,1787,32,"isAnonymous"],[2395,41,1787,43],[2396,6,1788,8],[2396,10,1788,12],[2396,11,1788,13,"tenantId"],[2396,19,1788,21],[2396,22,1788,24,"user"],[2396,26,1788,28],[2396,27,1788,29,"tenantId"],[2396,35,1788,37],[2397,6,1789,8],[2397,10,1789,12],[2397,11,1789,13,"providerData"],[2397,23,1789,25],[2397,26,1789,28,"user"],[2397,30,1789,32],[2397,31,1789,33,"providerData"],[2397,43,1789,45],[2397,44,1789,46,"map"],[2397,47,1789,49],[2397,48,1789,50,"userInfo"],[2397,56,1789,58],[2397,61,1789,63],[2398,8,1789,65],[2398,11,1789,68,"userInfo"],[2399,6,1789,77],[2399,7,1789,78],[2399,8,1789,79],[2399,9,1789,80],[2400,6,1790,8],[2400,10,1790,12],[2400,11,1790,13,"metadata"],[2400,19,1790,21],[2400,20,1790,22,"_copy"],[2400,25,1790,27],[2400,26,1790,28,"user"],[2400,30,1790,32],[2400,31,1790,33,"metadata"],[2400,39,1790,41],[2400,40,1790,42],[2401,6,1791,8],[2401,10,1791,12],[2401,11,1791,13,"stsTokenManager"],[2401,26,1791,28],[2401,27,1791,29,"_assign"],[2401,34,1791,36],[2401,35,1791,37,"user"],[2401,39,1791,41],[2401,40,1791,42,"stsTokenManager"],[2401,55,1791,57],[2401,56,1791,58],[2402,4,1792,4],[2403,4,1793,4,"_clone"],[2403,10,1793,10,"_clone"],[2403,11,1793,11,"auth"],[2403,15,1793,15],[2403,17,1793,17],[2404,6,1794,8],[2404,12,1794,14,"newUser"],[2404,19,1794,21],[2404,22,1794,24],[2404,26,1794,28,"UserImpl"],[2404,34,1794,36],[2404,35,1794,37],[2405,8,1795,12],[2405,11,1795,15],[2405,15,1795,19],[2406,8,1796,12,"auth"],[2406,12,1796,16],[2407,8,1797,12,"stsTokenManager"],[2407,23,1797,27],[2407,25,1797,29],[2407,29,1797,33],[2407,30,1797,34,"stsTokenManager"],[2407,45,1797,49],[2407,46,1797,50,"_clone"],[2407,52,1797,56],[2407,53,1797,57],[2408,6,1798,8],[2408,7,1798,9],[2408,8,1798,10],[2409,6,1799,8,"newUser"],[2409,13,1799,15],[2409,14,1799,16,"metadata"],[2409,22,1799,24],[2409,23,1799,25,"_copy"],[2409,28,1799,30],[2409,29,1799,31],[2409,33,1799,35],[2409,34,1799,36,"metadata"],[2409,42,1799,44],[2409,43,1799,45],[2410,6,1800,8],[2410,13,1800,15,"newUser"],[2410,20,1800,22],[2411,4,1801,4],[2412,4,1802,4,"_onReload"],[2412,13,1802,13,"_onReload"],[2412,14,1802,14,"callback"],[2412,22,1802,22],[2412,24,1802,24],[2413,6,1803,8],[2414,6,1804,8,"_assert"],[2414,13,1804,15],[2414,14,1804,16],[2414,15,1804,17],[2414,19,1804,21],[2414,20,1804,22,"reloadListener"],[2414,34,1804,36],[2414,36,1804,38],[2414,40,1804,42],[2414,41,1804,43,"auth"],[2414,45,1804,47],[2414,47,1804,49],[2414,63,1804,65],[2414,64,1804,66],[2414,98,1804,100],[2414,99,1804,101],[2415,6,1805,8],[2415,10,1805,12],[2415,11,1805,13,"reloadListener"],[2415,25,1805,27],[2415,28,1805,30,"callback"],[2415,36,1805,38],[2416,6,1806,8],[2416,10,1806,12],[2416,14,1806,16],[2416,15,1806,17,"reloadUserInfo"],[2416,29,1806,31],[2416,31,1806,33],[2417,8,1807,12],[2417,12,1807,16],[2417,13,1807,17,"_notifyReloadListener"],[2417,34,1807,38],[2417,35,1807,39],[2417,39,1807,43],[2417,40,1807,44,"reloadUserInfo"],[2417,54,1807,58],[2417,55,1807,59],[2418,8,1808,12],[2418,12,1808,16],[2418,13,1808,17,"reloadUserInfo"],[2418,27,1808,31],[2418,30,1808,34],[2418,34,1808,38],[2419,6,1809,8],[2420,4,1810,4],[2421,4,1811,4,"_notifyReloadListener"],[2421,25,1811,25,"_notifyReloadListener"],[2421,26,1811,26,"userInfo"],[2421,34,1811,34],[2421,36,1811,36],[2422,6,1812,8],[2422,10,1812,12],[2422,14,1812,16],[2422,15,1812,17,"reloadListener"],[2422,29,1812,31],[2422,31,1812,33],[2423,8,1813,12],[2423,12,1813,16],[2423,13,1813,17,"reloadListener"],[2423,27,1813,31],[2423,28,1813,32,"userInfo"],[2423,36,1813,40],[2423,37,1813,41],[2424,6,1814,8],[2424,7,1814,9],[2424,13,1815,13],[2425,8,1816,12],[2426,8,1817,12],[2426,12,1817,16],[2426,13,1817,17,"reloadUserInfo"],[2426,27,1817,31],[2426,30,1817,34,"userInfo"],[2426,38,1817,42],[2427,6,1818,8],[2428,4,1819,4],[2429,4,1820,4,"_startProactiveRefresh"],[2429,26,1820,26,"_startProactiveRefresh"],[2429,27,1820,26],[2429,29,1820,29],[2430,6,1821,8],[2430,10,1821,12],[2430,11,1821,13,"proactiveRefresh"],[2430,27,1821,29],[2430,28,1821,30,"_start"],[2430,34,1821,36],[2430,35,1821,37],[2430,36,1821,38],[2431,4,1822,4],[2432,4,1823,4,"_stopProactiveRefresh"],[2432,25,1823,25,"_stopProactiveRefresh"],[2432,26,1823,25],[2432,28,1823,28],[2433,6,1824,8],[2433,10,1824,12],[2433,11,1824,13,"proactiveRefresh"],[2433,27,1824,29],[2433,28,1824,30,"_stop"],[2433,33,1824,35],[2433,34,1824,36],[2433,35,1824,37],[2434,4,1825,4],[2435,4,1826,4],[2435,10,1826,10,"_updateTokensIfNecessary"],[2435,34,1826,34,"_updateTokensIfNecessary"],[2435,35,1826,35,"response"],[2435,43,1826,43],[2435,45,1826,45,"reload"],[2435,51,1826,51],[2435,54,1826,54],[2435,59,1826,59],[2435,61,1826,61],[2436,6,1827,8],[2436,10,1827,12,"tokensRefreshed"],[2436,25,1827,27],[2436,28,1827,30],[2436,33,1827,35],[2437,6,1828,8],[2437,10,1828,12,"response"],[2437,18,1828,20],[2437,19,1828,21,"idToken"],[2437,26,1828,28],[2437,30,1829,12,"response"],[2437,38,1829,20],[2437,39,1829,21,"idToken"],[2437,46,1829,28],[2437,51,1829,33],[2437,55,1829,37],[2437,56,1829,38,"stsTokenManager"],[2437,71,1829,53],[2437,72,1829,54,"accessToken"],[2437,83,1829,65],[2437,85,1829,67],[2438,8,1830,12],[2438,12,1830,16],[2438,13,1830,17,"stsTokenManager"],[2438,28,1830,32],[2438,29,1830,33,"updateFromServerResponse"],[2438,53,1830,57],[2438,54,1830,58,"response"],[2438,62,1830,66],[2438,63,1830,67],[2439,8,1831,12,"tokensRefreshed"],[2439,23,1831,27],[2439,26,1831,30],[2439,30,1831,34],[2440,6,1832,8],[2441,6,1833,8],[2441,10,1833,12,"reload"],[2441,16,1833,18],[2441,18,1833,20],[2442,8,1834,12],[2442,14,1834,18,"_reloadWithoutSaving"],[2442,34,1834,38],[2442,35,1834,39],[2442,39,1834,43],[2442,40,1834,44],[2443,6,1835,8],[2444,6,1836,8],[2444,12,1836,14],[2444,16,1836,18],[2444,17,1836,19,"auth"],[2444,21,1836,23],[2444,22,1836,24,"_persistUserIfCurrent"],[2444,43,1836,45],[2444,44,1836,46],[2444,48,1836,50],[2444,49,1836,51],[2445,6,1837,8],[2445,10,1837,12,"tokensRefreshed"],[2445,25,1837,27],[2445,27,1837,29],[2446,8,1838,12],[2446,12,1838,16],[2446,13,1838,17,"auth"],[2446,17,1838,21],[2446,18,1838,22,"_notifyListenersIfCurrent"],[2446,43,1838,47],[2446,44,1838,48],[2446,48,1838,52],[2446,49,1838,53],[2447,6,1839,8],[2448,4,1840,4],[2449,4,1841,4],[2449,10,1841,10,"delete"],[2449,16,1841,16,"delete"],[2449,17,1841,16],[2449,19,1841,19],[2450,6,1842,8],[2450,10,1842,12],[2450,14,1842,12,"_isFirebaseServerApp"],[2450,26,1842,32],[2450,27,1842,32,"_isFirebaseServerApp"],[2450,47,1842,32],[2450,49,1842,33],[2450,53,1842,37],[2450,54,1842,38,"auth"],[2450,58,1842,42],[2450,59,1842,43,"app"],[2450,62,1842,46],[2450,63,1842,47],[2450,65,1842,49],[2451,8,1843,12],[2451,15,1843,19,"Promise"],[2451,22,1843,26],[2451,23,1843,27,"reject"],[2451,29,1843,33],[2451,30,1843,34,"_serverAppCurrentUserOperationNotSupportedError"],[2451,77,1843,81],[2451,78,1843,82],[2451,82,1843,86],[2451,83,1843,87,"auth"],[2451,87,1843,91],[2451,88,1843,92],[2451,89,1843,93],[2452,6,1844,8],[2453,6,1845,8],[2453,12,1845,14,"idToken"],[2453,19,1845,21],[2453,22,1845,24],[2453,28,1845,30],[2453,32,1845,34],[2453,33,1845,35,"getIdToken"],[2453,43,1845,45],[2453,44,1845,46],[2453,45,1845,47],[2454,6,1846,8],[2454,12,1846,14,"_logoutIfInvalidated"],[2454,32,1846,34],[2454,33,1846,35],[2454,37,1846,39],[2454,39,1846,41,"deleteAccount"],[2454,52,1846,54],[2454,53,1846,55],[2454,57,1846,59],[2454,58,1846,60,"auth"],[2454,62,1846,64],[2454,64,1846,66],[2455,8,1846,68,"idToken"],[2456,6,1846,76],[2456,7,1846,77],[2456,8,1846,78],[2456,9,1846,79],[2457,6,1847,8],[2457,10,1847,12],[2457,11,1847,13,"stsTokenManager"],[2457,26,1847,28],[2457,27,1847,29,"clearRefreshToken"],[2457,44,1847,46],[2457,45,1847,47],[2457,46,1847,48],[2458,6,1848,8],[2459,6,1849,8],[2460,6,1850,8],[2460,13,1850,15],[2460,17,1850,19],[2460,18,1850,20,"auth"],[2460,22,1850,24],[2460,23,1850,25,"signOut"],[2460,30,1850,32],[2460,31,1850,33],[2460,32,1850,34],[2461,4,1851,4],[2462,4,1852,4,"toJSON"],[2462,10,1852,10,"toJSON"],[2462,11,1852,10],[2462,13,1852,13],[2463,6,1853,8],[2463,13,1853,15],[2464,8,1854,12,"uid"],[2464,11,1854,15],[2464,13,1854,17],[2464,17,1854,21],[2464,18,1854,22,"uid"],[2464,21,1854,25],[2465,8,1855,12,"email"],[2465,13,1855,17],[2465,15,1855,19],[2465,19,1855,23],[2465,20,1855,24,"email"],[2465,25,1855,29],[2465,29,1855,33,"undefined"],[2465,38,1855,42],[2466,8,1856,12,"emailVerified"],[2466,21,1856,25],[2466,23,1856,27],[2466,27,1856,31],[2466,28,1856,32,"emailVerified"],[2466,41,1856,45],[2467,8,1857,12,"displayName"],[2467,19,1857,23],[2467,21,1857,25],[2467,25,1857,29],[2467,26,1857,30,"displayName"],[2467,37,1857,41],[2467,41,1857,45,"undefined"],[2467,50,1857,54],[2468,8,1858,12,"isAnonymous"],[2468,19,1858,23],[2468,21,1858,25],[2468,25,1858,29],[2468,26,1858,30,"isAnonymous"],[2468,37,1858,41],[2469,8,1859,12,"photoURL"],[2469,16,1859,20],[2469,18,1859,22],[2469,22,1859,26],[2469,23,1859,27,"photoURL"],[2469,31,1859,35],[2469,35,1859,39,"undefined"],[2469,44,1859,48],[2470,8,1860,12,"phoneNumber"],[2470,19,1860,23],[2470,21,1860,25],[2470,25,1860,29],[2470,26,1860,30,"phoneNumber"],[2470,37,1860,41],[2470,41,1860,45,"undefined"],[2470,50,1860,54],[2471,8,1861,12,"tenantId"],[2471,16,1861,20],[2471,18,1861,22],[2471,22,1861,26],[2471,23,1861,27,"tenantId"],[2471,31,1861,35],[2471,35,1861,39,"undefined"],[2471,44,1861,48],[2472,8,1862,12,"providerData"],[2472,20,1862,24],[2472,22,1862,26],[2472,26,1862,30],[2472,27,1862,31,"providerData"],[2472,39,1862,43],[2472,40,1862,44,"map"],[2472,43,1862,47],[2472,44,1862,48,"userInfo"],[2472,52,1862,56],[2472,57,1862,61],[2473,10,1862,63],[2473,13,1862,66,"userInfo"],[2474,8,1862,75],[2474,9,1862,76],[2474,10,1862,77],[2474,11,1862,78],[2475,8,1863,12,"stsTokenManager"],[2475,23,1863,27],[2475,25,1863,29],[2475,29,1863,33],[2475,30,1863,34,"stsTokenManager"],[2475,45,1863,49],[2475,46,1863,50,"toJSON"],[2475,52,1863,56],[2475,53,1863,57],[2475,54,1863,58],[2476,8,1864,12],[2477,8,1865,12],[2478,8,1866,12,"_redirectEventId"],[2478,24,1866,28],[2478,26,1866,30],[2478,30,1866,34],[2478,31,1866,35,"_redirectEventId"],[2478,47,1866,51],[2479,8,1867,12],[2479,11,1867,15],[2479,15,1867,19],[2479,16,1867,20,"metadata"],[2479,24,1867,28],[2479,25,1867,29,"toJSON"],[2479,31,1867,35],[2479,32,1867,36],[2479,33,1867,37],[2480,8,1868,12],[2481,8,1869,12,"apiKey"],[2481,14,1869,18],[2481,16,1869,20],[2481,20,1869,24],[2481,21,1869,25,"auth"],[2481,25,1869,29],[2481,26,1869,30,"config"],[2481,32,1869,36],[2481,33,1869,37,"apiKey"],[2481,39,1869,43],[2482,8,1870,12,"appName"],[2482,15,1870,19],[2482,17,1870,21],[2482,21,1870,25],[2482,22,1870,26,"auth"],[2482,26,1870,30],[2482,27,1870,31,"name"],[2483,8,1871,12],[2484,8,1872,12],[2485,6,1873,8],[2485,7,1873,9],[2486,4,1874,4],[2487,4,1875,4],[2487,8,1875,8,"refreshToken"],[2487,20,1875,20,"refreshToken"],[2487,21,1875,20],[2487,23,1875,23],[2488,6,1876,8],[2488,13,1876,15],[2488,17,1876,19],[2488,18,1876,20,"stsTokenManager"],[2488,33,1876,35],[2488,34,1876,36,"refreshToken"],[2488,46,1876,48],[2488,50,1876,52],[2488,52,1876,54],[2489,4,1877,4],[2490,4,1878,4],[2490,11,1878,11,"_fromJSON"],[2490,20,1878,20,"_fromJSON"],[2490,21,1878,21,"auth"],[2490,25,1878,25],[2490,27,1878,27,"object"],[2490,33,1878,33],[2490,35,1878,35],[2491,6,1879,8],[2491,12,1879,14,"displayName"],[2491,23,1879,25],[2491,26,1879,28,"object"],[2491,32,1879,34],[2491,33,1879,35,"displayName"],[2491,44,1879,46],[2491,48,1879,50,"undefined"],[2491,57,1879,59],[2492,6,1880,8],[2492,12,1880,14,"email"],[2492,17,1880,19],[2492,20,1880,22,"object"],[2492,26,1880,28],[2492,27,1880,29,"email"],[2492,32,1880,34],[2492,36,1880,38,"undefined"],[2492,45,1880,47],[2493,6,1881,8],[2493,12,1881,14,"phoneNumber"],[2493,23,1881,25],[2493,26,1881,28,"object"],[2493,32,1881,34],[2493,33,1881,35,"phoneNumber"],[2493,44,1881,46],[2493,48,1881,50,"undefined"],[2493,57,1881,59],[2494,6,1882,8],[2494,12,1882,14,"photoURL"],[2494,20,1882,22],[2494,23,1882,25,"object"],[2494,29,1882,31],[2494,30,1882,32,"photoURL"],[2494,38,1882,40],[2494,42,1882,44,"undefined"],[2494,51,1882,53],[2495,6,1883,8],[2495,12,1883,14,"tenantId"],[2495,20,1883,22],[2495,23,1883,25,"object"],[2495,29,1883,31],[2495,30,1883,32,"tenantId"],[2495,38,1883,40],[2495,42,1883,44,"undefined"],[2495,51,1883,53],[2496,6,1884,8],[2496,12,1884,14,"_redirectEventId"],[2496,28,1884,30],[2496,31,1884,33,"object"],[2496,37,1884,39],[2496,38,1884,40,"_redirectEventId"],[2496,54,1884,56],[2496,58,1884,60,"undefined"],[2496,67,1884,69],[2497,6,1885,8],[2497,12,1885,14,"createdAt"],[2497,21,1885,23],[2497,24,1885,26,"object"],[2497,30,1885,32],[2497,31,1885,33,"createdAt"],[2497,40,1885,42],[2497,44,1885,46,"undefined"],[2497,53,1885,55],[2498,6,1886,8],[2498,12,1886,14,"lastLoginAt"],[2498,23,1886,25],[2498,26,1886,28,"object"],[2498,32,1886,34],[2498,33,1886,35,"lastLoginAt"],[2498,44,1886,46],[2498,48,1886,50,"undefined"],[2498,57,1886,59],[2499,6,1887,8],[2499,12,1887,14],[2500,8,1887,16,"uid"],[2500,11,1887,19],[2501,8,1887,21,"emailVerified"],[2501,21,1887,34],[2502,8,1887,36,"isAnonymous"],[2502,19,1887,47],[2503,8,1887,49,"providerData"],[2503,20,1887,61],[2504,8,1887,63,"stsTokenManager"],[2504,23,1887,78],[2504,25,1887,80,"plainObjectTokenManager"],[2505,6,1887,104],[2505,7,1887,105],[2505,10,1887,108,"object"],[2505,16,1887,114],[2506,6,1888,8,"_assert"],[2506,13,1888,15],[2506,14,1888,16,"uid"],[2506,17,1888,19],[2506,21,1888,23,"plainObjectTokenManager"],[2506,44,1888,46],[2506,46,1888,48,"auth"],[2506,50,1888,52],[2506,52,1888,54],[2506,68,1888,70],[2506,69,1888,71],[2506,103,1888,105],[2506,104,1888,106],[2507,6,1889,8],[2507,12,1889,14,"stsTokenManager"],[2507,27,1889,29],[2507,30,1889,32,"StsTokenManager"],[2507,45,1889,47],[2507,46,1889,48,"fromJSON"],[2507,54,1889,56],[2507,55,1889,57],[2507,59,1889,61],[2507,60,1889,62,"name"],[2507,64,1889,66],[2507,66,1889,68,"plainObjectTokenManager"],[2507,89,1889,91],[2507,90,1889,92],[2508,6,1890,8,"_assert"],[2508,13,1890,15],[2508,14,1890,16],[2508,21,1890,23,"uid"],[2508,24,1890,26],[2508,29,1890,31],[2508,37,1890,39],[2508,39,1890,41,"auth"],[2508,43,1890,45],[2508,45,1890,47],[2508,61,1890,63],[2508,62,1890,64],[2508,96,1890,98],[2508,97,1890,99],[2509,6,1891,8,"assertStringOrUndefined"],[2509,29,1891,31],[2509,30,1891,32,"displayName"],[2509,41,1891,43],[2509,43,1891,45,"auth"],[2509,47,1891,49],[2509,48,1891,50,"name"],[2509,52,1891,54],[2509,53,1891,55],[2510,6,1892,8,"assertStringOrUndefined"],[2510,29,1892,31],[2510,30,1892,32,"email"],[2510,35,1892,37],[2510,37,1892,39,"auth"],[2510,41,1892,43],[2510,42,1892,44,"name"],[2510,46,1892,48],[2510,47,1892,49],[2511,6,1893,8,"_assert"],[2511,13,1893,15],[2511,14,1893,16],[2511,21,1893,23,"emailVerified"],[2511,34,1893,36],[2511,39,1893,41],[2511,48,1893,50],[2511,50,1893,52,"auth"],[2511,54,1893,56],[2511,56,1893,58],[2511,72,1893,74],[2511,73,1893,75],[2511,107,1893,109],[2511,108,1893,110],[2512,6,1894,8,"_assert"],[2512,13,1894,15],[2512,14,1894,16],[2512,21,1894,23,"isAnonymous"],[2512,32,1894,34],[2512,37,1894,39],[2512,46,1894,48],[2512,48,1894,50,"auth"],[2512,52,1894,54],[2512,54,1894,56],[2512,70,1894,72],[2512,71,1894,73],[2512,105,1894,107],[2512,106,1894,108],[2513,6,1895,8,"assertStringOrUndefined"],[2513,29,1895,31],[2513,30,1895,32,"phoneNumber"],[2513,41,1895,43],[2513,43,1895,45,"auth"],[2513,47,1895,49],[2513,48,1895,50,"name"],[2513,52,1895,54],[2513,53,1895,55],[2514,6,1896,8,"assertStringOrUndefined"],[2514,29,1896,31],[2514,30,1896,32,"photoURL"],[2514,38,1896,40],[2514,40,1896,42,"auth"],[2514,44,1896,46],[2514,45,1896,47,"name"],[2514,49,1896,51],[2514,50,1896,52],[2515,6,1897,8,"assertStringOrUndefined"],[2515,29,1897,31],[2515,30,1897,32,"tenantId"],[2515,38,1897,40],[2515,40,1897,42,"auth"],[2515,44,1897,46],[2515,45,1897,47,"name"],[2515,49,1897,51],[2515,50,1897,52],[2516,6,1898,8,"assertStringOrUndefined"],[2516,29,1898,31],[2516,30,1898,32,"_redirectEventId"],[2516,46,1898,48],[2516,48,1898,50,"auth"],[2516,52,1898,54],[2516,53,1898,55,"name"],[2516,57,1898,59],[2516,58,1898,60],[2517,6,1899,8,"assertStringOrUndefined"],[2517,29,1899,31],[2517,30,1899,32,"createdAt"],[2517,39,1899,41],[2517,41,1899,43,"auth"],[2517,45,1899,47],[2517,46,1899,48,"name"],[2517,50,1899,52],[2517,51,1899,53],[2518,6,1900,8,"assertStringOrUndefined"],[2518,29,1900,31],[2518,30,1900,32,"lastLoginAt"],[2518,41,1900,43],[2518,43,1900,45,"auth"],[2518,47,1900,49],[2518,48,1900,50,"name"],[2518,52,1900,54],[2518,53,1900,55],[2519,6,1901,8],[2519,12,1901,14,"user"],[2519,16,1901,18],[2519,19,1901,21],[2519,23,1901,25,"UserImpl"],[2519,31,1901,33],[2519,32,1901,34],[2520,8,1902,12,"uid"],[2520,11,1902,15],[2521,8,1903,12,"auth"],[2521,12,1903,16],[2522,8,1904,12,"email"],[2522,13,1904,17],[2523,8,1905,12,"emailVerified"],[2523,21,1905,25],[2524,8,1906,12,"displayName"],[2524,19,1906,23],[2525,8,1907,12,"isAnonymous"],[2525,19,1907,23],[2526,8,1908,12,"photoURL"],[2526,16,1908,20],[2527,8,1909,12,"phoneNumber"],[2527,19,1909,23],[2528,8,1910,12,"tenantId"],[2528,16,1910,20],[2529,8,1911,12,"stsTokenManager"],[2529,23,1911,27],[2530,8,1912,12,"createdAt"],[2530,17,1912,21],[2531,8,1913,12,"lastLoginAt"],[2532,6,1914,8],[2532,7,1914,9],[2532,8,1914,10],[2533,6,1915,8],[2533,10,1915,12,"providerData"],[2533,22,1915,24],[2533,26,1915,28,"Array"],[2533,31,1915,33],[2533,32,1915,34,"isArray"],[2533,39,1915,41],[2533,40,1915,42,"providerData"],[2533,52,1915,54],[2533,53,1915,55],[2533,55,1915,57],[2534,8,1916,12,"user"],[2534,12,1916,16],[2534,13,1916,17,"providerData"],[2534,25,1916,29],[2534,28,1916,32,"providerData"],[2534,40,1916,44],[2534,41,1916,45,"map"],[2534,44,1916,48],[2534,45,1916,49,"userInfo"],[2534,53,1916,57],[2534,58,1916,62],[2535,10,1916,64],[2535,13,1916,67,"userInfo"],[2536,8,1916,76],[2536,9,1916,77],[2536,10,1916,78],[2536,11,1916,79],[2537,6,1917,8],[2538,6,1918,8],[2538,10,1918,12,"_redirectEventId"],[2538,26,1918,28],[2538,28,1918,30],[2539,8,1919,12,"user"],[2539,12,1919,16],[2539,13,1919,17,"_redirectEventId"],[2539,29,1919,33],[2539,32,1919,36,"_redirectEventId"],[2539,48,1919,52],[2540,6,1920,8],[2541,6,1921,8],[2541,13,1921,15,"user"],[2541,17,1921,19],[2542,4,1922,4],[2543,4,1923,4],[2544,0,1924,0],[2545,0,1925,0],[2546,0,1926,0],[2547,0,1927,0],[2548,4,1928,4],[2548,17,1928,17,"_fromIdTokenResponse"],[2548,37,1928,37,"_fromIdTokenResponse"],[2548,38,1928,38,"auth"],[2548,42,1928,42],[2548,44,1928,44,"idTokenResponse"],[2548,59,1928,59],[2548,61,1928,61,"isAnonymous"],[2548,72,1928,72],[2548,75,1928,75],[2548,80,1928,80],[2548,82,1928,82],[2549,6,1929,8],[2549,12,1929,14,"stsTokenManager"],[2549,27,1929,29],[2549,30,1929,32],[2549,34,1929,36,"StsTokenManager"],[2549,49,1929,51],[2549,50,1929,52],[2549,51,1929,53],[2550,6,1930,8,"stsTokenManager"],[2550,21,1930,23],[2550,22,1930,24,"updateFromServerResponse"],[2550,46,1930,48],[2550,47,1930,49,"idTokenResponse"],[2550,62,1930,64],[2550,63,1930,65],[2551,6,1931,8],[2552,6,1932,8],[2552,12,1932,14,"user"],[2552,16,1932,18],[2552,19,1932,21],[2552,23,1932,25,"UserImpl"],[2552,31,1932,33],[2552,32,1932,34],[2553,8,1933,12,"uid"],[2553,11,1933,15],[2553,13,1933,17,"idTokenResponse"],[2553,28,1933,32],[2553,29,1933,33,"localId"],[2553,36,1933,40],[2554,8,1934,12,"auth"],[2554,12,1934,16],[2555,8,1935,12,"stsTokenManager"],[2555,23,1935,27],[2556,8,1936,12,"isAnonymous"],[2557,6,1937,8],[2557,7,1937,9],[2557,8,1937,10],[2558,6,1938,8],[2559,6,1939,8],[2559,12,1939,14,"_reloadWithoutSaving"],[2559,32,1939,34],[2559,33,1939,35,"user"],[2559,37,1939,39],[2559,38,1939,40],[2560,6,1940,8],[2560,13,1940,15,"user"],[2560,17,1940,19],[2561,4,1941,4],[2562,4,1942,4],[2563,0,1943,0],[2564,0,1944,0],[2565,0,1945,0],[2566,0,1946,0],[2567,4,1947,4],[2567,17,1947,17,"_fromGetAccountInfoResponse"],[2567,44,1947,44,"_fromGetAccountInfoResponse"],[2567,45,1947,45,"auth"],[2567,49,1947,49],[2567,51,1947,51,"response"],[2567,59,1947,59],[2567,61,1947,61,"idToken"],[2567,68,1947,68],[2567,70,1947,70],[2568,6,1948,8],[2568,12,1948,14,"coreAccount"],[2568,23,1948,25],[2568,26,1948,28,"response"],[2568,34,1948,36],[2568,35,1948,37,"users"],[2568,40,1948,42],[2568,41,1948,43],[2568,42,1948,44],[2568,43,1948,45],[2569,6,1949,8,"_assert"],[2569,13,1949,15],[2569,14,1949,16,"coreAccount"],[2569,25,1949,27],[2569,26,1949,28,"localId"],[2569,33,1949,35],[2569,38,1949,40,"undefined"],[2569,47,1949,49],[2569,49,1949,51],[2569,65,1949,67],[2569,66,1949,68],[2569,100,1949,102],[2569,101,1949,103],[2570,6,1950,8],[2570,12,1950,14,"providerData"],[2570,24,1950,26],[2570,27,1950,29,"coreAccount"],[2570,38,1950,40],[2570,39,1950,41,"providerUserInfo"],[2570,55,1950,57],[2570,60,1950,62,"undefined"],[2570,69,1950,71],[2570,72,1951,14,"extractProviderData"],[2570,91,1951,33],[2570,92,1951,34,"coreAccount"],[2570,103,1951,45],[2570,104,1951,46,"providerUserInfo"],[2570,120,1951,62],[2570,121,1951,63],[2570,124,1952,14],[2570,126,1952,16],[2571,6,1953,8],[2571,12,1953,14,"isAnonymous"],[2571,23,1953,25],[2571,26,1953,28],[2571,28,1953,30,"coreAccount"],[2571,39,1953,41],[2571,40,1953,42,"email"],[2571,45,1953,47],[2571,49,1953,51,"coreAccount"],[2571,60,1953,62],[2571,61,1953,63,"passwordHash"],[2571,73,1953,75],[2571,74,1953,76],[2571,78,1953,80],[2571,79,1953,81,"providerData"],[2571,91,1953,93],[2571,93,1953,95,"length"],[2571,99,1953,101],[2572,6,1954,8],[2572,12,1954,14,"stsTokenManager"],[2572,27,1954,29],[2572,30,1954,32],[2572,34,1954,36,"StsTokenManager"],[2572,49,1954,51],[2572,50,1954,52],[2572,51,1954,53],[2573,6,1955,8,"stsTokenManager"],[2573,21,1955,23],[2573,22,1955,24,"updateFromIdToken"],[2573,39,1955,41],[2573,40,1955,42,"idToken"],[2573,47,1955,49],[2573,48,1955,50],[2574,6,1956,8],[2575,6,1957,8],[2575,12,1957,14,"user"],[2575,16,1957,18],[2575,19,1957,21],[2575,23,1957,25,"UserImpl"],[2575,31,1957,33],[2575,32,1957,34],[2576,8,1958,12,"uid"],[2576,11,1958,15],[2576,13,1958,17,"coreAccount"],[2576,24,1958,28],[2576,25,1958,29,"localId"],[2576,32,1958,36],[2577,8,1959,12,"auth"],[2577,12,1959,16],[2578,8,1960,12,"stsTokenManager"],[2578,23,1960,27],[2579,8,1961,12,"isAnonymous"],[2580,6,1962,8],[2580,7,1962,9],[2580,8,1962,10],[2581,6,1963,8],[2582,6,1964,8],[2582,12,1964,14,"updates"],[2582,19,1964,21],[2582,22,1964,24],[2583,8,1965,12,"uid"],[2583,11,1965,15],[2583,13,1965,17,"coreAccount"],[2583,24,1965,28],[2583,25,1965,29,"localId"],[2583,32,1965,36],[2584,8,1966,12,"displayName"],[2584,19,1966,23],[2584,21,1966,25,"coreAccount"],[2584,32,1966,36],[2584,33,1966,37,"displayName"],[2584,44,1966,48],[2584,48,1966,52],[2584,52,1966,56],[2585,8,1967,12,"photoURL"],[2585,16,1967,20],[2585,18,1967,22,"coreAccount"],[2585,29,1967,33],[2585,30,1967,34,"photoUrl"],[2585,38,1967,42],[2585,42,1967,46],[2585,46,1967,50],[2586,8,1968,12,"email"],[2586,13,1968,17],[2586,15,1968,19,"coreAccount"],[2586,26,1968,30],[2586,27,1968,31,"email"],[2586,32,1968,36],[2586,36,1968,40],[2586,40,1968,44],[2587,8,1969,12,"emailVerified"],[2587,21,1969,25],[2587,23,1969,27,"coreAccount"],[2587,34,1969,38],[2587,35,1969,39,"emailVerified"],[2587,48,1969,52],[2587,52,1969,56],[2587,57,1969,61],[2588,8,1970,12,"phoneNumber"],[2588,19,1970,23],[2588,21,1970,25,"coreAccount"],[2588,32,1970,36],[2588,33,1970,37,"phoneNumber"],[2588,44,1970,48],[2588,48,1970,52],[2588,52,1970,56],[2589,8,1971,12,"tenantId"],[2589,16,1971,20],[2589,18,1971,22,"coreAccount"],[2589,29,1971,33],[2589,30,1971,34,"tenantId"],[2589,38,1971,42],[2589,42,1971,46],[2589,46,1971,50],[2590,8,1972,12,"providerData"],[2590,20,1972,24],[2591,8,1973,12,"metadata"],[2591,16,1973,20],[2591,18,1973,22],[2591,22,1973,26,"UserMetadata"],[2591,34,1973,38],[2591,35,1973,39,"coreAccount"],[2591,46,1973,50],[2591,47,1973,51,"createdAt"],[2591,56,1973,60],[2591,58,1973,62,"coreAccount"],[2591,69,1973,73],[2591,70,1973,74,"lastLoginAt"],[2591,81,1973,85],[2591,82,1973,86],[2592,8,1974,12,"isAnonymous"],[2592,19,1974,23],[2592,21,1974,25],[2592,23,1974,27,"coreAccount"],[2592,34,1974,38],[2592,35,1974,39,"email"],[2592,40,1974,44],[2592,44,1974,48,"coreAccount"],[2592,55,1974,59],[2592,56,1974,60,"passwordHash"],[2592,68,1974,72],[2592,69,1974,73],[2592,73,1975,16],[2592,74,1975,17,"providerData"],[2592,86,1975,29],[2592,88,1975,31,"length"],[2593,6,1976,8],[2593,7,1976,9],[2594,6,1977,8,"Object"],[2594,12,1977,14],[2594,13,1977,15,"assign"],[2594,19,1977,21],[2594,20,1977,22,"user"],[2594,24,1977,26],[2594,26,1977,28,"updates"],[2594,33,1977,35],[2594,34,1977,36],[2595,6,1978,8],[2595,13,1978,15,"user"],[2595,17,1978,19],[2596,4,1979,4],[2597,2,1980,0],[2599,2,1982,0],[2600,0,1983,0],[2601,0,1984,0],[2602,0,1985,0],[2603,0,1986,0],[2604,0,1987,0],[2605,0,1988,0],[2606,0,1989,0],[2607,0,1990,0],[2608,0,1991,0],[2609,0,1992,0],[2610,0,1993,0],[2611,0,1994,0],[2612,0,1995,0],[2613,0,1996,0],[2614,0,1997,0],[2615,2,1998,0],[2615,8,1998,6,"instanceCache"],[2615,21,1998,19],[2615,24,1998,22],[2615,28,1998,26,"Map"],[2615,31,1998,29],[2615,32,1998,30],[2615,33,1998,31],[2616,2,1999,0],[2616,11,1999,9,"_getInstance"],[2616,23,1999,21,"_getInstance"],[2616,24,1999,22,"cls"],[2616,27,1999,25],[2616,29,1999,27],[2617,4,2000,4,"debugAssert"],[2617,15,2000,15],[2617,16,2000,16,"cls"],[2617,19,2000,19],[2617,31,2000,31,"Function"],[2617,39,2000,39],[2617,41,2000,41],[2617,70,2000,70],[2617,71,2000,71],[2618,4,2001,4],[2618,8,2001,8,"instance"],[2618,16,2001,16],[2618,19,2001,19,"instanceCache"],[2618,32,2001,32],[2618,33,2001,33,"get"],[2618,36,2001,36],[2618,37,2001,37,"cls"],[2618,40,2001,40],[2618,41,2001,41],[2619,4,2002,4],[2619,8,2002,8,"instance"],[2619,16,2002,16],[2619,18,2002,18],[2620,6,2003,8,"debugAssert"],[2620,17,2003,19],[2620,18,2003,20,"instance"],[2620,26,2003,28],[2620,38,2003,40,"cls"],[2620,41,2003,43],[2620,43,2003,45],[2620,91,2003,93],[2620,92,2003,94],[2621,6,2004,8],[2621,13,2004,15,"instance"],[2621,21,2004,23],[2622,4,2005,4],[2623,4,2006,4,"instance"],[2623,12,2006,12],[2623,15,2006,15],[2623,19,2006,19,"cls"],[2623,22,2006,22],[2623,23,2006,23],[2623,24,2006,24],[2624,4,2007,4,"instanceCache"],[2624,17,2007,17],[2624,18,2007,18,"set"],[2624,21,2007,21],[2624,22,2007,22,"cls"],[2624,25,2007,25],[2624,27,2007,27,"instance"],[2624,35,2007,35],[2624,36,2007,36],[2625,4,2008,4],[2625,11,2008,11,"instance"],[2625,19,2008,19],[2626,2,2009,0],[2628,2,2011,0],[2629,0,2012,0],[2630,0,2013,0],[2631,0,2014,0],[2632,0,2015,0],[2633,0,2016,0],[2634,0,2017,0],[2635,0,2018,0],[2636,0,2019,0],[2637,0,2020,0],[2638,0,2021,0],[2639,0,2022,0],[2640,0,2023,0],[2641,0,2024,0],[2642,0,2025,0],[2643,0,2026,0],[2644,2,2027,0],[2644,8,2027,6,"InMemoryPersistence"],[2644,27,2027,25],[2644,28,2027,26],[2645,4,2028,4,"constructor"],[2645,15,2028,15,"constructor"],[2645,16,2028,15],[2645,18,2028,18],[2646,6,2029,8],[2646,10,2029,12],[2646,11,2029,13,"type"],[2646,15,2029,17],[2646,18,2029,20],[2646,24,2029,26],[2646,25,2029,27],[2647,6,2030,8],[2647,10,2030,12],[2647,11,2030,13,"storage"],[2647,18,2030,20],[2647,21,2030,23],[2647,22,2030,24],[2647,23,2030,25],[2648,4,2031,4],[2649,4,2032,4],[2649,10,2032,10,"_isAvailable"],[2649,22,2032,22,"_isAvailable"],[2649,23,2032,22],[2649,25,2032,25],[2650,6,2033,8],[2650,13,2033,15],[2650,17,2033,19],[2651,4,2034,4],[2652,4,2035,4],[2652,10,2035,10,"_set"],[2652,14,2035,14,"_set"],[2652,15,2035,15,"key"],[2652,18,2035,18],[2652,20,2035,20,"value"],[2652,25,2035,25],[2652,27,2035,27],[2653,6,2036,8],[2653,10,2036,12],[2653,11,2036,13,"storage"],[2653,18,2036,20],[2653,19,2036,21,"key"],[2653,22,2036,24],[2653,23,2036,25],[2653,26,2036,28,"value"],[2653,31,2036,33],[2654,4,2037,4],[2655,4,2038,4],[2655,10,2038,10,"_get"],[2655,14,2038,14,"_get"],[2655,15,2038,15,"key"],[2655,18,2038,18],[2655,20,2038,20],[2656,6,2039,8],[2656,12,2039,14,"value"],[2656,17,2039,19],[2656,20,2039,22],[2656,24,2039,26],[2656,25,2039,27,"storage"],[2656,32,2039,34],[2656,33,2039,35,"key"],[2656,36,2039,38],[2656,37,2039,39],[2657,6,2040,8],[2657,13,2040,15,"value"],[2657,18,2040,20],[2657,23,2040,25,"undefined"],[2657,32,2040,34],[2657,35,2040,37],[2657,39,2040,41],[2657,42,2040,44,"value"],[2657,47,2040,49],[2658,4,2041,4],[2659,4,2042,4],[2659,10,2042,10,"_remove"],[2659,17,2042,17,"_remove"],[2659,18,2042,18,"key"],[2659,21,2042,21],[2659,23,2042,23],[2660,6,2043,8],[2660,13,2043,15],[2660,17,2043,19],[2660,18,2043,20,"storage"],[2660,25,2043,27],[2660,26,2043,28,"key"],[2660,29,2043,31],[2660,30,2043,32],[2661,4,2044,4],[2662,4,2045,4,"_addListener"],[2662,16,2045,16,"_addListener"],[2662,17,2045,17,"_key"],[2662,21,2045,21],[2662,23,2045,23,"_listener"],[2662,32,2045,32],[2662,34,2045,34],[2663,6,2046,8],[2664,6,2047,8],[2665,4,2048,4],[2666,4,2049,4,"_removeListener"],[2666,19,2049,19,"_removeListener"],[2666,20,2049,20,"_key"],[2666,24,2049,24],[2666,26,2049,26,"_listener"],[2666,35,2049,35],[2666,37,2049,37],[2667,6,2050,8],[2668,6,2051,8],[2669,4,2052,4],[2670,2,2053,0],[2671,2,2054,0,"InMemoryPersistence"],[2671,21,2054,19],[2671,22,2054,20,"type"],[2671,26,2054,24],[2671,29,2054,27],[2671,35,2054,33],[2672,2,2055,0],[2673,0,2056,0],[2674,0,2057,0],[2675,0,2058,0],[2676,0,2059,0],[2677,2,2060,0],[2677,8,2060,6,"inMemoryPersistence"],[2677,27,2060,25],[2677,30,2060,28,"InMemoryPersistence"],[2677,49,2060,47],[2679,2,2062,0],[2680,0,2063,0],[2681,0,2064,0],[2682,0,2065,0],[2683,0,2066,0],[2684,0,2067,0],[2685,0,2068,0],[2686,0,2069,0],[2687,0,2070,0],[2688,0,2071,0],[2689,0,2072,0],[2690,0,2073,0],[2691,0,2074,0],[2692,0,2075,0],[2693,0,2076,0],[2694,0,2077,0],[2695,2,2078,0],[2695,11,2078,9,"_persistenceKeyName"],[2695,30,2078,28,"_persistenceKeyName"],[2695,31,2078,29,"key"],[2695,34,2078,32],[2695,36,2078,34,"apiKey"],[2695,42,2078,40],[2695,44,2078,42,"appName"],[2695,51,2078,49],[2695,53,2078,51],[2696,4,2079,4],[2696,11,2079,11],[2696,14,2079,14],[2696,24,2079,24],[2696,25,2079,25],[2696,56,2079,56,"key"],[2696,59,2079,59],[2696,63,2079,63,"apiKey"],[2696,69,2079,69],[2696,73,2079,73,"appName"],[2696,80,2079,80],[2696,82,2079,82],[2697,2,2080,0],[2698,2,2081,0],[2698,8,2081,6,"PersistenceUserManager"],[2698,30,2081,28],[2698,31,2081,29],[2699,4,2082,4,"constructor"],[2699,15,2082,15,"constructor"],[2699,16,2082,16,"persistence"],[2699,27,2082,27],[2699,29,2082,29,"auth"],[2699,33,2082,33],[2699,35,2082,35,"userKey"],[2699,42,2082,42],[2699,44,2082,44],[2700,6,2083,8],[2700,10,2083,12],[2700,11,2083,13,"persistence"],[2700,22,2083,24],[2700,25,2083,27,"persistence"],[2700,36,2083,38],[2701,6,2084,8],[2701,10,2084,12],[2701,11,2084,13,"auth"],[2701,15,2084,17],[2701,18,2084,20,"auth"],[2701,22,2084,24],[2702,6,2085,8],[2702,10,2085,12],[2702,11,2085,13,"userKey"],[2702,18,2085,20],[2702,21,2085,23,"userKey"],[2702,28,2085,30],[2703,6,2086,8],[2703,12,2086,14],[2704,8,2086,16,"config"],[2704,14,2086,22],[2705,8,2086,24,"name"],[2706,6,2086,29],[2706,7,2086,30],[2706,10,2086,33],[2706,14,2086,37],[2706,15,2086,38,"auth"],[2706,19,2086,42],[2707,6,2087,8],[2707,10,2087,12],[2707,11,2087,13,"fullUserKey"],[2707,22,2087,24],[2707,25,2087,27,"_persistenceKeyName"],[2707,44,2087,46],[2707,45,2087,47],[2707,49,2087,51],[2707,50,2087,52,"userKey"],[2707,57,2087,59],[2707,59,2087,61,"config"],[2707,65,2087,67],[2707,66,2087,68,"apiKey"],[2707,72,2087,74],[2707,74,2087,76,"name"],[2707,78,2087,80],[2707,79,2087,81],[2708,6,2088,8],[2708,10,2088,12],[2708,11,2088,13,"fullPersistenceKey"],[2708,29,2088,31],[2708,32,2088,34,"_persistenceKeyName"],[2708,51,2088,53],[2708,52,2088,54],[2708,65,2088,67],[2708,66,2088,68],[2708,98,2088,100,"config"],[2708,104,2088,106],[2708,105,2088,107,"apiKey"],[2708,111,2088,113],[2708,113,2088,115,"name"],[2708,117,2088,119],[2708,118,2088,120],[2709,6,2089,8],[2709,10,2089,12],[2709,11,2089,13,"boundEventHandler"],[2709,28,2089,30],[2709,31,2089,33,"auth"],[2709,35,2089,37],[2709,36,2089,38,"_onStorageEvent"],[2709,51,2089,53],[2709,52,2089,54,"bind"],[2709,56,2089,58],[2709,57,2089,59,"auth"],[2709,61,2089,63],[2709,62,2089,64],[2710,6,2090,8],[2710,10,2090,12],[2710,11,2090,13,"persistence"],[2710,22,2090,24],[2710,23,2090,25,"_addListener"],[2710,35,2090,37],[2710,36,2090,38],[2710,40,2090,42],[2710,41,2090,43,"fullUserKey"],[2710,52,2090,54],[2710,54,2090,56],[2710,58,2090,60],[2710,59,2090,61,"boundEventHandler"],[2710,76,2090,78],[2710,77,2090,79],[2711,4,2091,4],[2712,4,2092,4,"setCurrentUser"],[2712,18,2092,18,"setCurrentUser"],[2712,19,2092,19,"user"],[2712,23,2092,23],[2712,25,2092,25],[2713,6,2093,8],[2713,13,2093,15],[2713,17,2093,19],[2713,18,2093,20,"persistence"],[2713,29,2093,31],[2713,30,2093,32,"_set"],[2713,34,2093,36],[2713,35,2093,37],[2713,39,2093,41],[2713,40,2093,42,"fullUserKey"],[2713,51,2093,53],[2713,53,2093,55,"user"],[2713,57,2093,59],[2713,58,2093,60,"toJSON"],[2713,64,2093,66],[2713,65,2093,67],[2713,66,2093,68],[2713,67,2093,69],[2714,4,2094,4],[2715,4,2095,4],[2715,10,2095,10,"getCurrentUser"],[2715,24,2095,24,"getCurrentUser"],[2715,25,2095,24],[2715,27,2095,27],[2716,6,2096,8],[2716,12,2096,14,"blob"],[2716,16,2096,18],[2716,19,2096,21],[2716,25,2096,27],[2716,29,2096,31],[2716,30,2096,32,"persistence"],[2716,41,2096,43],[2716,42,2096,44,"_get"],[2716,46,2096,48],[2716,47,2096,49],[2716,51,2096,53],[2716,52,2096,54,"fullUserKey"],[2716,63,2096,65],[2716,64,2096,66],[2717,6,2097,8],[2717,10,2097,12],[2717,11,2097,13,"blob"],[2717,15,2097,17],[2717,17,2097,19],[2718,8,2098,12],[2718,15,2098,19],[2718,19,2098,23],[2719,6,2099,8],[2720,6,2100,8],[2720,10,2100,12],[2720,17,2100,19,"blob"],[2720,21,2100,23],[2720,26,2100,28],[2720,34,2100,36],[2720,36,2100,38],[2721,8,2101,12],[2721,14,2101,18,"response"],[2721,22,2101,26],[2721,25,2101,29],[2721,31,2101,35,"getAccountInfo"],[2721,45,2101,49],[2721,46,2101,50],[2721,50,2101,54],[2721,51,2101,55,"auth"],[2721,55,2101,59],[2721,57,2101,61],[2722,10,2101,63,"idToken"],[2722,17,2101,70],[2722,19,2101,72,"blob"],[2723,8,2101,77],[2723,9,2101,78],[2723,10,2101,79],[2723,11,2101,80,"catch"],[2723,16,2101,85],[2723,17,2101,86],[2723,23,2101,92,"undefined"],[2723,32,2101,101],[2723,33,2101,102],[2724,8,2102,12],[2724,12,2102,16],[2724,13,2102,17,"response"],[2724,21,2102,25],[2724,23,2102,27],[2725,10,2103,16],[2725,17,2103,23],[2725,21,2103,27],[2726,8,2104,12],[2727,8,2105,12],[2727,15,2105,19,"UserImpl"],[2727,23,2105,27],[2727,24,2105,28,"_fromGetAccountInfoResponse"],[2727,51,2105,55],[2727,52,2105,56],[2727,56,2105,60],[2727,57,2105,61,"auth"],[2727,61,2105,65],[2727,63,2105,67,"response"],[2727,71,2105,75],[2727,73,2105,77,"blob"],[2727,77,2105,81],[2727,78,2105,82],[2728,6,2106,8],[2729,6,2107,8],[2729,13,2107,15,"UserImpl"],[2729,21,2107,23],[2729,22,2107,24,"_fromJSON"],[2729,31,2107,33],[2729,32,2107,34],[2729,36,2107,38],[2729,37,2107,39,"auth"],[2729,41,2107,43],[2729,43,2107,45,"blob"],[2729,47,2107,49],[2729,48,2107,50],[2730,4,2108,4],[2731,4,2109,4,"removeCurrentUser"],[2731,21,2109,21,"removeCurrentUser"],[2731,22,2109,21],[2731,24,2109,24],[2732,6,2110,8],[2732,13,2110,15],[2732,17,2110,19],[2732,18,2110,20,"persistence"],[2732,29,2110,31],[2732,30,2110,32,"_remove"],[2732,37,2110,39],[2732,38,2110,40],[2732,42,2110,44],[2732,43,2110,45,"fullUserKey"],[2732,54,2110,56],[2732,55,2110,57],[2733,4,2111,4],[2734,4,2112,4,"savePersistenceForRedirect"],[2734,30,2112,30,"savePersistenceForRedirect"],[2734,31,2112,30],[2734,33,2112,33],[2735,6,2113,8],[2735,13,2113,15],[2735,17,2113,19],[2735,18,2113,20,"persistence"],[2735,29,2113,31],[2735,30,2113,32,"_set"],[2735,34,2113,36],[2735,35,2113,37],[2735,39,2113,41],[2735,40,2113,42,"fullPersistenceKey"],[2735,58,2113,60],[2735,60,2113,62],[2735,64,2113,66],[2735,65,2113,67,"persistence"],[2735,76,2113,78],[2735,77,2113,79,"type"],[2735,81,2113,83],[2735,82,2113,84],[2736,4,2114,4],[2737,4,2115,4],[2737,10,2115,10,"setPersistence"],[2737,24,2115,24,"setPersistence"],[2737,25,2115,25,"newPersistence"],[2737,39,2115,39],[2737,41,2115,41],[2738,6,2116,8],[2738,10,2116,12],[2738,14,2116,16],[2738,15,2116,17,"persistence"],[2738,26,2116,28],[2738,31,2116,33,"newPersistence"],[2738,45,2116,47],[2738,47,2116,49],[2739,8,2117,12],[2740,6,2118,8],[2741,6,2119,8],[2741,12,2119,14,"currentUser"],[2741,23,2119,25],[2741,26,2119,28],[2741,32,2119,34],[2741,36,2119,38],[2741,37,2119,39,"getCurrentUser"],[2741,51,2119,53],[2741,52,2119,54],[2741,53,2119,55],[2742,6,2120,8],[2742,12,2120,14],[2742,16,2120,18],[2742,17,2120,19,"removeCurrentUser"],[2742,34,2120,36],[2742,35,2120,37],[2742,36,2120,38],[2743,6,2121,8],[2743,10,2121,12],[2743,11,2121,13,"persistence"],[2743,22,2121,24],[2743,25,2121,27,"newPersistence"],[2743,39,2121,41],[2744,6,2122,8],[2744,10,2122,12,"currentUser"],[2744,21,2122,23],[2744,23,2122,25],[2745,8,2123,12],[2745,15,2123,19],[2745,19,2123,23],[2745,20,2123,24,"setCurrentUser"],[2745,34,2123,38],[2745,35,2123,39,"currentUser"],[2745,46,2123,50],[2745,47,2123,51],[2746,6,2124,8],[2747,4,2125,4],[2748,4,2126,4,"delete"],[2748,10,2126,10,"delete"],[2748,11,2126,10],[2748,13,2126,13],[2749,6,2127,8],[2749,10,2127,12],[2749,11,2127,13,"persistence"],[2749,22,2127,24],[2749,23,2127,25,"_removeListener"],[2749,38,2127,40],[2749,39,2127,41],[2749,43,2127,45],[2749,44,2127,46,"fullUserKey"],[2749,55,2127,57],[2749,57,2127,59],[2749,61,2127,63],[2749,62,2127,64,"boundEventHandler"],[2749,79,2127,81],[2749,80,2127,82],[2750,4,2128,4],[2751,4,2129,4],[2751,17,2129,17,"create"],[2751,23,2129,23,"create"],[2751,24,2129,24,"auth"],[2751,28,2129,28],[2751,30,2129,30,"persistenceHierarchy"],[2751,50,2129,50],[2751,52,2129,52,"userKey"],[2751,59,2129,59],[2751,62,2129,62],[2751,72,2129,72],[2751,73,2129,73],[2751,98,2129,98],[2752,6,2130,8],[2752,10,2130,12],[2752,11,2130,13,"persistenceHierarchy"],[2752,31,2130,33],[2752,32,2130,34,"length"],[2752,38,2130,40],[2752,40,2130,42],[2753,8,2131,12],[2753,15,2131,19],[2753,19,2131,23,"PersistenceUserManager"],[2753,41,2131,45],[2753,42,2131,46,"_getInstance"],[2753,54,2131,58],[2753,55,2131,59,"inMemoryPersistence"],[2753,74,2131,78],[2753,75,2131,79],[2753,77,2131,81,"auth"],[2753,81,2131,85],[2753,83,2131,87,"userKey"],[2753,90,2131,94],[2753,91,2131,95],[2754,6,2132,8],[2755,6,2133,8],[2756,6,2134,8],[2756,12,2134,14,"availablePersistences"],[2756,33,2134,35],[2756,36,2134,38],[2756,37,2134,39],[2756,43,2134,45,"Promise"],[2756,50,2134,52],[2756,51,2134,53,"all"],[2756,54,2134,56],[2756,55,2134,57,"persistenceHierarchy"],[2756,75,2134,77],[2756,76,2134,78,"map"],[2756,79,2134,81],[2756,80,2134,82],[2756,86,2134,89,"persistence"],[2756,97,2134,100],[2756,101,2134,105],[2757,8,2135,12],[2757,12,2135,16],[2757,18,2135,22,"persistence"],[2757,29,2135,33],[2757,30,2135,34,"_isAvailable"],[2757,42,2135,46],[2757,43,2135,47],[2757,44,2135,48],[2757,46,2135,50],[2758,10,2136,16],[2758,17,2136,23,"persistence"],[2758,28,2136,34],[2759,8,2137,12],[2760,8,2138,12],[2760,15,2138,19,"undefined"],[2760,24,2138,28],[2761,6,2139,8],[2761,7,2139,9],[2761,8,2139,10],[2761,9,2139,11],[2761,11,2139,13,"filter"],[2761,17,2139,19],[2761,18,2139,20,"persistence"],[2761,29,2139,31],[2761,33,2139,35,"persistence"],[2761,44,2139,46],[2761,45,2139,47],[2762,6,2140,8],[2763,6,2141,8],[2763,10,2141,12,"selectedPersistence"],[2763,29,2141,31],[2763,32,2141,34,"availablePersistences"],[2763,53,2141,55],[2763,54,2141,56],[2763,55,2141,57],[2763,56,2141,58],[2763,60,2142,12,"_getInstance"],[2763,72,2142,24],[2763,73,2142,25,"inMemoryPersistence"],[2763,92,2142,44],[2763,93,2142,45],[2764,6,2143,8],[2764,12,2143,14,"key"],[2764,15,2143,17],[2764,18,2143,20,"_persistenceKeyName"],[2764,37,2143,39],[2764,38,2143,40,"userKey"],[2764,45,2143,47],[2764,47,2143,49,"auth"],[2764,51,2143,53],[2764,52,2143,54,"config"],[2764,58,2143,60],[2764,59,2143,61,"apiKey"],[2764,65,2143,67],[2764,67,2143,69,"auth"],[2764,71,2143,73],[2764,72,2143,74,"name"],[2764,76,2143,78],[2764,77,2143,79],[2765,6,2144,8],[2766,6,2145,8],[2767,6,2146,8],[2767,10,2146,12,"userToMigrate"],[2767,23,2146,25],[2767,26,2146,28],[2767,30,2146,32],[2768,6,2147,8],[2769,6,2148,8],[2770,6,2149,8],[2771,6,2150,8],[2771,11,2150,13],[2771,17,2150,19,"persistence"],[2771,28,2150,30],[2771,32,2150,34,"persistenceHierarchy"],[2771,52,2150,54],[2771,54,2150,56],[2772,8,2151,12],[2772,12,2151,16],[2773,10,2152,16],[2773,16,2152,22,"blob"],[2773,20,2152,26],[2773,23,2152,29],[2773,29,2152,35,"persistence"],[2773,40,2152,46],[2773,41,2152,47,"_get"],[2773,45,2152,51],[2773,46,2152,52,"key"],[2773,49,2152,55],[2773,50,2152,56],[2774,10,2153,16],[2774,14,2153,20,"blob"],[2774,18,2153,24],[2774,20,2153,26],[2775,12,2154,20],[2775,16,2154,24,"user"],[2775,20,2154,28],[2776,12,2155,20],[2776,16,2155,24],[2776,23,2155,31,"blob"],[2776,27,2155,35],[2776,32,2155,40],[2776,40,2155,48],[2776,42,2155,50],[2777,14,2156,24],[2777,20,2156,30,"response"],[2777,28,2156,38],[2777,31,2156,41],[2777,37,2156,47,"getAccountInfo"],[2777,51,2156,61],[2777,52,2156,62,"auth"],[2777,56,2156,66],[2777,58,2156,68],[2778,16,2157,28,"idToken"],[2778,23,2157,35],[2778,25,2157,37,"blob"],[2779,14,2158,24],[2779,15,2158,25],[2779,16,2158,26],[2779,17,2158,27,"catch"],[2779,22,2158,32],[2779,23,2158,33],[2779,29,2158,39,"undefined"],[2779,38,2158,48],[2779,39,2158,49],[2780,14,2159,24],[2780,18,2159,28],[2780,19,2159,29,"response"],[2780,27,2159,37],[2780,29,2159,39],[2781,16,2160,28],[2782,14,2161,24],[2783,14,2162,24,"user"],[2783,18,2162,28],[2783,21,2162,31],[2783,27,2162,37,"UserImpl"],[2783,35,2162,45],[2783,36,2162,46,"_fromGetAccountInfoResponse"],[2783,63,2162,73],[2783,64,2162,74,"auth"],[2783,68,2162,78],[2783,70,2162,80,"response"],[2783,78,2162,88],[2783,80,2162,90,"blob"],[2783,84,2162,94],[2783,85,2162,95],[2784,12,2163,20],[2784,13,2163,21],[2784,19,2164,25],[2785,14,2165,24,"user"],[2785,18,2165,28],[2785,21,2165,31,"UserImpl"],[2785,29,2165,39],[2785,30,2165,40,"_fromJSON"],[2785,39,2165,49],[2785,40,2165,50,"auth"],[2785,44,2165,54],[2785,46,2165,56,"blob"],[2785,50,2165,60],[2785,51,2165,61],[2785,52,2165,62],[2785,53,2165,63],[2786,12,2166,20],[2787,12,2167,20],[2787,16,2167,24,"persistence"],[2787,27,2167,35],[2787,32,2167,40,"selectedPersistence"],[2787,51,2167,59],[2787,53,2167,61],[2788,14,2168,24,"userToMigrate"],[2788,27,2168,37],[2788,30,2168,40,"user"],[2788,34,2168,44],[2789,12,2169,20],[2790,12,2170,20,"selectedPersistence"],[2790,31,2170,39],[2790,34,2170,42,"persistence"],[2790,45,2170,53],[2791,12,2171,20],[2792,10,2172,16],[2793,8,2173,12],[2793,9,2173,13],[2793,10,2174,12],[2793,16,2174,18],[2793,17,2174,20],[2794,6,2175,8],[2795,6,2176,8],[2796,6,2177,8],[2797,6,2178,8],[2797,12,2178,14,"migrationHierarchy"],[2797,30,2178,32],[2797,33,2178,35,"availablePersistences"],[2797,54,2178,56],[2797,55,2178,57,"filter"],[2797,61,2178,63],[2797,62,2178,64,"p"],[2797,63,2178,65],[2797,67,2178,69,"p"],[2797,68,2178,70],[2797,69,2178,71,"_shouldAllowMigration"],[2797,90,2178,92],[2797,91,2178,93],[2798,6,2179,8],[2799,6,2180,8],[2799,10,2180,12],[2799,11,2180,13,"selectedPersistence"],[2799,30,2180,32],[2799,31,2180,33,"_shouldAllowMigration"],[2799,52,2180,54],[2799,56,2181,12],[2799,57,2181,13,"migrationHierarchy"],[2799,75,2181,31],[2799,76,2181,32,"length"],[2799,82,2181,38],[2799,84,2181,40],[2800,8,2182,12],[2800,15,2182,19],[2800,19,2182,23,"PersistenceUserManager"],[2800,41,2182,45],[2800,42,2182,46,"selectedPersistence"],[2800,61,2182,65],[2800,63,2182,67,"auth"],[2800,67,2182,71],[2800,69,2182,73,"userKey"],[2800,76,2182,80],[2800,77,2182,81],[2801,6,2183,8],[2802,6,2184,8,"selectedPersistence"],[2802,25,2184,27],[2802,28,2184,30,"migrationHierarchy"],[2802,46,2184,48],[2802,47,2184,49],[2802,48,2184,50],[2802,49,2184,51],[2803,6,2185,8],[2803,10,2185,12,"userToMigrate"],[2803,23,2185,25],[2803,25,2185,27],[2804,8,2186,12],[2805,8,2187,12],[2806,8,2188,12],[2806,14,2188,18,"selectedPersistence"],[2806,33,2188,37],[2806,34,2188,38,"_set"],[2806,38,2188,42],[2806,39,2188,43,"key"],[2806,42,2188,46],[2806,44,2188,48,"userToMigrate"],[2806,57,2188,61],[2806,58,2188,62,"toJSON"],[2806,64,2188,68],[2806,65,2188,69],[2806,66,2188,70],[2806,67,2188,71],[2807,6,2189,8],[2808,6,2190,8],[2809,6,2191,8],[2810,6,2192,8],[2810,12,2192,14,"Promise"],[2810,19,2192,21],[2810,20,2192,22,"all"],[2810,23,2192,25],[2810,24,2192,26,"persistenceHierarchy"],[2810,44,2192,46],[2810,45,2192,47,"map"],[2810,48,2192,50],[2810,49,2192,51],[2810,55,2192,58,"persistence"],[2810,66,2192,69],[2810,70,2192,74],[2811,8,2193,12],[2811,12,2193,16,"persistence"],[2811,23,2193,27],[2811,28,2193,32,"selectedPersistence"],[2811,47,2193,51],[2811,49,2193,53],[2812,10,2194,16],[2812,14,2194,20],[2813,12,2195,20],[2813,18,2195,26,"persistence"],[2813,29,2195,37],[2813,30,2195,38,"_remove"],[2813,37,2195,45],[2813,38,2195,46,"key"],[2813,41,2195,49],[2813,42,2195,50],[2814,10,2196,16],[2814,11,2196,17],[2814,12,2197,16],[2814,18,2197,22],[2814,19,2197,24],[2815,8,2198,12],[2816,6,2199,8],[2816,7,2199,9],[2816,8,2199,10],[2816,9,2199,11],[2817,6,2200,8],[2817,13,2200,15],[2817,17,2200,19,"PersistenceUserManager"],[2817,39,2200,41],[2817,40,2200,42,"selectedPersistence"],[2817,59,2200,61],[2817,61,2200,63,"auth"],[2817,65,2200,67],[2817,67,2200,69,"userKey"],[2817,74,2200,76],[2817,75,2200,77],[2818,4,2201,4],[2819,2,2202,0],[2821,2,2204,0],[2822,0,2205,0],[2823,0,2206,0],[2824,0,2207,0],[2825,0,2208,0],[2826,0,2209,0],[2827,0,2210,0],[2828,0,2211,0],[2829,0,2212,0],[2830,0,2213,0],[2831,0,2214,0],[2832,0,2215,0],[2833,0,2216,0],[2834,0,2217,0],[2835,0,2218,0],[2836,0,2219,0],[2837,2,2220,0],[2838,0,2221,0],[2839,0,2222,0],[2840,2,2223,0],[2840,11,2223,9,"_getBrowserName"],[2840,26,2223,24,"_getBrowserName"],[2840,27,2223,25,"userAgent"],[2840,36,2223,34],[2840,38,2223,36],[2841,4,2224,4],[2841,10,2224,10,"ua"],[2841,12,2224,12],[2841,15,2224,15,"userAgent"],[2841,24,2224,24],[2841,25,2224,25,"toLowerCase"],[2841,36,2224,36],[2841,37,2224,37],[2841,38,2224,38],[2842,4,2225,4],[2842,8,2225,8,"ua"],[2842,10,2225,10],[2842,11,2225,11,"includes"],[2842,19,2225,19],[2842,20,2225,20],[2842,28,2225,28],[2842,29,2225,29],[2842,33,2225,33,"ua"],[2842,35,2225,35],[2842,36,2225,36,"includes"],[2842,44,2225,44],[2842,45,2225,45],[2842,51,2225,51],[2842,52,2225,52],[2842,56,2225,56,"ua"],[2842,58,2225,58],[2842,59,2225,59,"includes"],[2842,67,2225,67],[2842,68,2225,68],[2842,76,2225,76],[2842,77,2225,77],[2842,79,2225,79],[2843,6,2226,8],[2843,13,2226,15],[2843,20,2226,22],[2843,21,2226,23],[2844,4,2227,4],[2844,5,2227,5],[2844,11,2228,9],[2844,15,2228,13,"_isIEMobile"],[2844,26,2228,24],[2844,27,2228,25,"ua"],[2844,29,2228,27],[2844,30,2228,28],[2844,32,2228,30],[2845,6,2229,8],[2846,6,2230,8],[2846,13,2230,15],[2846,23,2230,25],[2846,24,2230,26],[2847,4,2231,4],[2847,5,2231,5],[2847,11,2232,9],[2847,15,2232,13,"ua"],[2847,17,2232,15],[2847,18,2232,16,"includes"],[2847,26,2232,24],[2847,27,2232,25],[2847,33,2232,31],[2847,34,2232,32],[2847,38,2232,36,"ua"],[2847,40,2232,38],[2847,41,2232,39,"includes"],[2847,49,2232,47],[2847,50,2232,48],[2847,60,2232,58],[2847,61,2232,59],[2847,63,2232,61],[2848,6,2233,8],[2848,13,2233,15],[2848,17,2233,19],[2848,18,2233,20],[2849,4,2234,4],[2849,5,2234,5],[2849,11,2235,9],[2849,15,2235,13,"ua"],[2849,17,2235,15],[2849,18,2235,16,"includes"],[2849,26,2235,24],[2849,27,2235,25],[2849,34,2235,32],[2849,35,2235,33],[2849,37,2235,35],[2850,6,2236,8],[2850,13,2236,15],[2850,19,2236,21],[2850,20,2236,22],[2851,4,2237,4],[2851,5,2237,5],[2851,11,2238,9],[2851,15,2238,13,"_isFirefox"],[2851,25,2238,23],[2851,26,2238,24,"ua"],[2851,28,2238,26],[2851,29,2238,27],[2851,31,2238,29],[2852,6,2239,8],[2852,13,2239,15],[2852,22,2239,24],[2852,23,2239,25],[2853,4,2240,4],[2853,5,2240,5],[2853,11,2241,9],[2853,15,2241,13,"ua"],[2853,17,2241,15],[2853,18,2241,16,"includes"],[2853,26,2241,24],[2853,27,2241,25],[2853,34,2241,32],[2853,35,2241,33],[2853,37,2241,35],[2854,6,2242,8],[2854,13,2242,15],[2854,19,2242,21],[2854,20,2242,22],[2855,4,2243,4],[2855,5,2243,5],[2855,11,2244,9],[2855,15,2244,13,"_isBlackBerry"],[2855,28,2244,26],[2855,29,2244,27,"ua"],[2855,31,2244,29],[2855,32,2244,30],[2855,34,2244,32],[2856,6,2245,8],[2857,6,2246,8],[2857,13,2246,15],[2857,25,2246,27],[2857,26,2246,28],[2858,4,2247,4],[2858,5,2247,5],[2858,11,2248,9],[2858,15,2248,13,"_isWebOS"],[2858,23,2248,21],[2858,24,2248,22,"ua"],[2858,26,2248,24],[2858,27,2248,25],[2858,29,2248,27],[2859,6,2249,8],[2860,6,2250,8],[2860,13,2250,15],[2860,20,2250,22],[2860,21,2250,23],[2861,4,2251,4],[2861,5,2251,5],[2861,11,2252,9],[2861,15,2252,13,"_isSafari"],[2861,24,2252,22],[2861,25,2252,23,"ua"],[2861,27,2252,25],[2861,28,2252,26],[2861,30,2252,28],[2862,6,2253,8],[2862,13,2253,15],[2862,21,2253,23],[2862,22,2253,24],[2863,4,2254,4],[2863,5,2254,5],[2863,11,2255,9],[2863,15,2255,13],[2863,16,2255,14,"ua"],[2863,18,2255,16],[2863,19,2255,17,"includes"],[2863,27,2255,25],[2863,28,2255,26],[2863,37,2255,35],[2863,38,2255,36],[2863,42,2255,40,"_isChromeIOS"],[2863,54,2255,52],[2863,55,2255,53,"ua"],[2863,57,2255,55],[2863,58,2255,56],[2863,63,2256,8],[2863,64,2256,9,"ua"],[2863,66,2256,11],[2863,67,2256,12,"includes"],[2863,75,2256,20],[2863,76,2256,21],[2863,83,2256,28],[2863,84,2256,29],[2863,86,2256,31],[2864,6,2257,8],[2864,13,2257,15],[2864,21,2257,23],[2864,22,2257,24],[2865,4,2258,4],[2865,5,2258,5],[2865,11,2259,9],[2865,15,2259,13,"_isAndroid"],[2865,25,2259,23],[2865,26,2259,24,"ua"],[2865,28,2259,26],[2865,29,2259,27],[2865,31,2259,29],[2866,6,2260,8],[2867,6,2261,8],[2867,13,2261,15],[2867,22,2261,24],[2867,23,2261,25],[2868,4,2262,4],[2868,5,2262,5],[2868,11,2263,9],[2869,6,2264,8],[2870,6,2265,8],[2870,12,2265,14,"re"],[2870,14,2265,16],[2870,17,2265,19],[2870,50,2265,52],[2871,6,2266,8],[2871,12,2266,14,"matches"],[2871,19,2266,21],[2871,22,2266,24,"userAgent"],[2871,31,2266,33],[2871,32,2266,34,"match"],[2871,37,2266,39],[2871,38,2266,40,"re"],[2871,40,2266,42],[2871,41,2266,43],[2872,6,2267,8],[2872,10,2267,12,"matches"],[2872,17,2267,19],[2872,19,2267,21,"length"],[2872,25,2267,27],[2872,30,2267,32],[2872,31,2267,33],[2872,33,2267,35],[2873,8,2268,12],[2873,15,2268,19,"matches"],[2873,22,2268,26],[2873,23,2268,27],[2873,24,2268,28],[2873,25,2268,29],[2874,6,2269,8],[2875,4,2270,4],[2876,4,2271,4],[2876,11,2271,11],[2876,18,2271,18],[2876,19,2271,19],[2877,2,2272,0],[2878,2,2273,0],[2878,11,2273,9,"_isFirefox"],[2878,21,2273,19,"_isFirefox"],[2878,22,2273,20,"ua"],[2878,24,2273,22],[2878,27,2273,25],[2878,31,2273,25,"getUA"],[2878,44,2273,30],[2878,45,2273,30,"getUA"],[2878,50,2273,30],[2878,52,2273,31],[2878,53,2273,32],[2878,55,2273,34],[2879,4,2274,4],[2879,11,2274,11],[2879,23,2274,23],[2879,24,2274,24,"test"],[2879,28,2274,28],[2879,29,2274,29,"ua"],[2879,31,2274,31],[2879,32,2274,32],[2880,2,2275,0],[2881,2,2276,0],[2881,11,2276,9,"_isSafari"],[2881,20,2276,18,"_isSafari"],[2881,21,2276,19,"userAgent"],[2881,30,2276,28],[2881,33,2276,31],[2881,37,2276,31,"getUA"],[2881,50,2276,36],[2881,51,2276,36,"getUA"],[2881,56,2276,36],[2881,58,2276,37],[2881,59,2276,38],[2881,61,2276,40],[2882,4,2277,4],[2882,10,2277,10,"ua"],[2882,12,2277,12],[2882,15,2277,15,"userAgent"],[2882,24,2277,24],[2882,25,2277,25,"toLowerCase"],[2882,36,2277,36],[2882,37,2277,37],[2882,38,2277,38],[2883,4,2278,4],[2883,11,2278,12,"ua"],[2883,13,2278,14],[2883,14,2278,15,"includes"],[2883,22,2278,23],[2883,23,2278,24],[2883,32,2278,33],[2883,33,2278,34],[2883,37,2279,8],[2883,38,2279,9,"ua"],[2883,40,2279,11],[2883,41,2279,12,"includes"],[2883,49,2279,20],[2883,50,2279,21],[2883,59,2279,30],[2883,60,2279,31],[2883,64,2280,8],[2883,65,2280,9,"ua"],[2883,67,2280,11],[2883,68,2280,12,"includes"],[2883,76,2280,20],[2883,77,2280,21],[2883,85,2280,29],[2883,86,2280,30],[2883,90,2281,8],[2883,91,2281,9,"ua"],[2883,93,2281,11],[2883,94,2281,12,"includes"],[2883,102,2281,20],[2883,103,2281,21],[2883,112,2281,30],[2883,113,2281,31],[2884,2,2282,0],[2885,2,2283,0],[2885,11,2283,9,"_isChromeIOS"],[2885,23,2283,21,"_isChromeIOS"],[2885,24,2283,22,"ua"],[2885,26,2283,24],[2885,29,2283,27],[2885,33,2283,27,"getUA"],[2885,46,2283,32],[2885,47,2283,32,"getUA"],[2885,52,2283,32],[2885,54,2283,33],[2885,55,2283,34],[2885,57,2283,36],[2886,4,2284,4],[2886,11,2284,11],[2886,21,2284,21],[2886,22,2284,22,"test"],[2886,26,2284,26],[2886,27,2284,27,"ua"],[2886,29,2284,29],[2886,30,2284,30],[2887,2,2285,0],[2888,2,2286,0],[2888,11,2286,9,"_isIEMobile"],[2888,22,2286,20,"_isIEMobile"],[2888,23,2286,21,"ua"],[2888,25,2286,23],[2888,28,2286,26],[2888,32,2286,26,"getUA"],[2888,45,2286,31],[2888,46,2286,31,"getUA"],[2888,51,2286,31],[2888,53,2286,32],[2888,54,2286,33],[2888,56,2286,35],[2889,4,2287,4],[2889,11,2287,11],[2889,22,2287,22],[2889,23,2287,23,"test"],[2889,27,2287,27],[2889,28,2287,28,"ua"],[2889,30,2287,30],[2889,31,2287,31],[2890,2,2288,0],[2891,2,2289,0],[2891,11,2289,9,"_isAndroid"],[2891,21,2289,19,"_isAndroid"],[2891,22,2289,20,"ua"],[2891,24,2289,22],[2891,27,2289,25],[2891,31,2289,25,"getUA"],[2891,44,2289,30],[2891,45,2289,30,"getUA"],[2891,50,2289,30],[2891,52,2289,31],[2891,53,2289,32],[2891,55,2289,34],[2892,4,2290,4],[2892,11,2290,11],[2892,21,2290,21],[2892,22,2290,22,"test"],[2892,26,2290,26],[2892,27,2290,27,"ua"],[2892,29,2290,29],[2892,30,2290,30],[2893,2,2291,0],[2894,2,2292,0],[2894,11,2292,9,"_isBlackBerry"],[2894,24,2292,22,"_isBlackBerry"],[2894,25,2292,23,"ua"],[2894,27,2292,25],[2894,30,2292,28],[2894,34,2292,28,"getUA"],[2894,47,2292,33],[2894,48,2292,33,"getUA"],[2894,53,2292,33],[2894,55,2292,34],[2894,56,2292,35],[2894,58,2292,37],[2895,4,2293,4],[2895,11,2293,11],[2895,24,2293,24],[2895,25,2293,25,"test"],[2895,29,2293,29],[2895,30,2293,30,"ua"],[2895,32,2293,32],[2895,33,2293,33],[2896,2,2294,0],[2897,2,2295,0],[2897,11,2295,9,"_isWebOS"],[2897,19,2295,17,"_isWebOS"],[2897,20,2295,18,"ua"],[2897,22,2295,20],[2897,25,2295,23],[2897,29,2295,23,"getUA"],[2897,42,2295,28],[2897,43,2295,28,"getUA"],[2897,48,2295,28],[2897,50,2295,29],[2897,51,2295,30],[2897,53,2295,32],[2898,4,2296,4],[2898,11,2296,11],[2898,19,2296,19],[2898,20,2296,20,"test"],[2898,24,2296,24],[2898,25,2296,25,"ua"],[2898,27,2296,27],[2898,28,2296,28],[2899,2,2297,0],[2900,2,2298,0],[2900,11,2298,9,"_isIOS"],[2900,17,2298,15,"_isIOS"],[2900,18,2298,16,"ua"],[2900,20,2298,18],[2900,23,2298,21],[2900,27,2298,21,"getUA"],[2900,40,2298,26],[2900,41,2298,26,"getUA"],[2900,46,2298,26],[2900,48,2298,27],[2900,49,2298,28],[2900,51,2298,30],[2901,4,2299,4],[2901,11,2299,12],[2901,30,2299,31],[2901,31,2299,32,"test"],[2901,35,2299,36],[2901,36,2299,37,"ua"],[2901,38,2299,39],[2901,39,2299,40],[2901,43,2300,9],[2901,55,2300,21],[2901,56,2300,22,"test"],[2901,60,2300,26],[2901,61,2300,27,"ua"],[2901,63,2300,29],[2901,64,2300,30],[2901,68,2300,34],[2901,77,2300,43],[2901,78,2300,44,"test"],[2901,82,2300,48],[2901,83,2300,49,"ua"],[2901,85,2300,51],[2901,86,2300,53],[2902,2,2301,0],[2903,2,2302,0],[2903,11,2302,9,"_isIOS7Or8"],[2903,21,2302,19,"_isIOS7Or8"],[2903,22,2302,20,"ua"],[2903,24,2302,22],[2903,27,2302,25],[2903,31,2302,25,"getUA"],[2903,44,2302,30],[2903,45,2302,30,"getUA"],[2903,50,2302,30],[2903,52,2302,31],[2903,53,2302,32],[2903,55,2302,34],[2904,4,2303,4],[2904,11,2303,12],[2904,41,2303,42],[2904,42,2303,43,"test"],[2904,46,2303,47],[2904,47,2303,48,"ua"],[2904,49,2303,50],[2904,50,2303,51],[2904,54,2304,8],[2904,84,2304,38],[2904,85,2304,39,"test"],[2904,89,2304,43],[2904,90,2304,44,"ua"],[2904,92,2304,46],[2904,93,2304,47],[2905,2,2305,0],[2906,2,2306,0],[2906,11,2306,9,"_isIOSStandalone"],[2906,27,2306,25,"_isIOSStandalone"],[2906,28,2306,26,"ua"],[2906,30,2306,28],[2906,33,2306,31],[2906,37,2306,31,"getUA"],[2906,50,2306,36],[2906,51,2306,36,"getUA"],[2906,56,2306,36],[2906,58,2306,37],[2906,59,2306,38],[2906,61,2306,40],[2907,4,2307,4],[2907,11,2307,11,"_isIOS"],[2907,17,2307,17],[2907,18,2307,18,"ua"],[2907,20,2307,20],[2907,21,2307,21],[2907,25,2307,25],[2907,26,2307,26],[2907,27,2307,27,"window"],[2907,33,2307,33],[2907,34,2307,34,"navigator"],[2907,43,2307,43],[2907,45,2307,45,"standalone"],[2907,55,2307,55],[2908,2,2308,0],[2909,2,2309,0],[2909,11,2309,9,"_isIE10"],[2909,18,2309,16,"_isIE10"],[2909,19,2309,16],[2909,21,2309,19],[2910,4,2310,4],[2910,11,2310,11],[2910,15,2310,11,"isIE"],[2910,28,2310,15],[2910,29,2310,15,"isIE"],[2910,33,2310,15],[2910,35,2310,16],[2910,36,2310,17],[2910,40,2310,21,"document"],[2910,48,2310,29],[2910,49,2310,30,"documentMode"],[2910,61,2310,42],[2910,66,2310,47],[2910,68,2310,49],[2911,2,2311,0],[2912,2,2312,0],[2912,11,2312,9,"_isMobileBrowser"],[2912,27,2312,25,"_isMobileBrowser"],[2912,28,2312,26,"ua"],[2912,30,2312,28],[2912,33,2312,31],[2912,37,2312,31,"getUA"],[2912,50,2312,36],[2912,51,2312,36,"getUA"],[2912,56,2312,36],[2912,58,2312,37],[2912,59,2312,38],[2912,61,2312,40],[2913,4,2313,4],[2914,4,2314,4],[2914,11,2314,12,"_isIOS"],[2914,17,2314,18],[2914,18,2314,19,"ua"],[2914,20,2314,21],[2914,21,2314,22],[2914,25,2315,8,"_isAndroid"],[2914,35,2315,18],[2914,36,2315,19,"ua"],[2914,38,2315,21],[2914,39,2315,22],[2914,43,2316,8,"_isWebOS"],[2914,51,2316,16],[2914,52,2316,17,"ua"],[2914,54,2316,19],[2914,55,2316,20],[2914,59,2317,8,"_isBlackBerry"],[2914,72,2317,21],[2914,73,2317,22,"ua"],[2914,75,2317,24],[2914,76,2317,25],[2914,80,2318,8],[2914,96,2318,24],[2914,97,2318,25,"test"],[2914,101,2318,29],[2914,102,2318,30,"ua"],[2914,104,2318,32],[2914,105,2318,33],[2914,109,2319,8,"_isIEMobile"],[2914,120,2319,19],[2914,121,2319,20,"ua"],[2914,123,2319,22],[2914,124,2319,23],[2915,2,2320,0],[2917,2,2322,0],[2918,0,2323,0],[2919,0,2324,0],[2920,0,2325,0],[2921,0,2326,0],[2922,0,2327,0],[2923,0,2328,0],[2924,0,2329,0],[2925,0,2330,0],[2926,0,2331,0],[2927,0,2332,0],[2928,0,2333,0],[2929,0,2334,0],[2930,0,2335,0],[2931,0,2336,0],[2932,0,2337,0],[2933,2,2338,0],[2934,0,2339,0],[2935,0,2340,0],[2936,2,2341,0],[2936,11,2341,9,"_getClientVersion"],[2936,28,2341,26,"_getClientVersion"],[2936,29,2341,27,"clientPlatform"],[2936,43,2341,41],[2936,45,2341,43,"frameworks"],[2936,55,2341,53],[2936,58,2341,56],[2936,60,2341,58],[2936,62,2341,60],[2937,4,2342,4],[2937,8,2342,8,"reportedPlatform"],[2937,24,2342,24],[2938,4,2343,4],[2938,12,2343,12,"clientPlatform"],[2938,26,2343,26],[2939,6,2344,8],[2939,11,2344,13],[2939,20,2344,22],[2939,21,2344,23],[2940,8,2345,12],[2941,8,2346,12,"reportedPlatform"],[2941,24,2346,28],[2941,27,2346,31,"_getBrowserName"],[2941,42,2346,46],[2941,43,2346,47],[2941,47,2346,47,"getUA"],[2941,60,2346,52],[2941,61,2346,52,"getUA"],[2941,66,2346,52],[2941,68,2346,53],[2941,69,2346,54],[2941,70,2346,55],[2942,8,2347,12],[2943,6,2348,8],[2943,11,2348,13],[2943,19,2348,21],[2943,20,2348,22],[2944,8,2349,12],[2945,8,2350,12],[2946,8,2351,12],[2947,8,2352,12,"reportedPlatform"],[2947,24,2352,28],[2947,27,2352,31],[2947,30,2352,34,"_getBrowserName"],[2947,45,2352,49],[2947,46,2352,50],[2947,50,2352,50,"getUA"],[2947,63,2352,55],[2947,64,2352,55,"getUA"],[2947,69,2352,55],[2947,71,2352,56],[2947,72,2352,57],[2947,73,2352,58],[2947,77,2352,62,"clientPlatform"],[2947,91,2352,76],[2947,93,2352,78],[2948,8,2353,12],[2949,6,2354,8],[2950,8,2355,12,"reportedPlatform"],[2950,24,2355,28],[2950,27,2355,31,"clientPlatform"],[2950,41,2355,45],[2951,4,2356,4],[2952,4,2357,4],[2952,10,2357,10,"reportedFrameworks"],[2952,28,2357,28],[2952,31,2357,31,"frameworks"],[2952,41,2357,41],[2952,42,2357,42,"length"],[2952,48,2357,48],[2952,51,2358,10,"frameworks"],[2952,61,2358,20],[2952,62,2358,21,"join"],[2952,66,2358,25],[2952,67,2358,26],[2952,70,2358,29],[2952,71,2358,30],[2952,74,2359,10],[2952,92,2359,28],[2952,93,2359,29],[2952,94,2359,30],[2953,4,2360,4],[2953,11,2360,11],[2953,14,2360,14,"reportedPlatform"],[2953,30,2360,30],[2953,34,2360,34],[2953,42,2360,42],[2953,43,2360,43],[2953,78,2360,78,"SDK_VERSION"],[2953,90,2360,89],[2953,91,2360,89,"SDK_VERSION"],[2953,102,2360,89],[2953,106,2360,93,"reportedFrameworks"],[2953,124,2360,111],[2953,126,2360,113],[2954,2,2361,0],[2956,2,2363,0],[2957,0,2364,0],[2958,0,2365,0],[2959,0,2366,0],[2960,0,2367,0],[2961,0,2368,0],[2962,0,2369,0],[2963,0,2370,0],[2964,0,2371,0],[2965,0,2372,0],[2966,0,2373,0],[2967,0,2374,0],[2968,0,2375,0],[2969,0,2376,0],[2970,0,2377,0],[2971,0,2378,0],[2972,2,2379,0],[2972,8,2379,6,"AuthMiddlewareQueue"],[2972,27,2379,25],[2972,28,2379,26],[2973,4,2380,4,"constructor"],[2973,15,2380,15,"constructor"],[2973,16,2380,16,"auth"],[2973,20,2380,20],[2973,22,2380,22],[2974,6,2381,8],[2974,10,2381,12],[2974,11,2381,13,"auth"],[2974,15,2381,17],[2974,18,2381,20,"auth"],[2974,22,2381,24],[2975,6,2382,8],[2975,10,2382,12],[2975,11,2382,13,"queue"],[2975,16,2382,18],[2975,19,2382,21],[2975,21,2382,23],[2976,4,2383,4],[2977,4,2384,4,"pushCallback"],[2977,16,2384,16,"pushCallback"],[2977,17,2384,17,"callback"],[2977,25,2384,25],[2977,27,2384,27,"onAbort"],[2977,34,2384,34],[2977,36,2384,36],[2978,6,2385,8],[2979,6,2386,8],[2980,6,2387,8],[2980,12,2387,14,"wrappedCallback"],[2980,27,2387,29],[2980,30,2387,33,"user"],[2980,34,2387,37],[2980,38,2387,42],[2980,42,2387,46,"Promise"],[2980,49,2387,53],[2980,50,2387,54],[2980,51,2387,55,"resolve"],[2980,58,2387,62],[2980,60,2387,64,"reject"],[2980,66,2387,70],[2980,71,2387,75],[2981,8,2388,12],[2981,12,2388,16],[2982,10,2389,16],[2982,16,2389,22,"result"],[2982,22,2389,28],[2982,25,2389,31,"callback"],[2982,33,2389,39],[2982,34,2389,40,"user"],[2982,38,2389,44],[2982,39,2389,45],[2983,10,2390,16],[2984,10,2391,16],[2985,10,2392,16,"resolve"],[2985,17,2392,23],[2985,18,2392,24,"result"],[2985,24,2392,30],[2985,25,2392,31],[2986,8,2393,12],[2986,9,2393,13],[2986,10,2394,12],[2986,17,2394,19,"e"],[2986,18,2394,20],[2986,20,2394,22],[2987,10,2395,16],[2988,10,2396,16,"reject"],[2988,16,2396,22],[2988,17,2396,23,"e"],[2988,18,2396,24],[2988,19,2396,25],[2989,8,2397,12],[2990,6,2398,8],[2990,7,2398,9],[2990,8,2398,10],[2991,6,2399,8],[2992,6,2400,8,"wrappedCallback"],[2992,21,2400,23],[2992,22,2400,24,"onAbort"],[2992,29,2400,31],[2992,32,2400,34,"onAbort"],[2992,39,2400,41],[2993,6,2401,8],[2993,10,2401,12],[2993,11,2401,13,"queue"],[2993,16,2401,18],[2993,17,2401,19,"push"],[2993,21,2401,23],[2993,22,2401,24,"wrappedCallback"],[2993,37,2401,39],[2993,38,2401,40],[2994,6,2402,8],[2994,12,2402,14,"index"],[2994,17,2402,19],[2994,20,2402,22],[2994,24,2402,26],[2994,25,2402,27,"queue"],[2994,30,2402,32],[2994,31,2402,33,"length"],[2994,37,2402,39],[2994,40,2402,42],[2994,41,2402,43],[2995,6,2403,8],[2995,13,2403,15],[2995,19,2403,21],[2996,8,2404,12],[2997,8,2405,12],[2998,8,2406,12],[2998,12,2406,16],[2998,13,2406,17,"queue"],[2998,18,2406,22],[2998,19,2406,23,"index"],[2998,24,2406,28],[2998,25,2406,29],[2998,28,2406,32],[2998,34,2406,38,"Promise"],[2998,41,2406,45],[2998,42,2406,46,"resolve"],[2998,49,2406,53],[2998,50,2406,54],[2998,51,2406,55],[2999,6,2407,8],[2999,7,2407,9],[3000,4,2408,4],[3001,4,2409,4],[3001,10,2409,10,"runMiddleware"],[3001,23,2409,23,"runMiddleware"],[3001,24,2409,24,"nextUser"],[3001,32,2409,32],[3001,34,2409,34],[3002,6,2410,8],[3002,10,2410,12],[3002,14,2410,16],[3002,15,2410,17,"auth"],[3002,19,2410,21],[3002,20,2410,22,"currentUser"],[3002,31,2410,33],[3002,36,2410,38,"nextUser"],[3002,44,2410,46],[3002,46,2410,48],[3003,8,2411,12],[3004,6,2412,8],[3005,6,2413,8],[3006,6,2414,8],[3007,6,2415,8],[3007,12,2415,14,"onAbortStack"],[3007,24,2415,26],[3007,27,2415,29],[3007,29,2415,31],[3008,6,2416,8],[3008,10,2416,12],[3009,8,2417,12],[3009,13,2417,17],[3009,19,2417,23,"beforeStateCallback"],[3009,38,2417,42],[3009,42,2417,46],[3009,46,2417,50],[3009,47,2417,51,"queue"],[3009,52,2417,56],[3009,54,2417,58],[3010,10,2418,16],[3010,16,2418,22,"beforeStateCallback"],[3010,35,2418,41],[3010,36,2418,42,"nextUser"],[3010,44,2418,50],[3010,45,2418,51],[3011,10,2419,16],[3012,10,2420,16],[3012,14,2420,20,"beforeStateCallback"],[3012,33,2420,39],[3012,34,2420,40,"onAbort"],[3012,41,2420,47],[3012,43,2420,49],[3013,12,2421,20,"onAbortStack"],[3013,24,2421,32],[3013,25,2421,33,"push"],[3013,29,2421,37],[3013,30,2421,38,"beforeStateCallback"],[3013,49,2421,57],[3013,50,2421,58,"onAbort"],[3013,57,2421,65],[3013,58,2421,66],[3014,10,2422,16],[3015,8,2423,12],[3016,6,2424,8],[3016,7,2424,9],[3016,8,2425,8],[3016,15,2425,15,"e"],[3016,16,2425,16],[3016,18,2425,18],[3017,8,2426,12],[3018,8,2427,12],[3019,8,2428,12,"onAbortStack"],[3019,20,2428,24],[3019,21,2428,25,"reverse"],[3019,28,2428,32],[3019,29,2428,33],[3019,30,2428,34],[3020,8,2429,12],[3020,13,2429,17],[3020,19,2429,23,"onAbort"],[3020,26,2429,30],[3020,30,2429,34,"onAbortStack"],[3020,42,2429,46],[3020,44,2429,48],[3021,10,2430,16],[3021,14,2430,20],[3022,12,2431,20,"onAbort"],[3022,19,2431,27],[3022,20,2431,28],[3022,21,2431,29],[3023,10,2432,16],[3023,11,2432,17],[3023,12,2433,16],[3023,19,2433,23,"_"],[3023,20,2433,24],[3023,22,2433,26],[3024,12,2434,20],[3025,10,2434,20],[3026,8,2436,12],[3027,8,2437,12],[3027,14,2437,18],[3027,18,2437,22],[3027,19,2437,23,"auth"],[3027,23,2437,27],[3027,24,2437,28,"_errorFactory"],[3027,37,2437,41],[3027,38,2437,42,"create"],[3027,44,2437,48],[3027,45,2437,49],[3027,60,2437,64],[3027,61,2437,65],[3027,96,2437,100],[3028,10,2438,16,"originalMessage"],[3028,25,2438,31],[3028,27,2438,33,"e"],[3028,28,2438,34],[3028,30,2438,36,"message"],[3029,8,2439,12],[3029,9,2439,13],[3029,10,2439,14],[3030,6,2440,8],[3031,4,2441,4],[3032,2,2442,0],[3034,2,2444,0],[3035,0,2445,0],[3036,0,2446,0],[3037,0,2447,0],[3038,0,2448,0],[3039,0,2449,0],[3040,0,2450,0],[3041,0,2451,0],[3042,0,2452,0],[3043,0,2453,0],[3044,0,2454,0],[3045,0,2455,0],[3046,0,2456,0],[3047,0,2457,0],[3048,0,2458,0],[3049,0,2459,0],[3050,2,2460,0],[3051,0,2461,0],[3052,0,2462,0],[3053,0,2463,0],[3054,0,2464,0],[3055,0,2465,0],[3056,0,2466,0],[3057,2,2467,0],[3057,17,2467,15,"_getPasswordPolicy"],[3057,35,2467,33,"_getPasswordPolicy"],[3057,36,2467,34,"auth"],[3057,40,2467,38],[3057,42,2467,40,"request"],[3057,49,2467,47],[3057,52,2467,50],[3057,53,2467,51],[3057,54,2467,52],[3057,56,2467,54],[3058,4,2468,4],[3058,11,2468,11,"_performApiRequest"],[3058,29,2468,29],[3058,30,2468,30,"auth"],[3058,34,2468,34],[3058,36,2468,36],[3058,41,2468,41],[3058,42,2468,42],[3058,64,2468,64],[3058,84,2468,84],[3058,85,2468,85],[3058,121,2468,121,"_addTidIfNecessary"],[3058,139,2468,139],[3058,140,2468,140,"auth"],[3058,144,2468,144],[3058,146,2468,146,"request"],[3058,153,2468,153],[3058,154,2468,154],[3058,155,2468,155],[3059,2,2469,0],[3061,2,2471,0],[3062,0,2472,0],[3063,0,2473,0],[3064,0,2474,0],[3065,0,2475,0],[3066,0,2476,0],[3067,0,2477,0],[3068,0,2478,0],[3069,0,2479,0],[3070,0,2480,0],[3071,0,2481,0],[3072,0,2482,0],[3073,0,2483,0],[3074,0,2484,0],[3075,0,2485,0],[3076,0,2486,0],[3077,2,2487,0],[3078,2,2488,0],[3078,8,2488,6,"MINIMUM_MIN_PASSWORD_LENGTH"],[3078,35,2488,33],[3078,38,2488,36],[3078,39,2488,37],[3079,2,2489,0],[3080,0,2490,0],[3081,0,2491,0],[3082,0,2492,0],[3083,0,2493,0],[3084,2,2494,0],[3084,8,2494,6,"PasswordPolicyImpl"],[3084,26,2494,24],[3084,27,2494,25],[3085,4,2495,4,"constructor"],[3085,15,2495,15,"constructor"],[3085,16,2495,16,"response"],[3085,24,2495,24],[3085,26,2495,26],[3086,6,2496,8],[3087,6,2497,8],[3087,12,2497,14,"responseOptions"],[3087,27,2497,29],[3087,30,2497,32,"response"],[3087,38,2497,40],[3087,39,2497,41,"customStrengthOptions"],[3087,60,2497,62],[3088,6,2498,8],[3088,10,2498,12],[3088,11,2498,13,"customStrengthOptions"],[3088,32,2498,34],[3088,35,2498,37],[3088,36,2498,38],[3088,37,2498,39],[3089,6,2499,8],[3090,6,2500,8],[3090,10,2500,12],[3090,11,2500,13,"customStrengthOptions"],[3090,32,2500,34],[3090,33,2500,35,"minPasswordLength"],[3090,50,2500,52],[3090,53,2501,12,"responseOptions"],[3090,68,2501,27],[3090,69,2501,28,"minPasswordLength"],[3090,86,2501,45],[3090,90,2501,49,"MINIMUM_MIN_PASSWORD_LENGTH"],[3090,117,2501,76],[3091,6,2502,8],[3091,10,2502,12,"responseOptions"],[3091,25,2502,27],[3091,26,2502,28,"maxPasswordLength"],[3091,43,2502,45],[3091,45,2502,47],[3092,8,2503,12],[3092,12,2503,16],[3092,13,2503,17,"customStrengthOptions"],[3092,34,2503,38],[3092,35,2503,39,"maxPasswordLength"],[3092,52,2503,56],[3092,55,2504,16,"responseOptions"],[3092,70,2504,31],[3092,71,2504,32,"maxPasswordLength"],[3092,88,2504,49],[3093,6,2505,8],[3094,6,2506,8],[3094,10,2506,12,"responseOptions"],[3094,25,2506,27],[3094,26,2506,28,"containsLowercaseCharacter"],[3094,52,2506,54],[3094,57,2506,59,"undefined"],[3094,66,2506,68],[3094,68,2506,70],[3095,8,2507,12],[3095,12,2507,16],[3095,13,2507,17,"customStrengthOptions"],[3095,34,2507,38],[3095,35,2507,39,"containsLowercaseLetter"],[3095,58,2507,62],[3095,61,2508,16,"responseOptions"],[3095,76,2508,31],[3095,77,2508,32,"containsLowercaseCharacter"],[3095,103,2508,58],[3096,6,2509,8],[3097,6,2510,8],[3097,10,2510,12,"responseOptions"],[3097,25,2510,27],[3097,26,2510,28,"containsUppercaseCharacter"],[3097,52,2510,54],[3097,57,2510,59,"undefined"],[3097,66,2510,68],[3097,68,2510,70],[3098,8,2511,12],[3098,12,2511,16],[3098,13,2511,17,"customStrengthOptions"],[3098,34,2511,38],[3098,35,2511,39,"containsUppercaseLetter"],[3098,58,2511,62],[3098,61,2512,16,"responseOptions"],[3098,76,2512,31],[3098,77,2512,32,"containsUppercaseCharacter"],[3098,103,2512,58],[3099,6,2513,8],[3100,6,2514,8],[3100,10,2514,12,"responseOptions"],[3100,25,2514,27],[3100,26,2514,28,"containsNumericCharacter"],[3100,50,2514,52],[3100,55,2514,57,"undefined"],[3100,64,2514,66],[3100,66,2514,68],[3101,8,2515,12],[3101,12,2515,16],[3101,13,2515,17,"customStrengthOptions"],[3101,34,2515,38],[3101,35,2515,39,"containsNumericCharacter"],[3101,59,2515,63],[3101,62,2516,16,"responseOptions"],[3101,77,2516,31],[3101,78,2516,32,"containsNumericCharacter"],[3101,102,2516,56],[3102,6,2517,8],[3103,6,2518,8],[3103,10,2518,12,"responseOptions"],[3103,25,2518,27],[3103,26,2518,28,"containsNonAlphanumericCharacter"],[3103,58,2518,60],[3103,63,2518,65,"undefined"],[3103,72,2518,74],[3103,74,2518,76],[3104,8,2519,12],[3104,12,2519,16],[3104,13,2519,17,"customStrengthOptions"],[3104,34,2519,38],[3104,35,2519,39,"containsNonAlphanumericCharacter"],[3104,67,2519,71],[3104,70,2520,16,"responseOptions"],[3104,85,2520,31],[3104,86,2520,32,"containsNonAlphanumericCharacter"],[3104,118,2520,64],[3105,6,2521,8],[3106,6,2522,8],[3106,10,2522,12],[3106,11,2522,13,"enforcementState"],[3106,27,2522,29],[3106,30,2522,32,"response"],[3106,38,2522,40],[3106,39,2522,41,"enforcementState"],[3106,55,2522,57],[3107,6,2523,8],[3107,10,2523,12],[3107,14,2523,16],[3107,15,2523,17,"enforcementState"],[3107,31,2523,33],[3107,36,2523,38],[3107,67,2523,69],[3107,69,2523,71],[3108,8,2524,12],[3108,12,2524,16],[3108,13,2524,17,"enforcementState"],[3108,29,2524,33],[3108,32,2524,36],[3108,37,2524,41],[3109,6,2525,8],[3110,6,2526,8],[3111,6,2527,8],[3111,10,2527,12],[3111,11,2527,13,"allowedNonAlphanumericCharacters"],[3111,43,2527,45],[3111,46,2528,12,"response"],[3111,54,2528,20],[3111,55,2528,21,"allowedNonAlphanumericCharacters"],[3111,87,2528,53],[3111,89,2528,55,"join"],[3111,93,2528,59],[3111,94,2528,60],[3111,96,2528,62],[3111,97,2528,63],[3111,101,2528,67],[3111,103,2528,69],[3112,6,2529,8],[3112,10,2529,12],[3112,11,2529,13,"forceUpgradeOnSignin"],[3112,31,2529,33],[3112,34,2529,36,"response"],[3112,42,2529,44],[3112,43,2529,45,"forceUpgradeOnSignin"],[3112,63,2529,65],[3112,67,2529,69],[3112,72,2529,74],[3113,6,2530,8],[3113,10,2530,12],[3113,11,2530,13,"schemaVersion"],[3113,24,2530,26],[3113,27,2530,29,"response"],[3113,35,2530,37],[3113,36,2530,38,"schemaVersion"],[3113,49,2530,51],[3114,4,2531,4],[3115,4,2532,4,"validatePassword"],[3115,20,2532,20,"validatePassword"],[3115,21,2532,21,"password"],[3115,29,2532,29],[3115,31,2532,31],[3116,6,2533,8],[3116,12,2533,14,"status"],[3116,18,2533,20],[3116,21,2533,23],[3117,8,2534,12,"isValid"],[3117,15,2534,19],[3117,17,2534,21],[3117,21,2534,25],[3118,8,2535,12,"passwordPolicy"],[3118,22,2535,26],[3118,24,2535,28],[3119,6,2536,8],[3119,7,2536,9],[3120,6,2537,8],[3121,6,2538,8],[3121,10,2538,12],[3121,11,2538,13,"validatePasswordLengthOptions"],[3121,40,2538,42],[3121,41,2538,43,"password"],[3121,49,2538,51],[3121,51,2538,53,"status"],[3121,57,2538,59],[3121,58,2538,60],[3122,6,2539,8],[3122,10,2539,12],[3122,11,2539,13,"validatePasswordCharacterOptions"],[3122,43,2539,45],[3122,44,2539,46,"password"],[3122,52,2539,54],[3122,54,2539,56,"status"],[3122,60,2539,62],[3122,61,2539,63],[3123,6,2540,8],[3124,6,2541,8,"status"],[3124,12,2541,14],[3124,13,2541,15,"isValid"],[3124,20,2541,22],[3124,25,2541,27,"status"],[3124,31,2541,33],[3124,32,2541,34,"isValid"],[3124,39,2541,41],[3124,42,2541,44,"status"],[3124,48,2541,50],[3124,49,2541,51,"meetsMinPasswordLength"],[3124,71,2541,73],[3124,75,2541,77],[3124,79,2541,81],[3124,80,2541,82],[3125,6,2542,8,"status"],[3125,12,2542,14],[3125,13,2542,15,"isValid"],[3125,20,2542,22],[3125,25,2542,27,"status"],[3125,31,2542,33],[3125,32,2542,34,"isValid"],[3125,39,2542,41],[3125,42,2542,44,"status"],[3125,48,2542,50],[3125,49,2542,51,"meetsMaxPasswordLength"],[3125,71,2542,73],[3125,75,2542,77],[3125,79,2542,81],[3125,80,2542,82],[3126,6,2543,8,"status"],[3126,12,2543,14],[3126,13,2543,15,"isValid"],[3126,20,2543,22],[3126,25,2543,27,"status"],[3126,31,2543,33],[3126,32,2543,34,"isValid"],[3126,39,2543,41],[3126,42,2543,44,"status"],[3126,48,2543,50],[3126,49,2543,51,"containsLowercaseLetter"],[3126,72,2543,74],[3126,76,2543,78],[3126,80,2543,82],[3126,81,2543,83],[3127,6,2544,8,"status"],[3127,12,2544,14],[3127,13,2544,15,"isValid"],[3127,20,2544,22],[3127,25,2544,27,"status"],[3127,31,2544,33],[3127,32,2544,34,"isValid"],[3127,39,2544,41],[3127,42,2544,44,"status"],[3127,48,2544,50],[3127,49,2544,51,"containsUppercaseLetter"],[3127,72,2544,74],[3127,76,2544,78],[3127,80,2544,82],[3127,81,2544,83],[3128,6,2545,8,"status"],[3128,12,2545,14],[3128,13,2545,15,"isValid"],[3128,20,2545,22],[3128,25,2545,27,"status"],[3128,31,2545,33],[3128,32,2545,34,"isValid"],[3128,39,2545,41],[3128,42,2545,44,"status"],[3128,48,2545,50],[3128,49,2545,51,"containsNumericCharacter"],[3128,73,2545,75],[3128,77,2545,79],[3128,81,2545,83],[3128,82,2545,84],[3129,6,2546,8,"status"],[3129,12,2546,14],[3129,13,2546,15,"isValid"],[3129,20,2546,22],[3129,25,2546,27,"status"],[3129,31,2546,33],[3129,32,2546,34,"isValid"],[3129,39,2546,41],[3129,42,2546,44,"status"],[3129,48,2546,50],[3129,49,2546,51,"containsNonAlphanumericCharacter"],[3129,81,2546,83],[3129,85,2546,87],[3129,89,2546,91],[3129,90,2546,92],[3130,6,2547,8],[3130,13,2547,15,"status"],[3130,19,2547,21],[3131,4,2548,4],[3132,4,2549,4],[3133,0,2550,0],[3134,0,2551,0],[3135,0,2552,0],[3136,0,2553,0],[3137,0,2554,0],[3138,4,2555,4,"validatePasswordLengthOptions"],[3138,33,2555,33,"validatePasswordLengthOptions"],[3138,34,2555,34,"password"],[3138,42,2555,42],[3138,44,2555,44,"status"],[3138,50,2555,50],[3138,52,2555,52],[3139,6,2556,8],[3139,12,2556,14,"minPasswordLength"],[3139,29,2556,31],[3139,32,2556,34],[3139,36,2556,38],[3139,37,2556,39,"customStrengthOptions"],[3139,58,2556,60],[3139,59,2556,61,"minPasswordLength"],[3139,76,2556,78],[3140,6,2557,8],[3140,12,2557,14,"maxPasswordLength"],[3140,29,2557,31],[3140,32,2557,34],[3140,36,2557,38],[3140,37,2557,39,"customStrengthOptions"],[3140,58,2557,60],[3140,59,2557,61,"maxPasswordLength"],[3140,76,2557,78],[3141,6,2558,8],[3141,10,2558,12,"minPasswordLength"],[3141,27,2558,29],[3141,29,2558,31],[3142,8,2559,12,"status"],[3142,14,2559,18],[3142,15,2559,19,"meetsMinPasswordLength"],[3142,37,2559,41],[3142,40,2559,44,"password"],[3142,48,2559,52],[3142,49,2559,53,"length"],[3142,55,2559,59],[3142,59,2559,63,"minPasswordLength"],[3142,76,2559,80],[3143,6,2560,8],[3144,6,2561,8],[3144,10,2561,12,"maxPasswordLength"],[3144,27,2561,29],[3144,29,2561,31],[3145,8,2562,12,"status"],[3145,14,2562,18],[3145,15,2562,19,"meetsMaxPasswordLength"],[3145,37,2562,41],[3145,40,2562,44,"password"],[3145,48,2562,52],[3145,49,2562,53,"length"],[3145,55,2562,59],[3145,59,2562,63,"maxPasswordLength"],[3145,76,2562,80],[3146,6,2563,8],[3147,4,2564,4],[3148,4,2565,4],[3149,0,2566,0],[3150,0,2567,0],[3151,0,2568,0],[3152,0,2569,0],[3153,0,2570,0],[3154,4,2571,4,"validatePasswordCharacterOptions"],[3154,36,2571,36,"validatePasswordCharacterOptions"],[3154,37,2571,37,"password"],[3154,45,2571,45],[3154,47,2571,47,"status"],[3154,53,2571,53],[3154,55,2571,55],[3155,6,2572,8],[3156,6,2573,8],[3156,10,2573,12],[3156,11,2573,13,"updatePasswordCharacterOptionsStatuses"],[3156,49,2573,51],[3156,50,2573,52,"status"],[3156,56,2573,58],[3156,58,2574,8],[3156,91,2574,42],[3156,96,2574,47],[3156,98,2575,8],[3156,131,2575,42],[3156,136,2575,47],[3156,138,2576,8],[3156,169,2576,40],[3156,174,2576,45],[3156,176,2577,8],[3156,215,2577,48],[3156,220,2577,53],[3156,221,2577,54],[3157,6,2578,8],[3157,10,2578,12,"passwordChar"],[3157,22,2578,24],[3158,6,2579,8],[3158,11,2579,13],[3158,15,2579,17,"i"],[3158,16,2579,18],[3158,19,2579,21],[3158,20,2579,22],[3158,22,2579,24,"i"],[3158,23,2579,25],[3158,26,2579,28,"password"],[3158,34,2579,36],[3158,35,2579,37,"length"],[3158,41,2579,43],[3158,43,2579,45,"i"],[3158,44,2579,46],[3158,46,2579,48],[3158,48,2579,50],[3159,8,2580,12,"passwordChar"],[3159,20,2580,24],[3159,23,2580,27,"password"],[3159,31,2580,35],[3159,32,2580,36,"charAt"],[3159,38,2580,42],[3159,39,2580,43,"i"],[3159,40,2580,44],[3159,41,2580,45],[3160,8,2581,12],[3160,12,2581,16],[3160,13,2581,17,"updatePasswordCharacterOptionsStatuses"],[3160,51,2581,55],[3160,52,2581,56,"status"],[3160,58,2581,62],[3160,60,2582,12],[3160,93,2582,46,"passwordChar"],[3160,105,2582,58],[3160,109,2582,62],[3160,112,2582,65],[3160,116,2583,16,"passwordChar"],[3160,128,2583,28],[3160,132,2583,32],[3160,135,2583,35],[3160,137,2584,12],[3160,170,2584,46,"passwordChar"],[3160,182,2584,58],[3160,186,2584,62],[3160,189,2584,65],[3160,193,2585,16,"passwordChar"],[3160,205,2585,28],[3160,209,2585,32],[3160,212,2585,35],[3160,214,2586,12],[3160,245,2586,44,"passwordChar"],[3160,257,2586,56],[3160,261,2586,60],[3160,264,2586,63],[3160,268,2587,16,"passwordChar"],[3160,280,2587,28],[3160,284,2587,32],[3160,287,2587,35],[3160,289,2588,12],[3160,328,2588,52],[3160,332,2588,56],[3160,333,2588,57,"allowedNonAlphanumericCharacters"],[3160,365,2588,89],[3160,366,2588,90,"includes"],[3160,374,2588,98],[3160,375,2588,99,"passwordChar"],[3160,387,2588,111],[3160,388,2588,112],[3160,389,2588,113],[3161,6,2589,8],[3162,4,2590,4],[3163,4,2591,4],[3164,0,2592,0],[3165,0,2593,0],[3166,0,2594,0],[3167,0,2595,0],[3168,0,2596,0],[3169,0,2597,0],[3170,0,2598,0],[3171,0,2599,0],[3172,0,2600,0],[3173,0,2601,0],[3174,4,2602,4,"updatePasswordCharacterOptionsStatuses"],[3174,42,2602,42,"updatePasswordCharacterOptionsStatuses"],[3174,43,2602,43,"status"],[3174,49,2602,49],[3174,51,2602,51,"containsLowercaseCharacter"],[3174,77,2602,77],[3174,79,2602,79,"containsUppercaseCharacter"],[3174,105,2602,105],[3174,107,2602,107,"containsNumericCharacter"],[3174,131,2602,131],[3174,133,2602,133,"containsNonAlphanumericCharacter"],[3174,165,2602,165],[3174,167,2602,167],[3175,6,2603,8],[3175,10,2603,12],[3175,14,2603,16],[3175,15,2603,17,"customStrengthOptions"],[3175,36,2603,38],[3175,37,2603,39,"containsLowercaseLetter"],[3175,60,2603,62],[3175,62,2603,64],[3176,8,2604,12,"status"],[3176,14,2604,18],[3176,15,2604,19,"containsLowercaseLetter"],[3176,38,2604,42],[3176,43,2604,47,"status"],[3176,49,2604,53],[3176,50,2604,54,"containsLowercaseLetter"],[3176,73,2604,77],[3176,76,2604,80,"containsLowercaseCharacter"],[3176,102,2604,106],[3176,103,2604,107],[3177,6,2605,8],[3178,6,2606,8],[3178,10,2606,12],[3178,14,2606,16],[3178,15,2606,17,"customStrengthOptions"],[3178,36,2606,38],[3178,37,2606,39,"containsUppercaseLetter"],[3178,60,2606,62],[3178,62,2606,64],[3179,8,2607,12,"status"],[3179,14,2607,18],[3179,15,2607,19,"containsUppercaseLetter"],[3179,38,2607,42],[3179,43,2607,47,"status"],[3179,49,2607,53],[3179,50,2607,54,"containsUppercaseLetter"],[3179,73,2607,77],[3179,76,2607,80,"containsUppercaseCharacter"],[3179,102,2607,106],[3179,103,2607,107],[3180,6,2608,8],[3181,6,2609,8],[3181,10,2609,12],[3181,14,2609,16],[3181,15,2609,17,"customStrengthOptions"],[3181,36,2609,38],[3181,37,2609,39,"containsNumericCharacter"],[3181,61,2609,63],[3181,63,2609,65],[3182,8,2610,12,"status"],[3182,14,2610,18],[3182,15,2610,19,"containsNumericCharacter"],[3182,39,2610,43],[3182,44,2610,48,"status"],[3182,50,2610,54],[3182,51,2610,55,"containsNumericCharacter"],[3182,75,2610,79],[3182,78,2610,82,"containsNumericCharacter"],[3182,102,2610,106],[3182,103,2610,107],[3183,6,2611,8],[3184,6,2612,8],[3184,10,2612,12],[3184,14,2612,16],[3184,15,2612,17,"customStrengthOptions"],[3184,36,2612,38],[3184,37,2612,39,"containsNonAlphanumericCharacter"],[3184,69,2612,71],[3184,71,2612,73],[3185,8,2613,12,"status"],[3185,14,2613,18],[3185,15,2613,19,"containsNonAlphanumericCharacter"],[3185,47,2613,51],[3185,52,2613,56,"status"],[3185,58,2613,62],[3185,59,2613,63,"containsNonAlphanumericCharacter"],[3185,91,2613,95],[3185,94,2613,98,"containsNonAlphanumericCharacter"],[3185,126,2613,130],[3185,127,2613,131],[3186,6,2614,8],[3187,4,2615,4],[3188,2,2616,0],[3190,2,2618,0],[3191,0,2619,0],[3192,0,2620,0],[3193,0,2621,0],[3194,0,2622,0],[3195,0,2623,0],[3196,0,2624,0],[3197,0,2625,0],[3198,0,2626,0],[3199,0,2627,0],[3200,0,2628,0],[3201,0,2629,0],[3202,0,2630,0],[3203,0,2631,0],[3204,0,2632,0],[3205,0,2633,0],[3206,2,2634,0],[3206,8,2634,6,"AuthImpl"],[3206,16,2634,14],[3206,17,2634,15],[3207,4,2635,4,"constructor"],[3207,15,2635,15,"constructor"],[3207,16,2635,16,"app"],[3207,19,2635,19],[3207,21,2635,21,"heartbeatServiceProvider"],[3207,45,2635,45],[3207,47,2635,47,"appCheckServiceProvider"],[3207,70,2635,70],[3207,72,2635,72,"config"],[3207,78,2635,78],[3207,80,2635,80],[3208,6,2636,8],[3208,10,2636,12],[3208,11,2636,13,"app"],[3208,14,2636,16],[3208,17,2636,19,"app"],[3208,20,2636,22],[3209,6,2637,8],[3209,10,2637,12],[3209,11,2637,13,"heartbeatServiceProvider"],[3209,35,2637,37],[3209,38,2637,40,"heartbeatServiceProvider"],[3209,62,2637,64],[3210,6,2638,8],[3210,10,2638,12],[3210,11,2638,13,"appCheckServiceProvider"],[3210,34,2638,36],[3210,37,2638,39,"appCheckServiceProvider"],[3210,60,2638,62],[3211,6,2639,8],[3211,10,2639,12],[3211,11,2639,13,"config"],[3211,17,2639,19],[3211,20,2639,22,"config"],[3211,26,2639,28],[3212,6,2640,8],[3212,10,2640,12],[3212,11,2640,13,"currentUser"],[3212,22,2640,24],[3212,25,2640,27],[3212,29,2640,31],[3213,6,2641,8],[3213,10,2641,12],[3213,11,2641,13,"emulatorConfig"],[3213,25,2641,27],[3213,28,2641,30],[3213,32,2641,34],[3214,6,2642,8],[3214,10,2642,12],[3214,11,2642,13,"operations"],[3214,21,2642,23],[3214,24,2642,26,"Promise"],[3214,31,2642,33],[3214,32,2642,34,"resolve"],[3214,39,2642,41],[3214,40,2642,42],[3214,41,2642,43],[3215,6,2643,8],[3215,10,2643,12],[3215,11,2643,13,"authStateSubscription"],[3215,32,2643,34],[3215,35,2643,37],[3215,39,2643,41,"Subscription"],[3215,51,2643,53],[3215,52,2643,54],[3215,56,2643,58],[3215,57,2643,59],[3216,6,2644,8],[3216,10,2644,12],[3216,11,2644,13,"idTokenSubscription"],[3216,30,2644,32],[3216,33,2644,35],[3216,37,2644,39,"Subscription"],[3216,49,2644,51],[3216,50,2644,52],[3216,54,2644,56],[3216,55,2644,57],[3217,6,2645,8],[3217,10,2645,12],[3217,11,2645,13,"beforeStateQueue"],[3217,27,2645,29],[3217,30,2645,32],[3217,34,2645,36,"AuthMiddlewareQueue"],[3217,53,2645,55],[3217,54,2645,56],[3217,58,2645,60],[3217,59,2645,61],[3218,6,2646,8],[3218,10,2646,12],[3218,11,2646,13,"redirectUser"],[3218,23,2646,25],[3218,26,2646,28],[3218,30,2646,32],[3219,6,2647,8],[3219,10,2647,12],[3219,11,2647,13,"isProactiveRefreshEnabled"],[3219,36,2647,38],[3219,39,2647,41],[3219,44,2647,46],[3220,6,2648,8],[3220,10,2648,12],[3220,11,2648,13,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[3220,50,2648,52],[3220,53,2648,55],[3220,54,2648,56],[3221,6,2649,8],[3222,6,2650,8],[3223,6,2651,8],[3223,10,2651,12],[3223,11,2651,13,"_canInitEmulator"],[3223,27,2651,29],[3223,30,2651,32],[3223,34,2651,36],[3224,6,2652,8],[3224,10,2652,12],[3224,11,2652,13,"_isInitialized"],[3224,25,2652,27],[3224,28,2652,30],[3224,33,2652,35],[3225,6,2653,8],[3225,10,2653,12],[3225,11,2653,13,"_deleted"],[3225,19,2653,21],[3225,22,2653,24],[3225,27,2653,29],[3226,6,2654,8],[3226,10,2654,12],[3226,11,2654,13,"_initializationPromise"],[3226,33,2654,35],[3226,36,2654,38],[3226,40,2654,42],[3227,6,2655,8],[3227,10,2655,12],[3227,11,2655,13,"_popupRedirectResolver"],[3227,33,2655,35],[3227,36,2655,38],[3227,40,2655,42],[3228,6,2656,8],[3228,10,2656,12],[3228,11,2656,13,"_errorFactory"],[3228,24,2656,26],[3228,27,2656,29,"_DEFAULT_AUTH_ERROR_FACTORY"],[3228,54,2656,56],[3229,6,2657,8],[3229,10,2657,12],[3229,11,2657,13,"_agentRecaptchaConfig"],[3229,32,2657,34],[3229,35,2657,37],[3229,39,2657,41],[3230,6,2658,8],[3230,10,2658,12],[3230,11,2658,13,"_tenantRecaptchaConfigs"],[3230,34,2658,36],[3230,37,2658,39],[3230,38,2658,40],[3230,39,2658,41],[3231,6,2659,8],[3231,10,2659,12],[3231,11,2659,13,"_projectPasswordPolicy"],[3231,33,2659,35],[3231,36,2659,38],[3231,40,2659,42],[3232,6,2660,8],[3232,10,2660,12],[3232,11,2660,13,"_tenantPasswordPolicies"],[3232,34,2660,36],[3232,37,2660,39],[3232,38,2660,40],[3232,39,2660,41],[3233,6,2661,8],[3233,10,2661,12],[3233,11,2661,13,"_resolvePersistenceManagerAvailable"],[3233,46,2661,48],[3233,49,2661,51,"undefined"],[3233,58,2661,60],[3234,6,2662,8],[3235,6,2663,8],[3236,6,2664,8],[3237,6,2665,8],[3237,10,2665,12],[3237,11,2665,13,"lastNotifiedUid"],[3237,26,2665,28],[3237,29,2665,31,"undefined"],[3237,38,2665,40],[3238,6,2666,8],[3238,10,2666,12],[3238,11,2666,13,"languageCode"],[3238,23,2666,25],[3238,26,2666,28],[3238,30,2666,32],[3239,6,2667,8],[3239,10,2667,12],[3239,11,2667,13,"tenantId"],[3239,19,2667,21],[3239,22,2667,24],[3239,26,2667,28],[3240,6,2668,8],[3240,10,2668,12],[3240,11,2668,13,"settings"],[3240,19,2668,21],[3240,22,2668,24],[3241,8,2668,26,"appVerificationDisabledForTesting"],[3241,41,2668,59],[3241,43,2668,61],[3242,6,2668,67],[3242,7,2668,68],[3243,6,2669,8],[3243,10,2669,12],[3243,11,2669,13,"frameworks"],[3243,21,2669,23],[3243,24,2669,26],[3243,26,2669,28],[3244,6,2670,8],[3244,10,2670,12],[3244,11,2670,13,"name"],[3244,15,2670,17],[3244,18,2670,20,"app"],[3244,21,2670,23],[3244,22,2670,24,"name"],[3244,26,2670,28],[3245,6,2671,8],[3245,10,2671,12],[3245,11,2671,13,"clientVersion"],[3245,24,2671,26],[3245,27,2671,29,"config"],[3245,33,2671,35],[3245,34,2671,36,"sdkClientVersion"],[3245,50,2671,52],[3246,6,2672,8],[3247,6,2673,8],[3248,6,2674,8],[3248,10,2674,12],[3248,11,2674,13,"_persistenceManagerAvailable"],[3248,39,2674,41],[3248,42,2674,44],[3248,46,2674,48,"Promise"],[3248,53,2674,55],[3248,54,2674,56,"resolve"],[3248,61,2674,63],[3248,65,2674,68],[3248,69,2674,72],[3248,70,2674,73,"_resolvePersistenceManagerAvailable"],[3248,105,2674,108],[3248,108,2674,111,"resolve"],[3248,115,2674,119],[3248,116,2674,120],[3249,4,2675,4],[3250,4,2676,4,"_initializeWithPersistence"],[3250,30,2676,30,"_initializeWithPersistence"],[3250,31,2676,31,"persistenceHierarchy"],[3250,51,2676,51],[3250,53,2676,53,"popupRedirectResolver"],[3250,74,2676,74],[3250,76,2676,76],[3251,6,2677,8],[3251,10,2677,12,"popupRedirectResolver"],[3251,31,2677,33],[3251,33,2677,35],[3252,8,2678,12],[3252,12,2678,16],[3252,13,2678,17,"_popupRedirectResolver"],[3252,35,2678,39],[3252,38,2678,42,"_getInstance"],[3252,50,2678,54],[3252,51,2678,55,"popupRedirectResolver"],[3252,72,2678,76],[3252,73,2678,77],[3253,6,2679,8],[3254,6,2680,8],[3255,6,2681,8],[3256,6,2682,8],[3256,10,2682,12],[3256,11,2682,13,"_initializationPromise"],[3256,33,2682,35],[3256,36,2682,38],[3256,40,2682,42],[3256,41,2682,43,"queue"],[3256,46,2682,48],[3256,47,2682,49],[3256,59,2682,61],[3257,8,2683,12],[3257,12,2683,16],[3257,16,2683,20],[3257,17,2683,21,"_deleted"],[3257,25,2683,29],[3257,27,2683,31],[3258,10,2684,16],[3259,8,2685,12],[3260,8,2686,12],[3260,12,2686,16],[3260,13,2686,17,"persistenceManager"],[3260,31,2686,35],[3260,34,2686,38],[3260,40,2686,44,"PersistenceUserManager"],[3260,62,2686,66],[3260,63,2686,67,"create"],[3260,69,2686,73],[3260,70,2686,74],[3260,74,2686,78],[3260,76,2686,80,"persistenceHierarchy"],[3260,96,2686,100],[3260,97,2686,101],[3261,8,2687,12],[3261,12,2687,16],[3261,13,2687,17,"_resolvePersistenceManagerAvailable"],[3261,48,2687,52],[3261,51,2687,55],[3261,52,2687,56],[3262,8,2688,12],[3262,12,2688,16],[3262,16,2688,20],[3262,17,2688,21,"_deleted"],[3262,25,2688,29],[3262,27,2688,31],[3263,10,2689,16],[3264,8,2690,12],[3265,8,2691,12],[3266,8,2692,12],[3267,8,2693,12],[3267,12,2693,16],[3267,16,2693,20],[3267,17,2693,21,"_popupRedirectResolver"],[3267,39,2693,43],[3267,41,2693,45,"_shouldInitProactively"],[3267,63,2693,67],[3267,65,2693,69],[3268,10,2694,16],[3269,10,2695,16],[3269,14,2695,20],[3270,12,2696,20],[3270,18,2696,26],[3270,22,2696,30],[3270,23,2696,31,"_popupRedirectResolver"],[3270,45,2696,53],[3270,46,2696,54,"_initialize"],[3270,57,2696,65],[3270,58,2696,66],[3270,62,2696,70],[3270,63,2696,71],[3271,10,2697,16],[3271,11,2697,17],[3271,12,2698,16],[3271,19,2698,23,"e"],[3271,20,2698,24],[3271,22,2698,26],[3272,12,2699,20],[3273,10,2699,20],[3274,8,2701,12],[3275,8,2702,12],[3275,14,2702,18],[3275,18,2702,22],[3275,19,2702,23,"initializeCurrentUser"],[3275,40,2702,44],[3275,41,2702,45,"popupRedirectResolver"],[3275,62,2702,66],[3275,63,2702,67],[3276,8,2703,12],[3276,12,2703,16],[3276,13,2703,17,"lastNotifiedUid"],[3276,28,2703,32],[3276,31,2703,35],[3276,35,2703,39],[3276,36,2703,40,"currentUser"],[3276,47,2703,51],[3276,49,2703,53,"uid"],[3276,52,2703,56],[3276,56,2703,60],[3276,60,2703,64],[3277,8,2704,12],[3277,12,2704,16],[3277,16,2704,20],[3277,17,2704,21,"_deleted"],[3277,25,2704,29],[3277,27,2704,31],[3278,10,2705,16],[3279,8,2706,12],[3280,8,2707,12],[3280,12,2707,16],[3280,13,2707,17,"_isInitialized"],[3280,27,2707,31],[3280,30,2707,34],[3280,34,2707,38],[3281,6,2708,8],[3281,7,2708,9],[3281,8,2708,10],[3282,6,2709,8],[3282,13,2709,15],[3282,17,2709,19],[3282,18,2709,20,"_initializationPromise"],[3282,40,2709,42],[3283,4,2710,4],[3284,4,2711,4],[3285,0,2712,0],[3286,0,2713,0],[3287,4,2714,4],[3287,10,2714,10,"_onStorageEvent"],[3287,25,2714,25,"_onStorageEvent"],[3287,26,2714,25],[3287,28,2714,28],[3288,6,2715,8],[3288,10,2715,12],[3288,14,2715,16],[3288,15,2715,17,"_deleted"],[3288,23,2715,25],[3288,25,2715,27],[3289,8,2716,12],[3290,6,2717,8],[3291,6,2718,8],[3291,12,2718,14,"user"],[3291,16,2718,18],[3291,19,2718,21],[3291,25,2718,27],[3291,29,2718,31],[3291,30,2718,32,"assertedPersistence"],[3291,49,2718,51],[3291,50,2718,52,"getCurrentUser"],[3291,64,2718,66],[3291,65,2718,67],[3291,66,2718,68],[3292,6,2719,8],[3292,10,2719,12],[3292,11,2719,13],[3292,15,2719,17],[3292,16,2719,18,"currentUser"],[3292,27,2719,29],[3292,31,2719,33],[3292,32,2719,34,"user"],[3292,36,2719,38],[3292,38,2719,40],[3293,8,2720,12],[3294,8,2721,12],[3295,6,2722,8],[3296,6,2723,8],[3297,6,2724,8],[3297,10,2724,12],[3297,14,2724,16],[3297,15,2724,17,"currentUser"],[3297,26,2724,28],[3297,30,2724,32,"user"],[3297,34,2724,36],[3297,38,2724,40],[3297,42,2724,44],[3297,43,2724,45,"currentUser"],[3297,54,2724,56],[3297,55,2724,57,"uid"],[3297,58,2724,60],[3297,63,2724,65,"user"],[3297,67,2724,69],[3297,68,2724,70,"uid"],[3297,71,2724,73],[3297,73,2724,75],[3298,8,2725,12],[3299,8,2726,12],[3299,12,2726,16],[3299,13,2726,17,"_currentUser"],[3299,25,2726,29],[3299,26,2726,30,"_assign"],[3299,33,2726,37],[3299,34,2726,38,"user"],[3299,38,2726,42],[3299,39,2726,43],[3300,8,2727,12],[3301,8,2728,12],[3302,8,2729,12],[3302,14,2729,18],[3302,18,2729,22],[3302,19,2729,23,"currentUser"],[3302,30,2729,34],[3302,31,2729,35,"getIdToken"],[3302,41,2729,45],[3302,42,2729,46],[3302,43,2729,47],[3303,8,2730,12],[3304,6,2731,8],[3305,6,2732,8],[3306,6,2733,8],[3307,6,2734,8],[3307,12,2734,14],[3307,16,2734,18],[3307,17,2734,19,"_updateCurrentUser"],[3307,35,2734,37],[3307,36,2734,38,"user"],[3307,40,2734,42],[3307,42,2734,44],[3307,72,2734,75],[3307,76,2734,79],[3307,77,2734,80],[3308,4,2735,4],[3309,4,2736,4],[3309,10,2736,10,"initializeCurrentUserFromIdToken"],[3309,42,2736,42,"initializeCurrentUserFromIdToken"],[3309,43,2736,43,"idToken"],[3309,50,2736,50],[3309,52,2736,52],[3310,6,2737,8],[3310,10,2737,12],[3311,8,2738,12],[3311,14,2738,18,"response"],[3311,22,2738,26],[3311,25,2738,29],[3311,31,2738,35,"getAccountInfo"],[3311,45,2738,49],[3311,46,2738,50],[3311,50,2738,54],[3311,52,2738,56],[3312,10,2738,58,"idToken"],[3313,8,2738,66],[3313,9,2738,67],[3313,10,2738,68],[3314,8,2739,12],[3314,14,2739,18,"user"],[3314,18,2739,22],[3314,21,2739,25],[3314,27,2739,31,"UserImpl"],[3314,35,2739,39],[3314,36,2739,40,"_fromGetAccountInfoResponse"],[3314,63,2739,67],[3314,64,2739,68],[3314,68,2739,72],[3314,70,2739,74,"response"],[3314,78,2739,82],[3314,80,2739,84,"idToken"],[3314,87,2739,91],[3314,88,2739,92],[3315,8,2740,12],[3315,14,2740,18],[3315,18,2740,22],[3315,19,2740,23,"directlySetCurrentUser"],[3315,41,2740,45],[3315,42,2740,46,"user"],[3315,46,2740,50],[3315,47,2740,51],[3316,6,2741,8],[3316,7,2741,9],[3316,8,2742,8],[3316,15,2742,15,"err"],[3316,18,2742,18],[3316,20,2742,20],[3317,8,2743,12,"console"],[3317,15,2743,19],[3317,16,2743,20,"warn"],[3317,20,2743,24],[3317,21,2743,25],[3317,89,2743,93],[3317,91,2743,95,"err"],[3317,94,2743,98],[3317,95,2743,99],[3318,8,2744,12],[3318,14,2744,18],[3318,18,2744,22],[3318,19,2744,23,"directlySetCurrentUser"],[3318,41,2744,45],[3318,42,2744,46],[3318,46,2744,50],[3318,47,2744,51],[3319,6,2745,8],[3320,4,2746,4],[3321,4,2747,4],[3321,10,2747,10,"initializeCurrentUser"],[3321,31,2747,31,"initializeCurrentUser"],[3321,32,2747,32,"popupRedirectResolver"],[3321,53,2747,53],[3321,55,2747,55],[3322,6,2748,8],[3322,10,2748,12],[3322,14,2748,12,"_isFirebaseServerApp"],[3322,26,2748,32],[3322,27,2748,32,"_isFirebaseServerApp"],[3322,47,2748,32],[3322,49,2748,33],[3322,53,2748,37],[3322,54,2748,38,"app"],[3322,57,2748,41],[3322,58,2748,42],[3322,60,2748,44],[3323,8,2749,12],[3323,14,2749,18,"idToken"],[3323,21,2749,25],[3323,24,2749,28],[3323,28,2749,32],[3323,29,2749,33,"app"],[3323,32,2749,36],[3323,33,2749,37,"settings"],[3323,41,2749,45],[3323,42,2749,46,"authIdToken"],[3323,53,2749,57],[3324,8,2750,12],[3324,12,2750,16,"idToken"],[3324,19,2750,23],[3324,21,2750,25],[3325,10,2751,16],[3326,10,2752,16],[3327,10,2753,16],[3327,17,2753,23],[3327,21,2753,27,"Promise"],[3327,28,2753,34],[3327,29,2753,35,"resolve"],[3327,36,2753,42],[3327,40,2753,46],[3328,12,2754,20,"setTimeout"],[3328,22,2754,30],[3328,23,2754,31],[3328,29,2754,37],[3328,33,2754,41],[3328,34,2754,42,"initializeCurrentUserFromIdToken"],[3328,66,2754,74],[3328,67,2754,75,"idToken"],[3328,74,2754,82],[3328,75,2754,83],[3328,76,2754,84,"then"],[3328,80,2754,88],[3328,81,2754,89,"resolve"],[3328,88,2754,96],[3328,90,2754,98,"resolve"],[3328,97,2754,105],[3328,98,2754,106],[3328,99,2754,107],[3329,10,2755,16],[3329,11,2755,17],[3329,12,2755,18],[3330,8,2756,12],[3330,9,2756,13],[3330,15,2757,17],[3331,10,2758,16],[3331,17,2758,23],[3331,21,2758,27],[3331,22,2758,28,"directlySetCurrentUser"],[3331,44,2758,50],[3331,45,2758,51],[3331,49,2758,55],[3331,50,2758,56],[3332,8,2759,12],[3333,6,2760,8],[3334,6,2761,8],[3335,6,2762,8],[3335,12,2762,14,"previouslyStoredUser"],[3335,32,2762,34],[3335,35,2762,38],[3335,41,2762,44],[3335,45,2762,48],[3335,46,2762,49,"assertedPersistence"],[3335,65,2762,68],[3335,66,2762,69,"getCurrentUser"],[3335,80,2762,83],[3335,81,2762,84],[3335,82,2762,86],[3336,6,2763,8],[3336,10,2763,12,"futureCurrentUser"],[3336,27,2763,29],[3336,30,2763,32,"previouslyStoredUser"],[3336,50,2763,52],[3337,6,2764,8],[3337,10,2764,12,"needsTocheckMiddleware"],[3337,32,2764,34],[3337,35,2764,37],[3337,40,2764,42],[3338,6,2765,8],[3338,10,2765,12,"popupRedirectResolver"],[3338,31,2765,33],[3338,35,2765,37],[3338,39,2765,41],[3338,40,2765,42,"config"],[3338,46,2765,48],[3338,47,2765,49,"authDomain"],[3338,57,2765,59],[3338,59,2765,61],[3339,8,2766,12],[3339,14,2766,18],[3339,18,2766,22],[3339,19,2766,23,"getOrInitRedirectPersistenceManager"],[3339,54,2766,58],[3339,55,2766,59],[3339,56,2766,60],[3340,8,2767,12],[3340,14,2767,18,"redirectUserEventId"],[3340,33,2767,37],[3340,36,2767,40],[3340,40,2767,44],[3340,41,2767,45,"redirectUser"],[3340,53,2767,57],[3340,55,2767,59,"_redirectEventId"],[3340,71,2767,75],[3341,8,2768,12],[3341,14,2768,18,"storedUserEventId"],[3341,31,2768,35],[3341,34,2768,38,"futureCurrentUser"],[3341,51,2768,55],[3341,53,2768,57,"_redirectEventId"],[3341,69,2768,73],[3342,8,2769,12],[3342,14,2769,18,"result"],[3342,20,2769,24],[3342,23,2769,27],[3342,29,2769,33],[3342,33,2769,37],[3342,34,2769,38,"tryRedirectSignIn"],[3342,51,2769,55],[3342,52,2769,56,"popupRedirectResolver"],[3342,73,2769,77],[3342,74,2769,78],[3343,8,2770,12],[3344,8,2771,12],[3345,8,2772,12],[3346,8,2773,12],[3347,8,2774,12],[3347,12,2774,16],[3347,13,2774,17],[3347,14,2774,18,"redirectUserEventId"],[3347,33,2774,37],[3347,37,2774,41,"redirectUserEventId"],[3347,56,2774,60],[3347,61,2774,65,"storedUserEventId"],[3347,78,2774,82],[3347,83,2775,16,"result"],[3347,89,2775,22],[3347,91,2775,24,"user"],[3347,95,2775,28],[3347,97,2775,30],[3348,10,2776,16,"futureCurrentUser"],[3348,27,2776,33],[3348,30,2776,36,"result"],[3348,36,2776,42],[3348,37,2776,43,"user"],[3348,41,2776,47],[3349,10,2777,16,"needsTocheckMiddleware"],[3349,32,2777,38],[3349,35,2777,41],[3349,39,2777,45],[3350,8,2778,12],[3351,6,2779,8],[3352,6,2780,8],[3353,6,2781,8],[3353,10,2781,12],[3353,11,2781,13,"futureCurrentUser"],[3353,28,2781,30],[3353,30,2781,32],[3354,8,2782,12],[3354,15,2782,19],[3354,19,2782,23],[3354,20,2782,24,"directlySetCurrentUser"],[3354,42,2782,46],[3354,43,2782,47],[3354,47,2782,51],[3354,48,2782,52],[3355,6,2783,8],[3356,6,2784,8],[3356,10,2784,12],[3356,11,2784,13,"futureCurrentUser"],[3356,28,2784,30],[3356,29,2784,31,"_redirectEventId"],[3356,45,2784,47],[3356,47,2784,49],[3357,8,2785,12],[3358,8,2786,12],[3359,8,2787,12],[3359,12,2787,16,"needsTocheckMiddleware"],[3359,34,2787,38],[3359,36,2787,40],[3360,10,2788,16],[3360,14,2788,20],[3361,12,2789,20],[3361,18,2789,26],[3361,22,2789,30],[3361,23,2789,31,"beforeStateQueue"],[3361,39,2789,47],[3361,40,2789,48,"runMiddleware"],[3361,53,2789,61],[3361,54,2789,62,"futureCurrentUser"],[3361,71,2789,79],[3361,72,2789,80],[3362,10,2790,16],[3362,11,2790,17],[3362,12,2791,16],[3362,19,2791,23,"e"],[3362,20,2791,24],[3362,22,2791,26],[3363,12,2792,20,"futureCurrentUser"],[3363,29,2792,37],[3363,32,2792,40,"previouslyStoredUser"],[3363,52,2792,60],[3364,12,2793,20],[3365,12,2794,20],[3366,12,2795,20],[3366,16,2795,24],[3366,17,2795,25,"_popupRedirectResolver"],[3366,39,2795,47],[3366,40,2795,48,"_overrideRedirectResult"],[3366,63,2795,71],[3366,64,2795,72],[3366,68,2795,76],[3366,70,2795,78],[3366,76,2795,84,"Promise"],[3366,83,2795,91],[3366,84,2795,92,"reject"],[3366,90,2795,98],[3366,91,2795,99,"e"],[3366,92,2795,100],[3366,93,2795,101],[3366,94,2795,102],[3367,10,2796,16],[3368,8,2797,12],[3369,8,2798,12],[3369,12,2798,16,"futureCurrentUser"],[3369,29,2798,33],[3369,31,2798,35],[3370,10,2799,16],[3370,17,2799,23],[3370,21,2799,27],[3370,22,2799,28,"reloadAndSetCurrentUserOrClear"],[3370,52,2799,58],[3370,53,2799,59,"futureCurrentUser"],[3370,70,2799,76],[3370,71,2799,77],[3371,8,2800,12],[3371,9,2800,13],[3371,15,2801,17],[3372,10,2802,16],[3372,17,2802,23],[3372,21,2802,27],[3372,22,2802,28,"directlySetCurrentUser"],[3372,44,2802,50],[3372,45,2802,51],[3372,49,2802,55],[3372,50,2802,56],[3373,8,2803,12],[3374,6,2804,8],[3375,6,2805,8,"_assert"],[3375,13,2805,15],[3375,14,2805,16],[3375,18,2805,20],[3375,19,2805,21,"_popupRedirectResolver"],[3375,41,2805,43],[3375,43,2805,45],[3375,47,2805,49],[3375,49,2805,51],[3375,65,2805,67],[3375,66,2805,68],[3375,100,2805,102],[3375,101,2805,103],[3376,6,2806,8],[3376,12,2806,14],[3376,16,2806,18],[3376,17,2806,19,"getOrInitRedirectPersistenceManager"],[3376,52,2806,54],[3376,53,2806,55],[3376,54,2806,56],[3377,6,2807,8],[3378,6,2808,8],[3379,6,2809,8],[3380,6,2810,8],[3380,10,2810,12],[3380,14,2810,16],[3380,15,2810,17,"redirectUser"],[3380,27,2810,29],[3380,31,2811,12],[3380,35,2811,16],[3380,36,2811,17,"redirectUser"],[3380,48,2811,29],[3380,49,2811,30,"_redirectEventId"],[3380,65,2811,46],[3380,70,2811,51,"futureCurrentUser"],[3380,87,2811,68],[3380,88,2811,69,"_redirectEventId"],[3380,104,2811,85],[3380,106,2811,87],[3381,8,2812,12],[3381,15,2812,19],[3381,19,2812,23],[3381,20,2812,24,"directlySetCurrentUser"],[3381,42,2812,46],[3381,43,2812,47,"futureCurrentUser"],[3381,60,2812,64],[3381,61,2812,65],[3382,6,2813,8],[3383,6,2814,8],[3383,13,2814,15],[3383,17,2814,19],[3383,18,2814,20,"reloadAndSetCurrentUserOrClear"],[3383,48,2814,50],[3383,49,2814,51,"futureCurrentUser"],[3383,66,2814,68],[3383,67,2814,69],[3384,4,2815,4],[3385,4,2816,4],[3385,10,2816,10,"tryRedirectSignIn"],[3385,27,2816,27,"tryRedirectSignIn"],[3385,28,2816,28,"redirectResolver"],[3385,44,2816,44],[3385,46,2816,46],[3386,6,2817,8],[3387,6,2818,8],[3388,6,2819,8],[3389,6,2820,8],[3390,6,2821,8],[3391,6,2822,8],[3392,6,2823,8],[3393,6,2824,8],[3394,6,2825,8],[3395,6,2826,8],[3396,6,2827,8],[3397,6,2828,8],[3398,6,2829,8],[3399,6,2830,8],[3400,6,2831,8],[3401,6,2832,8],[3401,10,2832,12,"result"],[3401,16,2832,18],[3401,19,2832,21],[3401,23,2832,25],[3402,6,2833,8],[3402,10,2833,12],[3403,8,2834,12],[3404,8,2835,12],[3405,8,2836,12,"result"],[3405,14,2836,18],[3405,17,2836,21],[3405,23,2836,27],[3405,27,2836,31],[3405,28,2836,32,"_popupRedirectResolver"],[3405,50,2836,54],[3405,51,2836,55,"_completeRedirectFn"],[3405,70,2836,74],[3405,71,2836,75],[3405,75,2836,79],[3405,77,2836,81,"redirectResolver"],[3405,93,2836,97],[3405,95,2836,99],[3405,99,2836,103],[3405,100,2836,104],[3406,6,2837,8],[3406,7,2837,9],[3406,8,2838,8],[3406,15,2838,15,"e"],[3406,16,2838,16],[3406,18,2838,18],[3407,8,2839,12],[3408,8,2840,12],[3409,8,2841,12],[3409,14,2841,18],[3409,18,2841,22],[3409,19,2841,23,"_setRedirectUser"],[3409,35,2841,39],[3409,36,2841,40],[3409,40,2841,44],[3409,41,2841,45],[3410,6,2842,8],[3411,6,2843,8],[3411,13,2843,15,"result"],[3411,19,2843,21],[3412,4,2844,4],[3413,4,2845,4],[3413,10,2845,10,"reloadAndSetCurrentUserOrClear"],[3413,40,2845,40,"reloadAndSetCurrentUserOrClear"],[3413,41,2845,41,"user"],[3413,45,2845,45],[3413,47,2845,47],[3414,6,2846,8],[3414,10,2846,12],[3415,8,2847,12],[3415,14,2847,18,"_reloadWithoutSaving"],[3415,34,2847,38],[3415,35,2847,39,"user"],[3415,39,2847,43],[3415,40,2847,44],[3416,6,2848,8],[3416,7,2848,9],[3416,8,2849,8],[3416,15,2849,15,"e"],[3416,16,2849,16],[3416,18,2849,18],[3417,8,2850,12],[3417,12,2850,16,"e"],[3417,13,2850,17],[3417,15,2850,19,"code"],[3417,19,2850,23],[3417,24,2851,16],[3417,32,2851,24],[3417,56,2851,48],[3417,57,2851,49],[3417,101,2851,93],[3417,103,2851,95],[3418,10,2852,16],[3419,10,2853,16],[3420,10,2854,16],[3420,17,2854,23],[3420,21,2854,27],[3420,22,2854,28,"directlySetCurrentUser"],[3420,44,2854,50],[3420,45,2854,51],[3420,49,2854,55],[3420,50,2854,56],[3421,8,2855,12],[3422,6,2856,8],[3423,6,2857,8],[3423,13,2857,15],[3423,17,2857,19],[3423,18,2857,20,"directlySetCurrentUser"],[3423,40,2857,42],[3423,41,2857,43,"user"],[3423,45,2857,47],[3423,46,2857,48],[3424,4,2858,4],[3425,4,2859,4,"useDeviceLanguage"],[3425,21,2859,21,"useDeviceLanguage"],[3425,22,2859,21],[3425,24,2859,24],[3426,6,2860,8],[3426,10,2860,12],[3426,11,2860,13,"languageCode"],[3426,23,2860,25],[3426,26,2860,28,"_getUserLanguage"],[3426,42,2860,44],[3426,43,2860,45],[3426,44,2860,46],[3427,4,2861,4],[3428,4,2862,4],[3428,10,2862,10,"_delete"],[3428,17,2862,17,"_delete"],[3428,18,2862,17],[3428,20,2862,20],[3429,6,2863,8],[3429,10,2863,12],[3429,11,2863,13,"_deleted"],[3429,19,2863,21],[3429,22,2863,24],[3429,26,2863,28],[3430,4,2864,4],[3431,4,2865,4],[3431,10,2865,10,"updateCurrentUser"],[3431,27,2865,27,"updateCurrentUser"],[3431,28,2865,28,"userExtern"],[3431,38,2865,38],[3431,40,2865,40],[3432,6,2866,8],[3432,10,2866,12],[3432,14,2866,12,"_isFirebaseServerApp"],[3432,26,2866,32],[3432,27,2866,32,"_isFirebaseServerApp"],[3432,47,2866,32],[3432,49,2866,33],[3432,53,2866,37],[3432,54,2866,38,"app"],[3432,57,2866,41],[3432,58,2866,42],[3432,60,2866,44],[3433,8,2867,12],[3433,15,2867,19,"Promise"],[3433,22,2867,26],[3433,23,2867,27,"reject"],[3433,29,2867,33],[3433,30,2867,34,"_serverAppCurrentUserOperationNotSupportedError"],[3433,77,2867,81],[3433,78,2867,82],[3433,82,2867,86],[3433,83,2867,87],[3433,84,2867,88],[3434,6,2868,8],[3435,6,2869,8],[3436,6,2870,8],[3437,6,2871,8],[3437,12,2871,14,"user"],[3437,16,2871,18],[3437,19,2871,21,"userExtern"],[3437,29,2871,31],[3437,32,2872,14],[3437,36,2872,14,"getModularInstance"],[3437,49,2872,32],[3437,50,2872,32,"getModularInstance"],[3437,68,2872,32],[3437,70,2872,33,"userExtern"],[3437,80,2872,43],[3437,81,2872,44],[3437,84,2873,14],[3437,88,2873,18],[3438,6,2874,8],[3438,10,2874,12,"user"],[3438,14,2874,16],[3438,16,2874,18],[3439,8,2875,12,"_assert"],[3439,15,2875,19],[3439,16,2875,20,"user"],[3439,20,2875,24],[3439,21,2875,25,"auth"],[3439,25,2875,29],[3439,26,2875,30,"config"],[3439,32,2875,36],[3439,33,2875,37,"apiKey"],[3439,39,2875,43],[3439,44,2875,48],[3439,48,2875,52],[3439,49,2875,53,"config"],[3439,55,2875,59],[3439,56,2875,60,"apiKey"],[3439,62,2875,66],[3439,64,2875,68],[3439,68,2875,72],[3439,70,2875,74],[3439,90,2875,94],[3439,91,2875,95],[3439,123,2875,127],[3439,124,2875,128],[3440,6,2876,8],[3441,6,2877,8],[3441,13,2877,15],[3441,17,2877,19],[3441,18,2877,20,"_updateCurrentUser"],[3441,36,2877,38],[3441,37,2877,39,"user"],[3441,41,2877,43],[3441,45,2877,47,"user"],[3441,49,2877,51],[3441,50,2877,52,"_clone"],[3441,56,2877,58],[3441,57,2877,59],[3441,61,2877,63],[3441,62,2877,64],[3441,63,2877,65],[3442,4,2878,4],[3443,4,2879,4],[3443,10,2879,10,"_updateCurrentUser"],[3443,28,2879,28,"_updateCurrentUser"],[3443,29,2879,29,"user"],[3443,33,2879,33],[3443,35,2879,35,"skipBeforeStateCallbacks"],[3443,59,2879,59],[3443,62,2879,62],[3443,67,2879,67],[3443,69,2879,69],[3444,6,2880,8],[3444,10,2880,12],[3444,14,2880,16],[3444,15,2880,17,"_deleted"],[3444,23,2880,25],[3444,25,2880,27],[3445,8,2881,12],[3446,6,2882,8],[3447,6,2883,8],[3447,10,2883,12,"user"],[3447,14,2883,16],[3447,16,2883,18],[3448,8,2884,12,"_assert"],[3448,15,2884,19],[3448,16,2884,20],[3448,20,2884,24],[3448,21,2884,25,"tenantId"],[3448,29,2884,33],[3448,34,2884,38,"user"],[3448,38,2884,42],[3448,39,2884,43,"tenantId"],[3448,47,2884,51],[3448,49,2884,53],[3448,53,2884,57],[3448,55,2884,59],[3448,75,2884,79],[3448,76,2884,80],[3448,114,2884,118],[3448,115,2884,119],[3449,6,2885,8],[3450,6,2886,8],[3450,10,2886,12],[3450,11,2886,13,"skipBeforeStateCallbacks"],[3450,35,2886,37],[3450,37,2886,39],[3451,8,2887,12],[3451,14,2887,18],[3451,18,2887,22],[3451,19,2887,23,"beforeStateQueue"],[3451,35,2887,39],[3451,36,2887,40,"runMiddleware"],[3451,49,2887,53],[3451,50,2887,54,"user"],[3451,54,2887,58],[3451,55,2887,59],[3452,6,2888,8],[3453,6,2889,8],[3453,13,2889,15],[3453,17,2889,19],[3453,18,2889,20,"queue"],[3453,23,2889,25],[3453,24,2889,26],[3453,36,2889,38],[3454,8,2890,12],[3454,14,2890,18],[3454,18,2890,22],[3454,19,2890,23,"directlySetCurrentUser"],[3454,41,2890,45],[3454,42,2890,46,"user"],[3454,46,2890,50],[3454,47,2890,51],[3455,8,2891,12],[3455,12,2891,16],[3455,13,2891,17,"notifyAuthListeners"],[3455,32,2891,36],[3455,33,2891,37],[3455,34,2891,38],[3456,6,2892,8],[3456,7,2892,9],[3456,8,2892,10],[3457,4,2893,4],[3458,4,2894,4],[3458,10,2894,10,"signOut"],[3458,17,2894,17,"signOut"],[3458,18,2894,17],[3458,20,2894,20],[3459,6,2895,8],[3459,10,2895,12],[3459,14,2895,12,"_isFirebaseServerApp"],[3459,26,2895,32],[3459,27,2895,32,"_isFirebaseServerApp"],[3459,47,2895,32],[3459,49,2895,33],[3459,53,2895,37],[3459,54,2895,38,"app"],[3459,57,2895,41],[3459,58,2895,42],[3459,60,2895,44],[3460,8,2896,12],[3460,15,2896,19,"Promise"],[3460,22,2896,26],[3460,23,2896,27,"reject"],[3460,29,2896,33],[3460,30,2896,34,"_serverAppCurrentUserOperationNotSupportedError"],[3460,77,2896,81],[3460,78,2896,82],[3460,82,2896,86],[3460,83,2896,87],[3460,84,2896,88],[3461,6,2897,8],[3462,6,2898,8],[3463,6,2899,8],[3463,12,2899,14],[3463,16,2899,18],[3463,17,2899,19,"beforeStateQueue"],[3463,33,2899,35],[3463,34,2899,36,"runMiddleware"],[3463,47,2899,49],[3463,48,2899,50],[3463,52,2899,54],[3463,53,2899,55],[3464,6,2900,8],[3465,6,2901,8],[3465,10,2901,12],[3465,14,2901,16],[3465,15,2901,17,"redirectPersistenceManager"],[3465,41,2901,43],[3465,45,2901,47],[3465,49,2901,51],[3465,50,2901,52,"_popupRedirectResolver"],[3465,72,2901,74],[3465,74,2901,76],[3466,8,2902,12],[3466,14,2902,18],[3466,18,2902,22],[3466,19,2902,23,"_setRedirectUser"],[3466,35,2902,39],[3466,36,2902,40],[3466,40,2902,44],[3466,41,2902,45],[3467,6,2903,8],[3468,6,2904,8],[3469,6,2905,8],[3470,6,2906,8],[3470,13,2906,15],[3470,17,2906,19],[3470,18,2906,20,"_updateCurrentUser"],[3470,36,2906,38],[3470,37,2906,39],[3470,41,2906,43],[3470,43,2906,45],[3470,73,2906,76],[3470,77,2906,80],[3470,78,2906,81],[3471,4,2907,4],[3472,4,2908,4,"setPersistence"],[3472,18,2908,18,"setPersistence"],[3472,19,2908,19,"persistence"],[3472,30,2908,30],[3472,32,2908,32],[3473,6,2909,8],[3473,10,2909,12],[3473,14,2909,12,"_isFirebaseServerApp"],[3473,26,2909,32],[3473,27,2909,32,"_isFirebaseServerApp"],[3473,47,2909,32],[3473,49,2909,33],[3473,53,2909,37],[3473,54,2909,38,"app"],[3473,57,2909,41],[3473,58,2909,42],[3473,60,2909,44],[3474,8,2910,12],[3474,15,2910,19,"Promise"],[3474,22,2910,26],[3474,23,2910,27,"reject"],[3474,29,2910,33],[3474,30,2910,34,"_serverAppCurrentUserOperationNotSupportedError"],[3474,77,2910,81],[3474,78,2910,82],[3474,82,2910,86],[3474,83,2910,87],[3474,84,2910,88],[3475,6,2911,8],[3476,6,2912,8],[3476,13,2912,15],[3476,17,2912,19],[3476,18,2912,20,"queue"],[3476,23,2912,25],[3476,24,2912,26],[3476,36,2912,38],[3477,8,2913,12],[3477,14,2913,18],[3477,18,2913,22],[3477,19,2913,23,"assertedPersistence"],[3477,38,2913,42],[3477,39,2913,43,"setPersistence"],[3477,53,2913,57],[3477,54,2913,58,"_getInstance"],[3477,66,2913,70],[3477,67,2913,71,"persistence"],[3477,78,2913,82],[3477,79,2913,83],[3477,80,2913,84],[3478,6,2914,8],[3478,7,2914,9],[3478,8,2914,10],[3479,4,2915,4],[3480,4,2916,4,"_getRecaptchaConfig"],[3480,23,2916,23,"_getRecaptchaConfig"],[3480,24,2916,23],[3480,26,2916,26],[3481,6,2917,8],[3481,10,2917,12],[3481,14,2917,16],[3481,15,2917,17,"tenantId"],[3481,23,2917,25],[3481,27,2917,29],[3481,31,2917,33],[3481,33,2917,35],[3482,8,2918,12],[3482,15,2918,19],[3482,19,2918,23],[3482,20,2918,24,"_agentRecaptchaConfig"],[3482,41,2918,45],[3483,6,2919,8],[3483,7,2919,9],[3483,13,2920,13],[3484,8,2921,12],[3484,15,2921,19],[3484,19,2921,23],[3484,20,2921,24,"_tenantRecaptchaConfigs"],[3484,43,2921,47],[3484,44,2921,48],[3484,48,2921,52],[3484,49,2921,53,"tenantId"],[3484,57,2921,61],[3484,58,2921,62],[3485,6,2922,8],[3486,4,2923,4],[3487,4,2924,4],[3487,10,2924,10,"validatePassword"],[3487,26,2924,26,"validatePassword"],[3487,27,2924,27,"password"],[3487,35,2924,35],[3487,37,2924,37],[3488,6,2925,8],[3488,10,2925,12],[3488,11,2925,13],[3488,15,2925,17],[3488,16,2925,18,"_getPasswordPolicyInternal"],[3488,42,2925,44],[3488,43,2925,45],[3488,44,2925,46],[3488,46,2925,48],[3489,8,2926,12],[3489,14,2926,18],[3489,18,2926,22],[3489,19,2926,23,"_updatePasswordPolicy"],[3489,40,2926,44],[3489,41,2926,45],[3489,42,2926,46],[3490,6,2927,8],[3491,6,2928,8],[3492,6,2929,8],[3492,12,2929,14,"passwordPolicy"],[3492,26,2929,28],[3492,29,2929,31],[3492,33,2929,35],[3492,34,2929,36,"_getPasswordPolicyInternal"],[3492,60,2929,62],[3492,61,2929,63],[3492,62,2929,64],[3493,6,2930,8],[3494,6,2931,8],[3495,6,2932,8],[3495,10,2932,12,"passwordPolicy"],[3495,24,2932,26],[3495,25,2932,27,"schemaVersion"],[3495,38,2932,40],[3495,43,2933,12],[3495,47,2933,16],[3495,48,2933,17,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[3495,87,2933,56],[3495,89,2933,58],[3496,8,2934,12],[3496,15,2934,19,"Promise"],[3496,22,2934,26],[3496,23,2934,27,"reject"],[3496,29,2934,33],[3496,30,2934,34],[3496,34,2934,38],[3496,35,2934,39,"_errorFactory"],[3496,48,2934,52],[3496,49,2934,53,"create"],[3496,55,2934,59],[3496,56,2934,60],[3496,100,2934,104],[3496,101,2934,105],[3496,165,2934,169],[3496,166,2934,170],[3496,167,2934,171],[3496,168,2934,172],[3496,169,2934,173],[3497,6,2935,8],[3498,6,2936,8],[3498,13,2936,15,"passwordPolicy"],[3498,27,2936,29],[3498,28,2936,30,"validatePassword"],[3498,44,2936,46],[3498,45,2936,47,"password"],[3498,53,2936,55],[3498,54,2936,56],[3499,4,2937,4],[3500,4,2938,4,"_getPasswordPolicyInternal"],[3500,30,2938,30,"_getPasswordPolicyInternal"],[3500,31,2938,30],[3500,33,2938,33],[3501,6,2939,8],[3501,10,2939,12],[3501,14,2939,16],[3501,15,2939,17,"tenantId"],[3501,23,2939,25],[3501,28,2939,30],[3501,32,2939,34],[3501,34,2939,36],[3502,8,2940,12],[3502,15,2940,19],[3502,19,2940,23],[3502,20,2940,24,"_projectPasswordPolicy"],[3502,42,2940,46],[3503,6,2941,8],[3503,7,2941,9],[3503,13,2942,13],[3504,8,2943,12],[3504,15,2943,19],[3504,19,2943,23],[3504,20,2943,24,"_tenantPasswordPolicies"],[3504,43,2943,47],[3504,44,2943,48],[3504,48,2943,52],[3504,49,2943,53,"tenantId"],[3504,57,2943,61],[3504,58,2943,62],[3505,6,2944,8],[3506,4,2945,4],[3507,4,2946,4],[3507,10,2946,10,"_updatePasswordPolicy"],[3507,31,2946,31,"_updatePasswordPolicy"],[3507,32,2946,31],[3507,34,2946,34],[3508,6,2947,8],[3508,12,2947,14,"response"],[3508,20,2947,22],[3508,23,2947,25],[3508,29,2947,31,"_getPasswordPolicy"],[3508,47,2947,49],[3508,48,2947,50],[3508,52,2947,54],[3508,53,2947,55],[3509,6,2948,8],[3509,12,2948,14,"passwordPolicy"],[3509,26,2948,28],[3509,29,2948,31],[3509,33,2948,35,"PasswordPolicyImpl"],[3509,51,2948,53],[3509,52,2948,54,"response"],[3509,60,2948,62],[3509,61,2948,63],[3510,6,2949,8],[3510,10,2949,12],[3510,14,2949,16],[3510,15,2949,17,"tenantId"],[3510,23,2949,25],[3510,28,2949,30],[3510,32,2949,34],[3510,34,2949,36],[3511,8,2950,12],[3511,12,2950,16],[3511,13,2950,17,"_projectPasswordPolicy"],[3511,35,2950,39],[3511,38,2950,42,"passwordPolicy"],[3511,52,2950,56],[3512,6,2951,8],[3512,7,2951,9],[3512,13,2952,13],[3513,8,2953,12],[3513,12,2953,16],[3513,13,2953,17,"_tenantPasswordPolicies"],[3513,36,2953,40],[3513,37,2953,41],[3513,41,2953,45],[3513,42,2953,46,"tenantId"],[3513,50,2953,54],[3513,51,2953,55],[3513,54,2953,58,"passwordPolicy"],[3513,68,2953,72],[3514,6,2954,8],[3515,4,2955,4],[3516,4,2956,4,"_getPersistenceType"],[3516,23,2956,23,"_getPersistenceType"],[3516,24,2956,23],[3516,26,2956,26],[3517,6,2957,8],[3517,13,2957,15],[3517,17,2957,19],[3517,18,2957,20,"assertedPersistence"],[3517,37,2957,39],[3517,38,2957,40,"persistence"],[3517,49,2957,51],[3517,50,2957,52,"type"],[3517,54,2957,56],[3518,4,2958,4],[3519,4,2959,4,"_getPersistence"],[3519,19,2959,19,"_getPersistence"],[3519,20,2959,19],[3519,22,2959,22],[3520,6,2960,8],[3520,13,2960,15],[3520,17,2960,19],[3520,18,2960,20,"assertedPersistence"],[3520,37,2960,39],[3520,38,2960,40,"persistence"],[3520,49,2960,51],[3521,4,2961,4],[3522,4,2962,4,"_updateErrorMap"],[3522,19,2962,19,"_updateErrorMap"],[3522,20,2962,20,"errorMap"],[3522,28,2962,28],[3522,30,2962,30],[3523,6,2963,8],[3523,10,2963,12],[3523,11,2963,13,"_errorFactory"],[3523,24,2963,26],[3523,27,2963,29],[3523,31,2963,33,"ErrorFactory"],[3523,44,2963,45],[3523,45,2963,45,"ErrorFactory"],[3523,57,2963,45],[3523,58,2963,46],[3523,64,2963,52],[3523,66,2963,54],[3523,76,2963,64],[3523,78,2963,66,"errorMap"],[3523,86,2963,74],[3523,87,2963,75],[3523,88,2963,76],[3523,89,2963,77],[3524,4,2964,4],[3525,4,2965,4,"onAuthStateChanged"],[3525,22,2965,22,"onAuthStateChanged"],[3525,23,2965,23,"nextOrObserver"],[3525,37,2965,37],[3525,39,2965,39,"error"],[3525,44,2965,44],[3525,46,2965,46,"completed"],[3525,55,2965,55],[3525,57,2965,57],[3526,6,2966,8],[3526,13,2966,15],[3526,17,2966,19],[3526,18,2966,20,"registerStateListener"],[3526,39,2966,41],[3526,40,2966,42],[3526,44,2966,46],[3526,45,2966,47,"authStateSubscription"],[3526,66,2966,68],[3526,68,2966,70,"nextOrObserver"],[3526,82,2966,84],[3526,84,2966,86,"error"],[3526,89,2966,91],[3526,91,2966,93,"completed"],[3526,100,2966,102],[3526,101,2966,103],[3527,4,2967,4],[3528,4,2968,4,"beforeAuthStateChanged"],[3528,26,2968,26,"beforeAuthStateChanged"],[3528,27,2968,27,"callback"],[3528,35,2968,35],[3528,37,2968,37,"onAbort"],[3528,44,2968,44],[3528,46,2968,46],[3529,6,2969,8],[3529,13,2969,15],[3529,17,2969,19],[3529,18,2969,20,"beforeStateQueue"],[3529,34,2969,36],[3529,35,2969,37,"pushCallback"],[3529,47,2969,49],[3529,48,2969,50,"callback"],[3529,56,2969,58],[3529,58,2969,60,"onAbort"],[3529,65,2969,67],[3529,66,2969,68],[3530,4,2970,4],[3531,4,2971,4,"onIdTokenChanged"],[3531,20,2971,20,"onIdTokenChanged"],[3531,21,2971,21,"nextOrObserver"],[3531,35,2971,35],[3531,37,2971,37,"error"],[3531,42,2971,42],[3531,44,2971,44,"completed"],[3531,53,2971,53],[3531,55,2971,55],[3532,6,2972,8],[3532,13,2972,15],[3532,17,2972,19],[3532,18,2972,20,"registerStateListener"],[3532,39,2972,41],[3532,40,2972,42],[3532,44,2972,46],[3532,45,2972,47,"idTokenSubscription"],[3532,64,2972,66],[3532,66,2972,68,"nextOrObserver"],[3532,80,2972,82],[3532,82,2972,84,"error"],[3532,87,2972,89],[3532,89,2972,91,"completed"],[3532,98,2972,100],[3532,99,2972,101],[3533,4,2973,4],[3534,4,2974,4,"authStateReady"],[3534,18,2974,18,"authStateReady"],[3534,19,2974,18],[3534,21,2974,21],[3535,6,2975,8],[3535,13,2975,15],[3535,17,2975,19,"Promise"],[3535,24,2975,26],[3535,25,2975,27],[3535,26,2975,28,"resolve"],[3535,33,2975,35],[3535,35,2975,37,"reject"],[3535,41,2975,43],[3535,46,2975,48],[3536,8,2976,12],[3536,12,2976,16],[3536,16,2976,20],[3536,17,2976,21,"currentUser"],[3536,28,2976,32],[3536,30,2976,34],[3537,10,2977,16,"resolve"],[3537,17,2977,23],[3537,18,2977,24],[3537,19,2977,25],[3538,8,2978,12],[3538,9,2978,13],[3538,15,2979,17],[3539,10,2980,16],[3539,16,2980,22,"unsubscribe"],[3539,27,2980,33],[3539,30,2980,36],[3539,34,2980,40],[3539,35,2980,41,"onAuthStateChanged"],[3539,53,2980,59],[3539,54,2980,60],[3539,60,2980,66],[3540,12,2981,20,"unsubscribe"],[3540,23,2981,31],[3540,24,2981,32],[3540,25,2981,33],[3541,12,2982,20,"resolve"],[3541,19,2982,27],[3541,20,2982,28],[3541,21,2982,29],[3542,10,2983,16],[3542,11,2983,17],[3542,13,2983,19,"reject"],[3542,19,2983,25],[3542,20,2983,26],[3543,8,2984,12],[3544,6,2985,8],[3544,7,2985,9],[3544,8,2985,10],[3545,4,2986,4],[3546,4,2987,4],[3547,0,2988,0],[3548,0,2989,0],[3549,4,2990,4],[3549,10,2990,10,"revokeAccessToken"],[3549,27,2990,27,"revokeAccessToken"],[3549,28,2990,28,"token"],[3549,33,2990,33],[3549,35,2990,35],[3550,6,2991,8],[3550,10,2991,12],[3550,14,2991,16],[3550,15,2991,17,"currentUser"],[3550,26,2991,28],[3550,28,2991,30],[3551,8,2992,12],[3551,14,2992,18,"idToken"],[3551,21,2992,25],[3551,24,2992,28],[3551,30,2992,34],[3551,34,2992,38],[3551,35,2992,39,"currentUser"],[3551,46,2992,50],[3551,47,2992,51,"getIdToken"],[3551,57,2992,61],[3551,58,2992,62],[3551,59,2992,63],[3552,8,2993,12],[3553,8,2994,12],[3553,14,2994,18,"request"],[3553,21,2994,25],[3553,24,2994,28],[3554,10,2995,16,"providerId"],[3554,20,2995,26],[3554,22,2995,28],[3554,33,2995,39],[3555,10,2996,16,"tokenType"],[3555,19,2996,25],[3555,21,2996,27],[3555,35,2996,41],[3555,36,2996,42],[3556,10,2997,16,"token"],[3556,15,2997,21],[3557,10,2998,16,"idToken"],[3558,8,2999,12],[3558,9,2999,13],[3559,8,3000,12],[3559,12,3000,16],[3559,16,3000,20],[3559,17,3000,21,"tenantId"],[3559,25,3000,29],[3559,29,3000,33],[3559,33,3000,37],[3559,35,3000,39],[3560,10,3001,16,"request"],[3560,17,3001,23],[3560,18,3001,24,"tenantId"],[3560,26,3001,32],[3560,29,3001,35],[3560,33,3001,39],[3560,34,3001,40,"tenantId"],[3560,42,3001,48],[3561,8,3002,12],[3562,8,3003,12],[3562,14,3003,18,"revokeToken"],[3562,25,3003,29],[3562,26,3003,30],[3562,30,3003,34],[3562,32,3003,36,"request"],[3562,39,3003,43],[3562,40,3003,44],[3563,6,3004,8],[3564,4,3005,4],[3565,4,3006,4,"toJSON"],[3565,10,3006,10,"toJSON"],[3565,11,3006,10],[3565,13,3006,13],[3566,6,3007,8],[3566,13,3007,15],[3567,8,3008,12,"apiKey"],[3567,14,3008,18],[3567,16,3008,20],[3567,20,3008,24],[3567,21,3008,25,"config"],[3567,27,3008,31],[3567,28,3008,32,"apiKey"],[3567,34,3008,38],[3568,8,3009,12,"authDomain"],[3568,18,3009,22],[3568,20,3009,24],[3568,24,3009,28],[3568,25,3009,29,"config"],[3568,31,3009,35],[3568,32,3009,36,"authDomain"],[3568,42,3009,46],[3569,8,3010,12,"appName"],[3569,15,3010,19],[3569,17,3010,21],[3569,21,3010,25],[3569,22,3010,26,"name"],[3569,26,3010,30],[3570,8,3011,12,"currentUser"],[3570,19,3011,23],[3570,21,3011,25],[3570,25,3011,29],[3570,26,3011,30,"_currentUser"],[3570,38,3011,42],[3570,40,3011,44,"toJSON"],[3570,46,3011,50],[3570,47,3011,51],[3571,6,3012,8],[3571,7,3012,9],[3572,4,3013,4],[3573,4,3014,4],[3573,10,3014,10,"_setRedirectUser"],[3573,26,3014,26,"_setRedirectUser"],[3573,27,3014,27,"user"],[3573,31,3014,31],[3573,33,3014,33,"popupRedirectResolver"],[3573,54,3014,54],[3573,56,3014,56],[3574,6,3015,8],[3574,12,3015,14,"redirectManager"],[3574,27,3015,29],[3574,30,3015,32],[3574,36,3015,38],[3574,40,3015,42],[3574,41,3015,43,"getOrInitRedirectPersistenceManager"],[3574,76,3015,78],[3574,77,3015,79,"popupRedirectResolver"],[3574,98,3015,100],[3574,99,3015,101],[3575,6,3016,8],[3575,13,3016,15,"user"],[3575,17,3016,19],[3575,22,3016,24],[3575,26,3016,28],[3575,29,3017,14,"redirectManager"],[3575,44,3017,29],[3575,45,3017,30,"removeCurrentUser"],[3575,62,3017,47],[3575,63,3017,48],[3575,64,3017,49],[3575,67,3018,14,"redirectManager"],[3575,82,3018,29],[3575,83,3018,30,"setCurrentUser"],[3575,97,3018,44],[3575,98,3018,45,"user"],[3575,102,3018,49],[3575,103,3018,50],[3576,4,3019,4],[3577,4,3020,4],[3577,10,3020,10,"getOrInitRedirectPersistenceManager"],[3577,45,3020,45,"getOrInitRedirectPersistenceManager"],[3577,46,3020,46,"popupRedirectResolver"],[3577,67,3020,67],[3577,69,3020,69],[3578,6,3021,8],[3578,10,3021,12],[3578,11,3021,13],[3578,15,3021,17],[3578,16,3021,18,"redirectPersistenceManager"],[3578,42,3021,44],[3578,44,3021,46],[3579,8,3022,12],[3579,14,3022,18,"resolver"],[3579,22,3022,26],[3579,25,3022,30,"popupRedirectResolver"],[3579,46,3022,51],[3579,50,3022,55,"_getInstance"],[3579,62,3022,67],[3579,63,3022,68,"popupRedirectResolver"],[3579,84,3022,89],[3579,85,3022,90],[3579,89,3023,16],[3579,93,3023,20],[3579,94,3023,21,"_popupRedirectResolver"],[3579,116,3023,43],[3580,8,3024,12,"_assert"],[3580,15,3024,19],[3580,16,3024,20,"resolver"],[3580,24,3024,28],[3580,26,3024,30],[3580,30,3024,34],[3580,32,3024,36],[3580,48,3024,52],[3580,49,3024,53],[3580,83,3024,87],[3580,84,3024,88],[3581,8,3025,12],[3581,12,3025,16],[3581,13,3025,17,"redirectPersistenceManager"],[3581,39,3025,43],[3581,42,3025,46],[3581,48,3025,52,"PersistenceUserManager"],[3581,70,3025,74],[3581,71,3025,75,"create"],[3581,77,3025,81],[3581,78,3025,82],[3581,82,3025,86],[3581,84,3025,88],[3581,85,3025,89,"_getInstance"],[3581,97,3025,101],[3581,98,3025,102,"resolver"],[3581,106,3025,110],[3581,107,3025,111,"_redirectPersistence"],[3581,127,3025,131],[3581,128,3025,132],[3581,129,3025,133],[3581,131,3025,135],[3581,145,3025,149],[3581,146,3025,150],[3581,173,3025,177],[3581,174,3025,178],[3582,8,3026,12],[3582,12,3026,16],[3582,13,3026,17,"redirectUser"],[3582,25,3026,29],[3582,28,3027,16],[3582,34,3027,22],[3582,38,3027,26],[3582,39,3027,27,"redirectPersistenceManager"],[3582,65,3027,53],[3582,66,3027,54,"getCurrentUser"],[3582,80,3027,68],[3582,81,3027,69],[3582,82,3027,70],[3583,6,3028,8],[3584,6,3029,8],[3584,13,3029,15],[3584,17,3029,19],[3584,18,3029,20,"redirectPersistenceManager"],[3584,44,3029,46],[3585,4,3030,4],[3586,4,3031,4],[3586,10,3031,10,"_redirectUserForId"],[3586,28,3031,28,"_redirectUserForId"],[3586,29,3031,29,"id"],[3586,31,3031,31],[3586,33,3031,33],[3587,6,3032,8],[3588,6,3033,8],[3589,6,3034,8],[3589,10,3034,12],[3589,14,3034,16],[3589,15,3034,17,"_isInitialized"],[3589,29,3034,31],[3589,31,3034,33],[3590,8,3035,12],[3590,14,3035,18],[3590,18,3035,22],[3590,19,3035,23,"queue"],[3590,24,3035,28],[3590,25,3035,29],[3590,37,3035,41],[3590,38,3035,43],[3590,39,3035,44],[3590,40,3035,45],[3591,6,3036,8],[3592,6,3037,8],[3592,10,3037,12],[3592,14,3037,16],[3592,15,3037,17,"_currentUser"],[3592,27,3037,29],[3592,29,3037,31,"_redirectEventId"],[3592,45,3037,47],[3592,50,3037,52,"id"],[3592,52,3037,54],[3592,54,3037,56],[3593,8,3038,12],[3593,15,3038,19],[3593,19,3038,23],[3593,20,3038,24,"_currentUser"],[3593,32,3038,36],[3594,6,3039,8],[3595,6,3040,8],[3595,10,3040,12],[3595,14,3040,16],[3595,15,3040,17,"redirectUser"],[3595,27,3040,29],[3595,29,3040,31,"_redirectEventId"],[3595,45,3040,47],[3595,50,3040,52,"id"],[3595,52,3040,54],[3595,54,3040,56],[3596,8,3041,12],[3596,15,3041,19],[3596,19,3041,23],[3596,20,3041,24,"redirectUser"],[3596,32,3041,36],[3597,6,3042,8],[3598,6,3043,8],[3598,13,3043,15],[3598,17,3043,19],[3599,4,3044,4],[3600,4,3045,4],[3600,10,3045,10,"_persistUserIfCurrent"],[3600,31,3045,31,"_persistUserIfCurrent"],[3600,32,3045,32,"user"],[3600,36,3045,36],[3600,38,3045,38],[3601,6,3046,8],[3601,10,3046,12,"user"],[3601,14,3046,16],[3601,19,3046,21],[3601,23,3046,25],[3601,24,3046,26,"currentUser"],[3601,35,3046,37],[3601,37,3046,39],[3602,8,3047,12],[3602,15,3047,19],[3602,19,3047,23],[3602,20,3047,24,"queue"],[3602,25,3047,29],[3602,26,3047,30],[3602,38,3047,42],[3602,42,3047,46],[3602,43,3047,47,"directlySetCurrentUser"],[3602,65,3047,69],[3602,66,3047,70,"user"],[3602,70,3047,74],[3602,71,3047,75],[3602,72,3047,76],[3603,6,3048,8],[3604,4,3049,4],[3605,4,3050,4],[3606,4,3051,4,"_notifyListenersIfCurrent"],[3606,29,3051,29,"_notifyListenersIfCurrent"],[3606,30,3051,30,"user"],[3606,34,3051,34],[3606,36,3051,36],[3607,6,3052,8],[3607,10,3052,12,"user"],[3607,14,3052,16],[3607,19,3052,21],[3607,23,3052,25],[3607,24,3052,26,"currentUser"],[3607,35,3052,37],[3607,37,3052,39],[3608,8,3053,12],[3608,12,3053,16],[3608,13,3053,17,"notifyAuthListeners"],[3608,32,3053,36],[3608,33,3053,37],[3608,34,3053,38],[3609,6,3054,8],[3610,4,3055,4],[3611,4,3056,4,"_key"],[3611,8,3056,8,"_key"],[3611,9,3056,8],[3611,11,3056,11],[3612,6,3057,8],[3612,13,3057,15],[3612,16,3057,18],[3612,20,3057,22],[3612,21,3057,23,"config"],[3612,27,3057,29],[3612,28,3057,30,"authDomain"],[3612,38,3057,40],[3612,42,3057,44],[3612,46,3057,48],[3612,47,3057,49,"config"],[3612,53,3057,55],[3612,54,3057,56,"apiKey"],[3612,60,3057,62],[3612,64,3057,66],[3612,68,3057,70],[3612,69,3057,71,"name"],[3612,73,3057,75],[3612,75,3057,77],[3613,4,3058,4],[3614,4,3059,4,"_startProactiveRefresh"],[3614,26,3059,26,"_startProactiveRefresh"],[3614,27,3059,26],[3614,29,3059,29],[3615,6,3060,8],[3615,10,3060,12],[3615,11,3060,13,"isProactiveRefreshEnabled"],[3615,36,3060,38],[3615,39,3060,41],[3615,43,3060,45],[3616,6,3061,8],[3616,10,3061,12],[3616,14,3061,16],[3616,15,3061,17,"currentUser"],[3616,26,3061,28],[3616,28,3061,30],[3617,8,3062,12],[3617,12,3062,16],[3617,13,3062,17,"_currentUser"],[3617,25,3062,29],[3617,26,3062,30,"_startProactiveRefresh"],[3617,48,3062,52],[3617,49,3062,53],[3617,50,3062,54],[3618,6,3063,8],[3619,4,3064,4],[3620,4,3065,4,"_stopProactiveRefresh"],[3620,25,3065,25,"_stopProactiveRefresh"],[3620,26,3065,25],[3620,28,3065,28],[3621,6,3066,8],[3621,10,3066,12],[3621,11,3066,13,"isProactiveRefreshEnabled"],[3621,36,3066,38],[3621,39,3066,41],[3621,44,3066,46],[3622,6,3067,8],[3622,10,3067,12],[3622,14,3067,16],[3622,15,3067,17,"currentUser"],[3622,26,3067,28],[3622,28,3067,30],[3623,8,3068,12],[3623,12,3068,16],[3623,13,3068,17,"_currentUser"],[3623,25,3068,29],[3623,26,3068,30,"_stopProactiveRefresh"],[3623,47,3068,51],[3623,48,3068,52],[3623,49,3068,53],[3624,6,3069,8],[3625,4,3070,4],[3626,4,3071,4],[3627,4,3072,4],[3627,8,3072,8,"_currentUser"],[3627,20,3072,20,"_currentUser"],[3627,21,3072,20],[3627,23,3072,23],[3628,6,3073,8],[3628,13,3073,15],[3628,17,3073,19],[3628,18,3073,20,"currentUser"],[3628,29,3073,31],[3629,4,3074,4],[3630,4,3075,4,"notifyAuthListeners"],[3630,23,3075,23,"notifyAuthListeners"],[3630,24,3075,23],[3630,26,3075,26],[3631,6,3076,8],[3631,10,3076,12],[3631,11,3076,13],[3631,15,3076,17],[3631,16,3076,18,"_isInitialized"],[3631,30,3076,32],[3631,32,3076,34],[3632,8,3077,12],[3633,6,3078,8],[3634,6,3079,8],[3634,10,3079,12],[3634,11,3079,13,"idTokenSubscription"],[3634,30,3079,32],[3634,31,3079,33,"next"],[3634,35,3079,37],[3634,36,3079,38],[3634,40,3079,42],[3634,41,3079,43,"currentUser"],[3634,52,3079,54],[3634,53,3079,55],[3635,6,3080,8],[3635,12,3080,14,"currentUid"],[3635,22,3080,24],[3635,25,3080,27],[3635,29,3080,31],[3635,30,3080,32,"currentUser"],[3635,41,3080,43],[3635,43,3080,45,"uid"],[3635,46,3080,48],[3635,50,3080,52],[3635,54,3080,56],[3636,6,3081,8],[3636,10,3081,12],[3636,14,3081,16],[3636,15,3081,17,"lastNotifiedUid"],[3636,30,3081,32],[3636,35,3081,37,"currentUid"],[3636,45,3081,47],[3636,47,3081,49],[3637,8,3082,12],[3637,12,3082,16],[3637,13,3082,17,"lastNotifiedUid"],[3637,28,3082,32],[3637,31,3082,35,"currentUid"],[3637,41,3082,45],[3638,8,3083,12],[3638,12,3083,16],[3638,13,3083,17,"authStateSubscription"],[3638,34,3083,38],[3638,35,3083,39,"next"],[3638,39,3083,43],[3638,40,3083,44],[3638,44,3083,48],[3638,45,3083,49,"currentUser"],[3638,56,3083,60],[3638,57,3083,61],[3639,6,3084,8],[3640,4,3085,4],[3641,4,3086,4,"registerStateListener"],[3641,25,3086,25,"registerStateListener"],[3641,26,3086,26,"subscription"],[3641,38,3086,38],[3641,40,3086,40,"nextOrObserver"],[3641,54,3086,54],[3641,56,3086,56,"error"],[3641,61,3086,61],[3641,63,3086,63,"completed"],[3641,72,3086,72],[3641,74,3086,74],[3642,6,3087,8],[3642,10,3087,12],[3642,14,3087,16],[3642,15,3087,17,"_deleted"],[3642,23,3087,25],[3642,25,3087,27],[3643,8,3088,12],[3643,15,3088,19],[3643,21,3088,25],[3643,22,3088,27],[3643,23,3088,28],[3644,6,3089,8],[3645,6,3090,8],[3645,12,3090,14,"cb"],[3645,14,3090,16],[3645,17,3090,19],[3645,24,3090,26,"nextOrObserver"],[3645,38,3090,40],[3645,43,3090,45],[3645,53,3090,55],[3645,56,3091,14,"nextOrObserver"],[3645,70,3091,28],[3645,73,3092,14,"nextOrObserver"],[3645,87,3092,28],[3645,88,3092,29,"next"],[3645,92,3092,33],[3645,93,3092,34,"bind"],[3645,97,3092,38],[3645,98,3092,39,"nextOrObserver"],[3645,112,3092,53],[3645,113,3092,54],[3646,6,3093,8],[3646,10,3093,12,"isUnsubscribed"],[3646,24,3093,26],[3646,27,3093,29],[3646,32,3093,34],[3647,6,3094,8],[3647,12,3094,14,"promise"],[3647,19,3094,21],[3647,22,3094,24],[3647,26,3094,28],[3647,27,3094,29,"_isInitialized"],[3647,41,3094,43],[3647,44,3095,14,"Promise"],[3647,51,3095,21],[3647,52,3095,22,"resolve"],[3647,59,3095,29],[3647,60,3095,30],[3647,61,3095,31],[3647,64,3096,14],[3647,68,3096,18],[3647,69,3096,19,"_initializationPromise"],[3647,91,3096,41],[3648,6,3097,8,"_assert"],[3648,13,3097,15],[3648,14,3097,16,"promise"],[3648,21,3097,23],[3648,23,3097,25],[3648,27,3097,29],[3648,29,3097,31],[3648,45,3097,47],[3648,46,3097,48],[3648,80,3097,82],[3648,81,3097,83],[3649,6,3098,8],[3650,6,3099,8],[3651,6,3100,8,"promise"],[3651,13,3100,15],[3651,14,3100,16,"then"],[3651,18,3100,20],[3651,19,3100,21],[3651,25,3100,27],[3652,8,3101,12],[3652,12,3101,16,"isUnsubscribed"],[3652,26,3101,30],[3652,28,3101,32],[3653,10,3102,16],[3654,8,3103,12],[3655,8,3104,12,"cb"],[3655,10,3104,14],[3655,11,3104,15],[3655,15,3104,19],[3655,16,3104,20,"currentUser"],[3655,27,3104,31],[3655,28,3104,32],[3656,6,3105,8],[3656,7,3105,9],[3656,8,3105,10],[3657,6,3106,8],[3657,10,3106,12],[3657,17,3106,19,"nextOrObserver"],[3657,31,3106,33],[3657,36,3106,38],[3657,46,3106,48],[3657,48,3106,50],[3658,8,3107,12],[3658,14,3107,18,"unsubscribe"],[3658,25,3107,29],[3658,28,3107,32,"subscription"],[3658,40,3107,44],[3658,41,3107,45,"addObserver"],[3658,52,3107,56],[3658,53,3107,57,"nextOrObserver"],[3658,67,3107,71],[3658,69,3107,73,"error"],[3658,74,3107,78],[3658,76,3107,80,"completed"],[3658,85,3107,89],[3658,86,3107,90],[3659,8,3108,12],[3659,15,3108,19],[3659,21,3108,25],[3660,10,3109,16,"isUnsubscribed"],[3660,24,3109,30],[3660,27,3109,33],[3660,31,3109,37],[3661,10,3110,16,"unsubscribe"],[3661,21,3110,27],[3661,22,3110,28],[3661,23,3110,29],[3662,8,3111,12],[3662,9,3111,13],[3663,6,3112,8],[3663,7,3112,9],[3663,13,3113,13],[3664,8,3114,12],[3664,14,3114,18,"unsubscribe"],[3664,25,3114,29],[3664,28,3114,32,"subscription"],[3664,40,3114,44],[3664,41,3114,45,"addObserver"],[3664,52,3114,56],[3664,53,3114,57,"nextOrObserver"],[3664,67,3114,71],[3664,68,3114,72],[3665,8,3115,12],[3665,15,3115,19],[3665,21,3115,25],[3666,10,3116,16,"isUnsubscribed"],[3666,24,3116,30],[3666,27,3116,33],[3666,31,3116,37],[3667,10,3117,16,"unsubscribe"],[3667,21,3117,27],[3667,22,3117,28],[3667,23,3117,29],[3668,8,3118,12],[3668,9,3118,13],[3669,6,3119,8],[3670,4,3120,4],[3671,4,3121,4],[3672,0,3122,0],[3673,0,3123,0],[3674,0,3124,0],[3675,0,3125,0],[3676,4,3126,4],[3676,10,3126,10,"directlySetCurrentUser"],[3676,32,3126,32,"directlySetCurrentUser"],[3676,33,3126,33,"user"],[3676,37,3126,37],[3676,39,3126,39],[3677,6,3127,8],[3677,10,3127,12],[3677,14,3127,16],[3677,15,3127,17,"currentUser"],[3677,26,3127,28],[3677,30,3127,32],[3677,34,3127,36],[3677,35,3127,37,"currentUser"],[3677,46,3127,48],[3677,51,3127,53,"user"],[3677,55,3127,57],[3677,57,3127,59],[3678,8,3128,12],[3678,12,3128,16],[3678,13,3128,17,"_currentUser"],[3678,25,3128,29],[3678,26,3128,30,"_stopProactiveRefresh"],[3678,47,3128,51],[3678,48,3128,52],[3678,49,3128,53],[3679,6,3129,8],[3680,6,3130,8],[3680,10,3130,12,"user"],[3680,14,3130,16],[3680,18,3130,20],[3680,22,3130,24],[3680,23,3130,25,"isProactiveRefreshEnabled"],[3680,48,3130,50],[3680,50,3130,52],[3681,8,3131,12,"user"],[3681,12,3131,16],[3681,13,3131,17,"_startProactiveRefresh"],[3681,35,3131,39],[3681,36,3131,40],[3681,37,3131,41],[3682,6,3132,8],[3683,6,3133,8],[3683,10,3133,12],[3683,11,3133,13,"currentUser"],[3683,22,3133,24],[3683,25,3133,27,"user"],[3683,29,3133,31],[3684,6,3134,8],[3684,10,3134,12,"user"],[3684,14,3134,16],[3684,16,3134,18],[3685,8,3135,12],[3685,14,3135,18],[3685,18,3135,22],[3685,19,3135,23,"assertedPersistence"],[3685,38,3135,42],[3685,39,3135,43,"setCurrentUser"],[3685,53,3135,57],[3685,54,3135,58,"user"],[3685,58,3135,62],[3685,59,3135,63],[3686,6,3136,8],[3686,7,3136,9],[3686,13,3137,13],[3687,8,3138,12],[3687,14,3138,18],[3687,18,3138,22],[3687,19,3138,23,"assertedPersistence"],[3687,38,3138,42],[3687,39,3138,43,"removeCurrentUser"],[3687,56,3138,60],[3687,57,3138,61],[3687,58,3138,62],[3688,6,3139,8],[3689,4,3140,4],[3690,4,3141,4,"queue"],[3690,9,3141,9,"queue"],[3690,10,3141,10,"action"],[3690,16,3141,16],[3690,18,3141,18],[3691,6,3142,8],[3692,6,3143,8],[3693,6,3144,8],[3693,10,3144,12],[3693,11,3144,13,"operations"],[3693,21,3144,23],[3693,24,3144,26],[3693,28,3144,30],[3693,29,3144,31,"operations"],[3693,39,3144,41],[3693,40,3144,42,"then"],[3693,44,3144,46],[3693,45,3144,47,"action"],[3693,51,3144,53],[3693,53,3144,55,"action"],[3693,59,3144,61],[3693,60,3144,62],[3694,6,3145,8],[3694,13,3145,15],[3694,17,3145,19],[3694,18,3145,20,"operations"],[3694,28,3145,30],[3695,4,3146,4],[3696,4,3147,4],[3696,8,3147,8,"assertedPersistence"],[3696,27,3147,27,"assertedPersistence"],[3696,28,3147,27],[3696,30,3147,30],[3697,6,3148,8,"_assert"],[3697,13,3148,15],[3697,14,3148,16],[3697,18,3148,20],[3697,19,3148,21,"persistenceManager"],[3697,37,3148,39],[3697,39,3148,41],[3697,43,3148,45],[3697,45,3148,47],[3697,61,3148,63],[3697,62,3148,64],[3697,96,3148,98],[3697,97,3148,99],[3698,6,3149,8],[3698,13,3149,15],[3698,17,3149,19],[3698,18,3149,20,"persistenceManager"],[3698,36,3149,38],[3699,4,3150,4],[3700,4,3151,4,"_logFramework"],[3700,17,3151,17,"_logFramework"],[3700,18,3151,18,"framework"],[3700,27,3151,27],[3700,29,3151,29],[3701,6,3152,8],[3701,10,3152,12],[3701,11,3152,13,"framework"],[3701,20,3152,22],[3701,24,3152,26],[3701,28,3152,30],[3701,29,3152,31,"frameworks"],[3701,39,3152,41],[3701,40,3152,42,"includes"],[3701,48,3152,50],[3701,49,3152,51,"framework"],[3701,58,3152,60],[3701,59,3152,61],[3701,61,3152,63],[3702,8,3153,12],[3703,6,3154,8],[3704,6,3155,8],[3704,10,3155,12],[3704,11,3155,13,"frameworks"],[3704,21,3155,23],[3704,22,3155,24,"push"],[3704,26,3155,28],[3704,27,3155,29,"framework"],[3704,36,3155,38],[3704,37,3155,39],[3705,6,3156,8],[3706,6,3157,8],[3707,6,3158,8],[3707,10,3158,12],[3707,11,3158,13,"frameworks"],[3707,21,3158,23],[3707,22,3158,24,"sort"],[3707,26,3158,28],[3707,27,3158,29],[3707,28,3158,30],[3708,6,3159,8],[3708,10,3159,12],[3708,11,3159,13,"clientVersion"],[3708,24,3159,26],[3708,27,3159,29,"_getClientVersion"],[3708,44,3159,46],[3708,45,3159,47],[3708,49,3159,51],[3708,50,3159,52,"config"],[3708,56,3159,58],[3708,57,3159,59,"clientPlatform"],[3708,71,3159,73],[3708,73,3159,75],[3708,77,3159,79],[3708,78,3159,80,"_getFrameworks"],[3708,92,3159,94],[3708,93,3159,95],[3708,94,3159,96],[3708,95,3159,97],[3709,4,3160,4],[3710,4,3161,4,"_getFrameworks"],[3710,18,3161,18,"_getFrameworks"],[3710,19,3161,18],[3710,21,3161,21],[3711,6,3162,8],[3711,13,3162,15],[3711,17,3162,19],[3711,18,3162,20,"frameworks"],[3711,28,3162,30],[3712,4,3163,4],[3713,4,3164,4],[3713,10,3164,10,"_getAdditionalHeaders"],[3713,31,3164,31,"_getAdditionalHeaders"],[3713,32,3164,31],[3713,34,3164,34],[3714,6,3165,8],[3715,6,3166,8],[3715,12,3166,14,"headers"],[3715,19,3166,21],[3715,22,3166,24],[3716,8,3167,12],[3716,9,3167,13],[3716,27,3167,31],[3716,28,3167,32],[3716,64,3167,68],[3716,68,3167,72],[3716,69,3167,73,"clientVersion"],[3717,6,3168,8],[3717,7,3168,9],[3718,6,3169,8],[3718,10,3169,12],[3718,14,3169,16],[3718,15,3169,17,"app"],[3718,18,3169,20],[3718,19,3169,21,"options"],[3718,26,3169,28],[3718,27,3169,29,"appId"],[3718,32,3169,34],[3718,34,3169,36],[3719,8,3170,12,"headers"],[3719,15,3170,19],[3719,16,3170,20],[3719,34,3170,38],[3719,35,3170,39],[3719,69,3170,73],[3719,72,3170,76],[3719,76,3170,80],[3719,77,3170,81,"app"],[3719,80,3170,84],[3719,81,3170,85,"options"],[3719,88,3170,92],[3719,89,3170,93,"appId"],[3719,94,3170,98],[3720,6,3171,8],[3721,6,3172,8],[3722,6,3173,8],[3722,12,3173,14,"heartbeatsHeader"],[3722,28,3173,30],[3722,31,3173,33],[3722,37,3173,39],[3722,41,3173,43],[3722,42,3173,44,"heartbeatServiceProvider"],[3722,66,3173,68],[3722,67,3174,13,"getImmediate"],[3722,79,3174,25],[3722,80,3174,26],[3723,8,3175,12,"optional"],[3723,16,3175,20],[3723,18,3175,22],[3724,6,3176,8],[3724,7,3176,9],[3724,8,3176,10],[3724,10,3177,14,"getHeartbeatsHeader"],[3724,29,3177,33],[3724,30,3177,34],[3724,31,3177,35],[3725,6,3178,8],[3725,10,3178,12,"heartbeatsHeader"],[3725,26,3178,28],[3725,28,3178,30],[3726,8,3179,12,"headers"],[3726,15,3179,19],[3726,16,3179,20],[3726,35,3179,39],[3726,36,3179,40],[3726,71,3179,75],[3726,74,3179,78,"heartbeatsHeader"],[3726,90,3179,94],[3727,6,3180,8],[3728,6,3181,8],[3729,6,3182,8],[3729,12,3182,14,"appCheckToken"],[3729,25,3182,27],[3729,28,3182,30],[3729,34,3182,36],[3729,38,3182,40],[3729,39,3182,41,"_getAppCheckToken"],[3729,56,3182,58],[3729,57,3182,59],[3729,58,3182,60],[3730,6,3183,8],[3730,10,3183,12,"appCheckToken"],[3730,23,3183,25],[3730,25,3183,27],[3731,8,3184,12,"headers"],[3731,15,3184,19],[3731,16,3184,20],[3731,37,3184,41],[3731,38,3184,42],[3731,76,3184,80],[3731,79,3184,83,"appCheckToken"],[3731,92,3184,96],[3732,6,3185,8],[3733,6,3186,8],[3733,13,3186,15,"headers"],[3733,20,3186,22],[3734,4,3187,4],[3735,4,3188,4],[3735,10,3188,10,"_getAppCheckToken"],[3735,27,3188,27,"_getAppCheckToken"],[3735,28,3188,27],[3735,30,3188,30],[3736,6,3189,8],[3736,10,3189,12],[3736,14,3189,12,"_isFirebaseServerApp"],[3736,26,3189,32],[3736,27,3189,32,"_isFirebaseServerApp"],[3736,47,3189,32],[3736,49,3189,33],[3736,53,3189,37],[3736,54,3189,38,"app"],[3736,57,3189,41],[3736,58,3189,42],[3736,62,3189,46],[3736,66,3189,50],[3736,67,3189,51,"app"],[3736,70,3189,54],[3736,71,3189,55,"settings"],[3736,79,3189,63],[3736,80,3189,64,"appCheckToken"],[3736,93,3189,77],[3736,95,3189,79],[3737,8,3190,12],[3737,15,3190,19],[3737,19,3190,23],[3737,20,3190,24,"app"],[3737,23,3190,27],[3737,24,3190,28,"settings"],[3737,32,3190,36],[3737,33,3190,37,"appCheckToken"],[3737,46,3190,50],[3738,6,3191,8],[3739,6,3192,8],[3739,12,3192,14,"appCheckTokenResult"],[3739,31,3192,33],[3739,34,3192,36],[3739,40,3192,42],[3739,44,3192,46],[3739,45,3192,47,"appCheckServiceProvider"],[3739,68,3192,70],[3739,69,3193,13,"getImmediate"],[3739,81,3193,25],[3739,82,3193,26],[3740,8,3193,28,"optional"],[3740,16,3193,36],[3740,18,3193,38],[3741,6,3193,43],[3741,7,3193,44],[3741,8,3193,45],[3741,10,3194,14,"getToken"],[3741,18,3194,22],[3741,19,3194,23],[3741,20,3194,24],[3742,6,3195,8],[3742,10,3195,12,"appCheckTokenResult"],[3742,29,3195,31],[3742,31,3195,33,"error"],[3742,36,3195,38],[3742,38,3195,40],[3743,8,3196,12],[3744,8,3197,12],[3745,8,3198,12],[3746,8,3199,12],[3747,8,3200,12,"_logWarn"],[3747,16,3200,20],[3747,17,3200,21],[3747,60,3200,64,"appCheckTokenResult"],[3747,79,3200,83],[3747,80,3200,84,"error"],[3747,85,3200,89],[3747,87,3200,91],[3747,88,3200,92],[3748,6,3201,8],[3749,6,3202,8],[3749,13,3202,15,"appCheckTokenResult"],[3749,32,3202,34],[3749,34,3202,36,"token"],[3749,39,3202,41],[3750,4,3203,4],[3751,2,3204,0],[3752,2,3205,0],[3753,0,3206,0],[3754,0,3207,0],[3755,0,3208,0],[3756,0,3209,0],[3757,0,3210,0],[3758,2,3211,0],[3758,11,3211,9,"_castAuth"],[3758,20,3211,18,"_castAuth"],[3758,21,3211,19,"auth"],[3758,25,3211,23],[3758,27,3211,25],[3759,4,3212,4],[3759,11,3212,11],[3759,15,3212,11,"getModularInstance"],[3759,28,3212,29],[3759,29,3212,29,"getModularInstance"],[3759,47,3212,29],[3759,49,3212,30,"auth"],[3759,53,3212,34],[3759,54,3212,35],[3760,2,3213,0],[3761,2,3214,0],[3762,2,3215,0],[3762,8,3215,6,"Subscription"],[3762,20,3215,18],[3762,21,3215,19],[3763,4,3216,4,"constructor"],[3763,15,3216,15,"constructor"],[3763,16,3216,16,"auth"],[3763,20,3216,20],[3763,22,3216,22],[3764,6,3217,8],[3764,10,3217,12],[3764,11,3217,13,"auth"],[3764,15,3217,17],[3764,18,3217,20,"auth"],[3764,22,3217,24],[3765,6,3218,8],[3765,10,3218,12],[3765,11,3218,13,"observer"],[3765,19,3218,21],[3765,22,3218,24],[3765,26,3218,28],[3766,6,3219,8],[3766,10,3219,12],[3766,11,3219,13,"addObserver"],[3766,22,3219,24],[3766,25,3219,27],[3766,29,3219,27,"createSubscribe"],[3766,42,3219,42],[3766,43,3219,42,"createSubscribe"],[3766,58,3219,42],[3766,60,3219,43,"observer"],[3766,68,3219,51],[3766,72,3219,56],[3766,76,3219,60],[3766,77,3219,61,"observer"],[3766,85,3219,69],[3766,88,3219,72,"observer"],[3766,96,3219,81],[3766,97,3219,82],[3767,4,3220,4],[3768,4,3221,4],[3768,8,3221,8,"next"],[3768,12,3221,12,"next"],[3768,13,3221,12],[3768,15,3221,15],[3769,6,3222,8,"_assert"],[3769,13,3222,15],[3769,14,3222,16],[3769,18,3222,20],[3769,19,3222,21,"observer"],[3769,27,3222,29],[3769,29,3222,31],[3769,33,3222,35],[3769,34,3222,36,"auth"],[3769,38,3222,40],[3769,40,3222,42],[3769,56,3222,58],[3769,57,3222,59],[3769,91,3222,93],[3769,92,3222,94],[3770,6,3223,8],[3770,13,3223,15],[3770,17,3223,19],[3770,18,3223,20,"observer"],[3770,26,3223,28],[3770,27,3223,29,"next"],[3770,31,3223,33],[3770,32,3223,34,"bind"],[3770,36,3223,38],[3770,37,3223,39],[3770,41,3223,43],[3770,42,3223,44,"observer"],[3770,50,3223,52],[3770,51,3223,53],[3771,4,3224,4],[3772,2,3225,0],[3774,2,3227,0],[3775,0,3228,0],[3776,0,3229,0],[3777,0,3230,0],[3778,0,3231,0],[3779,0,3232,0],[3780,0,3233,0],[3781,0,3234,0],[3782,0,3235,0],[3783,0,3236,0],[3784,0,3237,0],[3785,0,3238,0],[3786,0,3239,0],[3787,0,3240,0],[3788,0,3241,0],[3789,0,3242,0],[3790,2,3243,0],[3790,6,3243,4,"externalJSProvider"],[3790,24,3243,22],[3790,27,3243,25],[3791,4,3244,4],[3791,10,3244,10,"loadJS"],[3791,16,3244,16,"loadJS"],[3791,17,3244,16],[3791,19,3244,19],[3792,6,3245,8],[3792,12,3245,14],[3792,16,3245,18,"Error"],[3792,21,3245,23],[3792,22,3245,24],[3792,55,3245,57],[3792,56,3245,58],[3793,4,3246,4],[3793,5,3246,5],[3794,4,3247,4,"recaptchaV2Script"],[3794,21,3247,21],[3794,23,3247,23],[3794,25,3247,25],[3795,4,3248,4,"recaptchaEnterpriseScript"],[3795,29,3248,29],[3795,31,3248,31],[3795,33,3248,33],[3796,4,3249,4,"gapiScript"],[3796,14,3249,14],[3796,16,3249,16],[3797,2,3250,0],[3797,3,3250,1],[3798,2,3251,0],[3798,11,3251,9,"_setExternalJSProvider"],[3798,33,3251,31,"_setExternalJSProvider"],[3798,34,3251,32,"p"],[3798,35,3251,33],[3798,37,3251,35],[3799,4,3252,4,"externalJSProvider"],[3799,22,3252,22],[3799,25,3252,25,"p"],[3799,26,3252,26],[3800,2,3253,0],[3801,2,3254,0],[3801,11,3254,9,"_loadJS"],[3801,18,3254,16,"_loadJS"],[3801,19,3254,17,"url"],[3801,22,3254,20],[3801,24,3254,22],[3802,4,3255,4],[3802,11,3255,11,"externalJSProvider"],[3802,29,3255,29],[3802,30,3255,30,"loadJS"],[3802,36,3255,36],[3802,37,3255,37,"url"],[3802,40,3255,40],[3802,41,3255,41],[3803,2,3256,0],[3804,2,3257,0],[3804,11,3257,9,"_recaptchaV2ScriptUrl"],[3804,32,3257,30,"_recaptchaV2ScriptUrl"],[3804,33,3257,30],[3804,35,3257,33],[3805,4,3258,4],[3805,11,3258,11,"externalJSProvider"],[3805,29,3258,29],[3805,30,3258,30,"recaptchaV2Script"],[3805,47,3258,47],[3806,2,3259,0],[3807,2,3260,0],[3807,11,3260,9,"_recaptchaEnterpriseScriptUrl"],[3807,40,3260,38,"_recaptchaEnterpriseScriptUrl"],[3807,41,3260,38],[3807,43,3260,41],[3808,4,3261,4],[3808,11,3261,11,"externalJSProvider"],[3808,29,3261,29],[3808,30,3261,30,"recaptchaEnterpriseScript"],[3808,55,3261,55],[3809,2,3262,0],[3810,2,3263,0],[3810,11,3263,9,"_gapiScriptUrl"],[3810,25,3263,23,"_gapiScriptUrl"],[3810,26,3263,23],[3810,28,3263,26],[3811,4,3264,4],[3811,11,3264,11,"externalJSProvider"],[3811,29,3264,29],[3811,30,3264,30,"gapiScript"],[3811,40,3264,40],[3812,2,3265,0],[3813,2,3266,0],[3813,11,3266,9,"_generateCallbackName"],[3813,32,3266,30,"_generateCallbackName"],[3813,33,3266,31,"prefix"],[3813,39,3266,37],[3813,41,3266,39],[3814,4,3267,4],[3814,11,3267,11],[3814,16,3267,16,"prefix"],[3814,22,3267,22],[3814,25,3267,25,"Math"],[3814,29,3267,29],[3814,30,3267,30,"floor"],[3814,35,3267,35],[3814,36,3267,36,"Math"],[3814,40,3267,40],[3814,41,3267,41,"random"],[3814,47,3267,47],[3814,48,3267,48],[3814,49,3267,49],[3814,52,3267,52],[3814,59,3267,59],[3814,60,3267,60],[3814,62,3267,62],[3815,2,3268,0],[3817,2,3270,0],[3818,0,3271,0],[3819,0,3272,0],[3820,0,3273,0],[3821,0,3274,0],[3822,0,3275,0],[3823,0,3276,0],[3824,0,3277,0],[3825,0,3278,0],[3826,0,3279,0],[3827,0,3280,0],[3828,0,3281,0],[3829,0,3282,0],[3830,0,3283,0],[3831,0,3284,0],[3832,0,3285,0],[3833,2,3286,0],[3833,8,3286,6,"_SOLVE_TIME_MS"],[3833,22,3286,20],[3833,25,3286,23],[3833,28,3286,26],[3834,2,3287,0],[3834,8,3287,6,"_EXPIRATION_TIME_MS"],[3834,27,3287,25],[3834,30,3287,28],[3834,35,3287,33],[3835,2,3288,0],[3835,8,3288,6,"_WIDGET_ID_START"],[3835,24,3288,22],[3835,27,3288,25],[3835,40,3288,38],[3836,2,3289,0],[3836,8,3289,6,"MockReCaptcha"],[3836,21,3289,19],[3836,22,3289,20],[3837,4,3290,4,"constructor"],[3837,15,3290,15,"constructor"],[3837,16,3290,16,"auth"],[3837,20,3290,20],[3837,22,3290,22],[3838,6,3291,8],[3838,10,3291,12],[3838,11,3291,13,"auth"],[3838,15,3291,17],[3838,18,3291,20,"auth"],[3838,22,3291,24],[3839,6,3292,8],[3839,10,3292,12],[3839,11,3292,13,"counter"],[3839,18,3292,20],[3839,21,3292,23,"_WIDGET_ID_START"],[3839,37,3292,39],[3840,6,3293,8],[3840,10,3293,12],[3840,11,3293,13,"_widgets"],[3840,19,3293,21],[3840,22,3293,24],[3840,26,3293,28,"Map"],[3840,29,3293,31],[3840,30,3293,32],[3840,31,3293,33],[3841,4,3294,4],[3842,4,3295,4,"render"],[3842,10,3295,10,"render"],[3842,11,3295,11,"container"],[3842,20,3295,20],[3842,22,3295,22,"parameters"],[3842,32,3295,32],[3842,34,3295,34],[3843,6,3296,8],[3843,12,3296,14,"id"],[3843,14,3296,16],[3843,17,3296,19],[3843,21,3296,23],[3843,22,3296,24,"counter"],[3843,29,3296,31],[3844,6,3297,8],[3844,10,3297,12],[3844,11,3297,13,"_widgets"],[3844,19,3297,21],[3844,20,3297,22,"set"],[3844,23,3297,25],[3844,24,3297,26,"id"],[3844,26,3297,28],[3844,28,3297,30],[3844,32,3297,34,"MockWidget"],[3844,42,3297,44],[3844,43,3297,45,"container"],[3844,52,3297,54],[3844,54,3297,56],[3844,58,3297,60],[3844,59,3297,61,"auth"],[3844,63,3297,65],[3844,64,3297,66,"name"],[3844,68,3297,70],[3844,70,3297,72,"parameters"],[3844,80,3297,82],[3844,84,3297,86],[3844,85,3297,87],[3844,86,3297,88],[3844,87,3297,89],[3844,88,3297,90],[3845,6,3298,8],[3845,10,3298,12],[3845,11,3298,13,"counter"],[3845,18,3298,20],[3845,20,3298,22],[3846,6,3299,8],[3846,13,3299,15,"id"],[3846,15,3299,17],[3847,4,3300,4],[3848,4,3301,4,"reset"],[3848,9,3301,9,"reset"],[3848,10,3301,10,"optWidgetId"],[3848,21,3301,21],[3848,23,3301,23],[3849,6,3302,8],[3849,12,3302,14,"id"],[3849,14,3302,16],[3849,17,3302,19,"optWidgetId"],[3849,28,3302,30],[3849,32,3302,34,"_WIDGET_ID_START"],[3849,48,3302,50],[3850,6,3303,8],[3850,11,3303,13],[3850,15,3303,17],[3850,16,3303,18,"_widgets"],[3850,24,3303,26],[3850,25,3303,27,"get"],[3850,28,3303,30],[3850,29,3303,31,"id"],[3850,31,3303,33],[3850,32,3303,34],[3850,34,3303,36,"delete"],[3850,40,3303,42],[3850,41,3303,43],[3850,42,3303,44],[3851,6,3304,8],[3851,10,3304,12],[3851,11,3304,13,"_widgets"],[3851,19,3304,21],[3851,20,3304,22,"delete"],[3851,26,3304,28],[3851,27,3304,29,"id"],[3851,29,3304,31],[3851,30,3304,32],[3852,4,3305,4],[3853,4,3306,4,"getResponse"],[3853,15,3306,15,"getResponse"],[3853,16,3306,16,"optWidgetId"],[3853,27,3306,27],[3853,29,3306,29],[3854,6,3307,8],[3854,12,3307,14,"id"],[3854,14,3307,16],[3854,17,3307,19,"optWidgetId"],[3854,28,3307,30],[3854,32,3307,34,"_WIDGET_ID_START"],[3854,48,3307,50],[3855,6,3308,8],[3855,13,3308,15],[3855,17,3308,19],[3855,18,3308,20,"_widgets"],[3855,26,3308,28],[3855,27,3308,29,"get"],[3855,30,3308,32],[3855,31,3308,33,"id"],[3855,33,3308,35],[3855,34,3308,36],[3855,36,3308,38,"getResponse"],[3855,47,3308,49],[3855,48,3308,50],[3855,49,3308,51],[3855,53,3308,55],[3855,55,3308,57],[3856,4,3309,4],[3857,4,3310,4],[3857,10,3310,10,"execute"],[3857,17,3310,17,"execute"],[3857,18,3310,18,"optWidgetId"],[3857,29,3310,29],[3857,31,3310,31],[3858,6,3311,8],[3858,12,3311,14,"id"],[3858,14,3311,16],[3858,17,3311,19,"optWidgetId"],[3858,28,3311,30],[3858,32,3311,34,"_WIDGET_ID_START"],[3858,48,3311,50],[3859,6,3312,8],[3859,11,3312,13],[3859,15,3312,17],[3859,16,3312,18,"_widgets"],[3859,24,3312,26],[3859,25,3312,27,"get"],[3859,28,3312,30],[3859,29,3312,31,"id"],[3859,31,3312,33],[3859,32,3312,34],[3859,34,3312,36,"execute"],[3859,41,3312,43],[3859,42,3312,44],[3859,43,3312,45],[3860,6,3313,8],[3860,13,3313,15],[3860,15,3313,17],[3861,4,3314,4],[3862,2,3315,0],[3863,2,3316,0],[3863,8,3316,6,"MockGreCAPTCHATopLevel"],[3863,30,3316,28],[3863,31,3316,29],[3864,4,3317,4,"constructor"],[3864,15,3317,15,"constructor"],[3864,16,3317,15],[3864,18,3317,18],[3865,6,3318,8],[3865,10,3318,12],[3865,11,3318,13,"enterprise"],[3865,21,3318,23],[3865,24,3318,26],[3865,28,3318,30,"MockGreCAPTCHA"],[3865,42,3318,44],[3865,43,3318,45],[3865,44,3318,46],[3866,4,3319,4],[3867,4,3320,4,"ready"],[3867,9,3320,9,"ready"],[3867,10,3320,10,"callback"],[3867,18,3320,18],[3867,20,3320,20],[3868,6,3321,8,"callback"],[3868,14,3321,16],[3868,15,3321,17],[3868,16,3321,18],[3869,4,3322,4],[3870,4,3323,4,"execute"],[3870,11,3323,11,"execute"],[3871,4,3324,4],[3872,4,3325,4,"_siteKey"],[3872,12,3325,12],[3872,14,3325,14,"_options"],[3872,22,3325,22],[3872,24,3325,24],[3873,6,3326,8],[3873,13,3326,15,"Promise"],[3873,20,3326,22],[3873,21,3326,23,"resolve"],[3873,28,3326,30],[3873,29,3326,31],[3873,36,3326,38],[3873,37,3326,39],[3874,4,3327,4],[3875,4,3328,4,"render"],[3875,10,3328,10,"render"],[3876,4,3329,4],[3877,4,3330,4,"_container"],[3877,14,3330,14],[3877,16,3330,16,"_parameters"],[3877,27,3330,27],[3877,29,3330,29],[3878,6,3331,8],[3878,13,3331,15],[3878,15,3331,17],[3879,4,3332,4],[3880,2,3333,0],[3881,2,3334,0],[3881,8,3334,6,"MockGreCAPTCHA"],[3881,22,3334,20],[3881,23,3334,21],[3882,4,3335,4,"ready"],[3882,9,3335,9,"ready"],[3882,10,3335,10,"callback"],[3882,18,3335,18],[3882,20,3335,20],[3883,6,3336,8,"callback"],[3883,14,3336,16],[3883,15,3336,17],[3883,16,3336,18],[3884,4,3337,4],[3885,4,3338,4,"execute"],[3885,11,3338,11,"execute"],[3886,4,3339,4],[3887,4,3340,4,"_siteKey"],[3887,12,3340,12],[3887,14,3340,14,"_options"],[3887,22,3340,22],[3887,24,3340,24],[3888,6,3341,8],[3888,13,3341,15,"Promise"],[3888,20,3341,22],[3888,21,3341,23,"resolve"],[3888,28,3341,30],[3888,29,3341,31],[3888,36,3341,38],[3888,37,3341,39],[3889,4,3342,4],[3890,4,3343,4,"render"],[3890,10,3343,10,"render"],[3891,4,3344,4],[3892,4,3345,4,"_container"],[3892,14,3345,14],[3892,16,3345,16,"_parameters"],[3892,27,3345,27],[3892,29,3345,29],[3893,6,3346,8],[3893,13,3346,15],[3893,15,3346,17],[3894,4,3347,4],[3895,2,3348,0],[3896,2,3349,0],[3896,8,3349,6,"MockWidget"],[3896,18,3349,16],[3896,19,3349,17],[3897,4,3350,4,"constructor"],[3897,15,3350,15,"constructor"],[3897,16,3350,16,"containerOrId"],[3897,29,3350,29],[3897,31,3350,31,"appName"],[3897,38,3350,38],[3897,40,3350,40,"params"],[3897,46,3350,46],[3897,48,3350,48],[3898,6,3351,8],[3898,10,3351,12],[3898,11,3351,13,"params"],[3898,17,3351,19],[3898,20,3351,22,"params"],[3898,26,3351,28],[3899,6,3352,8],[3899,10,3352,12],[3899,11,3352,13,"timerId"],[3899,18,3352,20],[3899,21,3352,23],[3899,25,3352,27],[3900,6,3353,8],[3900,10,3353,12],[3900,11,3353,13,"deleted"],[3900,18,3353,20],[3900,21,3353,23],[3900,26,3353,28],[3901,6,3354,8],[3901,10,3354,12],[3901,11,3354,13,"responseToken"],[3901,24,3354,26],[3901,27,3354,29],[3901,31,3354,33],[3902,6,3355,8],[3902,10,3355,12],[3902,11,3355,13,"clickHandler"],[3902,23,3355,25],[3902,26,3355,28],[3902,32,3355,34],[3903,8,3356,12],[3903,12,3356,16],[3903,13,3356,17,"execute"],[3903,20,3356,24],[3903,21,3356,25],[3903,22,3356,26],[3904,6,3357,8],[3904,7,3357,9],[3905,6,3358,8],[3905,12,3358,14,"container"],[3905,21,3358,23],[3905,24,3358,26],[3905,31,3358,33,"containerOrId"],[3905,44,3358,46],[3905,49,3358,51],[3905,57,3358,59],[3905,60,3359,14,"document"],[3905,68,3359,22],[3905,69,3359,23,"getElementById"],[3905,83,3359,37],[3905,84,3359,38,"containerOrId"],[3905,97,3359,51],[3905,98,3359,52],[3905,101,3360,14,"containerOrId"],[3905,114,3360,27],[3906,6,3361,8,"_assert"],[3906,13,3361,15],[3906,14,3361,16,"container"],[3906,23,3361,25],[3906,25,3361,27],[3906,41,3361,43],[3906,42,3361,44],[3906,78,3361,80],[3907,8,3361,82,"appName"],[3908,6,3361,90],[3908,7,3361,91],[3908,8,3361,92],[3909,6,3362,8],[3909,10,3362,12],[3909,11,3362,13,"container"],[3909,20,3362,22],[3909,23,3362,25,"container"],[3909,32,3362,34],[3910,6,3363,8],[3910,10,3363,12],[3910,11,3363,13,"isVisible"],[3910,20,3363,22],[3910,23,3363,25],[3910,27,3363,29],[3910,28,3363,30,"params"],[3910,34,3363,36],[3910,35,3363,37,"size"],[3910,39,3363,41],[3910,44,3363,46],[3910,55,3363,57],[3911,6,3364,8],[3911,10,3364,12],[3911,14,3364,16],[3911,15,3364,17,"isVisible"],[3911,24,3364,26],[3911,26,3364,28],[3912,8,3365,12],[3912,12,3365,16],[3912,13,3365,17,"execute"],[3912,20,3365,24],[3912,21,3365,25],[3912,22,3365,26],[3913,6,3366,8],[3913,7,3366,9],[3913,13,3367,13],[3914,8,3368,12],[3914,12,3368,16],[3914,13,3368,17,"container"],[3914,22,3368,26],[3914,23,3368,27,"addEventListener"],[3914,39,3368,43],[3914,40,3368,44],[3914,47,3368,51],[3914,49,3368,53],[3914,53,3368,57],[3914,54,3368,58,"clickHandler"],[3914,66,3368,70],[3914,67,3368,71],[3915,6,3369,8],[3916,4,3370,4],[3917,4,3371,4,"getResponse"],[3917,15,3371,15,"getResponse"],[3917,16,3371,15],[3917,18,3371,18],[3918,6,3372,8],[3918,10,3372,12],[3918,11,3372,13,"checkIfDeleted"],[3918,25,3372,27],[3918,26,3372,28],[3918,27,3372,29],[3919,6,3373,8],[3919,13,3373,15],[3919,17,3373,19],[3919,18,3373,20,"responseToken"],[3919,31,3373,33],[3920,4,3374,4],[3921,4,3375,4,"delete"],[3921,10,3375,10,"delete"],[3921,11,3375,10],[3921,13,3375,13],[3922,6,3376,8],[3922,10,3376,12],[3922,11,3376,13,"checkIfDeleted"],[3922,25,3376,27],[3922,26,3376,28],[3922,27,3376,29],[3923,6,3377,8],[3923,10,3377,12],[3923,11,3377,13,"deleted"],[3923,18,3377,20],[3923,21,3377,23],[3923,25,3377,27],[3924,6,3378,8],[3924,10,3378,12],[3924,14,3378,16],[3924,15,3378,17,"timerId"],[3924,22,3378,24],[3924,24,3378,26],[3925,8,3379,12,"clearTimeout"],[3925,20,3379,24],[3925,21,3379,25],[3925,25,3379,29],[3925,26,3379,30,"timerId"],[3925,33,3379,37],[3925,34,3379,38],[3926,8,3380,12],[3926,12,3380,16],[3926,13,3380,17,"timerId"],[3926,20,3380,24],[3926,23,3380,27],[3926,27,3380,31],[3927,6,3381,8],[3928,6,3382,8],[3928,10,3382,12],[3928,11,3382,13,"container"],[3928,20,3382,22],[3928,21,3382,23,"removeEventListener"],[3928,40,3382,42],[3928,41,3382,43],[3928,48,3382,50],[3928,50,3382,52],[3928,54,3382,56],[3928,55,3382,57,"clickHandler"],[3928,67,3382,69],[3928,68,3382,70],[3929,4,3383,4],[3930,4,3384,4,"execute"],[3930,11,3384,11,"execute"],[3930,12,3384,11],[3930,14,3384,14],[3931,6,3385,8],[3931,10,3385,12],[3931,11,3385,13,"checkIfDeleted"],[3931,25,3385,27],[3931,26,3385,28],[3931,27,3385,29],[3932,6,3386,8],[3932,10,3386,12],[3932,14,3386,16],[3932,15,3386,17,"timerId"],[3932,22,3386,24],[3932,24,3386,26],[3933,8,3387,12],[3934,6,3388,8],[3935,6,3389,8],[3935,10,3389,12],[3935,11,3389,13,"timerId"],[3935,18,3389,20],[3935,21,3389,23,"window"],[3935,27,3389,29],[3935,28,3389,30,"setTimeout"],[3935,38,3389,40],[3935,39,3389,41],[3935,45,3389,47],[3936,8,3390,12],[3936,12,3390,16],[3936,13,3390,17,"responseToken"],[3936,26,3390,30],[3936,29,3390,33,"generateRandomAlphaNumericString"],[3936,61,3390,65],[3936,62,3390,66],[3936,64,3390,68],[3936,65,3390,69],[3937,8,3391,12],[3937,14,3391,18],[3938,10,3391,20,"callback"],[3938,18,3391,28],[3939,10,3391,30],[3939,28,3391,48],[3939,30,3391,50,"expiredCallback"],[3940,8,3391,66],[3940,9,3391,67],[3940,12,3391,70],[3940,16,3391,74],[3940,17,3391,75,"params"],[3940,23,3391,81],[3941,8,3392,12],[3941,12,3392,16,"callback"],[3941,20,3392,24],[3941,22,3392,26],[3942,10,3393,16],[3942,14,3393,20],[3943,12,3394,20,"callback"],[3943,20,3394,28],[3943,21,3394,29],[3943,25,3394,33],[3943,26,3394,34,"responseToken"],[3943,39,3394,47],[3943,40,3394,48],[3944,10,3395,16],[3944,11,3395,17],[3944,12,3396,16],[3944,19,3396,23,"e"],[3944,20,3396,24],[3944,22,3396,26],[3944,23,3396,28],[3945,8,3397,12],[3946,8,3398,12],[3946,12,3398,16],[3946,13,3398,17,"timerId"],[3946,20,3398,24],[3946,23,3398,27,"window"],[3946,29,3398,33],[3946,30,3398,34,"setTimeout"],[3946,40,3398,44],[3946,41,3398,45],[3946,47,3398,51],[3947,10,3399,16],[3947,14,3399,20],[3947,15,3399,21,"timerId"],[3947,22,3399,28],[3947,25,3399,31],[3947,29,3399,35],[3948,10,3400,16],[3948,14,3400,20],[3948,15,3400,21,"responseToken"],[3948,28,3400,34],[3948,31,3400,37],[3948,35,3400,41],[3949,10,3401,16],[3949,14,3401,20,"expiredCallback"],[3949,29,3401,35],[3949,31,3401,37],[3950,12,3402,20],[3950,16,3402,24],[3951,14,3403,24,"expiredCallback"],[3951,29,3403,39],[3951,30,3403,40],[3951,31,3403,41],[3952,12,3404,20],[3952,13,3404,21],[3952,14,3405,20],[3952,21,3405,27,"e"],[3952,22,3405,28],[3952,24,3405,30],[3952,25,3405,32],[3953,10,3406,16],[3954,10,3407,16],[3954,14,3407,20],[3954,18,3407,24],[3954,19,3407,25,"isVisible"],[3954,28,3407,34],[3954,30,3407,36],[3955,12,3408,20],[3955,16,3408,24],[3955,17,3408,25,"execute"],[3955,24,3408,32],[3955,25,3408,33],[3955,26,3408,34],[3956,10,3409,16],[3957,8,3410,12],[3957,9,3410,13],[3957,11,3410,15,"_EXPIRATION_TIME_MS"],[3957,30,3410,34],[3957,31,3410,35],[3958,6,3411,8],[3958,7,3411,9],[3958,9,3411,11,"_SOLVE_TIME_MS"],[3958,23,3411,25],[3958,24,3411,26],[3959,4,3412,4],[3960,4,3413,4,"checkIfDeleted"],[3960,18,3413,18,"checkIfDeleted"],[3960,19,3413,18],[3960,21,3413,21],[3961,6,3414,8],[3961,10,3414,12],[3961,14,3414,16],[3961,15,3414,17,"deleted"],[3961,22,3414,24],[3961,24,3414,26],[3962,8,3415,12],[3962,14,3415,18],[3962,18,3415,22,"Error"],[3962,23,3415,27],[3962,24,3415,28],[3962,61,3415,65],[3962,62,3415,66],[3963,6,3416,8],[3964,4,3417,4],[3965,2,3418,0],[3966,2,3419,0],[3966,11,3419,9,"generateRandomAlphaNumericString"],[3966,43,3419,41,"generateRandomAlphaNumericString"],[3966,44,3419,42,"len"],[3966,47,3419,45],[3966,49,3419,47],[3967,4,3420,4],[3967,10,3420,10,"chars"],[3967,15,3420,15],[3967,18,3420,18],[3967,20,3420,20],[3968,4,3421,4],[3968,10,3421,10,"allowedChars"],[3968,22,3421,22],[3968,25,3421,25],[3968,89,3421,89],[3969,4,3422,4],[3969,9,3422,9],[3969,13,3422,13,"i"],[3969,14,3422,14],[3969,17,3422,17],[3969,18,3422,18],[3969,20,3422,20,"i"],[3969,21,3422,21],[3969,24,3422,24,"len"],[3969,27,3422,27],[3969,29,3422,29,"i"],[3969,30,3422,30],[3969,32,3422,32],[3969,34,3422,34],[3970,6,3423,8,"chars"],[3970,11,3423,13],[3970,12,3423,14,"push"],[3970,16,3423,18],[3970,17,3423,19,"allowedChars"],[3970,29,3423,31],[3970,30,3423,32,"charAt"],[3970,36,3423,38],[3970,37,3423,39,"Math"],[3970,41,3423,43],[3970,42,3423,44,"floor"],[3970,47,3423,49],[3970,48,3423,50,"Math"],[3970,52,3423,54],[3970,53,3423,55,"random"],[3970,59,3423,61],[3970,60,3423,62],[3970,61,3423,63],[3970,64,3423,66,"allowedChars"],[3970,76,3423,78],[3970,77,3423,79,"length"],[3970,83,3423,85],[3970,84,3423,86],[3970,85,3423,87],[3970,86,3423,88],[3971,4,3424,4],[3972,4,3425,4],[3972,11,3425,11,"chars"],[3972,16,3425,16],[3972,17,3425,17,"join"],[3972,21,3425,21],[3972,22,3425,22],[3972,24,3425,24],[3972,25,3425,25],[3973,2,3426,0],[3975,2,3428,0],[3976,2,3429,0],[3976,8,3429,6,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3976,42,3429,40],[3976,45,3429,43],[3976,67,3429,65],[3977,2,3430,0],[3977,8,3430,6,"FAKE_TOKEN"],[3977,18,3430,16],[3977,21,3430,19],[3977,35,3430,33],[3978,2,3431,0],[3978,8,3431,6,"RecaptchaEnterpriseVerifier"],[3978,35,3431,33],[3978,36,3431,34],[3979,4,3432,4],[3980,0,3433,0],[3981,0,3434,0],[3982,0,3435,0],[3983,0,3436,0],[3984,4,3437,4,"constructor"],[3984,15,3437,15,"constructor"],[3984,16,3437,16,"authExtern"],[3984,26,3437,26],[3984,28,3437,28],[3985,6,3438,8],[3986,0,3439,0],[3987,0,3440,0],[3988,6,3441,8],[3988,10,3441,12],[3988,11,3441,13,"type"],[3988,15,3441,17],[3988,18,3441,20,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3988,52,3441,54],[3989,6,3442,8],[3989,10,3442,12],[3989,11,3442,13,"auth"],[3989,15,3442,17],[3989,18,3442,20,"_castAuth"],[3989,27,3442,29],[3989,28,3442,30,"authExtern"],[3989,38,3442,40],[3989,39,3442,41],[3990,4,3443,4],[3991,4,3444,4],[3992,0,3445,0],[3993,0,3446,0],[3994,0,3447,0],[3995,0,3448,0],[3996,4,3449,4],[3996,10,3449,10,"verify"],[3996,16,3449,16,"verify"],[3996,17,3449,17,"action"],[3996,23,3449,23],[3996,26,3449,26],[3996,34,3449,34],[3996,36,3449,36,"forceRefresh"],[3996,48,3449,48],[3996,51,3449,51],[3996,56,3449,56],[3996,58,3449,58],[3997,6,3450,8],[3997,21,3450,23,"retrieveSiteKey"],[3997,36,3450,38,"retrieveSiteKey"],[3997,37,3450,39,"auth"],[3997,41,3450,43],[3997,43,3450,45],[3998,8,3451,12],[3998,12,3451,16],[3998,13,3451,17,"forceRefresh"],[3998,25,3451,29],[3998,27,3451,31],[3999,10,3452,16],[3999,14,3452,20,"auth"],[3999,18,3452,24],[3999,19,3452,25,"tenantId"],[3999,27,3452,33],[3999,31,3452,37],[3999,35,3452,41],[3999,39,3452,45,"auth"],[3999,43,3452,49],[3999,44,3452,50,"_agentRecaptchaConfig"],[3999,65,3452,71],[3999,69,3452,75],[3999,73,3452,79],[3999,75,3452,81],[4000,12,3453,20],[4000,19,3453,27,"auth"],[4000,23,3453,31],[4000,24,3453,32,"_agentRecaptchaConfig"],[4000,45,3453,53],[4000,46,3453,54,"siteKey"],[4000,53,3453,61],[4001,10,3454,16],[4002,10,3455,16],[4002,14,3455,20,"auth"],[4002,18,3455,24],[4002,19,3455,25,"tenantId"],[4002,27,3455,33],[4002,31,3455,37],[4002,35,3455,41],[4002,39,3456,20,"auth"],[4002,43,3456,24],[4002,44,3456,25,"_tenantRecaptchaConfigs"],[4002,67,3456,48],[4002,68,3456,49,"auth"],[4002,72,3456,53],[4002,73,3456,54,"tenantId"],[4002,81,3456,62],[4002,82,3456,63],[4002,87,3456,68,"undefined"],[4002,96,3456,77],[4002,98,3456,79],[4003,12,3457,20],[4003,19,3457,27,"auth"],[4003,23,3457,31],[4003,24,3457,32,"_tenantRecaptchaConfigs"],[4003,47,3457,55],[4003,48,3457,56,"auth"],[4003,52,3457,60],[4003,53,3457,61,"tenantId"],[4003,61,3457,69],[4003,62,3457,70],[4003,63,3457,71,"siteKey"],[4003,70,3457,78],[4004,10,3458,16],[4005,8,3459,12],[4006,8,3460,12],[4006,15,3460,19],[4006,19,3460,23,"Promise"],[4006,26,3460,30],[4006,27,3460,31],[4006,34,3460,38,"resolve"],[4006,41,3460,45],[4006,43,3460,47,"reject"],[4006,49,3460,53],[4006,54,3460,58],[4007,10,3461,16,"getRecaptchaConfig"],[4007,28,3461,34],[4007,29,3461,35,"auth"],[4007,33,3461,39],[4007,35,3461,41],[4008,12,3462,20,"clientType"],[4008,22,3462,30],[4008,24,3462,32],[4008,41,3462,49],[4008,42,3462,50],[4009,12,3463,20,"version"],[4009,19,3463,27],[4009,21,3463,29],[4009,43,3463,51],[4009,44,3463,52],[4010,10,3464,16],[4010,11,3464,17],[4010,12,3464,18],[4010,13,3465,21,"then"],[4010,17,3465,25],[4010,18,3465,26,"response"],[4010,26,3465,34],[4010,30,3465,38],[4011,12,3466,20],[4011,16,3466,24,"response"],[4011,24,3466,32],[4011,25,3466,33,"recaptchaKey"],[4011,37,3466,45],[4011,42,3466,50,"undefined"],[4011,51,3466,59],[4011,53,3466,61],[4012,14,3467,24,"reject"],[4012,20,3467,30],[4012,21,3467,31],[4012,25,3467,35,"Error"],[4012,30,3467,40],[4012,31,3467,41],[4012,72,3467,82],[4012,73,3467,83],[4012,74,3467,84],[4013,12,3468,20],[4013,13,3468,21],[4013,19,3469,25],[4014,14,3470,24],[4014,20,3470,30,"config"],[4014,26,3470,36],[4014,29,3470,39],[4014,33,3470,43,"RecaptchaConfig"],[4014,48,3470,58],[4014,49,3470,59,"response"],[4014,57,3470,67],[4014,58,3470,68],[4015,14,3471,24],[4015,18,3471,28,"auth"],[4015,22,3471,32],[4015,23,3471,33,"tenantId"],[4015,31,3471,41],[4015,35,3471,45],[4015,39,3471,49],[4015,41,3471,51],[4016,16,3472,28,"auth"],[4016,20,3472,32],[4016,21,3472,33,"_agentRecaptchaConfig"],[4016,42,3472,54],[4016,45,3472,57,"config"],[4016,51,3472,63],[4017,14,3473,24],[4017,15,3473,25],[4017,21,3474,29],[4018,16,3475,28,"auth"],[4018,20,3475,32],[4018,21,3475,33,"_tenantRecaptchaConfigs"],[4018,44,3475,56],[4018,45,3475,57,"auth"],[4018,49,3475,61],[4018,50,3475,62,"tenantId"],[4018,58,3475,70],[4018,59,3475,71],[4018,62,3475,74,"config"],[4018,68,3475,80],[4019,14,3476,24],[4020,14,3477,24],[4020,21,3477,31,"resolve"],[4020,28,3477,38],[4020,29,3477,39,"config"],[4020,35,3477,45],[4020,36,3477,46,"siteKey"],[4020,43,3477,53],[4020,44,3477,54],[4021,12,3478,20],[4022,10,3479,16],[4022,11,3479,17],[4022,12,3479,18],[4022,13,3480,21,"catch"],[4022,18,3480,26],[4022,19,3480,27,"error"],[4022,24,3480,32],[4022,28,3480,36],[4023,12,3481,20,"reject"],[4023,18,3481,26],[4023,19,3481,27,"error"],[4023,24,3481,32],[4023,25,3481,33],[4024,10,3482,16],[4024,11,3482,17],[4024,12,3482,18],[4025,8,3483,12],[4025,9,3483,13],[4025,10,3483,14],[4026,6,3484,8],[4027,6,3485,8],[4027,15,3485,17,"retrieveRecaptchaToken"],[4027,37,3485,39,"retrieveRecaptchaToken"],[4027,38,3485,40,"siteKey"],[4027,45,3485,47],[4027,47,3485,49,"resolve"],[4027,54,3485,56],[4027,56,3485,58,"reject"],[4027,62,3485,64],[4027,64,3485,66],[4028,8,3486,12],[4028,14,3486,18,"grecaptcha"],[4028,24,3486,28],[4028,27,3486,31,"window"],[4028,33,3486,37],[4028,34,3486,38,"grecaptcha"],[4028,44,3486,48],[4029,8,3487,12],[4029,12,3487,16,"isEnterprise"],[4029,24,3487,28],[4029,25,3487,29,"grecaptcha"],[4029,35,3487,39],[4029,36,3487,40],[4029,38,3487,42],[4030,10,3488,16,"grecaptcha"],[4030,20,3488,26],[4030,21,3488,27,"enterprise"],[4030,31,3488,37],[4030,32,3488,38,"ready"],[4030,37,3488,43],[4030,38,3488,44],[4030,44,3488,50],[4031,12,3489,20,"grecaptcha"],[4031,22,3489,30],[4031,23,3489,31,"enterprise"],[4031,33,3489,41],[4031,34,3490,25,"execute"],[4031,41,3490,32],[4031,42,3490,33,"siteKey"],[4031,49,3490,40],[4031,51,3490,42],[4032,14,3490,44,"action"],[4033,12,3490,51],[4033,13,3490,52],[4033,14,3490,53],[4033,15,3491,25,"then"],[4033,19,3491,29],[4033,20,3491,30,"token"],[4033,25,3491,35],[4033,29,3491,39],[4034,14,3492,24,"resolve"],[4034,21,3492,31],[4034,22,3492,32,"token"],[4034,27,3492,37],[4034,28,3492,38],[4035,12,3493,20],[4035,13,3493,21],[4035,14,3493,22],[4035,15,3494,25,"catch"],[4035,20,3494,30],[4035,21,3494,31],[4035,27,3494,37],[4036,14,3495,24,"resolve"],[4036,21,3495,31],[4036,22,3495,32,"FAKE_TOKEN"],[4036,32,3495,42],[4036,33,3495,43],[4037,12,3496,20],[4037,13,3496,21],[4037,14,3496,22],[4038,10,3497,16],[4038,11,3497,17],[4038,12,3497,18],[4039,8,3498,12],[4039,9,3498,13],[4039,15,3499,17],[4040,10,3500,16,"reject"],[4040,16,3500,22],[4040,17,3500,23,"Error"],[4040,22,3500,28],[4040,23,3500,29],[4040,63,3500,69],[4040,64,3500,70],[4040,65,3500,71],[4041,8,3501,12],[4042,6,3502,8],[4043,6,3503,8],[4044,6,3504,8],[4044,10,3504,12],[4044,14,3504,16],[4044,15,3504,17,"auth"],[4044,19,3504,21],[4044,20,3504,22,"settings"],[4044,28,3504,30],[4044,29,3504,31,"appVerificationDisabledForTesting"],[4044,62,3504,64],[4044,64,3504,66],[4045,8,3505,12],[4045,14,3505,18,"mockRecaptcha"],[4045,27,3505,31],[4045,30,3505,34],[4045,34,3505,38,"MockGreCAPTCHATopLevel"],[4045,56,3505,60],[4045,57,3505,61],[4045,58,3505,62],[4046,8,3506,12],[4046,15,3506,19,"mockRecaptcha"],[4046,28,3506,32],[4046,29,3506,33,"execute"],[4046,36,3506,40],[4046,37,3506,41],[4046,46,3506,50],[4046,48,3506,52],[4047,10,3506,54,"action"],[4047,16,3506,60],[4047,18,3506,62],[4048,8,3506,71],[4048,9,3506,72],[4048,10,3506,73],[4049,6,3507,8],[4050,6,3508,8],[4050,13,3508,15],[4050,17,3508,19,"Promise"],[4050,24,3508,26],[4050,25,3508,27],[4050,26,3508,28,"resolve"],[4050,33,3508,35],[4050,35,3508,37,"reject"],[4050,41,3508,43],[4050,46,3508,48],[4051,8,3509,12,"retrieveSiteKey"],[4051,23,3509,27],[4051,24,3509,28],[4051,28,3509,32],[4051,29,3509,33,"auth"],[4051,33,3509,37],[4051,34,3509,38],[4051,35,3510,17,"then"],[4051,39,3510,21],[4051,40,3510,22,"siteKey"],[4051,47,3510,29],[4051,51,3510,33],[4052,10,3511,16],[4052,14,3511,20],[4052,15,3511,21,"forceRefresh"],[4052,27,3511,33],[4052,31,3511,37,"isEnterprise"],[4052,43,3511,49],[4052,44,3511,50,"window"],[4052,50,3511,56],[4052,51,3511,57,"grecaptcha"],[4052,61,3511,67],[4052,62,3511,68],[4052,64,3511,70],[4053,12,3512,20,"retrieveRecaptchaToken"],[4053,34,3512,42],[4053,35,3512,43,"siteKey"],[4053,42,3512,50],[4053,44,3512,52,"resolve"],[4053,51,3512,59],[4053,53,3512,61,"reject"],[4053,59,3512,67],[4053,60,3512,68],[4054,10,3513,16],[4054,11,3513,17],[4054,17,3514,21],[4055,12,3515,20],[4055,16,3515,24],[4055,23,3515,31,"window"],[4055,29,3515,37],[4055,34,3515,42],[4055,45,3515,53],[4055,47,3515,55],[4056,14,3516,24,"reject"],[4056,20,3516,30],[4056,21,3516,31],[4056,25,3516,35,"Error"],[4056,30,3516,40],[4056,31,3516,41],[4056,79,3516,89],[4056,80,3516,90],[4056,81,3516,91],[4057,14,3517,24],[4058,12,3518,20],[4059,12,3519,20],[4059,16,3519,24,"url"],[4059,19,3519,27],[4059,22,3519,30,"_recaptchaEnterpriseScriptUrl"],[4059,51,3519,59],[4059,52,3519,60],[4059,53,3519,61],[4060,12,3520,20],[4060,16,3520,24,"url"],[4060,19,3520,27],[4060,20,3520,28,"length"],[4060,26,3520,34],[4060,31,3520,39],[4060,32,3520,40],[4060,34,3520,42],[4061,14,3521,24,"url"],[4061,17,3521,27],[4061,21,3521,31,"siteKey"],[4061,28,3521,38],[4062,12,3522,20],[4063,12,3523,20,"_loadJS"],[4063,19,3523,27],[4063,20,3523,28,"url"],[4063,23,3523,31],[4063,24,3523,32],[4063,25,3524,25,"then"],[4063,29,3524,29],[4063,30,3524,30],[4063,36,3524,36],[4064,14,3525,24,"retrieveRecaptchaToken"],[4064,36,3525,46],[4064,37,3525,47,"siteKey"],[4064,44,3525,54],[4064,46,3525,56,"resolve"],[4064,53,3525,63],[4064,55,3525,65,"reject"],[4064,61,3525,71],[4064,62,3525,72],[4065,12,3526,20],[4065,13,3526,21],[4065,14,3526,22],[4065,15,3527,25,"catch"],[4065,20,3527,30],[4065,21,3527,31,"error"],[4065,26,3527,36],[4065,30,3527,40],[4066,14,3528,24,"reject"],[4066,20,3528,30],[4066,21,3528,31,"error"],[4066,26,3528,36],[4066,27,3528,37],[4067,12,3529,20],[4067,13,3529,21],[4067,14,3529,22],[4068,10,3530,16],[4069,8,3531,12],[4069,9,3531,13],[4069,10,3531,14],[4069,11,3532,17,"catch"],[4069,16,3532,22],[4069,17,3532,23,"error"],[4069,22,3532,28],[4069,26,3532,32],[4070,10,3533,16,"reject"],[4070,16,3533,22],[4070,17,3533,23,"error"],[4070,22,3533,28],[4070,23,3533,29],[4071,8,3534,12],[4071,9,3534,13],[4071,10,3534,14],[4072,6,3535,8],[4072,7,3535,9],[4072,8,3535,10],[4073,4,3536,4],[4074,2,3537,0],[4075,2,3538,0],[4075,17,3538,15,"injectRecaptchaFields"],[4075,38,3538,36,"injectRecaptchaFields"],[4075,39,3538,37,"auth"],[4075,43,3538,41],[4075,45,3538,43,"request"],[4075,52,3538,50],[4075,54,3538,52,"action"],[4075,60,3538,58],[4075,62,3538,60,"isCaptchaResp"],[4075,75,3538,73],[4075,78,3538,76],[4075,83,3538,81],[4075,85,3538,83,"isFakeToken"],[4075,96,3538,94],[4075,99,3538,97],[4075,104,3538,102],[4075,106,3538,104],[4076,4,3539,4],[4076,10,3539,10,"verifier"],[4076,18,3539,18],[4076,21,3539,21],[4076,25,3539,25,"RecaptchaEnterpriseVerifier"],[4076,52,3539,52],[4076,53,3539,53,"auth"],[4076,57,3539,57],[4076,58,3539,58],[4077,4,3540,4],[4077,8,3540,8,"captchaResponse"],[4077,23,3540,23],[4078,4,3541,4],[4078,8,3541,8,"isFakeToken"],[4078,19,3541,19],[4078,21,3541,21],[4079,6,3542,8,"captchaResponse"],[4079,21,3542,23],[4079,24,3542,26,"FAKE_TOKEN"],[4079,34,3542,36],[4080,4,3543,4],[4080,5,3543,5],[4080,11,3544,9],[4081,6,3545,8],[4081,10,3545,12],[4082,8,3546,12,"captchaResponse"],[4082,23,3546,27],[4082,26,3546,30],[4082,32,3546,36,"verifier"],[4082,40,3546,44],[4082,41,3546,45,"verify"],[4082,47,3546,51],[4082,48,3546,52,"action"],[4082,54,3546,58],[4082,55,3546,59],[4083,6,3547,8],[4083,7,3547,9],[4083,8,3548,8],[4083,15,3548,15,"error"],[4083,20,3548,20],[4083,22,3548,22],[4084,8,3549,12,"captchaResponse"],[4084,23,3549,27],[4084,26,3549,30],[4084,32,3549,36,"verifier"],[4084,40,3549,44],[4084,41,3549,45,"verify"],[4084,47,3549,51],[4084,48,3549,52,"action"],[4084,54,3549,58],[4084,56,3549,60],[4084,60,3549,64],[4084,61,3549,65],[4085,6,3550,8],[4086,4,3551,4],[4087,4,3552,4],[4087,10,3552,10,"newRequest"],[4087,20,3552,20],[4087,23,3552,23],[4088,6,3552,25],[4088,9,3552,28,"request"],[4089,4,3552,36],[4089,5,3552,37],[4090,4,3553,4],[4090,8,3553,8,"action"],[4090,14,3553,14],[4090,19,3553,19],[4090,37,3553,37],[4090,38,3553,38],[4090,86,3554,8,"action"],[4090,92,3554,14],[4090,97,3554,19],[4090,111,3554,33],[4090,112,3554,34],[4090,154,3554,76],[4091,6,3555,8],[4091,10,3555,12],[4091,31,3555,33],[4091,35,3555,37,"newRequest"],[4091,45,3555,47],[4091,47,3555,49],[4092,8,3556,12],[4092,14,3556,18,"phoneNumber"],[4092,25,3556,29],[4092,28,3556,32,"newRequest"],[4092,38,3556,42],[4092,39,3556,43,"phoneEnrollmentInfo"],[4092,58,3556,62],[4092,59,3556,63,"phoneNumber"],[4092,70,3556,74],[4093,8,3557,12],[4093,14,3557,18,"recaptchaToken"],[4093,28,3557,32],[4093,31,3557,35,"newRequest"],[4093,41,3557,45],[4093,42,3557,46,"phoneEnrollmentInfo"],[4093,61,3557,65],[4093,62,3557,66,"recaptchaToken"],[4093,76,3557,80],[4094,8,3558,12,"Object"],[4094,14,3558,18],[4094,15,3558,19,"assign"],[4094,21,3558,25],[4094,22,3558,26,"newRequest"],[4094,32,3558,36],[4094,34,3558,38],[4095,10,3559,16],[4095,31,3559,37],[4095,33,3559,39],[4096,12,3560,20,"phoneNumber"],[4096,23,3560,31],[4097,12,3561,20,"recaptchaToken"],[4097,26,3561,34],[4098,12,3562,20,"captchaResponse"],[4098,27,3562,35],[4099,12,3563,20],[4099,24,3563,32],[4099,26,3563,34],[4099,43,3563,51],[4099,44,3563,52],[4100,12,3564,20],[4100,30,3564,38],[4100,32,3564,40],[4100,54,3564,62],[4100,55,3564,63],[4101,10,3565,16],[4102,8,3566,12],[4102,9,3566,13],[4102,10,3566,14],[4103,6,3567,8],[4103,7,3567,9],[4103,13,3568,13],[4103,17,3568,17],[4103,34,3568,34],[4103,38,3568,38,"newRequest"],[4103,48,3568,48],[4103,50,3568,50],[4104,8,3569,12],[4104,14,3569,18,"recaptchaToken"],[4104,28,3569,32],[4104,31,3569,35,"newRequest"],[4104,41,3569,45],[4104,42,3569,46,"phoneSignInInfo"],[4104,57,3569,61],[4104,58,3569,62,"recaptchaToken"],[4104,72,3569,76],[4105,8,3570,12,"Object"],[4105,14,3570,18],[4105,15,3570,19,"assign"],[4105,21,3570,25],[4105,22,3570,26,"newRequest"],[4105,32,3570,36],[4105,34,3570,38],[4106,10,3571,16],[4106,27,3571,33],[4106,29,3571,35],[4107,12,3572,20,"recaptchaToken"],[4107,26,3572,34],[4108,12,3573,20,"captchaResponse"],[4108,27,3573,35],[4109,12,3574,20],[4109,24,3574,32],[4109,26,3574,34],[4109,43,3574,51],[4109,44,3574,52],[4110,12,3575,20],[4110,30,3575,38],[4110,32,3575,40],[4110,54,3575,62],[4110,55,3575,63],[4111,10,3576,16],[4112,8,3577,12],[4112,9,3577,13],[4112,10,3577,14],[4113,6,3578,8],[4114,6,3579,8],[4114,13,3579,15,"newRequest"],[4114,23,3579,25],[4115,4,3580,4],[4116,4,3581,4],[4116,8,3581,8],[4116,9,3581,9,"isCaptchaResp"],[4116,22,3581,22],[4116,24,3581,24],[4117,6,3582,8,"Object"],[4117,12,3582,14],[4117,13,3582,15,"assign"],[4117,19,3582,21],[4117,20,3582,22,"newRequest"],[4117,30,3582,32],[4117,32,3582,34],[4118,8,3582,36,"captchaResponse"],[4119,6,3582,52],[4119,7,3582,53],[4119,8,3582,54],[4120,4,3583,4],[4120,5,3583,5],[4120,11,3584,9],[4121,6,3585,8,"Object"],[4121,12,3585,14],[4121,13,3585,15,"assign"],[4121,19,3585,21],[4121,20,3585,22,"newRequest"],[4121,30,3585,32],[4121,32,3585,34],[4122,8,3585,36],[4122,21,3585,49],[4122,23,3585,51,"captchaResponse"],[4123,6,3585,67],[4123,7,3585,68],[4123,8,3585,69],[4124,4,3586,4],[4125,4,3587,4,"Object"],[4125,10,3587,10],[4125,11,3587,11,"assign"],[4125,17,3587,17],[4125,18,3587,18,"newRequest"],[4125,28,3587,28],[4125,30,3587,30],[4126,6,3587,32],[4126,18,3587,44],[4126,20,3587,46],[4126,37,3587,63],[4126,38,3587,64],[4127,4,3587,94],[4127,5,3587,95],[4127,6,3587,96],[4128,4,3588,4,"Object"],[4128,10,3588,10],[4128,11,3588,11,"assign"],[4128,17,3588,17],[4128,18,3588,18,"newRequest"],[4128,28,3588,28],[4128,30,3588,30],[4129,6,3589,8],[4129,24,3589,26],[4129,26,3589,28],[4129,48,3589,50],[4129,49,3589,51],[4130,4,3590,4],[4130,5,3590,5],[4130,6,3590,6],[4131,4,3591,4],[4131,11,3591,11,"newRequest"],[4131,21,3591,21],[4132,2,3592,0],[4133,2,3593,0],[4133,17,3593,15,"handleRecaptchaFlow"],[4133,36,3593,34,"handleRecaptchaFlow"],[4133,37,3593,35,"authInstance"],[4133,49,3593,47],[4133,51,3593,49,"request"],[4133,58,3593,56],[4133,60,3593,58,"actionName"],[4133,70,3593,68],[4133,72,3593,70,"actionMethod"],[4133,84,3593,82],[4133,86,3593,84,"recaptchaAuthProvider"],[4133,107,3593,105],[4133,109,3593,107],[4134,4,3594,4],[4134,8,3594,8,"recaptchaAuthProvider"],[4134,29,3594,29],[4134,34,3594,34],[4134,59,3594,59],[4134,60,3594,60],[4134,113,3594,113],[4135,6,3595,8],[4135,10,3595,12,"authInstance"],[4135,22,3595,24],[4135,23,3596,13,"_getRecaptchaConfig"],[4135,42,3596,32],[4135,43,3596,33],[4135,44,3596,34],[4135,46,3597,14,"isProviderEnabled"],[4135,63,3597,31],[4135,64,3597,32],[4135,89,3597,57],[4135,90,3597,58],[4135,141,3597,109],[4135,142,3597,110],[4135,144,3597,112],[4136,8,3598,12],[4136,14,3598,18,"requestWithRecaptcha"],[4136,34,3598,38],[4136,37,3598,41],[4136,43,3598,47,"injectRecaptchaFields"],[4136,64,3598,68],[4136,65,3598,69,"authInstance"],[4136,77,3598,81],[4136,79,3598,83,"request"],[4136,86,3598,90],[4136,88,3598,92,"actionName"],[4136,98,3598,102],[4136,100,3598,104,"actionName"],[4136,110,3598,114],[4136,115,3598,119],[4136,127,3598,131],[4136,128,3598,132],[4136,166,3598,170],[4136,167,3598,171],[4137,8,3599,12],[4137,15,3599,19,"actionMethod"],[4137,27,3599,31],[4137,28,3599,32,"authInstance"],[4137,40,3599,44],[4137,42,3599,46,"requestWithRecaptcha"],[4137,62,3599,66],[4137,63,3599,67],[4138,6,3600,8],[4138,7,3600,9],[4138,13,3601,13],[4139,8,3602,12],[4139,15,3602,19,"actionMethod"],[4139,27,3602,31],[4139,28,3602,32,"authInstance"],[4139,40,3602,44],[4139,42,3602,46,"request"],[4139,49,3602,53],[4139,50,3602,54],[4139,51,3602,55,"catch"],[4139,56,3602,60],[4139,57,3602,61],[4139,63,3602,68,"error"],[4139,68,3602,73],[4139,72,3602,78],[4140,10,3603,16],[4140,14,3603,20,"error"],[4140,19,3603,25],[4140,20,3603,26,"code"],[4140,24,3603,30],[4140,29,3603,35],[4140,37,3603,43],[4140,62,3603,68],[4140,63,3603,69],[4140,108,3603,114],[4140,110,3603,116],[4141,12,3604,20,"console"],[4141,19,3604,27],[4141,20,3604,28,"log"],[4141,23,3604,31],[4141,24,3604,32],[4141,27,3604,35,"actionName"],[4141,37,3604,45],[4141,163,3604,171],[4141,164,3604,172],[4142,12,3605,20],[4142,18,3605,26,"requestWithRecaptcha"],[4142,38,3605,46],[4142,41,3605,49],[4142,47,3605,55,"injectRecaptchaFields"],[4142,68,3605,76],[4142,69,3605,77,"authInstance"],[4142,81,3605,89],[4142,83,3605,91,"request"],[4142,90,3605,98],[4142,92,3605,100,"actionName"],[4142,102,3605,110],[4142,104,3605,112,"actionName"],[4142,114,3605,122],[4142,119,3605,127],[4142,131,3605,139],[4142,132,3605,140],[4142,170,3605,178],[4142,171,3605,179],[4143,12,3606,20],[4143,19,3606,27,"actionMethod"],[4143,31,3606,39],[4143,32,3606,40,"authInstance"],[4143,44,3606,52],[4143,46,3606,54,"requestWithRecaptcha"],[4143,66,3606,74],[4143,67,3606,75],[4144,10,3607,16],[4144,11,3607,17],[4144,17,3608,21],[4145,12,3609,20],[4145,19,3609,27,"Promise"],[4145,26,3609,34],[4145,27,3609,35,"reject"],[4145,33,3609,41],[4145,34,3609,42,"error"],[4145,39,3609,47],[4145,40,3609,48],[4146,10,3610,16],[4147,8,3611,12],[4147,9,3611,13],[4147,10,3611,14],[4148,6,3612,8],[4149,4,3613,4],[4149,5,3613,5],[4149,11,3614,9],[4149,15,3614,13,"recaptchaAuthProvider"],[4149,36,3614,34],[4149,41,3614,39],[4149,57,3614,55],[4149,58,3614,56],[4149,102,3614,100],[4150,6,3615,8],[4150,10,3615,12,"authInstance"],[4150,22,3615,24],[4150,23,3616,13,"_getRecaptchaConfig"],[4150,42,3616,32],[4150,43,3616,33],[4150,44,3616,34],[4150,46,3617,14,"isProviderEnabled"],[4150,63,3617,31],[4150,64,3617,32],[4150,80,3617,48],[4150,81,3617,49],[4150,123,3617,91],[4150,124,3617,92],[4150,126,3617,94],[4151,8,3618,12],[4151,14,3618,18,"requestWithRecaptcha"],[4151,34,3618,38],[4151,37,3618,41],[4151,43,3618,47,"injectRecaptchaFields"],[4151,64,3618,68],[4151,65,3618,69,"authInstance"],[4151,77,3618,81],[4151,79,3618,83,"request"],[4151,86,3618,90],[4151,88,3618,92,"actionName"],[4151,98,3618,102],[4151,99,3618,103],[4152,8,3619,12],[4152,15,3619,19,"actionMethod"],[4152,27,3619,31],[4152,28,3619,32,"authInstance"],[4152,40,3619,44],[4152,42,3619,46,"requestWithRecaptcha"],[4152,62,3619,66],[4152,63,3619,67],[4152,64,3619,68,"catch"],[4152,69,3619,73],[4152,70,3619,74],[4152,76,3619,81,"error"],[4152,81,3619,86],[4152,85,3619,91],[4153,10,3620,16],[4153,14,3620,20,"authInstance"],[4153,26,3620,32],[4153,27,3621,21,"_getRecaptchaConfig"],[4153,46,3621,40],[4153,47,3621,41],[4153,48,3621,42],[4153,50,3622,22,"getProviderEnforcementState"],[4153,77,3622,49],[4153,78,3622,50],[4153,94,3622,66],[4153,95,3622,67],[4153,137,3622,109],[4153,138,3622,110],[4153,143,3622,115],[4153,150,3622,122],[4153,151,3622,123],[4153,181,3622,153],[4154,12,3623,20],[4155,12,3624,20],[4155,16,3624,24,"error"],[4155,21,3624,29],[4155,22,3624,30,"code"],[4155,26,3624,34],[4155,31,3624,39],[4155,39,3624,47],[4155,64,3624,72],[4155,65,3624,73],[4155,110,3624,118],[4155,114,3625,24,"error"],[4155,119,3625,29],[4155,120,3625,30,"code"],[4155,124,3625,34],[4155,129,3625,39],[4155,137,3625,47],[4155,161,3625,71],[4155,162,3625,72],[4155,206,3625,116],[4155,208,3625,118],[4156,14,3626,24,"console"],[4156,21,3626,31],[4156,22,3626,32,"log"],[4156,25,3626,35],[4156,26,3626,36],[4156,136,3626,146,"actionName"],[4156,146,3626,156],[4156,154,3626,164],[4156,155,3626,165],[4157,14,3627,24],[4158,14,3628,24],[4159,14,3629,24],[4160,14,3630,24],[4160,20,3630,30,"requestWithRecaptchaFields"],[4160,46,3630,56],[4160,49,3630,59],[4160,55,3630,65,"injectRecaptchaFields"],[4160,76,3630,86],[4160,77,3630,87,"authInstance"],[4160,89,3630,99],[4160,91,3630,101,"request"],[4160,98,3630,108],[4160,100,3630,110,"actionName"],[4160,110,3630,120],[4160,112,3630,122],[4160,117,3630,127],[4161,14,3630,129],[4162,14,3631,24],[4162,18,3631,28],[4162,19,3631,29],[4163,14,3632,24],[4163,15,3632,25],[4164,14,3633,24],[4165,14,3634,24],[4165,21,3634,31,"actionMethod"],[4165,33,3634,43],[4165,34,3634,44,"authInstance"],[4165,46,3634,56],[4165,48,3634,58,"requestWithRecaptchaFields"],[4165,74,3634,84],[4165,75,3634,85],[4166,12,3635,20],[4167,10,3636,16],[4168,10,3637,16],[4169,10,3638,16],[4169,17,3638,23,"Promise"],[4169,24,3638,30],[4169,25,3638,31,"reject"],[4169,31,3638,37],[4169,32,3638,38,"error"],[4169,37,3638,43],[4169,38,3638,44],[4170,8,3639,12],[4170,9,3639,13],[4170,10,3639,14],[4171,6,3640,8],[4171,7,3640,9],[4171,13,3641,13],[4172,8,3642,12],[4173,8,3643,12],[4173,14,3643,18,"requestWithRecaptchaFields"],[4173,40,3643,44],[4173,43,3643,47],[4173,49,3643,53,"injectRecaptchaFields"],[4173,70,3643,74],[4173,71,3643,75,"authInstance"],[4173,83,3643,87],[4173,85,3643,89,"request"],[4173,92,3643,96],[4173,94,3643,98,"actionName"],[4173,104,3643,108],[4173,106,3643,110],[4173,111,3643,115],[4174,8,3643,117],[4175,8,3644,12],[4175,12,3644,16],[4175,13,3644,17],[4176,8,3645,12],[4176,9,3645,13],[4177,8,3646,12],[4178,8,3647,12],[4178,15,3647,19,"actionMethod"],[4178,27,3647,31],[4178,28,3647,32,"authInstance"],[4178,40,3647,44],[4178,42,3647,46,"requestWithRecaptchaFields"],[4178,68,3647,72],[4178,69,3647,73],[4179,6,3648,8],[4180,4,3649,4],[4180,5,3649,5],[4180,11,3650,9],[4181,6,3651,8],[4181,13,3651,15,"Promise"],[4181,20,3651,22],[4181,21,3651,23,"reject"],[4181,27,3651,29],[4181,28,3651,30,"recaptchaAuthProvider"],[4181,49,3651,51],[4181,52,3651,54],[4181,81,3651,83],[4181,82,3651,84],[4182,4,3652,4],[4183,2,3653,0],[4184,2,3654,0],[4184,17,3654,15,"_initializeRecaptchaConfig"],[4184,43,3654,41,"_initializeRecaptchaConfig"],[4184,44,3654,42,"auth"],[4184,48,3654,46],[4184,50,3654,48],[4185,4,3655,4],[4185,10,3655,10,"authInternal"],[4185,22,3655,22],[4185,25,3655,25,"_castAuth"],[4185,34,3655,34],[4185,35,3655,35,"auth"],[4185,39,3655,39],[4185,40,3655,40],[4186,4,3656,4],[4186,10,3656,10,"response"],[4186,18,3656,18],[4186,21,3656,21],[4186,27,3656,27,"getRecaptchaConfig"],[4186,45,3656,45],[4186,46,3656,46,"authInternal"],[4186,58,3656,58],[4186,60,3656,60],[4187,6,3657,8,"clientType"],[4187,16,3657,18],[4187,18,3657,20],[4187,35,3657,37],[4187,36,3657,38],[4188,6,3658,8,"version"],[4188,13,3658,15],[4188,15,3658,17],[4188,37,3658,39],[4188,38,3658,40],[4189,4,3659,4],[4189,5,3659,5],[4189,6,3659,6],[4190,4,3660,4],[4190,10,3660,10,"config"],[4190,16,3660,16],[4190,19,3660,19],[4190,23,3660,23,"RecaptchaConfig"],[4190,38,3660,38],[4190,39,3660,39,"response"],[4190,47,3660,47],[4190,48,3660,48],[4191,4,3661,4],[4191,8,3661,8,"authInternal"],[4191,20,3661,20],[4191,21,3661,21,"tenantId"],[4191,29,3661,29],[4191,33,3661,33],[4191,37,3661,37],[4191,39,3661,39],[4192,6,3662,8,"authInternal"],[4192,18,3662,20],[4192,19,3662,21,"_agentRecaptchaConfig"],[4192,40,3662,42],[4192,43,3662,45,"config"],[4192,49,3662,51],[4193,4,3663,4],[4193,5,3663,5],[4193,11,3664,9],[4194,6,3665,8,"authInternal"],[4194,18,3665,20],[4194,19,3665,21,"_tenantRecaptchaConfigs"],[4194,42,3665,44],[4194,43,3665,45,"authInternal"],[4194,55,3665,57],[4194,56,3665,58,"tenantId"],[4194,64,3665,66],[4194,65,3665,67],[4194,68,3665,70,"config"],[4194,74,3665,76],[4195,4,3666,4],[4196,4,3667,4],[4196,8,3667,8,"config"],[4196,14,3667,14],[4196,15,3667,15,"isAnyProviderEnabled"],[4196,35,3667,35],[4196,36,3667,36],[4196,37,3667,37],[4196,39,3667,39],[4197,6,3668,8],[4197,12,3668,14,"verifier"],[4197,20,3668,22],[4197,23,3668,25],[4197,27,3668,29,"RecaptchaEnterpriseVerifier"],[4197,54,3668,56],[4197,55,3668,57,"authInternal"],[4197,67,3668,69],[4197,68,3668,70],[4198,6,3669,8],[4198,11,3669,13,"verifier"],[4198,19,3669,21],[4198,20,3669,22,"verify"],[4198,26,3669,28],[4198,27,3669,29],[4198,28,3669,30],[4199,4,3670,4],[4200,2,3671,0],[4202,2,3673,0],[4203,0,3674,0],[4204,0,3675,0],[4205,0,3676,0],[4206,0,3677,0],[4207,0,3678,0],[4208,0,3679,0],[4209,0,3680,0],[4210,0,3681,0],[4211,0,3682,0],[4212,0,3683,0],[4213,0,3684,0],[4214,0,3685,0],[4215,0,3686,0],[4216,0,3687,0],[4217,0,3688,0],[4218,2,3689,0],[4219,0,3690,0],[4220,0,3691,0],[4221,0,3692,0],[4222,0,3693,0],[4223,0,3694,0],[4224,0,3695,0],[4225,0,3696,0],[4226,0,3697,0],[4227,0,3698,0],[4228,0,3699,0],[4229,0,3700,0],[4230,0,3701,0],[4231,0,3702,0],[4232,0,3703,0],[4233,0,3704,0],[4234,0,3705,0],[4235,0,3706,0],[4236,0,3707,0],[4237,0,3708,0],[4238,0,3709,0],[4239,0,3710,0],[4240,0,3711,0],[4241,0,3712,0],[4242,0,3713,0],[4243,2,3714,0],[4243,11,3714,9,"initializeAuth"],[4243,25,3714,23,"initializeAuth"],[4243,26,3714,24,"app"],[4243,29,3714,27],[4243,31,3714,29,"deps"],[4243,35,3714,33],[4243,37,3714,35],[4244,4,3715,4],[4244,10,3715,10,"provider"],[4244,18,3715,18],[4244,21,3715,21],[4244,25,3715,21,"_getProvider"],[4244,37,3715,33],[4244,38,3715,33,"_getProvider"],[4244,50,3715,33],[4244,52,3715,34,"app"],[4244,55,3715,37],[4244,57,3715,39],[4244,63,3715,45],[4244,64,3715,46],[4245,4,3716,4],[4245,8,3716,8,"provider"],[4245,16,3716,16],[4245,17,3716,17,"isInitialized"],[4245,30,3716,30],[4245,31,3716,31],[4245,32,3716,32],[4245,34,3716,34],[4246,6,3717,8],[4246,12,3717,14,"auth"],[4246,16,3717,18],[4246,19,3717,21,"provider"],[4246,27,3717,29],[4246,28,3717,30,"getImmediate"],[4246,40,3717,42],[4246,41,3717,43],[4246,42,3717,44],[4247,6,3718,8],[4247,12,3718,14,"initialOptions"],[4247,26,3718,28],[4247,29,3718,31,"provider"],[4247,37,3718,39],[4247,38,3718,40,"getOptions"],[4247,48,3718,50],[4247,49,3718,51],[4247,50,3718,52],[4248,6,3719,8],[4248,10,3719,12],[4248,14,3719,12,"deepEqual"],[4248,27,3719,21],[4248,28,3719,21,"deepEqual"],[4248,37,3719,21],[4248,39,3719,22,"initialOptions"],[4248,53,3719,36],[4248,55,3719,38,"deps"],[4248,59,3719,42],[4248,63,3719,46],[4248,64,3719,47],[4248,65,3719,48],[4248,66,3719,49],[4248,68,3719,51],[4249,8,3720,12],[4249,15,3720,19,"auth"],[4249,19,3720,23],[4250,6,3721,8],[4250,7,3721,9],[4250,13,3722,13],[4251,8,3723,12,"_fail"],[4251,13,3723,17],[4251,14,3723,18,"auth"],[4251,18,3723,22],[4251,20,3723,24],[4251,41,3723,45],[4251,42,3723,46],[4251,81,3723,85],[4251,82,3723,86],[4252,6,3724,8],[4253,4,3725,4],[4254,4,3726,4],[4254,10,3726,10,"auth"],[4254,14,3726,14],[4254,17,3726,17,"provider"],[4254,25,3726,25],[4254,26,3726,26,"initialize"],[4254,36,3726,36],[4254,37,3726,37],[4255,6,3726,39,"options"],[4255,13,3726,46],[4255,15,3726,48,"deps"],[4256,4,3726,53],[4256,5,3726,54],[4256,6,3726,55],[4257,4,3727,4],[4257,11,3727,11,"auth"],[4257,15,3727,15],[4258,2,3728,0],[4259,2,3729,0],[4259,11,3729,9,"_initializeAuthInstance"],[4259,34,3729,32,"_initializeAuthInstance"],[4259,35,3729,33,"auth"],[4259,39,3729,37],[4259,41,3729,39,"deps"],[4259,45,3729,43],[4259,47,3729,45],[4260,4,3730,4],[4260,10,3730,10,"persistence"],[4260,21,3730,21],[4260,24,3730,24,"deps"],[4260,28,3730,28],[4260,30,3730,30,"persistence"],[4260,41,3730,41],[4260,45,3730,45],[4260,47,3730,47],[4261,4,3731,4],[4261,10,3731,10,"hierarchy"],[4261,19,3731,19],[4261,22,3731,22],[4261,23,3731,23,"Array"],[4261,28,3731,28],[4261,29,3731,29,"isArray"],[4261,36,3731,36],[4261,37,3731,37,"persistence"],[4261,48,3731,48],[4261,49,3731,49],[4261,52,3731,52,"persistence"],[4261,63,3731,63],[4261,66,3731,66],[4261,67,3731,67,"persistence"],[4261,78,3731,78],[4261,79,3731,79],[4261,81,3731,81,"map"],[4261,84,3731,84],[4261,85,3731,85,"_getInstance"],[4261,97,3731,97],[4261,98,3731,98],[4262,4,3732,4],[4262,8,3732,8,"deps"],[4262,12,3732,12],[4262,14,3732,14,"errorMap"],[4262,22,3732,22],[4262,24,3732,24],[4263,6,3733,8,"auth"],[4263,10,3733,12],[4263,11,3733,13,"_updateErrorMap"],[4263,26,3733,28],[4263,27,3733,29,"deps"],[4263,31,3733,33],[4263,32,3733,34,"errorMap"],[4263,40,3733,42],[4263,41,3733,43],[4264,4,3734,4],[4265,4,3735,4],[4266,4,3736,4],[4267,4,3737,4],[4268,4,3738,4,"auth"],[4268,8,3738,8],[4268,9,3738,9,"_initializeWithPersistence"],[4268,35,3738,35],[4268,36,3738,36,"hierarchy"],[4268,45,3738,45],[4268,47,3738,47,"deps"],[4268,51,3738,51],[4268,53,3738,53,"popupRedirectResolver"],[4268,74,3738,74],[4268,75,3738,75],[4269,2,3739,0],[4271,2,3741,0],[4272,0,3742,0],[4273,0,3743,0],[4274,0,3744,0],[4275,0,3745,0],[4276,0,3746,0],[4277,0,3747,0],[4278,0,3748,0],[4279,0,3749,0],[4280,0,3750,0],[4281,0,3751,0],[4282,0,3752,0],[4283,0,3753,0],[4284,0,3754,0],[4285,0,3755,0],[4286,0,3756,0],[4287,0,3757,0],[4288,0,3758,0],[4289,0,3759,0],[4290,0,3760,0],[4291,0,3761,0],[4292,0,3762,0],[4293,2,3763,0],[4293,11,3763,9,"connectAuthEmulator"],[4293,30,3763,28,"connectAuthEmulator"],[4293,31,3763,29,"auth"],[4293,35,3763,33],[4293,37,3763,35,"url"],[4293,40,3763,38],[4293,42,3763,40,"options"],[4293,49,3763,47],[4293,51,3763,49],[4294,4,3764,4],[4294,10,3764,10,"authInternal"],[4294,22,3764,22],[4294,25,3764,25,"_castAuth"],[4294,34,3764,34],[4294,35,3764,35,"auth"],[4294,39,3764,39],[4294,40,3764,40],[4295,4,3765,4,"_assert"],[4295,11,3765,11],[4295,12,3765,12],[4295,26,3765,26],[4295,27,3765,27,"test"],[4295,31,3765,31],[4295,32,3765,32,"url"],[4295,35,3765,35],[4295,36,3765,36],[4295,38,3765,38,"authInternal"],[4295,50,3765,50],[4295,52,3765,52],[4295,77,3765,77],[4295,78,3765,78],[4295,121,3765,121],[4295,122,3765,122],[4296,4,3766,4],[4296,10,3766,10,"disableWarnings"],[4296,25,3766,25],[4296,28,3766,28],[4296,29,3766,29],[4296,30,3766,30,"options"],[4296,37,3766,37],[4296,39,3766,39,"disableWarnings"],[4296,54,3766,54],[4297,4,3767,4],[4297,10,3767,10,"protocol"],[4297,18,3767,18],[4297,21,3767,21,"extractProtocol"],[4297,36,3767,36],[4297,37,3767,37,"url"],[4297,40,3767,40],[4297,41,3767,41],[4298,4,3768,4],[4298,10,3768,10],[4299,6,3768,12,"host"],[4299,10,3768,16],[4300,6,3768,18,"port"],[4301,4,3768,23],[4301,5,3768,24],[4301,8,3768,27,"extractHostAndPort"],[4301,26,3768,45],[4301,27,3768,46,"url"],[4301,30,3768,49],[4301,31,3768,50],[4302,4,3769,4],[4302,10,3769,10,"portStr"],[4302,17,3769,17],[4302,20,3769,20,"port"],[4302,24,3769,24],[4302,29,3769,29],[4302,33,3769,33],[4302,36,3769,36],[4302,38,3769,38],[4302,41,3769,41],[4302,45,3769,45,"port"],[4302,49,3769,49],[4302,51,3769,51],[4303,4,3770,4],[4304,4,3771,4],[4304,10,3771,10,"emulator"],[4304,18,3771,18],[4304,21,3771,21],[4305,6,3771,23,"url"],[4305,9,3771,26],[4305,11,3771,28],[4305,14,3771,31,"protocol"],[4305,22,3771,39],[4305,27,3771,44,"host"],[4305,31,3771,48],[4305,34,3771,51,"portStr"],[4305,41,3771,58],[4306,4,3771,62],[4306,5,3771,63],[4307,4,3772,4],[4307,10,3772,10,"emulatorConfig"],[4307,24,3772,24],[4307,27,3772,27,"Object"],[4307,33,3772,33],[4307,34,3772,34,"freeze"],[4307,40,3772,40],[4307,41,3772,41],[4308,6,3773,8,"host"],[4308,10,3773,12],[4309,6,3774,8,"port"],[4309,10,3774,12],[4310,6,3775,8,"protocol"],[4310,14,3775,16],[4310,16,3775,18,"protocol"],[4310,24,3775,26],[4310,25,3775,27,"replace"],[4310,32,3775,34],[4310,33,3775,35],[4310,36,3775,38],[4310,38,3775,40],[4310,40,3775,42],[4310,41,3775,43],[4311,6,3776,8,"options"],[4311,13,3776,15],[4311,15,3776,17,"Object"],[4311,21,3776,23],[4311,22,3776,24,"freeze"],[4311,28,3776,30],[4311,29,3776,31],[4312,8,3776,33,"disableWarnings"],[4313,6,3776,49],[4313,7,3776,50],[4314,4,3777,4],[4314,5,3777,5],[4314,6,3777,6],[4315,4,3778,4],[4316,4,3779,4],[4316,8,3779,8],[4316,9,3779,9,"authInternal"],[4316,21,3779,21],[4316,22,3779,22,"_canInitEmulator"],[4316,38,3779,38],[4316,40,3779,40],[4317,6,3780,8],[4318,6,3781,8],[4319,6,3782,8,"_assert"],[4319,13,3782,15],[4319,14,3782,16,"authInternal"],[4319,26,3782,28],[4319,27,3782,29,"config"],[4319,33,3782,35],[4319,34,3782,36,"emulator"],[4319,42,3782,44],[4319,46,3782,48,"authInternal"],[4319,58,3782,60],[4319,59,3782,61,"emulatorConfig"],[4319,73,3782,75],[4319,75,3782,77,"authInternal"],[4319,87,3782,89],[4319,89,3782,91],[4319,113,3782,115],[4319,114,3782,116],[4319,156,3782,158],[4319,157,3782,159],[4320,6,3783,8],[4321,6,3784,8],[4322,6,3785,8,"_assert"],[4322,13,3785,15],[4322,14,3785,16],[4322,18,3785,16,"deepEqual"],[4322,31,3785,25],[4322,32,3785,25,"deepEqual"],[4322,41,3785,25],[4322,43,3785,26,"emulator"],[4322,51,3785,34],[4322,53,3785,36,"authInternal"],[4322,65,3785,48],[4322,66,3785,49,"config"],[4322,72,3785,55],[4322,73,3785,56,"emulator"],[4322,81,3785,64],[4322,82,3785,65],[4322,86,3786,12],[4322,90,3786,12,"deepEqual"],[4322,103,3786,21],[4322,104,3786,21,"deepEqual"],[4322,113,3786,21],[4322,115,3786,22,"emulatorConfig"],[4322,129,3786,36],[4322,131,3786,38,"authInternal"],[4322,143,3786,50],[4322,144,3786,51,"emulatorConfig"],[4322,158,3786,65],[4322,159,3786,66],[4322,161,3786,68,"authInternal"],[4322,173,3786,80],[4322,175,3786,82],[4322,199,3786,106],[4322,200,3786,107],[4322,242,3786,149],[4322,243,3786,150],[4323,6,3787,8],[4324,6,3788,8],[4325,6,3789,8],[4326,4,3790,4],[4327,4,3791,4,"authInternal"],[4327,16,3791,16],[4327,17,3791,17,"config"],[4327,23,3791,23],[4327,24,3791,24,"emulator"],[4327,32,3791,32],[4327,35,3791,35,"emulator"],[4327,43,3791,43],[4328,4,3792,4,"authInternal"],[4328,16,3792,16],[4328,17,3792,17,"emulatorConfig"],[4328,31,3792,31],[4328,34,3792,34,"emulatorConfig"],[4328,48,3792,48],[4329,4,3793,4,"authInternal"],[4329,16,3793,16],[4329,17,3793,17,"settings"],[4329,25,3793,25],[4329,26,3793,26,"appVerificationDisabledForTesting"],[4329,59,3793,59],[4329,62,3793,62],[4329,66,3793,66],[4330,4,3794,4],[4331,4,3795,4],[4331,8,3795,8],[4331,12,3795,8,"isCloudWorkstation"],[4331,25,3795,26],[4331,26,3795,26,"isCloudWorkstation"],[4331,44,3795,26],[4331,46,3795,27,"host"],[4331,50,3795,31],[4331,51,3795,32],[4331,53,3795,34],[4332,6,3796,8],[4332,11,3796,13],[4332,15,3796,13,"pingServer"],[4332,28,3796,23],[4332,29,3796,23,"pingServer"],[4332,39,3796,23],[4332,41,3796,24],[4332,44,3796,27,"protocol"],[4332,52,3796,35],[4332,57,3796,40,"host"],[4332,61,3796,44],[4332,64,3796,47,"portStr"],[4332,71,3796,54],[4332,73,3796,56],[4332,74,3796,57],[4333,6,3797,8],[4333,10,3797,8,"updateEmulatorBanner"],[4333,23,3797,28],[4333,24,3797,28,"updateEmulatorBanner"],[4333,44,3797,28],[4333,46,3797,29],[4333,52,3797,35],[4333,54,3797,37],[4333,58,3797,41],[4333,59,3797,42],[4334,4,3798,4],[4334,5,3798,5],[4334,11,3799,9],[4334,15,3799,13],[4334,16,3799,14,"disableWarnings"],[4334,31,3799,29],[4334,33,3799,31],[4335,6,3800,8,"emitEmulatorWarning"],[4335,25,3800,27],[4335,26,3800,28],[4335,27,3800,29],[4336,4,3801,4],[4337,2,3802,0],[4338,2,3803,0],[4338,11,3803,9,"extractProtocol"],[4338,26,3803,24,"extractProtocol"],[4338,27,3803,25,"url"],[4338,30,3803,28],[4338,32,3803,30],[4339,4,3804,4],[4339,10,3804,10,"protocolEnd"],[4339,21,3804,21],[4339,24,3804,24,"url"],[4339,27,3804,27],[4339,28,3804,28,"indexOf"],[4339,35,3804,35],[4339,36,3804,36],[4339,39,3804,39],[4339,40,3804,40],[4340,4,3805,4],[4340,11,3805,11,"protocolEnd"],[4340,22,3805,22],[4340,25,3805,25],[4340,26,3805,26],[4340,29,3805,29],[4340,31,3805,31],[4340,34,3805,34,"url"],[4340,37,3805,37],[4340,38,3805,38,"substr"],[4340,44,3805,44],[4340,45,3805,45],[4340,46,3805,46],[4340,48,3805,48,"protocolEnd"],[4340,59,3805,59],[4340,62,3805,62],[4340,63,3805,63],[4340,64,3805,64],[4341,2,3806,0],[4342,2,3807,0],[4342,11,3807,9,"extractHostAndPort"],[4342,29,3807,27,"extractHostAndPort"],[4342,30,3807,28,"url"],[4342,33,3807,31],[4342,35,3807,33],[4343,4,3808,4],[4343,10,3808,10,"protocol"],[4343,18,3808,18],[4343,21,3808,21,"extractProtocol"],[4343,36,3808,36],[4343,37,3808,37,"url"],[4343,40,3808,40],[4343,41,3808,41],[4344,4,3809,4],[4344,10,3809,10,"authority"],[4344,19,3809,19],[4344,22,3809,22],[4344,40,3809,40],[4344,41,3809,41,"exec"],[4344,45,3809,45],[4344,46,3809,46,"url"],[4344,49,3809,49],[4344,50,3809,50,"substr"],[4344,56,3809,56],[4344,57,3809,57,"protocol"],[4344,65,3809,65],[4344,66,3809,66,"length"],[4344,72,3809,72],[4344,73,3809,73],[4344,74,3809,74],[4344,75,3809,75],[4344,76,3809,76],[4345,4,3810,4],[4345,8,3810,8],[4345,9,3810,9,"authority"],[4345,18,3810,18],[4345,20,3810,20],[4346,6,3811,8],[4346,13,3811,15],[4347,8,3811,17,"host"],[4347,12,3811,21],[4347,14,3811,23],[4347,16,3811,25],[4348,8,3811,27,"port"],[4348,12,3811,31],[4348,14,3811,33],[4349,6,3811,38],[4349,7,3811,39],[4350,4,3812,4],[4351,4,3813,4],[4351,10,3813,10,"hostAndPort"],[4351,21,3813,21],[4351,24,3813,24,"authority"],[4351,33,3813,33],[4351,34,3813,34],[4351,35,3813,35],[4351,36,3813,36],[4351,37,3813,37,"split"],[4351,42,3813,42],[4351,43,3813,43],[4351,46,3813,46],[4351,47,3813,47],[4351,48,3813,48,"pop"],[4351,51,3813,51],[4351,52,3813,52],[4351,53,3813,53],[4351,57,3813,57],[4351,59,3813,59],[4351,60,3813,60],[4351,61,3813,61],[4352,4,3814,4],[4352,10,3814,10,"bracketedIPv6"],[4352,23,3814,23],[4352,26,3814,26],[4352,46,3814,46],[4352,47,3814,47,"exec"],[4352,51,3814,51],[4352,52,3814,52,"hostAndPort"],[4352,63,3814,63],[4352,64,3814,64],[4353,4,3815,4],[4353,8,3815,8,"bracketedIPv6"],[4353,21,3815,21],[4353,23,3815,23],[4354,6,3816,8],[4354,12,3816,14,"host"],[4354,16,3816,18],[4354,19,3816,21,"bracketedIPv6"],[4354,32,3816,34],[4354,33,3816,35],[4354,34,3816,36],[4354,35,3816,37],[4355,6,3817,8],[4355,13,3817,15],[4356,8,3817,17,"host"],[4356,12,3817,21],[4357,8,3817,23,"port"],[4357,12,3817,27],[4357,14,3817,29,"parsePort"],[4357,23,3817,38],[4357,24,3817,39,"hostAndPort"],[4357,35,3817,50],[4357,36,3817,51,"substr"],[4357,42,3817,57],[4357,43,3817,58,"host"],[4357,47,3817,62],[4357,48,3817,63,"length"],[4357,54,3817,69],[4357,57,3817,72],[4357,58,3817,73],[4357,59,3817,74],[4358,6,3817,76],[4358,7,3817,77],[4359,4,3818,4],[4359,5,3818,5],[4359,11,3819,9],[4360,6,3820,8],[4360,12,3820,14],[4360,13,3820,15,"host"],[4360,17,3820,19],[4360,19,3820,21,"port"],[4360,23,3820,25],[4360,24,3820,26],[4360,27,3820,29,"hostAndPort"],[4360,38,3820,40],[4360,39,3820,41,"split"],[4360,44,3820,46],[4360,45,3820,47],[4360,48,3820,50],[4360,49,3820,51],[4361,6,3821,8],[4361,13,3821,15],[4362,8,3821,17,"host"],[4362,12,3821,21],[4363,8,3821,23,"port"],[4363,12,3821,27],[4363,14,3821,29,"parsePort"],[4363,23,3821,38],[4363,24,3821,39,"port"],[4363,28,3821,43],[4364,6,3821,45],[4364,7,3821,46],[4365,4,3822,4],[4366,2,3823,0],[4367,2,3824,0],[4367,11,3824,9,"parsePort"],[4367,20,3824,18,"parsePort"],[4367,21,3824,19,"portStr"],[4367,28,3824,26],[4367,30,3824,28],[4368,4,3825,4],[4368,8,3825,8],[4368,9,3825,9,"portStr"],[4368,16,3825,16],[4368,18,3825,18],[4369,6,3826,8],[4369,13,3826,15],[4369,17,3826,19],[4370,4,3827,4],[4371,4,3828,4],[4371,10,3828,10,"port"],[4371,14,3828,14],[4371,17,3828,17,"Number"],[4371,23,3828,23],[4371,24,3828,24,"portStr"],[4371,31,3828,31],[4371,32,3828,32],[4372,4,3829,4],[4372,8,3829,8,"isNaN"],[4372,13,3829,13],[4372,14,3829,14,"port"],[4372,18,3829,18],[4372,19,3829,19],[4372,21,3829,21],[4373,6,3830,8],[4373,13,3830,15],[4373,17,3830,19],[4374,4,3831,4],[4375,4,3832,4],[4375,11,3832,11,"port"],[4375,15,3832,15],[4376,2,3833,0],[4377,2,3834,0],[4377,11,3834,9,"emitEmulatorWarning"],[4377,30,3834,28,"emitEmulatorWarning"],[4377,31,3834,28],[4377,33,3834,31],[4378,4,3835,4],[4378,13,3835,13,"attachBanner"],[4378,25,3835,25,"attachBanner"],[4378,26,3835,25],[4378,28,3835,28],[4379,6,3836,8],[4379,12,3836,14,"el"],[4379,14,3836,16],[4379,17,3836,19,"document"],[4379,25,3836,27],[4379,26,3836,28,"createElement"],[4379,39,3836,41],[4379,40,3836,42],[4379,43,3836,45],[4379,44,3836,46],[4380,6,3837,8],[4380,12,3837,14,"sty"],[4380,15,3837,17],[4380,18,3837,20,"el"],[4380,20,3837,22],[4380,21,3837,23,"style"],[4380,26,3837,28],[4381,6,3838,8,"el"],[4381,8,3838,10],[4381,9,3838,11,"innerText"],[4381,18,3838,20],[4381,21,3839,12],[4381,88,3839,79],[4382,6,3840,8,"sty"],[4382,9,3840,11],[4382,10,3840,12,"position"],[4382,18,3840,20],[4382,21,3840,23],[4382,28,3840,30],[4383,6,3841,8,"sty"],[4383,9,3841,11],[4383,10,3841,12,"width"],[4383,15,3841,17],[4383,18,3841,20],[4383,24,3841,26],[4384,6,3842,8,"sty"],[4384,9,3842,11],[4384,10,3842,12,"backgroundColor"],[4384,25,3842,27],[4384,28,3842,30],[4384,37,3842,39],[4385,6,3843,8,"sty"],[4385,9,3843,11],[4385,10,3843,12,"border"],[4385,16,3843,18],[4385,19,3843,21],[4385,39,3843,41],[4386,6,3844,8,"sty"],[4386,9,3844,11],[4386,10,3844,12,"color"],[4386,15,3844,17],[4386,18,3844,20],[4386,27,3844,29],[4387,6,3845,8,"sty"],[4387,9,3845,11],[4387,10,3845,12,"bottom"],[4387,16,3845,18],[4387,19,3845,21],[4387,24,3845,26],[4388,6,3846,8,"sty"],[4388,9,3846,11],[4388,10,3846,12,"left"],[4388,14,3846,16],[4388,17,3846,19],[4388,22,3846,24],[4389,6,3847,8,"sty"],[4389,9,3847,11],[4389,10,3847,12,"margin"],[4389,16,3847,18],[4389,19,3847,21],[4389,24,3847,26],[4390,6,3848,8,"sty"],[4390,9,3848,11],[4390,10,3848,12,"zIndex"],[4390,16,3848,18],[4390,19,3848,21],[4390,26,3848,28],[4391,6,3849,8,"sty"],[4391,9,3849,11],[4391,10,3849,12,"textAlign"],[4391,19,3849,21],[4391,22,3849,24],[4391,30,3849,32],[4392,6,3850,8,"el"],[4392,8,3850,10],[4392,9,3850,11,"classList"],[4392,18,3850,20],[4392,19,3850,21,"add"],[4392,22,3850,24],[4392,23,3850,25],[4392,50,3850,52],[4392,51,3850,53],[4393,6,3851,8,"document"],[4393,14,3851,16],[4393,15,3851,17,"body"],[4393,19,3851,21],[4393,20,3851,22,"appendChild"],[4393,31,3851,33],[4393,32,3851,34,"el"],[4393,34,3851,36],[4393,35,3851,37],[4394,4,3852,4],[4395,4,3853,4],[4395,8,3853,8],[4395,15,3853,15,"console"],[4395,22,3853,22],[4395,27,3853,27],[4395,38,3853,38],[4395,42,3853,42],[4395,49,3853,49,"console"],[4395,56,3853,56],[4395,57,3853,57,"info"],[4395,61,3853,61],[4395,66,3853,66],[4395,76,3853,76],[4395,78,3853,78],[4396,6,3854,8,"console"],[4396,13,3854,15],[4396,14,3854,16,"info"],[4396,18,3854,20],[4396,19,3854,21],[4396,62,3854,64],[4396,65,3855,12],[4396,126,3855,73],[4396,129,3856,12],[4396,155,3856,38],[4396,156,3856,39],[4397,4,3857,4],[4398,4,3858,4],[4398,8,3858,8],[4398,15,3858,15,"window"],[4398,21,3858,21],[4398,26,3858,26],[4398,37,3858,37],[4398,41,3858,41],[4398,48,3858,48,"document"],[4398,56,3858,56],[4398,61,3858,61],[4398,72,3858,72],[4398,74,3858,74],[4399,6,3859,8],[4399,10,3859,12,"document"],[4399,18,3859,20],[4399,19,3859,21,"readyState"],[4399,29,3859,31],[4399,34,3859,36],[4399,43,3859,45],[4399,45,3859,47],[4400,8,3860,12,"window"],[4400,14,3860,18],[4400,15,3860,19,"addEventListener"],[4400,31,3860,35],[4400,32,3860,36],[4400,50,3860,54],[4400,52,3860,56,"attachBanner"],[4400,64,3860,68],[4400,65,3860,69],[4401,6,3861,8],[4401,7,3861,9],[4401,13,3862,13],[4402,8,3863,12,"attachBanner"],[4402,20,3863,24],[4402,21,3863,25],[4402,22,3863,26],[4403,6,3864,8],[4404,4,3865,4],[4405,2,3866,0],[4407,2,3868,0],[4408,0,3869,0],[4409,0,3870,0],[4410,0,3871,0],[4411,0,3872,0],[4412,0,3873,0],[4413,0,3874,0],[4414,0,3875,0],[4415,0,3876,0],[4416,0,3877,0],[4417,0,3878,0],[4418,0,3879,0],[4419,0,3880,0],[4420,0,3881,0],[4421,0,3882,0],[4422,0,3883,0],[4423,2,3884,0],[4424,0,3885,0],[4425,0,3886,0],[4426,0,3887,0],[4427,0,3888,0],[4428,0,3889,0],[4429,0,3890,0],[4430,0,3891,0],[4431,2,3892,0],[4431,8,3892,6,"AuthCredential"],[4431,22,3892,20],[4431,23,3892,21],[4432,4,3893,4],[4433,4,3894,4,"constructor"],[4433,15,3894,15,"constructor"],[4434,4,3895,4],[4435,0,3896,0],[4436,0,3897,0],[4437,0,3898,0],[4438,0,3899,0],[4439,0,3900,0],[4440,4,3901,4,"providerId"],[4440,14,3901,14],[4441,4,3902,4],[4442,0,3903,0],[4443,0,3904,0],[4444,0,3905,0],[4445,0,3906,0],[4446,0,3907,0],[4447,0,3908,0],[4448,0,3909,0],[4449,4,3910,4,"signInMethod"],[4449,16,3910,16],[4449,18,3910,18],[4450,6,3911,8],[4450,10,3911,12],[4450,11,3911,13,"providerId"],[4450,21,3911,23],[4450,24,3911,26,"providerId"],[4450,34,3911,36],[4451,6,3912,8],[4451,10,3912,12],[4451,11,3912,13,"signInMethod"],[4451,23,3912,25],[4451,26,3912,28,"signInMethod"],[4451,38,3912,40],[4452,4,3913,4],[4453,4,3914,4],[4454,0,3915,0],[4455,0,3916,0],[4456,0,3917,0],[4457,0,3918,0],[4458,4,3919,4,"toJSON"],[4458,10,3919,10,"toJSON"],[4458,11,3919,10],[4458,13,3919,13],[4459,6,3920,8],[4459,13,3920,15,"debugFail"],[4459,22,3920,24],[4459,23,3920,25],[4459,40,3920,42],[4459,41,3920,43],[4460,4,3921,4],[4461,4,3922,4],[4462,4,3923,4,"_getIdTokenResponse"],[4462,23,3923,23,"_getIdTokenResponse"],[4462,24,3923,24,"_auth"],[4462,29,3923,29],[4462,31,3923,31],[4463,6,3924,8],[4463,13,3924,15,"debugFail"],[4463,22,3924,24],[4463,23,3924,25],[4463,40,3924,42],[4463,41,3924,43],[4464,4,3925,4],[4465,4,3926,4],[4466,4,3927,4,"_linkToIdToken"],[4466,18,3927,18,"_linkToIdToken"],[4466,19,3927,19,"_auth"],[4466,24,3927,24],[4466,26,3927,26,"_idToken"],[4466,34,3927,34],[4466,36,3927,36],[4467,6,3928,8],[4467,13,3928,15,"debugFail"],[4467,22,3928,24],[4467,23,3928,25],[4467,40,3928,42],[4467,41,3928,43],[4468,4,3929,4],[4469,4,3930,4],[4470,4,3931,4,"_getReauthenticationResolver"],[4470,32,3931,32,"_getReauthenticationResolver"],[4470,33,3931,33,"_auth"],[4470,38,3931,38],[4470,40,3931,40],[4471,6,3932,8],[4471,13,3932,15,"debugFail"],[4471,22,3932,24],[4471,23,3932,25],[4471,40,3932,42],[4471,41,3932,43],[4472,4,3933,4],[4473,2,3934,0],[4475,2,3936,0],[4476,0,3937,0],[4477,0,3938,0],[4478,0,3939,0],[4479,0,3940,0],[4480,0,3941,0],[4481,0,3942,0],[4482,0,3943,0],[4483,0,3944,0],[4484,0,3945,0],[4485,0,3946,0],[4486,0,3947,0],[4487,0,3948,0],[4488,0,3949,0],[4489,0,3950,0],[4490,0,3951,0],[4491,2,3952,0],[4491,17,3952,15,"resetPassword"],[4491,30,3952,28,"resetPassword"],[4491,31,3952,29,"auth"],[4491,35,3952,33],[4491,37,3952,35,"request"],[4491,44,3952,42],[4491,46,3952,44],[4492,4,3953,4],[4492,11,3953,11,"_performApiRequest"],[4492,29,3953,29],[4492,30,3953,30,"auth"],[4492,34,3953,34],[4492,36,3953,36],[4492,42,3953,42],[4492,43,3953,43],[4492,66,3953,66],[4492,94,3953,94],[4492,95,3953,95],[4492,126,3953,126,"_addTidIfNecessary"],[4492,144,3953,144],[4492,145,3953,145,"auth"],[4492,149,3953,149],[4492,151,3953,151,"request"],[4492,158,3953,158],[4492,159,3953,159],[4492,160,3953,160],[4493,2,3954,0],[4494,2,3955,0],[4494,17,3955,15,"updateEmailPassword"],[4494,36,3955,34,"updateEmailPassword"],[4494,37,3955,35,"auth"],[4494,41,3955,39],[4494,43,3955,41,"request"],[4494,50,3955,48],[4494,52,3955,50],[4495,4,3956,4],[4495,11,3956,11,"_performApiRequest"],[4495,29,3956,29],[4495,30,3956,30,"auth"],[4495,34,3956,34],[4495,36,3956,36],[4495,42,3956,42],[4495,43,3956,43],[4495,66,3956,66],[4495,87,3956,87],[4495,88,3956,88],[4495,121,3956,121,"request"],[4495,128,3956,128],[4495,129,3956,129],[4496,2,3957,0],[4497,2,3958,0],[4498,2,3959,0],[4499,2,3960,0],[4499,17,3960,15,"linkEmailPassword"],[4499,34,3960,32,"linkEmailPassword"],[4499,35,3960,33,"auth"],[4499,39,3960,37],[4499,41,3960,39,"request"],[4499,48,3960,46],[4499,50,3960,48],[4500,4,3961,4],[4500,11,3961,11,"_performApiRequest"],[4500,29,3961,29],[4500,30,3961,30,"auth"],[4500,34,3961,34],[4500,36,3961,36],[4500,42,3961,42],[4500,43,3961,43],[4500,66,3961,66],[4500,87,3961,87],[4500,88,3961,88],[4500,112,3961,112,"request"],[4500,119,3961,119],[4500,120,3961,120],[4501,2,3962,0],[4502,2,3963,0],[4502,17,3963,15,"applyActionCode$1"],[4502,34,3963,32,"applyActionCode$1"],[4502,35,3963,33,"auth"],[4502,39,3963,37],[4502,41,3963,39,"request"],[4502,48,3963,46],[4502,50,3963,48],[4503,4,3964,4],[4503,11,3964,11,"_performApiRequest"],[4503,29,3964,29],[4503,30,3964,30,"auth"],[4503,34,3964,34],[4503,36,3964,36],[4503,42,3964,42],[4503,43,3964,43],[4503,66,3964,66],[4503,87,3964,87],[4503,88,3964,88],[4503,121,3964,121,"_addTidIfNecessary"],[4503,139,3964,139],[4503,140,3964,140,"auth"],[4503,144,3964,144],[4503,146,3964,146,"request"],[4503,153,3964,153],[4503,154,3964,154],[4503,155,3964,155],[4504,2,3965,0],[4506,2,3967,0],[4507,0,3968,0],[4508,0,3969,0],[4509,0,3970,0],[4510,0,3971,0],[4511,0,3972,0],[4512,0,3973,0],[4513,0,3974,0],[4514,0,3975,0],[4515,0,3976,0],[4516,0,3977,0],[4517,0,3978,0],[4518,0,3979,0],[4519,0,3980,0],[4520,0,3981,0],[4521,0,3982,0],[4522,2,3983,0],[4522,17,3983,15,"signInWithPassword"],[4522,35,3983,33,"signInWithPassword"],[4522,36,3983,34,"auth"],[4522,40,3983,38],[4522,42,3983,40,"request"],[4522,49,3983,47],[4522,51,3983,49],[4523,4,3984,4],[4523,11,3984,11,"_performSignInRequest"],[4523,32,3984,32],[4523,33,3984,33,"auth"],[4523,37,3984,37],[4523,39,3984,39],[4523,45,3984,45],[4523,46,3984,46],[4523,69,3984,69],[4523,102,3984,102],[4523,103,3984,103],[4523,141,3984,141,"_addTidIfNecessary"],[4523,159,3984,159],[4523,160,3984,160,"auth"],[4523,164,3984,164],[4523,166,3984,166,"request"],[4523,173,3984,173],[4523,174,3984,174],[4523,175,3984,175],[4524,2,3985,0],[4525,2,3986,0],[4525,17,3986,15,"sendOobCode"],[4525,28,3986,26,"sendOobCode"],[4525,29,3986,27,"auth"],[4525,33,3986,31],[4525,35,3986,33,"request"],[4525,42,3986,40],[4525,44,3986,42],[4526,4,3987,4],[4526,11,3987,11,"_performApiRequest"],[4526,29,3987,29],[4526,30,3987,30,"auth"],[4526,34,3987,34],[4526,36,3987,36],[4526,42,3987,42],[4526,43,3987,43],[4526,66,3987,66],[4526,92,3987,92],[4526,93,3987,93],[4526,123,3987,123,"_addTidIfNecessary"],[4526,141,3987,141],[4526,142,3987,142,"auth"],[4526,146,3987,146],[4526,148,3987,148,"request"],[4526,155,3987,155],[4526,156,3987,156],[4526,157,3987,157],[4527,2,3988,0],[4528,2,3989,0],[4528,17,3989,15,"sendEmailVerification$1"],[4528,40,3989,38,"sendEmailVerification$1"],[4528,41,3989,39,"auth"],[4528,45,3989,43],[4528,47,3989,45,"request"],[4528,54,3989,52],[4528,56,3989,54],[4529,4,3990,4],[4529,11,3990,11,"sendOobCode"],[4529,22,3990,22],[4529,23,3990,23,"auth"],[4529,27,3990,27],[4529,29,3990,29,"request"],[4529,36,3990,36],[4529,37,3990,37],[4530,2,3991,0],[4531,2,3992,0],[4531,17,3992,15,"sendPasswordResetEmail$1"],[4531,41,3992,39,"sendPasswordResetEmail$1"],[4531,42,3992,40,"auth"],[4531,46,3992,44],[4531,48,3992,46,"request"],[4531,55,3992,53],[4531,57,3992,55],[4532,4,3993,4],[4532,11,3993,11,"sendOobCode"],[4532,22,3993,22],[4532,23,3993,23,"auth"],[4532,27,3993,27],[4532,29,3993,29,"request"],[4532,36,3993,36],[4532,37,3993,37],[4533,2,3994,0],[4534,2,3995,0],[4534,17,3995,15,"sendSignInLinkToEmail$1"],[4534,40,3995,38,"sendSignInLinkToEmail$1"],[4534,41,3995,39,"auth"],[4534,45,3995,43],[4534,47,3995,45,"request"],[4534,54,3995,52],[4534,56,3995,54],[4535,4,3996,4],[4535,11,3996,11,"sendOobCode"],[4535,22,3996,22],[4535,23,3996,23,"auth"],[4535,27,3996,27],[4535,29,3996,29,"request"],[4535,36,3996,36],[4535,37,3996,37],[4536,2,3997,0],[4537,2,3998,0],[4537,17,3998,15,"verifyAndChangeEmail"],[4537,37,3998,35,"verifyAndChangeEmail"],[4537,38,3998,36,"auth"],[4537,42,3998,40],[4537,44,3998,42,"request"],[4537,51,3998,49],[4537,53,3998,51],[4538,4,3999,4],[4538,11,3999,11,"sendOobCode"],[4538,22,3999,22],[4538,23,3999,23,"auth"],[4538,27,3999,27],[4538,29,3999,29,"request"],[4538,36,3999,36],[4538,37,3999,37],[4539,2,4000,0],[4541,2,4002,0],[4542,0,4003,0],[4543,0,4004,0],[4544,0,4005,0],[4545,0,4006,0],[4546,0,4007,0],[4547,0,4008,0],[4548,0,4009,0],[4549,0,4010,0],[4550,0,4011,0],[4551,0,4012,0],[4552,0,4013,0],[4553,0,4014,0],[4554,0,4015,0],[4555,0,4016,0],[4556,0,4017,0],[4557,2,4018,0],[4557,17,4018,15,"signInWithEmailLink$1"],[4557,38,4018,36,"signInWithEmailLink$1"],[4557,39,4018,37,"auth"],[4557,43,4018,41],[4557,45,4018,43,"request"],[4557,52,4018,50],[4557,54,4018,52],[4558,4,4019,4],[4558,11,4019,11,"_performSignInRequest"],[4558,32,4019,32],[4558,33,4019,33,"auth"],[4558,37,4019,37],[4558,39,4019,39],[4558,45,4019,45],[4558,46,4019,46],[4558,69,4019,69],[4558,103,4019,103],[4558,104,4019,104],[4558,144,4019,144,"_addTidIfNecessary"],[4558,162,4019,162],[4558,163,4019,163,"auth"],[4558,167,4019,167],[4558,169,4019,169,"request"],[4558,176,4019,176],[4558,177,4019,177],[4558,178,4019,178],[4559,2,4020,0],[4560,2,4021,0],[4560,17,4021,15,"signInWithEmailLinkForLinking"],[4560,46,4021,44,"signInWithEmailLinkForLinking"],[4560,47,4021,45,"auth"],[4560,51,4021,49],[4560,53,4021,51,"request"],[4560,60,4021,58],[4560,62,4021,60],[4561,4,4022,4],[4561,11,4022,11,"_performSignInRequest"],[4561,32,4022,32],[4561,33,4022,33,"auth"],[4561,37,4022,37],[4561,39,4022,39],[4561,45,4022,45],[4561,46,4022,46],[4561,69,4022,69],[4561,103,4022,103],[4561,104,4022,104],[4561,144,4022,144,"_addTidIfNecessary"],[4561,162,4022,162],[4561,163,4022,163,"auth"],[4561,167,4022,167],[4561,169,4022,169,"request"],[4561,176,4022,176],[4561,177,4022,177],[4561,178,4022,178],[4562,2,4023,0],[4564,2,4025,0],[4565,0,4026,0],[4566,0,4027,0],[4567,0,4028,0],[4568,0,4029,0],[4569,0,4030,0],[4570,0,4031,0],[4571,0,4032,0],[4572,0,4033,0],[4573,0,4034,0],[4574,0,4035,0],[4575,0,4036,0],[4576,0,4037,0],[4577,0,4038,0],[4578,0,4039,0],[4579,0,4040,0],[4580,2,4041,0],[4581,0,4042,0],[4582,0,4043,0],[4583,0,4044,0],[4584,0,4045,0],[4585,0,4046,0],[4586,0,4047,0],[4587,0,4048,0],[4588,0,4049,0],[4589,0,4050,0],[4590,2,4051,0],[4590,8,4051,6,"EmailAuthCredential"],[4590,27,4051,25],[4590,36,4051,34,"AuthCredential"],[4590,50,4051,48],[4590,51,4051,49],[4591,4,4052,4],[4592,4,4053,4,"constructor"],[4592,15,4053,15,"constructor"],[4592,16,4054,4],[4593,4,4055,4,"_email"],[4593,10,4055,10],[4593,12,4056,4],[4594,4,4057,4,"_password"],[4594,13,4057,13],[4594,15,4057,15,"signInMethod"],[4594,27,4057,27],[4594,29,4058,4],[4595,4,4059,4,"_tenantId"],[4595,13,4059,13],[4595,16,4059,16],[4595,20,4059,20],[4595,22,4059,22],[4596,6,4060,8],[4596,11,4060,13],[4596,12,4060,14],[4596,22,4060,24],[4596,23,4060,25],[4596,50,4060,52,"signInMethod"],[4596,62,4060,64],[4596,63,4060,65],[4597,6,4061,8],[4597,10,4061,12],[4597,11,4061,13,"_email"],[4597,17,4061,19],[4597,20,4061,22,"_email"],[4597,26,4061,28],[4598,6,4062,8],[4598,10,4062,12],[4598,11,4062,13,"_password"],[4598,20,4062,22],[4598,23,4062,25,"_password"],[4598,32,4062,34],[4599,6,4063,8],[4599,10,4063,12],[4599,11,4063,13,"_tenantId"],[4599,20,4063,22],[4599,23,4063,25,"_tenantId"],[4599,32,4063,34],[4600,4,4064,4],[4601,4,4065,4],[4602,4,4066,4],[4602,11,4066,11,"_fromEmailAndPassword"],[4602,32,4066,32,"_fromEmailAndPassword"],[4602,33,4066,33,"email"],[4602,38,4066,38],[4602,40,4066,40,"password"],[4602,48,4066,48],[4602,50,4066,50],[4603,6,4067,8],[4603,13,4067,15],[4603,17,4067,19,"EmailAuthCredential"],[4603,36,4067,38],[4603,37,4067,39,"email"],[4603,42,4067,44],[4603,44,4067,46,"password"],[4603,52,4067,54],[4603,54,4067,56],[4603,64,4067,66],[4603,65,4067,67],[4603,98,4067,100],[4603,99,4067,101],[4604,4,4068,4],[4605,4,4069,4],[4606,4,4070,4],[4606,11,4070,11,"_fromEmailAndCode"],[4606,28,4070,28,"_fromEmailAndCode"],[4606,29,4070,29,"email"],[4606,34,4070,34],[4606,36,4070,36,"oobCode"],[4606,43,4070,43],[4606,45,4070,45,"tenantId"],[4606,53,4070,53],[4606,56,4070,56],[4606,60,4070,60],[4606,62,4070,62],[4607,6,4071,8],[4607,13,4071,15],[4607,17,4071,19,"EmailAuthCredential"],[4607,36,4071,38],[4607,37,4071,39,"email"],[4607,42,4071,44],[4607,44,4071,46,"oobCode"],[4607,51,4071,53],[4607,53,4071,55],[4607,64,4071,66],[4607,65,4071,67],[4607,96,4071,98,"tenantId"],[4607,104,4071,106],[4607,105,4071,107],[4608,4,4072,4],[4609,4,4073,4],[4610,4,4074,4,"toJSON"],[4610,10,4074,10,"toJSON"],[4610,11,4074,10],[4610,13,4074,13],[4611,6,4075,8],[4611,13,4075,15],[4612,8,4076,12,"email"],[4612,13,4076,17],[4612,15,4076,19],[4612,19,4076,23],[4612,20,4076,24,"_email"],[4612,26,4076,30],[4613,8,4077,12,"password"],[4613,16,4077,20],[4613,18,4077,22],[4613,22,4077,26],[4613,23,4077,27,"_password"],[4613,32,4077,36],[4614,8,4078,12,"signInMethod"],[4614,20,4078,24],[4614,22,4078,26],[4614,26,4078,30],[4614,27,4078,31,"signInMethod"],[4614,39,4078,43],[4615,8,4079,12,"tenantId"],[4615,16,4079,20],[4615,18,4079,22],[4615,22,4079,26],[4615,23,4079,27,"_tenantId"],[4616,6,4080,8],[4616,7,4080,9],[4617,4,4081,4],[4618,4,4082,4],[4619,0,4083,0],[4620,0,4084,0],[4621,0,4085,0],[4622,0,4086,0],[4623,0,4087,0],[4624,0,4088,0],[4625,0,4089,0],[4626,4,4090,4],[4626,11,4090,11,"fromJSON"],[4626,19,4090,19,"fromJSON"],[4626,20,4090,20,"json"],[4626,24,4090,24],[4626,26,4090,26],[4627,6,4091,8],[4627,12,4091,14,"obj"],[4627,15,4091,17],[4627,18,4091,20],[4627,25,4091,27,"json"],[4627,29,4091,31],[4627,34,4091,36],[4627,42,4091,44],[4627,45,4091,47,"JSON"],[4627,49,4091,51],[4627,50,4091,52,"parse"],[4627,55,4091,57],[4627,56,4091,58,"json"],[4627,60,4091,62],[4627,61,4091,63],[4627,64,4091,66,"json"],[4627,68,4091,70],[4628,6,4092,8],[4628,10,4092,12,"obj"],[4628,13,4092,15],[4628,15,4092,17,"email"],[4628,20,4092,22],[4628,24,4092,26,"obj"],[4628,27,4092,29],[4628,29,4092,31,"password"],[4628,37,4092,39],[4628,39,4092,41],[4629,8,4093,12],[4629,12,4093,16,"obj"],[4629,15,4093,19],[4629,16,4093,20,"signInMethod"],[4629,28,4093,32],[4629,33,4093,37],[4629,43,4093,47],[4629,44,4093,48],[4629,79,4093,83],[4630,10,4094,16],[4630,17,4094,23],[4630,21,4094,27],[4630,22,4094,28,"_fromEmailAndPassword"],[4630,43,4094,49],[4630,44,4094,50,"obj"],[4630,47,4094,53],[4630,48,4094,54,"email"],[4630,53,4094,59],[4630,55,4094,61,"obj"],[4630,58,4094,64],[4630,59,4094,65,"password"],[4630,67,4094,73],[4630,68,4094,74],[4631,8,4095,12],[4631,9,4095,13],[4631,15,4096,17],[4631,19,4096,21,"obj"],[4631,22,4096,24],[4631,23,4096,25,"signInMethod"],[4631,35,4096,37],[4631,40,4096,42],[4631,51,4096,53],[4631,52,4096,54],[4631,83,4096,85],[4632,10,4097,16],[4632,17,4097,23],[4632,21,4097,27],[4632,22,4097,28,"_fromEmailAndCode"],[4632,39,4097,45],[4632,40,4097,46,"obj"],[4632,43,4097,49],[4632,44,4097,50,"email"],[4632,49,4097,55],[4632,51,4097,57,"obj"],[4632,54,4097,60],[4632,55,4097,61,"password"],[4632,63,4097,69],[4632,65,4097,71,"obj"],[4632,68,4097,74],[4632,69,4097,75,"tenantId"],[4632,77,4097,83],[4632,78,4097,84],[4633,8,4098,12],[4634,6,4099,8],[4635,6,4100,8],[4635,13,4100,15],[4635,17,4100,19],[4636,4,4101,4],[4637,4,4102,4],[4638,4,4103,4],[4638,10,4103,10,"_getIdTokenResponse"],[4638,29,4103,29,"_getIdTokenResponse"],[4638,30,4103,30,"auth"],[4638,34,4103,34],[4638,36,4103,36],[4639,6,4104,8],[4639,14,4104,16],[4639,18,4104,20],[4639,19,4104,21,"signInMethod"],[4639,31,4104,33],[4640,8,4105,12],[4640,13,4105,17],[4640,23,4105,27],[4640,24,4105,28],[4641,10,4106,16],[4641,16,4106,22,"request"],[4641,23,4106,29],[4641,26,4106,32],[4642,12,4107,20,"returnSecureToken"],[4642,29,4107,37],[4642,31,4107,39],[4642,35,4107,43],[4643,12,4108,20,"email"],[4643,17,4108,25],[4643,19,4108,27],[4643,23,4108,31],[4643,24,4108,32,"_email"],[4643,30,4108,38],[4644,12,4109,20,"password"],[4644,20,4109,28],[4644,22,4109,30],[4644,26,4109,34],[4644,27,4109,35,"_password"],[4644,36,4109,44],[4645,12,4110,20,"clientType"],[4645,22,4110,30],[4645,24,4110,32],[4645,41,4110,49],[4645,42,4110,50],[4646,10,4111,16],[4646,11,4111,17],[4647,10,4112,16],[4647,17,4112,23,"handleRecaptchaFlow"],[4647,36,4112,42],[4647,37,4112,43,"auth"],[4647,41,4112,47],[4647,43,4112,49,"request"],[4647,50,4112,56],[4647,52,4112,58],[4647,72,4112,78],[4647,73,4112,79],[4647,122,4112,128,"signInWithPassword"],[4647,140,4112,146],[4647,142,4112,148],[4647,167,4112,173],[4647,168,4112,174],[4647,219,4112,225],[4647,220,4112,226],[4648,8,4113,12],[4648,13,4113,17],[4648,24,4113,28],[4648,25,4113,29],[4649,10,4114,16],[4649,17,4114,23,"signInWithEmailLink$1"],[4649,38,4114,44],[4649,39,4114,45,"auth"],[4649,43,4114,49],[4649,45,4114,51],[4650,12,4115,20,"email"],[4650,17,4115,25],[4650,19,4115,27],[4650,23,4115,31],[4650,24,4115,32,"_email"],[4650,30,4115,38],[4651,12,4116,20,"oobCode"],[4651,19,4116,27],[4651,21,4116,29],[4651,25,4116,33],[4651,26,4116,34,"_password"],[4652,10,4117,16],[4652,11,4117,17],[4652,12,4117,18],[4653,8,4118,12],[4654,10,4119,16,"_fail"],[4654,15,4119,21],[4654,16,4119,22,"auth"],[4654,20,4119,26],[4654,22,4119,28],[4654,38,4119,44],[4654,39,4119,45],[4654,73,4119,79],[4654,74,4119,80],[4655,6,4120,8],[4656,4,4121,4],[4657,4,4122,4],[4658,4,4123,4],[4658,10,4123,10,"_linkToIdToken"],[4658,24,4123,24,"_linkToIdToken"],[4658,25,4123,25,"auth"],[4658,29,4123,29],[4658,31,4123,31,"idToken"],[4658,38,4123,38],[4658,40,4123,40],[4659,6,4124,8],[4659,14,4124,16],[4659,18,4124,20],[4659,19,4124,21,"signInMethod"],[4659,31,4124,33],[4660,8,4125,12],[4660,13,4125,17],[4660,23,4125,27],[4660,24,4125,28],[4661,10,4126,16],[4661,16,4126,22,"request"],[4661,23,4126,29],[4661,26,4126,32],[4662,12,4127,20,"idToken"],[4662,19,4127,27],[4663,12,4128,20,"returnSecureToken"],[4663,29,4128,37],[4663,31,4128,39],[4663,35,4128,43],[4664,12,4129,20,"email"],[4664,17,4129,25],[4664,19,4129,27],[4664,23,4129,31],[4664,24,4129,32,"_email"],[4664,30,4129,38],[4665,12,4130,20,"password"],[4665,20,4130,28],[4665,22,4130,30],[4665,26,4130,34],[4665,27,4130,35,"_password"],[4665,36,4130,44],[4666,12,4131,20,"clientType"],[4666,22,4131,30],[4666,24,4131,32],[4666,41,4131,49],[4666,42,4131,50],[4667,10,4132,16],[4667,11,4132,17],[4668,10,4133,16],[4668,17,4133,23,"handleRecaptchaFlow"],[4668,36,4133,42],[4668,37,4133,43,"auth"],[4668,41,4133,47],[4668,43,4133,49,"request"],[4668,50,4133,56],[4668,52,4133,58],[4668,68,4133,74],[4668,69,4133,75],[4668,113,4133,119,"linkEmailPassword"],[4668,130,4133,136],[4668,132,4133,138],[4668,157,4133,163],[4668,158,4133,164],[4668,209,4133,215],[4668,210,4133,216],[4669,8,4134,12],[4669,13,4134,17],[4669,24,4134,28],[4669,25,4134,29],[4670,10,4135,16],[4670,17,4135,23,"signInWithEmailLinkForLinking"],[4670,46,4135,52],[4670,47,4135,53,"auth"],[4670,51,4135,57],[4670,53,4135,59],[4671,12,4136,20,"idToken"],[4671,19,4136,27],[4672,12,4137,20,"email"],[4672,17,4137,25],[4672,19,4137,27],[4672,23,4137,31],[4672,24,4137,32,"_email"],[4672,30,4137,38],[4673,12,4138,20,"oobCode"],[4673,19,4138,27],[4673,21,4138,29],[4673,25,4138,33],[4673,26,4138,34,"_password"],[4674,10,4139,16],[4674,11,4139,17],[4674,12,4139,18],[4675,8,4140,12],[4676,10,4141,16,"_fail"],[4676,15,4141,21],[4676,16,4141,22,"auth"],[4676,20,4141,26],[4676,22,4141,28],[4676,38,4141,44],[4676,39,4141,45],[4676,73,4141,79],[4676,74,4141,80],[4677,6,4142,8],[4678,4,4143,4],[4679,4,4144,4],[4680,4,4145,4,"_getReauthenticationResolver"],[4680,32,4145,32,"_getReauthenticationResolver"],[4680,33,4145,33,"auth"],[4680,37,4145,37],[4680,39,4145,39],[4681,6,4146,8],[4681,13,4146,15],[4681,17,4146,19],[4681,18,4146,20,"_getIdTokenResponse"],[4681,37,4146,39],[4681,38,4146,40,"auth"],[4681,42,4146,44],[4681,43,4146,45],[4682,4,4147,4],[4683,2,4148,0],[4685,2,4150,0],[4686,0,4151,0],[4687,0,4152,0],[4688,0,4153,0],[4689,0,4154,0],[4690,0,4155,0],[4691,0,4156,0],[4692,0,4157,0],[4693,0,4158,0],[4694,0,4159,0],[4695,0,4160,0],[4696,0,4161,0],[4697,0,4162,0],[4698,0,4163,0],[4699,0,4164,0],[4700,0,4165,0],[4701,2,4166,0],[4701,17,4166,15,"signInWithIdp"],[4701,30,4166,28,"signInWithIdp"],[4701,31,4166,29,"auth"],[4701,35,4166,33],[4701,37,4166,35,"request"],[4701,44,4166,42],[4701,46,4166,44],[4702,4,4167,4],[4702,11,4167,11,"_performSignInRequest"],[4702,32,4167,32],[4702,33,4167,33,"auth"],[4702,37,4167,37],[4702,39,4167,39],[4702,45,4167,45],[4702,46,4167,46],[4702,69,4167,69],[4702,97,4167,97],[4702,98,4167,98],[4702,131,4167,131,"_addTidIfNecessary"],[4702,149,4167,149],[4702,150,4167,150,"auth"],[4702,154,4167,154],[4702,156,4167,156,"request"],[4702,163,4167,163],[4702,164,4167,164],[4702,165,4167,165],[4703,2,4168,0],[4705,2,4170,0],[4706,0,4171,0],[4707,0,4172,0],[4708,0,4173,0],[4709,0,4174,0],[4710,0,4175,0],[4711,0,4176,0],[4712,0,4177,0],[4713,0,4178,0],[4714,0,4179,0],[4715,0,4180,0],[4716,0,4181,0],[4717,0,4182,0],[4718,0,4183,0],[4719,0,4184,0],[4720,0,4185,0],[4721,2,4186,0],[4721,8,4186,6,"IDP_REQUEST_URI$1"],[4721,25,4186,23],[4721,28,4186,26],[4721,46,4186,44],[4722,2,4187,0],[4723,0,4188,0],[4724,0,4189,0],[4725,0,4190,0],[4726,0,4191,0],[4727,0,4192,0],[4728,0,4193,0],[4729,0,4194,0],[4730,2,4195,0],[4730,8,4195,6,"OAuthCredential"],[4730,23,4195,21],[4730,32,4195,30,"AuthCredential"],[4730,46,4195,44],[4730,47,4195,45],[4731,4,4196,4,"constructor"],[4731,15,4196,15,"constructor"],[4731,16,4196,15],[4731,18,4196,18],[4732,6,4197,8],[4732,11,4197,13],[4732,12,4197,14],[4732,15,4197,17,"arguments"],[4732,24,4197,26],[4732,25,4197,27],[4733,6,4198,8],[4733,10,4198,12],[4733,11,4198,13,"pendingToken"],[4733,23,4198,25],[4733,26,4198,28],[4733,30,4198,32],[4734,4,4199,4],[4735,4,4200,4],[4736,4,4201,4],[4736,11,4201,11,"_fromParams"],[4736,22,4201,22,"_fromParams"],[4736,23,4201,23,"params"],[4736,29,4201,29],[4736,31,4201,31],[4737,6,4202,8],[4737,12,4202,14,"cred"],[4737,16,4202,18],[4737,19,4202,21],[4737,23,4202,25,"OAuthCredential"],[4737,38,4202,40],[4737,39,4202,41,"params"],[4737,45,4202,47],[4737,46,4202,48,"providerId"],[4737,56,4202,58],[4737,58,4202,60,"params"],[4737,64,4202,66],[4737,65,4202,67,"signInMethod"],[4737,77,4202,79],[4737,78,4202,80],[4738,6,4203,8],[4738,10,4203,12,"params"],[4738,16,4203,18],[4738,17,4203,19,"idToken"],[4738,24,4203,26],[4738,28,4203,30,"params"],[4738,34,4203,36],[4738,35,4203,37,"accessToken"],[4738,46,4203,48],[4738,48,4203,50],[4739,8,4204,12],[4740,8,4205,12],[4740,12,4205,16,"params"],[4740,18,4205,22],[4740,19,4205,23,"idToken"],[4740,26,4205,30],[4740,28,4205,32],[4741,10,4206,16,"cred"],[4741,14,4206,20],[4741,15,4206,21,"idToken"],[4741,22,4206,28],[4741,25,4206,31,"params"],[4741,31,4206,37],[4741,32,4206,38,"idToken"],[4741,39,4206,45],[4742,8,4207,12],[4743,8,4208,12],[4743,12,4208,16,"params"],[4743,18,4208,22],[4743,19,4208,23,"accessToken"],[4743,30,4208,34],[4743,32,4208,36],[4744,10,4209,16,"cred"],[4744,14,4209,20],[4744,15,4209,21,"accessToken"],[4744,26,4209,32],[4744,29,4209,35,"params"],[4744,35,4209,41],[4744,36,4209,42,"accessToken"],[4744,47,4209,53],[4745,8,4210,12],[4746,8,4211,12],[4747,8,4212,12],[4747,12,4212,16,"params"],[4747,18,4212,22],[4747,19,4212,23,"nonce"],[4747,24,4212,28],[4747,28,4212,32],[4747,29,4212,33,"params"],[4747,35,4212,39],[4747,36,4212,40,"pendingToken"],[4747,48,4212,52],[4747,50,4212,54],[4748,10,4213,16,"cred"],[4748,14,4213,20],[4748,15,4213,21,"nonce"],[4748,20,4213,26],[4748,23,4213,29,"params"],[4748,29,4213,35],[4748,30,4213,36,"nonce"],[4748,35,4213,41],[4749,8,4214,12],[4750,8,4215,12],[4750,12,4215,16,"params"],[4750,18,4215,22],[4750,19,4215,23,"pendingToken"],[4750,31,4215,35],[4750,33,4215,37],[4751,10,4216,16,"cred"],[4751,14,4216,20],[4751,15,4216,21,"pendingToken"],[4751,27,4216,33],[4751,30,4216,36,"params"],[4751,36,4216,42],[4751,37,4216,43,"pendingToken"],[4751,49,4216,55],[4752,8,4217,12],[4753,6,4218,8],[4753,7,4218,9],[4753,13,4219,13],[4753,17,4219,17,"params"],[4753,23,4219,23],[4753,24,4219,24,"oauthToken"],[4753,34,4219,34],[4753,38,4219,38,"params"],[4753,44,4219,44],[4753,45,4219,45,"oauthTokenSecret"],[4753,61,4219,61],[4753,63,4219,63],[4754,8,4220,12],[4755,8,4221,12,"cred"],[4755,12,4221,16],[4755,13,4221,17,"accessToken"],[4755,24,4221,28],[4755,27,4221,31,"params"],[4755,33,4221,37],[4755,34,4221,38,"oauthToken"],[4755,44,4221,48],[4756,8,4222,12,"cred"],[4756,12,4222,16],[4756,13,4222,17,"secret"],[4756,19,4222,23],[4756,22,4222,26,"params"],[4756,28,4222,32],[4756,29,4222,33,"oauthTokenSecret"],[4756,45,4222,49],[4757,6,4223,8],[4757,7,4223,9],[4757,13,4224,13],[4758,8,4225,12,"_fail"],[4758,13,4225,17],[4758,14,4225,18],[4758,30,4225,34],[4758,31,4225,35],[4758,65,4225,69],[4758,66,4225,70],[4759,6,4226,8],[4760,6,4227,8],[4760,13,4227,15,"cred"],[4760,17,4227,19],[4761,4,4228,4],[4762,4,4229,4],[4763,4,4230,4,"toJSON"],[4763,10,4230,10,"toJSON"],[4763,11,4230,10],[4763,13,4230,13],[4764,6,4231,8],[4764,13,4231,15],[4765,8,4232,12,"idToken"],[4765,15,4232,19],[4765,17,4232,21],[4765,21,4232,25],[4765,22,4232,26,"idToken"],[4765,29,4232,33],[4766,8,4233,12,"accessToken"],[4766,19,4233,23],[4766,21,4233,25],[4766,25,4233,29],[4766,26,4233,30,"accessToken"],[4766,37,4233,41],[4767,8,4234,12,"secret"],[4767,14,4234,18],[4767,16,4234,20],[4767,20,4234,24],[4767,21,4234,25,"secret"],[4767,27,4234,31],[4768,8,4235,12,"nonce"],[4768,13,4235,17],[4768,15,4235,19],[4768,19,4235,23],[4768,20,4235,24,"nonce"],[4768,25,4235,29],[4769,8,4236,12,"pendingToken"],[4769,20,4236,24],[4769,22,4236,26],[4769,26,4236,30],[4769,27,4236,31,"pendingToken"],[4769,39,4236,43],[4770,8,4237,12,"providerId"],[4770,18,4237,22],[4770,20,4237,24],[4770,24,4237,28],[4770,25,4237,29,"providerId"],[4770,35,4237,39],[4771,8,4238,12,"signInMethod"],[4771,20,4238,24],[4771,22,4238,26],[4771,26,4238,30],[4771,27,4238,31,"signInMethod"],[4772,6,4239,8],[4772,7,4239,9],[4773,4,4240,4],[4774,4,4241,4],[4775,0,4242,0],[4776,0,4243,0],[4777,0,4244,0],[4778,0,4245,0],[4779,0,4246,0],[4780,0,4247,0],[4781,0,4248,0],[4782,0,4249,0],[4783,4,4250,4],[4783,11,4250,11,"fromJSON"],[4783,19,4250,19,"fromJSON"],[4783,20,4250,20,"json"],[4783,24,4250,24],[4783,26,4250,26],[4784,6,4251,8],[4784,12,4251,14,"obj"],[4784,15,4251,17],[4784,18,4251,20],[4784,25,4251,27,"json"],[4784,29,4251,31],[4784,34,4251,36],[4784,42,4251,44],[4784,45,4251,47,"JSON"],[4784,49,4251,51],[4784,50,4251,52,"parse"],[4784,55,4251,57],[4784,56,4251,58,"json"],[4784,60,4251,62],[4784,61,4251,63],[4784,64,4251,66,"json"],[4784,68,4251,70],[4785,6,4252,8],[4785,12,4252,14],[4786,8,4252,16,"providerId"],[4786,18,4252,26],[4787,8,4252,28,"signInMethod"],[4787,20,4252,40],[4788,8,4252,42],[4788,11,4252,45,"rest"],[4789,6,4252,50],[4789,7,4252,51],[4789,10,4252,54,"obj"],[4789,13,4252,57],[4790,6,4253,8],[4790,10,4253,12],[4790,11,4253,13,"providerId"],[4790,21,4253,23],[4790,25,4253,27],[4790,26,4253,28,"signInMethod"],[4790,38,4253,40],[4790,40,4253,42],[4791,8,4254,12],[4791,15,4254,19],[4791,19,4254,23],[4792,6,4255,8],[4793,6,4256,8],[4793,12,4256,14,"cred"],[4793,16,4256,18],[4793,19,4256,21],[4793,23,4256,25,"OAuthCredential"],[4793,38,4256,40],[4793,39,4256,41,"providerId"],[4793,49,4256,51],[4793,51,4256,53,"signInMethod"],[4793,63,4256,65],[4793,64,4256,66],[4794,6,4257,8,"cred"],[4794,10,4257,12],[4794,11,4257,13,"idToken"],[4794,18,4257,20],[4794,21,4257,23,"rest"],[4794,25,4257,27],[4794,26,4257,28,"idToken"],[4794,33,4257,35],[4794,37,4257,39,"undefined"],[4794,46,4257,48],[4795,6,4258,8,"cred"],[4795,10,4258,12],[4795,11,4258,13,"accessToken"],[4795,22,4258,24],[4795,25,4258,27,"rest"],[4795,29,4258,31],[4795,30,4258,32,"accessToken"],[4795,41,4258,43],[4795,45,4258,47,"undefined"],[4795,54,4258,56],[4796,6,4259,8,"cred"],[4796,10,4259,12],[4796,11,4259,13,"secret"],[4796,17,4259,19],[4796,20,4259,22,"rest"],[4796,24,4259,26],[4796,25,4259,27,"secret"],[4796,31,4259,33],[4797,6,4260,8,"cred"],[4797,10,4260,12],[4797,11,4260,13,"nonce"],[4797,16,4260,18],[4797,19,4260,21,"rest"],[4797,23,4260,25],[4797,24,4260,26,"nonce"],[4797,29,4260,31],[4798,6,4261,8,"cred"],[4798,10,4261,12],[4798,11,4261,13,"pendingToken"],[4798,23,4261,25],[4798,26,4261,28,"rest"],[4798,30,4261,32],[4798,31,4261,33,"pendingToken"],[4798,43,4261,45],[4798,47,4261,49],[4798,51,4261,53],[4799,6,4262,8],[4799,13,4262,15,"cred"],[4799,17,4262,19],[4800,4,4263,4],[4801,4,4264,4],[4802,4,4265,4,"_getIdTokenResponse"],[4802,23,4265,23,"_getIdTokenResponse"],[4802,24,4265,24,"auth"],[4802,28,4265,28],[4802,30,4265,30],[4803,6,4266,8],[4803,12,4266,14,"request"],[4803,19,4266,21],[4803,22,4266,24],[4803,26,4266,28],[4803,27,4266,29,"buildRequest"],[4803,39,4266,41],[4803,40,4266,42],[4803,41,4266,43],[4804,6,4267,8],[4804,13,4267,15,"signInWithIdp"],[4804,26,4267,28],[4804,27,4267,29,"auth"],[4804,31,4267,33],[4804,33,4267,35,"request"],[4804,40,4267,42],[4804,41,4267,43],[4805,4,4268,4],[4806,4,4269,4],[4807,4,4270,4,"_linkToIdToken"],[4807,18,4270,18,"_linkToIdToken"],[4807,19,4270,19,"auth"],[4807,23,4270,23],[4807,25,4270,25,"idToken"],[4807,32,4270,32],[4807,34,4270,34],[4808,6,4271,8],[4808,12,4271,14,"request"],[4808,19,4271,21],[4808,22,4271,24],[4808,26,4271,28],[4808,27,4271,29,"buildRequest"],[4808,39,4271,41],[4808,40,4271,42],[4808,41,4271,43],[4809,6,4272,8,"request"],[4809,13,4272,15],[4809,14,4272,16,"idToken"],[4809,21,4272,23],[4809,24,4272,26,"idToken"],[4809,31,4272,33],[4810,6,4273,8],[4810,13,4273,15,"signInWithIdp"],[4810,26,4273,28],[4810,27,4273,29,"auth"],[4810,31,4273,33],[4810,33,4273,35,"request"],[4810,40,4273,42],[4810,41,4273,43],[4811,4,4274,4],[4812,4,4275,4],[4813,4,4276,4,"_getReauthenticationResolver"],[4813,32,4276,32,"_getReauthenticationResolver"],[4813,33,4276,33,"auth"],[4813,37,4276,37],[4813,39,4276,39],[4814,6,4277,8],[4814,12,4277,14,"request"],[4814,19,4277,21],[4814,22,4277,24],[4814,26,4277,28],[4814,27,4277,29,"buildRequest"],[4814,39,4277,41],[4814,40,4277,42],[4814,41,4277,43],[4815,6,4278,8,"request"],[4815,13,4278,15],[4815,14,4278,16,"autoCreate"],[4815,24,4278,26],[4815,27,4278,29],[4815,32,4278,34],[4816,6,4279,8],[4816,13,4279,15,"signInWithIdp"],[4816,26,4279,28],[4816,27,4279,29,"auth"],[4816,31,4279,33],[4816,33,4279,35,"request"],[4816,40,4279,42],[4816,41,4279,43],[4817,4,4280,4],[4818,4,4281,4,"buildRequest"],[4818,16,4281,16,"buildRequest"],[4818,17,4281,16],[4818,19,4281,19],[4819,6,4282,8],[4819,12,4282,14,"request"],[4819,19,4282,21],[4819,22,4282,24],[4820,8,4283,12,"requestUri"],[4820,18,4283,22],[4820,20,4283,24,"IDP_REQUEST_URI$1"],[4820,37,4283,41],[4821,8,4284,12,"returnSecureToken"],[4821,25,4284,29],[4821,27,4284,31],[4822,6,4285,8],[4822,7,4285,9],[4823,6,4286,8],[4823,10,4286,12],[4823,14,4286,16],[4823,15,4286,17,"pendingToken"],[4823,27,4286,29],[4823,29,4286,31],[4824,8,4287,12,"request"],[4824,15,4287,19],[4824,16,4287,20,"pendingToken"],[4824,28,4287,32],[4824,31,4287,35],[4824,35,4287,39],[4824,36,4287,40,"pendingToken"],[4824,48,4287,52],[4825,6,4288,8],[4825,7,4288,9],[4825,13,4289,13],[4826,8,4290,12],[4826,14,4290,18,"postBody"],[4826,22,4290,26],[4826,25,4290,29],[4826,26,4290,30],[4826,27,4290,31],[4827,8,4291,12],[4827,12,4291,16],[4827,16,4291,20],[4827,17,4291,21,"idToken"],[4827,24,4291,28],[4827,26,4291,30],[4828,10,4292,16,"postBody"],[4828,18,4292,24],[4828,19,4292,25],[4828,29,4292,35],[4828,30,4292,36],[4828,33,4292,39],[4828,37,4292,43],[4828,38,4292,44,"idToken"],[4828,45,4292,51],[4829,8,4293,12],[4830,8,4294,12],[4830,12,4294,16],[4830,16,4294,20],[4830,17,4294,21,"accessToken"],[4830,28,4294,32],[4830,30,4294,34],[4831,10,4295,16,"postBody"],[4831,18,4295,24],[4831,19,4295,25],[4831,33,4295,39],[4831,34,4295,40],[4831,37,4295,43],[4831,41,4295,47],[4831,42,4295,48,"accessToken"],[4831,53,4295,59],[4832,8,4296,12],[4833,8,4297,12],[4833,12,4297,16],[4833,16,4297,20],[4833,17,4297,21,"secret"],[4833,23,4297,27],[4833,25,4297,29],[4834,10,4298,16,"postBody"],[4834,18,4298,24],[4834,19,4298,25],[4834,39,4298,45],[4834,40,4298,46],[4834,43,4298,49],[4834,47,4298,53],[4834,48,4298,54,"secret"],[4834,54,4298,60],[4835,8,4299,12],[4836,8,4300,12,"postBody"],[4836,16,4300,20],[4836,17,4300,21],[4836,29,4300,33],[4836,30,4300,34],[4836,33,4300,37],[4836,37,4300,41],[4836,38,4300,42,"providerId"],[4836,48,4300,52],[4837,8,4301,12],[4837,12,4301,16],[4837,16,4301,20],[4837,17,4301,21,"nonce"],[4837,22,4301,26],[4837,26,4301,30],[4837,27,4301,31],[4837,31,4301,35],[4837,32,4301,36,"pendingToken"],[4837,44,4301,48],[4837,46,4301,50],[4838,10,4302,16,"postBody"],[4838,18,4302,24],[4838,19,4302,25],[4838,26,4302,32],[4838,27,4302,33],[4838,30,4302,36],[4838,34,4302,40],[4838,35,4302,41,"nonce"],[4838,40,4302,46],[4839,8,4303,12],[4840,8,4304,12,"request"],[4840,15,4304,19],[4840,16,4304,20,"postBody"],[4840,24,4304,28],[4840,27,4304,31],[4840,31,4304,31,"querystring"],[4840,44,4304,42],[4840,45,4304,42,"querystring"],[4840,56,4304,42],[4840,58,4304,43,"postBody"],[4840,66,4304,51],[4840,67,4304,52],[4841,6,4305,8],[4842,6,4306,8],[4842,13,4306,15,"request"],[4842,20,4306,22],[4843,4,4307,4],[4844,2,4308,0],[4846,2,4310,0],[4847,0,4311,0],[4848,0,4312,0],[4849,0,4313,0],[4850,0,4314,0],[4851,0,4315,0],[4852,0,4316,0],[4853,0,4317,0],[4854,0,4318,0],[4855,0,4319,0],[4856,0,4320,0],[4857,0,4321,0],[4858,0,4322,0],[4859,0,4323,0],[4860,0,4324,0],[4861,0,4325,0],[4862,2,4326,0],[4862,17,4326,15,"sendPhoneVerificationCode"],[4862,42,4326,40,"sendPhoneVerificationCode"],[4862,43,4326,41,"auth"],[4862,47,4326,45],[4862,49,4326,47,"request"],[4862,56,4326,54],[4862,58,4326,56],[4863,4,4327,4],[4863,11,4327,11,"_performApiRequest"],[4863,29,4327,29],[4863,30,4327,30,"auth"],[4863,34,4327,34],[4863,36,4327,36],[4863,42,4327,42],[4863,43,4327,43],[4863,66,4327,66],[4863,101,4327,101],[4863,102,4327,102],[4863,141,4327,141,"_addTidIfNecessary"],[4863,159,4327,159],[4863,160,4327,160,"auth"],[4863,164,4327,164],[4863,166,4327,166,"request"],[4863,173,4327,173],[4863,174,4327,174],[4863,175,4327,175],[4864,2,4328,0],[4865,2,4329,0],[4865,17,4329,15,"signInWithPhoneNumber$1"],[4865,40,4329,38,"signInWithPhoneNumber$1"],[4865,41,4329,39,"auth"],[4865,45,4329,43],[4865,47,4329,45,"request"],[4865,54,4329,52],[4865,56,4329,54],[4866,4,4330,4],[4866,11,4330,11,"_performSignInRequest"],[4866,32,4330,32],[4866,33,4330,33,"auth"],[4866,37,4330,37],[4866,39,4330,39],[4866,45,4330,45],[4866,46,4330,46],[4866,69,4330,69],[4866,105,4330,105],[4866,106,4330,106],[4866,148,4330,148,"_addTidIfNecessary"],[4866,166,4330,166],[4866,167,4330,167,"auth"],[4866,171,4330,171],[4866,173,4330,173,"request"],[4866,180,4330,180],[4866,181,4330,181],[4866,182,4330,182],[4867,2,4331,0],[4868,2,4332,0],[4868,17,4332,15,"linkWithPhoneNumber$1"],[4868,38,4332,36,"linkWithPhoneNumber$1"],[4868,39,4332,37,"auth"],[4868,43,4332,41],[4868,45,4332,43,"request"],[4868,52,4332,50],[4868,54,4332,52],[4869,4,4333,4],[4869,10,4333,10,"response"],[4869,18,4333,18],[4869,21,4333,21],[4869,27,4333,27,"_performSignInRequest"],[4869,48,4333,48],[4869,49,4333,49,"auth"],[4869,53,4333,53],[4869,55,4333,55],[4869,61,4333,61],[4869,62,4333,62],[4869,85,4333,85],[4869,121,4333,121],[4869,122,4333,122],[4869,164,4333,164,"_addTidIfNecessary"],[4869,182,4333,182],[4869,183,4333,183,"auth"],[4869,187,4333,187],[4869,189,4333,189,"request"],[4869,196,4333,196],[4869,197,4333,197],[4869,198,4333,198],[4870,4,4334,4],[4870,8,4334,8,"response"],[4870,16,4334,16],[4870,17,4334,17,"temporaryProof"],[4870,31,4334,31],[4870,33,4334,33],[4871,6,4335,8],[4871,12,4335,14,"_makeTaggedError"],[4871,28,4335,30],[4871,29,4335,31,"auth"],[4871,33,4335,35],[4871,35,4335,37],[4871,77,4335,79],[4871,78,4335,80],[4871,117,4335,119,"response"],[4871,125,4335,127],[4871,126,4335,128],[4872,4,4336,4],[4873,4,4337,4],[4873,11,4337,11,"response"],[4873,19,4337,19],[4874,2,4338,0],[4875,2,4339,0],[4875,8,4339,6,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4875,51,4339,49],[4875,54,4339,52],[4876,4,4340,4],[4876,5,4340,5],[4876,21,4340,21],[4876,22,4340,22],[4876,57,4340,57],[4876,73,4340,73],[4876,74,4340,74],[4877,2,4341,0],[4877,3,4341,1],[4878,2,4342,0],[4878,17,4342,15,"verifyPhoneNumberForExisting"],[4878,45,4342,43,"verifyPhoneNumberForExisting"],[4878,46,4342,44,"auth"],[4878,50,4342,48],[4878,52,4342,50,"request"],[4878,59,4342,57],[4878,61,4342,59],[4879,4,4343,4],[4879,10,4343,10,"apiRequest"],[4879,20,4343,20],[4879,23,4343,23],[4880,6,4344,8],[4880,9,4344,11,"request"],[4880,16,4344,18],[4881,6,4345,8,"operation"],[4881,15,4345,17],[4881,17,4345,19],[4882,4,4346,4],[4882,5,4346,5],[4883,4,4347,4],[4883,11,4347,11,"_performSignInRequest"],[4883,32,4347,32],[4883,33,4347,33,"auth"],[4883,37,4347,37],[4883,39,4347,39],[4883,45,4347,45],[4883,46,4347,46],[4883,69,4347,69],[4883,105,4347,105],[4883,106,4347,106],[4883,148,4347,148,"_addTidIfNecessary"],[4883,166,4347,166],[4883,167,4347,167,"auth"],[4883,171,4347,171],[4883,173,4347,173,"apiRequest"],[4883,183,4347,183],[4883,184,4347,184],[4883,186,4347,186,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4883,229,4347,229],[4883,230,4347,230],[4884,2,4348,0],[4886,2,4350,0],[4887,0,4351,0],[4888,0,4352,0],[4889,0,4353,0],[4890,0,4354,0],[4891,0,4355,0],[4892,0,4356,0],[4893,0,4357,0],[4894,0,4358,0],[4895,0,4359,0],[4896,0,4360,0],[4897,0,4361,0],[4898,0,4362,0],[4899,0,4363,0],[4900,0,4364,0],[4901,0,4365,0],[4902,2,4366,0],[4903,0,4367,0],[4904,0,4368,0],[4905,0,4369,0],[4906,0,4370,0],[4907,2,4371,0],[4907,8,4371,6,"PhoneAuthCredential"],[4907,27,4371,25],[4907,36,4371,34,"AuthCredential"],[4907,50,4371,48],[4907,51,4371,49],[4908,4,4372,4,"constructor"],[4908,15,4372,15,"constructor"],[4908,16,4372,16,"params"],[4908,22,4372,22],[4908,24,4372,24],[4909,6,4373,8],[4909,11,4373,13],[4909,12,4373,14],[4909,19,4373,21],[4909,20,4373,22],[4909,44,4373,46],[4909,51,4373,53],[4909,52,4373,54],[4909,76,4373,78],[4909,77,4373,79],[4910,6,4374,8],[4910,10,4374,12],[4910,11,4374,13,"params"],[4910,17,4374,19],[4910,20,4374,22,"params"],[4910,26,4374,28],[4911,4,4375,4],[4912,4,4376,4],[4913,4,4377,4],[4913,11,4377,11,"_fromVerification"],[4913,28,4377,28,"_fromVerification"],[4913,29,4377,29,"verificationId"],[4913,43,4377,43],[4913,45,4377,45,"verificationCode"],[4913,61,4377,61],[4913,63,4377,63],[4914,6,4378,8],[4914,13,4378,15],[4914,17,4378,19,"PhoneAuthCredential"],[4914,36,4378,38],[4914,37,4378,39],[4915,8,4378,41,"verificationId"],[4915,22,4378,55],[4916,8,4378,57,"verificationCode"],[4917,6,4378,74],[4917,7,4378,75],[4917,8,4378,76],[4918,4,4379,4],[4919,4,4380,4],[4920,4,4381,4],[4920,11,4381,11,"_fromTokenResponse"],[4920,29,4381,29,"_fromTokenResponse"],[4920,30,4381,30,"phoneNumber"],[4920,41,4381,41],[4920,43,4381,43,"temporaryProof"],[4920,57,4381,57],[4920,59,4381,59],[4921,6,4382,8],[4921,13,4382,15],[4921,17,4382,19,"PhoneAuthCredential"],[4921,36,4382,38],[4921,37,4382,39],[4922,8,4382,41,"phoneNumber"],[4922,19,4382,52],[4923,8,4382,54,"temporaryProof"],[4924,6,4382,69],[4924,7,4382,70],[4924,8,4382,71],[4925,4,4383,4],[4926,4,4384,4],[4927,4,4385,4,"_getIdTokenResponse"],[4927,23,4385,23,"_getIdTokenResponse"],[4927,24,4385,24,"auth"],[4927,28,4385,28],[4927,30,4385,30],[4928,6,4386,8],[4928,13,4386,15,"signInWithPhoneNumber$1"],[4928,36,4386,38],[4928,37,4386,39,"auth"],[4928,41,4386,43],[4928,43,4386,45],[4928,47,4386,49],[4928,48,4386,50,"_makeVerificationRequest"],[4928,72,4386,74],[4928,73,4386,75],[4928,74,4386,76],[4928,75,4386,77],[4929,4,4387,4],[4930,4,4388,4],[4931,4,4389,4,"_linkToIdToken"],[4931,18,4389,18,"_linkToIdToken"],[4931,19,4389,19,"auth"],[4931,23,4389,23],[4931,25,4389,25,"idToken"],[4931,32,4389,32],[4931,34,4389,34],[4932,6,4390,8],[4932,13,4390,15,"linkWithPhoneNumber$1"],[4932,34,4390,36],[4932,35,4390,37,"auth"],[4932,39,4390,41],[4932,41,4390,43],[4933,8,4391,12,"idToken"],[4933,15,4391,19],[4934,8,4392,12],[4934,11,4392,15],[4934,15,4392,19],[4934,16,4392,20,"_makeVerificationRequest"],[4934,40,4392,44],[4934,41,4392,45],[4935,6,4393,8],[4935,7,4393,9],[4935,8,4393,10],[4936,4,4394,4],[4937,4,4395,4],[4938,4,4396,4,"_getReauthenticationResolver"],[4938,32,4396,32,"_getReauthenticationResolver"],[4938,33,4396,33,"auth"],[4938,37,4396,37],[4938,39,4396,39],[4939,6,4397,8],[4939,13,4397,15,"verifyPhoneNumberForExisting"],[4939,41,4397,43],[4939,42,4397,44,"auth"],[4939,46,4397,48],[4939,48,4397,50],[4939,52,4397,54],[4939,53,4397,55,"_makeVerificationRequest"],[4939,77,4397,79],[4939,78,4397,80],[4939,79,4397,81],[4939,80,4397,82],[4940,4,4398,4],[4941,4,4399,4],[4942,4,4400,4,"_makeVerificationRequest"],[4942,28,4400,28,"_makeVerificationRequest"],[4942,29,4400,28],[4942,31,4400,31],[4943,6,4401,8],[4943,12,4401,14],[4944,8,4401,16,"temporaryProof"],[4944,22,4401,30],[4945,8,4401,32,"phoneNumber"],[4945,19,4401,43],[4946,8,4401,45,"verificationId"],[4946,22,4401,59],[4947,8,4401,61,"verificationCode"],[4948,6,4401,78],[4948,7,4401,79],[4948,10,4401,82],[4948,14,4401,86],[4948,15,4401,87,"params"],[4948,21,4401,93],[4949,6,4402,8],[4949,10,4402,12,"temporaryProof"],[4949,24,4402,26],[4949,28,4402,30,"phoneNumber"],[4949,39,4402,41],[4949,41,4402,43],[4950,8,4403,12],[4950,15,4403,19],[4951,10,4403,21,"temporaryProof"],[4951,24,4403,35],[4952,10,4403,37,"phoneNumber"],[4953,8,4403,49],[4953,9,4403,50],[4954,6,4404,8],[4955,6,4405,8],[4955,13,4405,15],[4956,8,4406,12,"sessionInfo"],[4956,19,4406,23],[4956,21,4406,25,"verificationId"],[4956,35,4406,39],[4957,8,4407,12,"code"],[4957,12,4407,16],[4957,14,4407,18,"verificationCode"],[4958,6,4408,8],[4958,7,4408,9],[4959,4,4409,4],[4960,4,4410,4],[4961,4,4411,4,"toJSON"],[4961,10,4411,10,"toJSON"],[4961,11,4411,10],[4961,13,4411,13],[4962,6,4412,8],[4962,12,4412,14,"obj"],[4962,15,4412,17],[4962,18,4412,20],[4963,8,4413,12,"providerId"],[4963,18,4413,22],[4963,20,4413,24],[4963,24,4413,28],[4963,25,4413,29,"providerId"],[4964,6,4414,8],[4964,7,4414,9],[4965,6,4415,8],[4965,10,4415,12],[4965,14,4415,16],[4965,15,4415,17,"params"],[4965,21,4415,23],[4965,22,4415,24,"phoneNumber"],[4965,33,4415,35],[4965,35,4415,37],[4966,8,4416,12,"obj"],[4966,11,4416,15],[4966,12,4416,16,"phoneNumber"],[4966,23,4416,27],[4966,26,4416,30],[4966,30,4416,34],[4966,31,4416,35,"params"],[4966,37,4416,41],[4966,38,4416,42,"phoneNumber"],[4966,49,4416,53],[4967,6,4417,8],[4968,6,4418,8],[4968,10,4418,12],[4968,14,4418,16],[4968,15,4418,17,"params"],[4968,21,4418,23],[4968,22,4418,24,"temporaryProof"],[4968,36,4418,38],[4968,38,4418,40],[4969,8,4419,12,"obj"],[4969,11,4419,15],[4969,12,4419,16,"temporaryProof"],[4969,26,4419,30],[4969,29,4419,33],[4969,33,4419,37],[4969,34,4419,38,"params"],[4969,40,4419,44],[4969,41,4419,45,"temporaryProof"],[4969,55,4419,59],[4970,6,4420,8],[4971,6,4421,8],[4971,10,4421,12],[4971,14,4421,16],[4971,15,4421,17,"params"],[4971,21,4421,23],[4971,22,4421,24,"verificationCode"],[4971,38,4421,40],[4971,40,4421,42],[4972,8,4422,12,"obj"],[4972,11,4422,15],[4972,12,4422,16,"verificationCode"],[4972,28,4422,32],[4972,31,4422,35],[4972,35,4422,39],[4972,36,4422,40,"params"],[4972,42,4422,46],[4972,43,4422,47,"verificationCode"],[4972,59,4422,63],[4973,6,4423,8],[4974,6,4424,8],[4974,10,4424,12],[4974,14,4424,16],[4974,15,4424,17,"params"],[4974,21,4424,23],[4974,22,4424,24,"verificationId"],[4974,36,4424,38],[4974,38,4424,40],[4975,8,4425,12,"obj"],[4975,11,4425,15],[4975,12,4425,16,"verificationId"],[4975,26,4425,30],[4975,29,4425,33],[4975,33,4425,37],[4975,34,4425,38,"params"],[4975,40,4425,44],[4975,41,4425,45,"verificationId"],[4975,55,4425,59],[4976,6,4426,8],[4977,6,4427,8],[4977,13,4427,15,"obj"],[4977,16,4427,18],[4978,4,4428,4],[4979,4,4429,4],[4980,4,4430,4],[4980,11,4430,11,"fromJSON"],[4980,19,4430,19,"fromJSON"],[4980,20,4430,20,"json"],[4980,24,4430,24],[4980,26,4430,26],[4981,6,4431,8],[4981,10,4431,12],[4981,17,4431,19,"json"],[4981,21,4431,23],[4981,26,4431,28],[4981,34,4431,36],[4981,36,4431,38],[4982,8,4432,12,"json"],[4982,12,4432,16],[4982,15,4432,19,"JSON"],[4982,19,4432,23],[4982,20,4432,24,"parse"],[4982,25,4432,29],[4982,26,4432,30,"json"],[4982,30,4432,34],[4982,31,4432,35],[4983,6,4433,8],[4984,6,4434,8],[4984,12,4434,14],[4985,8,4434,16,"verificationId"],[4985,22,4434,30],[4986,8,4434,32,"verificationCode"],[4986,24,4434,48],[4987,8,4434,50,"phoneNumber"],[4987,19,4434,61],[4988,8,4434,63,"temporaryProof"],[4989,6,4434,78],[4989,7,4434,79],[4989,10,4434,82,"json"],[4989,14,4434,86],[4990,6,4435,8],[4990,10,4435,12],[4990,11,4435,13,"verificationCode"],[4990,27,4435,29],[4990,31,4436,12],[4990,32,4436,13,"verificationId"],[4990,46,4436,27],[4990,50,4437,12],[4990,51,4437,13,"phoneNumber"],[4990,62,4437,24],[4990,66,4438,12],[4990,67,4438,13,"temporaryProof"],[4990,81,4438,27],[4990,83,4438,29],[4991,8,4439,12],[4991,15,4439,19],[4991,19,4439,23],[4992,6,4440,8],[4993,6,4441,8],[4993,13,4441,15],[4993,17,4441,19,"PhoneAuthCredential"],[4993,36,4441,38],[4993,37,4441,39],[4994,8,4442,12,"verificationId"],[4994,22,4442,26],[4995,8,4443,12,"verificationCode"],[4995,24,4443,28],[4996,8,4444,12,"phoneNumber"],[4996,19,4444,23],[4997,8,4445,12,"temporaryProof"],[4998,6,4446,8],[4998,7,4446,9],[4998,8,4446,10],[4999,4,4447,4],[5000,2,4448,0],[5002,2,4450,0],[5003,0,4451,0],[5004,0,4452,0],[5005,0,4453,0],[5006,0,4454,0],[5007,0,4455,0],[5008,0,4456,0],[5009,0,4457,0],[5010,0,4458,0],[5011,0,4459,0],[5012,0,4460,0],[5013,0,4461,0],[5014,0,4462,0],[5015,0,4463,0],[5016,0,4464,0],[5017,0,4465,0],[5018,2,4466,0],[5019,0,4467,0],[5020,0,4468,0],[5021,0,4469,0],[5022,0,4470,0],[5023,2,4471,0],[5023,11,4471,9,"parseMode"],[5023,20,4471,18,"parseMode"],[5023,21,4471,19,"mode"],[5023,25,4471,23],[5023,27,4471,25],[5024,4,4472,4],[5024,12,4472,12,"mode"],[5024,16,4472,16],[5025,6,4473,8],[5025,11,4473,13],[5025,25,4473,27],[5026,8,4474,12],[5026,15,4474,19],[5026,30,4474,34],[5026,31,4474,35],[5027,6,4475,8],[5027,11,4475,13],[5027,26,4475,28],[5028,8,4476,12],[5028,15,4476,19],[5028,31,4476,35],[5028,32,4476,36],[5029,6,4477,8],[5029,11,4477,13],[5029,19,4477,21],[5030,8,4478,12],[5030,15,4478,19],[5030,29,4478,33],[5030,30,4478,34],[5031,6,4479,8],[5031,11,4479,13],[5031,24,4479,26],[5032,8,4480,12],[5032,15,4480,19],[5032,29,4480,33],[5032,30,4480,34],[5033,6,4481,8],[5033,11,4481,13],[5033,33,4481,35],[5034,8,4482,12],[5034,15,4482,19],[5034,40,4482,44],[5034,41,4482,45],[5035,6,4483,8],[5035,11,4483,13],[5035,39,4483,41],[5036,8,4484,12],[5036,15,4484,19],[5036,46,4484,50],[5036,47,4484,51],[5037,6,4485,8],[5038,8,4486,12],[5038,15,4486,19],[5038,19,4486,23],[5039,4,4487,4],[5040,2,4488,0],[5041,2,4489,0],[5042,0,4490,0],[5043,0,4491,0],[5044,0,4492,0],[5045,0,4493,0],[5046,2,4494,0],[5046,11,4494,9,"parseDeepLink"],[5046,24,4494,22,"parseDeepLink"],[5046,25,4494,23,"url"],[5046,28,4494,26],[5046,30,4494,28],[5047,4,4495,4],[5047,10,4495,10,"link"],[5047,14,4495,14],[5047,17,4495,17],[5047,21,4495,17,"querystringDecode"],[5047,34,4495,34],[5047,35,4495,34,"querystringDecode"],[5047,52,4495,34],[5047,54,4495,35],[5047,58,4495,35,"extractQuerystring"],[5047,71,4495,53],[5047,72,4495,53,"extractQuerystring"],[5047,90,4495,53],[5047,92,4495,54,"url"],[5047,95,4495,57],[5047,96,4495,58],[5047,97,4495,59],[5047,98,4495,60],[5047,104,4495,66],[5047,105,4495,67],[5048,4,4496,4],[5049,4,4497,4],[5049,10,4497,10,"doubleDeepLink"],[5049,24,4497,24],[5049,27,4497,27,"link"],[5049,31,4497,31],[5049,34,4498,10],[5049,38,4498,10,"querystringDecode"],[5049,51,4498,27],[5049,52,4498,27,"querystringDecode"],[5049,69,4498,27],[5049,71,4498,28],[5049,75,4498,28,"extractQuerystring"],[5049,88,4498,46],[5049,89,4498,46,"extractQuerystring"],[5049,107,4498,46],[5049,109,4498,47,"link"],[5049,113,4498,51],[5049,114,4498,52],[5049,115,4498,53],[5049,116,4498,54],[5049,130,4498,68],[5049,131,4498,69],[5049,134,4499,10],[5049,138,4499,14],[5050,4,4500,4],[5051,4,4501,4],[5051,10,4501,10,"iOSDeepLink"],[5051,21,4501,21],[5051,24,4501,24],[5051,28,4501,24,"querystringDecode"],[5051,41,4501,41],[5051,42,4501,41,"querystringDecode"],[5051,59,4501,41],[5051,61,4501,42],[5051,65,4501,42,"extractQuerystring"],[5051,78,4501,60],[5051,79,4501,60,"extractQuerystring"],[5051,97,4501,60],[5051,99,4501,61,"url"],[5051,102,4501,64],[5051,103,4501,65],[5051,104,4501,66],[5051,105,4501,67],[5051,119,4501,81],[5051,120,4501,82],[5052,4,4502,4],[5052,10,4502,10,"iOSDoubleDeepLink"],[5052,27,4502,27],[5052,30,4502,30,"iOSDeepLink"],[5052,41,4502,41],[5052,44,4503,10],[5052,48,4503,10,"querystringDecode"],[5052,61,4503,27],[5052,62,4503,27,"querystringDecode"],[5052,79,4503,27],[5052,81,4503,28],[5052,85,4503,28,"extractQuerystring"],[5052,98,4503,46],[5052,99,4503,46,"extractQuerystring"],[5052,117,4503,46],[5052,119,4503,47,"iOSDeepLink"],[5052,130,4503,58],[5052,131,4503,59],[5052,132,4503,60],[5052,133,4503,61],[5052,139,4503,67],[5052,140,4503,68],[5052,143,4504,10],[5052,147,4504,14],[5053,4,4505,4],[5053,11,4505,11,"iOSDoubleDeepLink"],[5053,28,4505,28],[5053,32,4505,32,"iOSDeepLink"],[5053,43,4505,43],[5053,47,4505,47,"doubleDeepLink"],[5053,61,4505,61],[5053,65,4505,65,"link"],[5053,69,4505,69],[5053,73,4505,73,"url"],[5053,76,4505,76],[5054,2,4506,0],[5055,2,4507,0],[5056,0,4508,0],[5057,0,4509,0],[5058,0,4510,0],[5059,0,4511,0],[5060,0,4512,0],[5061,2,4513,0],[5061,8,4513,6,"ActionCodeURL"],[5061,21,4513,19],[5061,22,4513,20],[5062,4,4514,4],[5063,0,4515,0],[5064,0,4516,0],[5065,0,4517,0],[5066,0,4518,0],[5067,0,4519,0],[5068,4,4520,4,"constructor"],[5068,15,4520,15,"constructor"],[5068,16,4520,16,"actionLink"],[5068,26,4520,26],[5068,28,4520,28],[5069,6,4521,8],[5069,12,4521,14,"searchParams"],[5069,24,4521,26],[5069,27,4521,29],[5069,31,4521,29,"querystringDecode"],[5069,44,4521,46],[5069,45,4521,46,"querystringDecode"],[5069,62,4521,46],[5069,64,4521,47],[5069,68,4521,47,"extractQuerystring"],[5069,81,4521,65],[5069,82,4521,65,"extractQuerystring"],[5069,100,4521,65],[5069,102,4521,66,"actionLink"],[5069,112,4521,76],[5069,113,4521,77],[5069,114,4521,78],[5070,6,4522,8],[5070,12,4522,14,"apiKey"],[5070,18,4522,20],[5070,21,4522,23,"searchParams"],[5070,33,4522,35],[5070,34,4522,36],[5070,42,4522,44],[5070,43,4522,45],[5070,68,4522,70],[5070,72,4522,74],[5070,76,4522,78],[5071,6,4523,8],[5071,12,4523,14,"code"],[5071,16,4523,18],[5071,19,4523,21,"searchParams"],[5071,31,4523,33],[5071,32,4523,34],[5071,41,4523,43],[5071,42,4523,44],[5071,64,4523,66],[5071,68,4523,70],[5071,72,4523,74],[5072,6,4524,8],[5072,12,4524,14,"operation"],[5072,21,4524,23],[5072,24,4524,26,"parseMode"],[5072,33,4524,35],[5072,34,4524,36,"searchParams"],[5072,46,4524,48],[5072,47,4524,49],[5072,53,4524,55],[5072,54,4524,56],[5072,76,4524,78],[5072,80,4524,82],[5072,84,4524,86],[5072,85,4524,87],[5073,6,4525,8],[5074,6,4526,8,"_assert"],[5074,13,4526,15],[5074,14,4526,16,"apiKey"],[5074,20,4526,22],[5074,24,4526,26,"code"],[5074,28,4526,30],[5074,32,4526,34,"operation"],[5074,41,4526,43],[5074,43,4526,45],[5074,59,4526,61],[5074,60,4526,62],[5074,94,4526,96],[5074,95,4526,97],[5075,6,4527,8],[5075,10,4527,12],[5075,11,4527,13,"apiKey"],[5075,17,4527,19],[5075,20,4527,22,"apiKey"],[5075,26,4527,28],[5076,6,4528,8],[5076,10,4528,12],[5076,11,4528,13,"operation"],[5076,20,4528,22],[5076,23,4528,25,"operation"],[5076,32,4528,34],[5077,6,4529,8],[5077,10,4529,12],[5077,11,4529,13,"code"],[5077,15,4529,17],[5077,18,4529,20,"code"],[5077,22,4529,24],[5078,6,4530,8],[5078,10,4530,12],[5078,11,4530,13,"continueUrl"],[5078,22,4530,24],[5078,25,4530,27,"searchParams"],[5078,37,4530,39],[5078,38,4530,40],[5078,51,4530,53],[5078,52,4530,54],[5078,82,4530,84],[5078,86,4530,88],[5078,90,4530,92],[5079,6,4531,8],[5079,10,4531,12],[5079,11,4531,13,"languageCode"],[5079,23,4531,25],[5079,26,4531,28,"searchParams"],[5079,38,4531,40],[5079,39,4531,41],[5079,45,4531,47],[5079,46,4531,48],[5079,77,4531,79],[5079,81,4531,83],[5079,85,4531,87],[5080,6,4532,8],[5080,10,4532,12],[5080,11,4532,13,"tenantId"],[5080,19,4532,21],[5080,22,4532,24,"searchParams"],[5080,34,4532,36],[5080,35,4532,37],[5080,45,4532,47],[5080,46,4532,48],[5080,73,4532,75],[5080,77,4532,79],[5080,81,4532,83],[5081,4,4533,4],[5082,4,4534,4],[5083,0,4535,0],[5084,0,4536,0],[5085,0,4537,0],[5086,0,4538,0],[5087,0,4539,0],[5088,0,4540,0],[5089,0,4541,0],[5090,0,4542,0],[5091,4,4543,4],[5091,11,4543,11,"parseLink"],[5091,20,4543,20,"parseLink"],[5091,21,4543,21,"link"],[5091,25,4543,25],[5091,27,4543,27],[5092,6,4544,8],[5092,12,4544,14,"actionLink"],[5092,22,4544,24],[5092,25,4544,27,"parseDeepLink"],[5092,38,4544,40],[5092,39,4544,41,"link"],[5092,43,4544,45],[5092,44,4544,46],[5093,6,4545,8],[5093,10,4545,12],[5094,8,4546,12],[5094,15,4546,19],[5094,19,4546,23,"ActionCodeURL"],[5094,32,4546,36],[5094,33,4546,37,"actionLink"],[5094,43,4546,47],[5094,44,4546,48],[5095,6,4547,8],[5095,7,4547,9],[5095,8,4548,8],[5095,14,4548,14],[5096,8,4549,12],[5096,15,4549,19],[5096,19,4549,23],[5097,6,4550,8],[5098,4,4551,4],[5099,2,4552,0],[5100,2,4553,0],[5101,0,4554,0],[5102,0,4555,0],[5103,0,4556,0],[5104,0,4557,0],[5105,0,4558,0],[5106,2,4559,0],[5106,11,4559,9,"parseActionCodeURL"],[5106,29,4559,27,"parseActionCodeURL"],[5106,30,4559,28,"link"],[5106,34,4559,32],[5106,36,4559,34],[5107,4,4560,4],[5107,11,4560,11,"ActionCodeURL"],[5107,24,4560,24],[5107,25,4560,25,"parseLink"],[5107,34,4560,34],[5107,35,4560,35,"link"],[5107,39,4560,39],[5107,40,4560,40],[5108,2,4561,0],[5110,2,4563,0],[5111,0,4564,0],[5112,0,4565,0],[5113,0,4566,0],[5114,0,4567,0],[5115,0,4568,0],[5116,0,4569,0],[5117,0,4570,0],[5118,0,4571,0],[5119,0,4572,0],[5120,0,4573,0],[5121,0,4574,0],[5122,0,4575,0],[5123,0,4576,0],[5124,0,4577,0],[5125,0,4578,0],[5126,2,4579,0],[5127,0,4580,0],[5128,0,4581,0],[5129,0,4582,0],[5130,0,4583,0],[5131,2,4584,0],[5131,8,4584,6,"EmailAuthProvider"],[5131,25,4584,23],[5131,26,4584,24],[5132,4,4585,4,"constructor"],[5132,15,4585,15,"constructor"],[5132,16,4585,15],[5132,18,4585,18],[5133,6,4586,8],[5134,0,4587,0],[5135,0,4588,0],[5136,6,4589,8],[5136,10,4589,12],[5136,11,4589,13,"providerId"],[5136,21,4589,23],[5136,24,4589,26,"EmailAuthProvider"],[5136,41,4589,43],[5136,42,4589,44,"PROVIDER_ID"],[5136,53,4589,55],[5137,4,4590,4],[5138,4,4591,4],[5139,0,4592,0],[5140,0,4593,0],[5141,0,4594,0],[5142,0,4595,0],[5143,0,4596,0],[5144,0,4597,0],[5145,0,4598,0],[5146,0,4599,0],[5147,0,4600,0],[5148,0,4601,0],[5149,0,4602,0],[5150,0,4603,0],[5151,0,4604,0],[5152,0,4605,0],[5153,0,4606,0],[5154,0,4607,0],[5155,0,4608,0],[5156,4,4609,4],[5156,11,4609,11,"credential"],[5156,21,4609,21,"credential"],[5156,22,4609,22,"email"],[5156,27,4609,27],[5156,29,4609,29,"password"],[5156,37,4609,37],[5156,39,4609,39],[5157,6,4610,8],[5157,13,4610,15,"EmailAuthCredential"],[5157,32,4610,34],[5157,33,4610,35,"_fromEmailAndPassword"],[5157,54,4610,56],[5157,55,4610,57,"email"],[5157,60,4610,62],[5157,62,4610,64,"password"],[5157,70,4610,72],[5157,71,4610,73],[5158,4,4611,4],[5159,4,4612,4],[5160,0,4613,0],[5161,0,4614,0],[5162,0,4615,0],[5163,0,4616,0],[5164,0,4617,0],[5165,0,4618,0],[5166,0,4619,0],[5167,0,4620,0],[5168,0,4621,0],[5169,0,4622,0],[5170,0,4623,0],[5171,0,4624,0],[5172,0,4625,0],[5173,0,4626,0],[5174,0,4627,0],[5175,0,4628,0],[5176,0,4629,0],[5177,0,4630,0],[5178,0,4631,0],[5179,0,4632,0],[5180,0,4633,0],[5181,4,4634,4],[5181,11,4634,11,"credentialWithLink"],[5181,29,4634,29,"credentialWithLink"],[5181,30,4634,30,"email"],[5181,35,4634,35],[5181,37,4634,37,"emailLink"],[5181,46,4634,46],[5181,48,4634,48],[5182,6,4635,8],[5182,12,4635,14,"actionCodeUrl"],[5182,25,4635,27],[5182,28,4635,30,"ActionCodeURL"],[5182,41,4635,43],[5182,42,4635,44,"parseLink"],[5182,51,4635,53],[5182,52,4635,54,"emailLink"],[5182,61,4635,63],[5182,62,4635,64],[5183,6,4636,8,"_assert"],[5183,13,4636,15],[5183,14,4636,16,"actionCodeUrl"],[5183,27,4636,29],[5183,29,4636,31],[5183,45,4636,47],[5183,46,4636,48],[5183,80,4636,82],[5183,81,4636,83],[5184,6,4637,8],[5184,13,4637,15,"EmailAuthCredential"],[5184,32,4637,34],[5184,33,4637,35,"_fromEmailAndCode"],[5184,50,4637,52],[5184,51,4637,53,"email"],[5184,56,4637,58],[5184,58,4637,60,"actionCodeUrl"],[5184,71,4637,73],[5184,72,4637,74,"code"],[5184,76,4637,78],[5184,78,4637,80,"actionCodeUrl"],[5184,91,4637,93],[5184,92,4637,94,"tenantId"],[5184,100,4637,102],[5184,101,4637,103],[5185,4,4638,4],[5186,2,4639,0],[5187,2,4640,0],[5188,0,4641,0],[5189,0,4642,0],[5190,2,4643,0,"EmailAuthProvider"],[5190,19,4643,17],[5190,20,4643,18,"PROVIDER_ID"],[5190,31,4643,29],[5190,34,4643,32],[5190,44,4643,42],[5190,45,4643,43],[5191,2,4644,0],[5192,0,4645,0],[5193,0,4646,0],[5194,2,4647,0,"EmailAuthProvider"],[5194,19,4647,17],[5194,20,4647,18,"EMAIL_PASSWORD_SIGN_IN_METHOD"],[5194,49,4647,47],[5194,52,4647,50],[5194,62,4647,60],[5194,63,4647,61],[5195,2,4648,0],[5196,0,4649,0],[5197,0,4650,0],[5198,2,4651,0,"EmailAuthProvider"],[5198,19,4651,17],[5198,20,4651,18,"EMAIL_LINK_SIGN_IN_METHOD"],[5198,45,4651,43],[5198,48,4651,46],[5198,59,4651,57],[5198,60,4651,58],[5200,2,4653,0],[5201,0,4654,0],[5202,0,4655,0],[5203,0,4656,0],[5204,0,4657,0],[5205,0,4658,0],[5206,0,4659,0],[5207,0,4660,0],[5208,0,4661,0],[5209,0,4662,0],[5210,0,4663,0],[5211,0,4664,0],[5212,0,4665,0],[5213,0,4666,0],[5214,0,4667,0],[5215,0,4668,0],[5216,2,4669,0],[5217,0,4670,0],[5218,0,4671,0],[5219,0,4672,0],[5220,0,4673,0],[5221,0,4674,0],[5222,0,4675,0],[5223,2,4676,0],[5223,8,4676,6,"FederatedAuthProvider"],[5223,29,4676,27],[5223,30,4676,28],[5224,4,4677,4],[5225,0,4678,0],[5226,0,4679,0],[5227,0,4680,0],[5228,0,4681,0],[5229,4,4682,4,"constructor"],[5229,15,4682,15,"constructor"],[5229,16,4682,16,"providerId"],[5229,26,4682,26],[5229,28,4682,28],[5230,6,4683,8],[5230,10,4683,12],[5230,11,4683,13,"providerId"],[5230,21,4683,23],[5230,24,4683,26,"providerId"],[5230,34,4683,36],[5231,6,4684,8],[5232,6,4685,8],[5232,10,4685,12],[5232,11,4685,13,"defaultLanguageCode"],[5232,30,4685,32],[5232,33,4685,35],[5232,37,4685,39],[5233,6,4686,8],[5234,6,4687,8],[5234,10,4687,12],[5234,11,4687,13,"customParameters"],[5234,27,4687,29],[5234,30,4687,32],[5234,31,4687,33],[5234,32,4687,34],[5235,4,4688,4],[5236,4,4689,4],[5237,0,4690,0],[5238,0,4691,0],[5239,0,4692,0],[5240,0,4693,0],[5241,4,4694,4,"setDefaultLanguage"],[5241,22,4694,22,"setDefaultLanguage"],[5241,23,4694,23,"languageCode"],[5241,35,4694,35],[5241,37,4694,37],[5242,6,4695,8],[5242,10,4695,12],[5242,11,4695,13,"defaultLanguageCode"],[5242,30,4695,32],[5242,33,4695,35,"languageCode"],[5242,45,4695,47],[5243,4,4696,4],[5244,4,4697,4],[5245,0,4698,0],[5246,0,4699,0],[5247,0,4700,0],[5248,0,4701,0],[5249,0,4702,0],[5250,0,4703,0],[5251,0,4704,0],[5252,0,4705,0],[5253,0,4706,0],[5254,4,4707,4,"setCustomParameters"],[5254,23,4707,23,"setCustomParameters"],[5254,24,4707,24,"customOAuthParameters"],[5254,45,4707,45],[5254,47,4707,47],[5255,6,4708,8],[5255,10,4708,12],[5255,11,4708,13,"customParameters"],[5255,27,4708,29],[5255,30,4708,32,"customOAuthParameters"],[5255,51,4708,53],[5256,6,4709,8],[5256,13,4709,15],[5256,17,4709,19],[5257,4,4710,4],[5258,4,4711,4],[5259,0,4712,0],[5260,0,4713,0],[5261,4,4714,4,"getCustomParameters"],[5261,23,4714,23,"getCustomParameters"],[5261,24,4714,23],[5261,26,4714,26],[5262,6,4715,8],[5262,13,4715,15],[5262,17,4715,19],[5262,18,4715,20,"customParameters"],[5262,34,4715,36],[5263,4,4716,4],[5264,2,4717,0],[5266,2,4719,0],[5267,0,4720,0],[5268,0,4721,0],[5269,0,4722,0],[5270,0,4723,0],[5271,0,4724,0],[5272,0,4725,0],[5273,0,4726,0],[5274,0,4727,0],[5275,0,4728,0],[5276,0,4729,0],[5277,0,4730,0],[5278,0,4731,0],[5279,0,4732,0],[5280,0,4733,0],[5281,0,4734,0],[5282,2,4735,0],[5283,0,4736,0],[5284,0,4737,0],[5285,0,4738,0],[5286,0,4739,0],[5287,0,4740,0],[5288,2,4741,0],[5288,8,4741,6,"BaseOAuthProvider"],[5288,25,4741,23],[5288,34,4741,32,"FederatedAuthProvider"],[5288,55,4741,53],[5288,56,4741,54],[5289,4,4742,4,"constructor"],[5289,15,4742,15,"constructor"],[5289,16,4742,15],[5289,18,4742,18],[5290,6,4743,8],[5290,11,4743,13],[5290,12,4743,14],[5290,15,4743,17,"arguments"],[5290,24,4743,26],[5290,25,4743,27],[5291,6,4744,8],[5292,6,4745,8],[5292,10,4745,12],[5292,11,4745,13,"scopes"],[5292,17,4745,19],[5292,20,4745,22],[5292,22,4745,24],[5293,4,4746,4],[5294,4,4747,4],[5295,0,4748,0],[5296,0,4749,0],[5297,0,4750,0],[5298,0,4751,0],[5299,4,4752,4,"addScope"],[5299,12,4752,12,"addScope"],[5299,13,4752,13,"scope"],[5299,18,4752,18],[5299,20,4752,20],[5300,6,4753,8],[5301,6,4754,8],[5301,10,4754,12],[5301,11,4754,13],[5301,15,4754,17],[5301,16,4754,18,"scopes"],[5301,22,4754,24],[5301,23,4754,25,"includes"],[5301,31,4754,33],[5301,32,4754,34,"scope"],[5301,37,4754,39],[5301,38,4754,40],[5301,40,4754,42],[5302,8,4755,12],[5302,12,4755,16],[5302,13,4755,17,"scopes"],[5302,19,4755,23],[5302,20,4755,24,"push"],[5302,24,4755,28],[5302,25,4755,29,"scope"],[5302,30,4755,34],[5302,31,4755,35],[5303,6,4756,8],[5304,6,4757,8],[5304,13,4757,15],[5304,17,4757,19],[5305,4,4758,4],[5306,4,4759,4],[5307,0,4760,0],[5308,0,4761,0],[5309,4,4762,4,"getScopes"],[5309,13,4762,13,"getScopes"],[5309,14,4762,13],[5309,16,4762,16],[5310,6,4763,8],[5310,13,4763,15],[5310,14,4763,16],[5310,17,4763,19],[5310,21,4763,23],[5310,22,4763,24,"scopes"],[5310,28,4763,30],[5310,29,4763,31],[5311,4,4764,4],[5312,2,4765,0],[5313,2,4766,0],[5314,0,4767,0],[5315,0,4768,0],[5316,0,4769,0],[5317,0,4770,0],[5318,0,4771,0],[5319,0,4772,0],[5320,0,4773,0],[5321,0,4774,0],[5322,0,4775,0],[5323,0,4776,0],[5324,0,4777,0],[5325,0,4778,0],[5326,0,4779,0],[5327,0,4780,0],[5328,0,4781,0],[5329,0,4782,0],[5330,0,4783,0],[5331,0,4784,0],[5332,0,4785,0],[5333,0,4786,0],[5334,0,4787,0],[5335,0,4788,0],[5336,0,4789,0],[5337,0,4790,0],[5338,0,4791,0],[5339,0,4792,0],[5340,0,4793,0],[5341,0,4794,0],[5342,0,4795,0],[5343,0,4796,0],[5344,0,4797,0],[5345,0,4798,0],[5346,0,4799,0],[5347,0,4800,0],[5348,0,4801,0],[5349,0,4802,0],[5350,0,4803,0],[5351,0,4804,0],[5352,0,4805,0],[5353,2,4806,0],[5353,8,4806,6,"OAuthProvider"],[5353,21,4806,19],[5353,30,4806,28,"BaseOAuthProvider"],[5353,47,4806,45],[5353,48,4806,46],[5354,4,4807,4],[5355,0,4808,0],[5356,0,4809,0],[5357,0,4810,0],[5358,4,4811,4],[5358,11,4811,11,"credentialFromJSON"],[5358,29,4811,29,"credentialFromJSON"],[5358,30,4811,30,"json"],[5358,34,4811,34],[5358,36,4811,36],[5359,6,4812,8],[5359,12,4812,14,"obj"],[5359,15,4812,17],[5359,18,4812,20],[5359,25,4812,27,"json"],[5359,29,4812,31],[5359,34,4812,36],[5359,42,4812,44],[5359,45,4812,47,"JSON"],[5359,49,4812,51],[5359,50,4812,52,"parse"],[5359,55,4812,57],[5359,56,4812,58,"json"],[5359,60,4812,62],[5359,61,4812,63],[5359,64,4812,66,"json"],[5359,68,4812,70],[5360,6,4813,8,"_assert"],[5360,13,4813,15],[5360,14,4813,16],[5360,26,4813,28],[5360,30,4813,32,"obj"],[5360,33,4813,35],[5360,37,4813,39],[5360,51,4813,53],[5360,55,4813,57,"obj"],[5360,58,4813,60],[5360,60,4813,62],[5360,76,4813,78],[5360,77,4813,79],[5360,111,4813,113],[5360,112,4813,114],[5361,6,4814,8],[5361,13,4814,15,"OAuthCredential"],[5361,28,4814,30],[5361,29,4814,31,"_fromParams"],[5361,40,4814,42],[5361,41,4814,43,"obj"],[5361,44,4814,46],[5361,45,4814,47],[5362,4,4815,4],[5363,4,4816,4],[5364,0,4817,0],[5365,0,4818,0],[5366,0,4819,0],[5367,0,4820,0],[5368,0,4821,0],[5369,0,4822,0],[5370,0,4823,0],[5371,0,4824,0],[5372,0,4825,0],[5373,0,4826,0],[5374,0,4827,0],[5375,0,4828,0],[5376,0,4829,0],[5377,0,4830,0],[5378,0,4831,0],[5379,0,4832,0],[5380,0,4833,0],[5381,0,4834,0],[5382,0,4835,0],[5383,0,4836,0],[5384,4,4837,4,"credential"],[5384,14,4837,14,"credential"],[5384,15,4837,15,"params"],[5384,21,4837,21],[5384,23,4837,23],[5385,6,4838,8],[5385,13,4838,15],[5385,17,4838,19],[5385,18,4838,20,"_credential"],[5385,29,4838,31],[5385,30,4838,32],[5386,8,4838,34],[5386,11,4838,37,"params"],[5386,17,4838,43],[5387,8,4838,45,"nonce"],[5387,13,4838,50],[5387,15,4838,52,"params"],[5387,21,4838,58],[5387,22,4838,59,"rawNonce"],[5388,6,4838,68],[5388,7,4838,69],[5388,8,4838,70],[5389,4,4839,4],[5390,4,4840,4],[5391,4,4841,4,"_credential"],[5391,15,4841,15,"_credential"],[5391,16,4841,16,"params"],[5391,22,4841,22],[5391,24,4841,24],[5392,6,4842,8,"_assert"],[5392,13,4842,15],[5392,14,4842,16,"params"],[5392,20,4842,22],[5392,21,4842,23,"idToken"],[5392,28,4842,30],[5392,32,4842,34,"params"],[5392,38,4842,40],[5392,39,4842,41,"accessToken"],[5392,50,4842,52],[5392,52,4842,54],[5392,68,4842,70],[5392,69,4842,71],[5392,103,4842,105],[5392,104,4842,106],[5393,6,4843,8],[5394,6,4844,8],[5394,13,4844,15,"OAuthCredential"],[5394,28,4844,30],[5394,29,4844,31,"_fromParams"],[5394,40,4844,42],[5394,41,4844,43],[5395,8,4845,12],[5395,11,4845,15,"params"],[5395,17,4845,21],[5396,8,4846,12,"providerId"],[5396,18,4846,22],[5396,20,4846,24],[5396,24,4846,28],[5396,25,4846,29,"providerId"],[5396,35,4846,39],[5397,8,4847,12,"signInMethod"],[5397,20,4847,24],[5397,22,4847,26],[5397,26,4847,30],[5397,27,4847,31,"providerId"],[5398,6,4848,8],[5398,7,4848,9],[5398,8,4848,10],[5399,4,4849,4],[5400,4,4850,4],[5401,0,4851,0],[5402,0,4852,0],[5403,0,4853,0],[5404,0,4854,0],[5405,4,4855,4],[5405,11,4855,11,"credentialFromResult"],[5405,31,4855,31,"credentialFromResult"],[5405,32,4855,32,"userCredential"],[5405,46,4855,46],[5405,48,4855,48],[5406,6,4856,8],[5406,13,4856,15,"OAuthProvider"],[5406,26,4856,28],[5406,27,4856,29,"oauthCredentialFromTaggedObject"],[5406,58,4856,60],[5406,59,4856,61,"userCredential"],[5406,73,4856,75],[5406,74,4856,76],[5407,4,4857,4],[5408,4,4858,4],[5409,0,4859,0],[5410,0,4860,0],[5411,0,4861,0],[5412,0,4862,0],[5413,0,4863,0],[5414,4,4864,4],[5414,11,4864,11,"credentialFromError"],[5414,30,4864,30,"credentialFromError"],[5414,31,4864,31,"error"],[5414,36,4864,36],[5414,38,4864,38],[5415,6,4865,8],[5415,13,4865,15,"OAuthProvider"],[5415,26,4865,28],[5415,27,4865,29,"oauthCredentialFromTaggedObject"],[5415,58,4865,60],[5415,59,4865,62,"error"],[5415,64,4865,67],[5415,65,4865,68,"customData"],[5415,75,4865,78],[5415,79,4865,82],[5415,80,4865,83],[5415,81,4865,85],[5415,82,4865,86],[5416,4,4866,4],[5417,4,4867,4],[5417,11,4867,11,"oauthCredentialFromTaggedObject"],[5417,42,4867,42,"oauthCredentialFromTaggedObject"],[5417,43,4867,43],[5418,6,4867,45,"_tokenResponse"],[5418,20,4867,59],[5418,22,4867,61,"tokenResponse"],[5419,4,4867,75],[5419,5,4867,76],[5419,7,4867,78],[5420,6,4868,8],[5420,10,4868,12],[5420,11,4868,13,"tokenResponse"],[5420,24,4868,26],[5420,26,4868,28],[5421,8,4869,12],[5421,15,4869,19],[5421,19,4869,23],[5422,6,4870,8],[5423,6,4871,8],[5423,12,4871,14],[5424,8,4871,16,"oauthIdToken"],[5424,20,4871,28],[5425,8,4871,30,"oauthAccessToken"],[5425,24,4871,46],[5426,8,4871,48,"oauthTokenSecret"],[5426,24,4871,64],[5427,8,4871,66,"pendingToken"],[5427,20,4871,78],[5428,8,4871,80,"nonce"],[5428,13,4871,85],[5429,8,4871,87,"providerId"],[5430,6,4871,98],[5430,7,4871,99],[5430,10,4871,102,"tokenResponse"],[5430,23,4871,115],[5431,6,4872,8],[5431,10,4872,12],[5431,11,4872,13,"oauthAccessToken"],[5431,27,4872,29],[5431,31,4873,12],[5431,32,4873,13,"oauthTokenSecret"],[5431,48,4873,29],[5431,52,4874,12],[5431,53,4874,13,"oauthIdToken"],[5431,65,4874,25],[5431,69,4875,12],[5431,70,4875,13,"pendingToken"],[5431,82,4875,25],[5431,84,4875,27],[5432,8,4876,12],[5432,15,4876,19],[5432,19,4876,23],[5433,6,4877,8],[5434,6,4878,8],[5434,10,4878,12],[5434,11,4878,13,"providerId"],[5434,21,4878,23],[5434,23,4878,25],[5435,8,4879,12],[5435,15,4879,19],[5435,19,4879,23],[5436,6,4880,8],[5437,6,4881,8],[5437,10,4881,12],[5438,8,4882,12],[5438,15,4882,19],[5438,19,4882,23,"OAuthProvider"],[5438,32,4882,36],[5438,33,4882,37,"providerId"],[5438,43,4882,47],[5438,44,4882,48],[5438,45,4882,49,"_credential"],[5438,56,4882,60],[5438,57,4882,61],[5439,10,4883,16,"idToken"],[5439,17,4883,23],[5439,19,4883,25,"oauthIdToken"],[5439,31,4883,37],[5440,10,4884,16,"accessToken"],[5440,21,4884,27],[5440,23,4884,29,"oauthAccessToken"],[5440,39,4884,45],[5441,10,4885,16,"nonce"],[5441,15,4885,21],[5442,10,4886,16,"pendingToken"],[5443,8,4887,12],[5443,9,4887,13],[5443,10,4887,14],[5444,6,4888,8],[5444,7,4888,9],[5444,8,4889,8],[5444,15,4889,15,"e"],[5444,16,4889,16],[5444,18,4889,18],[5445,8,4890,12],[5445,15,4890,19],[5445,19,4890,23],[5446,6,4891,8],[5447,4,4892,4],[5448,2,4893,0],[5450,2,4895,0],[5451,0,4896,0],[5452,0,4897,0],[5453,0,4898,0],[5454,0,4899,0],[5455,0,4900,0],[5456,0,4901,0],[5457,0,4902,0],[5458,0,4903,0],[5459,0,4904,0],[5460,0,4905,0],[5461,0,4906,0],[5462,0,4907,0],[5463,0,4908,0],[5464,0,4909,0],[5465,0,4910,0],[5466,2,4911,0],[5467,0,4912,0],[5468,0,4913,0],[5469,0,4914,0],[5470,0,4915,0],[5471,0,4916,0],[5472,0,4917,0],[5473,0,4918,0],[5474,0,4919,0],[5475,0,4920,0],[5476,0,4921,0],[5477,0,4922,0],[5478,0,4923,0],[5479,0,4924,0],[5480,0,4925,0],[5481,0,4926,0],[5482,0,4927,0],[5483,0,4928,0],[5484,0,4929,0],[5485,0,4930,0],[5486,0,4931,0],[5487,0,4932,0],[5488,0,4933,0],[5489,0,4934,0],[5490,0,4935,0],[5491,0,4936,0],[5492,0,4937,0],[5493,0,4938,0],[5494,0,4939,0],[5495,0,4940,0],[5496,0,4941,0],[5497,0,4942,0],[5498,0,4943,0],[5499,0,4944,0],[5500,0,4945,0],[5501,0,4946,0],[5502,0,4947,0],[5503,0,4948,0],[5504,0,4949,0],[5505,2,4950,0],[5505,8,4950,6,"FacebookAuthProvider"],[5505,28,4950,26],[5505,37,4950,35,"BaseOAuthProvider"],[5505,54,4950,52],[5505,55,4950,53],[5506,4,4951,4,"constructor"],[5506,15,4951,15,"constructor"],[5506,16,4951,15],[5506,18,4951,18],[5507,6,4952,8],[5507,11,4952,13],[5507,12,4952,14],[5507,26,4952,28],[5507,27,4952,29],[5507,52,4952,54],[5507,53,4952,55],[5508,4,4953,4],[5509,4,4954,4],[5510,0,4955,0],[5511,0,4956,0],[5512,0,4957,0],[5513,0,4958,0],[5514,0,4959,0],[5515,0,4960,0],[5516,0,4961,0],[5517,0,4962,0],[5518,0,4963,0],[5519,0,4964,0],[5520,0,4965,0],[5521,4,4966,4],[5521,11,4966,11,"credential"],[5521,21,4966,21,"credential"],[5521,22,4966,22,"accessToken"],[5521,33,4966,33],[5521,35,4966,35],[5522,6,4967,8],[5522,13,4967,15,"OAuthCredential"],[5522,28,4967,30],[5522,29,4967,31,"_fromParams"],[5522,40,4967,42],[5522,41,4967,43],[5523,8,4968,12,"providerId"],[5523,18,4968,22],[5523,20,4968,24,"FacebookAuthProvider"],[5523,40,4968,44],[5523,41,4968,45,"PROVIDER_ID"],[5523,52,4968,56],[5524,8,4969,12,"signInMethod"],[5524,20,4969,24],[5524,22,4969,26,"FacebookAuthProvider"],[5524,42,4969,46],[5524,43,4969,47,"FACEBOOK_SIGN_IN_METHOD"],[5524,66,4969,70],[5525,8,4970,12,"accessToken"],[5526,6,4971,8],[5526,7,4971,9],[5526,8,4971,10],[5527,4,4972,4],[5528,4,4973,4],[5529,0,4974,0],[5530,0,4975,0],[5531,0,4976,0],[5532,0,4977,0],[5533,4,4978,4],[5533,11,4978,11,"credentialFromResult"],[5533,31,4978,31,"credentialFromResult"],[5533,32,4978,32,"userCredential"],[5533,46,4978,46],[5533,48,4978,48],[5534,6,4979,8],[5534,13,4979,15,"FacebookAuthProvider"],[5534,33,4979,35],[5534,34,4979,36,"credentialFromTaggedObject"],[5534,60,4979,62],[5534,61,4979,63,"userCredential"],[5534,75,4979,77],[5534,76,4979,78],[5535,4,4980,4],[5536,4,4981,4],[5537,0,4982,0],[5538,0,4983,0],[5539,0,4984,0],[5540,0,4985,0],[5541,0,4986,0],[5542,4,4987,4],[5542,11,4987,11,"credentialFromError"],[5542,30,4987,30,"credentialFromError"],[5542,31,4987,31,"error"],[5542,36,4987,36],[5542,38,4987,38],[5543,6,4988,8],[5543,13,4988,15,"FacebookAuthProvider"],[5543,33,4988,35],[5543,34,4988,36,"credentialFromTaggedObject"],[5543,60,4988,62],[5543,61,4988,64,"error"],[5543,66,4988,69],[5543,67,4988,70,"customData"],[5543,77,4988,80],[5543,81,4988,84],[5543,82,4988,85],[5543,83,4988,87],[5543,84,4988,88],[5544,4,4989,4],[5545,4,4990,4],[5545,11,4990,11,"credentialFromTaggedObject"],[5545,37,4990,37,"credentialFromTaggedObject"],[5545,38,4990,38],[5546,6,4990,40,"_tokenResponse"],[5546,20,4990,54],[5546,22,4990,56,"tokenResponse"],[5547,4,4990,70],[5547,5,4990,71],[5547,7,4990,73],[5548,6,4991,8],[5548,10,4991,12],[5548,11,4991,13,"tokenResponse"],[5548,24,4991,26],[5548,28,4991,30],[5548,30,4991,32],[5548,48,4991,50],[5548,52,4991,54,"tokenResponse"],[5548,65,4991,67],[5548,66,4991,68],[5548,68,4991,70],[5549,8,4992,12],[5549,15,4992,19],[5549,19,4992,23],[5550,6,4993,8],[5551,6,4994,8],[5551,10,4994,12],[5551,11,4994,13,"tokenResponse"],[5551,24,4994,26],[5551,25,4994,27,"oauthAccessToken"],[5551,41,4994,43],[5551,43,4994,45],[5552,8,4995,12],[5552,15,4995,19],[5552,19,4995,23],[5553,6,4996,8],[5554,6,4997,8],[5554,10,4997,12],[5555,8,4998,12],[5555,15,4998,19,"FacebookAuthProvider"],[5555,35,4998,39],[5555,36,4998,40,"credential"],[5555,46,4998,50],[5555,47,4998,51,"tokenResponse"],[5555,60,4998,64],[5555,61,4998,65,"oauthAccessToken"],[5555,77,4998,81],[5555,78,4998,82],[5556,6,4999,8],[5556,7,4999,9],[5556,8,5000,8],[5556,14,5000,14],[5557,8,5001,12],[5557,15,5001,19],[5557,19,5001,23],[5558,6,5002,8],[5559,4,5003,4],[5560,2,5004,0],[5561,2,5005,0],[5562,2,5006,0,"FacebookAuthProvider"],[5562,22,5006,20],[5562,23,5006,21,"FACEBOOK_SIGN_IN_METHOD"],[5562,46,5006,44],[5562,49,5006,47],[5562,63,5006,61],[5562,64,5006,62],[5563,2,5007,0],[5564,2,5008,0,"FacebookAuthProvider"],[5564,22,5008,20],[5564,23,5008,21,"PROVIDER_ID"],[5564,34,5008,32],[5564,37,5008,35],[5564,51,5008,49],[5564,52,5008,50],[5566,2,5010,0],[5567,0,5011,0],[5568,0,5012,0],[5569,0,5013,0],[5570,0,5014,0],[5571,0,5015,0],[5572,0,5016,0],[5573,0,5017,0],[5574,0,5018,0],[5575,0,5019,0],[5576,0,5020,0],[5577,0,5021,0],[5578,0,5022,0],[5579,0,5023,0],[5580,0,5024,0],[5581,0,5025,0],[5582,2,5026,0],[5583,0,5027,0],[5584,0,5028,0],[5585,0,5029,0],[5586,0,5030,0],[5587,0,5031,0],[5588,0,5032,0],[5589,0,5033,0],[5590,0,5034,0],[5591,0,5035,0],[5592,0,5036,0],[5593,0,5037,0],[5594,0,5038,0],[5595,0,5039,0],[5596,0,5040,0],[5597,0,5041,0],[5598,0,5042,0],[5599,0,5043,0],[5600,0,5044,0],[5601,0,5045,0],[5602,0,5046,0],[5603,0,5047,0],[5604,0,5048,0],[5605,0,5049,0],[5606,0,5050,0],[5607,0,5051,0],[5608,0,5052,0],[5609,0,5053,0],[5610,0,5054,0],[5611,0,5055,0],[5612,0,5056,0],[5613,0,5057,0],[5614,0,5058,0],[5615,0,5059,0],[5616,0,5060,0],[5617,0,5061,0],[5618,0,5062,0],[5619,0,5063,0],[5620,0,5064,0],[5621,0,5065,0],[5622,0,5066,0],[5623,2,5067,0],[5623,8,5067,6,"GoogleAuthProvider"],[5623,26,5067,24],[5623,35,5067,33,"BaseOAuthProvider"],[5623,52,5067,50],[5623,53,5067,51],[5624,4,5068,4,"constructor"],[5624,15,5068,15,"constructor"],[5624,16,5068,15],[5624,18,5068,18],[5625,6,5069,8],[5625,11,5069,13],[5625,12,5069,14],[5625,24,5069,26],[5625,25,5069,27],[5625,48,5069,50],[5625,49,5069,51],[5626,6,5070,8],[5626,10,5070,12],[5626,11,5070,13,"addScope"],[5626,19,5070,21],[5626,20,5070,22],[5626,29,5070,31],[5626,30,5070,32],[5627,4,5071,4],[5628,4,5072,4],[5629,0,5073,0],[5630,0,5074,0],[5631,0,5075,0],[5632,0,5076,0],[5633,0,5077,0],[5634,0,5078,0],[5635,0,5079,0],[5636,0,5080,0],[5637,0,5081,0],[5638,0,5082,0],[5639,0,5083,0],[5640,0,5084,0],[5641,4,5085,4],[5641,11,5085,11,"credential"],[5641,21,5085,21,"credential"],[5641,22,5085,22,"idToken"],[5641,29,5085,29],[5641,31,5085,31,"accessToken"],[5641,42,5085,42],[5641,44,5085,44],[5642,6,5086,8],[5642,13,5086,15,"OAuthCredential"],[5642,28,5086,30],[5642,29,5086,31,"_fromParams"],[5642,40,5086,42],[5642,41,5086,43],[5643,8,5087,12,"providerId"],[5643,18,5087,22],[5643,20,5087,24,"GoogleAuthProvider"],[5643,38,5087,42],[5643,39,5087,43,"PROVIDER_ID"],[5643,50,5087,54],[5644,8,5088,12,"signInMethod"],[5644,20,5088,24],[5644,22,5088,26,"GoogleAuthProvider"],[5644,40,5088,44],[5644,41,5088,45,"GOOGLE_SIGN_IN_METHOD"],[5644,62,5088,66],[5645,8,5089,12,"idToken"],[5645,15,5089,19],[5646,8,5090,12,"accessToken"],[5647,6,5091,8],[5647,7,5091,9],[5647,8,5091,10],[5648,4,5092,4],[5649,4,5093,4],[5650,0,5094,0],[5651,0,5095,0],[5652,0,5096,0],[5653,0,5097,0],[5654,4,5098,4],[5654,11,5098,11,"credentialFromResult"],[5654,31,5098,31,"credentialFromResult"],[5654,32,5098,32,"userCredential"],[5654,46,5098,46],[5654,48,5098,48],[5655,6,5099,8],[5655,13,5099,15,"GoogleAuthProvider"],[5655,31,5099,33],[5655,32,5099,34,"credentialFromTaggedObject"],[5655,58,5099,60],[5655,59,5099,61,"userCredential"],[5655,73,5099,75],[5655,74,5099,76],[5656,4,5100,4],[5657,4,5101,4],[5658,0,5102,0],[5659,0,5103,0],[5660,0,5104,0],[5661,0,5105,0],[5662,0,5106,0],[5663,4,5107,4],[5663,11,5107,11,"credentialFromError"],[5663,30,5107,30,"credentialFromError"],[5663,31,5107,31,"error"],[5663,36,5107,36],[5663,38,5107,38],[5664,6,5108,8],[5664,13,5108,15,"GoogleAuthProvider"],[5664,31,5108,33],[5664,32,5108,34,"credentialFromTaggedObject"],[5664,58,5108,60],[5664,59,5108,62,"error"],[5664,64,5108,67],[5664,65,5108,68,"customData"],[5664,75,5108,78],[5664,79,5108,82],[5664,80,5108,83],[5664,81,5108,85],[5664,82,5108,86],[5665,4,5109,4],[5666,4,5110,4],[5666,11,5110,11,"credentialFromTaggedObject"],[5666,37,5110,37,"credentialFromTaggedObject"],[5666,38,5110,38],[5667,6,5110,40,"_tokenResponse"],[5667,20,5110,54],[5667,22,5110,56,"tokenResponse"],[5668,4,5110,70],[5668,5,5110,71],[5668,7,5110,73],[5669,6,5111,8],[5669,10,5111,12],[5669,11,5111,13,"tokenResponse"],[5669,24,5111,26],[5669,26,5111,28],[5670,8,5112,12],[5670,15,5112,19],[5670,19,5112,23],[5671,6,5113,8],[5672,6,5114,8],[5672,12,5114,14],[5673,8,5114,16,"oauthIdToken"],[5673,20,5114,28],[5674,8,5114,30,"oauthAccessToken"],[5675,6,5114,47],[5675,7,5114,48],[5675,10,5114,51,"tokenResponse"],[5675,23,5114,64],[5676,6,5115,8],[5676,10,5115,12],[5676,11,5115,13,"oauthIdToken"],[5676,23,5115,25],[5676,27,5115,29],[5676,28,5115,30,"oauthAccessToken"],[5676,44,5115,46],[5676,46,5115,48],[5677,8,5116,12],[5678,8,5117,12],[5678,15,5117,19],[5678,19,5117,23],[5679,6,5118,8],[5680,6,5119,8],[5680,10,5119,12],[5681,8,5120,12],[5681,15,5120,19,"GoogleAuthProvider"],[5681,33,5120,37],[5681,34,5120,38,"credential"],[5681,44,5120,48],[5681,45,5120,49,"oauthIdToken"],[5681,57,5120,61],[5681,59,5120,63,"oauthAccessToken"],[5681,75,5120,79],[5681,76,5120,80],[5682,6,5121,8],[5682,7,5121,9],[5682,8,5122,8],[5682,14,5122,14],[5683,8,5123,12],[5683,15,5123,19],[5683,19,5123,23],[5684,6,5124,8],[5685,4,5125,4],[5686,2,5126,0],[5687,2,5127,0],[5688,2,5128,0,"GoogleAuthProvider"],[5688,20,5128,18],[5688,21,5128,19,"GOOGLE_SIGN_IN_METHOD"],[5688,42,5128,40],[5688,45,5128,43],[5688,57,5128,55],[5688,58,5128,56],[5689,2,5129,0],[5690,2,5130,0,"GoogleAuthProvider"],[5690,20,5130,18],[5690,21,5130,19,"PROVIDER_ID"],[5690,32,5130,30],[5690,35,5130,33],[5690,47,5130,45],[5690,48,5130,46],[5692,2,5132,0],[5693,0,5133,0],[5694,0,5134,0],[5695,0,5135,0],[5696,0,5136,0],[5697,0,5137,0],[5698,0,5138,0],[5699,0,5139,0],[5700,0,5140,0],[5701,0,5141,0],[5702,0,5142,0],[5703,0,5143,0],[5704,0,5144,0],[5705,0,5145,0],[5706,0,5146,0],[5707,0,5147,0],[5708,2,5148,0],[5709,0,5149,0],[5710,0,5150,0],[5711,0,5151,0],[5712,0,5152,0],[5713,0,5153,0],[5714,0,5154,0],[5715,0,5155,0],[5716,0,5156,0],[5717,0,5157,0],[5718,0,5158,0],[5719,0,5159,0],[5720,0,5160,0],[5721,0,5161,0],[5722,0,5162,0],[5723,0,5163,0],[5724,0,5164,0],[5725,0,5165,0],[5726,0,5166,0],[5727,0,5167,0],[5728,0,5168,0],[5729,0,5169,0],[5730,0,5170,0],[5731,0,5171,0],[5732,0,5172,0],[5733,0,5173,0],[5734,0,5174,0],[5735,0,5175,0],[5736,0,5176,0],[5737,0,5177,0],[5738,0,5178,0],[5739,0,5179,0],[5740,0,5180,0],[5741,0,5181,0],[5742,0,5182,0],[5743,0,5183,0],[5744,0,5184,0],[5745,0,5185,0],[5746,0,5186,0],[5747,0,5187,0],[5748,0,5188,0],[5749,0,5189,0],[5750,2,5190,0],[5750,8,5190,6,"GithubAuthProvider"],[5750,26,5190,24],[5750,35,5190,33,"BaseOAuthProvider"],[5750,52,5190,50],[5750,53,5190,51],[5751,4,5191,4,"constructor"],[5751,15,5191,15,"constructor"],[5751,16,5191,15],[5751,18,5191,18],[5752,6,5192,8],[5752,11,5192,13],[5752,12,5192,14],[5752,24,5192,26],[5752,25,5192,27],[5752,48,5192,50],[5752,49,5192,51],[5753,4,5193,4],[5754,4,5194,4],[5755,0,5195,0],[5756,0,5196,0],[5757,0,5197,0],[5758,0,5198,0],[5759,4,5199,4],[5759,11,5199,11,"credential"],[5759,21,5199,21,"credential"],[5759,22,5199,22,"accessToken"],[5759,33,5199,33],[5759,35,5199,35],[5760,6,5200,8],[5760,13,5200,15,"OAuthCredential"],[5760,28,5200,30],[5760,29,5200,31,"_fromParams"],[5760,40,5200,42],[5760,41,5200,43],[5761,8,5201,12,"providerId"],[5761,18,5201,22],[5761,20,5201,24,"GithubAuthProvider"],[5761,38,5201,42],[5761,39,5201,43,"PROVIDER_ID"],[5761,50,5201,54],[5762,8,5202,12,"signInMethod"],[5762,20,5202,24],[5762,22,5202,26,"GithubAuthProvider"],[5762,40,5202,44],[5762,41,5202,45,"GITHUB_SIGN_IN_METHOD"],[5762,62,5202,66],[5763,8,5203,12,"accessToken"],[5764,6,5204,8],[5764,7,5204,9],[5764,8,5204,10],[5765,4,5205,4],[5766,4,5206,4],[5767,0,5207,0],[5768,0,5208,0],[5769,0,5209,0],[5770,0,5210,0],[5771,4,5211,4],[5771,11,5211,11,"credentialFromResult"],[5771,31,5211,31,"credentialFromResult"],[5771,32,5211,32,"userCredential"],[5771,46,5211,46],[5771,48,5211,48],[5772,6,5212,8],[5772,13,5212,15,"GithubAuthProvider"],[5772,31,5212,33],[5772,32,5212,34,"credentialFromTaggedObject"],[5772,58,5212,60],[5772,59,5212,61,"userCredential"],[5772,73,5212,75],[5772,74,5212,76],[5773,4,5213,4],[5774,4,5214,4],[5775,0,5215,0],[5776,0,5216,0],[5777,0,5217,0],[5778,0,5218,0],[5779,0,5219,0],[5780,4,5220,4],[5780,11,5220,11,"credentialFromError"],[5780,30,5220,30,"credentialFromError"],[5780,31,5220,31,"error"],[5780,36,5220,36],[5780,38,5220,38],[5781,6,5221,8],[5781,13,5221,15,"GithubAuthProvider"],[5781,31,5221,33],[5781,32,5221,34,"credentialFromTaggedObject"],[5781,58,5221,60],[5781,59,5221,62,"error"],[5781,64,5221,67],[5781,65,5221,68,"customData"],[5781,75,5221,78],[5781,79,5221,82],[5781,80,5221,83],[5781,81,5221,85],[5781,82,5221,86],[5782,4,5222,4],[5783,4,5223,4],[5783,11,5223,11,"credentialFromTaggedObject"],[5783,37,5223,37,"credentialFromTaggedObject"],[5783,38,5223,38],[5784,6,5223,40,"_tokenResponse"],[5784,20,5223,54],[5784,22,5223,56,"tokenResponse"],[5785,4,5223,70],[5785,5,5223,71],[5785,7,5223,73],[5786,6,5224,8],[5786,10,5224,12],[5786,11,5224,13,"tokenResponse"],[5786,24,5224,26],[5786,28,5224,30],[5786,30,5224,32],[5786,48,5224,50],[5786,52,5224,54,"tokenResponse"],[5786,65,5224,67],[5786,66,5224,68],[5786,68,5224,70],[5787,8,5225,12],[5787,15,5225,19],[5787,19,5225,23],[5788,6,5226,8],[5789,6,5227,8],[5789,10,5227,12],[5789,11,5227,13,"tokenResponse"],[5789,24,5227,26],[5789,25,5227,27,"oauthAccessToken"],[5789,41,5227,43],[5789,43,5227,45],[5790,8,5228,12],[5790,15,5228,19],[5790,19,5228,23],[5791,6,5229,8],[5792,6,5230,8],[5792,10,5230,12],[5793,8,5231,12],[5793,15,5231,19,"GithubAuthProvider"],[5793,33,5231,37],[5793,34,5231,38,"credential"],[5793,44,5231,48],[5793,45,5231,49,"tokenResponse"],[5793,58,5231,62],[5793,59,5231,63,"oauthAccessToken"],[5793,75,5231,79],[5793,76,5231,80],[5794,6,5232,8],[5794,7,5232,9],[5794,8,5233,8],[5794,14,5233,14],[5795,8,5234,12],[5795,15,5234,19],[5795,19,5234,23],[5796,6,5235,8],[5797,4,5236,4],[5798,2,5237,0],[5799,2,5238,0],[5800,2,5239,0,"GithubAuthProvider"],[5800,20,5239,18],[5800,21,5239,19,"GITHUB_SIGN_IN_METHOD"],[5800,42,5239,40],[5800,45,5239,43],[5800,57,5239,55],[5800,58,5239,56],[5801,2,5240,0],[5802,2,5241,0,"GithubAuthProvider"],[5802,20,5241,18],[5802,21,5241,19,"PROVIDER_ID"],[5802,32,5241,30],[5802,35,5241,33],[5802,47,5241,45],[5802,48,5241,46],[5804,2,5243,0],[5805,0,5244,0],[5806,0,5245,0],[5807,0,5246,0],[5808,0,5247,0],[5809,0,5248,0],[5810,0,5249,0],[5811,0,5250,0],[5812,0,5251,0],[5813,0,5252,0],[5814,0,5253,0],[5815,0,5254,0],[5816,0,5255,0],[5817,0,5256,0],[5818,0,5257,0],[5819,0,5258,0],[5820,2,5259,0],[5820,8,5259,6,"IDP_REQUEST_URI"],[5820,23,5259,21],[5820,26,5259,24],[5820,44,5259,42],[5821,2,5260,0],[5822,0,5261,0],[5823,0,5262,0],[5824,2,5263,0],[5824,8,5263,6,"SAMLAuthCredential"],[5824,26,5263,24],[5824,35,5263,33,"AuthCredential"],[5824,49,5263,47],[5824,50,5263,48],[5825,4,5264,4],[5826,4,5265,4,"constructor"],[5826,15,5265,15,"constructor"],[5826,16,5265,16,"providerId"],[5826,26,5265,26],[5826,28,5265,28,"pendingToken"],[5826,40,5265,40],[5826,42,5265,42],[5827,6,5266,8],[5827,11,5266,13],[5827,12,5266,14,"providerId"],[5827,22,5266,24],[5827,24,5266,26,"providerId"],[5827,34,5266,36],[5827,35,5266,37],[5828,6,5267,8],[5828,10,5267,12],[5828,11,5267,13,"pendingToken"],[5828,23,5267,25],[5828,26,5267,28,"pendingToken"],[5828,38,5267,40],[5829,4,5268,4],[5830,4,5269,4],[5831,4,5270,4,"_getIdTokenResponse"],[5831,23,5270,23,"_getIdTokenResponse"],[5831,24,5270,24,"auth"],[5831,28,5270,28],[5831,30,5270,30],[5832,6,5271,8],[5832,12,5271,14,"request"],[5832,19,5271,21],[5832,22,5271,24],[5832,26,5271,28],[5832,27,5271,29,"buildRequest"],[5832,39,5271,41],[5832,40,5271,42],[5832,41,5271,43],[5833,6,5272,8],[5833,13,5272,15,"signInWithIdp"],[5833,26,5272,28],[5833,27,5272,29,"auth"],[5833,31,5272,33],[5833,33,5272,35,"request"],[5833,40,5272,42],[5833,41,5272,43],[5834,4,5273,4],[5835,4,5274,4],[5836,4,5275,4,"_linkToIdToken"],[5836,18,5275,18,"_linkToIdToken"],[5836,19,5275,19,"auth"],[5836,23,5275,23],[5836,25,5275,25,"idToken"],[5836,32,5275,32],[5836,34,5275,34],[5837,6,5276,8],[5837,12,5276,14,"request"],[5837,19,5276,21],[5837,22,5276,24],[5837,26,5276,28],[5837,27,5276,29,"buildRequest"],[5837,39,5276,41],[5837,40,5276,42],[5837,41,5276,43],[5838,6,5277,8,"request"],[5838,13,5277,15],[5838,14,5277,16,"idToken"],[5838,21,5277,23],[5838,24,5277,26,"idToken"],[5838,31,5277,33],[5839,6,5278,8],[5839,13,5278,15,"signInWithIdp"],[5839,26,5278,28],[5839,27,5278,29,"auth"],[5839,31,5278,33],[5839,33,5278,35,"request"],[5839,40,5278,42],[5839,41,5278,43],[5840,4,5279,4],[5841,4,5280,4],[5842,4,5281,4,"_getReauthenticationResolver"],[5842,32,5281,32,"_getReauthenticationResolver"],[5842,33,5281,33,"auth"],[5842,37,5281,37],[5842,39,5281,39],[5843,6,5282,8],[5843,12,5282,14,"request"],[5843,19,5282,21],[5843,22,5282,24],[5843,26,5282,28],[5843,27,5282,29,"buildRequest"],[5843,39,5282,41],[5843,40,5282,42],[5843,41,5282,43],[5844,6,5283,8,"request"],[5844,13,5283,15],[5844,14,5283,16,"autoCreate"],[5844,24,5283,26],[5844,27,5283,29],[5844,32,5283,34],[5845,6,5284,8],[5845,13,5284,15,"signInWithIdp"],[5845,26,5284,28],[5845,27,5284,29,"auth"],[5845,31,5284,33],[5845,33,5284,35,"request"],[5845,40,5284,42],[5845,41,5284,43],[5846,4,5285,4],[5847,4,5286,4],[5848,4,5287,4,"toJSON"],[5848,10,5287,10,"toJSON"],[5848,11,5287,10],[5848,13,5287,13],[5849,6,5288,8],[5849,13,5288,15],[5850,8,5289,12,"signInMethod"],[5850,20,5289,24],[5850,22,5289,26],[5850,26,5289,30],[5850,27,5289,31,"signInMethod"],[5850,39,5289,43],[5851,8,5290,12,"providerId"],[5851,18,5290,22],[5851,20,5290,24],[5851,24,5290,28],[5851,25,5290,29,"providerId"],[5851,35,5290,39],[5852,8,5291,12,"pendingToken"],[5852,20,5291,24],[5852,22,5291,26],[5852,26,5291,30],[5852,27,5291,31,"pendingToken"],[5853,6,5292,8],[5853,7,5292,9],[5854,4,5293,4],[5855,4,5294,4],[5856,0,5295,0],[5857,0,5296,0],[5858,0,5297,0],[5859,0,5298,0],[5860,0,5299,0],[5861,0,5300,0],[5862,0,5301,0],[5863,0,5302,0],[5864,4,5303,4],[5864,11,5303,11,"fromJSON"],[5864,19,5303,19,"fromJSON"],[5864,20,5303,20,"json"],[5864,24,5303,24],[5864,26,5303,26],[5865,6,5304,8],[5865,12,5304,14,"obj"],[5865,15,5304,17],[5865,18,5304,20],[5865,25,5304,27,"json"],[5865,29,5304,31],[5865,34,5304,36],[5865,42,5304,44],[5865,45,5304,47,"JSON"],[5865,49,5304,51],[5865,50,5304,52,"parse"],[5865,55,5304,57],[5865,56,5304,58,"json"],[5865,60,5304,62],[5865,61,5304,63],[5865,64,5304,66,"json"],[5865,68,5304,70],[5866,6,5305,8],[5866,12,5305,14],[5867,8,5305,16,"providerId"],[5867,18,5305,26],[5868,8,5305,28,"signInMethod"],[5868,20,5305,40],[5869,8,5305,42,"pendingToken"],[5870,6,5305,55],[5870,7,5305,56],[5870,10,5305,59,"obj"],[5870,13,5305,62],[5871,6,5306,8],[5871,10,5306,12],[5871,11,5306,13,"providerId"],[5871,21,5306,23],[5871,25,5307,12],[5871,26,5307,13,"signInMethod"],[5871,38,5307,25],[5871,42,5308,12],[5871,43,5308,13,"pendingToken"],[5871,55,5308,25],[5871,59,5309,12,"providerId"],[5871,69,5309,22],[5871,74,5309,27,"signInMethod"],[5871,86,5309,39],[5871,88,5309,41],[5872,8,5310,12],[5872,15,5310,19],[5872,19,5310,23],[5873,6,5311,8],[5874,6,5312,8],[5874,13,5312,15],[5874,17,5312,19,"SAMLAuthCredential"],[5874,35,5312,37],[5874,36,5312,38,"providerId"],[5874,46,5312,48],[5874,48,5312,50,"pendingToken"],[5874,60,5312,62],[5874,61,5312,63],[5875,4,5313,4],[5876,4,5314,4],[5877,0,5315,0],[5878,0,5316,0],[5879,0,5317,0],[5880,0,5318,0],[5881,4,5319,4],[5881,11,5319,11,"_create"],[5881,18,5319,18,"_create"],[5881,19,5319,19,"providerId"],[5881,29,5319,29],[5881,31,5319,31,"pendingToken"],[5881,43,5319,43],[5881,45,5319,45],[5882,6,5320,8],[5882,13,5320,15],[5882,17,5320,19,"SAMLAuthCredential"],[5882,35,5320,37],[5882,36,5320,38,"providerId"],[5882,46,5320,48],[5882,48,5320,50,"pendingToken"],[5882,60,5320,62],[5882,61,5320,63],[5883,4,5321,4],[5884,4,5322,4,"buildRequest"],[5884,16,5322,16,"buildRequest"],[5884,17,5322,16],[5884,19,5322,19],[5885,6,5323,8],[5885,13,5323,15],[5886,8,5324,12,"requestUri"],[5886,18,5324,22],[5886,20,5324,24,"IDP_REQUEST_URI"],[5886,35,5324,39],[5887,8,5325,12,"returnSecureToken"],[5887,25,5325,29],[5887,27,5325,31],[5887,31,5325,35],[5888,8,5326,12,"pendingToken"],[5888,20,5326,24],[5888,22,5326,26],[5888,26,5326,30],[5888,27,5326,31,"pendingToken"],[5889,6,5327,8],[5889,7,5327,9],[5890,4,5328,4],[5891,2,5329,0],[5893,2,5331,0],[5894,0,5332,0],[5895,0,5333,0],[5896,0,5334,0],[5897,0,5335,0],[5898,0,5336,0],[5899,0,5337,0],[5900,0,5338,0],[5901,0,5339,0],[5902,0,5340,0],[5903,0,5341,0],[5904,0,5342,0],[5905,0,5343,0],[5906,0,5344,0],[5907,0,5345,0],[5908,0,5346,0],[5909,2,5347,0],[5909,8,5347,6,"SAML_PROVIDER_PREFIX"],[5909,28,5347,26],[5909,31,5347,29],[5909,38,5347,36],[5910,2,5348,0],[5911,0,5349,0],[5912,0,5350,0],[5913,0,5351,0],[5914,0,5352,0],[5915,2,5353,0],[5915,8,5353,6,"SAMLAuthProvider"],[5915,24,5353,22],[5915,33,5353,31,"FederatedAuthProvider"],[5915,54,5353,52],[5915,55,5353,53],[5916,4,5354,4],[5917,0,5355,0],[5918,0,5356,0],[5919,0,5357,0],[5920,4,5358,4,"constructor"],[5920,15,5358,15,"constructor"],[5920,16,5358,16,"providerId"],[5920,26,5358,26],[5920,28,5358,28],[5921,6,5359,8,"_assert"],[5921,13,5359,15],[5921,14,5359,16,"providerId"],[5921,24,5359,26],[5921,25,5359,27,"startsWith"],[5921,35,5359,37],[5921,36,5359,38,"SAML_PROVIDER_PREFIX"],[5921,56,5359,58],[5921,57,5359,59],[5921,59,5359,61],[5921,75,5359,77],[5921,76,5359,78],[5921,110,5359,112],[5921,111,5359,113],[5922,6,5360,8],[5922,11,5360,13],[5922,12,5360,14,"providerId"],[5922,22,5360,24],[5922,23,5360,25],[5923,4,5361,4],[5924,4,5362,4],[5925,0,5363,0],[5926,0,5364,0],[5927,0,5365,0],[5928,0,5366,0],[5929,0,5367,0],[5930,0,5368,0],[5931,0,5369,0],[5932,0,5370,0],[5933,0,5371,0],[5934,0,5372,0],[5935,0,5373,0],[5936,0,5374,0],[5937,0,5375,0],[5938,0,5376,0],[5939,0,5377,0],[5940,4,5378,4],[5940,11,5378,11,"credentialFromResult"],[5940,31,5378,31,"credentialFromResult"],[5940,32,5378,32,"userCredential"],[5940,46,5378,46],[5940,48,5378,48],[5941,6,5379,8],[5941,13,5379,15,"SAMLAuthProvider"],[5941,29,5379,31],[5941,30,5379,32,"samlCredentialFromTaggedObject"],[5941,60,5379,62],[5941,61,5379,63,"userCredential"],[5941,75,5379,77],[5941,76,5379,78],[5942,4,5380,4],[5943,4,5381,4],[5944,0,5382,0],[5945,0,5383,0],[5946,0,5384,0],[5947,0,5385,0],[5948,0,5386,0],[5949,4,5387,4],[5949,11,5387,11,"credentialFromError"],[5949,30,5387,30,"credentialFromError"],[5949,31,5387,31,"error"],[5949,36,5387,36],[5949,38,5387,38],[5950,6,5388,8],[5950,13,5388,15,"SAMLAuthProvider"],[5950,29,5388,31],[5950,30,5388,32,"samlCredentialFromTaggedObject"],[5950,60,5388,62],[5950,61,5388,64,"error"],[5950,66,5388,69],[5950,67,5388,70,"customData"],[5950,77,5388,80],[5950,81,5388,84],[5950,82,5388,85],[5950,83,5388,87],[5950,84,5388,88],[5951,4,5389,4],[5952,4,5390,4],[5953,0,5391,0],[5954,0,5392,0],[5955,0,5393,0],[5956,4,5394,4],[5956,11,5394,11,"credentialFromJSON"],[5956,29,5394,29,"credentialFromJSON"],[5956,30,5394,30,"json"],[5956,34,5394,34],[5956,36,5394,36],[5957,6,5395,8],[5957,12,5395,14,"credential"],[5957,22,5395,24],[5957,25,5395,27,"SAMLAuthCredential"],[5957,43,5395,45],[5957,44,5395,46,"fromJSON"],[5957,52,5395,54],[5957,53,5395,55,"json"],[5957,57,5395,59],[5957,58,5395,60],[5958,6,5396,8,"_assert"],[5958,13,5396,15],[5958,14,5396,16,"credential"],[5958,24,5396,26],[5958,26,5396,28],[5958,42,5396,44],[5958,43,5396,45],[5958,77,5396,79],[5958,78,5396,80],[5959,6,5397,8],[5959,13,5397,15,"credential"],[5959,23,5397,25],[5960,4,5398,4],[5961,4,5399,4],[5961,11,5399,11,"samlCredentialFromTaggedObject"],[5961,41,5399,41,"samlCredentialFromTaggedObject"],[5961,42,5399,42],[5962,6,5399,44,"_tokenResponse"],[5962,20,5399,58],[5962,22,5399,60,"tokenResponse"],[5963,4,5399,74],[5963,5,5399,75],[5963,7,5399,77],[5964,6,5400,8],[5964,10,5400,12],[5964,11,5400,13,"tokenResponse"],[5964,24,5400,26],[5964,26,5400,28],[5965,8,5401,12],[5965,15,5401,19],[5965,19,5401,23],[5966,6,5402,8],[5967,6,5403,8],[5967,12,5403,14],[5968,8,5403,16,"pendingToken"],[5968,20,5403,28],[5969,8,5403,30,"providerId"],[5970,6,5403,41],[5970,7,5403,42],[5970,10,5403,45,"tokenResponse"],[5970,23,5403,58],[5971,6,5404,8],[5971,10,5404,12],[5971,11,5404,13,"pendingToken"],[5971,23,5404,25],[5971,27,5404,29],[5971,28,5404,30,"providerId"],[5971,38,5404,40],[5971,40,5404,42],[5972,8,5405,12],[5972,15,5405,19],[5972,19,5405,23],[5973,6,5406,8],[5974,6,5407,8],[5974,10,5407,12],[5975,8,5408,12],[5975,15,5408,19,"SAMLAuthCredential"],[5975,33,5408,37],[5975,34,5408,38,"_create"],[5975,41,5408,45],[5975,42,5408,46,"providerId"],[5975,52,5408,56],[5975,54,5408,58,"pendingToken"],[5975,66,5408,70],[5975,67,5408,71],[5976,6,5409,8],[5976,7,5409,9],[5976,8,5410,8],[5976,15,5410,15,"e"],[5976,16,5410,16],[5976,18,5410,18],[5977,8,5411,12],[5977,15,5411,19],[5977,19,5411,23],[5978,6,5412,8],[5979,4,5413,4],[5980,2,5414,0],[5982,2,5416,0],[5983,0,5417,0],[5984,0,5418,0],[5985,0,5419,0],[5986,0,5420,0],[5987,0,5421,0],[5988,0,5422,0],[5989,0,5423,0],[5990,0,5424,0],[5991,0,5425,0],[5992,0,5426,0],[5993,0,5427,0],[5994,0,5428,0],[5995,0,5429,0],[5996,0,5430,0],[5997,0,5431,0],[5998,2,5432,0],[5999,0,5433,0],[6000,0,5434,0],[6001,0,5435,0],[6002,0,5436,0],[6003,0,5437,0],[6004,0,5438,0],[6005,0,5439,0],[6006,0,5440,0],[6007,0,5441,0],[6008,0,5442,0],[6009,0,5443,0],[6010,0,5444,0],[6011,0,5445,0],[6012,0,5446,0],[6013,0,5447,0],[6014,0,5448,0],[6015,0,5449,0],[6016,0,5450,0],[6017,0,5451,0],[6018,0,5452,0],[6019,0,5453,0],[6020,0,5454,0],[6021,0,5455,0],[6022,0,5456,0],[6023,0,5457,0],[6024,0,5458,0],[6025,0,5459,0],[6026,0,5460,0],[6027,0,5461,0],[6028,0,5462,0],[6029,0,5463,0],[6030,0,5464,0],[6031,0,5465,0],[6032,0,5466,0],[6033,0,5467,0],[6034,0,5468,0],[6035,0,5469,0],[6036,0,5470,0],[6037,2,5471,0],[6037,8,5471,6,"TwitterAuthProvider"],[6037,27,5471,25],[6037,36,5471,34,"BaseOAuthProvider"],[6037,53,5471,51],[6037,54,5471,52],[6038,4,5472,4,"constructor"],[6038,15,5472,15,"constructor"],[6038,16,5472,15],[6038,18,5472,18],[6039,6,5473,8],[6039,11,5473,13],[6039,12,5473,14],[6039,25,5473,27],[6039,26,5473,28],[6039,50,5473,52],[6039,51,5473,53],[6040,4,5474,4],[6041,4,5475,4],[6042,0,5476,0],[6043,0,5477,0],[6044,0,5478,0],[6045,0,5479,0],[6046,0,5480,0],[6047,4,5481,4],[6047,11,5481,11,"credential"],[6047,21,5481,21,"credential"],[6047,22,5481,22,"token"],[6047,27,5481,27],[6047,29,5481,29,"secret"],[6047,35,5481,35],[6047,37,5481,37],[6048,6,5482,8],[6048,13,5482,15,"OAuthCredential"],[6048,28,5482,30],[6048,29,5482,31,"_fromParams"],[6048,40,5482,42],[6048,41,5482,43],[6049,8,5483,12,"providerId"],[6049,18,5483,22],[6049,20,5483,24,"TwitterAuthProvider"],[6049,39,5483,43],[6049,40,5483,44,"PROVIDER_ID"],[6049,51,5483,55],[6050,8,5484,12,"signInMethod"],[6050,20,5484,24],[6050,22,5484,26,"TwitterAuthProvider"],[6050,41,5484,45],[6050,42,5484,46,"TWITTER_SIGN_IN_METHOD"],[6050,64,5484,68],[6051,8,5485,12,"oauthToken"],[6051,18,5485,22],[6051,20,5485,24,"token"],[6051,25,5485,29],[6052,8,5486,12,"oauthTokenSecret"],[6052,24,5486,28],[6052,26,5486,30,"secret"],[6053,6,5487,8],[6053,7,5487,9],[6053,8,5487,10],[6054,4,5488,4],[6055,4,5489,4],[6056,0,5490,0],[6057,0,5491,0],[6058,0,5492,0],[6059,0,5493,0],[6060,4,5494,4],[6060,11,5494,11,"credentialFromResult"],[6060,31,5494,31,"credentialFromResult"],[6060,32,5494,32,"userCredential"],[6060,46,5494,46],[6060,48,5494,48],[6061,6,5495,8],[6061,13,5495,15,"TwitterAuthProvider"],[6061,32,5495,34],[6061,33,5495,35,"credentialFromTaggedObject"],[6061,59,5495,61],[6061,60,5495,62,"userCredential"],[6061,74,5495,76],[6061,75,5495,77],[6062,4,5496,4],[6063,4,5497,4],[6064,0,5498,0],[6065,0,5499,0],[6066,0,5500,0],[6067,0,5501,0],[6068,0,5502,0],[6069,4,5503,4],[6069,11,5503,11,"credentialFromError"],[6069,30,5503,30,"credentialFromError"],[6069,31,5503,31,"error"],[6069,36,5503,36],[6069,38,5503,38],[6070,6,5504,8],[6070,13,5504,15,"TwitterAuthProvider"],[6070,32,5504,34],[6070,33,5504,35,"credentialFromTaggedObject"],[6070,59,5504,61],[6070,60,5504,63,"error"],[6070,65,5504,68],[6070,66,5504,69,"customData"],[6070,76,5504,79],[6070,80,5504,83],[6070,81,5504,84],[6070,82,5504,86],[6070,83,5504,87],[6071,4,5505,4],[6072,4,5506,4],[6072,11,5506,11,"credentialFromTaggedObject"],[6072,37,5506,37,"credentialFromTaggedObject"],[6072,38,5506,38],[6073,6,5506,40,"_tokenResponse"],[6073,20,5506,54],[6073,22,5506,56,"tokenResponse"],[6074,4,5506,70],[6074,5,5506,71],[6074,7,5506,73],[6075,6,5507,8],[6075,10,5507,12],[6075,11,5507,13,"tokenResponse"],[6075,24,5507,26],[6075,26,5507,28],[6076,8,5508,12],[6076,15,5508,19],[6076,19,5508,23],[6077,6,5509,8],[6078,6,5510,8],[6078,12,5510,14],[6079,8,5510,16,"oauthAccessToken"],[6079,24,5510,32],[6080,8,5510,34,"oauthTokenSecret"],[6081,6,5510,51],[6081,7,5510,52],[6081,10,5510,55,"tokenResponse"],[6081,23,5510,68],[6082,6,5511,8],[6082,10,5511,12],[6082,11,5511,13,"oauthAccessToken"],[6082,27,5511,29],[6082,31,5511,33],[6082,32,5511,34,"oauthTokenSecret"],[6082,48,5511,50],[6082,50,5511,52],[6083,8,5512,12],[6083,15,5512,19],[6083,19,5512,23],[6084,6,5513,8],[6085,6,5514,8],[6085,10,5514,12],[6086,8,5515,12],[6086,15,5515,19,"TwitterAuthProvider"],[6086,34,5515,38],[6086,35,5515,39,"credential"],[6086,45,5515,49],[6086,46,5515,50,"oauthAccessToken"],[6086,62,5515,66],[6086,64,5515,68,"oauthTokenSecret"],[6086,80,5515,84],[6086,81,5515,85],[6087,6,5516,8],[6087,7,5516,9],[6087,8,5517,8],[6087,14,5517,14],[6088,8,5518,12],[6088,15,5518,19],[6088,19,5518,23],[6089,6,5519,8],[6090,4,5520,4],[6091,2,5521,0],[6092,2,5522,0],[6093,2,5523,0,"TwitterAuthProvider"],[6093,21,5523,19],[6093,22,5523,20,"TWITTER_SIGN_IN_METHOD"],[6093,44,5523,42],[6093,47,5523,45],[6093,60,5523,58],[6093,61,5523,59],[6094,2,5524,0],[6095,2,5525,0,"TwitterAuthProvider"],[6095,21,5525,19],[6095,22,5525,20,"PROVIDER_ID"],[6095,33,5525,31],[6095,36,5525,34],[6095,49,5525,47],[6095,50,5525,48],[6097,2,5527,0],[6098,0,5528,0],[6099,0,5529,0],[6100,0,5530,0],[6101,0,5531,0],[6102,0,5532,0],[6103,0,5533,0],[6104,0,5534,0],[6105,0,5535,0],[6106,0,5536,0],[6107,0,5537,0],[6108,0,5538,0],[6109,0,5539,0],[6110,0,5540,0],[6111,0,5541,0],[6112,0,5542,0],[6113,2,5543,0],[6113,17,5543,15,"signUp"],[6113,23,5543,21,"signUp"],[6113,24,5543,22,"auth"],[6113,28,5543,26],[6113,30,5543,28,"request"],[6113,37,5543,35],[6113,39,5543,37],[6114,4,5544,4],[6114,11,5544,11,"_performSignInRequest"],[6114,32,5544,32],[6114,33,5544,33,"auth"],[6114,37,5544,37],[6114,39,5544,39],[6114,45,5544,45],[6114,46,5544,46],[6114,69,5544,69],[6114,90,5544,90],[6114,91,5544,91],[6114,115,5544,115,"_addTidIfNecessary"],[6114,133,5544,133],[6114,134,5544,134,"auth"],[6114,138,5544,138],[6114,140,5544,140,"request"],[6114,147,5544,147],[6114,148,5544,148],[6114,149,5544,149],[6115,2,5545,0],[6117,2,5547,0],[6118,0,5548,0],[6119,0,5549,0],[6120,0,5550,0],[6121,0,5551,0],[6122,0,5552,0],[6123,0,5553,0],[6124,0,5554,0],[6125,0,5555,0],[6126,0,5556,0],[6127,0,5557,0],[6128,0,5558,0],[6129,0,5559,0],[6130,0,5560,0],[6131,0,5561,0],[6132,0,5562,0],[6133,2,5563,0],[6133,8,5563,6,"UserCredentialImpl"],[6133,26,5563,24],[6133,27,5563,25],[6134,4,5564,4,"constructor"],[6134,15,5564,15,"constructor"],[6134,16,5564,16,"params"],[6134,22,5564,22],[6134,24,5564,24],[6135,6,5565,8],[6135,10,5565,12],[6135,11,5565,13,"user"],[6135,15,5565,17],[6135,18,5565,20,"params"],[6135,24,5565,26],[6135,25,5565,27,"user"],[6135,29,5565,31],[6136,6,5566,8],[6136,10,5566,12],[6136,11,5566,13,"providerId"],[6136,21,5566,23],[6136,24,5566,26,"params"],[6136,30,5566,32],[6136,31,5566,33,"providerId"],[6136,41,5566,43],[6137,6,5567,8],[6137,10,5567,12],[6137,11,5567,13,"_tokenResponse"],[6137,25,5567,27],[6137,28,5567,30,"params"],[6137,34,5567,36],[6137,35,5567,37,"_tokenResponse"],[6137,49,5567,51],[6138,6,5568,8],[6138,10,5568,12],[6138,11,5568,13,"operationType"],[6138,24,5568,26],[6138,27,5568,29,"params"],[6138,33,5568,35],[6138,34,5568,36,"operationType"],[6138,47,5568,49],[6139,4,5569,4],[6140,4,5570,4],[6140,17,5570,17,"_fromIdTokenResponse"],[6140,37,5570,37,"_fromIdTokenResponse"],[6140,38,5570,38,"auth"],[6140,42,5570,42],[6140,44,5570,44,"operationType"],[6140,57,5570,57],[6140,59,5570,59,"idTokenResponse"],[6140,74,5570,74],[6140,76,5570,76,"isAnonymous"],[6140,87,5570,87],[6140,90,5570,90],[6140,95,5570,95],[6140,97,5570,97],[6141,6,5571,8],[6141,12,5571,14,"user"],[6141,16,5571,18],[6141,19,5571,21],[6141,25,5571,27,"UserImpl"],[6141,33,5571,35],[6141,34,5571,36,"_fromIdTokenResponse"],[6141,54,5571,56],[6141,55,5571,57,"auth"],[6141,59,5571,61],[6141,61,5571,63,"idTokenResponse"],[6141,76,5571,78],[6141,78,5571,80,"isAnonymous"],[6141,89,5571,91],[6141,90,5571,92],[6142,6,5572,8],[6142,12,5572,14,"providerId"],[6142,22,5572,24],[6142,25,5572,27,"providerIdForResponse"],[6142,46,5572,48],[6142,47,5572,49,"idTokenResponse"],[6142,62,5572,64],[6142,63,5572,65],[6143,6,5573,8],[6143,12,5573,14,"userCred"],[6143,20,5573,22],[6143,23,5573,25],[6143,27,5573,29,"UserCredentialImpl"],[6143,45,5573,47],[6143,46,5573,48],[6144,8,5574,12,"user"],[6144,12,5574,16],[6145,8,5575,12,"providerId"],[6145,18,5575,22],[6146,8,5576,12,"_tokenResponse"],[6146,22,5576,26],[6146,24,5576,28,"idTokenResponse"],[6146,39,5576,43],[6147,8,5577,12,"operationType"],[6148,6,5578,8],[6148,7,5578,9],[6148,8,5578,10],[6149,6,5579,8],[6149,13,5579,15,"userCred"],[6149,21,5579,23],[6150,4,5580,4],[6151,4,5581,4],[6151,17,5581,17,"_forOperation"],[6151,30,5581,30,"_forOperation"],[6151,31,5581,31,"user"],[6151,35,5581,35],[6151,37,5581,37,"operationType"],[6151,50,5581,50],[6151,52,5581,52,"response"],[6151,60,5581,60],[6151,62,5581,62],[6152,6,5582,8],[6152,12,5582,14,"user"],[6152,16,5582,18],[6152,17,5582,19,"_updateTokensIfNecessary"],[6152,41,5582,43],[6152,42,5582,44,"response"],[6152,50,5582,52],[6152,52,5582,54],[6152,64,5582,67],[6152,68,5582,71],[6152,69,5582,72],[6153,6,5583,8],[6153,12,5583,14,"providerId"],[6153,22,5583,24],[6153,25,5583,27,"providerIdForResponse"],[6153,46,5583,48],[6153,47,5583,49,"response"],[6153,55,5583,57],[6153,56,5583,58],[6154,6,5584,8],[6154,13,5584,15],[6154,17,5584,19,"UserCredentialImpl"],[6154,35,5584,37],[6154,36,5584,38],[6155,8,5585,12,"user"],[6155,12,5585,16],[6156,8,5586,12,"providerId"],[6156,18,5586,22],[6157,8,5587,12,"_tokenResponse"],[6157,22,5587,26],[6157,24,5587,28,"response"],[6157,32,5587,36],[6158,8,5588,12,"operationType"],[6159,6,5589,8],[6159,7,5589,9],[6159,8,5589,10],[6160,4,5590,4],[6161,2,5591,0],[6162,2,5592,0],[6162,11,5592,9,"providerIdForResponse"],[6162,32,5592,30,"providerIdForResponse"],[6162,33,5592,31,"response"],[6162,41,5592,39],[6162,43,5592,41],[6163,4,5593,4],[6163,8,5593,8,"response"],[6163,16,5593,16],[6163,17,5593,17,"providerId"],[6163,27,5593,27],[6163,29,5593,29],[6164,6,5594,8],[6164,13,5594,15,"response"],[6164,21,5594,23],[6164,22,5594,24,"providerId"],[6164,32,5594,34],[6165,4,5595,4],[6166,4,5596,4],[6166,8,5596,8],[6166,21,5596,21],[6166,25,5596,25,"response"],[6166,33,5596,33],[6166,35,5596,35],[6167,6,5597,8],[6167,13,5597,15],[6167,20,5597,22],[6167,21,5597,23],[6168,4,5598,4],[6169,4,5599,4],[6169,11,5599,11],[6169,15,5599,15],[6170,2,5600,0],[6172,2,5602,0],[6173,0,5603,0],[6174,0,5604,0],[6175,0,5605,0],[6176,0,5606,0],[6177,0,5607,0],[6178,0,5608,0],[6179,0,5609,0],[6180,0,5610,0],[6181,0,5611,0],[6182,0,5612,0],[6183,0,5613,0],[6184,0,5614,0],[6185,0,5615,0],[6186,0,5616,0],[6187,0,5617,0],[6188,2,5618,0],[6189,0,5619,0],[6190,0,5620,0],[6191,0,5621,0],[6192,0,5622,0],[6193,0,5623,0],[6194,0,5624,0],[6195,0,5625,0],[6196,0,5626,0],[6197,0,5627,0],[6198,0,5628,0],[6199,0,5629,0],[6200,0,5630,0],[6201,0,5631,0],[6202,2,5632,0],[6202,17,5632,15,"signInAnonymously"],[6202,34,5632,32,"signInAnonymously"],[6202,35,5632,33,"auth"],[6202,39,5632,37],[6202,41,5632,39],[6203,4,5633,4],[6203,8,5633,8],[6203,12,5633,8,"_isFirebaseServerApp"],[6203,24,5633,28],[6203,25,5633,28,"_isFirebaseServerApp"],[6203,45,5633,28],[6203,47,5633,29,"auth"],[6203,51,5633,33],[6203,52,5633,34,"app"],[6203,55,5633,37],[6203,56,5633,38],[6203,58,5633,40],[6204,6,5634,8],[6204,13,5634,15,"Promise"],[6204,20,5634,22],[6204,21,5634,23,"reject"],[6204,27,5634,29],[6204,28,5634,30,"_serverAppCurrentUserOperationNotSupportedError"],[6204,75,5634,77],[6204,76,5634,78,"auth"],[6204,80,5634,82],[6204,81,5634,83],[6204,82,5634,84],[6205,4,5635,4],[6206,4,5636,4],[6206,10,5636,10,"authInternal"],[6206,22,5636,22],[6206,25,5636,25,"_castAuth"],[6206,34,5636,34],[6206,35,5636,35,"auth"],[6206,39,5636,39],[6206,40,5636,40],[6207,4,5637,4],[6207,10,5637,10,"authInternal"],[6207,22,5637,22],[6207,23,5637,23,"_initializationPromise"],[6207,45,5637,45],[6208,4,5638,4],[6208,8,5638,8,"authInternal"],[6208,20,5638,20],[6208,21,5638,21,"currentUser"],[6208,32,5638,32],[6208,34,5638,34,"isAnonymous"],[6208,45,5638,45],[6208,47,5638,47],[6209,6,5639,8],[6210,6,5640,8],[6210,13,5640,15],[6210,17,5640,19,"UserCredentialImpl"],[6210,35,5640,37],[6210,36,5640,38],[6211,8,5641,12,"user"],[6211,12,5641,16],[6211,14,5641,18,"authInternal"],[6211,26,5641,30],[6211,27,5641,31,"currentUser"],[6211,38,5641,42],[6212,8,5642,12,"providerId"],[6212,18,5642,22],[6212,20,5642,24],[6212,24,5642,28],[6213,8,5643,12,"operationType"],[6213,21,5643,25],[6213,23,5643,27],[6213,31,5643,35],[6213,32,5643,36],[6214,6,5644,8],[6214,7,5644,9],[6214,8,5644,10],[6215,4,5645,4],[6216,4,5646,4],[6216,10,5646,10,"response"],[6216,18,5646,18],[6216,21,5646,21],[6216,27,5646,27,"signUp"],[6216,33,5646,33],[6216,34,5646,34,"authInternal"],[6216,46,5646,46],[6216,48,5646,48],[6217,6,5647,8,"returnSecureToken"],[6217,23,5647,25],[6217,25,5647,27],[6218,4,5648,4],[6218,5,5648,5],[6218,6,5648,6],[6219,4,5649,4],[6219,10,5649,10,"userCredential"],[6219,24,5649,24],[6219,27,5649,27],[6219,33,5649,33,"UserCredentialImpl"],[6219,51,5649,51],[6219,52,5649,52,"_fromIdTokenResponse"],[6219,72,5649,72],[6219,73,5649,73,"authInternal"],[6219,85,5649,85],[6219,87,5649,87],[6219,95,5649,95],[6219,96,5649,96],[6219,125,5649,125,"response"],[6219,133,5649,133],[6219,135,5649,135],[6219,139,5649,139],[6219,140,5649,140],[6220,4,5650,4],[6220,10,5650,10,"authInternal"],[6220,22,5650,22],[6220,23,5650,23,"_updateCurrentUser"],[6220,41,5650,41],[6220,42,5650,42,"userCredential"],[6220,56,5650,56],[6220,57,5650,57,"user"],[6220,61,5650,61],[6220,62,5650,62],[6221,4,5651,4],[6221,11,5651,11,"userCredential"],[6221,25,5651,25],[6222,2,5652,0],[6224,2,5654,0],[6225,0,5655,0],[6226,0,5656,0],[6227,0,5657,0],[6228,0,5658,0],[6229,0,5659,0],[6230,0,5660,0],[6231,0,5661,0],[6232,0,5662,0],[6233,0,5663,0],[6234,0,5664,0],[6235,0,5665,0],[6236,0,5666,0],[6237,0,5667,0],[6238,0,5668,0],[6239,0,5669,0],[6240,2,5670,0],[6240,8,5670,6,"MultiFactorError"],[6240,24,5670,22],[6240,33,5670,31,"FirebaseError"],[6240,46,5670,44],[6240,47,5670,44,"FirebaseError"],[6240,60,5670,44],[6240,61,5670,45],[6241,4,5671,4,"constructor"],[6241,15,5671,15,"constructor"],[6241,16,5671,16,"auth"],[6241,20,5671,20],[6241,22,5671,22,"error"],[6241,27,5671,27],[6241,29,5671,29,"operationType"],[6241,42,5671,42],[6241,44,5671,44,"user"],[6241,48,5671,48],[6241,50,5671,50],[6242,6,5672,8],[6242,11,5672,13],[6242,12,5672,14,"error"],[6242,17,5672,19],[6242,18,5672,20,"code"],[6242,22,5672,24],[6242,24,5672,26,"error"],[6242,29,5672,31],[6242,30,5672,32,"message"],[6242,37,5672,39],[6242,38,5672,40],[6243,6,5673,8],[6243,10,5673,12],[6243,11,5673,13,"operationType"],[6243,24,5673,26],[6243,27,5673,29,"operationType"],[6243,40,5673,42],[6244,6,5674,8],[6244,10,5674,12],[6244,11,5674,13,"user"],[6244,15,5674,17],[6244,18,5674,20,"user"],[6244,22,5674,24],[6245,6,5675,8],[6246,6,5676,8,"Object"],[6246,12,5676,14],[6246,13,5676,15,"setPrototypeOf"],[6246,27,5676,29],[6246,28,5676,30],[6246,32,5676,34],[6246,34,5676,36,"MultiFactorError"],[6246,50,5676,52],[6246,51,5676,53,"prototype"],[6246,60,5676,62],[6246,61,5676,63],[6247,6,5677,8],[6247,10,5677,12],[6247,11,5677,13,"customData"],[6247,21,5677,23],[6247,24,5677,26],[6248,8,5678,12,"appName"],[6248,15,5678,19],[6248,17,5678,21,"auth"],[6248,21,5678,25],[6248,22,5678,26,"name"],[6248,26,5678,30],[6249,8,5679,12,"tenantId"],[6249,16,5679,20],[6249,18,5679,22,"auth"],[6249,22,5679,26],[6249,23,5679,27,"tenantId"],[6249,31,5679,35],[6249,35,5679,39,"undefined"],[6249,44,5679,48],[6250,8,5680,12,"_serverResponse"],[6250,23,5680,27],[6250,25,5680,29,"error"],[6250,30,5680,34],[6250,31,5680,35,"customData"],[6250,41,5680,45],[6250,42,5680,46,"_serverResponse"],[6250,57,5680,61],[6251,8,5681,12,"operationType"],[6252,6,5682,8],[6252,7,5682,9],[6253,4,5683,4],[6254,4,5684,4],[6254,11,5684,11,"_fromErrorAndOperation"],[6254,33,5684,33,"_fromErrorAndOperation"],[6254,34,5684,34,"auth"],[6254,38,5684,38],[6254,40,5684,40,"error"],[6254,45,5684,45],[6254,47,5684,47,"operationType"],[6254,60,5684,60],[6254,62,5684,62,"user"],[6254,66,5684,66],[6254,68,5684,68],[6255,6,5685,8],[6255,13,5685,15],[6255,17,5685,19,"MultiFactorError"],[6255,33,5685,35],[6255,34,5685,36,"auth"],[6255,38,5685,40],[6255,40,5685,42,"error"],[6255,45,5685,47],[6255,47,5685,49,"operationType"],[6255,60,5685,62],[6255,62,5685,64,"user"],[6255,66,5685,68],[6255,67,5685,69],[6256,4,5686,4],[6257,2,5687,0],[6258,2,5688,0],[6258,11,5688,9,"_processCredentialSavingMfaContextIfNecessary"],[6258,56,5688,54,"_processCredentialSavingMfaContextIfNecessary"],[6258,57,5688,55,"auth"],[6258,61,5688,59],[6258,63,5688,61,"operationType"],[6258,76,5688,74],[6258,78,5688,76,"credential"],[6258,88,5688,86],[6258,90,5688,88,"user"],[6258,94,5688,92],[6258,96,5688,94],[6259,4,5689,4],[6259,10,5689,10,"idTokenProvider"],[6259,25,5689,25],[6259,28,5689,28,"operationType"],[6259,41,5689,41],[6259,46,5689,46],[6259,62,5689,62],[6259,63,5689,63],[6259,100,5690,10,"credential"],[6259,110,5690,20],[6259,111,5690,21,"_getReauthenticationResolver"],[6259,139,5690,49],[6259,140,5690,50,"auth"],[6259,144,5690,54],[6259,145,5690,55],[6259,148,5691,10,"credential"],[6259,158,5691,20],[6259,159,5691,21,"_getIdTokenResponse"],[6259,178,5691,40],[6259,179,5691,41,"auth"],[6259,183,5691,45],[6259,184,5691,46],[6260,4,5692,4],[6260,11,5692,11,"idTokenProvider"],[6260,26,5692,26],[6260,27,5692,27,"catch"],[6260,32,5692,32],[6260,33,5692,33,"error"],[6260,38,5692,38],[6260,42,5692,42],[6261,6,5693,8],[6261,10,5693,12,"error"],[6261,15,5693,17],[6261,16,5693,18,"code"],[6261,20,5693,22],[6261,25,5693,27],[6261,33,5693,35],[6261,61,5693,63],[6261,62,5693,64],[6261,96,5693,98],[6261,98,5693,100],[6262,8,5694,12],[6262,14,5694,18,"MultiFactorError"],[6262,30,5694,34],[6262,31,5694,35,"_fromErrorAndOperation"],[6262,53,5694,57],[6262,54,5694,58,"auth"],[6262,58,5694,62],[6262,60,5694,64,"error"],[6262,65,5694,69],[6262,67,5694,71,"operationType"],[6262,80,5694,84],[6262,82,5694,86,"user"],[6262,86,5694,90],[6262,87,5694,91],[6263,6,5695,8],[6264,6,5696,8],[6264,12,5696,14,"error"],[6264,17,5696,19],[6265,4,5697,4],[6265,5,5697,5],[6265,6,5697,6],[6266,2,5698,0],[6268,2,5700,0],[6269,0,5701,0],[6270,0,5702,0],[6271,0,5703,0],[6272,0,5704,0],[6273,0,5705,0],[6274,0,5706,0],[6275,0,5707,0],[6276,0,5708,0],[6277,0,5709,0],[6278,0,5710,0],[6279,0,5711,0],[6280,0,5712,0],[6281,0,5713,0],[6282,0,5714,0],[6283,0,5715,0],[6284,2,5716,0],[6285,0,5717,0],[6286,0,5718,0],[6287,2,5719,0],[6287,11,5719,9,"providerDataAsNames"],[6287,30,5719,28,"providerDataAsNames"],[6287,31,5719,29,"providerData"],[6287,43,5719,41],[6287,45,5719,43],[6288,4,5720,4],[6288,11,5720,11],[6288,15,5720,15,"Set"],[6288,18,5720,18],[6288,19,5720,19,"providerData"],[6288,31,5720,31],[6288,32,5721,9,"map"],[6288,35,5721,12],[6288,36,5721,13],[6288,37,5721,14],[6289,6,5721,16,"providerId"],[6290,4,5721,27],[6290,5,5721,28],[6290,10,5721,33,"providerId"],[6290,20,5721,43],[6290,21,5721,44],[6290,22,5722,9,"filter"],[6290,28,5722,15],[6290,29,5722,16,"pid"],[6290,32,5722,19],[6290,36,5722,23],[6290,37,5722,24],[6290,38,5722,25,"pid"],[6290,41,5722,28],[6290,42,5722,29],[6290,43,5722,30],[6291,2,5723,0],[6293,2,5725,0],[6294,0,5726,0],[6295,0,5727,0],[6296,0,5728,0],[6297,0,5729,0],[6298,0,5730,0],[6299,0,5731,0],[6300,0,5732,0],[6301,0,5733,0],[6302,0,5734,0],[6303,0,5735,0],[6304,0,5736,0],[6305,0,5737,0],[6306,0,5738,0],[6307,0,5739,0],[6308,0,5740,0],[6309,2,5741,0],[6310,0,5742,0],[6311,0,5743,0],[6312,0,5744,0],[6313,0,5745,0],[6314,0,5746,0],[6315,0,5747,0],[6316,0,5748,0],[6317,2,5749,0],[6317,17,5749,15,"unlink"],[6317,23,5749,21,"unlink"],[6317,24,5749,22,"user"],[6317,28,5749,26],[6317,30,5749,28,"providerId"],[6317,40,5749,38],[6317,42,5749,40],[6318,4,5750,4],[6318,10,5750,10,"userInternal"],[6318,22,5750,22],[6318,25,5750,25],[6318,29,5750,25,"getModularInstance"],[6318,42,5750,43],[6318,43,5750,43,"getModularInstance"],[6318,61,5750,43],[6318,63,5750,44,"user"],[6318,67,5750,48],[6318,68,5750,49],[6319,4,5751,4],[6319,10,5751,10,"_assertLinkedStatus"],[6319,29,5751,29],[6319,30,5751,30],[6319,34,5751,34],[6319,36,5751,36,"userInternal"],[6319,48,5751,48],[6319,50,5751,50,"providerId"],[6319,60,5751,60],[6319,61,5751,61],[6320,4,5752,4],[6320,10,5752,10],[6321,6,5752,12,"providerUserInfo"],[6322,4,5752,29],[6322,5,5752,30],[6322,8,5752,33],[6322,14,5752,39,"deleteLinkedAccounts"],[6322,34,5752,59],[6322,35,5752,60,"userInternal"],[6322,47,5752,72],[6322,48,5752,73,"auth"],[6322,52,5752,77],[6322,54,5752,79],[6323,6,5753,8,"idToken"],[6323,13,5753,15],[6323,15,5753,17],[6323,21,5753,23,"userInternal"],[6323,33,5753,35],[6323,34,5753,36,"getIdToken"],[6323,44,5753,46],[6323,45,5753,47],[6323,46,5753,48],[6324,6,5754,8,"deleteProvider"],[6324,20,5754,22],[6324,22,5754,24],[6324,23,5754,25,"providerId"],[6324,33,5754,35],[6325,4,5755,4],[6325,5,5755,5],[6325,6,5755,6],[6326,4,5756,4],[6326,10,5756,10,"providersLeft"],[6326,23,5756,23],[6326,26,5756,26,"providerDataAsNames"],[6326,45,5756,45],[6326,46,5756,46,"providerUserInfo"],[6326,62,5756,62],[6326,66,5756,66],[6326,68,5756,68],[6326,69,5756,69],[6327,4,5757,4,"userInternal"],[6327,16,5757,16],[6327,17,5757,17,"providerData"],[6327,29,5757,29],[6327,32,5757,32,"userInternal"],[6327,44,5757,44],[6327,45,5757,45,"providerData"],[6327,57,5757,57],[6327,58,5757,58,"filter"],[6327,64,5757,64],[6327,65,5757,65,"pd"],[6327,67,5757,67],[6327,71,5757,71,"providersLeft"],[6327,84,5757,84],[6327,85,5757,85,"has"],[6327,88,5757,88],[6327,89,5757,89,"pd"],[6327,91,5757,91],[6327,92,5757,92,"providerId"],[6327,102,5757,102],[6327,103,5757,103],[6327,104,5757,104],[6328,4,5758,4],[6328,8,5758,8],[6328,9,5758,9,"providersLeft"],[6328,22,5758,22],[6328,23,5758,23,"has"],[6328,26,5758,26],[6328,27,5758,27],[6328,34,5758,34],[6328,35,5758,35],[6328,57,5758,57],[6328,58,5758,58],[6328,60,5758,60],[6329,6,5759,8,"userInternal"],[6329,18,5759,20],[6329,19,5759,21,"phoneNumber"],[6329,30,5759,32],[6329,33,5759,35],[6329,37,5759,39],[6330,4,5760,4],[6331,4,5761,4],[6331,10,5761,10,"userInternal"],[6331,22,5761,22],[6331,23,5761,23,"auth"],[6331,27,5761,27],[6331,28,5761,28,"_persistUserIfCurrent"],[6331,49,5761,49],[6331,50,5761,50,"userInternal"],[6331,62,5761,62],[6331,63,5761,63],[6332,4,5762,4],[6332,11,5762,11,"userInternal"],[6332,23,5762,23],[6333,2,5763,0],[6334,2,5764,0],[6334,17,5764,15,"_link$1"],[6334,24,5764,22,"_link$1"],[6334,25,5764,23,"user"],[6334,29,5764,27],[6334,31,5764,29,"credential"],[6334,41,5764,39],[6334,43,5764,41,"bypassAuthState"],[6334,58,5764,56],[6334,61,5764,59],[6334,66,5764,64],[6334,68,5764,66],[6335,4,5765,4],[6335,10,5765,10,"response"],[6335,18,5765,18],[6335,21,5765,21],[6335,27,5765,27,"_logoutIfInvalidated"],[6335,47,5765,47],[6335,48,5765,48,"user"],[6335,52,5765,52],[6335,54,5765,54,"credential"],[6335,64,5765,64],[6335,65,5765,65,"_linkToIdToken"],[6335,79,5765,79],[6335,80,5765,80,"user"],[6335,84,5765,84],[6335,85,5765,85,"auth"],[6335,89,5765,89],[6335,91,5765,91],[6335,97,5765,97,"user"],[6335,101,5765,101],[6335,102,5765,102,"getIdToken"],[6335,112,5765,112],[6335,113,5765,113],[6335,114,5765,114],[6335,115,5765,115],[6335,117,5765,117,"bypassAuthState"],[6335,132,5765,132],[6335,133,5765,133],[6336,4,5766,4],[6336,11,5766,11,"UserCredentialImpl"],[6336,29,5766,29],[6336,30,5766,30,"_forOperation"],[6336,43,5766,43],[6336,44,5766,44,"user"],[6336,48,5766,48],[6336,50,5766,50],[6336,56,5766,56],[6336,57,5766,57],[6336,83,5766,83,"response"],[6336,91,5766,91],[6336,92,5766,92],[6337,2,5767,0],[6338,2,5768,0],[6338,17,5768,15,"_assertLinkedStatus"],[6338,36,5768,34,"_assertLinkedStatus"],[6338,37,5768,35,"expected"],[6338,45,5768,43],[6338,47,5768,45,"user"],[6338,51,5768,49],[6338,53,5768,51,"provider"],[6338,61,5768,59],[6338,63,5768,61],[6339,4,5769,4],[6339,10,5769,10,"_reloadWithoutSaving"],[6339,30,5769,30],[6339,31,5769,31,"user"],[6339,35,5769,35],[6339,36,5769,36],[6340,4,5770,4],[6340,10,5770,10,"providerIds"],[6340,21,5770,21],[6340,24,5770,24,"providerDataAsNames"],[6340,43,5770,43],[6340,44,5770,44,"user"],[6340,48,5770,48],[6340,49,5770,49,"providerData"],[6340,61,5770,61],[6340,62,5770,62],[6341,4,5771,4],[6341,10,5771,10,"code"],[6341,14,5771,14],[6341,17,5771,17,"expected"],[6341,25,5771,25],[6341,30,5771,30],[6341,35,5771,35],[6341,38,5772,10],[6341,63,5772,35],[6341,64,5772,36],[6341,110,5773,10],[6341,128,5773,28],[6341,129,5773,29],[6342,4,5774,4,"_assert"],[6342,11,5774,11],[6342,12,5774,12,"providerIds"],[6342,23,5774,23],[6342,24,5774,24,"has"],[6342,27,5774,27],[6342,28,5774,28,"provider"],[6342,36,5774,36],[6342,37,5774,37],[6342,42,5774,42,"expected"],[6342,50,5774,50],[6342,52,5774,52,"user"],[6342,56,5774,56],[6342,57,5774,57,"auth"],[6342,61,5774,61],[6342,63,5774,63,"code"],[6342,67,5774,67],[6342,68,5774,68],[6343,2,5775,0],[6345,2,5777,0],[6346,0,5778,0],[6347,0,5779,0],[6348,0,5780,0],[6349,0,5781,0],[6350,0,5782,0],[6351,0,5783,0],[6352,0,5784,0],[6353,0,5785,0],[6354,0,5786,0],[6355,0,5787,0],[6356,0,5788,0],[6357,0,5789,0],[6358,0,5790,0],[6359,0,5791,0],[6360,0,5792,0],[6361,2,5793,0],[6361,17,5793,15,"_reauthenticate"],[6361,32,5793,30,"_reauthenticate"],[6361,33,5793,31,"user"],[6361,37,5793,35],[6361,39,5793,37,"credential"],[6361,49,5793,47],[6361,51,5793,49,"bypassAuthState"],[6361,66,5793,64],[6361,69,5793,67],[6361,74,5793,72],[6361,76,5793,74],[6362,4,5794,4],[6362,10,5794,10],[6363,6,5794,12,"auth"],[6364,4,5794,17],[6364,5,5794,18],[6364,8,5794,21,"user"],[6364,12,5794,25],[6365,4,5795,4],[6365,8,5795,8],[6365,12,5795,8,"_isFirebaseServerApp"],[6365,24,5795,28],[6365,25,5795,28,"_isFirebaseServerApp"],[6365,45,5795,28],[6365,47,5795,29,"auth"],[6365,51,5795,33],[6365,52,5795,34,"app"],[6365,55,5795,37],[6365,56,5795,38],[6365,58,5795,40],[6366,6,5796,8],[6366,13,5796,15,"Promise"],[6366,20,5796,22],[6366,21,5796,23,"reject"],[6366,27,5796,29],[6366,28,5796,30,"_serverAppCurrentUserOperationNotSupportedError"],[6366,75,5796,77],[6366,76,5796,78,"auth"],[6366,80,5796,82],[6366,81,5796,83],[6366,82,5796,84],[6367,4,5797,4],[6368,4,5798,4],[6368,10,5798,10,"operationType"],[6368,23,5798,23],[6368,26,5798,26],[6368,42,5798,42],[6368,43,5798,43],[6369,4,5799,4],[6369,8,5799,8],[6370,6,5800,8],[6370,12,5800,14,"response"],[6370,20,5800,22],[6370,23,5800,25],[6370,29,5800,31,"_logoutIfInvalidated"],[6370,49,5800,51],[6370,50,5800,52,"user"],[6370,54,5800,56],[6370,56,5800,58,"_processCredentialSavingMfaContextIfNecessary"],[6370,101,5800,103],[6370,102,5800,104,"auth"],[6370,106,5800,108],[6370,108,5800,110,"operationType"],[6370,121,5800,123],[6370,123,5800,125,"credential"],[6370,133,5800,135],[6370,135,5800,137,"user"],[6370,139,5800,141],[6370,140,5800,142],[6370,142,5800,144,"bypassAuthState"],[6370,157,5800,159],[6370,158,5800,160],[6371,6,5801,8,"_assert"],[6371,13,5801,15],[6371,14,5801,16,"response"],[6371,22,5801,24],[6371,23,5801,25,"idToken"],[6371,30,5801,32],[6371,32,5801,34,"auth"],[6371,36,5801,38],[6371,38,5801,40],[6371,54,5801,56],[6371,55,5801,57],[6371,89,5801,91],[6371,90,5801,92],[6372,6,5802,8],[6372,12,5802,14,"parsed"],[6372,18,5802,20],[6372,21,5802,23,"_parseToken"],[6372,32,5802,34],[6372,33,5802,35,"response"],[6372,41,5802,43],[6372,42,5802,44,"idToken"],[6372,49,5802,51],[6372,50,5802,52],[6373,6,5803,8,"_assert"],[6373,13,5803,15],[6373,14,5803,16,"parsed"],[6373,20,5803,22],[6373,22,5803,24,"auth"],[6373,26,5803,28],[6373,28,5803,30],[6373,44,5803,46],[6373,45,5803,47],[6373,79,5803,81],[6373,80,5803,82],[6374,6,5804,8],[6374,12,5804,14],[6375,8,5804,16,"sub"],[6375,11,5804,19],[6375,13,5804,21,"localId"],[6376,6,5804,29],[6376,7,5804,30],[6376,10,5804,33,"parsed"],[6376,16,5804,39],[6377,6,5805,8,"_assert"],[6377,13,5805,15],[6377,14,5805,16,"user"],[6377,18,5805,20],[6377,19,5805,21,"uid"],[6377,22,5805,24],[6377,27,5805,29,"localId"],[6377,34,5805,36],[6377,36,5805,38,"auth"],[6377,40,5805,42],[6377,42,5805,44],[6377,57,5805,59],[6377,58,5805,60],[6377,91,5805,93],[6377,92,5805,94],[6378,6,5806,8],[6378,13,5806,15,"UserCredentialImpl"],[6378,31,5806,33],[6378,32,5806,34,"_forOperation"],[6378,45,5806,47],[6378,46,5806,48,"user"],[6378,50,5806,52],[6378,52,5806,54,"operationType"],[6378,65,5806,67],[6378,67,5806,69,"response"],[6378,75,5806,77],[6378,76,5806,78],[6379,4,5807,4],[6379,5,5807,5],[6379,6,5808,4],[6379,13,5808,11,"e"],[6379,14,5808,12],[6379,16,5808,14],[6380,6,5809,8],[6381,6,5810,8],[6381,10,5810,12,"e"],[6381,11,5810,13],[6381,13,5810,15,"code"],[6381,17,5810,19],[6381,22,5810,24],[6381,30,5810,32],[6381,46,5810,48],[6381,47,5810,49],[6381,81,5810,83],[6381,83,5810,85],[6382,8,5811,12,"_fail"],[6382,13,5811,17],[6382,14,5811,18,"auth"],[6382,18,5811,22],[6382,20,5811,24],[6382,35,5811,39],[6382,36,5811,40],[6382,69,5811,73],[6382,70,5811,74],[6383,6,5812,8],[6384,6,5813,8],[6384,12,5813,14,"e"],[6384,13,5813,15],[6385,4,5814,4],[6386,2,5815,0],[6388,2,5817,0],[6389,0,5818,0],[6390,0,5819,0],[6391,0,5820,0],[6392,0,5821,0],[6393,0,5822,0],[6394,0,5823,0],[6395,0,5824,0],[6396,0,5825,0],[6397,0,5826,0],[6398,0,5827,0],[6399,0,5828,0],[6400,0,5829,0],[6401,0,5830,0],[6402,0,5831,0],[6403,0,5832,0],[6404,2,5833,0],[6404,17,5833,15,"_signInWithCredential"],[6404,38,5833,36,"_signInWithCredential"],[6404,39,5833,37,"auth"],[6404,43,5833,41],[6404,45,5833,43,"credential"],[6404,55,5833,53],[6404,57,5833,55,"bypassAuthState"],[6404,72,5833,70],[6404,75,5833,73],[6404,80,5833,78],[6404,82,5833,80],[6405,4,5834,4],[6405,8,5834,8],[6405,12,5834,8,"_isFirebaseServerApp"],[6405,24,5834,28],[6405,25,5834,28,"_isFirebaseServerApp"],[6405,45,5834,28],[6405,47,5834,29,"auth"],[6405,51,5834,33],[6405,52,5834,34,"app"],[6405,55,5834,37],[6405,56,5834,38],[6405,58,5834,40],[6406,6,5835,8],[6406,13,5835,15,"Promise"],[6406,20,5835,22],[6406,21,5835,23,"reject"],[6406,27,5835,29],[6406,28,5835,30,"_serverAppCurrentUserOperationNotSupportedError"],[6406,75,5835,77],[6406,76,5835,78,"auth"],[6406,80,5835,82],[6406,81,5835,83],[6406,82,5835,84],[6407,4,5836,4],[6408,4,5837,4],[6408,10,5837,10,"operationType"],[6408,23,5837,23],[6408,26,5837,26],[6408,34,5837,34],[6408,35,5837,35],[6409,4,5838,4],[6409,10,5838,10,"response"],[6409,18,5838,18],[6409,21,5838,21],[6409,27,5838,27,"_processCredentialSavingMfaContextIfNecessary"],[6409,72,5838,72],[6409,73,5838,73,"auth"],[6409,77,5838,77],[6409,79,5838,79,"operationType"],[6409,92,5838,92],[6409,94,5838,94,"credential"],[6409,104,5838,104],[6409,105,5838,105],[6410,4,5839,4],[6410,10,5839,10,"userCredential"],[6410,24,5839,24],[6410,27,5839,27],[6410,33,5839,33,"UserCredentialImpl"],[6410,51,5839,51],[6410,52,5839,52,"_fromIdTokenResponse"],[6410,72,5839,72],[6410,73,5839,73,"auth"],[6410,77,5839,77],[6410,79,5839,79,"operationType"],[6410,92,5839,92],[6410,94,5839,94,"response"],[6410,102,5839,102],[6410,103,5839,103],[6411,4,5840,4],[6411,8,5840,8],[6411,9,5840,9,"bypassAuthState"],[6411,24,5840,24],[6411,26,5840,26],[6412,6,5841,8],[6412,12,5841,14,"auth"],[6412,16,5841,18],[6412,17,5841,19,"_updateCurrentUser"],[6412,35,5841,37],[6412,36,5841,38,"userCredential"],[6412,50,5841,52],[6412,51,5841,53,"user"],[6412,55,5841,57],[6412,56,5841,58],[6413,4,5842,4],[6414,4,5843,4],[6414,11,5843,11,"userCredential"],[6414,25,5843,25],[6415,2,5844,0],[6416,2,5845,0],[6417,0,5846,0],[6418,0,5847,0],[6419,0,5848,0],[6420,0,5849,0],[6421,0,5850,0],[6422,0,5851,0],[6423,0,5852,0],[6424,0,5853,0],[6425,0,5854,0],[6426,0,5855,0],[6427,0,5856,0],[6428,0,5857,0],[6429,0,5858,0],[6430,2,5859,0],[6430,17,5859,15,"signInWithCredential"],[6430,37,5859,35,"signInWithCredential"],[6430,38,5859,36,"auth"],[6430,42,5859,40],[6430,44,5859,42,"credential"],[6430,54,5859,52],[6430,56,5859,54],[6431,4,5860,4],[6431,11,5860,11,"_signInWithCredential"],[6431,32,5860,32],[6431,33,5860,33,"_castAuth"],[6431,42,5860,42],[6431,43,5860,43,"auth"],[6431,47,5860,47],[6431,48,5860,48],[6431,50,5860,50,"credential"],[6431,60,5860,60],[6431,61,5860,61],[6432,2,5861,0],[6433,2,5862,0],[6434,0,5863,0],[6435,0,5864,0],[6436,0,5865,0],[6437,0,5866,0],[6438,0,5867,0],[6439,0,5868,0],[6440,0,5869,0],[6441,0,5870,0],[6442,0,5871,0],[6443,0,5872,0],[6444,2,5873,0],[6444,17,5873,15,"linkWithCredential"],[6444,35,5873,33,"linkWithCredential"],[6444,36,5873,34,"user"],[6444,40,5873,38],[6444,42,5873,40,"credential"],[6444,52,5873,50],[6444,54,5873,52],[6445,4,5874,4],[6445,10,5874,10,"userInternal"],[6445,22,5874,22],[6445,25,5874,25],[6445,29,5874,25,"getModularInstance"],[6445,42,5874,43],[6445,43,5874,43,"getModularInstance"],[6445,61,5874,43],[6445,63,5874,44,"user"],[6445,67,5874,48],[6445,68,5874,49],[6446,4,5875,4],[6446,10,5875,10,"_assertLinkedStatus"],[6446,29,5875,29],[6446,30,5875,30],[6446,35,5875,35],[6446,37,5875,37,"userInternal"],[6446,49,5875,49],[6446,51,5875,51,"credential"],[6446,61,5875,61],[6446,62,5875,62,"providerId"],[6446,72,5875,72],[6446,73,5875,73],[6447,4,5876,4],[6447,11,5876,11,"_link$1"],[6447,18,5876,18],[6447,19,5876,19,"userInternal"],[6447,31,5876,31],[6447,33,5876,33,"credential"],[6447,43,5876,43],[6447,44,5876,44],[6448,2,5877,0],[6449,2,5878,0],[6450,0,5879,0],[6451,0,5880,0],[6452,0,5881,0],[6453,0,5882,0],[6454,0,5883,0],[6455,0,5884,0],[6456,0,5885,0],[6457,0,5886,0],[6458,0,5887,0],[6459,0,5888,0],[6460,0,5889,0],[6461,0,5890,0],[6462,0,5891,0],[6463,0,5892,0],[6464,0,5893,0],[6465,2,5894,0],[6465,17,5894,15,"reauthenticateWithCredential"],[6465,45,5894,43,"reauthenticateWithCredential"],[6465,46,5894,44,"user"],[6465,50,5894,48],[6465,52,5894,50,"credential"],[6465,62,5894,60],[6465,64,5894,62],[6466,4,5895,4],[6466,11,5895,11,"_reauthenticate"],[6466,26,5895,26],[6466,27,5895,27],[6466,31,5895,27,"getModularInstance"],[6466,44,5895,45],[6466,45,5895,45,"getModularInstance"],[6466,63,5895,45],[6466,65,5895,46,"user"],[6466,69,5895,50],[6466,70,5895,51],[6466,72,5895,53,"credential"],[6466,82,5895,63],[6466,83,5895,64],[6467,2,5896,0],[6469,2,5898,0],[6470,0,5899,0],[6471,0,5900,0],[6472,0,5901,0],[6473,0,5902,0],[6474,0,5903,0],[6475,0,5904,0],[6476,0,5905,0],[6477,0,5906,0],[6478,0,5907,0],[6479,0,5908,0],[6480,0,5909,0],[6481,0,5910,0],[6482,0,5911,0],[6483,0,5912,0],[6484,0,5913,0],[6485,2,5914,0],[6485,17,5914,15,"signInWithCustomToken$1"],[6485,40,5914,38,"signInWithCustomToken$1"],[6485,41,5914,39,"auth"],[6485,45,5914,43],[6485,47,5914,45,"request"],[6485,54,5914,52],[6485,56,5914,54],[6486,4,5915,4],[6486,11,5915,11,"_performSignInRequest"],[6486,32,5915,32],[6486,33,5915,33,"auth"],[6486,37,5915,37],[6486,39,5915,39],[6486,45,5915,45],[6486,46,5915,46],[6486,69,5915,69],[6486,105,5915,105],[6486,106,5915,106],[6486,148,5915,148,"_addTidIfNecessary"],[6486,166,5915,166],[6486,167,5915,167,"auth"],[6486,171,5915,171],[6486,173,5915,173,"request"],[6486,180,5915,180],[6486,181,5915,181],[6486,182,5915,182],[6487,2,5916,0],[6489,2,5918,0],[6490,0,5919,0],[6491,0,5920,0],[6492,0,5921,0],[6493,0,5922,0],[6494,0,5923,0],[6495,0,5924,0],[6496,0,5925,0],[6497,0,5926,0],[6498,0,5927,0],[6499,0,5928,0],[6500,0,5929,0],[6501,0,5930,0],[6502,0,5931,0],[6503,0,5932,0],[6504,0,5933,0],[6505,2,5934,0],[6506,0,5935,0],[6507,0,5936,0],[6508,0,5937,0],[6509,0,5938,0],[6510,0,5939,0],[6511,0,5940,0],[6512,0,5941,0],[6513,0,5942,0],[6514,0,5943,0],[6515,0,5944,0],[6516,0,5945,0],[6517,0,5946,0],[6518,0,5947,0],[6519,0,5948,0],[6520,0,5949,0],[6521,0,5950,0],[6522,0,5951,0],[6523,0,5952,0],[6524,2,5953,0],[6524,17,5953,15,"signInWithCustomToken"],[6524,38,5953,36,"signInWithCustomToken"],[6524,39,5953,37,"auth"],[6524,43,5953,41],[6524,45,5953,43,"customToken"],[6524,56,5953,54],[6524,58,5953,56],[6525,4,5954,4],[6525,8,5954,8],[6525,12,5954,8,"_isFirebaseServerApp"],[6525,24,5954,28],[6525,25,5954,28,"_isFirebaseServerApp"],[6525,45,5954,28],[6525,47,5954,29,"auth"],[6525,51,5954,33],[6525,52,5954,34,"app"],[6525,55,5954,37],[6525,56,5954,38],[6525,58,5954,40],[6526,6,5955,8],[6526,13,5955,15,"Promise"],[6526,20,5955,22],[6526,21,5955,23,"reject"],[6526,27,5955,29],[6526,28,5955,30,"_serverAppCurrentUserOperationNotSupportedError"],[6526,75,5955,77],[6526,76,5955,78,"auth"],[6526,80,5955,82],[6526,81,5955,83],[6526,82,5955,84],[6527,4,5956,4],[6528,4,5957,4],[6528,10,5957,10,"authInternal"],[6528,22,5957,22],[6528,25,5957,25,"_castAuth"],[6528,34,5957,34],[6528,35,5957,35,"auth"],[6528,39,5957,39],[6528,40,5957,40],[6529,4,5958,4],[6529,10,5958,10,"response"],[6529,18,5958,18],[6529,21,5958,21],[6529,27,5958,27,"signInWithCustomToken$1"],[6529,50,5958,50],[6529,51,5958,51,"authInternal"],[6529,63,5958,63],[6529,65,5958,65],[6530,6,5959,8,"token"],[6530,11,5959,13],[6530,13,5959,15,"customToken"],[6530,24,5959,26],[6531,6,5960,8,"returnSecureToken"],[6531,23,5960,25],[6531,25,5960,27],[6532,4,5961,4],[6532,5,5961,5],[6532,6,5961,6],[6533,4,5962,4],[6533,10,5962,10,"cred"],[6533,14,5962,14],[6533,17,5962,17],[6533,23,5962,23,"UserCredentialImpl"],[6533,41,5962,41],[6533,42,5962,42,"_fromIdTokenResponse"],[6533,62,5962,62],[6533,63,5962,63,"authInternal"],[6533,75,5962,75],[6533,77,5962,77],[6533,85,5962,85],[6533,86,5962,86],[6533,115,5962,115,"response"],[6533,123,5962,123],[6533,124,5962,124],[6534,4,5963,4],[6534,10,5963,10,"authInternal"],[6534,22,5963,22],[6534,23,5963,23,"_updateCurrentUser"],[6534,41,5963,41],[6534,42,5963,42,"cred"],[6534,46,5963,46],[6534,47,5963,47,"user"],[6534,51,5963,51],[6534,52,5963,52],[6535,4,5964,4],[6535,11,5964,11,"cred"],[6535,15,5964,15],[6536,2,5965,0],[6538,2,5967,0],[6539,0,5968,0],[6540,0,5969,0],[6541,0,5970,0],[6542,0,5971,0],[6543,0,5972,0],[6544,0,5973,0],[6545,0,5974,0],[6546,0,5975,0],[6547,0,5976,0],[6548,0,5977,0],[6549,0,5978,0],[6550,0,5979,0],[6551,0,5980,0],[6552,0,5981,0],[6553,0,5982,0],[6554,2,5983,0],[6554,8,5983,6,"MultiFactorInfoImpl"],[6554,27,5983,25],[6554,28,5983,26],[6555,4,5984,4,"constructor"],[6555,15,5984,15,"constructor"],[6555,16,5984,16,"factorId"],[6555,24,5984,24],[6555,26,5984,26,"response"],[6555,34,5984,34],[6555,36,5984,36],[6556,6,5985,8],[6556,10,5985,12],[6556,11,5985,13,"factorId"],[6556,19,5985,21],[6556,22,5985,24,"factorId"],[6556,30,5985,32],[6557,6,5986,8],[6557,10,5986,12],[6557,11,5986,13,"uid"],[6557,14,5986,16],[6557,17,5986,19,"response"],[6557,25,5986,27],[6557,26,5986,28,"mfaEnrollmentId"],[6557,41,5986,43],[6558,6,5987,8],[6558,10,5987,12],[6558,11,5987,13,"enrollmentTime"],[6558,25,5987,27],[6558,28,5987,30],[6558,32,5987,34,"Date"],[6558,36,5987,38],[6558,37,5987,39,"response"],[6558,45,5987,47],[6558,46,5987,48,"enrolledAt"],[6558,56,5987,58],[6558,57,5987,59],[6558,58,5987,60,"toUTCString"],[6558,69,5987,71],[6558,70,5987,72],[6558,71,5987,73],[6559,6,5988,8],[6559,10,5988,12],[6559,11,5988,13,"displayName"],[6559,22,5988,24],[6559,25,5988,27,"response"],[6559,33,5988,35],[6559,34,5988,36,"displayName"],[6559,45,5988,47],[6560,4,5989,4],[6561,4,5990,4],[6561,11,5990,11,"_fromServerResponse"],[6561,30,5990,30,"_fromServerResponse"],[6561,31,5990,31,"auth"],[6561,35,5990,35],[6561,37,5990,37,"enrollment"],[6561,47,5990,47],[6561,49,5990,49],[6562,6,5991,8],[6562,10,5991,12],[6562,21,5991,23],[6562,25,5991,27,"enrollment"],[6562,35,5991,37],[6562,37,5991,39],[6563,8,5992,12],[6563,15,5992,19,"PhoneMultiFactorInfoImpl"],[6563,39,5992,43],[6563,40,5992,44,"_fromServerResponse"],[6563,59,5992,63],[6563,60,5992,64,"auth"],[6563,64,5992,68],[6563,66,5992,70,"enrollment"],[6563,76,5992,80],[6563,77,5992,81],[6564,6,5993,8],[6564,7,5993,9],[6564,13,5994,13],[6564,17,5994,17],[6564,27,5994,27],[6564,31,5994,31,"enrollment"],[6564,41,5994,41],[6564,43,5994,43],[6565,8,5995,12],[6565,15,5995,19,"TotpMultiFactorInfoImpl"],[6565,38,5995,42],[6565,39,5995,43,"_fromServerResponse"],[6565,58,5995,62],[6565,59,5995,63,"auth"],[6565,63,5995,67],[6565,65,5995,69,"enrollment"],[6565,75,5995,79],[6565,76,5995,80],[6566,6,5996,8],[6567,6,5997,8],[6567,13,5997,15,"_fail"],[6567,18,5997,20],[6567,19,5997,21,"auth"],[6567,23,5997,25],[6567,25,5997,27],[6567,41,5997,43],[6567,42,5997,44],[6567,76,5997,78],[6567,77,5997,79],[6568,4,5998,4],[6569,2,5999,0],[6570,2,6000,0],[6570,8,6000,6,"PhoneMultiFactorInfoImpl"],[6570,32,6000,30],[6570,41,6000,39,"MultiFactorInfoImpl"],[6570,60,6000,58],[6570,61,6000,59],[6571,4,6001,4,"constructor"],[6571,15,6001,15,"constructor"],[6571,16,6001,16,"response"],[6571,24,6001,24],[6571,26,6001,26],[6572,6,6002,8],[6572,11,6002,13],[6572,12,6002,14],[6572,19,6002,21],[6572,20,6002,22],[6572,42,6002,44,"response"],[6572,50,6002,52],[6572,51,6002,53],[6573,6,6003,8],[6573,10,6003,12],[6573,11,6003,13,"phoneNumber"],[6573,22,6003,24],[6573,25,6003,27,"response"],[6573,33,6003,35],[6573,34,6003,36,"phoneInfo"],[6573,43,6003,45],[6574,4,6004,4],[6575,4,6005,4],[6575,11,6005,11,"_fromServerResponse"],[6575,30,6005,30,"_fromServerResponse"],[6575,31,6005,31,"_auth"],[6575,36,6005,36],[6575,38,6005,38,"enrollment"],[6575,48,6005,48],[6575,50,6005,50],[6576,6,6006,8],[6576,13,6006,15],[6576,17,6006,19,"PhoneMultiFactorInfoImpl"],[6576,41,6006,43],[6576,42,6006,44,"enrollment"],[6576,52,6006,54],[6576,53,6006,55],[6577,4,6007,4],[6578,2,6008,0],[6579,2,6009,0],[6579,8,6009,6,"TotpMultiFactorInfoImpl"],[6579,31,6009,29],[6579,40,6009,38,"MultiFactorInfoImpl"],[6579,59,6009,57],[6579,60,6009,58],[6580,4,6010,4,"constructor"],[6580,15,6010,15,"constructor"],[6580,16,6010,16,"response"],[6580,24,6010,24],[6580,26,6010,26],[6581,6,6011,8],[6581,11,6011,13],[6581,12,6011,14],[6581,18,6011,20],[6581,19,6011,21],[6581,40,6011,42,"response"],[6581,48,6011,50],[6581,49,6011,51],[6582,4,6012,4],[6583,4,6013,4],[6583,11,6013,11,"_fromServerResponse"],[6583,30,6013,30,"_fromServerResponse"],[6583,31,6013,31,"_auth"],[6583,36,6013,36],[6583,38,6013,38,"enrollment"],[6583,48,6013,48],[6583,50,6013,50],[6584,6,6014,8],[6584,13,6014,15],[6584,17,6014,19,"TotpMultiFactorInfoImpl"],[6584,40,6014,42],[6584,41,6014,43,"enrollment"],[6584,51,6014,53],[6584,52,6014,54],[6585,4,6015,4],[6586,2,6016,0],[6588,2,6018,0],[6589,0,6019,0],[6590,0,6020,0],[6591,0,6021,0],[6592,0,6022,0],[6593,0,6023,0],[6594,0,6024,0],[6595,0,6025,0],[6596,0,6026,0],[6597,0,6027,0],[6598,0,6028,0],[6599,0,6029,0],[6600,0,6030,0],[6601,0,6031,0],[6602,0,6032,0],[6603,0,6033,0],[6604,2,6034,0],[6604,11,6034,9,"_setActionCodeSettingsOnRequest"],[6604,42,6034,40,"_setActionCodeSettingsOnRequest"],[6604,43,6034,41,"auth"],[6604,47,6034,45],[6604,49,6034,47,"request"],[6604,56,6034,54],[6604,58,6034,56,"actionCodeSettings"],[6604,76,6034,74],[6604,78,6034,76],[6605,4,6035,4,"_assert"],[6605,11,6035,11],[6605,12,6035,12,"actionCodeSettings"],[6605,30,6035,30],[6605,31,6035,31,"url"],[6605,34,6035,34],[6605,36,6035,36,"length"],[6605,42,6035,42],[6605,45,6035,45],[6605,46,6035,46],[6605,48,6035,48,"auth"],[6605,52,6035,52],[6605,54,6035,54],[6605,76,6035,76],[6605,77,6035,77],[6605,117,6035,117],[6605,118,6035,118],[6606,4,6036,4,"_assert"],[6606,11,6036,11],[6606,12,6036,12],[6606,19,6036,19,"actionCodeSettings"],[6606,37,6036,37],[6606,38,6036,38,"dynamicLinkDomain"],[6606,55,6036,55],[6606,60,6036,60],[6606,71,6036,71],[6606,75,6037,8,"actionCodeSettings"],[6606,93,6037,26],[6606,94,6037,27,"dynamicLinkDomain"],[6606,111,6037,44],[6606,112,6037,45,"length"],[6606,118,6037,51],[6606,121,6037,54],[6606,122,6037,55],[6606,124,6037,57,"auth"],[6606,128,6037,61],[6606,130,6037,63],[6606,159,6037,92],[6606,160,6037,93],[6606,207,6037,140],[6606,208,6037,141],[6607,4,6038,4,"_assert"],[6607,11,6038,11],[6607,12,6038,12],[6607,19,6038,19,"actionCodeSettings"],[6607,37,6038,37],[6607,38,6038,38,"linkDomain"],[6607,48,6038,48],[6607,53,6038,53],[6607,64,6038,64],[6607,68,6039,8,"actionCodeSettings"],[6607,86,6039,26],[6607,87,6039,27,"linkDomain"],[6607,97,6039,37],[6607,98,6039,38,"length"],[6607,104,6039,44],[6607,107,6039,47],[6607,108,6039,48],[6607,110,6039,50,"auth"],[6607,114,6039,54],[6607,116,6039,56],[6607,145,6039,85],[6607,146,6039,86],[6607,193,6039,133],[6607,194,6039,134],[6608,4,6040,4,"request"],[6608,11,6040,11],[6608,12,6040,12,"continueUrl"],[6608,23,6040,23],[6608,26,6040,26,"actionCodeSettings"],[6608,44,6040,44],[6608,45,6040,45,"url"],[6608,48,6040,48],[6609,4,6041,4,"request"],[6609,11,6041,11],[6609,12,6041,12,"dynamicLinkDomain"],[6609,29,6041,29],[6609,32,6041,32,"actionCodeSettings"],[6609,50,6041,50],[6609,51,6041,51,"dynamicLinkDomain"],[6609,68,6041,68],[6610,4,6042,4,"request"],[6610,11,6042,11],[6610,12,6042,12,"linkDomain"],[6610,22,6042,22],[6610,25,6042,25,"actionCodeSettings"],[6610,43,6042,43],[6610,44,6042,44,"linkDomain"],[6610,54,6042,54],[6611,4,6043,4,"request"],[6611,11,6043,11],[6611,12,6043,12,"canHandleCodeInApp"],[6611,30,6043,30],[6611,33,6043,33,"actionCodeSettings"],[6611,51,6043,51],[6611,52,6043,52,"handleCodeInApp"],[6611,67,6043,67],[6612,4,6044,4],[6612,8,6044,8,"actionCodeSettings"],[6612,26,6044,26],[6612,27,6044,27,"iOS"],[6612,30,6044,30],[6612,32,6044,32],[6613,6,6045,8,"_assert"],[6613,13,6045,15],[6613,14,6045,16,"actionCodeSettings"],[6613,32,6045,34],[6613,33,6045,35,"iOS"],[6613,36,6045,38],[6613,37,6045,39,"bundleId"],[6613,45,6045,47],[6613,46,6045,48,"length"],[6613,52,6045,54],[6613,55,6045,57],[6613,56,6045,58],[6613,58,6045,60,"auth"],[6613,62,6045,64],[6613,64,6045,66],[6613,87,6045,89],[6613,88,6045,90],[6613,129,6045,131],[6613,130,6045,132],[6614,6,6046,8,"request"],[6614,13,6046,15],[6614,14,6046,16,"iOSBundleId"],[6614,25,6046,27],[6614,28,6046,30,"actionCodeSettings"],[6614,46,6046,48],[6614,47,6046,49,"iOS"],[6614,50,6046,52],[6614,51,6046,53,"bundleId"],[6614,59,6046,61],[6615,4,6047,4],[6616,4,6048,4],[6616,8,6048,8,"actionCodeSettings"],[6616,26,6048,26],[6616,27,6048,27,"android"],[6616,34,6048,34],[6616,36,6048,36],[6617,6,6049,8,"_assert"],[6617,13,6049,15],[6617,14,6049,16,"actionCodeSettings"],[6617,32,6049,34],[6617,33,6049,35,"android"],[6617,40,6049,42],[6617,41,6049,43,"packageName"],[6617,52,6049,54],[6617,53,6049,55,"length"],[6617,59,6049,61],[6617,62,6049,64],[6617,63,6049,65],[6617,65,6049,67,"auth"],[6617,69,6049,71],[6617,71,6049,73],[6617,97,6049,99],[6617,98,6049,100],[6617,146,6049,148],[6617,147,6049,149],[6618,6,6050,8,"request"],[6618,13,6050,15],[6618,14,6050,16,"androidInstallApp"],[6618,31,6050,33],[6618,34,6050,36,"actionCodeSettings"],[6618,52,6050,54],[6618,53,6050,55,"android"],[6618,60,6050,62],[6618,61,6050,63,"installApp"],[6618,71,6050,73],[6619,6,6051,8,"request"],[6619,13,6051,15],[6619,14,6051,16,"androidMinimumVersionCode"],[6619,39,6051,41],[6619,42,6052,12,"actionCodeSettings"],[6619,60,6052,30],[6619,61,6052,31,"android"],[6619,68,6052,38],[6619,69,6052,39,"minimumVersion"],[6619,83,6052,53],[6620,6,6053,8,"request"],[6620,13,6053,15],[6620,14,6053,16,"androidPackageName"],[6620,32,6053,34],[6620,35,6053,37,"actionCodeSettings"],[6620,53,6053,55],[6620,54,6053,56,"android"],[6620,61,6053,63],[6620,62,6053,64,"packageName"],[6620,73,6053,75],[6621,4,6054,4],[6622,2,6055,0],[6624,2,6057,0],[6625,0,6058,0],[6626,0,6059,0],[6627,0,6060,0],[6628,0,6061,0],[6629,0,6062,0],[6630,0,6063,0],[6631,0,6064,0],[6632,0,6065,0],[6633,0,6066,0],[6634,0,6067,0],[6635,0,6068,0],[6636,0,6069,0],[6637,0,6070,0],[6638,0,6071,0],[6639,0,6072,0],[6640,2,6073,0],[6641,0,6074,0],[6642,0,6075,0],[6643,0,6076,0],[6644,0,6077,0],[6645,0,6078,0],[6646,0,6079,0],[6647,0,6080,0],[6648,0,6081,0],[6649,0,6082,0],[6650,0,6083,0],[6651,0,6084,0],[6652,0,6085,0],[6653,2,6086,0],[6653,17,6086,15,"recachePasswordPolicy"],[6653,38,6086,36,"recachePasswordPolicy"],[6653,39,6086,37,"auth"],[6653,43,6086,41],[6653,45,6086,43],[6654,4,6087,4],[6654,10,6087,10,"authInternal"],[6654,22,6087,22],[6654,25,6087,25,"_castAuth"],[6654,34,6087,34],[6654,35,6087,35,"auth"],[6654,39,6087,39],[6654,40,6087,40],[6655,4,6088,4],[6655,8,6088,8,"authInternal"],[6655,20,6088,20],[6655,21,6088,21,"_getPasswordPolicyInternal"],[6655,47,6088,47],[6655,48,6088,48],[6655,49,6088,49],[6655,51,6088,51],[6656,6,6089,8],[6656,12,6089,14,"authInternal"],[6656,24,6089,26],[6656,25,6089,27,"_updatePasswordPolicy"],[6656,46,6089,48],[6656,47,6089,49],[6656,48,6089,50],[6657,4,6090,4],[6658,2,6091,0],[6659,2,6092,0],[6660,0,6093,0],[6661,0,6094,0],[6662,0,6095,0],[6663,0,6096,0],[6664,0,6097,0],[6665,0,6098,0],[6666,0,6099,0],[6667,0,6100,0],[6668,0,6101,0],[6669,0,6102,0],[6670,0,6103,0],[6671,0,6104,0],[6672,0,6105,0],[6673,0,6106,0],[6674,0,6107,0],[6675,0,6108,0],[6676,0,6109,0],[6677,0,6110,0],[6678,0,6111,0],[6679,0,6112,0],[6680,0,6113,0],[6681,0,6114,0],[6682,0,6115,0],[6683,0,6116,0],[6684,0,6117,0],[6685,0,6118,0],[6686,0,6119,0],[6687,0,6120,0],[6688,0,6121,0],[6689,0,6122,0],[6690,0,6123,0],[6691,0,6124,0],[6692,0,6125,0],[6693,0,6126,0],[6694,2,6127,0],[6694,17,6127,15,"sendPasswordResetEmail"],[6694,39,6127,37,"sendPasswordResetEmail"],[6694,40,6127,38,"auth"],[6694,44,6127,42],[6694,46,6127,44,"email"],[6694,51,6127,49],[6694,53,6127,51,"actionCodeSettings"],[6694,71,6127,69],[6694,73,6127,71],[6695,4,6128,4],[6695,10,6128,10,"authInternal"],[6695,22,6128,22],[6695,25,6128,25,"_castAuth"],[6695,34,6128,34],[6695,35,6128,35,"auth"],[6695,39,6128,39],[6695,40,6128,40],[6696,4,6129,4],[6696,10,6129,10,"request"],[6696,17,6129,17],[6696,20,6129,20],[6697,6,6130,8,"requestType"],[6697,17,6130,19],[6697,19,6130,21],[6697,35,6130,37],[6697,36,6130,38],[6698,6,6131,8,"email"],[6698,11,6131,13],[6699,6,6132,8,"clientType"],[6699,16,6132,18],[6699,18,6132,20],[6699,35,6132,37],[6699,36,6132,38],[6700,4,6133,4],[6700,5,6133,5],[6701,4,6134,4],[6701,8,6134,8,"actionCodeSettings"],[6701,26,6134,26],[6701,28,6134,28],[6702,6,6135,8,"_setActionCodeSettingsOnRequest"],[6702,37,6135,39],[6702,38,6135,40,"authInternal"],[6702,50,6135,52],[6702,52,6135,54,"request"],[6702,59,6135,61],[6702,61,6135,63,"actionCodeSettings"],[6702,79,6135,81],[6702,80,6135,82],[6703,4,6136,4],[6704,4,6137,4],[6704,10,6137,10,"handleRecaptchaFlow"],[6704,29,6137,29],[6704,30,6137,30,"authInternal"],[6704,42,6137,42],[6704,44,6137,44,"request"],[6704,51,6137,51],[6704,53,6137,53],[6704,65,6137,65],[6704,66,6137,66],[6704,106,6137,106,"sendPasswordResetEmail$1"],[6704,130,6137,130],[6704,132,6137,132],[6704,157,6137,157],[6704,158,6137,158],[6704,209,6137,209],[6704,210,6137,210],[6705,2,6138,0],[6706,2,6139,0],[6707,0,6140,0],[6708,0,6141,0],[6709,0,6142,0],[6710,0,6143,0],[6711,0,6144,0],[6712,0,6145,0],[6713,0,6146,0],[6714,0,6147,0],[6715,2,6148,0],[6715,17,6148,15,"confirmPasswordReset"],[6715,37,6148,35,"confirmPasswordReset"],[6715,38,6148,36,"auth"],[6715,42,6148,40],[6715,44,6148,42,"oobCode"],[6715,51,6148,49],[6715,53,6148,51,"newPassword"],[6715,64,6148,62],[6715,66,6148,64],[6716,4,6149,4],[6716,10,6149,10,"resetPassword"],[6716,23,6149,23],[6716,24,6149,24],[6716,28,6149,24,"getModularInstance"],[6716,41,6149,42],[6716,42,6149,42,"getModularInstance"],[6716,60,6149,42],[6716,62,6149,43,"auth"],[6716,66,6149,47],[6716,67,6149,48],[6716,69,6149,50],[6717,6,6150,8,"oobCode"],[6717,13,6150,15],[6718,6,6151,8,"newPassword"],[6719,4,6152,4],[6719,5,6152,5],[6719,6,6152,6],[6719,7,6153,9,"catch"],[6719,12,6153,14],[6719,13,6153,15],[6719,19,6153,22,"error"],[6719,24,6153,27],[6719,28,6153,32],[6720,6,6154,8],[6720,10,6154,12,"error"],[6720,15,6154,17],[6720,16,6154,18,"code"],[6720,20,6154,22],[6720,25,6155,12],[6720,33,6155,20],[6720,70,6155,57],[6720,71,6155,58],[6720,128,6155,115],[6720,130,6155,117],[6721,8,6156,12],[6721,13,6156,17,"recachePasswordPolicy"],[6721,34,6156,38],[6721,35,6156,39,"auth"],[6721,39,6156,43],[6721,40,6156,44],[6722,6,6157,8],[6723,6,6158,8],[6723,12,6158,14,"error"],[6723,17,6158,19],[6724,4,6159,4],[6724,5,6159,5],[6724,6,6159,6],[6725,4,6160,4],[6726,2,6161,0],[6727,2,6162,0],[6728,0,6163,0],[6729,0,6164,0],[6730,0,6165,0],[6731,0,6166,0],[6732,0,6167,0],[6733,0,6168,0],[6734,0,6169,0],[6735,2,6170,0],[6735,17,6170,15,"applyActionCode"],[6735,32,6170,30,"applyActionCode"],[6735,33,6170,31,"auth"],[6735,37,6170,35],[6735,39,6170,37,"oobCode"],[6735,46,6170,44],[6735,48,6170,46],[6736,4,6171,4],[6736,10,6171,10,"applyActionCode$1"],[6736,27,6171,27],[6736,28,6171,28],[6736,32,6171,28,"getModularInstance"],[6736,45,6171,46],[6736,46,6171,46,"getModularInstance"],[6736,64,6171,46],[6736,66,6171,47,"auth"],[6736,70,6171,51],[6736,71,6171,52],[6736,73,6171,54],[6737,6,6171,56,"oobCode"],[6738,4,6171,64],[6738,5,6171,65],[6738,6,6171,66],[6739,2,6172,0],[6740,2,6173,0],[6741,0,6174,0],[6742,0,6175,0],[6743,0,6176,0],[6744,0,6177,0],[6745,0,6178,0],[6746,0,6179,0],[6747,0,6180,0],[6748,0,6181,0],[6749,0,6182,0],[6750,2,6183,0],[6750,17,6183,15,"checkActionCode"],[6750,32,6183,30,"checkActionCode"],[6750,33,6183,31,"auth"],[6750,37,6183,35],[6750,39,6183,37,"oobCode"],[6750,46,6183,44],[6750,48,6183,46],[6751,4,6184,4],[6751,10,6184,10,"authModular"],[6751,21,6184,21],[6751,24,6184,24],[6751,28,6184,24,"getModularInstance"],[6751,41,6184,42],[6751,42,6184,42,"getModularInstance"],[6751,60,6184,42],[6751,62,6184,43,"auth"],[6751,66,6184,47],[6751,67,6184,48],[6752,4,6185,4],[6752,10,6185,10,"response"],[6752,18,6185,18],[6752,21,6185,21],[6752,27,6185,27,"resetPassword"],[6752,40,6185,40],[6752,41,6185,41,"authModular"],[6752,52,6185,52],[6752,54,6185,54],[6753,6,6185,56,"oobCode"],[6754,4,6185,64],[6754,5,6185,65],[6754,6,6185,66],[6755,4,6186,4],[6756,4,6187,4],[6757,4,6188,4],[6758,4,6189,4],[6759,4,6190,4],[6760,4,6191,4],[6761,4,6192,4],[6761,10,6192,10,"operation"],[6761,19,6192,19],[6761,22,6192,22,"response"],[6761,30,6192,30],[6761,31,6192,31,"requestType"],[6761,42,6192,42],[6762,4,6193,4,"_assert"],[6762,11,6193,11],[6762,12,6193,12,"operation"],[6762,21,6193,21],[6762,23,6193,23,"authModular"],[6762,34,6193,34],[6762,36,6193,36],[6762,52,6193,52],[6762,53,6193,53],[6762,87,6193,87],[6762,88,6193,88],[6763,4,6194,4],[6763,12,6194,12,"operation"],[6763,21,6194,21],[6764,6,6195,8],[6764,11,6195,13],[6764,25,6195,27],[6764,26,6195,28],[6765,8,6196,12],[6766,6,6197,8],[6766,11,6197,13],[6766,36,6197,38],[6766,37,6197,39],[6767,8,6198,12,"_assert"],[6767,15,6198,19],[6767,16,6198,20,"response"],[6767,24,6198,28],[6767,25,6198,29,"newEmail"],[6767,33,6198,37],[6767,35,6198,39,"authModular"],[6767,46,6198,50],[6767,48,6198,52],[6767,64,6198,68],[6767,65,6198,69],[6767,99,6198,103],[6767,100,6198,104],[6768,8,6199,12],[6769,6,6200,8],[6769,11,6200,13],[6769,42,6200,44],[6769,43,6200,45],[6770,8,6201,12,"_assert"],[6770,15,6201,19],[6770,16,6201,20,"response"],[6770,24,6201,28],[6770,25,6201,29,"mfaInfo"],[6770,32,6201,36],[6770,34,6201,38,"authModular"],[6770,45,6201,49],[6770,47,6201,51],[6770,63,6201,67],[6770,64,6201,68],[6770,98,6201,102],[6770,99,6201,103],[6771,6,6202,8],[6772,6,6203,8],[6773,8,6204,12,"_assert"],[6773,15,6204,19],[6773,16,6204,20,"response"],[6773,24,6204,28],[6773,25,6204,29,"email"],[6773,30,6204,34],[6773,32,6204,36,"authModular"],[6773,43,6204,47],[6773,45,6204,49],[6773,61,6204,65],[6773,62,6204,66],[6773,96,6204,100],[6773,97,6204,101],[6774,4,6205,4],[6775,4,6206,4],[6776,4,6207,4],[6776,8,6207,8,"multiFactorInfo"],[6776,23,6207,23],[6776,26,6207,26],[6776,30,6207,30],[6777,4,6208,4],[6777,8,6208,8,"response"],[6777,16,6208,16],[6777,17,6208,17,"mfaInfo"],[6777,24,6208,24],[6777,26,6208,26],[6778,6,6209,8,"multiFactorInfo"],[6778,21,6209,23],[6778,24,6209,26,"MultiFactorInfoImpl"],[6778,43,6209,45],[6778,44,6209,46,"_fromServerResponse"],[6778,63,6209,65],[6778,64,6209,66,"_castAuth"],[6778,73,6209,75],[6778,74,6209,76,"authModular"],[6778,85,6209,87],[6778,86,6209,88],[6778,88,6209,90,"response"],[6778,96,6209,98],[6778,97,6209,99,"mfaInfo"],[6778,104,6209,106],[6778,105,6209,107],[6779,4,6210,4],[6780,4,6211,4],[6780,11,6211,11],[6781,6,6212,8,"data"],[6781,10,6212,12],[6781,12,6212,14],[6782,8,6213,12,"email"],[6782,13,6213,17],[6782,15,6213,19],[6782,16,6213,20,"response"],[6782,24,6213,28],[6782,25,6213,29,"requestType"],[6782,36,6213,40],[6782,41,6213,45],[6782,66,6213,70],[6782,67,6213,71],[6782,119,6214,18,"response"],[6782,127,6214,26],[6782,128,6214,27,"newEmail"],[6782,136,6214,35],[6782,139,6215,18,"response"],[6782,147,6215,26],[6782,148,6215,27,"email"],[6782,153,6215,32],[6782,158,6215,37],[6782,162,6215,41],[6783,8,6216,12,"previousEmail"],[6783,21,6216,25],[6783,23,6216,27],[6783,24,6216,28,"response"],[6783,32,6216,36],[6783,33,6216,37,"requestType"],[6783,44,6216,48],[6783,49,6216,53],[6783,74,6216,78],[6783,75,6216,79],[6783,127,6217,18,"response"],[6783,135,6217,26],[6783,136,6217,27,"email"],[6783,141,6217,32],[6783,144,6218,18,"response"],[6783,152,6218,26],[6783,153,6218,27,"newEmail"],[6783,161,6218,35],[6783,166,6218,40],[6783,170,6218,44],[6784,8,6219,12,"multiFactorInfo"],[6785,6,6220,8],[6785,7,6220,9],[6786,6,6221,8,"operation"],[6787,4,6222,4],[6787,5,6222,5],[6788,2,6223,0],[6789,2,6224,0],[6790,0,6225,0],[6791,0,6226,0],[6792,0,6227,0],[6793,0,6228,0],[6794,0,6229,0],[6795,0,6230,0],[6796,0,6231,0],[6797,0,6232,0],[6798,0,6233,0],[6799,2,6234,0],[6799,17,6234,15,"verifyPasswordResetCode"],[6799,40,6234,38,"verifyPasswordResetCode"],[6799,41,6234,39,"auth"],[6799,45,6234,43],[6799,47,6234,45,"code"],[6799,51,6234,49],[6799,53,6234,51],[6800,4,6235,4],[6800,10,6235,10],[6801,6,6235,12,"data"],[6802,4,6235,17],[6802,5,6235,18],[6802,8,6235,21],[6802,14,6235,27,"checkActionCode"],[6802,29,6235,42],[6802,30,6235,43],[6802,34,6235,43,"getModularInstance"],[6802,47,6235,61],[6802,48,6235,61,"getModularInstance"],[6802,66,6235,61],[6802,68,6235,62,"auth"],[6802,72,6235,66],[6802,73,6235,67],[6802,75,6235,69,"code"],[6802,79,6235,73],[6802,80,6235,74],[6803,4,6236,4],[6804,4,6237,4],[6804,11,6237,11,"data"],[6804,15,6237,15],[6804,16,6237,16,"email"],[6804,21,6237,21],[6805,2,6238,0],[6806,2,6239,0],[6807,0,6240,0],[6808,0,6241,0],[6809,0,6242,0],[6810,0,6243,0],[6811,0,6244,0],[6812,0,6245,0],[6813,0,6246,0],[6814,0,6247,0],[6815,0,6248,0],[6816,0,6249,0],[6817,0,6250,0],[6818,0,6251,0],[6819,0,6252,0],[6820,0,6253,0],[6821,0,6254,0],[6822,0,6255,0],[6823,0,6256,0],[6824,0,6257,0],[6825,0,6258,0],[6826,2,6259,0],[6826,17,6259,15,"createUserWithEmailAndPassword"],[6826,47,6259,45,"createUserWithEmailAndPassword"],[6826,48,6259,46,"auth"],[6826,52,6259,50],[6826,54,6259,52,"email"],[6826,59,6259,57],[6826,61,6259,59,"password"],[6826,69,6259,67],[6826,71,6259,69],[6827,4,6260,4],[6827,8,6260,8],[6827,12,6260,8,"_isFirebaseServerApp"],[6827,24,6260,28],[6827,25,6260,28,"_isFirebaseServerApp"],[6827,45,6260,28],[6827,47,6260,29,"auth"],[6827,51,6260,33],[6827,52,6260,34,"app"],[6827,55,6260,37],[6827,56,6260,38],[6827,58,6260,40],[6828,6,6261,8],[6828,13,6261,15,"Promise"],[6828,20,6261,22],[6828,21,6261,23,"reject"],[6828,27,6261,29],[6828,28,6261,30,"_serverAppCurrentUserOperationNotSupportedError"],[6828,75,6261,77],[6828,76,6261,78,"auth"],[6828,80,6261,82],[6828,81,6261,83],[6828,82,6261,84],[6829,4,6262,4],[6830,4,6263,4],[6830,10,6263,10,"authInternal"],[6830,22,6263,22],[6830,25,6263,25,"_castAuth"],[6830,34,6263,34],[6830,35,6263,35,"auth"],[6830,39,6263,39],[6830,40,6263,40],[6831,4,6264,4],[6831,10,6264,10,"request"],[6831,17,6264,17],[6831,20,6264,20],[6832,6,6265,8,"returnSecureToken"],[6832,23,6265,25],[6832,25,6265,27],[6832,29,6265,31],[6833,6,6266,8,"email"],[6833,11,6266,13],[6834,6,6267,8,"password"],[6834,14,6267,16],[6835,6,6268,8,"clientType"],[6835,16,6268,18],[6835,18,6268,20],[6835,35,6268,37],[6835,36,6268,38],[6836,4,6269,4],[6836,5,6269,5],[6837,4,6270,4],[6837,10,6270,10,"signUpResponse"],[6837,24,6270,24],[6837,27,6270,27,"handleRecaptchaFlow"],[6837,46,6270,46],[6837,47,6270,47,"authInternal"],[6837,59,6270,59],[6837,61,6270,61,"request"],[6837,68,6270,68],[6837,70,6270,70],[6837,86,6270,86],[6837,87,6270,87],[6837,131,6270,131,"signUp"],[6837,137,6270,137],[6837,139,6270,139],[6837,164,6270,164],[6837,165,6270,165],[6837,216,6270,216],[6837,217,6270,217],[6838,4,6271,4],[6838,10,6271,10,"response"],[6838,18,6271,18],[6838,21,6271,21],[6838,27,6271,27,"signUpResponse"],[6838,41,6271,41],[6838,42,6271,42,"catch"],[6838,47,6271,47],[6838,48,6271,48,"error"],[6838,53,6271,53],[6838,57,6271,57],[6839,6,6272,8],[6839,10,6272,12,"error"],[6839,15,6272,17],[6839,16,6272,18,"code"],[6839,20,6272,22],[6839,25,6272,27],[6839,33,6272,35],[6839,70,6272,72],[6839,71,6272,73],[6839,128,6272,130],[6839,130,6272,132],[6840,8,6273,12],[6840,13,6273,17,"recachePasswordPolicy"],[6840,34,6273,38],[6840,35,6273,39,"auth"],[6840,39,6273,43],[6840,40,6273,44],[6841,6,6274,8],[6842,6,6275,8],[6842,12,6275,14,"error"],[6842,17,6275,19],[6843,4,6276,4],[6843,5,6276,5],[6843,6,6276,6],[6844,4,6277,4],[6844,10,6277,10,"userCredential"],[6844,24,6277,24],[6844,27,6277,27],[6844,33,6277,33,"UserCredentialImpl"],[6844,51,6277,51],[6844,52,6277,52,"_fromIdTokenResponse"],[6844,72,6277,72],[6844,73,6277,73,"authInternal"],[6844,85,6277,85],[6844,87,6277,87],[6844,95,6277,95],[6844,96,6277,96],[6844,125,6277,125,"response"],[6844,133,6277,133],[6844,134,6277,134],[6845,4,6278,4],[6845,10,6278,10,"authInternal"],[6845,22,6278,22],[6845,23,6278,23,"_updateCurrentUser"],[6845,41,6278,41],[6845,42,6278,42,"userCredential"],[6845,56,6278,56],[6845,57,6278,57,"user"],[6845,61,6278,61],[6845,62,6278,62],[6846,4,6279,4],[6846,11,6279,11,"userCredential"],[6846,25,6279,25],[6847,2,6280,0],[6848,2,6281,0],[6849,0,6282,0],[6850,0,6283,0],[6851,0,6284,0],[6852,0,6285,0],[6853,0,6286,0],[6854,0,6287,0],[6855,0,6288,0],[6856,0,6289,0],[6857,0,6290,0],[6858,0,6291,0],[6859,0,6292,0],[6860,0,6293,0],[6861,0,6294,0],[6862,0,6295,0],[6863,0,6296,0],[6864,0,6297,0],[6865,0,6298,0],[6866,0,6299,0],[6867,0,6300,0],[6868,0,6301,0],[6869,0,6302,0],[6870,0,6303,0],[6871,2,6304,0],[6871,11,6304,9,"signInWithEmailAndPassword"],[6871,37,6304,35,"signInWithEmailAndPassword"],[6871,38,6304,36,"auth"],[6871,42,6304,40],[6871,44,6304,42,"email"],[6871,49,6304,47],[6871,51,6304,49,"password"],[6871,59,6304,57],[6871,61,6304,59],[6872,4,6305,4],[6872,8,6305,8],[6872,12,6305,8,"_isFirebaseServerApp"],[6872,24,6305,28],[6872,25,6305,28,"_isFirebaseServerApp"],[6872,45,6305,28],[6872,47,6305,29,"auth"],[6872,51,6305,33],[6872,52,6305,34,"app"],[6872,55,6305,37],[6872,56,6305,38],[6872,58,6305,40],[6873,6,6306,8],[6873,13,6306,15,"Promise"],[6873,20,6306,22],[6873,21,6306,23,"reject"],[6873,27,6306,29],[6873,28,6306,30,"_serverAppCurrentUserOperationNotSupportedError"],[6873,75,6306,77],[6873,76,6306,78,"auth"],[6873,80,6306,82],[6873,81,6306,83],[6873,82,6306,84],[6874,4,6307,4],[6875,4,6308,4],[6875,11,6308,11,"signInWithCredential"],[6875,31,6308,31],[6875,32,6308,32],[6875,36,6308,32,"getModularInstance"],[6875,49,6308,50],[6875,50,6308,50,"getModularInstance"],[6875,68,6308,50],[6875,70,6308,51,"auth"],[6875,74,6308,55],[6875,75,6308,56],[6875,77,6308,58,"EmailAuthProvider"],[6875,94,6308,75],[6875,95,6308,76,"credential"],[6875,105,6308,86],[6875,106,6308,87,"email"],[6875,111,6308,92],[6875,113,6308,94,"password"],[6875,121,6308,102],[6875,122,6308,103],[6875,123,6308,104],[6875,124,6308,105,"catch"],[6875,129,6308,110],[6875,130,6308,111],[6875,136,6308,118,"error"],[6875,141,6308,123],[6875,145,6308,128],[6876,6,6309,8],[6876,10,6309,12,"error"],[6876,15,6309,17],[6876,16,6309,18,"code"],[6876,20,6309,22],[6876,25,6309,27],[6876,33,6309,35],[6876,70,6309,72],[6876,71,6309,73],[6876,128,6309,130],[6876,130,6309,132],[6877,8,6310,12],[6877,13,6310,17,"recachePasswordPolicy"],[6877,34,6310,38],[6877,35,6310,39,"auth"],[6877,39,6310,43],[6877,40,6310,44],[6878,6,6311,8],[6879,6,6312,8],[6879,12,6312,14,"error"],[6879,17,6312,19],[6880,4,6313,4],[6880,5,6313,5],[6880,6,6313,6],[6881,2,6314,0],[6883,2,6316,0],[6884,0,6317,0],[6885,0,6318,0],[6886,0,6319,0],[6887,0,6320,0],[6888,0,6321,0],[6889,0,6322,0],[6890,0,6323,0],[6891,0,6324,0],[6892,0,6325,0],[6893,0,6326,0],[6894,0,6327,0],[6895,0,6328,0],[6896,0,6329,0],[6897,0,6330,0],[6898,0,6331,0],[6899,2,6332,0],[6900,0,6333,0],[6901,0,6334,0],[6902,0,6335,0],[6903,0,6336,0],[6904,0,6337,0],[6905,0,6338,0],[6906,0,6339,0],[6907,0,6340,0],[6908,0,6341,0],[6909,0,6342,0],[6910,0,6343,0],[6911,0,6344,0],[6912,0,6345,0],[6913,0,6346,0],[6914,0,6347,0],[6915,0,6348,0],[6916,0,6349,0],[6917,0,6350,0],[6918,0,6351,0],[6919,0,6352,0],[6920,0,6353,0],[6921,0,6354,0],[6922,0,6355,0],[6923,0,6356,0],[6924,0,6357,0],[6925,0,6358,0],[6926,0,6359,0],[6927,0,6360,0],[6928,0,6361,0],[6929,0,6362,0],[6930,0,6363,0],[6931,0,6364,0],[6932,0,6365,0],[6933,0,6366,0],[6934,0,6367,0],[6935,0,6368,0],[6936,0,6369,0],[6937,2,6370,0],[6937,17,6370,15,"sendSignInLinkToEmail"],[6937,38,6370,36,"sendSignInLinkToEmail"],[6937,39,6370,37,"auth"],[6937,43,6370,41],[6937,45,6370,43,"email"],[6937,50,6370,48],[6937,52,6370,50,"actionCodeSettings"],[6937,70,6370,68],[6937,72,6370,70],[6938,4,6371,4],[6938,10,6371,10,"authInternal"],[6938,22,6371,22],[6938,25,6371,25,"_castAuth"],[6938,34,6371,34],[6938,35,6371,35,"auth"],[6938,39,6371,39],[6938,40,6371,40],[6939,4,6372,4],[6939,10,6372,10,"request"],[6939,17,6372,17],[6939,20,6372,20],[6940,6,6373,8,"requestType"],[6940,17,6373,19],[6940,19,6373,21],[6940,33,6373,35],[6940,34,6373,36],[6941,6,6374,8,"email"],[6941,11,6374,13],[6942,6,6375,8,"clientType"],[6942,16,6375,18],[6942,18,6375,20],[6942,35,6375,37],[6942,36,6375,38],[6943,4,6376,4],[6943,5,6376,5],[6944,4,6377,4],[6944,13,6377,13,"setActionCodeSettings"],[6944,34,6377,34,"setActionCodeSettings"],[6944,35,6377,35,"request"],[6944,42,6377,42],[6944,44,6377,44,"actionCodeSettings"],[6944,62,6377,62],[6944,64,6377,64],[6945,6,6378,8,"_assert"],[6945,13,6378,15],[6945,14,6378,16,"actionCodeSettings"],[6945,32,6378,34],[6945,33,6378,35,"handleCodeInApp"],[6945,48,6378,50],[6945,50,6378,52,"authInternal"],[6945,62,6378,64],[6945,64,6378,66],[6945,80,6378,82],[6945,81,6378,83],[6945,115,6378,117],[6945,116,6378,118],[6946,6,6379,8],[6946,10,6379,12,"actionCodeSettings"],[6946,28,6379,30],[6946,30,6379,32],[6947,8,6380,12,"_setActionCodeSettingsOnRequest"],[6947,39,6380,43],[6947,40,6380,44,"authInternal"],[6947,52,6380,56],[6947,54,6380,58,"request"],[6947,61,6380,65],[6947,63,6380,67,"actionCodeSettings"],[6947,81,6380,85],[6947,82,6380,86],[6948,6,6381,8],[6949,4,6382,4],[6950,4,6383,4,"setActionCodeSettings"],[6950,25,6383,25],[6950,26,6383,26,"request"],[6950,33,6383,33],[6950,35,6383,35,"actionCodeSettings"],[6950,53,6383,53],[6950,54,6383,54],[6951,4,6384,4],[6951,10,6384,10,"handleRecaptchaFlow"],[6951,29,6384,29],[6951,30,6384,30,"authInternal"],[6951,42,6384,42],[6951,44,6384,44,"request"],[6951,51,6384,51],[6951,53,6384,53],[6951,65,6384,65],[6951,66,6384,66],[6951,106,6384,106,"sendSignInLinkToEmail$1"],[6951,129,6384,129],[6951,131,6384,131],[6951,156,6384,156],[6951,157,6384,157],[6951,208,6384,208],[6951,209,6384,209],[6952,2,6385,0],[6953,2,6386,0],[6954,0,6387,0],[6955,0,6388,0],[6956,0,6389,0],[6957,0,6390,0],[6958,0,6391,0],[6959,0,6392,0],[6960,0,6393,0],[6961,2,6394,0],[6961,11,6394,9,"isSignInWithEmailLink"],[6961,32,6394,30,"isSignInWithEmailLink"],[6961,33,6394,31,"auth"],[6961,37,6394,35],[6961,39,6394,37,"emailLink"],[6961,48,6394,46],[6961,50,6394,48],[6962,4,6395,4],[6962,10,6395,10,"actionCodeUrl"],[6962,23,6395,23],[6962,26,6395,26,"ActionCodeURL"],[6962,39,6395,39],[6962,40,6395,40,"parseLink"],[6962,49,6395,49],[6962,50,6395,50,"emailLink"],[6962,59,6395,59],[6962,60,6395,60],[6963,4,6396,4],[6963,11,6396,11,"actionCodeUrl"],[6963,24,6396,24],[6963,26,6396,26,"operation"],[6963,35,6396,35],[6963,40,6396,40],[6963,54,6396,54],[6963,55,6396,55],[6964,2,6397,0],[6965,2,6398,0],[6966,0,6399,0],[6967,0,6400,0],[6968,0,6401,0],[6969,0,6402,0],[6970,0,6403,0],[6971,0,6404,0],[6972,0,6405,0],[6973,0,6406,0],[6974,0,6407,0],[6975,0,6408,0],[6976,0,6409,0],[6977,0,6410,0],[6978,0,6411,0],[6979,0,6412,0],[6980,0,6413,0],[6981,0,6414,0],[6982,0,6415,0],[6983,0,6416,0],[6984,0,6417,0],[6985,0,6418,0],[6986,0,6419,0],[6987,0,6420,0],[6988,0,6421,0],[6989,0,6422,0],[6990,0,6423,0],[6991,0,6424,0],[6992,0,6425,0],[6993,0,6426,0],[6994,0,6427,0],[6995,0,6428,0],[6996,0,6429,0],[6997,0,6430,0],[6998,0,6431,0],[6999,0,6432,0],[7000,0,6433,0],[7001,0,6434,0],[7002,0,6435,0],[7003,0,6436,0],[7004,0,6437,0],[7005,0,6438,0],[7006,2,6439,0],[7006,17,6439,15,"signInWithEmailLink"],[7006,36,6439,34,"signInWithEmailLink"],[7006,37,6439,35,"auth"],[7006,41,6439,39],[7006,43,6439,41,"email"],[7006,48,6439,46],[7006,50,6439,48,"emailLink"],[7006,59,6439,57],[7006,61,6439,59],[7007,4,6440,4],[7007,8,6440,8],[7007,12,6440,8,"_isFirebaseServerApp"],[7007,24,6440,28],[7007,25,6440,28,"_isFirebaseServerApp"],[7007,45,6440,28],[7007,47,6440,29,"auth"],[7007,51,6440,33],[7007,52,6440,34,"app"],[7007,55,6440,37],[7007,56,6440,38],[7007,58,6440,40],[7008,6,6441,8],[7008,13,6441,15,"Promise"],[7008,20,6441,22],[7008,21,6441,23,"reject"],[7008,27,6441,29],[7008,28,6441,30,"_serverAppCurrentUserOperationNotSupportedError"],[7008,75,6441,77],[7008,76,6441,78,"auth"],[7008,80,6441,82],[7008,81,6441,83],[7008,82,6441,84],[7009,4,6442,4],[7010,4,6443,4],[7010,10,6443,10,"authModular"],[7010,21,6443,21],[7010,24,6443,24],[7010,28,6443,24,"getModularInstance"],[7010,41,6443,42],[7010,42,6443,42,"getModularInstance"],[7010,60,6443,42],[7010,62,6443,43,"auth"],[7010,66,6443,47],[7010,67,6443,48],[7011,4,6444,4],[7011,10,6444,10,"credential"],[7011,20,6444,20],[7011,23,6444,23,"EmailAuthProvider"],[7011,40,6444,40],[7011,41,6444,41,"credentialWithLink"],[7011,59,6444,59],[7011,60,6444,60,"email"],[7011,65,6444,65],[7011,67,6444,67,"emailLink"],[7011,76,6444,76],[7011,80,6444,80,"_getCurrentUrl"],[7011,94,6444,94],[7011,95,6444,95],[7011,96,6444,96],[7011,97,6444,97],[7012,4,6445,4],[7013,4,6446,4],[7014,4,6447,4,"_assert"],[7014,11,6447,11],[7014,12,6447,12,"credential"],[7014,22,6447,22],[7014,23,6447,23,"_tenantId"],[7014,32,6447,32],[7014,38,6447,38,"authModular"],[7014,49,6447,49],[7014,50,6447,50,"tenantId"],[7014,58,6447,58],[7014,62,6447,62],[7014,66,6447,66],[7014,67,6447,67],[7014,69,6447,69,"authModular"],[7014,80,6447,80],[7014,82,6447,82],[7014,102,6447,102],[7014,103,6447,103],[7014,141,6447,141],[7014,142,6447,142],[7015,4,6448,4],[7015,11,6448,11,"signInWithCredential"],[7015,31,6448,31],[7015,32,6448,32,"authModular"],[7015,43,6448,43],[7015,45,6448,45,"credential"],[7015,55,6448,55],[7015,56,6448,56],[7016,2,6449,0],[7018,2,6451,0],[7019,0,6452,0],[7020,0,6453,0],[7021,0,6454,0],[7022,0,6455,0],[7023,0,6456,0],[7024,0,6457,0],[7025,0,6458,0],[7026,0,6459,0],[7027,0,6460,0],[7028,0,6461,0],[7029,0,6462,0],[7030,0,6463,0],[7031,0,6464,0],[7032,0,6465,0],[7033,0,6466,0],[7034,2,6467,0],[7034,17,6467,15,"createAuthUri"],[7034,30,6467,28,"createAuthUri"],[7034,31,6467,29,"auth"],[7034,35,6467,33],[7034,37,6467,35,"request"],[7034,44,6467,42],[7034,46,6467,44],[7035,4,6468,4],[7035,11,6468,11,"_performApiRequest"],[7035,29,6468,29],[7035,30,6468,30,"auth"],[7035,34,6468,34],[7035,36,6468,36],[7035,42,6468,42],[7035,43,6468,43],[7035,66,6468,66],[7035,94,6468,94],[7035,95,6468,95],[7035,127,6468,127,"_addTidIfNecessary"],[7035,145,6468,145],[7035,146,6468,146,"auth"],[7035,150,6468,150],[7035,152,6468,152,"request"],[7035,159,6468,159],[7035,160,6468,160],[7035,161,6468,161],[7036,2,6469,0],[7038,2,6471,0],[7039,0,6472,0],[7040,0,6473,0],[7041,0,6474,0],[7042,0,6475,0],[7043,0,6476,0],[7044,0,6477,0],[7045,0,6478,0],[7046,0,6479,0],[7047,0,6480,0],[7048,0,6481,0],[7049,0,6482,0],[7050,0,6483,0],[7051,0,6484,0],[7052,0,6485,0],[7053,0,6486,0],[7054,2,6487,0],[7055,0,6488,0],[7056,0,6489,0],[7057,0,6490,0],[7058,0,6491,0],[7059,0,6492,0],[7060,0,6493,0],[7061,0,6494,0],[7062,0,6495,0],[7063,0,6496,0],[7064,0,6497,0],[7065,0,6498,0],[7066,0,6499,0],[7067,0,6500,0],[7068,0,6501,0],[7069,0,6502,0],[7070,0,6503,0],[7071,0,6504,0],[7072,0,6505,0],[7073,0,6506,0],[7074,2,6507,0],[7074,17,6507,15,"fetchSignInMethodsForEmail"],[7074,43,6507,41,"fetchSignInMethodsForEmail"],[7074,44,6507,42,"auth"],[7074,48,6507,46],[7074,50,6507,48,"email"],[7074,55,6507,53],[7074,57,6507,55],[7075,4,6508,4],[7076,4,6509,4],[7077,4,6510,4],[7078,4,6511,4],[7078,10,6511,10,"continueUri"],[7078,21,6511,21],[7078,24,6511,24,"_isHttpOrHttps"],[7078,38,6511,38],[7078,39,6511,39],[7078,40,6511,40],[7078,43,6511,43,"_getCurrentUrl"],[7078,57,6511,57],[7078,58,6511,58],[7078,59,6511,59],[7078,62,6511,62],[7078,80,6511,80],[7079,4,6512,4],[7079,10,6512,10,"request"],[7079,17,6512,17],[7079,20,6512,20],[7080,6,6513,8,"identifier"],[7080,16,6513,18],[7080,18,6513,20,"email"],[7080,23,6513,25],[7081,6,6514,8,"continueUri"],[7082,4,6515,4],[7082,5,6515,5],[7083,4,6516,4],[7083,10,6516,10],[7084,6,6516,12,"signinMethods"],[7085,4,6516,26],[7085,5,6516,27],[7085,8,6516,30],[7085,14,6516,36,"createAuthUri"],[7085,27,6516,49],[7085,28,6516,50],[7085,32,6516,50,"getModularInstance"],[7085,45,6516,68],[7085,46,6516,68,"getModularInstance"],[7085,64,6516,68],[7085,66,6516,69,"auth"],[7085,70,6516,73],[7085,71,6516,74],[7085,73,6516,76,"request"],[7085,80,6516,83],[7085,81,6516,84],[7086,4,6517,4],[7086,11,6517,11,"signinMethods"],[7086,24,6517,24],[7086,28,6517,28],[7086,30,6517,30],[7087,2,6518,0],[7088,2,6519,0],[7089,0,6520,0],[7090,0,6521,0],[7091,0,6522,0],[7092,0,6523,0],[7093,0,6524,0],[7094,0,6525,0],[7095,0,6526,0],[7096,0,6527,0],[7097,0,6528,0],[7098,0,6529,0],[7099,0,6530,0],[7100,0,6531,0],[7101,0,6532,0],[7102,0,6533,0],[7103,0,6534,0],[7104,0,6535,0],[7105,0,6536,0],[7106,0,6537,0],[7107,0,6538,0],[7108,0,6539,0],[7109,0,6540,0],[7110,0,6541,0],[7111,0,6542,0],[7112,0,6543,0],[7113,0,6544,0],[7114,0,6545,0],[7115,0,6546,0],[7116,0,6547,0],[7117,0,6548,0],[7118,2,6549,0],[7118,17,6549,15,"sendEmailVerification"],[7118,38,6549,36,"sendEmailVerification"],[7118,39,6549,37,"user"],[7118,43,6549,41],[7118,45,6549,43,"actionCodeSettings"],[7118,63,6549,61],[7118,65,6549,63],[7119,4,6550,4],[7119,10,6550,10,"userInternal"],[7119,22,6550,22],[7119,25,6550,25],[7119,29,6550,25,"getModularInstance"],[7119,42,6550,43],[7119,43,6550,43,"getModularInstance"],[7119,61,6550,43],[7119,63,6550,44,"user"],[7119,67,6550,48],[7119,68,6550,49],[7120,4,6551,4],[7120,10,6551,10,"idToken"],[7120,17,6551,17],[7120,20,6551,20],[7120,26,6551,26,"user"],[7120,30,6551,30],[7120,31,6551,31,"getIdToken"],[7120,41,6551,41],[7120,42,6551,42],[7120,43,6551,43],[7121,4,6552,4],[7121,10,6552,10,"request"],[7121,17,6552,17],[7121,20,6552,20],[7122,6,6553,8,"requestType"],[7122,17,6553,19],[7122,19,6553,21],[7122,33,6553,35],[7122,34,6553,36],[7123,6,6554,8,"idToken"],[7124,4,6555,4],[7124,5,6555,5],[7125,4,6556,4],[7125,8,6556,8,"actionCodeSettings"],[7125,26,6556,26],[7125,28,6556,28],[7126,6,6557,8,"_setActionCodeSettingsOnRequest"],[7126,37,6557,39],[7126,38,6557,40,"userInternal"],[7126,50,6557,52],[7126,51,6557,53,"auth"],[7126,55,6557,57],[7126,57,6557,59,"request"],[7126,64,6557,66],[7126,66,6557,68,"actionCodeSettings"],[7126,84,6557,86],[7126,85,6557,87],[7127,4,6558,4],[7128,4,6559,4],[7128,10,6559,10],[7129,6,6559,12,"email"],[7130,4,6559,18],[7130,5,6559,19],[7130,8,6559,22],[7130,14,6559,28,"sendEmailVerification$1"],[7130,37,6559,51],[7130,38,6559,52,"userInternal"],[7130,50,6559,64],[7130,51,6559,65,"auth"],[7130,55,6559,69],[7130,57,6559,71,"request"],[7130,64,6559,78],[7130,65,6559,79],[7131,4,6560,4],[7131,8,6560,8,"email"],[7131,13,6560,13],[7131,18,6560,18,"user"],[7131,22,6560,22],[7131,23,6560,23,"email"],[7131,28,6560,28],[7131,30,6560,30],[7132,6,6561,8],[7132,12,6561,14,"user"],[7132,16,6561,18],[7132,17,6561,19,"reload"],[7132,23,6561,25],[7132,24,6561,26],[7132,25,6561,27],[7133,4,6562,4],[7134,2,6563,0],[7135,2,6564,0],[7136,0,6565,0],[7137,0,6566,0],[7138,0,6567,0],[7139,0,6568,0],[7140,0,6569,0],[7141,0,6570,0],[7142,0,6571,0],[7143,0,6572,0],[7144,0,6573,0],[7145,0,6574,0],[7146,0,6575,0],[7147,0,6576,0],[7148,0,6577,0],[7149,0,6578,0],[7150,0,6579,0],[7151,0,6580,0],[7152,0,6581,0],[7153,0,6582,0],[7154,0,6583,0],[7155,0,6584,0],[7156,0,6585,0],[7157,0,6586,0],[7158,0,6587,0],[7159,0,6588,0],[7160,0,6589,0],[7161,0,6590,0],[7162,0,6591,0],[7163,0,6592,0],[7164,0,6593,0],[7165,0,6594,0],[7166,0,6595,0],[7167,0,6596,0],[7168,0,6597,0],[7169,2,6598,0],[7169,17,6598,15,"verifyBeforeUpdateEmail"],[7169,40,6598,38,"verifyBeforeUpdateEmail"],[7169,41,6598,39,"user"],[7169,45,6598,43],[7169,47,6598,45,"newEmail"],[7169,55,6598,53],[7169,57,6598,55,"actionCodeSettings"],[7169,75,6598,73],[7169,77,6598,75],[7170,4,6599,4],[7170,10,6599,10,"userInternal"],[7170,22,6599,22],[7170,25,6599,25],[7170,29,6599,25,"getModularInstance"],[7170,42,6599,43],[7170,43,6599,43,"getModularInstance"],[7170,61,6599,43],[7170,63,6599,44,"user"],[7170,67,6599,48],[7170,68,6599,49],[7171,4,6600,4],[7171,10,6600,10,"idToken"],[7171,17,6600,17],[7171,20,6600,20],[7171,26,6600,26,"user"],[7171,30,6600,30],[7171,31,6600,31,"getIdToken"],[7171,41,6600,41],[7171,42,6600,42],[7171,43,6600,43],[7172,4,6601,4],[7172,10,6601,10,"request"],[7172,17,6601,17],[7172,20,6601,20],[7173,6,6602,8,"requestType"],[7173,17,6602,19],[7173,19,6602,21],[7173,44,6602,46],[7173,45,6602,47],[7174,6,6603,8,"idToken"],[7174,13,6603,15],[7175,6,6604,8,"newEmail"],[7176,4,6605,4],[7176,5,6605,5],[7177,4,6606,4],[7177,8,6606,8,"actionCodeSettings"],[7177,26,6606,26],[7177,28,6606,28],[7178,6,6607,8,"_setActionCodeSettingsOnRequest"],[7178,37,6607,39],[7178,38,6607,40,"userInternal"],[7178,50,6607,52],[7178,51,6607,53,"auth"],[7178,55,6607,57],[7178,57,6607,59,"request"],[7178,64,6607,66],[7178,66,6607,68,"actionCodeSettings"],[7178,84,6607,86],[7178,85,6607,87],[7179,4,6608,4],[7180,4,6609,4],[7180,10,6609,10],[7181,6,6609,12,"email"],[7182,4,6609,18],[7182,5,6609,19],[7182,8,6609,22],[7182,14,6609,28,"verifyAndChangeEmail"],[7182,34,6609,48],[7182,35,6609,49,"userInternal"],[7182,47,6609,61],[7182,48,6609,62,"auth"],[7182,52,6609,66],[7182,54,6609,68,"request"],[7182,61,6609,75],[7182,62,6609,76],[7183,4,6610,4],[7183,8,6610,8,"email"],[7183,13,6610,13],[7183,18,6610,18,"user"],[7183,22,6610,22],[7183,23,6610,23,"email"],[7183,28,6610,28],[7183,30,6610,30],[7184,6,6611,8],[7185,6,6612,8],[7186,6,6613,8],[7186,12,6613,14,"user"],[7186,16,6613,18],[7186,17,6613,19,"reload"],[7186,23,6613,25],[7186,24,6613,26],[7186,25,6613,27],[7187,4,6614,4],[7188,2,6615,0],[7190,2,6617,0],[7191,0,6618,0],[7192,0,6619,0],[7193,0,6620,0],[7194,0,6621,0],[7195,0,6622,0],[7196,0,6623,0],[7197,0,6624,0],[7198,0,6625,0],[7199,0,6626,0],[7200,0,6627,0],[7201,0,6628,0],[7202,0,6629,0],[7203,0,6630,0],[7204,0,6631,0],[7205,0,6632,0],[7206,2,6633,0],[7206,17,6633,15,"updateProfile$1"],[7206,32,6633,30,"updateProfile$1"],[7206,33,6633,31,"auth"],[7206,37,6633,35],[7206,39,6633,37,"request"],[7206,46,6633,44],[7206,48,6633,46],[7207,4,6634,4],[7207,11,6634,11,"_performApiRequest"],[7207,29,6634,29],[7207,30,6634,30,"auth"],[7207,34,6634,34],[7207,36,6634,36],[7207,42,6634,42],[7207,43,6634,43],[7207,66,6634,66],[7207,87,6634,87],[7207,88,6634,88],[7207,121,6634,121,"request"],[7207,128,6634,128],[7207,129,6634,129],[7208,2,6635,0],[7210,2,6637,0],[7211,0,6638,0],[7212,0,6639,0],[7213,0,6640,0],[7214,0,6641,0],[7215,0,6642,0],[7216,0,6643,0],[7217,0,6644,0],[7218,0,6645,0],[7219,0,6646,0],[7220,0,6647,0],[7221,0,6648,0],[7222,0,6649,0],[7223,0,6650,0],[7224,0,6651,0],[7225,0,6652,0],[7226,2,6653,0],[7227,0,6654,0],[7228,0,6655,0],[7229,0,6656,0],[7230,0,6657,0],[7231,0,6658,0],[7232,0,6659,0],[7233,0,6660,0],[7234,2,6661,0],[7234,17,6661,15,"updateProfile"],[7234,30,6661,28,"updateProfile"],[7234,31,6661,29,"user"],[7234,35,6661,33],[7234,37,6661,35],[7235,4,6661,37,"displayName"],[7235,15,6661,48],[7236,4,6661,50,"photoURL"],[7236,12,6661,58],[7236,14,6661,60,"photoUrl"],[7237,2,6661,69],[7237,3,6661,70],[7237,5,6661,72],[7238,4,6662,4],[7238,8,6662,8,"displayName"],[7238,19,6662,19],[7238,24,6662,24,"undefined"],[7238,33,6662,33],[7238,37,6662,37,"photoUrl"],[7238,45,6662,45],[7238,50,6662,50,"undefined"],[7238,59,6662,59],[7238,61,6662,61],[7239,6,6663,8],[7240,4,6664,4],[7241,4,6665,4],[7241,10,6665,10,"userInternal"],[7241,22,6665,22],[7241,25,6665,25],[7241,29,6665,25,"getModularInstance"],[7241,42,6665,43],[7241,43,6665,43,"getModularInstance"],[7241,61,6665,43],[7241,63,6665,44,"user"],[7241,67,6665,48],[7241,68,6665,49],[7242,4,6666,4],[7242,10,6666,10,"idToken"],[7242,17,6666,17],[7242,20,6666,20],[7242,26,6666,26,"userInternal"],[7242,38,6666,38],[7242,39,6666,39,"getIdToken"],[7242,49,6666,49],[7242,50,6666,50],[7242,51,6666,51],[7243,4,6667,4],[7243,10,6667,10,"profileRequest"],[7243,24,6667,24],[7243,27,6667,27],[7244,6,6668,8,"idToken"],[7244,13,6668,15],[7245,6,6669,8,"displayName"],[7245,17,6669,19],[7246,6,6670,8,"photoUrl"],[7246,14,6670,16],[7247,6,6671,8,"returnSecureToken"],[7247,23,6671,25],[7247,25,6671,27],[7248,4,6672,4],[7248,5,6672,5],[7249,4,6673,4],[7249,10,6673,10,"response"],[7249,18,6673,18],[7249,21,6673,21],[7249,27,6673,27,"_logoutIfInvalidated"],[7249,47,6673,47],[7249,48,6673,48,"userInternal"],[7249,60,6673,60],[7249,62,6673,62,"updateProfile$1"],[7249,77,6673,77],[7249,78,6673,78,"userInternal"],[7249,90,6673,90],[7249,91,6673,91,"auth"],[7249,95,6673,95],[7249,97,6673,97,"profileRequest"],[7249,111,6673,111],[7249,112,6673,112],[7249,113,6673,113],[7250,4,6674,4,"userInternal"],[7250,16,6674,16],[7250,17,6674,17,"displayName"],[7250,28,6674,28],[7250,31,6674,31,"response"],[7250,39,6674,39],[7250,40,6674,40,"displayName"],[7250,51,6674,51],[7250,55,6674,55],[7250,59,6674,59],[7251,4,6675,4,"userInternal"],[7251,16,6675,16],[7251,17,6675,17,"photoURL"],[7251,25,6675,25],[7251,28,6675,28,"response"],[7251,36,6675,36],[7251,37,6675,37,"photoUrl"],[7251,45,6675,45],[7251,49,6675,49],[7251,53,6675,53],[7252,4,6676,4],[7253,4,6677,4],[7253,10,6677,10,"passwordProvider"],[7253,26,6677,26],[7253,29,6677,29,"userInternal"],[7253,41,6677,41],[7253,42,6677,42,"providerData"],[7253,54,6677,54],[7253,55,6677,55,"find"],[7253,59,6677,59],[7253,60,6677,60],[7253,61,6677,61],[7254,6,6677,63,"providerId"],[7255,4,6677,74],[7255,5,6677,75],[7255,10,6677,80,"providerId"],[7255,20,6677,90],[7255,25,6677,95],[7255,35,6677,105],[7255,36,6677,106],[7255,61,6677,131],[7255,62,6677,132],[7256,4,6678,4],[7256,8,6678,8,"passwordProvider"],[7256,24,6678,24],[7256,26,6678,26],[7257,6,6679,8,"passwordProvider"],[7257,22,6679,24],[7257,23,6679,25,"displayName"],[7257,34,6679,36],[7257,37,6679,39,"userInternal"],[7257,49,6679,51],[7257,50,6679,52,"displayName"],[7257,61,6679,63],[7258,6,6680,8,"passwordProvider"],[7258,22,6680,24],[7258,23,6680,25,"photoURL"],[7258,31,6680,33],[7258,34,6680,36,"userInternal"],[7258,46,6680,48],[7258,47,6680,49,"photoURL"],[7258,55,6680,57],[7259,4,6681,4],[7260,4,6682,4],[7260,10,6682,10,"userInternal"],[7260,22,6682,22],[7260,23,6682,23,"_updateTokensIfNecessary"],[7260,47,6682,47],[7260,48,6682,48,"response"],[7260,56,6682,56],[7260,57,6682,57],[7261,2,6683,0],[7262,2,6684,0],[7263,0,6685,0],[7264,0,6686,0],[7265,0,6687,0],[7266,0,6688,0],[7267,0,6689,0],[7268,0,6690,0],[7269,0,6691,0],[7270,0,6692,0],[7271,0,6693,0],[7272,0,6694,0],[7273,0,6695,0],[7274,0,6696,0],[7275,0,6697,0],[7276,0,6698,0],[7277,0,6699,0],[7278,0,6700,0],[7279,0,6701,0],[7280,0,6702,0],[7281,0,6703,0],[7282,0,6704,0],[7283,0,6705,0],[7284,0,6706,0],[7285,0,6707,0],[7286,2,6708,0],[7286,11,6708,9,"updateEmail"],[7286,22,6708,20,"updateEmail"],[7286,23,6708,21,"user"],[7286,27,6708,25],[7286,29,6708,27,"newEmail"],[7286,37,6708,35],[7286,39,6708,37],[7287,4,6709,4],[7287,10,6709,10,"userInternal"],[7287,22,6709,22],[7287,25,6709,25],[7287,29,6709,25,"getModularInstance"],[7287,42,6709,43],[7287,43,6709,43,"getModularInstance"],[7287,61,6709,43],[7287,63,6709,44,"user"],[7287,67,6709,48],[7287,68,6709,49],[7288,4,6710,4],[7288,8,6710,8],[7288,12,6710,8,"_isFirebaseServerApp"],[7288,24,6710,28],[7288,25,6710,28,"_isFirebaseServerApp"],[7288,45,6710,28],[7288,47,6710,29,"userInternal"],[7288,59,6710,41],[7288,60,6710,42,"auth"],[7288,64,6710,46],[7288,65,6710,47,"app"],[7288,68,6710,50],[7288,69,6710,51],[7288,71,6710,53],[7289,6,6711,8],[7289,13,6711,15,"Promise"],[7289,20,6711,22],[7289,21,6711,23,"reject"],[7289,27,6711,29],[7289,28,6711,30,"_serverAppCurrentUserOperationNotSupportedError"],[7289,75,6711,77],[7289,76,6711,78,"userInternal"],[7289,88,6711,90],[7289,89,6711,91,"auth"],[7289,93,6711,95],[7289,94,6711,96],[7289,95,6711,97],[7290,4,6712,4],[7291,4,6713,4],[7291,11,6713,11,"updateEmailOrPassword"],[7291,32,6713,32],[7291,33,6713,33,"userInternal"],[7291,45,6713,45],[7291,47,6713,47,"newEmail"],[7291,55,6713,55],[7291,57,6713,57],[7291,61,6713,61],[7291,62,6713,62],[7292,2,6714,0],[7293,2,6715,0],[7294,0,6716,0],[7295,0,6717,0],[7296,0,6718,0],[7297,0,6719,0],[7298,0,6720,0],[7299,0,6721,0],[7300,0,6722,0],[7301,0,6723,0],[7302,0,6724,0],[7303,0,6725,0],[7304,0,6726,0],[7305,0,6727,0],[7306,2,6728,0],[7306,11,6728,9,"updatePassword"],[7306,25,6728,23,"updatePassword"],[7306,26,6728,24,"user"],[7306,30,6728,28],[7306,32,6728,30,"newPassword"],[7306,43,6728,41],[7306,45,6728,43],[7307,4,6729,4],[7307,11,6729,11,"updateEmailOrPassword"],[7307,32,6729,32],[7307,33,6729,33],[7307,37,6729,33,"getModularInstance"],[7307,50,6729,51],[7307,51,6729,51,"getModularInstance"],[7307,69,6729,51],[7307,71,6729,52,"user"],[7307,75,6729,56],[7307,76,6729,57],[7307,78,6729,59],[7307,82,6729,63],[7307,84,6729,65,"newPassword"],[7307,95,6729,76],[7307,96,6729,77],[7308,2,6730,0],[7309,2,6731,0],[7309,17,6731,15,"updateEmailOrPassword"],[7309,38,6731,36,"updateEmailOrPassword"],[7309,39,6731,37,"user"],[7309,43,6731,41],[7309,45,6731,43,"email"],[7309,50,6731,48],[7309,52,6731,50,"password"],[7309,60,6731,58],[7309,62,6731,60],[7310,4,6732,4],[7310,10,6732,10],[7311,6,6732,12,"auth"],[7312,4,6732,17],[7312,5,6732,18],[7312,8,6732,21,"user"],[7312,12,6732,25],[7313,4,6733,4],[7313,10,6733,10,"idToken"],[7313,17,6733,17],[7313,20,6733,20],[7313,26,6733,26,"user"],[7313,30,6733,30],[7313,31,6733,31,"getIdToken"],[7313,41,6733,41],[7313,42,6733,42],[7313,43,6733,43],[7314,4,6734,4],[7314,10,6734,10,"request"],[7314,17,6734,17],[7314,20,6734,20],[7315,6,6735,8,"idToken"],[7315,13,6735,15],[7316,6,6736,8,"returnSecureToken"],[7316,23,6736,25],[7316,25,6736,27],[7317,4,6737,4],[7317,5,6737,5],[7318,4,6738,4],[7318,8,6738,8,"email"],[7318,13,6738,13],[7318,15,6738,15],[7319,6,6739,8,"request"],[7319,13,6739,15],[7319,14,6739,16,"email"],[7319,19,6739,21],[7319,22,6739,24,"email"],[7319,27,6739,29],[7320,4,6740,4],[7321,4,6741,4],[7321,8,6741,8,"password"],[7321,16,6741,16],[7321,18,6741,18],[7322,6,6742,8,"request"],[7322,13,6742,15],[7322,14,6742,16,"password"],[7322,22,6742,24],[7322,25,6742,27,"password"],[7322,33,6742,35],[7323,4,6743,4],[7324,4,6744,4],[7324,10,6744,10,"response"],[7324,18,6744,18],[7324,21,6744,21],[7324,27,6744,27,"_logoutIfInvalidated"],[7324,47,6744,47],[7324,48,6744,48,"user"],[7324,52,6744,52],[7324,54,6744,54,"updateEmailPassword"],[7324,73,6744,73],[7324,74,6744,74,"auth"],[7324,78,6744,78],[7324,80,6744,80,"request"],[7324,87,6744,87],[7324,88,6744,88],[7324,89,6744,89],[7325,4,6745,4],[7325,10,6745,10,"user"],[7325,14,6745,14],[7325,15,6745,15,"_updateTokensIfNecessary"],[7325,39,6745,39],[7325,40,6745,40,"response"],[7325,48,6745,48],[7325,50,6745,50],[7325,62,6745,63],[7325,66,6745,67],[7325,67,6745,68],[7326,2,6746,0],[7328,2,6748,0],[7329,0,6749,0],[7330,0,6750,0],[7331,0,6751,0],[7332,0,6752,0],[7333,0,6753,0],[7334,0,6754,0],[7335,0,6755,0],[7336,0,6756,0],[7337,0,6757,0],[7338,0,6758,0],[7339,0,6759,0],[7340,0,6760,0],[7341,0,6761,0],[7342,0,6762,0],[7343,0,6763,0],[7344,2,6764,0],[7345,0,6765,0],[7346,0,6766,0],[7347,0,6767,0],[7348,2,6768,0],[7348,11,6768,9,"_fromIdTokenResponse"],[7348,31,6768,29,"_fromIdTokenResponse"],[7348,32,6768,30,"idTokenResponse"],[7348,47,6768,45],[7348,49,6768,47],[7349,4,6769,4],[7349,8,6769,8],[7349,9,6769,9,"idTokenResponse"],[7349,24,6769,24],[7349,26,6769,26],[7350,6,6770,8],[7350,13,6770,15],[7350,17,6770,19],[7351,4,6771,4],[7352,4,6772,4],[7352,10,6772,10],[7353,6,6772,12,"providerId"],[7354,4,6772,23],[7354,5,6772,24],[7354,8,6772,27,"idTokenResponse"],[7354,23,6772,42],[7355,4,6773,4],[7355,10,6773,10,"profile"],[7355,17,6773,17],[7355,20,6773,20,"idTokenResponse"],[7355,35,6773,35],[7355,36,6773,36,"rawUserInfo"],[7355,47,6773,47],[7355,50,6774,10,"JSON"],[7355,54,6774,14],[7355,55,6774,15,"parse"],[7355,60,6774,20],[7355,61,6774,21,"idTokenResponse"],[7355,76,6774,36],[7355,77,6774,37,"rawUserInfo"],[7355,88,6774,48],[7355,89,6774,49],[7355,92,6775,10],[7355,93,6775,11],[7355,94,6775,12],[7356,4,6776,4],[7356,10,6776,10,"isNewUser"],[7356,19,6776,19],[7356,22,6776,22,"idTokenResponse"],[7356,37,6776,37],[7356,38,6776,38,"isNewUser"],[7356,47,6776,47],[7356,51,6777,8,"idTokenResponse"],[7356,66,6777,23],[7356,67,6777,24,"kind"],[7356,71,6777,28],[7356,76,6777,33],[7356,115,6777,72],[7356,116,6777,73],[7357,4,6778,4],[7357,8,6778,8],[7357,9,6778,9,"providerId"],[7357,19,6778,19],[7357,23,6778,23,"idTokenResponse"],[7357,38,6778,38],[7357,40,6778,40,"idToken"],[7357,47,6778,47],[7357,49,6778,49],[7358,6,6779,8],[7358,12,6779,14,"signInProvider"],[7358,26,6779,28],[7358,29,6779,31,"_parseToken"],[7358,40,6779,42],[7358,41,6779,43,"idTokenResponse"],[7358,56,6779,58],[7358,57,6779,59,"idToken"],[7358,64,6779,66],[7358,65,6779,67],[7358,67,6779,69,"firebase"],[7358,75,6779,77],[7358,78,6779,80],[7358,96,6779,98],[7358,97,6779,99],[7359,6,6780,8],[7359,10,6780,12,"signInProvider"],[7359,24,6780,26],[7359,26,6780,28],[7360,8,6781,12],[7360,14,6781,18,"filteredProviderId"],[7360,32,6781,36],[7360,35,6781,39,"signInProvider"],[7360,49,6781,53],[7360,54,6781,58],[7360,65,6781,69],[7360,66,6781,70],[7360,96,6782,16,"signInProvider"],[7360,110,6782,30],[7360,115,6782,35],[7360,123,6782,43],[7360,124,6782,44],[7360,150,6783,18,"signInProvider"],[7360,164,6783,32],[7360,167,6784,18],[7360,171,6784,22],[7361,8,6785,12],[7362,8,6786,12],[7362,15,6786,19],[7362,19,6786,23,"GenericAdditionalUserInfo"],[7362,44,6786,48],[7362,45,6786,49,"isNewUser"],[7362,54,6786,58],[7362,56,6786,60,"filteredProviderId"],[7362,74,6786,78],[7362,75,6786,79],[7363,6,6787,8],[7364,4,6788,4],[7365,4,6789,4],[7365,8,6789,8],[7365,9,6789,9,"providerId"],[7365,19,6789,19],[7365,21,6789,21],[7366,6,6790,8],[7366,13,6790,15],[7366,17,6790,19],[7367,4,6791,4],[7368,4,6792,4],[7368,12,6792,12,"providerId"],[7368,22,6792,22],[7369,6,6793,8],[7369,11,6793,13],[7369,25,6793,27],[7369,26,6793,28],[7370,8,6794,12],[7370,15,6794,19],[7370,19,6794,23,"FacebookAdditionalUserInfo"],[7370,45,6794,49],[7370,46,6794,50,"isNewUser"],[7370,55,6794,59],[7370,57,6794,61,"profile"],[7370,64,6794,68],[7370,65,6794,69],[7371,6,6795,8],[7371,11,6795,13],[7371,23,6795,25],[7371,24,6795,26],[7372,8,6796,12],[7372,15,6796,19],[7372,19,6796,23,"GithubAdditionalUserInfo"],[7372,43,6796,47],[7372,44,6796,48,"isNewUser"],[7372,53,6796,57],[7372,55,6796,59,"profile"],[7372,62,6796,66],[7372,63,6796,67],[7373,6,6797,8],[7373,11,6797,13],[7373,23,6797,25],[7373,24,6797,26],[7374,8,6798,12],[7374,15,6798,19],[7374,19,6798,23,"GoogleAdditionalUserInfo"],[7374,43,6798,47],[7374,44,6798,48,"isNewUser"],[7374,53,6798,57],[7374,55,6798,59,"profile"],[7374,62,6798,66],[7374,63,6798,67],[7375,6,6799,8],[7375,11,6799,13],[7375,24,6799,26],[7375,25,6799,27],[7376,8,6800,12],[7376,15,6800,19],[7376,19,6800,23,"TwitterAdditionalUserInfo"],[7376,44,6800,48],[7376,45,6800,49,"isNewUser"],[7376,54,6800,58],[7376,56,6800,60,"profile"],[7376,63,6800,67],[7376,65,6800,69,"idTokenResponse"],[7376,80,6800,84],[7376,81,6800,85,"screenName"],[7376,91,6800,95],[7376,95,6800,99],[7376,99,6800,103],[7376,100,6800,104],[7377,6,6801,8],[7377,11,6801,13],[7377,19,6801,21],[7377,20,6801,22],[7378,6,6802,8],[7378,11,6802,13],[7378,22,6802,24],[7378,23,6802,25],[7379,8,6803,12],[7379,15,6803,19],[7379,19,6803,23,"GenericAdditionalUserInfo"],[7379,44,6803,48],[7379,45,6803,49,"isNewUser"],[7379,54,6803,58],[7379,56,6803,60],[7379,60,6803,64],[7379,61,6803,65],[7380,6,6804,8],[7381,8,6805,12],[7381,15,6805,19],[7381,19,6805,23,"GenericAdditionalUserInfo"],[7381,44,6805,48],[7381,45,6805,49,"isNewUser"],[7381,54,6805,58],[7381,56,6805,60,"providerId"],[7381,66,6805,70],[7381,68,6805,72,"profile"],[7381,75,6805,79],[7381,76,6805,80],[7382,4,6806,4],[7383,2,6807,0],[7384,2,6808,0],[7384,8,6808,6,"GenericAdditionalUserInfo"],[7384,33,6808,31],[7384,34,6808,32],[7385,4,6809,4,"constructor"],[7385,15,6809,15,"constructor"],[7385,16,6809,16,"isNewUser"],[7385,25,6809,25],[7385,27,6809,27,"providerId"],[7385,37,6809,37],[7385,39,6809,39,"profile"],[7385,46,6809,46],[7385,49,6809,49],[7385,50,6809,50],[7385,51,6809,51],[7385,53,6809,53],[7386,6,6810,8],[7386,10,6810,12],[7386,11,6810,13,"isNewUser"],[7386,20,6810,22],[7386,23,6810,25,"isNewUser"],[7386,32,6810,34],[7387,6,6811,8],[7387,10,6811,12],[7387,11,6811,13,"providerId"],[7387,21,6811,23],[7387,24,6811,26,"providerId"],[7387,34,6811,36],[7388,6,6812,8],[7388,10,6812,12],[7388,11,6812,13,"profile"],[7388,18,6812,20],[7388,21,6812,23,"profile"],[7388,28,6812,30],[7389,4,6813,4],[7390,2,6814,0],[7391,2,6815,0],[7391,8,6815,6,"FederatedAdditionalUserInfoWithUsername"],[7391,47,6815,45],[7391,56,6815,54,"GenericAdditionalUserInfo"],[7391,81,6815,79],[7391,82,6815,80],[7392,4,6816,4,"constructor"],[7392,15,6816,15,"constructor"],[7392,16,6816,16,"isNewUser"],[7392,25,6816,25],[7392,27,6816,27,"providerId"],[7392,37,6816,37],[7392,39,6816,39,"profile"],[7392,46,6816,46],[7392,48,6816,48,"username"],[7392,56,6816,56],[7392,58,6816,58],[7393,6,6817,8],[7393,11,6817,13],[7393,12,6817,14,"isNewUser"],[7393,21,6817,23],[7393,23,6817,25,"providerId"],[7393,33,6817,35],[7393,35,6817,37,"profile"],[7393,42,6817,44],[7393,43,6817,45],[7394,6,6818,8],[7394,10,6818,12],[7394,11,6818,13,"username"],[7394,19,6818,21],[7394,22,6818,24,"username"],[7394,30,6818,32],[7395,4,6819,4],[7396,2,6820,0],[7397,2,6821,0],[7397,8,6821,6,"FacebookAdditionalUserInfo"],[7397,34,6821,32],[7397,43,6821,41,"GenericAdditionalUserInfo"],[7397,68,6821,66],[7397,69,6821,67],[7398,4,6822,4,"constructor"],[7398,15,6822,15,"constructor"],[7398,16,6822,16,"isNewUser"],[7398,25,6822,25],[7398,27,6822,27,"profile"],[7398,34,6822,34],[7398,36,6822,36],[7399,6,6823,8],[7399,11,6823,13],[7399,12,6823,14,"isNewUser"],[7399,21,6823,23],[7399,23,6823,25],[7399,37,6823,39],[7399,38,6823,40],[7399,65,6823,67,"profile"],[7399,72,6823,74],[7399,73,6823,75],[7400,4,6824,4],[7401,2,6825,0],[7402,2,6826,0],[7402,8,6826,6,"GithubAdditionalUserInfo"],[7402,32,6826,30],[7402,41,6826,39,"FederatedAdditionalUserInfoWithUsername"],[7402,80,6826,78],[7402,81,6826,79],[7403,4,6827,4,"constructor"],[7403,15,6827,15,"constructor"],[7403,16,6827,16,"isNewUser"],[7403,25,6827,25],[7403,27,6827,27,"profile"],[7403,34,6827,34],[7403,36,6827,36],[7404,6,6828,8],[7404,11,6828,13],[7404,12,6828,14,"isNewUser"],[7404,21,6828,23],[7404,23,6828,25],[7404,35,6828,37],[7404,36,6828,38],[7404,61,6828,63,"profile"],[7404,68,6828,70],[7404,70,6828,72],[7404,77,6828,79,"profile"],[7404,84,6828,86],[7404,86,6828,88,"login"],[7404,91,6828,93],[7404,96,6828,98],[7404,104,6828,106],[7404,107,6828,109,"profile"],[7404,114,6828,116],[7404,116,6828,118,"login"],[7404,121,6828,123],[7404,124,6828,126],[7404,128,6828,130],[7404,129,6828,131],[7405,4,6829,4],[7406,2,6830,0],[7407,2,6831,0],[7407,8,6831,6,"GoogleAdditionalUserInfo"],[7407,32,6831,30],[7407,41,6831,39,"GenericAdditionalUserInfo"],[7407,66,6831,64],[7407,67,6831,65],[7408,4,6832,4,"constructor"],[7408,15,6832,15,"constructor"],[7408,16,6832,16,"isNewUser"],[7408,25,6832,25],[7408,27,6832,27,"profile"],[7408,34,6832,34],[7408,36,6832,36],[7409,6,6833,8],[7409,11,6833,13],[7409,12,6833,14,"isNewUser"],[7409,21,6833,23],[7409,23,6833,25],[7409,35,6833,37],[7409,36,6833,38],[7409,61,6833,63,"profile"],[7409,68,6833,70],[7409,69,6833,71],[7410,4,6834,4],[7411,2,6835,0],[7412,2,6836,0],[7412,8,6836,6,"TwitterAdditionalUserInfo"],[7412,33,6836,31],[7412,42,6836,40,"FederatedAdditionalUserInfoWithUsername"],[7412,81,6836,79],[7412,82,6836,80],[7413,4,6837,4,"constructor"],[7413,15,6837,15,"constructor"],[7413,16,6837,16,"isNewUser"],[7413,25,6837,25],[7413,27,6837,27,"profile"],[7413,34,6837,34],[7413,36,6837,36,"screenName"],[7413,46,6837,46],[7413,48,6837,48],[7414,6,6838,8],[7414,11,6838,13],[7414,12,6838,14,"isNewUser"],[7414,21,6838,23],[7414,23,6838,25],[7414,36,6838,38],[7414,37,6838,39],[7414,63,6838,65,"profile"],[7414,70,6838,72],[7414,72,6838,74,"screenName"],[7414,82,6838,84],[7414,83,6838,85],[7415,4,6839,4],[7416,2,6840,0],[7417,2,6841,0],[7418,0,6842,0],[7419,0,6843,0],[7420,0,6844,0],[7421,0,6845,0],[7422,0,6846,0],[7423,0,6847,0],[7424,2,6848,0],[7424,11,6848,9,"getAdditionalUserInfo"],[7424,32,6848,30,"getAdditionalUserInfo"],[7424,33,6848,31,"userCredential"],[7424,47,6848,45],[7424,49,6848,47],[7425,4,6849,4],[7425,10,6849,10],[7426,6,6849,12,"user"],[7426,10,6849,16],[7427,6,6849,18,"_tokenResponse"],[7428,4,6849,33],[7428,5,6849,34],[7428,8,6849,37,"userCredential"],[7428,22,6849,51],[7429,4,6850,4],[7429,8,6850,8,"user"],[7429,12,6850,12],[7429,13,6850,13,"isAnonymous"],[7429,24,6850,24],[7429,28,6850,28],[7429,29,6850,29,"_tokenResponse"],[7429,43,6850,43],[7429,45,6850,45],[7430,6,6851,8],[7431,6,6852,8],[7432,6,6853,8],[7432,13,6853,15],[7433,8,6854,12,"providerId"],[7433,18,6854,22],[7433,20,6854,24],[7433,24,6854,28],[7434,8,6855,12,"isNewUser"],[7434,17,6855,21],[7434,19,6855,23],[7434,24,6855,28],[7435,8,6856,12,"profile"],[7435,15,6856,19],[7435,17,6856,21],[7436,6,6857,8],[7436,7,6857,9],[7437,4,6858,4],[7438,4,6859,4],[7438,11,6859,11,"_fromIdTokenResponse"],[7438,31,6859,31],[7438,32,6859,32,"_tokenResponse"],[7438,46,6859,46],[7438,47,6859,47],[7439,2,6860,0],[7441,2,6862,0],[7442,0,6863,0],[7443,0,6864,0],[7444,0,6865,0],[7445,0,6866,0],[7446,0,6867,0],[7447,0,6868,0],[7448,0,6869,0],[7449,0,6870,0],[7450,0,6871,0],[7451,0,6872,0],[7452,0,6873,0],[7453,0,6874,0],[7454,0,6875,0],[7455,0,6876,0],[7456,0,6877,0],[7457,2,6878,0],[7458,2,6879,0],[7459,0,6880,0],[7460,0,6881,0],[7461,0,6882,0],[7462,0,6883,0],[7463,0,6884,0],[7464,0,6885,0],[7465,0,6886,0],[7466,0,6887,0],[7467,0,6888,0],[7468,0,6889,0],[7469,0,6890,0],[7470,0,6891,0],[7471,0,6892,0],[7472,0,6893,0],[7473,0,6894,0],[7474,0,6895,0],[7475,0,6896,0],[7476,0,6897,0],[7477,0,6898,0],[7478,0,6899,0],[7479,0,6900,0],[7480,0,6901,0],[7481,0,6902,0],[7482,2,6903,0],[7482,11,6903,9,"setPersistence"],[7482,25,6903,23,"setPersistence"],[7482,26,6903,24,"auth"],[7482,30,6903,28],[7482,32,6903,30,"persistence"],[7482,43,6903,41],[7482,45,6903,43],[7483,4,6904,4],[7483,11,6904,11],[7483,15,6904,11,"getModularInstance"],[7483,28,6904,29],[7483,29,6904,29,"getModularInstance"],[7483,47,6904,29],[7483,49,6904,30,"auth"],[7483,53,6904,34],[7483,54,6904,35],[7483,55,6904,36,"setPersistence"],[7483,69,6904,50],[7483,70,6904,51,"persistence"],[7483,81,6904,62],[7483,82,6904,63],[7484,2,6905,0],[7485,2,6906,0],[7486,0,6907,0],[7487,0,6908,0],[7488,0,6909,0],[7489,0,6910,0],[7490,0,6911,0],[7491,0,6912,0],[7492,0,6913,0],[7493,0,6914,0],[7494,0,6915,0],[7495,0,6916,0],[7496,0,6917,0],[7497,0,6918,0],[7498,0,6919,0],[7499,0,6920,0],[7500,0,6921,0],[7501,0,6922,0],[7502,0,6923,0],[7503,0,6924,0],[7504,0,6925,0],[7505,0,6926,0],[7506,0,6927,0],[7507,0,6928,0],[7508,0,6929,0],[7509,0,6930,0],[7510,0,6931,0],[7511,0,6932,0],[7512,2,6933,0],[7512,11,6933,9,"initializeRecaptchaConfig"],[7512,36,6933,34,"initializeRecaptchaConfig"],[7512,37,6933,35,"auth"],[7512,41,6933,39],[7512,43,6933,41],[7513,4,6934,4],[7513,11,6934,11,"_initializeRecaptchaConfig"],[7513,37,6934,37],[7513,38,6934,38,"auth"],[7513,42,6934,42],[7513,43,6934,43],[7514,2,6935,0],[7515,2,6936,0],[7516,0,6937,0],[7517,0,6938,0],[7518,0,6939,0],[7519,0,6940,0],[7520,0,6941,0],[7521,0,6942,0],[7522,0,6943,0],[7523,0,6944,0],[7524,0,6945,0],[7525,0,6946,0],[7526,0,6947,0],[7527,0,6948,0],[7528,0,6949,0],[7529,0,6950,0],[7530,0,6951,0],[7531,0,6952,0],[7532,0,6953,0],[7533,0,6954,0],[7534,0,6955,0],[7535,0,6956,0],[7536,0,6957,0],[7537,0,6958,0],[7538,2,6959,0],[7538,17,6959,15,"validatePassword"],[7538,33,6959,31,"validatePassword"],[7538,34,6959,32,"auth"],[7538,38,6959,36],[7538,40,6959,38,"password"],[7538,48,6959,46],[7538,50,6959,48],[7539,4,6960,4],[7539,10,6960,10,"authInternal"],[7539,22,6960,22],[7539,25,6960,25,"_castAuth"],[7539,34,6960,34],[7539,35,6960,35,"auth"],[7539,39,6960,39],[7539,40,6960,40],[7540,4,6961,4],[7540,11,6961,11,"authInternal"],[7540,23,6961,23],[7540,24,6961,24,"validatePassword"],[7540,40,6961,40],[7540,41,6961,41,"password"],[7540,49,6961,49],[7540,50,6961,50],[7541,2,6962,0],[7542,2,6963,0],[7543,0,6964,0],[7544,0,6965,0],[7545,0,6966,0],[7546,0,6967,0],[7547,0,6968,0],[7548,0,6969,0],[7549,0,6970,0],[7550,0,6971,0],[7551,0,6972,0],[7552,0,6973,0],[7553,0,6974,0],[7554,0,6975,0],[7555,0,6976,0],[7556,0,6977,0],[7557,0,6978,0],[7558,2,6979,0],[7558,11,6979,9,"onIdTokenChanged"],[7558,27,6979,25,"onIdTokenChanged"],[7558,28,6979,26,"auth"],[7558,32,6979,30],[7558,34,6979,32,"nextOrObserver"],[7558,48,6979,46],[7558,50,6979,48,"error"],[7558,55,6979,53],[7558,57,6979,55,"completed"],[7558,66,6979,64],[7558,68,6979,66],[7559,4,6980,4],[7559,11,6980,11],[7559,15,6980,11,"getModularInstance"],[7559,28,6980,29],[7559,29,6980,29,"getModularInstance"],[7559,47,6980,29],[7559,49,6980,30,"auth"],[7559,53,6980,34],[7559,54,6980,35],[7559,55,6980,36,"onIdTokenChanged"],[7559,71,6980,52],[7559,72,6980,53,"nextOrObserver"],[7559,86,6980,67],[7559,88,6980,69,"error"],[7559,93,6980,74],[7559,95,6980,76,"completed"],[7559,104,6980,85],[7559,105,6980,86],[7560,2,6981,0],[7561,2,6982,0],[7562,0,6983,0],[7563,0,6984,0],[7564,0,6985,0],[7565,0,6986,0],[7566,0,6987,0],[7567,0,6988,0],[7568,0,6989,0],[7569,0,6990,0],[7570,0,6991,0],[7571,2,6992,0],[7571,11,6992,9,"beforeAuthStateChanged"],[7571,33,6992,31,"beforeAuthStateChanged"],[7571,34,6992,32,"auth"],[7571,38,6992,36],[7571,40,6992,38,"callback"],[7571,48,6992,46],[7571,50,6992,48,"onAbort"],[7571,57,6992,55],[7571,59,6992,57],[7572,4,6993,4],[7572,11,6993,11],[7572,15,6993,11,"getModularInstance"],[7572,28,6993,29],[7572,29,6993,29,"getModularInstance"],[7572,47,6993,29],[7572,49,6993,30,"auth"],[7572,53,6993,34],[7572,54,6993,35],[7572,55,6993,36,"beforeAuthStateChanged"],[7572,77,6993,58],[7572,78,6993,59,"callback"],[7572,86,6993,67],[7572,88,6993,69,"onAbort"],[7572,95,6993,76],[7572,96,6993,77],[7573,2,6994,0],[7574,2,6995,0],[7575,0,6996,0],[7576,0,6997,0],[7577,0,6998,0],[7578,0,6999,0],[7579,0,7000,0],[7580,0,7001,0],[7581,0,7002,0],[7582,0,7003,0],[7583,0,7004,0],[7584,0,7005,0],[7585,0,7006,0],[7586,0,7007,0],[7587,0,7008,0],[7588,0,7009,0],[7589,2,7010,0],[7589,11,7010,9,"onAuthStateChanged"],[7589,29,7010,27,"onAuthStateChanged"],[7589,30,7010,28,"auth"],[7589,34,7010,32],[7589,36,7010,34,"nextOrObserver"],[7589,50,7010,48],[7589,52,7010,50,"error"],[7589,57,7010,55],[7589,59,7010,57,"completed"],[7589,68,7010,66],[7589,70,7010,68],[7590,4,7011,4],[7590,11,7011,11],[7590,15,7011,11,"getModularInstance"],[7590,28,7011,29],[7590,29,7011,29,"getModularInstance"],[7590,47,7011,29],[7590,49,7011,30,"auth"],[7590,53,7011,34],[7590,54,7011,35],[7590,55,7011,36,"onAuthStateChanged"],[7590,73,7011,54],[7590,74,7011,55,"nextOrObserver"],[7590,88,7011,69],[7590,90,7011,71,"error"],[7590,95,7011,76],[7590,97,7011,78,"completed"],[7590,106,7011,87],[7590,107,7011,88],[7591,2,7012,0],[7592,2,7013,0],[7593,0,7014,0],[7594,0,7015,0],[7595,0,7016,0],[7596,0,7017,0],[7597,0,7018,0],[7598,0,7019,0],[7599,2,7020,0],[7599,11,7020,9,"useDeviceLanguage"],[7599,28,7020,26,"useDeviceLanguage"],[7599,29,7020,27,"auth"],[7599,33,7020,31],[7599,35,7020,33],[7600,4,7021,4],[7600,8,7021,4,"getModularInstance"],[7600,21,7021,22],[7600,22,7021,22,"getModularInstance"],[7600,40,7021,22],[7600,42,7021,23,"auth"],[7600,46,7021,27],[7600,47,7021,28],[7600,48,7021,29,"useDeviceLanguage"],[7600,65,7021,46],[7600,66,7021,47],[7600,67,7021,48],[7601,2,7022,0],[7602,2,7023,0],[7603,0,7024,0],[7604,0,7025,0],[7605,0,7026,0],[7606,0,7027,0],[7607,0,7028,0],[7608,0,7029,0],[7609,0,7030,0],[7610,0,7031,0],[7611,0,7032,0],[7612,0,7033,0],[7613,0,7034,0],[7614,0,7035,0],[7615,0,7036,0],[7616,0,7037,0],[7617,0,7038,0],[7618,0,7039,0],[7619,0,7040,0],[7620,0,7041,0],[7621,0,7042,0],[7622,0,7043,0],[7623,2,7044,0],[7623,11,7044,9,"updateCurrentUser"],[7623,28,7044,26,"updateCurrentUser"],[7623,29,7044,27,"auth"],[7623,33,7044,31],[7623,35,7044,33,"user"],[7623,39,7044,37],[7623,41,7044,39],[7624,4,7045,4],[7624,11,7045,11],[7624,15,7045,11,"getModularInstance"],[7624,28,7045,29],[7624,29,7045,29,"getModularInstance"],[7624,47,7045,29],[7624,49,7045,30,"auth"],[7624,53,7045,34],[7624,54,7045,35],[7624,55,7045,36,"updateCurrentUser"],[7624,72,7045,53],[7624,73,7045,54,"user"],[7624,77,7045,58],[7624,78,7045,59],[7625,2,7046,0],[7626,2,7047,0],[7627,0,7048,0],[7628,0,7049,0],[7629,0,7050,0],[7630,0,7051,0],[7631,0,7052,0],[7632,0,7053,0],[7633,0,7054,0],[7634,0,7055,0],[7635,0,7056,0],[7636,0,7057,0],[7637,2,7058,0],[7637,11,7058,9,"signOut"],[7637,18,7058,16,"signOut"],[7637,19,7058,17,"auth"],[7637,23,7058,21],[7637,25,7058,23],[7638,4,7059,4],[7638,11,7059,11],[7638,15,7059,11,"getModularInstance"],[7638,28,7059,29],[7638,29,7059,29,"getModularInstance"],[7638,47,7059,29],[7638,49,7059,30,"auth"],[7638,53,7059,34],[7638,54,7059,35],[7638,55,7059,36,"signOut"],[7638,62,7059,43],[7638,63,7059,44],[7638,64,7059,45],[7639,2,7060,0],[7640,2,7061,0],[7641,0,7062,0],[7642,0,7063,0],[7643,0,7064,0],[7644,0,7065,0],[7645,0,7066,0],[7646,0,7067,0],[7647,0,7068,0],[7648,2,7069,0],[7648,11,7069,9,"revokeAccessToken"],[7648,28,7069,26,"revokeAccessToken"],[7648,29,7069,27,"auth"],[7648,33,7069,31],[7648,35,7069,33,"token"],[7648,40,7069,38],[7648,42,7069,40],[7649,4,7070,4],[7649,10,7070,10,"authInternal"],[7649,22,7070,22],[7649,25,7070,25,"_castAuth"],[7649,34,7070,34],[7649,35,7070,35,"auth"],[7649,39,7070,39],[7649,40,7070,40],[7650,4,7071,4],[7650,11,7071,11,"authInternal"],[7650,23,7071,23],[7650,24,7071,24,"revokeAccessToken"],[7650,41,7071,41],[7650,42,7071,42,"token"],[7650,47,7071,47],[7650,48,7071,48],[7651,2,7072,0],[7652,2,7073,0],[7653,0,7074,0],[7654,0,7075,0],[7655,0,7076,0],[7656,0,7077,0],[7657,0,7078,0],[7658,0,7079,0],[7659,0,7080,0],[7660,0,7081,0],[7661,0,7082,0],[7662,0,7083,0],[7663,0,7084,0],[7664,2,7085,0],[7664,17,7085,15,"deleteUser"],[7664,27,7085,25,"deleteUser"],[7664,28,7085,26,"user"],[7664,32,7085,30],[7664,34,7085,32],[7665,4,7086,4],[7665,11,7086,11],[7665,15,7086,11,"getModularInstance"],[7665,28,7086,29],[7665,29,7086,29,"getModularInstance"],[7665,47,7086,29],[7665,49,7086,30,"user"],[7665,53,7086,34],[7665,54,7086,35],[7665,55,7086,36,"delete"],[7665,61,7086,42],[7665,62,7086,43],[7665,63,7086,44],[7666,2,7087,0],[7668,2,7089,0],[7669,0,7090,0],[7670,0,7091,0],[7671,0,7092,0],[7672,0,7093,0],[7673,0,7094,0],[7674,0,7095,0],[7675,0,7096,0],[7676,0,7097,0],[7677,0,7098,0],[7678,0,7099,0],[7679,0,7100,0],[7680,0,7101,0],[7681,0,7102,0],[7682,0,7103,0],[7683,0,7104,0],[7684,2,7105,0],[7684,8,7105,6,"MultiFactorSessionImpl"],[7684,30,7105,28],[7684,31,7105,29],[7685,4,7106,4,"constructor"],[7685,15,7106,15,"constructor"],[7685,16,7106,16,"type"],[7685,20,7106,20],[7685,22,7106,22,"credential"],[7685,32,7106,32],[7685,34,7106,34,"user"],[7685,38,7106,38],[7685,40,7106,40],[7686,6,7107,8],[7686,10,7107,12],[7686,11,7107,13,"type"],[7686,15,7107,17],[7686,18,7107,20,"type"],[7686,22,7107,24],[7687,6,7108,8],[7687,10,7108,12],[7687,11,7108,13,"credential"],[7687,21,7108,23],[7687,24,7108,26,"credential"],[7687,34,7108,36],[7688,6,7109,8],[7688,10,7109,12],[7688,11,7109,13,"user"],[7688,15,7109,17],[7688,18,7109,20,"user"],[7688,22,7109,24],[7689,4,7110,4],[7690,4,7111,4],[7690,11,7111,11,"_fromIdtoken"],[7690,23,7111,23,"_fromIdtoken"],[7690,24,7111,24,"idToken"],[7690,31,7111,31],[7690,33,7111,33,"user"],[7690,37,7111,37],[7690,39,7111,39],[7691,6,7112,8],[7691,13,7112,15],[7691,17,7112,19,"MultiFactorSessionImpl"],[7691,39,7112,41],[7691,40,7112,42],[7691,48,7112,50],[7691,49,7112,51],[7691,86,7112,88,"idToken"],[7691,93,7112,95],[7691,95,7112,97,"user"],[7691,99,7112,101],[7691,100,7112,102],[7692,4,7113,4],[7693,4,7114,4],[7693,11,7114,11,"_fromMfaPendingCredential"],[7693,36,7114,36,"_fromMfaPendingCredential"],[7693,37,7114,37,"mfaPendingCredential"],[7693,57,7114,57],[7693,59,7114,59],[7694,6,7115,8],[7694,13,7115,15],[7694,17,7115,19,"MultiFactorSessionImpl"],[7694,39,7115,41],[7694,40,7115,42],[7694,48,7115,50],[7694,49,7115,51],[7694,87,7115,89,"mfaPendingCredential"],[7694,107,7115,109],[7694,108,7115,110],[7695,4,7116,4],[7696,4,7117,4,"toJSON"],[7696,10,7117,10,"toJSON"],[7696,11,7117,10],[7696,13,7117,13],[7697,6,7118,8],[7697,12,7118,14,"key"],[7697,15,7118,17],[7697,18,7118,20],[7697,22,7118,24],[7697,23,7118,25,"type"],[7697,27,7118,29],[7697,32,7118,34],[7697,40,7118,42],[7697,41,7118,43],[7697,79,7119,14],[7697,88,7119,23],[7697,91,7120,14],[7697,110,7120,33],[7698,6,7121,8],[7698,13,7121,15],[7699,8,7122,12,"multiFactorSession"],[7699,26,7122,30],[7699,28,7122,32],[7700,10,7123,16],[7700,11,7123,17,"key"],[7700,14,7123,20],[7700,17,7123,23],[7700,21,7123,27],[7700,22,7123,28,"credential"],[7701,8,7124,12],[7702,6,7125,8],[7702,7,7125,9],[7703,4,7126,4],[7704,4,7127,4],[7704,11,7127,11,"fromJSON"],[7704,19,7127,19,"fromJSON"],[7704,20,7127,20,"obj"],[7704,23,7127,23],[7704,25,7127,25],[7705,6,7128,8],[7705,10,7128,12,"obj"],[7705,13,7128,15],[7705,15,7128,17,"multiFactorSession"],[7705,33,7128,35],[7705,35,7128,37],[7706,8,7129,12],[7706,12,7129,16,"obj"],[7706,15,7129,19],[7706,16,7129,20,"multiFactorSession"],[7706,34,7129,38],[7706,36,7129,40,"pendingCredential"],[7706,53,7129,57],[7706,55,7129,59],[7707,10,7130,16],[7707,17,7130,23,"MultiFactorSessionImpl"],[7707,39,7130,45],[7707,40,7130,46,"_fromMfaPendingCredential"],[7707,65,7130,71],[7707,66,7130,72,"obj"],[7707,69,7130,75],[7707,70,7130,76,"multiFactorSession"],[7707,88,7130,94],[7707,89,7130,95,"pendingCredential"],[7707,106,7130,112],[7707,107,7130,113],[7708,8,7131,12],[7708,9,7131,13],[7708,15,7132,17],[7708,19,7132,21,"obj"],[7708,22,7132,24],[7708,23,7132,25,"multiFactorSession"],[7708,41,7132,43],[7708,43,7132,45,"idToken"],[7708,50,7132,52],[7708,52,7132,54],[7709,10,7133,16],[7709,17,7133,23,"MultiFactorSessionImpl"],[7709,39,7133,45],[7709,40,7133,46,"_fromIdtoken"],[7709,52,7133,58],[7709,53,7133,59,"obj"],[7709,56,7133,62],[7709,57,7133,63,"multiFactorSession"],[7709,75,7133,81],[7709,76,7133,82,"idToken"],[7709,83,7133,89],[7709,84,7133,90],[7710,8,7134,12],[7711,6,7135,8],[7712,6,7136,8],[7712,13,7136,15],[7712,17,7136,19],[7713,4,7137,4],[7714,2,7138,0],[7716,2,7140,0],[7717,0,7141,0],[7718,0,7142,0],[7719,0,7143,0],[7720,0,7144,0],[7721,0,7145,0],[7722,0,7146,0],[7723,0,7147,0],[7724,0,7148,0],[7725,0,7149,0],[7726,0,7150,0],[7727,0,7151,0],[7728,0,7152,0],[7729,0,7153,0],[7730,0,7154,0],[7731,0,7155,0],[7732,2,7156,0],[7732,8,7156,6,"MultiFactorResolverImpl"],[7732,31,7156,29],[7732,32,7156,30],[7733,4,7157,4,"constructor"],[7733,15,7157,15,"constructor"],[7733,16,7157,16,"session"],[7733,23,7157,23],[7733,25,7157,25,"hints"],[7733,30,7157,30],[7733,32,7157,32,"signInResolver"],[7733,46,7157,46],[7733,48,7157,48],[7734,6,7158,8],[7734,10,7158,12],[7734,11,7158,13,"session"],[7734,18,7158,20],[7734,21,7158,23,"session"],[7734,28,7158,30],[7735,6,7159,8],[7735,10,7159,12],[7735,11,7159,13,"hints"],[7735,16,7159,18],[7735,19,7159,21,"hints"],[7735,24,7159,26],[7736,6,7160,8],[7736,10,7160,12],[7736,11,7160,13,"signInResolver"],[7736,25,7160,27],[7736,28,7160,30,"signInResolver"],[7736,42,7160,44],[7737,4,7161,4],[7738,4,7162,4],[7739,4,7163,4],[7739,11,7163,11,"_fromError"],[7739,21,7163,21,"_fromError"],[7739,22,7163,22,"authExtern"],[7739,32,7163,32],[7739,34,7163,34,"error"],[7739,39,7163,39],[7739,41,7163,41],[7740,6,7164,8],[7740,12,7164,14,"auth"],[7740,16,7164,18],[7740,19,7164,21,"_castAuth"],[7740,28,7164,30],[7740,29,7164,31,"authExtern"],[7740,39,7164,41],[7740,40,7164,42],[7741,6,7165,8],[7741,12,7165,14,"serverResponse"],[7741,26,7165,28],[7741,29,7165,31,"error"],[7741,34,7165,36],[7741,35,7165,37,"customData"],[7741,45,7165,47],[7741,46,7165,48,"_serverResponse"],[7741,61,7165,63],[7742,6,7166,8],[7742,12,7166,14,"hints"],[7742,17,7166,19],[7742,20,7166,22],[7742,21,7166,23,"serverResponse"],[7742,35,7166,37],[7742,36,7166,38,"mfaInfo"],[7742,43,7166,45],[7742,47,7166,49],[7742,49,7166,51],[7742,51,7166,53,"map"],[7742,54,7166,56],[7742,55,7166,57,"enrollment"],[7742,65,7166,67],[7742,69,7166,71,"MultiFactorInfoImpl"],[7742,88,7166,90],[7742,89,7166,91,"_fromServerResponse"],[7742,108,7166,110],[7742,109,7166,111,"auth"],[7742,113,7166,115],[7742,115,7166,117,"enrollment"],[7742,125,7166,127],[7742,126,7166,128],[7742,127,7166,129],[7743,6,7167,8,"_assert"],[7743,13,7167,15],[7743,14,7167,16,"serverResponse"],[7743,28,7167,30],[7743,29,7167,31,"mfaPendingCredential"],[7743,49,7167,51],[7743,51,7167,53,"auth"],[7743,55,7167,57],[7743,57,7167,59],[7743,73,7167,75],[7743,74,7167,76],[7743,108,7167,110],[7743,109,7167,111],[7744,6,7168,8],[7744,12,7168,14,"session"],[7744,19,7168,21],[7744,22,7168,24,"MultiFactorSessionImpl"],[7744,44,7168,46],[7744,45,7168,47,"_fromMfaPendingCredential"],[7744,70,7168,72],[7744,71,7168,73,"serverResponse"],[7744,85,7168,87],[7744,86,7168,88,"mfaPendingCredential"],[7744,106,7168,108],[7744,107,7168,109],[7745,6,7169,8],[7745,13,7169,15],[7745,17,7169,19,"MultiFactorResolverImpl"],[7745,40,7169,42],[7745,41,7169,43,"session"],[7745,48,7169,50],[7745,50,7169,52,"hints"],[7745,55,7169,57],[7745,57,7169,59],[7745,63,7169,66,"assertion"],[7745,72,7169,75],[7745,76,7169,80],[7746,8,7170,12],[7746,14,7170,18,"mfaResponse"],[7746,25,7170,29],[7746,28,7170,32],[7746,34,7170,38,"assertion"],[7746,43,7170,47],[7746,44,7170,48,"_process"],[7746,52,7170,56],[7746,53,7170,57,"auth"],[7746,57,7170,61],[7746,59,7170,63,"session"],[7746,66,7170,70],[7746,67,7170,71],[7747,8,7171,12],[7748,8,7172,12],[7748,15,7172,19,"serverResponse"],[7748,29,7172,33],[7748,30,7172,34,"mfaInfo"],[7748,37,7172,41],[7749,8,7173,12],[7749,15,7173,19,"serverResponse"],[7749,29,7173,33],[7749,30,7173,34,"mfaPendingCredential"],[7749,50,7173,54],[7750,8,7174,12],[7751,8,7175,12],[7751,14,7175,18,"idTokenResponse"],[7751,29,7175,33],[7751,32,7175,36],[7752,10,7176,16],[7752,13,7176,19,"serverResponse"],[7752,27,7176,33],[7753,10,7177,16,"idToken"],[7753,17,7177,23],[7753,19,7177,25,"mfaResponse"],[7753,30,7177,36],[7753,31,7177,37,"idToken"],[7753,38,7177,44],[7754,10,7178,16,"refreshToken"],[7754,22,7178,28],[7754,24,7178,30,"mfaResponse"],[7754,35,7178,41],[7754,36,7178,42,"refreshToken"],[7755,8,7179,12],[7755,9,7179,13],[7756,8,7180,12],[7757,8,7181,12],[7757,16,7181,20,"error"],[7757,21,7181,25],[7757,22,7181,26,"operationType"],[7757,35,7181,39],[7758,10,7182,16],[7758,15,7182,21],[7758,23,7182,29],[7758,24,7182,30],[7759,12,7183,20],[7759,18,7183,26,"userCredential"],[7759,32,7183,40],[7759,35,7183,43],[7759,41,7183,49,"UserCredentialImpl"],[7759,59,7183,67],[7759,60,7183,68,"_fromIdTokenResponse"],[7759,80,7183,88],[7759,81,7183,89,"auth"],[7759,85,7183,93],[7759,87,7183,95,"error"],[7759,92,7183,100],[7759,93,7183,101,"operationType"],[7759,106,7183,114],[7759,108,7183,116,"idTokenResponse"],[7759,123,7183,131],[7759,124,7183,132],[7760,12,7184,20],[7760,18,7184,26,"auth"],[7760,22,7184,30],[7760,23,7184,31,"_updateCurrentUser"],[7760,41,7184,49],[7760,42,7184,50,"userCredential"],[7760,56,7184,64],[7760,57,7184,65,"user"],[7760,61,7184,69],[7760,62,7184,70],[7761,12,7185,20],[7761,19,7185,27,"userCredential"],[7761,33,7185,41],[7762,10,7186,16],[7762,15,7186,21],[7762,31,7186,37],[7762,32,7186,38],[7763,12,7187,20,"_assert"],[7763,19,7187,27],[7763,20,7187,28,"error"],[7763,25,7187,33],[7763,26,7187,34,"user"],[7763,30,7187,38],[7763,32,7187,40,"auth"],[7763,36,7187,44],[7763,38,7187,46],[7763,54,7187,62],[7763,55,7187,63],[7763,89,7187,97],[7763,90,7187,98],[7764,12,7188,20],[7764,19,7188,27,"UserCredentialImpl"],[7764,37,7188,45],[7764,38,7188,46,"_forOperation"],[7764,51,7188,59],[7764,52,7188,60,"error"],[7764,57,7188,65],[7764,58,7188,66,"user"],[7764,62,7188,70],[7764,64,7188,72,"error"],[7764,69,7188,77],[7764,70,7188,78,"operationType"],[7764,83,7188,91],[7764,85,7188,93,"idTokenResponse"],[7764,100,7188,108],[7764,101,7188,109],[7765,10,7189,16],[7766,12,7190,20,"_fail"],[7766,17,7190,25],[7766,18,7190,26,"auth"],[7766,22,7190,30],[7766,24,7190,32],[7766,40,7190,48],[7766,41,7190,49],[7766,75,7190,83],[7766,76,7190,84],[7767,8,7191,12],[7768,6,7192,8],[7768,7,7192,9],[7768,8,7192,10],[7769,4,7193,4],[7770,4,7194,4],[7770,10,7194,10,"resolveSignIn"],[7770,23,7194,23,"resolveSignIn"],[7770,24,7194,24,"assertionExtern"],[7770,39,7194,39],[7770,41,7194,41],[7771,6,7195,8],[7771,12,7195,14,"assertion"],[7771,21,7195,23],[7771,24,7195,26,"assertionExtern"],[7771,39,7195,41],[7772,6,7196,8],[7772,13,7196,15],[7772,17,7196,19],[7772,18,7196,20,"signInResolver"],[7772,32,7196,34],[7772,33,7196,35,"assertion"],[7772,42,7196,44],[7772,43,7196,45],[7773,4,7197,4],[7774,2,7198,0],[7775,2,7199,0],[7776,0,7200,0],[7777,0,7201,0],[7778,0,7202,0],[7779,0,7203,0],[7780,0,7204,0],[7781,0,7205,0],[7782,0,7206,0],[7783,0,7207,0],[7784,0,7208,0],[7785,2,7209,0],[7785,11,7209,9,"getMultiFactorResolver"],[7785,33,7209,31,"getMultiFactorResolver"],[7785,34,7209,32,"auth"],[7785,38,7209,36],[7785,40,7209,38,"error"],[7785,45,7209,43],[7785,47,7209,45],[7786,4,7210,4],[7786,10,7210,10,"authModular"],[7786,21,7210,21],[7786,24,7210,24],[7786,28,7210,24,"getModularInstance"],[7786,41,7210,42],[7786,42,7210,42,"getModularInstance"],[7786,60,7210,42],[7786,62,7210,43,"auth"],[7786,66,7210,47],[7786,67,7210,48],[7787,4,7211,4],[7787,10,7211,10,"errorInternal"],[7787,23,7211,23],[7787,26,7211,26,"error"],[7787,31,7211,31],[7788,4,7212,4,"_assert"],[7788,11,7212,11],[7788,12,7212,12,"error"],[7788,17,7212,17],[7788,18,7212,18,"customData"],[7788,28,7212,28],[7788,29,7212,29,"operationType"],[7788,42,7212,42],[7788,44,7212,44,"authModular"],[7788,55,7212,55],[7788,57,7212,57],[7788,73,7212,73],[7788,74,7212,74],[7788,108,7212,108],[7788,109,7212,109],[7789,4,7213,4,"_assert"],[7789,11,7213,11],[7789,12,7213,12,"errorInternal"],[7789,25,7213,25],[7789,26,7213,26,"customData"],[7789,36,7213,36],[7789,37,7213,37,"_serverResponse"],[7789,52,7213,52],[7789,54,7213,54,"mfaPendingCredential"],[7789,74,7213,74],[7789,76,7213,76,"authModular"],[7789,87,7213,87],[7789,89,7213,89],[7789,105,7213,105],[7789,106,7213,106],[7789,140,7213,140],[7789,141,7213,141],[7790,4,7214,4],[7790,11,7214,11,"MultiFactorResolverImpl"],[7790,34,7214,34],[7790,35,7214,35,"_fromError"],[7790,45,7214,45],[7790,46,7214,46,"authModular"],[7790,57,7214,57],[7790,59,7214,59,"errorInternal"],[7790,72,7214,72],[7790,73,7214,73],[7791,2,7215,0],[7793,2,7217,0],[7794,0,7218,0],[7795,0,7219,0],[7796,0,7220,0],[7797,0,7221,0],[7798,0,7222,0],[7799,0,7223,0],[7800,0,7224,0],[7801,0,7225,0],[7802,0,7226,0],[7803,0,7227,0],[7804,0,7228,0],[7805,0,7229,0],[7806,0,7230,0],[7807,0,7231,0],[7808,0,7232,0],[7809,2,7233,0],[7809,11,7233,9,"startEnrollPhoneMfa"],[7809,30,7233,28,"startEnrollPhoneMfa"],[7809,31,7233,29,"auth"],[7809,35,7233,33],[7809,37,7233,35,"request"],[7809,44,7233,42],[7809,46,7233,44],[7810,4,7234,4],[7810,11,7234,11,"_performApiRequest"],[7810,29,7234,29],[7810,30,7234,30,"auth"],[7810,34,7234,34],[7810,36,7234,36],[7810,42,7234,42],[7810,43,7234,43],[7810,66,7234,66],[7810,100,7234,100],[7810,101,7234,101],[7810,138,7234,138,"_addTidIfNecessary"],[7810,156,7234,156],[7810,157,7234,157,"auth"],[7810,161,7234,161],[7810,163,7234,163,"request"],[7810,170,7234,170],[7810,171,7234,171],[7810,172,7234,172],[7811,2,7235,0],[7812,2,7236,0],[7812,11,7236,9,"finalizeEnrollPhoneMfa"],[7812,33,7236,31,"finalizeEnrollPhoneMfa"],[7812,34,7236,32,"auth"],[7812,38,7236,36],[7812,40,7236,38,"request"],[7812,47,7236,45],[7812,49,7236,47],[7813,4,7237,4],[7813,11,7237,11,"_performApiRequest"],[7813,29,7237,29],[7813,30,7237,30,"auth"],[7813,34,7237,34],[7813,36,7237,36],[7813,42,7237,42],[7813,43,7237,43],[7813,66,7237,66],[7813,103,7237,103],[7813,104,7237,104],[7813,144,7237,144,"_addTidIfNecessary"],[7813,162,7237,162],[7813,163,7237,163,"auth"],[7813,167,7237,167],[7813,169,7237,169,"request"],[7813,176,7237,176],[7813,177,7237,177],[7813,178,7237,178],[7814,2,7238,0],[7815,2,7239,0],[7815,11,7239,9,"startEnrollTotpMfa"],[7815,29,7239,27,"startEnrollTotpMfa"],[7815,30,7239,28,"auth"],[7815,34,7239,32],[7815,36,7239,34,"request"],[7815,43,7239,41],[7815,45,7239,43],[7816,4,7240,4],[7816,11,7240,11,"_performApiRequest"],[7816,29,7240,29],[7816,30,7240,30,"auth"],[7816,34,7240,34],[7816,36,7240,36],[7816,42,7240,42],[7816,43,7240,43],[7816,66,7240,66],[7816,100,7240,100],[7816,101,7240,101],[7816,138,7240,138,"_addTidIfNecessary"],[7816,156,7240,156],[7816,157,7240,157,"auth"],[7816,161,7240,161],[7816,163,7240,163,"request"],[7816,170,7240,170],[7816,171,7240,171],[7816,172,7240,172],[7817,2,7241,0],[7818,2,7242,0],[7818,11,7242,9,"finalizeEnrollTotpMfa"],[7818,32,7242,30,"finalizeEnrollTotpMfa"],[7818,33,7242,31,"auth"],[7818,37,7242,35],[7818,39,7242,37,"request"],[7818,46,7242,44],[7818,48,7242,46],[7819,4,7243,4],[7819,11,7243,11,"_performApiRequest"],[7819,29,7243,29],[7819,30,7243,30,"auth"],[7819,34,7243,34],[7819,36,7243,36],[7819,42,7243,42],[7819,43,7243,43],[7819,66,7243,66],[7819,103,7243,103],[7819,104,7243,104],[7819,144,7243,144,"_addTidIfNecessary"],[7819,162,7243,162],[7819,163,7243,163,"auth"],[7819,167,7243,167],[7819,169,7243,169,"request"],[7819,176,7243,176],[7819,177,7243,177],[7819,178,7243,178],[7820,2,7244,0],[7821,2,7245,0],[7821,11,7245,9,"withdrawMfa"],[7821,22,7245,20,"withdrawMfa"],[7821,23,7245,21,"auth"],[7821,27,7245,25],[7821,29,7245,27,"request"],[7821,36,7245,34],[7821,38,7245,36],[7822,4,7246,4],[7822,11,7246,11,"_performApiRequest"],[7822,29,7246,29],[7822,30,7246,30,"auth"],[7822,34,7246,34],[7822,36,7246,36],[7822,42,7246,42],[7822,43,7246,43],[7822,66,7246,66],[7822,103,7246,103],[7822,104,7246,104],[7822,133,7246,133,"_addTidIfNecessary"],[7822,151,7246,151],[7822,152,7246,152,"auth"],[7822,156,7246,156],[7822,158,7246,158,"request"],[7822,165,7246,165],[7822,166,7246,166],[7822,167,7246,167],[7823,2,7247,0],[7824,2,7249,0],[7824,8,7249,6,"MultiFactorUserImpl"],[7824,27,7249,25],[7824,28,7249,26],[7825,4,7250,4,"constructor"],[7825,15,7250,15,"constructor"],[7825,16,7250,16,"user"],[7825,20,7250,20],[7825,22,7250,22],[7826,6,7251,8],[7826,10,7251,12],[7826,11,7251,13,"user"],[7826,15,7251,17],[7826,18,7251,20,"user"],[7826,22,7251,24],[7827,6,7252,8],[7827,10,7252,12],[7827,11,7252,13,"enrolledFactors"],[7827,26,7252,28],[7827,29,7252,31],[7827,31,7252,33],[7828,6,7253,8,"user"],[7828,10,7253,12],[7828,11,7253,13,"_onReload"],[7828,20,7253,22],[7828,21,7253,23,"userInfo"],[7828,29,7253,31],[7828,33,7253,35],[7829,8,7254,12],[7829,12,7254,16,"userInfo"],[7829,20,7254,24],[7829,21,7254,25,"mfaInfo"],[7829,28,7254,32],[7829,30,7254,34],[7830,10,7255,16],[7830,14,7255,20],[7830,15,7255,21,"enrolledFactors"],[7830,30,7255,36],[7830,33,7255,39,"userInfo"],[7830,41,7255,47],[7830,42,7255,48,"mfaInfo"],[7830,49,7255,55],[7830,50,7255,56,"map"],[7830,53,7255,59],[7830,54,7255,60,"enrollment"],[7830,64,7255,70],[7830,68,7255,74,"MultiFactorInfoImpl"],[7830,87,7255,93],[7830,88,7255,94,"_fromServerResponse"],[7830,107,7255,113],[7830,108,7255,114,"user"],[7830,112,7255,118],[7830,113,7255,119,"auth"],[7830,117,7255,123],[7830,119,7255,125,"enrollment"],[7830,129,7255,135],[7830,130,7255,136],[7830,131,7255,137],[7831,8,7256,12],[7832,6,7257,8],[7832,7,7257,9],[7832,8,7257,10],[7833,4,7258,4],[7834,4,7259,4],[7834,11,7259,11,"_fromUser"],[7834,20,7259,20,"_fromUser"],[7834,21,7259,21,"user"],[7834,25,7259,25],[7834,27,7259,27],[7835,6,7260,8],[7835,13,7260,15],[7835,17,7260,19,"MultiFactorUserImpl"],[7835,36,7260,38],[7835,37,7260,39,"user"],[7835,41,7260,43],[7835,42,7260,44],[7836,4,7261,4],[7837,4,7262,4],[7837,10,7262,10,"getSession"],[7837,20,7262,20,"getSession"],[7837,21,7262,20],[7837,23,7262,23],[7838,6,7263,8],[7838,13,7263,15,"MultiFactorSessionImpl"],[7838,35,7263,37],[7838,36,7263,38,"_fromIdtoken"],[7838,48,7263,50],[7838,49,7263,51],[7838,55,7263,57],[7838,59,7263,61],[7838,60,7263,62,"user"],[7838,64,7263,66],[7838,65,7263,67,"getIdToken"],[7838,75,7263,77],[7838,76,7263,78],[7838,77,7263,79],[7838,79,7263,81],[7838,83,7263,85],[7838,84,7263,86,"user"],[7838,88,7263,90],[7838,89,7263,91],[7839,4,7264,4],[7840,4,7265,4],[7840,10,7265,10,"enroll"],[7840,16,7265,16,"enroll"],[7840,17,7265,17,"assertionExtern"],[7840,32,7265,32],[7840,34,7265,34,"displayName"],[7840,45,7265,45],[7840,47,7265,47],[7841,6,7266,8],[7841,12,7266,14,"assertion"],[7841,21,7266,23],[7841,24,7266,26,"assertionExtern"],[7841,39,7266,41],[7842,6,7267,8],[7842,12,7267,14,"session"],[7842,19,7267,21],[7842,22,7267,25],[7842,28,7267,31],[7842,32,7267,35],[7842,33,7267,36,"getSession"],[7842,43,7267,46],[7842,44,7267,47],[7842,45,7267,49],[7843,6,7268,8],[7843,12,7268,14,"finalizeMfaResponse"],[7843,31,7268,33],[7843,34,7268,36],[7843,40,7268,42,"_logoutIfInvalidated"],[7843,60,7268,62],[7843,61,7268,63],[7843,65,7268,67],[7843,66,7268,68,"user"],[7843,70,7268,72],[7843,72,7268,74,"assertion"],[7843,81,7268,83],[7843,82,7268,84,"_process"],[7843,90,7268,92],[7843,91,7268,93],[7843,95,7268,97],[7843,96,7268,98,"user"],[7843,100,7268,102],[7843,101,7268,103,"auth"],[7843,105,7268,107],[7843,107,7268,109,"session"],[7843,114,7268,116],[7843,116,7268,118,"displayName"],[7843,127,7268,129],[7843,128,7268,130],[7843,129,7268,131],[7844,6,7269,8],[7845,6,7270,8],[7846,6,7271,8],[7846,12,7271,14],[7846,16,7271,18],[7846,17,7271,19,"user"],[7846,21,7271,23],[7846,22,7271,24,"_updateTokensIfNecessary"],[7846,46,7271,48],[7846,47,7271,49,"finalizeMfaResponse"],[7846,66,7271,68],[7846,67,7271,69],[7847,6,7272,8],[7848,6,7273,8],[7849,6,7274,8],[7850,6,7275,8],[7850,13,7275,15],[7850,17,7275,19],[7850,18,7275,20,"user"],[7850,22,7275,24],[7850,23,7275,25,"reload"],[7850,29,7275,31],[7850,30,7275,32],[7850,31,7275,33],[7851,4,7276,4],[7852,4,7277,4],[7852,10,7277,10,"unenroll"],[7852,18,7277,18,"unenroll"],[7852,19,7277,19,"infoOrUid"],[7852,28,7277,28],[7852,30,7277,30],[7853,6,7278,8],[7853,12,7278,14,"mfaEnrollmentId"],[7853,27,7278,29],[7853,30,7278,32],[7853,37,7278,39,"infoOrUid"],[7853,46,7278,48],[7853,51,7278,53],[7853,59,7278,61],[7853,62,7278,64,"infoOrUid"],[7853,71,7278,73],[7853,74,7278,76,"infoOrUid"],[7853,83,7278,85],[7853,84,7278,86,"uid"],[7853,87,7278,89],[7854,6,7279,8],[7854,12,7279,14,"idToken"],[7854,19,7279,21],[7854,22,7279,24],[7854,28,7279,30],[7854,32,7279,34],[7854,33,7279,35,"user"],[7854,37,7279,39],[7854,38,7279,40,"getIdToken"],[7854,48,7279,50],[7854,49,7279,51],[7854,50,7279,52],[7855,6,7280,8],[7855,10,7280,12],[7856,8,7281,12],[7856,14,7281,18,"idTokenResponse"],[7856,29,7281,33],[7856,32,7281,36],[7856,38,7281,42,"_logoutIfInvalidated"],[7856,58,7281,62],[7856,59,7281,63],[7856,63,7281,67],[7856,64,7281,68,"user"],[7856,68,7281,72],[7856,70,7281,74,"withdrawMfa"],[7856,81,7281,85],[7856,82,7281,86],[7856,86,7281,90],[7856,87,7281,91,"user"],[7856,91,7281,95],[7856,92,7281,96,"auth"],[7856,96,7281,100],[7856,98,7281,102],[7857,10,7282,16,"idToken"],[7857,17,7282,23],[7858,10,7283,16,"mfaEnrollmentId"],[7859,8,7284,12],[7859,9,7284,13],[7859,10,7284,14],[7859,11,7284,15],[7860,8,7285,12],[7861,8,7286,12],[7861,12,7286,16],[7861,13,7286,17,"enrolledFactors"],[7861,28,7286,32],[7861,31,7286,35],[7861,35,7286,39],[7861,36,7286,40,"enrolledFactors"],[7861,51,7286,55],[7861,52,7286,56,"filter"],[7861,58,7286,62],[7861,59,7286,63],[7861,60,7286,64],[7862,10,7286,66,"uid"],[7863,8,7286,70],[7863,9,7286,71],[7863,14,7286,76,"uid"],[7863,17,7286,79],[7863,22,7286,84,"mfaEnrollmentId"],[7863,37,7286,99],[7863,38,7286,100],[7864,8,7287,12],[7865,8,7288,12],[7866,8,7289,12],[7867,8,7290,12],[7868,8,7291,12],[7868,14,7291,18],[7868,18,7291,22],[7868,19,7291,23,"user"],[7868,23,7291,27],[7868,24,7291,28,"_updateTokensIfNecessary"],[7868,48,7291,52],[7868,49,7291,53,"idTokenResponse"],[7868,64,7291,68],[7868,65,7291,69],[7869,8,7292,12],[7869,14,7292,18],[7869,18,7292,22],[7869,19,7292,23,"user"],[7869,23,7292,27],[7869,24,7292,28,"reload"],[7869,30,7292,34],[7869,31,7292,35],[7869,32,7292,36],[7870,6,7293,8],[7870,7,7293,9],[7870,8,7294,8],[7870,15,7294,15,"e"],[7870,16,7294,16],[7870,18,7294,18],[7871,8,7295,12],[7871,14,7295,18,"e"],[7871,15,7295,19],[7872,6,7296,8],[7873,4,7297,4],[7874,2,7298,0],[7875,2,7299,0],[7875,8,7299,6,"multiFactorUserCache"],[7875,28,7299,26],[7875,31,7299,29],[7875,35,7299,33,"WeakMap"],[7875,42,7299,40],[7875,43,7299,41],[7875,44,7299,42],[7876,2,7300,0],[7877,0,7301,0],[7878,0,7302,0],[7879,0,7303,0],[7880,0,7304,0],[7881,0,7305,0],[7882,0,7306,0],[7883,0,7307,0],[7884,0,7308,0],[7885,0,7309,0],[7886,2,7310,0],[7886,11,7310,9,"multiFactor"],[7886,22,7310,20,"multiFactor"],[7886,23,7310,21,"user"],[7886,27,7310,25],[7886,29,7310,27],[7887,4,7311,4],[7887,10,7311,10,"userModular"],[7887,21,7311,21],[7887,24,7311,24],[7887,28,7311,24,"getModularInstance"],[7887,41,7311,42],[7887,42,7311,42,"getModularInstance"],[7887,60,7311,42],[7887,62,7311,43,"user"],[7887,66,7311,47],[7887,67,7311,48],[7888,4,7312,4],[7888,8,7312,8],[7888,9,7312,9,"multiFactorUserCache"],[7888,29,7312,29],[7888,30,7312,30,"has"],[7888,33,7312,33],[7888,34,7312,34,"userModular"],[7888,45,7312,45],[7888,46,7312,46],[7888,48,7312,48],[7889,6,7313,8,"multiFactorUserCache"],[7889,26,7313,28],[7889,27,7313,29,"set"],[7889,30,7313,32],[7889,31,7313,33,"userModular"],[7889,42,7313,44],[7889,44,7313,46,"MultiFactorUserImpl"],[7889,63,7313,65],[7889,64,7313,66,"_fromUser"],[7889,73,7313,75],[7889,74,7313,76,"userModular"],[7889,85,7313,87],[7889,86,7313,88],[7889,87,7313,89],[7890,4,7314,4],[7891,4,7315,4],[7891,11,7315,11,"multiFactorUserCache"],[7891,31,7315,31],[7891,32,7315,32,"get"],[7891,35,7315,35],[7891,36,7315,36,"userModular"],[7891,47,7315,47],[7891,48,7315,48],[7892,2,7316,0],[7893,2,7318,0],[7893,8,7318,6,"STORAGE_AVAILABLE_KEY"],[7893,29,7318,27],[7893,32,7318,30],[7893,39,7318,37],[7895,2,7320,0],[7896,0,7321,0],[7897,0,7322,0],[7898,0,7323,0],[7899,0,7324,0],[7900,0,7325,0],[7901,0,7326,0],[7902,0,7327,0],[7903,0,7328,0],[7904,0,7329,0],[7905,0,7330,0],[7906,0,7331,0],[7907,0,7332,0],[7908,0,7333,0],[7909,0,7334,0],[7910,0,7335,0],[7911,2,7336,0],[7912,2,7337,0],[7913,2,7338,0],[7914,2,7339,0],[7914,8,7339,6,"BrowserPersistenceClass"],[7914,31,7339,29],[7914,32,7339,30],[7915,4,7340,4,"constructor"],[7915,15,7340,15,"constructor"],[7915,16,7340,16,"storageRetriever"],[7915,32,7340,32],[7915,34,7340,34,"type"],[7915,38,7340,38],[7915,40,7340,40],[7916,6,7341,8],[7916,10,7341,12],[7916,11,7341,13,"storageRetriever"],[7916,27,7341,29],[7916,30,7341,32,"storageRetriever"],[7916,46,7341,48],[7917,6,7342,8],[7917,10,7342,12],[7917,11,7342,13,"type"],[7917,15,7342,17],[7917,18,7342,20,"type"],[7917,22,7342,24],[7918,4,7343,4],[7919,4,7344,4,"_isAvailable"],[7919,16,7344,16,"_isAvailable"],[7919,17,7344,16],[7919,19,7344,19],[7920,6,7345,8],[7920,10,7345,12],[7921,8,7346,12],[7921,12,7346,16],[7921,13,7346,17],[7921,17,7346,21],[7921,18,7346,22,"storage"],[7921,25,7346,29],[7921,27,7346,31],[7922,10,7347,16],[7922,17,7347,23,"Promise"],[7922,24,7347,30],[7922,25,7347,31,"resolve"],[7922,32,7347,38],[7922,33,7347,39],[7922,38,7347,44],[7922,39,7347,45],[7923,8,7348,12],[7924,8,7349,12],[7924,12,7349,16],[7924,13,7349,17,"storage"],[7924,20,7349,24],[7924,21,7349,25,"setItem"],[7924,28,7349,32],[7924,29,7349,33,"STORAGE_AVAILABLE_KEY"],[7924,50,7349,54],[7924,52,7349,56],[7924,55,7349,59],[7924,56,7349,60],[7925,8,7350,12],[7925,12,7350,16],[7925,13,7350,17,"storage"],[7925,20,7350,24],[7925,21,7350,25,"removeItem"],[7925,31,7350,35],[7925,32,7350,36,"STORAGE_AVAILABLE_KEY"],[7925,53,7350,57],[7925,54,7350,58],[7926,8,7351,12],[7926,15,7351,19,"Promise"],[7926,22,7351,26],[7926,23,7351,27,"resolve"],[7926,30,7351,34],[7926,31,7351,35],[7926,35,7351,39],[7926,36,7351,40],[7927,6,7352,8],[7927,7,7352,9],[7927,8,7353,8],[7927,14,7353,14],[7928,8,7354,12],[7928,15,7354,19,"Promise"],[7928,22,7354,26],[7928,23,7354,27,"resolve"],[7928,30,7354,34],[7928,31,7354,35],[7928,36,7354,40],[7928,37,7354,41],[7929,6,7355,8],[7930,4,7356,4],[7931,4,7357,4,"_set"],[7931,8,7357,8,"_set"],[7931,9,7357,9,"key"],[7931,12,7357,12],[7931,14,7357,14,"value"],[7931,19,7357,19],[7931,21,7357,21],[7932,6,7358,8],[7932,10,7358,12],[7932,11,7358,13,"storage"],[7932,18,7358,20],[7932,19,7358,21,"setItem"],[7932,26,7358,28],[7932,27,7358,29,"key"],[7932,30,7358,32],[7932,32,7358,34,"JSON"],[7932,36,7358,38],[7932,37,7358,39,"stringify"],[7932,46,7358,48],[7932,47,7358,49,"value"],[7932,52,7358,54],[7932,53,7358,55],[7932,54,7358,56],[7933,6,7359,8],[7933,13,7359,15,"Promise"],[7933,20,7359,22],[7933,21,7359,23,"resolve"],[7933,28,7359,30],[7933,29,7359,31],[7933,30,7359,32],[7934,4,7360,4],[7935,4,7361,4,"_get"],[7935,8,7361,8,"_get"],[7935,9,7361,9,"key"],[7935,12,7361,12],[7935,14,7361,14],[7936,6,7362,8],[7936,12,7362,14,"json"],[7936,16,7362,18],[7936,19,7362,21],[7936,23,7362,25],[7936,24,7362,26,"storage"],[7936,31,7362,33],[7936,32,7362,34,"getItem"],[7936,39,7362,41],[7936,40,7362,42,"key"],[7936,43,7362,45],[7936,44,7362,46],[7937,6,7363,8],[7937,13,7363,15,"Promise"],[7937,20,7363,22],[7937,21,7363,23,"resolve"],[7937,28,7363,30],[7937,29,7363,31,"json"],[7937,33,7363,35],[7937,36,7363,38,"JSON"],[7937,40,7363,42],[7937,41,7363,43,"parse"],[7937,46,7363,48],[7937,47,7363,49,"json"],[7937,51,7363,53],[7937,52,7363,54],[7937,55,7363,57],[7937,59,7363,61],[7937,60,7363,62],[7938,4,7364,4],[7939,4,7365,4,"_remove"],[7939,11,7365,11,"_remove"],[7939,12,7365,12,"key"],[7939,15,7365,15],[7939,17,7365,17],[7940,6,7366,8],[7940,10,7366,12],[7940,11,7366,13,"storage"],[7940,18,7366,20],[7940,19,7366,21,"removeItem"],[7940,29,7366,31],[7940,30,7366,32,"key"],[7940,33,7366,35],[7940,34,7366,36],[7941,6,7367,8],[7941,13,7367,15,"Promise"],[7941,20,7367,22],[7941,21,7367,23,"resolve"],[7941,28,7367,30],[7941,29,7367,31],[7941,30,7367,32],[7942,4,7368,4],[7943,4,7369,4],[7943,8,7369,8,"storage"],[7943,15,7369,15,"storage"],[7943,16,7369,15],[7943,18,7369,18],[7944,6,7370,8],[7944,13,7370,15],[7944,17,7370,19],[7944,18,7370,20,"storageRetriever"],[7944,34,7370,36],[7944,35,7370,37],[7944,36,7370,38],[7945,4,7371,4],[7946,2,7372,0],[7948,2,7374,0],[7949,0,7375,0],[7950,0,7376,0],[7951,0,7377,0],[7952,0,7378,0],[7953,0,7379,0],[7954,0,7380,0],[7955,0,7381,0],[7956,0,7382,0],[7957,0,7383,0],[7958,0,7384,0],[7959,0,7385,0],[7960,0,7386,0],[7961,0,7387,0],[7962,0,7388,0],[7963,0,7389,0],[7964,2,7390,0],[7965,2,7391,0],[7965,8,7391,6,"_POLLING_INTERVAL_MS$1"],[7965,30,7391,28],[7965,33,7391,31],[7965,37,7391,35],[7966,2,7392,0],[7967,2,7393,0],[7967,8,7393,6,"IE10_LOCAL_STORAGE_SYNC_DELAY"],[7967,37,7393,35],[7967,40,7393,38],[7967,42,7393,40],[7968,2,7394,0],[7968,8,7394,6,"BrowserLocalPersistence"],[7968,31,7394,29],[7968,40,7394,38,"BrowserPersistenceClass"],[7968,63,7394,61],[7968,64,7394,62],[7969,4,7395,4,"constructor"],[7969,15,7395,15,"constructor"],[7969,16,7395,15],[7969,18,7395,18],[7970,6,7396,8],[7970,11,7396,13],[7970,12,7396,14],[7970,18,7396,20,"window"],[7970,24,7396,26],[7970,25,7396,27,"localStorage"],[7970,37,7396,39],[7970,39,7396,41],[7970,46,7396,48],[7970,47,7396,49],[7970,74,7396,76],[7970,75,7396,77],[7971,6,7397,8],[7971,10,7397,12],[7971,11,7397,13,"boundEventHandler"],[7971,28,7397,30],[7971,31,7397,33],[7971,32,7397,34,"event"],[7971,37,7397,39],[7971,39,7397,41,"poll"],[7971,43,7397,45],[7971,48,7397,50],[7971,52,7397,54],[7971,53,7397,55,"onStorageEvent"],[7971,67,7397,69],[7971,68,7397,70,"event"],[7971,73,7397,75],[7971,75,7397,77,"poll"],[7971,79,7397,81],[7971,80,7397,82],[7972,6,7398,8],[7972,10,7398,12],[7972,11,7398,13,"listeners"],[7972,20,7398,22],[7972,23,7398,25],[7972,24,7398,26],[7972,25,7398,27],[7973,6,7399,8],[7973,10,7399,12],[7973,11,7399,13,"localCache"],[7973,21,7399,23],[7973,24,7399,26],[7973,25,7399,27],[7973,26,7399,28],[7974,6,7400,8],[7975,6,7401,8],[7976,6,7402,8],[7976,10,7402,12],[7976,11,7402,13,"pollTimer"],[7976,20,7402,22],[7976,23,7402,25],[7976,27,7402,29],[7977,6,7403,8],[7978,6,7404,8],[7978,10,7404,12],[7978,11,7404,13,"fallbackToPolling"],[7978,28,7404,30],[7978,31,7404,33,"_isMobileBrowser"],[7978,47,7404,49],[7978,48,7404,50],[7978,49,7404,51],[7979,6,7405,8],[7979,10,7405,12],[7979,11,7405,13,"_shouldAllowMigration"],[7979,32,7405,34],[7979,35,7405,37],[7979,39,7405,41],[7980,4,7406,4],[7981,4,7407,4,"forAllChangedKeys"],[7981,21,7407,21,"forAllChangedKeys"],[7981,22,7407,22,"cb"],[7981,24,7407,24],[7981,26,7407,26],[7982,6,7408,8],[7983,6,7409,8],[7983,11,7409,13],[7983,17,7409,19,"key"],[7983,20,7409,22],[7983,24,7409,26,"Object"],[7983,30,7409,32],[7983,31,7409,33,"keys"],[7983,35,7409,37],[7983,36,7409,38],[7983,40,7409,42],[7983,41,7409,43,"listeners"],[7983,50,7409,52],[7983,51,7409,53],[7983,53,7409,55],[7984,8,7410,12],[7985,8,7411,12],[7985,14,7411,18,"newValue"],[7985,22,7411,26],[7985,25,7411,29],[7985,29,7411,33],[7985,30,7411,34,"storage"],[7985,37,7411,41],[7985,38,7411,42,"getItem"],[7985,45,7411,49],[7985,46,7411,50,"key"],[7985,49,7411,53],[7985,50,7411,54],[7986,8,7412,12],[7986,14,7412,18,"oldValue"],[7986,22,7412,26],[7986,25,7412,29],[7986,29,7412,33],[7986,30,7412,34,"localCache"],[7986,40,7412,44],[7986,41,7412,45,"key"],[7986,44,7412,48],[7986,45,7412,49],[7987,8,7413,12],[7988,8,7414,12],[7989,8,7415,12],[7989,12,7415,16,"newValue"],[7989,20,7415,24],[7989,25,7415,29,"oldValue"],[7989,33,7415,37],[7989,35,7415,39],[7990,10,7416,16,"cb"],[7990,12,7416,18],[7990,13,7416,19,"key"],[7990,16,7416,22],[7990,18,7416,24,"oldValue"],[7990,26,7416,32],[7990,28,7416,34,"newValue"],[7990,36,7416,42],[7990,37,7416,43],[7991,8,7417,12],[7992,6,7418,8],[7993,4,7419,4],[7994,4,7420,4,"onStorageEvent"],[7994,18,7420,18,"onStorageEvent"],[7994,19,7420,19,"event"],[7994,24,7420,24],[7994,26,7420,26,"poll"],[7994,30,7420,30],[7994,33,7420,33],[7994,38,7420,38],[7994,40,7420,40],[7995,6,7421,8],[7996,6,7422,8],[7996,10,7422,12],[7996,11,7422,13,"event"],[7996,16,7422,18],[7996,17,7422,19,"key"],[7996,20,7422,22],[7996,22,7422,24],[7997,8,7423,12],[7997,12,7423,16],[7997,13,7423,17,"forAllChangedKeys"],[7997,30,7423,34],[7997,31,7423,35],[7997,32,7423,36,"key"],[7997,35,7423,39],[7997,37,7423,41,"_oldValue"],[7997,46,7423,50],[7997,48,7423,52,"newValue"],[7997,56,7423,60],[7997,61,7423,65],[7998,10,7424,16],[7998,14,7424,20],[7998,15,7424,21,"notifyListeners"],[7998,30,7424,36],[7998,31,7424,37,"key"],[7998,34,7424,40],[7998,36,7424,42,"newValue"],[7998,44,7424,50],[7998,45,7424,51],[7999,8,7425,12],[7999,9,7425,13],[7999,10,7425,14],[8000,8,7426,12],[8001,6,7427,8],[8002,6,7428,8],[8002,12,7428,14,"key"],[8002,15,7428,17],[8002,18,7428,20,"event"],[8002,23,7428,25],[8002,24,7428,26,"key"],[8002,27,7428,29],[8003,6,7429,8],[8004,6,7430,8],[8005,6,7431,8],[8005,10,7431,12,"poll"],[8005,14,7431,16],[8005,16,7431,18],[8006,8,7432,12],[8007,8,7433,12],[8008,8,7434,12],[8008,12,7434,16],[8008,13,7434,17,"detachListener"],[8008,27,7434,31],[8008,28,7434,32],[8008,29,7434,33],[8009,6,7435,8],[8009,7,7435,9],[8009,13,7436,13],[8010,8,7437,12],[8011,8,7438,12],[8012,8,7439,12],[8012,12,7439,16],[8012,13,7439,17,"stopPolling"],[8012,24,7439,28],[8012,25,7439,29],[8012,26,7439,30],[8013,6,7440,8],[8014,6,7441,8],[8014,12,7441,14,"triggerListeners"],[8014,28,7441,30],[8014,31,7441,33,"triggerListeners"],[8014,32,7441,33],[8014,37,7441,39],[8015,8,7442,12],[8016,8,7443,12],[8017,8,7444,12],[8017,14,7444,18,"storedValue"],[8017,25,7444,29],[8017,28,7444,32],[8017,32,7444,36],[8017,33,7444,37,"storage"],[8017,40,7444,44],[8017,41,7444,45,"getItem"],[8017,48,7444,52],[8017,49,7444,53,"key"],[8017,52,7444,56],[8017,53,7444,57],[8018,8,7445,12],[8018,12,7445,16],[8018,13,7445,17,"poll"],[8018,17,7445,21],[8018,21,7445,25],[8018,25,7445,29],[8018,26,7445,30,"localCache"],[8018,36,7445,40],[8018,37,7445,41,"key"],[8018,40,7445,44],[8018,41,7445,45],[8018,46,7445,50,"storedValue"],[8018,57,7445,61],[8018,59,7445,63],[8019,10,7446,16],[8020,10,7447,16],[8021,10,7448,16],[8022,8,7449,12],[8023,8,7450,12],[8023,12,7450,16],[8023,13,7450,17,"notifyListeners"],[8023,28,7450,32],[8023,29,7450,33,"key"],[8023,32,7450,36],[8023,34,7450,38,"storedValue"],[8023,45,7450,49],[8023,46,7450,50],[8024,6,7451,8],[8024,7,7451,9],[8025,6,7452,8],[8025,12,7452,14,"storedValue"],[8025,23,7452,25],[8025,26,7452,28],[8025,30,7452,32],[8025,31,7452,33,"storage"],[8025,38,7452,40],[8025,39,7452,41,"getItem"],[8025,46,7452,48],[8025,47,7452,49,"key"],[8025,50,7452,52],[8025,51,7452,53],[8026,6,7453,8],[8026,10,7453,12,"_isIE10"],[8026,17,7453,19],[8026,18,7453,20],[8026,19,7453,21],[8026,23,7454,12,"storedValue"],[8026,34,7454,23],[8026,39,7454,28,"event"],[8026,44,7454,33],[8026,45,7454,34,"newValue"],[8026,53,7454,42],[8026,57,7455,12,"event"],[8026,62,7455,17],[8026,63,7455,18,"newValue"],[8026,71,7455,26],[8026,76,7455,31,"event"],[8026,81,7455,36],[8026,82,7455,37,"oldValue"],[8026,90,7455,45],[8026,92,7455,47],[8027,8,7456,12],[8028,8,7457,12],[8029,8,7458,12],[8030,8,7459,12],[8031,8,7460,12,"setTimeout"],[8031,18,7460,22],[8031,19,7460,23,"triggerListeners"],[8031,35,7460,39],[8031,37,7460,41,"IE10_LOCAL_STORAGE_SYNC_DELAY"],[8031,66,7460,70],[8031,67,7460,71],[8032,6,7461,8],[8032,7,7461,9],[8032,13,7462,13],[8033,8,7463,12,"triggerListeners"],[8033,24,7463,28],[8033,25,7463,29],[8033,26,7463,30],[8034,6,7464,8],[8035,4,7465,4],[8036,4,7466,4,"notifyListeners"],[8036,19,7466,19,"notifyListeners"],[8036,20,7466,20,"key"],[8036,23,7466,23],[8036,25,7466,25,"value"],[8036,30,7466,30],[8036,32,7466,32],[8037,6,7467,8],[8037,10,7467,12],[8037,11,7467,13,"localCache"],[8037,21,7467,23],[8037,22,7467,24,"key"],[8037,25,7467,27],[8037,26,7467,28],[8037,29,7467,31,"value"],[8037,34,7467,36],[8038,6,7468,8],[8038,12,7468,14,"listeners"],[8038,21,7468,23],[8038,24,7468,26],[8038,28,7468,30],[8038,29,7468,31,"listeners"],[8038,38,7468,40],[8038,39,7468,41,"key"],[8038,42,7468,44],[8038,43,7468,45],[8039,6,7469,8],[8039,10,7469,12,"listeners"],[8039,19,7469,21],[8039,21,7469,23],[8040,8,7470,12],[8040,13,7470,17],[8040,19,7470,23,"listener"],[8040,27,7470,31],[8040,31,7470,35,"Array"],[8040,36,7470,40],[8040,37,7470,41,"from"],[8040,41,7470,45],[8040,42,7470,46,"listeners"],[8040,51,7470,55],[8040,52,7470,56],[8040,54,7470,58],[8041,10,7471,16,"listener"],[8041,18,7471,24],[8041,19,7471,25,"value"],[8041,24,7471,30],[8041,27,7471,33,"JSON"],[8041,31,7471,37],[8041,32,7471,38,"parse"],[8041,37,7471,43],[8041,38,7471,44,"value"],[8041,43,7471,49],[8041,44,7471,50],[8041,47,7471,53,"value"],[8041,52,7471,58],[8041,53,7471,59],[8042,8,7472,12],[8043,6,7473,8],[8044,4,7474,4],[8045,4,7475,4,"startPolling"],[8045,16,7475,16,"startPolling"],[8045,17,7475,16],[8045,19,7475,19],[8046,6,7476,8],[8046,10,7476,12],[8046,11,7476,13,"stopPolling"],[8046,22,7476,24],[8046,23,7476,25],[8046,24,7476,26],[8047,6,7477,8],[8047,10,7477,12],[8047,11,7477,13,"pollTimer"],[8047,20,7477,22],[8047,23,7477,25,"setInterval"],[8047,34,7477,36],[8047,35,7477,37],[8047,41,7477,43],[8048,8,7478,12],[8048,12,7478,16],[8048,13,7478,17,"forAllChangedKeys"],[8048,30,7478,34],[8048,31,7478,35],[8048,32,7478,36,"key"],[8048,35,7478,39],[8048,37,7478,41,"oldValue"],[8048,45,7478,49],[8048,47,7478,51,"newValue"],[8048,55,7478,59],[8048,60,7478,64],[8049,10,7479,16],[8049,14,7479,20],[8049,15,7479,21,"onStorageEvent"],[8049,29,7479,35],[8049,30,7479,36],[8049,34,7479,40,"StorageEvent"],[8049,46,7479,52],[8049,47,7479,53],[8049,56,7479,62],[8049,58,7479,64],[8050,12,7480,20,"key"],[8050,15,7480,23],[8051,12,7481,20,"oldValue"],[8051,20,7481,28],[8052,12,7482,20,"newValue"],[8053,10,7483,16],[8053,11,7483,17],[8053,12,7483,18],[8053,14,7484,16],[8053,24,7484,27],[8053,28,7484,31],[8053,29,7484,32],[8054,8,7485,12],[8054,9,7485,13],[8054,10,7485,14],[8055,6,7486,8],[8055,7,7486,9],[8055,9,7486,11,"_POLLING_INTERVAL_MS$1"],[8055,31,7486,33],[8055,32,7486,34],[8056,4,7487,4],[8057,4,7488,4,"stopPolling"],[8057,15,7488,15,"stopPolling"],[8057,16,7488,15],[8057,18,7488,18],[8058,6,7489,8],[8058,10,7489,12],[8058,14,7489,16],[8058,15,7489,17,"pollTimer"],[8058,24,7489,26],[8058,26,7489,28],[8059,8,7490,12,"clearInterval"],[8059,21,7490,25],[8059,22,7490,26],[8059,26,7490,30],[8059,27,7490,31,"pollTimer"],[8059,36,7490,40],[8059,37,7490,41],[8060,8,7491,12],[8060,12,7491,16],[8060,13,7491,17,"pollTimer"],[8060,22,7491,26],[8060,25,7491,29],[8060,29,7491,33],[8061,6,7492,8],[8062,4,7493,4],[8063,4,7494,4,"attachListener"],[8063,18,7494,18,"attachListener"],[8063,19,7494,18],[8063,21,7494,21],[8064,6,7495,8,"window"],[8064,12,7495,14],[8064,13,7495,15,"addEventListener"],[8064,29,7495,31],[8064,30,7495,32],[8064,39,7495,41],[8064,41,7495,43],[8064,45,7495,47],[8064,46,7495,48,"boundEventHandler"],[8064,63,7495,65],[8064,64,7495,66],[8065,4,7496,4],[8066,4,7497,4,"detachListener"],[8066,18,7497,18,"detachListener"],[8066,19,7497,18],[8066,21,7497,21],[8067,6,7498,8,"window"],[8067,12,7498,14],[8067,13,7498,15,"removeEventListener"],[8067,32,7498,34],[8067,33,7498,35],[8067,42,7498,44],[8067,44,7498,46],[8067,48,7498,50],[8067,49,7498,51,"boundEventHandler"],[8067,66,7498,68],[8067,67,7498,69],[8068,4,7499,4],[8069,4,7500,4,"_addListener"],[8069,16,7500,16,"_addListener"],[8069,17,7500,17,"key"],[8069,20,7500,20],[8069,22,7500,22,"listener"],[8069,30,7500,30],[8069,32,7500,32],[8070,6,7501,8],[8070,10,7501,12,"Object"],[8070,16,7501,18],[8070,17,7501,19,"keys"],[8070,21,7501,23],[8070,22,7501,24],[8070,26,7501,28],[8070,27,7501,29,"listeners"],[8070,36,7501,38],[8070,37,7501,39],[8070,38,7501,40,"length"],[8070,44,7501,46],[8070,49,7501,51],[8070,50,7501,52],[8070,52,7501,54],[8071,8,7502,12],[8072,8,7503,12],[8073,8,7504,12],[8074,8,7505,12],[8075,8,7506,12],[8075,12,7506,16],[8075,16,7506,20],[8075,17,7506,21,"fallbackToPolling"],[8075,34,7506,38],[8075,36,7506,40],[8076,10,7507,16],[8076,14,7507,20],[8076,15,7507,21,"startPolling"],[8076,27,7507,33],[8076,28,7507,34],[8076,29,7507,35],[8077,8,7508,12],[8077,9,7508,13],[8077,15,7509,17],[8078,10,7510,16],[8078,14,7510,20],[8078,15,7510,21,"attachListener"],[8078,29,7510,35],[8078,30,7510,36],[8078,31,7510,37],[8079,8,7511,12],[8080,6,7512,8],[8081,6,7513,8],[8081,10,7513,12],[8081,11,7513,13],[8081,15,7513,17],[8081,16,7513,18,"listeners"],[8081,25,7513,27],[8081,26,7513,28,"key"],[8081,29,7513,31],[8081,30,7513,32],[8081,32,7513,34],[8082,8,7514,12],[8082,12,7514,16],[8082,13,7514,17,"listeners"],[8082,22,7514,26],[8082,23,7514,27,"key"],[8082,26,7514,30],[8082,27,7514,31],[8082,30,7514,34],[8082,34,7514,38,"Set"],[8082,37,7514,41],[8082,38,7514,42],[8082,39,7514,43],[8083,8,7515,12],[8084,8,7516,12],[8084,12,7516,16],[8084,13,7516,17,"localCache"],[8084,23,7516,27],[8084,24,7516,28,"key"],[8084,27,7516,31],[8084,28,7516,32],[8084,31,7516,35],[8084,35,7516,39],[8084,36,7516,40,"storage"],[8084,43,7516,47],[8084,44,7516,48,"getItem"],[8084,51,7516,55],[8084,52,7516,56,"key"],[8084,55,7516,59],[8084,56,7516,60],[8085,6,7517,8],[8086,6,7518,8],[8086,10,7518,12],[8086,11,7518,13,"listeners"],[8086,20,7518,22],[8086,21,7518,23,"key"],[8086,24,7518,26],[8086,25,7518,27],[8086,26,7518,28,"add"],[8086,29,7518,31],[8086,30,7518,32,"listener"],[8086,38,7518,40],[8086,39,7518,41],[8087,4,7519,4],[8088,4,7520,4,"_removeListener"],[8088,19,7520,19,"_removeListener"],[8088,20,7520,20,"key"],[8088,23,7520,23],[8088,25,7520,25,"listener"],[8088,33,7520,33],[8088,35,7520,35],[8089,6,7521,8],[8089,10,7521,12],[8089,14,7521,16],[8089,15,7521,17,"listeners"],[8089,24,7521,26],[8089,25,7521,27,"key"],[8089,28,7521,30],[8089,29,7521,31],[8089,31,7521,33],[8090,8,7522,12],[8090,12,7522,16],[8090,13,7522,17,"listeners"],[8090,22,7522,26],[8090,23,7522,27,"key"],[8090,26,7522,30],[8090,27,7522,31],[8090,28,7522,32,"delete"],[8090,34,7522,38],[8090,35,7522,39,"listener"],[8090,43,7522,47],[8090,44,7522,48],[8091,8,7523,12],[8091,12,7523,16],[8091,16,7523,20],[8091,17,7523,21,"listeners"],[8091,26,7523,30],[8091,27,7523,31,"key"],[8091,30,7523,34],[8091,31,7523,35],[8091,32,7523,36,"size"],[8091,36,7523,40],[8091,41,7523,45],[8091,42,7523,46],[8091,44,7523,48],[8092,10,7524,16],[8092,17,7524,23],[8092,21,7524,27],[8092,22,7524,28,"listeners"],[8092,31,7524,37],[8092,32,7524,38,"key"],[8092,35,7524,41],[8092,36,7524,42],[8093,8,7525,12],[8094,6,7526,8],[8095,6,7527,8],[8095,10,7527,12,"Object"],[8095,16,7527,18],[8095,17,7527,19,"keys"],[8095,21,7527,23],[8095,22,7527,24],[8095,26,7527,28],[8095,27,7527,29,"listeners"],[8095,36,7527,38],[8095,37,7527,39],[8095,38,7527,40,"length"],[8095,44,7527,46],[8095,49,7527,51],[8095,50,7527,52],[8095,52,7527,54],[8096,8,7528,12],[8096,12,7528,16],[8096,13,7528,17,"detachListener"],[8096,27,7528,31],[8096,28,7528,32],[8096,29,7528,33],[8097,8,7529,12],[8097,12,7529,16],[8097,13,7529,17,"stopPolling"],[8097,24,7529,28],[8097,25,7529,29],[8097,26,7529,30],[8098,6,7530,8],[8099,4,7531,4],[8100,4,7532,4],[8101,4,7533,4],[8101,10,7533,10,"_set"],[8101,14,7533,14,"_set"],[8101,15,7533,15,"key"],[8101,18,7533,18],[8101,20,7533,20,"value"],[8101,25,7533,25],[8101,27,7533,27],[8102,6,7534,8],[8102,12,7534,14],[8102,17,7534,19],[8102,18,7534,20,"_set"],[8102,22,7534,24],[8102,23,7534,25,"key"],[8102,26,7534,28],[8102,28,7534,30,"value"],[8102,33,7534,35],[8102,34,7534,36],[8103,6,7535,8],[8103,10,7535,12],[8103,11,7535,13,"localCache"],[8103,21,7535,23],[8103,22,7535,24,"key"],[8103,25,7535,27],[8103,26,7535,28],[8103,29,7535,31,"JSON"],[8103,33,7535,35],[8103,34,7535,36,"stringify"],[8103,43,7535,45],[8103,44,7535,46,"value"],[8103,49,7535,51],[8103,50,7535,52],[8104,4,7536,4],[8105,4,7537,4],[8105,10,7537,10,"_get"],[8105,14,7537,14,"_get"],[8105,15,7537,15,"key"],[8105,18,7537,18],[8105,20,7537,20],[8106,6,7538,8],[8106,12,7538,14,"value"],[8106,17,7538,19],[8106,20,7538,22],[8106,26,7538,28],[8106,31,7538,33],[8106,32,7538,34,"_get"],[8106,36,7538,38],[8106,37,7538,39,"key"],[8106,40,7538,42],[8106,41,7538,43],[8107,6,7539,8],[8107,10,7539,12],[8107,11,7539,13,"localCache"],[8107,21,7539,23],[8107,22,7539,24,"key"],[8107,25,7539,27],[8107,26,7539,28],[8107,29,7539,31,"JSON"],[8107,33,7539,35],[8107,34,7539,36,"stringify"],[8107,43,7539,45],[8107,44,7539,46,"value"],[8107,49,7539,51],[8107,50,7539,52],[8108,6,7540,8],[8108,13,7540,15,"value"],[8108,18,7540,20],[8109,4,7541,4],[8110,4,7542,4],[8110,10,7542,10,"_remove"],[8110,17,7542,17,"_remove"],[8110,18,7542,18,"key"],[8110,21,7542,21],[8110,23,7542,23],[8111,6,7543,8],[8111,12,7543,14],[8111,17,7543,19],[8111,18,7543,20,"_remove"],[8111,25,7543,27],[8111,26,7543,28,"key"],[8111,29,7543,31],[8111,30,7543,32],[8112,6,7544,8],[8112,13,7544,15],[8112,17,7544,19],[8112,18,7544,20,"localCache"],[8112,28,7544,30],[8112,29,7544,31,"key"],[8112,32,7544,34],[8112,33,7544,35],[8113,4,7545,4],[8114,2,7546,0],[8115,2,7547,0,"BrowserLocalPersistence"],[8115,25,7547,23],[8115,26,7547,24,"type"],[8115,30,7547,28],[8115,33,7547,31],[8115,40,7547,38],[8116,2,7548,0],[8117,0,7549,0],[8118,0,7550,0],[8119,0,7551,0],[8120,0,7552,0],[8121,0,7553,0],[8122,2,7554,0],[8122,8,7554,6,"browserLocalPersistence"],[8122,31,7554,29],[8122,34,7554,32,"BrowserLocalPersistence"],[8122,57,7554,55],[8124,2,7556,0],[8125,0,7557,0],[8126,0,7558,0],[8127,0,7559,0],[8128,0,7560,0],[8129,0,7561,0],[8130,0,7562,0],[8131,0,7563,0],[8132,0,7564,0],[8133,0,7565,0],[8134,0,7566,0],[8135,0,7567,0],[8136,0,7568,0],[8137,0,7569,0],[8138,0,7570,0],[8139,0,7571,0],[8140,2,7572,0],[8140,8,7572,6,"POLLING_INTERVAL_MS"],[8140,27,7572,25],[8140,30,7572,28],[8140,34,7572,32],[8141,2,7573,0],[8142,2,7574,0],[8142,11,7574,9,"getDocumentCookie"],[8142,28,7574,26,"getDocumentCookie"],[8142,29,7574,27,"name"],[8142,33,7574,31],[8142,35,7574,33],[8143,4,7575,4],[8143,10,7575,10,"escapedName"],[8143,21,7575,21],[8143,24,7575,24,"name"],[8143,28,7575,28],[8143,29,7575,29,"replace"],[8143,36,7575,36],[8143,37,7575,37],[8143,58,7575,58],[8143,60,7575,60],[8143,66,7575,66],[8143,67,7575,67],[8144,4,7576,4],[8144,10,7576,10,"matcher"],[8144,17,7576,17],[8144,20,7576,20,"RegExp"],[8144,26,7576,26],[8144,27,7576,27],[8144,30,7576,30,"escapedName"],[8144,41,7576,41],[8144,51,7576,51],[8144,52,7576,52],[8145,4,7577,4],[8145,11,7577,11,"document"],[8145,19,7577,19],[8145,20,7577,20,"cookie"],[8145,26,7577,26],[8145,27,7577,27,"match"],[8145,32,7577,32],[8145,33,7577,33,"matcher"],[8145,40,7577,40],[8145,41,7577,41],[8145,44,7577,44],[8145,45,7577,45],[8145,46,7577,46],[8145,50,7577,50],[8145,54,7577,54],[8146,2,7578,0],[8147,2,7579,0],[8148,2,7580,0],[8148,11,7580,9,"getCookieName"],[8148,24,7580,22,"getCookieName"],[8148,25,7580,23,"key"],[8148,28,7580,26],[8148,30,7580,28],[8149,4,7581,4],[8150,4,7582,4],[8151,4,7583,4],[8152,4,7584,4],[8152,10,7584,10,"isDevMode"],[8152,19,7584,19],[8152,22,7584,22,"window"],[8152,28,7584,28],[8152,29,7584,29,"location"],[8152,37,7584,37],[8152,38,7584,38,"protocol"],[8152,46,7584,46],[8152,51,7584,51],[8152,58,7584,58],[8153,4,7585,4],[8153,11,7585,11],[8153,14,7585,14,"isDevMode"],[8153,23,7585,23],[8153,26,7585,26],[8153,34,7585,34],[8153,37,7585,37],[8153,46,7585,46],[8153,58,7585,58,"key"],[8153,61,7585,61],[8153,62,7585,62,"split"],[8153,67,7585,67],[8153,68,7585,68],[8153,71,7585,71],[8153,72,7585,72],[8153,73,7585,73],[8153,74,7585,74],[8153,75,7585,75],[8153,77,7585,77],[8154,2,7586,0],[8155,2,7587,0],[8155,8,7587,6,"CookiePersistence"],[8155,25,7587,23],[8155,26,7587,24],[8156,4,7588,4,"constructor"],[8156,15,7588,15,"constructor"],[8156,16,7588,15],[8156,18,7588,18],[8157,6,7589,8],[8157,10,7589,12],[8157,11,7589,13,"type"],[8157,15,7589,17],[8157,18,7589,20],[8157,26,7589,28],[8157,27,7589,29],[8158,6,7590,8],[8158,10,7590,12],[8158,11,7590,13,"listenerUnsubscribes"],[8158,31,7590,33],[8158,34,7590,36],[8158,38,7590,40,"Map"],[8158,41,7590,43],[8158,42,7590,44],[8158,43,7590,45],[8159,4,7591,4],[8160,4,7592,4],[8161,4,7593,4,"_getFinalTarget"],[8161,19,7593,19,"_getFinalTarget"],[8161,20,7593,20,"originalUrl"],[8161,31,7593,31],[8161,33,7593,33],[8162,6,7594,8],[8162,10,7594,12],[8162,17,7594,19,"window"],[8162,23,7594,25],[8162,28,7594,30,"undefined"],[8162,37,7594,39],[8162,39,7594,41],[8163,8,7595,12],[8163,15,7595,19,"originalUrl"],[8163,26,7595,30],[8164,6,7596,8],[8165,6,7597,8],[8165,12,7597,14,"url"],[8165,15,7597,17],[8165,18,7597,20],[8165,22,7597,24,"URL"],[8165,25,7597,27],[8165,26,7597,28],[8165,29,7597,31,"window"],[8165,35,7597,37],[8165,36,7597,38,"location"],[8165,44,7597,46],[8165,45,7597,47,"origin"],[8165,51,7597,53],[8165,65,7597,67],[8165,66,7597,68],[8166,6,7598,8,"url"],[8166,9,7598,11],[8166,10,7598,12,"searchParams"],[8166,22,7598,24],[8166,23,7598,25,"set"],[8166,26,7598,28],[8166,27,7598,29],[8166,40,7598,42],[8166,42,7598,44,"originalUrl"],[8166,53,7598,55],[8166,54,7598,56],[8167,6,7599,8],[8167,13,7599,15,"url"],[8167,16,7599,18],[8168,4,7600,4],[8169,4,7601,4],[8170,4,7602,4],[8171,4,7603,4],[8172,4,7604,4],[8172,10,7604,10,"_isAvailable"],[8172,22,7604,22,"_isAvailable"],[8172,23,7604,22],[8172,25,7604,25],[8173,6,7605,8],[8173,10,7605,12],[8173,17,7605,19,"isSecureContext"],[8173,32,7605,34],[8173,37,7605,39],[8173,46,7605,48],[8173,50,7605,52],[8173,51,7605,53,"isSecureContext"],[8173,66,7605,68],[8173,68,7605,70],[8174,8,7606,12],[8174,15,7606,19],[8174,20,7606,24],[8175,6,7607,8],[8176,6,7608,8],[8176,10,7608,12],[8176,17,7608,19,"navigator"],[8176,26,7608,28],[8176,31,7608,33],[8176,42,7608,44],[8176,46,7608,48],[8176,53,7608,55,"document"],[8176,61,7608,63],[8176,66,7608,68],[8176,77,7608,79],[8176,79,7608,81],[8177,8,7609,12],[8177,15,7609,19],[8177,20,7609,24],[8178,6,7610,8],[8179,6,7611,8],[8179,13,7611,15,"navigator"],[8179,22,7611,24],[8179,23,7611,25,"cookieEnabled"],[8179,36,7611,38],[8179,40,7611,42],[8179,44,7611,46],[8180,4,7612,4],[8181,4,7613,4],[8182,4,7614,4],[8182,10,7614,10,"_set"],[8182,14,7614,14,"_set"],[8182,15,7614,15,"_key"],[8182,19,7614,19],[8182,21,7614,21,"_value"],[8182,27,7614,27],[8182,29,7614,29],[8183,6,7615,8],[8184,4,7616,4],[8185,4,7617,4],[8186,4,7618,4],[8186,10,7618,10,"_get"],[8186,14,7618,14,"_get"],[8186,15,7618,15,"key"],[8186,18,7618,18],[8186,20,7618,20],[8187,6,7619,8],[8187,10,7619,12],[8187,11,7619,13],[8187,15,7619,17],[8187,16,7619,18,"_isAvailable"],[8187,28,7619,30],[8187,29,7619,31],[8187,30,7619,32],[8187,32,7619,34],[8188,8,7620,12],[8188,15,7620,19],[8188,19,7620,23],[8189,6,7621,8],[8190,6,7622,8],[8190,12,7622,14,"name"],[8190,16,7622,18],[8190,19,7622,21,"getCookieName"],[8190,32,7622,34],[8190,33,7622,35,"key"],[8190,36,7622,38],[8190,37,7622,39],[8191,6,7623,8],[8191,10,7623,12,"window"],[8191,16,7623,18],[8191,17,7623,19,"cookieStore"],[8191,28,7623,30],[8191,30,7623,32],[8192,8,7624,12],[8192,14,7624,18,"cookie"],[8192,20,7624,24],[8192,23,7624,27],[8192,29,7624,33,"window"],[8192,35,7624,39],[8192,36,7624,40,"cookieStore"],[8192,47,7624,51],[8192,48,7624,52,"get"],[8192,51,7624,55],[8192,52,7624,56,"name"],[8192,56,7624,60],[8192,57,7624,61],[8193,8,7625,12],[8193,15,7625,19,"cookie"],[8193,21,7625,25],[8193,23,7625,27,"value"],[8193,28,7625,32],[8194,6,7626,8],[8195,6,7627,8],[8195,13,7627,15,"getDocumentCookie"],[8195,30,7627,32],[8195,31,7627,33,"name"],[8195,35,7627,37],[8195,36,7627,38],[8196,4,7628,4],[8197,4,7629,4],[8198,4,7630,4],[8198,10,7630,10,"_remove"],[8198,17,7630,17,"_remove"],[8198,18,7630,18,"key"],[8198,21,7630,21],[8198,23,7630,23],[8199,6,7631,8],[8199,10,7631,12],[8199,11,7631,13],[8199,15,7631,17],[8199,16,7631,18,"_isAvailable"],[8199,28,7631,30],[8199,29,7631,31],[8199,30,7631,32],[8199,32,7631,34],[8200,8,7632,12],[8201,6,7633,8],[8202,6,7634,8],[8203,6,7635,8],[8204,6,7636,8],[8205,6,7637,8],[8205,12,7637,14,"existingValue"],[8205,25,7637,27],[8205,28,7637,30],[8205,34,7637,36],[8205,38,7637,40],[8205,39,7637,41,"_get"],[8205,43,7637,45],[8205,44,7637,46,"key"],[8205,47,7637,49],[8205,48,7637,50],[8206,6,7638,8],[8206,10,7638,12],[8206,11,7638,13,"existingValue"],[8206,24,7638,26],[8206,26,7638,28],[8207,8,7639,12],[8208,6,7640,8],[8209,6,7641,8],[8209,12,7641,14,"name"],[8209,16,7641,18],[8209,19,7641,21,"getCookieName"],[8209,32,7641,34],[8209,33,7641,35,"key"],[8209,36,7641,38],[8209,37,7641,39],[8210,6,7642,8,"document"],[8210,14,7642,16],[8210,15,7642,17,"cookie"],[8210,21,7642,23],[8210,24,7642,26],[8210,27,7642,29,"name"],[8210,31,7642,33],[8210,107,7642,109],[8211,6,7643,8],[8211,12,7643,14,"fetch"],[8211,17,7643,19],[8211,18,7643,20],[8211,32,7643,34],[8211,34,7643,36],[8212,8,7643,38,"method"],[8212,14,7643,44],[8212,16,7643,46],[8213,6,7643,55],[8213,7,7643,56],[8213,8,7643,57],[8213,9,7643,58,"catch"],[8213,14,7643,63],[8213,15,7643,64],[8213,21,7643,70,"undefined"],[8213,30,7643,79],[8213,31,7643,80],[8214,4,7644,4],[8215,4,7645,4],[8216,4,7646,4,"_addListener"],[8216,16,7646,16,"_addListener"],[8216,17,7646,17,"key"],[8216,20,7646,20],[8216,22,7646,22,"listener"],[8216,30,7646,30],[8216,32,7646,32],[8217,6,7647,8],[8217,10,7647,12],[8217,11,7647,13],[8217,15,7647,17],[8217,16,7647,18,"_isAvailable"],[8217,28,7647,30],[8217,29,7647,31],[8217,30,7647,32],[8217,32,7647,34],[8218,8,7648,12],[8219,6,7649,8],[8220,6,7650,8],[8220,12,7650,14,"name"],[8220,16,7650,18],[8220,19,7650,21,"getCookieName"],[8220,32,7650,34],[8220,33,7650,35,"key"],[8220,36,7650,38],[8220,37,7650,39],[8221,6,7651,8],[8221,10,7651,12,"window"],[8221,16,7651,18],[8221,17,7651,19,"cookieStore"],[8221,28,7651,30],[8221,30,7651,32],[8222,8,7652,12],[8222,14,7652,18,"cb"],[8222,16,7652,20],[8222,19,7652,25,"event"],[8222,24,7652,30],[8222,28,7652,35],[8223,10,7653,16],[8223,16,7653,22,"changedCookie"],[8223,29,7653,35],[8223,32,7653,38,"event"],[8223,37,7653,43],[8223,38,7653,44,"changed"],[8223,45,7653,51],[8223,46,7653,52,"find"],[8223,50,7653,56],[8223,51,7653,57,"change"],[8223,57,7653,63],[8223,61,7653,67,"change"],[8223,67,7653,73],[8223,68,7653,74,"name"],[8223,72,7653,78],[8223,77,7653,83,"name"],[8223,81,7653,87],[8223,82,7653,88],[8224,10,7654,16],[8224,14,7654,20,"changedCookie"],[8224,27,7654,33],[8224,29,7654,35],[8225,12,7655,20,"listener"],[8225,20,7655,28],[8225,21,7655,29,"changedCookie"],[8225,34,7655,42],[8225,35,7655,43,"value"],[8225,40,7655,48],[8225,41,7655,49],[8226,10,7656,16],[8227,10,7657,16],[8227,16,7657,22,"deletedCookie"],[8227,29,7657,35],[8227,32,7657,38,"event"],[8227,37,7657,43],[8227,38,7657,44,"deleted"],[8227,45,7657,51],[8227,46,7657,52,"find"],[8227,50,7657,56],[8227,51,7657,57,"change"],[8227,57,7657,63],[8227,61,7657,67,"change"],[8227,67,7657,73],[8227,68,7657,74,"name"],[8227,72,7657,78],[8227,77,7657,83,"name"],[8227,81,7657,87],[8227,82,7657,88],[8228,10,7658,16],[8228,14,7658,20,"deletedCookie"],[8228,27,7658,33],[8228,29,7658,35],[8229,12,7659,20,"listener"],[8229,20,7659,28],[8229,21,7659,29],[8229,25,7659,33],[8229,26,7659,34],[8230,10,7660,16],[8231,8,7661,12],[8231,9,7661,14],[8232,8,7662,12],[8232,14,7662,18,"unsubscribe"],[8232,25,7662,29],[8232,28,7662,32,"unsubscribe"],[8232,29,7662,32],[8232,34,7662,38,"window"],[8232,40,7662,44],[8232,41,7662,45,"cookieStore"],[8232,52,7662,56],[8232,53,7662,57,"removeEventListener"],[8232,72,7662,76],[8232,73,7662,77],[8232,81,7662,85],[8232,83,7662,87,"cb"],[8232,85,7662,89],[8232,86,7662,90],[8233,8,7663,12],[8233,12,7663,16],[8233,13,7663,17,"listenerUnsubscribes"],[8233,33,7663,37],[8233,34,7663,38,"set"],[8233,37,7663,41],[8233,38,7663,42,"listener"],[8233,46,7663,50],[8233,48,7663,52,"unsubscribe"],[8233,59,7663,63],[8233,60,7663,64],[8234,8,7664,12],[8234,15,7664,19,"window"],[8234,21,7664,25],[8234,22,7664,26,"cookieStore"],[8234,33,7664,37],[8234,34,7664,38,"addEventListener"],[8234,50,7664,54],[8234,51,7664,55],[8234,59,7664,63],[8234,61,7664,65,"cb"],[8234,63,7664,67],[8234,64,7664,68],[8235,6,7665,8],[8236,6,7666,8],[8236,10,7666,12,"lastValue"],[8236,19,7666,21],[8236,22,7666,24,"getDocumentCookie"],[8236,39,7666,41],[8236,40,7666,42,"name"],[8236,44,7666,46],[8236,45,7666,47],[8237,6,7667,8],[8237,12,7667,14,"interval"],[8237,20,7667,22],[8237,23,7667,25,"setInterval"],[8237,34,7667,36],[8237,35,7667,37],[8237,41,7667,43],[8238,8,7668,12],[8238,14,7668,18,"currentValue"],[8238,26,7668,30],[8238,29,7668,33,"getDocumentCookie"],[8238,46,7668,50],[8238,47,7668,51,"name"],[8238,51,7668,55],[8238,52,7668,56],[8239,8,7669,12],[8239,12,7669,16,"currentValue"],[8239,24,7669,28],[8239,29,7669,33,"lastValue"],[8239,38,7669,42],[8239,40,7669,44],[8240,10,7670,16,"listener"],[8240,18,7670,24],[8240,19,7670,25,"currentValue"],[8240,31,7670,37],[8240,32,7670,38],[8241,10,7671,16,"lastValue"],[8241,19,7671,25],[8241,22,7671,28,"currentValue"],[8241,34,7671,40],[8242,8,7672,12],[8243,6,7673,8],[8243,7,7673,9],[8243,9,7673,11,"POLLING_INTERVAL_MS"],[8243,28,7673,30],[8243,29,7673,31],[8244,6,7674,8],[8244,12,7674,14,"unsubscribe"],[8244,23,7674,25],[8244,26,7674,28,"unsubscribe"],[8244,27,7674,28],[8244,32,7674,34,"clearInterval"],[8244,45,7674,47],[8244,46,7674,48,"interval"],[8244,54,7674,56],[8244,55,7674,57],[8245,6,7675,8],[8245,10,7675,12],[8245,11,7675,13,"listenerUnsubscribes"],[8245,31,7675,33],[8245,32,7675,34,"set"],[8245,35,7675,37],[8245,36,7675,38,"listener"],[8245,44,7675,46],[8245,46,7675,48,"unsubscribe"],[8245,57,7675,59],[8245,58,7675,60],[8246,4,7676,4],[8247,4,7677,4,"_removeListener"],[8247,19,7677,19,"_removeListener"],[8247,20,7677,20,"_key"],[8247,24,7677,24],[8247,26,7677,26,"listener"],[8247,34,7677,34],[8247,36,7677,36],[8248,6,7678,8],[8248,12,7678,14,"unsubscribe"],[8248,23,7678,25],[8248,26,7678,28],[8248,30,7678,32],[8248,31,7678,33,"listenerUnsubscribes"],[8248,51,7678,53],[8248,52,7678,54,"get"],[8248,55,7678,57],[8248,56,7678,58,"listener"],[8248,64,7678,66],[8248,65,7678,67],[8249,6,7679,8],[8249,10,7679,12],[8249,11,7679,13,"unsubscribe"],[8249,22,7679,24],[8249,24,7679,26],[8250,8,7680,12],[8251,6,7681,8],[8252,6,7682,8,"unsubscribe"],[8252,17,7682,19],[8252,18,7682,20],[8252,19,7682,21],[8253,6,7683,8],[8253,10,7683,12],[8253,11,7683,13,"listenerUnsubscribes"],[8253,31,7683,33],[8253,32,7683,34,"delete"],[8253,38,7683,40],[8253,39,7683,41,"listener"],[8253,47,7683,49],[8253,48,7683,50],[8254,4,7684,4],[8255,2,7685,0],[8256,2,7686,0,"CookiePersistence"],[8256,19,7686,17],[8256,20,7686,18,"type"],[8256,24,7686,22],[8256,27,7686,25],[8256,35,7686,33],[8257,2,7687,0],[8258,0,7688,0],[8259,0,7689,0],[8260,0,7690,0],[8261,0,7691,0],[8262,0,7692,0],[8263,0,7693,0],[8264,0,7694,0],[8265,0,7695,0],[8266,2,7696,0],[8266,8,7696,6,"browserCookiePersistence"],[8266,32,7696,30],[8266,35,7696,33,"CookiePersistence"],[8266,52,7696,50],[8268,2,7698,0],[8269,0,7699,0],[8270,0,7700,0],[8271,0,7701,0],[8272,0,7702,0],[8273,0,7703,0],[8274,0,7704,0],[8275,0,7705,0],[8276,0,7706,0],[8277,0,7707,0],[8278,0,7708,0],[8279,0,7709,0],[8280,0,7710,0],[8281,0,7711,0],[8282,0,7712,0],[8283,0,7713,0],[8284,2,7714,0],[8284,8,7714,6,"BrowserSessionPersistence"],[8284,33,7714,31],[8284,42,7714,40,"BrowserPersistenceClass"],[8284,65,7714,63],[8284,66,7714,64],[8285,4,7715,4,"constructor"],[8285,15,7715,15,"constructor"],[8285,16,7715,15],[8285,18,7715,18],[8286,6,7716,8],[8286,11,7716,13],[8286,12,7716,14],[8286,18,7716,20,"window"],[8286,24,7716,26],[8286,25,7716,27,"sessionStorage"],[8286,39,7716,41],[8286,41,7716,43],[8286,50,7716,52],[8286,51,7716,53],[8286,80,7716,82],[8286,81,7716,83],[8287,4,7717,4],[8288,4,7718,4,"_addListener"],[8288,16,7718,16,"_addListener"],[8288,17,7718,17,"_key"],[8288,21,7718,21],[8288,23,7718,23,"_listener"],[8288,32,7718,32],[8288,34,7718,34],[8289,6,7719,8],[8290,6,7720,8],[8291,4,7721,4],[8292,4,7722,4,"_removeListener"],[8292,19,7722,19,"_removeListener"],[8292,20,7722,20,"_key"],[8292,24,7722,24],[8292,26,7722,26,"_listener"],[8292,35,7722,35],[8292,37,7722,37],[8293,6,7723,8],[8294,6,7724,8],[8295,4,7725,4],[8296,2,7726,0],[8297,2,7727,0,"BrowserSessionPersistence"],[8297,27,7727,25],[8297,28,7727,26,"type"],[8297,32,7727,30],[8297,35,7727,33],[8297,44,7727,42],[8298,2,7728,0],[8299,0,7729,0],[8300,0,7730,0],[8301,0,7731,0],[8302,0,7732,0],[8303,0,7733,0],[8304,2,7734,0],[8304,8,7734,6,"browserSessionPersistence"],[8304,33,7734,31],[8304,36,7734,34,"BrowserSessionPersistence"],[8304,61,7734,59],[8306,2,7736,0],[8307,0,7737,0],[8308,0,7738,0],[8309,0,7739,0],[8310,0,7740,0],[8311,0,7741,0],[8312,0,7742,0],[8313,0,7743,0],[8314,0,7744,0],[8315,0,7745,0],[8316,0,7746,0],[8317,0,7747,0],[8318,0,7748,0],[8319,0,7749,0],[8320,0,7750,0],[8321,0,7751,0],[8322,2,7752,0],[8323,0,7753,0],[8324,0,7754,0],[8325,0,7755,0],[8326,0,7756,0],[8327,2,7757,0],[8327,11,7757,9,"_allSettled"],[8327,22,7757,20,"_allSettled"],[8327,23,7757,21,"promises"],[8327,31,7757,29],[8327,33,7757,31],[8328,4,7758,4],[8328,11,7758,11,"Promise"],[8328,18,7758,18],[8328,19,7758,19,"all"],[8328,22,7758,22],[8328,23,7758,23,"promises"],[8328,31,7758,31],[8328,32,7758,32,"map"],[8328,35,7758,35],[8328,36,7758,36],[8328,42,7758,43,"promise"],[8328,49,7758,50],[8328,53,7758,55],[8329,6,7759,8],[8329,10,7759,12],[8330,8,7760,12],[8330,14,7760,18,"value"],[8330,19,7760,23],[8330,22,7760,26],[8330,28,7760,32,"promise"],[8330,35,7760,39],[8331,8,7761,12],[8331,15,7761,19],[8332,10,7762,16,"fulfilled"],[8332,19,7762,25],[8332,21,7762,27],[8332,25,7762,31],[8333,10,7763,16,"value"],[8334,8,7764,12],[8334,9,7764,13],[8335,6,7765,8],[8335,7,7765,9],[8335,8,7766,8],[8335,15,7766,15,"reason"],[8335,21,7766,21],[8335,23,7766,23],[8336,8,7767,12],[8336,15,7767,19],[8337,10,7768,16,"fulfilled"],[8337,19,7768,25],[8337,21,7768,27],[8337,26,7768,32],[8338,10,7769,16,"reason"],[8339,8,7770,12],[8339,9,7770,13],[8340,6,7771,8],[8341,4,7772,4],[8341,5,7772,5],[8341,6,7772,6],[8341,7,7772,7],[8342,2,7773,0],[8344,2,7775,0],[8345,0,7776,0],[8346,0,7777,0],[8347,0,7778,0],[8348,0,7779,0],[8349,0,7780,0],[8350,0,7781,0],[8351,0,7782,0],[8352,0,7783,0],[8353,0,7784,0],[8354,0,7785,0],[8355,0,7786,0],[8356,0,7787,0],[8357,0,7788,0],[8358,0,7789,0],[8359,0,7790,0],[8360,2,7791,0],[8361,0,7792,0],[8362,0,7793,0],[8363,0,7794,0],[8364,2,7795,0],[8364,8,7795,6,"Receiver"],[8364,16,7795,14],[8364,17,7795,15],[8365,4,7796,4,"constructor"],[8365,15,7796,15,"constructor"],[8365,16,7796,16,"eventTarget"],[8365,27,7796,27],[8365,29,7796,29],[8366,6,7797,8],[8366,10,7797,12],[8366,11,7797,13,"eventTarget"],[8366,22,7797,24],[8366,25,7797,27,"eventTarget"],[8366,36,7797,38],[8367,6,7798,8],[8367,10,7798,12],[8367,11,7798,13,"handlersMap"],[8367,22,7798,24],[8367,25,7798,27],[8367,26,7798,28],[8367,27,7798,29],[8368,6,7799,8],[8368,10,7799,12],[8368,11,7799,13,"boundEventHandler"],[8368,28,7799,30],[8368,31,7799,33],[8368,35,7799,37],[8368,36,7799,38,"handleEvent"],[8368,47,7799,49],[8368,48,7799,50,"bind"],[8368,52,7799,54],[8368,53,7799,55],[8368,57,7799,59],[8368,58,7799,60],[8369,4,7800,4],[8370,4,7801,4],[8371,0,7802,0],[8372,0,7803,0],[8373,0,7804,0],[8374,0,7805,0],[8375,0,7806,0],[8376,4,7807,4],[8376,11,7807,11,"_getInstance"],[8376,23,7807,23,"_getInstance"],[8376,24,7807,24,"eventTarget"],[8376,35,7807,35],[8376,37,7807,37],[8377,6,7808,8],[8378,6,7809,8],[8379,6,7810,8],[8380,6,7811,8],[8380,12,7811,14,"existingInstance"],[8380,28,7811,30],[8380,31,7811,33],[8380,35,7811,37],[8380,36,7811,38,"receivers"],[8380,45,7811,47],[8380,46,7811,48,"find"],[8380,50,7811,52],[8380,51,7811,53,"receiver"],[8380,59,7811,61],[8380,63,7811,65,"receiver"],[8380,71,7811,73],[8380,72,7811,74,"isListeningto"],[8380,85,7811,87],[8380,86,7811,88,"eventTarget"],[8380,97,7811,99],[8380,98,7811,100],[8380,99,7811,101],[8381,6,7812,8],[8381,10,7812,12,"existingInstance"],[8381,26,7812,28],[8381,28,7812,30],[8382,8,7813,12],[8382,15,7813,19,"existingInstance"],[8382,31,7813,35],[8383,6,7814,8],[8384,6,7815,8],[8384,12,7815,14,"newInstance"],[8384,23,7815,25],[8384,26,7815,28],[8384,30,7815,32,"Receiver"],[8384,38,7815,40],[8384,39,7815,41,"eventTarget"],[8384,50,7815,52],[8384,51,7815,53],[8385,6,7816,8],[8385,10,7816,12],[8385,11,7816,13,"receivers"],[8385,20,7816,22],[8385,21,7816,23,"push"],[8385,25,7816,27],[8385,26,7816,28,"newInstance"],[8385,37,7816,39],[8385,38,7816,40],[8386,6,7817,8],[8386,13,7817,15,"newInstance"],[8386,24,7817,26],[8387,4,7818,4],[8388,4,7819,4,"isListeningto"],[8388,17,7819,17,"isListeningto"],[8388,18,7819,18,"eventTarget"],[8388,29,7819,29],[8388,31,7819,31],[8389,6,7820,8],[8389,13,7820,15],[8389,17,7820,19],[8389,18,7820,20,"eventTarget"],[8389,29,7820,31],[8389,34,7820,36,"eventTarget"],[8389,45,7820,47],[8390,4,7821,4],[8391,4,7822,4],[8392,0,7823,0],[8393,0,7824,0],[8394,0,7825,0],[8395,0,7826,0],[8396,0,7827,0],[8397,0,7828,0],[8398,0,7829,0],[8399,0,7830,0],[8400,0,7831,0],[8401,4,7832,4],[8401,10,7832,10,"handleEvent"],[8401,21,7832,21,"handleEvent"],[8401,22,7832,22,"event"],[8401,27,7832,27],[8401,29,7832,29],[8402,6,7833,8],[8402,12,7833,14,"messageEvent"],[8402,24,7833,26],[8402,27,7833,29,"event"],[8402,32,7833,34],[8403,6,7834,8],[8403,12,7834,14],[8404,8,7834,16,"eventId"],[8404,15,7834,23],[8405,8,7834,25,"eventType"],[8405,17,7834,34],[8406,8,7834,36,"data"],[8407,6,7834,41],[8407,7,7834,42],[8407,10,7834,45,"messageEvent"],[8407,22,7834,57],[8407,23,7834,58,"data"],[8407,27,7834,62],[8408,6,7835,8],[8408,12,7835,14,"handlers"],[8408,20,7835,22],[8408,23,7835,25],[8408,27,7835,29],[8408,28,7835,30,"handlersMap"],[8408,39,7835,41],[8408,40,7835,42,"eventType"],[8408,49,7835,51],[8408,50,7835,52],[8409,6,7836,8],[8409,10,7836,12],[8409,11,7836,13,"handlers"],[8409,19,7836,21],[8409,21,7836,23,"size"],[8409,25,7836,27],[8409,27,7836,29],[8410,8,7837,12],[8411,6,7838,8],[8412,6,7839,8,"messageEvent"],[8412,18,7839,20],[8412,19,7839,21,"ports"],[8412,24,7839,26],[8412,25,7839,27],[8412,26,7839,28],[8412,27,7839,29],[8412,28,7839,30,"postMessage"],[8412,39,7839,41],[8412,40,7839,42],[8413,8,7840,12,"status"],[8413,14,7840,18],[8413,16,7840,20],[8413,21,7840,25],[8413,22,7840,26],[8414,8,7841,12,"eventId"],[8414,15,7841,19],[8415,8,7842,12,"eventType"],[8416,6,7843,8],[8416,7,7843,9],[8416,8,7843,10],[8417,6,7844,8],[8417,12,7844,14,"promises"],[8417,20,7844,22],[8417,23,7844,25,"Array"],[8417,28,7844,30],[8417,29,7844,31,"from"],[8417,33,7844,35],[8417,34,7844,36,"handlers"],[8417,42,7844,44],[8417,43,7844,45],[8417,44,7844,46,"map"],[8417,47,7844,49],[8417,48,7844,50],[8417,54,7844,57,"handler"],[8417,61,7844,64],[8417,65,7844,69,"handler"],[8417,72,7844,76],[8417,73,7844,77,"messageEvent"],[8417,85,7844,89],[8417,86,7844,90,"origin"],[8417,92,7844,96],[8417,94,7844,98,"data"],[8417,98,7844,102],[8417,99,7844,103],[8417,100,7844,104],[8418,6,7845,8],[8418,12,7845,14,"response"],[8418,20,7845,22],[8418,23,7845,25],[8418,29,7845,31,"_allSettled"],[8418,40,7845,42],[8418,41,7845,43,"promises"],[8418,49,7845,51],[8418,50,7845,52],[8419,6,7846,8,"messageEvent"],[8419,18,7846,20],[8419,19,7846,21,"ports"],[8419,24,7846,26],[8419,25,7846,27],[8419,26,7846,28],[8419,27,7846,29],[8419,28,7846,30,"postMessage"],[8419,39,7846,41],[8419,40,7846,42],[8420,8,7847,12,"status"],[8420,14,7847,18],[8420,16,7847,20],[8420,22,7847,26],[8420,23,7847,27],[8421,8,7848,12,"eventId"],[8421,15,7848,19],[8422,8,7849,12,"eventType"],[8422,17,7849,21],[8423,8,7850,12,"response"],[8424,6,7851,8],[8424,7,7851,9],[8424,8,7851,10],[8425,4,7852,4],[8426,4,7853,4],[8427,0,7854,0],[8428,0,7855,0],[8429,0,7856,0],[8430,0,7857,0],[8431,0,7858,0],[8432,0,7859,0],[8433,4,7860,4,"_subscribe"],[8433,14,7860,14,"_subscribe"],[8433,15,7860,15,"eventType"],[8433,24,7860,24],[8433,26,7860,26,"eventHandler"],[8433,38,7860,38],[8433,40,7860,40],[8434,6,7861,8],[8434,10,7861,12,"Object"],[8434,16,7861,18],[8434,17,7861,19,"keys"],[8434,21,7861,23],[8434,22,7861,24],[8434,26,7861,28],[8434,27,7861,29,"handlersMap"],[8434,38,7861,40],[8434,39,7861,41],[8434,40,7861,42,"length"],[8434,46,7861,48],[8434,51,7861,53],[8434,52,7861,54],[8434,54,7861,56],[8435,8,7862,12],[8435,12,7862,16],[8435,13,7862,17,"eventTarget"],[8435,24,7862,28],[8435,25,7862,29,"addEventListener"],[8435,41,7862,45],[8435,42,7862,46],[8435,51,7862,55],[8435,53,7862,57],[8435,57,7862,61],[8435,58,7862,62,"boundEventHandler"],[8435,75,7862,79],[8435,76,7862,80],[8436,6,7863,8],[8437,6,7864,8],[8437,10,7864,12],[8437,11,7864,13],[8437,15,7864,17],[8437,16,7864,18,"handlersMap"],[8437,27,7864,29],[8437,28,7864,30,"eventType"],[8437,37,7864,39],[8437,38,7864,40],[8437,40,7864,42],[8438,8,7865,12],[8438,12,7865,16],[8438,13,7865,17,"handlersMap"],[8438,24,7865,28],[8438,25,7865,29,"eventType"],[8438,34,7865,38],[8438,35,7865,39],[8438,38,7865,42],[8438,42,7865,46,"Set"],[8438,45,7865,49],[8438,46,7865,50],[8438,47,7865,51],[8439,6,7866,8],[8440,6,7867,8],[8440,10,7867,12],[8440,11,7867,13,"handlersMap"],[8440,22,7867,24],[8440,23,7867,25,"eventType"],[8440,32,7867,34],[8440,33,7867,35],[8440,34,7867,36,"add"],[8440,37,7867,39],[8440,38,7867,40,"eventHandler"],[8440,50,7867,52],[8440,51,7867,53],[8441,4,7868,4],[8442,4,7869,4],[8443,0,7870,0],[8444,0,7871,0],[8445,0,7872,0],[8446,0,7873,0],[8447,0,7874,0],[8448,0,7875,0],[8449,4,7876,4,"_unsubscribe"],[8449,16,7876,16,"_unsubscribe"],[8449,17,7876,17,"eventType"],[8449,26,7876,26],[8449,28,7876,28,"eventHandler"],[8449,40,7876,40],[8449,42,7876,42],[8450,6,7877,8],[8450,10,7877,12],[8450,14,7877,16],[8450,15,7877,17,"handlersMap"],[8450,26,7877,28],[8450,27,7877,29,"eventType"],[8450,36,7877,38],[8450,37,7877,39],[8450,41,7877,43,"eventHandler"],[8450,53,7877,55],[8450,55,7877,57],[8451,8,7878,12],[8451,12,7878,16],[8451,13,7878,17,"handlersMap"],[8451,24,7878,28],[8451,25,7878,29,"eventType"],[8451,34,7878,38],[8451,35,7878,39],[8451,36,7878,40,"delete"],[8451,42,7878,46],[8451,43,7878,47,"eventHandler"],[8451,55,7878,59],[8451,56,7878,60],[8452,6,7879,8],[8453,6,7880,8],[8453,10,7880,12],[8453,11,7880,13,"eventHandler"],[8453,23,7880,25],[8453,27,7880,29],[8453,31,7880,33],[8453,32,7880,34,"handlersMap"],[8453,43,7880,45],[8453,44,7880,46,"eventType"],[8453,53,7880,55],[8453,54,7880,56],[8453,55,7880,57,"size"],[8453,59,7880,61],[8453,64,7880,66],[8453,65,7880,67],[8453,67,7880,69],[8454,8,7881,12],[8454,15,7881,19],[8454,19,7881,23],[8454,20,7881,24,"handlersMap"],[8454,31,7881,35],[8454,32,7881,36,"eventType"],[8454,41,7881,45],[8454,42,7881,46],[8455,6,7882,8],[8456,6,7883,8],[8456,10,7883,12,"Object"],[8456,16,7883,18],[8456,17,7883,19,"keys"],[8456,21,7883,23],[8456,22,7883,24],[8456,26,7883,28],[8456,27,7883,29,"handlersMap"],[8456,38,7883,40],[8456,39,7883,41],[8456,40,7883,42,"length"],[8456,46,7883,48],[8456,51,7883,53],[8456,52,7883,54],[8456,54,7883,56],[8457,8,7884,12],[8457,12,7884,16],[8457,13,7884,17,"eventTarget"],[8457,24,7884,28],[8457,25,7884,29,"removeEventListener"],[8457,44,7884,48],[8457,45,7884,49],[8457,54,7884,58],[8457,56,7884,60],[8457,60,7884,64],[8457,61,7884,65,"boundEventHandler"],[8457,78,7884,82],[8457,79,7884,83],[8458,6,7885,8],[8459,4,7886,4],[8460,2,7887,0],[8461,2,7888,0,"Receiver"],[8461,10,7888,8],[8461,11,7888,9,"receivers"],[8461,20,7888,18],[8461,23,7888,21],[8461,25,7888,23],[8463,2,7890,0],[8464,0,7891,0],[8465,0,7892,0],[8466,0,7893,0],[8467,0,7894,0],[8468,0,7895,0],[8469,0,7896,0],[8470,0,7897,0],[8471,0,7898,0],[8472,0,7899,0],[8473,0,7900,0],[8474,0,7901,0],[8475,0,7902,0],[8476,0,7903,0],[8477,0,7904,0],[8478,0,7905,0],[8479,2,7906,0],[8479,11,7906,9,"_generateEventId"],[8479,27,7906,25,"_generateEventId"],[8479,28,7906,26,"prefix"],[8479,34,7906,32],[8479,37,7906,35],[8479,39,7906,37],[8479,41,7906,39,"digits"],[8479,47,7906,45],[8479,50,7906,48],[8479,52,7906,50],[8479,54,7906,52],[8480,4,7907,4],[8480,8,7907,8,"random"],[8480,14,7907,14],[8480,17,7907,17],[8480,19,7907,19],[8481,4,7908,4],[8481,9,7908,9],[8481,13,7908,13,"i"],[8481,14,7908,14],[8481,17,7908,17],[8481,18,7908,18],[8481,20,7908,20,"i"],[8481,21,7908,21],[8481,24,7908,24,"digits"],[8481,30,7908,30],[8481,32,7908,32,"i"],[8481,33,7908,33],[8481,35,7908,35],[8481,37,7908,37],[8482,6,7909,8,"random"],[8482,12,7909,14],[8482,16,7909,18,"Math"],[8482,20,7909,22],[8482,21,7909,23,"floor"],[8482,26,7909,28],[8482,27,7909,29,"Math"],[8482,31,7909,33],[8482,32,7909,34,"random"],[8482,38,7909,40],[8482,39,7909,41],[8482,40,7909,42],[8482,43,7909,45],[8482,45,7909,47],[8482,46,7909,48],[8483,4,7910,4],[8484,4,7911,4],[8484,11,7911,11,"prefix"],[8484,17,7911,17],[8484,20,7911,20,"random"],[8484,26,7911,26],[8485,2,7912,0],[8487,2,7914,0],[8488,0,7915,0],[8489,0,7916,0],[8490,0,7917,0],[8491,0,7918,0],[8492,0,7919,0],[8493,0,7920,0],[8494,0,7921,0],[8495,0,7922,0],[8496,0,7923,0],[8497,0,7924,0],[8498,0,7925,0],[8499,0,7926,0],[8500,0,7927,0],[8501,0,7928,0],[8502,0,7929,0],[8503,2,7930,0],[8504,0,7931,0],[8505,0,7932,0],[8506,0,7933,0],[8507,2,7934,0],[8507,8,7934,6,"Sender"],[8507,14,7934,12],[8507,15,7934,13],[8508,4,7935,4,"constructor"],[8508,15,7935,15,"constructor"],[8508,16,7935,16,"target"],[8508,22,7935,22],[8508,24,7935,24],[8509,6,7936,8],[8509,10,7936,12],[8509,11,7936,13,"target"],[8509,17,7936,19],[8509,20,7936,22,"target"],[8509,26,7936,28],[8510,6,7937,8],[8510,10,7937,12],[8510,11,7937,13,"handlers"],[8510,19,7937,21],[8510,22,7937,24],[8510,26,7937,28,"Set"],[8510,29,7937,31],[8510,30,7937,32],[8510,31,7937,33],[8511,4,7938,4],[8512,4,7939,4],[8513,0,7940,0],[8514,0,7941,0],[8515,0,7942,0],[8516,0,7943,0],[8517,4,7944,4,"removeMessageHandler"],[8517,24,7944,24,"removeMessageHandler"],[8517,25,7944,25,"handler"],[8517,32,7944,32],[8517,34,7944,34],[8518,6,7945,8],[8518,10,7945,12,"handler"],[8518,17,7945,19],[8518,18,7945,20,"messageChannel"],[8518,32,7945,34],[8518,34,7945,36],[8519,8,7946,12,"handler"],[8519,15,7946,19],[8519,16,7946,20,"messageChannel"],[8519,30,7946,34],[8519,31,7946,35,"port1"],[8519,36,7946,40],[8519,37,7946,41,"removeEventListener"],[8519,56,7946,60],[8519,57,7946,61],[8519,66,7946,70],[8519,68,7946,72,"handler"],[8519,75,7946,79],[8519,76,7946,80,"onMessage"],[8519,85,7946,89],[8519,86,7946,90],[8520,8,7947,12,"handler"],[8520,15,7947,19],[8520,16,7947,20,"messageChannel"],[8520,30,7947,34],[8520,31,7947,35,"port1"],[8520,36,7947,40],[8520,37,7947,41,"close"],[8520,42,7947,46],[8520,43,7947,47],[8520,44,7947,48],[8521,6,7948,8],[8522,6,7949,8],[8522,10,7949,12],[8522,11,7949,13,"handlers"],[8522,19,7949,21],[8522,20,7949,22,"delete"],[8522,26,7949,28],[8522,27,7949,29,"handler"],[8522,34,7949,36],[8522,35,7949,37],[8523,4,7950,4],[8524,4,7951,4],[8525,0,7952,0],[8526,0,7953,0],[8527,0,7954,0],[8528,0,7955,0],[8529,0,7956,0],[8530,0,7957,0],[8531,0,7958,0],[8532,0,7959,0],[8533,0,7960,0],[8534,0,7961,0],[8535,0,7962,0],[8536,0,7963,0],[8537,4,7964,4],[8537,10,7964,10,"_send"],[8537,15,7964,15,"_send"],[8537,16,7964,16,"eventType"],[8537,25,7964,25],[8537,27,7964,27,"data"],[8537,31,7964,31],[8537,33,7964,33,"timeout"],[8537,40,7964,40],[8537,43,7964,43],[8537,45,7964,45],[8537,46,7964,46],[8537,74,7964,74],[8538,6,7965,8],[8538,12,7965,14,"messageChannel"],[8538,26,7965,28],[8538,29,7965,31],[8538,36,7965,38,"MessageChannel"],[8538,50,7965,52],[8538,55,7965,57],[8538,66,7965,68],[8538,69,7965,71],[8538,73,7965,75,"MessageChannel"],[8538,87,7965,89],[8538,88,7965,90],[8538,89,7965,91],[8538,92,7965,94],[8538,96,7965,98],[8539,6,7966,8],[8539,10,7966,12],[8539,11,7966,13,"messageChannel"],[8539,25,7966,27],[8539,27,7966,29],[8540,8,7967,12],[8540,14,7967,18],[8540,18,7967,22,"Error"],[8540,23,7967,27],[8540,24,7967,28],[8540,48,7967,52],[8540,49,7967,53],[8540,91,7967,95],[8540,92,7967,96],[8541,6,7968,8],[8542,6,7969,8],[8543,6,7970,8],[8544,6,7971,8],[8545,6,7972,8],[8546,6,7973,8],[8546,10,7973,12,"completionTimer"],[8546,25,7973,27],[8547,6,7974,8],[8547,10,7974,12,"handler"],[8547,17,7974,19],[8548,6,7975,8],[8548,13,7975,15],[8548,17,7975,19,"Promise"],[8548,24,7975,26],[8548,25,7975,27],[8548,26,7975,28,"resolve"],[8548,33,7975,35],[8548,35,7975,37,"reject"],[8548,41,7975,43],[8548,46,7975,48],[8549,8,7976,12],[8549,14,7976,18,"eventId"],[8549,21,7976,25],[8549,24,7976,28,"_generateEventId"],[8549,40,7976,44],[8549,41,7976,45],[8549,43,7976,47],[8549,45,7976,49],[8549,47,7976,51],[8549,48,7976,52],[8550,8,7977,12,"messageChannel"],[8550,22,7977,26],[8550,23,7977,27,"port1"],[8550,28,7977,32],[8550,29,7977,33,"start"],[8550,34,7977,38],[8550,35,7977,39],[8550,36,7977,40],[8551,8,7978,12],[8551,14,7978,18,"ackTimer"],[8551,22,7978,26],[8551,25,7978,29,"setTimeout"],[8551,35,7978,39],[8551,36,7978,40],[8551,42,7978,46],[8552,10,7979,16,"reject"],[8552,16,7979,22],[8552,17,7979,23],[8552,21,7979,27,"Error"],[8552,26,7979,32],[8552,27,7979,33],[8552,46,7979,52],[8552,47,7979,53],[8552,84,7979,90],[8552,85,7979,91],[8552,86,7979,92],[8553,8,7980,12],[8553,9,7980,13],[8553,11,7980,15,"timeout"],[8553,18,7980,22],[8553,19,7980,23],[8554,8,7981,12,"handler"],[8554,15,7981,19],[8554,18,7981,22],[8555,10,7982,16,"messageChannel"],[8555,24,7982,30],[8556,10,7983,16,"onMessage"],[8556,19,7983,25,"onMessage"],[8556,20,7983,26,"event"],[8556,25,7983,31],[8556,27,7983,33],[8557,12,7984,20],[8557,18,7984,26,"messageEvent"],[8557,30,7984,38],[8557,33,7984,41,"event"],[8557,38,7984,46],[8558,12,7985,20],[8558,16,7985,24,"messageEvent"],[8558,28,7985,36],[8558,29,7985,37,"data"],[8558,33,7985,41],[8558,34,7985,42,"eventId"],[8558,41,7985,49],[8558,46,7985,54,"eventId"],[8558,53,7985,61],[8558,55,7985,63],[8559,14,7986,24],[8560,12,7987,20],[8561,12,7988,20],[8561,20,7988,28,"messageEvent"],[8561,32,7988,40],[8561,33,7988,41,"data"],[8561,37,7988,45],[8561,38,7988,46,"status"],[8561,44,7988,52],[8562,14,7989,24],[8562,19,7989,29],[8562,24,7989,34],[8562,25,7989,35],[8563,16,7990,28],[8564,16,7991,28,"clearTimeout"],[8564,28,7991,40],[8564,29,7991,41,"ackTimer"],[8564,37,7991,49],[8564,38,7991,50],[8565,16,7992,28,"completionTimer"],[8565,31,7992,43],[8565,34,7992,46,"setTimeout"],[8565,44,7992,56],[8565,45,7992,57],[8565,51,7992,63],[8566,18,7993,32,"reject"],[8566,24,7993,38],[8566,25,7993,39],[8566,29,7993,43,"Error"],[8566,34,7993,48],[8566,35,7993,49],[8566,44,7993,58],[8566,45,7993,59],[8566,72,7993,86],[8566,73,7993,87],[8566,74,7993,88],[8567,16,7994,28],[8567,17,7994,29],[8567,19,7994,31],[8567,23,7994,35],[8567,24,7994,36],[8567,57,7994,69],[8567,58,7994,70],[8568,16,7995,28],[8569,14,7996,24],[8569,19,7996,29],[8569,25,7996,35],[8569,26,7996,36],[8570,16,7997,28],[8571,16,7998,28,"clearTimeout"],[8571,28,7998,40],[8571,29,7998,41,"completionTimer"],[8571,44,7998,56],[8571,45,7998,57],[8572,16,7999,28,"resolve"],[8572,23,7999,35],[8572,24,7999,36,"messageEvent"],[8572,36,7999,48],[8572,37,7999,49,"data"],[8572,41,7999,53],[8572,42,7999,54,"response"],[8572,50,7999,62],[8572,51,7999,63],[8573,16,8000,28],[8574,14,8001,24],[8575,16,8002,28,"clearTimeout"],[8575,28,8002,40],[8575,29,8002,41,"ackTimer"],[8575,37,8002,49],[8575,38,8002,50],[8576,16,8003,28,"clearTimeout"],[8576,28,8003,40],[8576,29,8003,41,"completionTimer"],[8576,44,8003,56],[8576,45,8003,57],[8577,16,8004,28,"reject"],[8577,22,8004,34],[8577,23,8004,35],[8577,27,8004,39,"Error"],[8577,32,8004,44],[8577,33,8004,45],[8577,51,8004,63],[8577,52,8004,64],[8577,88,8004,100],[8577,89,8004,101],[8577,90,8004,102],[8578,16,8005,28],[8579,12,8006,20],[8580,10,8007,16],[8581,8,8008,12],[8581,9,8008,13],[8582,8,8009,12],[8582,12,8009,16],[8582,13,8009,17,"handlers"],[8582,21,8009,25],[8582,22,8009,26,"add"],[8582,25,8009,29],[8582,26,8009,30,"handler"],[8582,33,8009,37],[8582,34,8009,38],[8583,8,8010,12,"messageChannel"],[8583,22,8010,26],[8583,23,8010,27,"port1"],[8583,28,8010,32],[8583,29,8010,33,"addEventListener"],[8583,45,8010,49],[8583,46,8010,50],[8583,55,8010,59],[8583,57,8010,61,"handler"],[8583,64,8010,68],[8583,65,8010,69,"onMessage"],[8583,74,8010,78],[8583,75,8010,79],[8584,8,8011,12],[8584,12,8011,16],[8584,13,8011,17,"target"],[8584,19,8011,23],[8584,20,8011,24,"postMessage"],[8584,31,8011,35],[8584,32,8011,36],[8585,10,8012,16,"eventType"],[8585,19,8012,25],[8586,10,8013,16,"eventId"],[8586,17,8013,23],[8587,10,8014,16,"data"],[8588,8,8015,12],[8588,9,8015,13],[8588,11,8015,15],[8588,12,8015,16,"messageChannel"],[8588,26,8015,30],[8588,27,8015,31,"port2"],[8588,32,8015,36],[8588,33,8015,37],[8588,34,8015,38],[8589,6,8016,8],[8589,7,8016,9],[8589,8,8016,10],[8589,9,8016,11,"finally"],[8589,16,8016,18],[8589,17,8016,19],[8589,23,8016,25],[8590,8,8017,12],[8590,12,8017,16,"handler"],[8590,19,8017,23],[8590,21,8017,25],[8591,10,8018,16],[8591,14,8018,20],[8591,15,8018,21,"removeMessageHandler"],[8591,35,8018,41],[8591,36,8018,42,"handler"],[8591,43,8018,49],[8591,44,8018,50],[8592,8,8019,12],[8593,6,8020,8],[8593,7,8020,9],[8593,8,8020,10],[8594,4,8021,4],[8595,2,8022,0],[8597,2,8024,0],[8598,0,8025,0],[8599,0,8026,0],[8600,0,8027,0],[8601,0,8028,0],[8602,0,8029,0],[8603,0,8030,0],[8604,0,8031,0],[8605,0,8032,0],[8606,0,8033,0],[8607,0,8034,0],[8608,0,8035,0],[8609,0,8036,0],[8610,0,8037,0],[8611,0,8038,0],[8612,0,8039,0],[8613,2,8040,0],[8614,0,8041,0],[8615,0,8042,0],[8616,0,8043,0],[8617,2,8044,0],[8617,11,8044,9,"_window"],[8617,18,8044,16,"_window"],[8617,19,8044,16],[8617,21,8044,19],[8618,4,8045,4],[8618,11,8045,11,"window"],[8618,17,8045,17],[8619,2,8046,0],[8620,2,8047,0],[8620,11,8047,9,"_setWindowLocation"],[8620,29,8047,27,"_setWindowLocation"],[8620,30,8047,28,"url"],[8620,33,8047,31],[8620,35,8047,33],[8621,4,8048,4,"_window"],[8621,11,8048,11],[8621,12,8048,12],[8621,13,8048,13],[8621,14,8048,14,"location"],[8621,22,8048,22],[8621,23,8048,23,"href"],[8621,27,8048,27],[8621,30,8048,30,"url"],[8621,33,8048,33],[8622,2,8049,0],[8624,2,8051,0],[8625,0,8052,0],[8626,0,8053,0],[8627,0,8054,0],[8628,0,8055,0],[8629,0,8056,0],[8630,0,8057,0],[8631,0,8058,0],[8632,0,8059,0],[8633,0,8060,0],[8634,0,8061,0],[8635,0,8062,0],[8636,0,8063,0],[8637,0,8064,0],[8638,0,8065,0],[8639,0,8066,0],[8640,2,8067,0],[8640,11,8067,9,"_isWorker"],[8640,20,8067,18,"_isWorker"],[8640,21,8067,18],[8640,23,8067,21],[8641,4,8068,4],[8641,11,8068,12],[8641,18,8068,19,"_window"],[8641,25,8068,26],[8641,26,8068,27],[8641,27,8068,28],[8641,28,8068,29],[8641,47,8068,48],[8641,48,8068,49],[8641,53,8068,54],[8641,64,8068,65],[8641,68,8069,8],[8641,75,8069,15,"_window"],[8641,82,8069,22],[8641,83,8069,23],[8641,84,8069,24],[8641,85,8069,25],[8641,100,8069,40],[8641,101,8069,41],[8641,106,8069,46],[8641,116,8069,56],[8642,2,8070,0],[8643,2,8071,0],[8643,17,8071,15,"_getActiveServiceWorker"],[8643,40,8071,38,"_getActiveServiceWorker"],[8643,41,8071,38],[8643,43,8071,41],[8644,4,8072,4],[8644,8,8072,8],[8644,9,8072,9,"navigator"],[8644,18,8072,18],[8644,20,8072,20,"serviceWorker"],[8644,33,8072,33],[8644,35,8072,35],[8645,6,8073,8],[8645,13,8073,15],[8645,17,8073,19],[8646,4,8074,4],[8647,4,8075,4],[8647,8,8075,8],[8648,6,8076,8],[8648,12,8076,14,"registration"],[8648,24,8076,26],[8648,27,8076,29],[8648,33,8076,35,"navigator"],[8648,42,8076,44],[8648,43,8076,45,"serviceWorker"],[8648,56,8076,58],[8648,57,8076,59,"ready"],[8648,62,8076,64],[8649,6,8077,8],[8649,13,8077,15,"registration"],[8649,25,8077,27],[8649,26,8077,28,"active"],[8649,32,8077,34],[8650,4,8078,4],[8650,5,8078,5],[8650,6,8079,4],[8650,12,8079,10],[8651,6,8080,8],[8651,13,8080,15],[8651,17,8080,19],[8652,4,8081,4],[8653,2,8082,0],[8654,2,8083,0],[8654,11,8083,9,"_getServiceWorkerController"],[8654,38,8083,36,"_getServiceWorkerController"],[8654,39,8083,36],[8654,41,8083,39],[8655,4,8084,4],[8655,11,8084,11,"navigator"],[8655,20,8084,20],[8655,22,8084,22,"serviceWorker"],[8655,35,8084,35],[8655,37,8084,37,"controller"],[8655,47,8084,47],[8655,51,8084,51],[8655,55,8084,55],[8656,2,8085,0],[8657,2,8086,0],[8657,11,8086,9,"_getWorkerGlobalScope"],[8657,32,8086,30,"_getWorkerGlobalScope"],[8657,33,8086,30],[8657,35,8086,33],[8658,4,8087,4],[8658,11,8087,11,"_isWorker"],[8658,20,8087,20],[8658,21,8087,21],[8658,22,8087,22],[8658,25,8087,25,"self"],[8658,29,8087,29],[8658,32,8087,32],[8658,36,8087,36],[8659,2,8088,0],[8661,2,8090,0],[8662,0,8091,0],[8663,0,8092,0],[8664,0,8093,0],[8665,0,8094,0],[8666,0,8095,0],[8667,0,8096,0],[8668,0,8097,0],[8669,0,8098,0],[8670,0,8099,0],[8671,0,8100,0],[8672,0,8101,0],[8673,0,8102,0],[8674,0,8103,0],[8675,0,8104,0],[8676,0,8105,0],[8677,2,8106,0],[8677,8,8106,6,"DB_NAME"],[8677,15,8106,13],[8677,18,8106,16],[8677,42,8106,40],[8678,2,8107,0],[8678,8,8107,6,"DB_VERSION"],[8678,18,8107,16],[8678,21,8107,19],[8678,22,8107,20],[8679,2,8108,0],[8679,8,8108,6,"DB_OBJECTSTORE_NAME"],[8679,27,8108,25],[8679,30,8108,28],[8679,52,8108,50],[8680,2,8109,0],[8680,8,8109,6,"DB_DATA_KEYPATH"],[8680,23,8109,21],[8680,26,8109,24],[8680,37,8109,35],[8681,2,8110,0],[8682,0,8111,0],[8683,0,8112,0],[8684,0,8113,0],[8685,0,8114,0],[8686,0,8115,0],[8687,2,8116,0],[8687,8,8116,6,"DBPromise"],[8687,17,8116,15],[8687,18,8116,16],[8688,4,8117,4,"constructor"],[8688,15,8117,15,"constructor"],[8688,16,8117,16,"request"],[8688,23,8117,23],[8688,25,8117,25],[8689,6,8118,8],[8689,10,8118,12],[8689,11,8118,13,"request"],[8689,18,8118,20],[8689,21,8118,23,"request"],[8689,28,8118,30],[8690,4,8119,4],[8691,4,8120,4,"toPromise"],[8691,13,8120,13,"toPromise"],[8691,14,8120,13],[8691,16,8120,16],[8692,6,8121,8],[8692,13,8121,15],[8692,17,8121,19,"Promise"],[8692,24,8121,26],[8692,25,8121,27],[8692,26,8121,28,"resolve"],[8692,33,8121,35],[8692,35,8121,37,"reject"],[8692,41,8121,43],[8692,46,8121,48],[8693,8,8122,12],[8693,12,8122,16],[8693,13,8122,17,"request"],[8693,20,8122,24],[8693,21,8122,25,"addEventListener"],[8693,37,8122,41],[8693,38,8122,42],[8693,47,8122,51],[8693,49,8122,53],[8693,55,8122,59],[8694,10,8123,16,"resolve"],[8694,17,8123,23],[8694,18,8123,24],[8694,22,8123,28],[8694,23,8123,29,"request"],[8694,30,8123,36],[8694,31,8123,37,"result"],[8694,37,8123,43],[8694,38,8123,44],[8695,8,8124,12],[8695,9,8124,13],[8695,10,8124,14],[8696,8,8125,12],[8696,12,8125,16],[8696,13,8125,17,"request"],[8696,20,8125,24],[8696,21,8125,25,"addEventListener"],[8696,37,8125,41],[8696,38,8125,42],[8696,45,8125,49],[8696,47,8125,51],[8696,53,8125,57],[8697,10,8126,16,"reject"],[8697,16,8126,22],[8697,17,8126,23],[8697,21,8126,27],[8697,22,8126,28,"request"],[8697,29,8126,35],[8697,30,8126,36,"error"],[8697,35,8126,41],[8697,36,8126,42],[8698,8,8127,12],[8698,9,8127,13],[8698,10,8127,14],[8699,6,8128,8],[8699,7,8128,9],[8699,8,8128,10],[8700,4,8129,4],[8701,2,8130,0],[8702,2,8131,0],[8702,11,8131,9,"getObjectStore"],[8702,25,8131,23,"getObjectStore"],[8702,26,8131,24,"db"],[8702,28,8131,26],[8702,30,8131,28,"isReadWrite"],[8702,41,8131,39],[8702,43,8131,41],[8703,4,8132,4],[8703,11,8132,11,"db"],[8703,13,8132,13],[8703,14,8133,9,"transaction"],[8703,25,8133,20],[8703,26,8133,21],[8703,27,8133,22,"DB_OBJECTSTORE_NAME"],[8703,46,8133,41],[8703,47,8133,42],[8703,49,8133,44,"isReadWrite"],[8703,60,8133,55],[8703,63,8133,58],[8703,74,8133,69],[8703,77,8133,72],[8703,87,8133,82],[8703,88,8133,83],[8703,89,8134,9,"objectStore"],[8703,100,8134,20],[8703,101,8134,21,"DB_OBJECTSTORE_NAME"],[8703,120,8134,40],[8703,121,8134,41],[8704,2,8135,0],[8705,2,8136,0],[8705,11,8136,9,"_deleteDatabase"],[8705,26,8136,24,"_deleteDatabase"],[8705,27,8136,24],[8705,29,8136,27],[8706,4,8137,4],[8706,10,8137,10,"request"],[8706,17,8137,17],[8706,20,8137,20,"indexedDB"],[8706,29,8137,29],[8706,30,8137,30,"deleteDatabase"],[8706,44,8137,44],[8706,45,8137,45,"DB_NAME"],[8706,52,8137,52],[8706,53,8137,53],[8707,4,8138,4],[8707,11,8138,11],[8707,15,8138,15,"DBPromise"],[8707,24,8138,24],[8707,25,8138,25,"request"],[8707,32,8138,32],[8707,33,8138,33],[8707,34,8138,34,"toPromise"],[8707,43,8138,43],[8707,44,8138,44],[8707,45,8138,45],[8708,2,8139,0],[8709,2,8140,0],[8709,11,8140,9,"_openDatabase"],[8709,24,8140,22,"_openDatabase"],[8709,25,8140,22],[8709,27,8140,25],[8710,4,8141,4],[8710,10,8141,10,"request"],[8710,17,8141,17],[8710,20,8141,20,"indexedDB"],[8710,29,8141,29],[8710,30,8141,30,"open"],[8710,34,8141,34],[8710,35,8141,35,"DB_NAME"],[8710,42,8141,42],[8710,44,8141,44,"DB_VERSION"],[8710,54,8141,54],[8710,55,8141,55],[8711,4,8142,4],[8711,11,8142,11],[8711,15,8142,15,"Promise"],[8711,22,8142,22],[8711,23,8142,23],[8711,24,8142,24,"resolve"],[8711,31,8142,31],[8711,33,8142,33,"reject"],[8711,39,8142,39],[8711,44,8142,44],[8712,6,8143,8,"request"],[8712,13,8143,15],[8712,14,8143,16,"addEventListener"],[8712,30,8143,32],[8712,31,8143,33],[8712,38,8143,40],[8712,40,8143,42],[8712,46,8143,48],[8713,8,8144,12,"reject"],[8713,14,8144,18],[8713,15,8144,19,"request"],[8713,22,8144,26],[8713,23,8144,27,"error"],[8713,28,8144,32],[8713,29,8144,33],[8714,6,8145,8],[8714,7,8145,9],[8714,8,8145,10],[8715,6,8146,8,"request"],[8715,13,8146,15],[8715,14,8146,16,"addEventListener"],[8715,30,8146,32],[8715,31,8146,33],[8715,46,8146,48],[8715,48,8146,50],[8715,54,8146,56],[8716,8,8147,12],[8716,14,8147,18,"db"],[8716,16,8147,20],[8716,19,8147,23,"request"],[8716,26,8147,30],[8716,27,8147,31,"result"],[8716,33,8147,37],[8717,8,8148,12],[8717,12,8148,16],[8718,10,8149,16,"db"],[8718,12,8149,18],[8718,13,8149,19,"createObjectStore"],[8718,30,8149,36],[8718,31,8149,37,"DB_OBJECTSTORE_NAME"],[8718,50,8149,56],[8718,52,8149,58],[8719,12,8149,60,"keyPath"],[8719,19,8149,67],[8719,21,8149,69,"DB_DATA_KEYPATH"],[8720,10,8149,85],[8720,11,8149,86],[8720,12,8149,87],[8721,8,8150,12],[8721,9,8150,13],[8721,10,8151,12],[8721,17,8151,19,"e"],[8721,18,8151,20],[8721,20,8151,22],[8722,10,8152,16,"reject"],[8722,16,8152,22],[8722,17,8152,23,"e"],[8722,18,8152,24],[8722,19,8152,25],[8723,8,8153,12],[8724,6,8154,8],[8724,7,8154,9],[8724,8,8154,10],[8725,6,8155,8,"request"],[8725,13,8155,15],[8725,14,8155,16,"addEventListener"],[8725,30,8155,32],[8725,31,8155,33],[8725,40,8155,42],[8725,42,8155,44],[8725,54,8155,56],[8726,8,8156,12],[8726,14,8156,18,"db"],[8726,16,8156,20],[8726,19,8156,23,"request"],[8726,26,8156,30],[8726,27,8156,31,"result"],[8726,33,8156,37],[8727,8,8157,12],[8728,8,8158,12],[8729,8,8159,12],[8730,8,8160,12],[8731,8,8161,12],[8731,12,8161,16],[8731,13,8161,17,"db"],[8731,15,8161,19],[8731,16,8161,20,"objectStoreNames"],[8731,32,8161,36],[8731,33,8161,37,"contains"],[8731,41,8161,45],[8731,42,8161,46,"DB_OBJECTSTORE_NAME"],[8731,61,8161,65],[8731,62,8161,66],[8731,64,8161,68],[8732,10,8162,16],[8733,10,8163,16,"db"],[8733,12,8163,18],[8733,13,8163,19,"close"],[8733,18,8163,24],[8733,19,8163,25],[8733,20,8163,26],[8734,10,8164,16],[8734,16,8164,22,"_deleteDatabase"],[8734,31,8164,37],[8734,32,8164,38],[8734,33,8164,39],[8735,10,8165,16,"resolve"],[8735,17,8165,23],[8735,18,8165,24],[8735,24,8165,30,"_openDatabase"],[8735,37,8165,43],[8735,38,8165,44],[8735,39,8165,45],[8735,40,8165,46],[8736,8,8166,12],[8736,9,8166,13],[8736,15,8167,17],[8737,10,8168,16,"resolve"],[8737,17,8168,23],[8737,18,8168,24,"db"],[8737,20,8168,26],[8737,21,8168,27],[8738,8,8169,12],[8739,6,8170,8],[8739,7,8170,9],[8739,8,8170,10],[8740,4,8171,4],[8740,5,8171,5],[8740,6,8171,6],[8741,2,8172,0],[8742,2,8173,0],[8742,17,8173,15,"_putObject"],[8742,27,8173,25,"_putObject"],[8742,28,8173,26,"db"],[8742,30,8173,28],[8742,32,8173,30,"key"],[8742,35,8173,33],[8742,37,8173,35,"value"],[8742,42,8173,40],[8742,44,8173,42],[8743,4,8174,4],[8743,10,8174,10,"request"],[8743,17,8174,17],[8743,20,8174,20,"getObjectStore"],[8743,34,8174,34],[8743,35,8174,35,"db"],[8743,37,8174,37],[8743,39,8174,39],[8743,43,8174,43],[8743,44,8174,44],[8743,45,8174,45,"put"],[8743,48,8174,48],[8743,49,8174,49],[8744,6,8175,8],[8744,7,8175,9,"DB_DATA_KEYPATH"],[8744,22,8175,24],[8744,25,8175,27,"key"],[8744,28,8175,30],[8745,6,8176,8,"value"],[8746,4,8177,4],[8746,5,8177,5],[8746,6,8177,6],[8747,4,8178,4],[8747,11,8178,11],[8747,15,8178,15,"DBPromise"],[8747,24,8178,24],[8747,25,8178,25,"request"],[8747,32,8178,32],[8747,33,8178,33],[8747,34,8178,34,"toPromise"],[8747,43,8178,43],[8747,44,8178,44],[8747,45,8178,45],[8748,2,8179,0],[8749,2,8180,0],[8749,17,8180,15,"getObject"],[8749,26,8180,24,"getObject"],[8749,27,8180,25,"db"],[8749,29,8180,27],[8749,31,8180,29,"key"],[8749,34,8180,32],[8749,36,8180,34],[8750,4,8181,4],[8750,10,8181,10,"request"],[8750,17,8181,17],[8750,20,8181,20,"getObjectStore"],[8750,34,8181,34],[8750,35,8181,35,"db"],[8750,37,8181,37],[8750,39,8181,39],[8750,44,8181,44],[8750,45,8181,45],[8750,46,8181,46,"get"],[8750,49,8181,49],[8750,50,8181,50,"key"],[8750,53,8181,53],[8750,54,8181,54],[8751,4,8182,4],[8751,10,8182,10,"data"],[8751,14,8182,14],[8751,17,8182,17],[8751,23,8182,23],[8751,27,8182,27,"DBPromise"],[8751,36,8182,36],[8751,37,8182,37,"request"],[8751,44,8182,44],[8751,45,8182,45],[8751,46,8182,46,"toPromise"],[8751,55,8182,55],[8751,56,8182,56],[8751,57,8182,57],[8752,4,8183,4],[8752,11,8183,11,"data"],[8752,15,8183,15],[8752,20,8183,20,"undefined"],[8752,29,8183,29],[8752,32,8183,32],[8752,36,8183,36],[8752,39,8183,39,"data"],[8752,43,8183,43],[8752,44,8183,44,"value"],[8752,49,8183,49],[8753,2,8184,0],[8754,2,8185,0],[8754,11,8185,9,"_deleteObject"],[8754,24,8185,22,"_deleteObject"],[8754,25,8185,23,"db"],[8754,27,8185,25],[8754,29,8185,27,"key"],[8754,32,8185,30],[8754,34,8185,32],[8755,4,8186,4],[8755,10,8186,10,"request"],[8755,17,8186,17],[8755,20,8186,20,"getObjectStore"],[8755,34,8186,34],[8755,35,8186,35,"db"],[8755,37,8186,37],[8755,39,8186,39],[8755,43,8186,43],[8755,44,8186,44],[8755,45,8186,45,"delete"],[8755,51,8186,51],[8755,52,8186,52,"key"],[8755,55,8186,55],[8755,56,8186,56],[8756,4,8187,4],[8756,11,8187,11],[8756,15,8187,15,"DBPromise"],[8756,24,8187,24],[8756,25,8187,25,"request"],[8756,32,8187,32],[8756,33,8187,33],[8756,34,8187,34,"toPromise"],[8756,43,8187,43],[8756,44,8187,44],[8756,45,8187,45],[8757,2,8188,0],[8758,2,8189,0],[8758,8,8189,6,"_POLLING_INTERVAL_MS"],[8758,28,8189,26],[8758,31,8189,29],[8758,34,8189,32],[8759,2,8190,0],[8759,8,8190,6,"_TRANSACTION_RETRY_COUNT"],[8759,32,8190,30],[8759,35,8190,33],[8759,36,8190,34],[8760,2,8191,0],[8760,8,8191,6,"IndexedDBLocalPersistence"],[8760,33,8191,31],[8760,34,8191,32],[8761,4,8192,4,"constructor"],[8761,15,8192,15,"constructor"],[8761,16,8192,15],[8761,18,8192,18],[8762,6,8193,8],[8762,10,8193,12],[8762,11,8193,13,"type"],[8762,15,8193,17],[8762,18,8193,20],[8762,25,8193,27],[8762,26,8193,28],[8763,6,8194,8],[8763,10,8194,12],[8763,11,8194,13,"_shouldAllowMigration"],[8763,32,8194,34],[8763,35,8194,37],[8763,39,8194,41],[8764,6,8195,8],[8764,10,8195,12],[8764,11,8195,13,"listeners"],[8764,20,8195,22],[8764,23,8195,25],[8764,24,8195,26],[8764,25,8195,27],[8765,6,8196,8],[8765,10,8196,12],[8765,11,8196,13,"localCache"],[8765,21,8196,23],[8765,24,8196,26],[8765,25,8196,27],[8765,26,8196,28],[8766,6,8197,8],[8767,6,8198,8],[8768,6,8199,8],[8768,10,8199,12],[8768,11,8199,13,"pollTimer"],[8768,20,8199,22],[8768,23,8199,25],[8768,27,8199,29],[8769,6,8200,8],[8769,10,8200,12],[8769,11,8200,13,"pendingWrites"],[8769,24,8200,26],[8769,27,8200,29],[8769,28,8200,30],[8770,6,8201,8],[8770,10,8201,12],[8770,11,8201,13,"receiver"],[8770,19,8201,21],[8770,22,8201,24],[8770,26,8201,28],[8771,6,8202,8],[8771,10,8202,12],[8771,11,8202,13,"sender"],[8771,17,8202,19],[8771,20,8202,22],[8771,24,8202,26],[8772,6,8203,8],[8772,10,8203,12],[8772,11,8203,13,"serviceWorkerReceiverAvailable"],[8772,41,8203,43],[8772,44,8203,46],[8772,49,8203,51],[8773,6,8204,8],[8773,10,8204,12],[8773,11,8204,13,"activeServiceWorker"],[8773,30,8204,32],[8773,33,8204,35],[8773,37,8204,39],[8774,6,8205,8],[8775,6,8206,8],[8775,10,8206,12],[8775,11,8206,13,"_workerInitializationPromise"],[8775,39,8206,41],[8775,42,8207,12],[8775,46,8207,16],[8775,47,8207,17,"initializeServiceWorkerMessaging"],[8775,79,8207,49],[8775,80,8207,50],[8775,81,8207,51],[8775,82,8207,52,"then"],[8775,86,8207,56],[8775,87,8207,57],[8775,93,8207,63],[8775,94,8207,65],[8775,95,8207,66],[8775,97,8207,68],[8775,103,8207,74],[8775,104,8207,76],[8775,105,8207,77],[8775,106,8207,78],[8776,4,8208,4],[8777,4,8209,4],[8777,10,8209,10,"_openDb"],[8777,17,8209,17,"_openDb"],[8777,18,8209,17],[8777,20,8209,20],[8778,6,8210,8],[8778,10,8210,12],[8778,14,8210,16],[8778,15,8210,17,"db"],[8778,17,8210,19],[8778,19,8210,21],[8779,8,8211,12],[8779,15,8211,19],[8779,19,8211,23],[8779,20,8211,24,"db"],[8779,22,8211,26],[8780,6,8212,8],[8781,6,8213,8],[8781,10,8213,12],[8781,11,8213,13,"db"],[8781,13,8213,15],[8781,16,8213,18],[8781,22,8213,24,"_openDatabase"],[8781,35,8213,37],[8781,36,8213,38],[8781,37,8213,39],[8782,6,8214,8],[8782,13,8214,15],[8782,17,8214,19],[8782,18,8214,20,"db"],[8782,20,8214,22],[8783,4,8215,4],[8784,4,8216,4],[8784,10,8216,10,"_withRetries"],[8784,22,8216,22,"_withRetries"],[8784,23,8216,23,"op"],[8784,25,8216,25],[8784,27,8216,27],[8785,6,8217,8],[8785,10,8217,12,"numAttempts"],[8785,21,8217,23],[8785,24,8217,26],[8785,25,8217,27],[8786,6,8218,8],[8786,13,8218,15],[8786,17,8218,19],[8786,19,8218,21],[8787,8,8219,12],[8787,12,8219,16],[8788,10,8220,16],[8788,16,8220,22,"db"],[8788,18,8220,24],[8788,21,8220,27],[8788,27,8220,33],[8788,31,8220,37],[8788,32,8220,38,"_openDb"],[8788,39,8220,45],[8788,40,8220,46],[8788,41,8220,47],[8789,10,8221,16],[8789,17,8221,23],[8789,23,8221,29,"op"],[8789,25,8221,31],[8789,26,8221,32,"db"],[8789,28,8221,34],[8789,29,8221,35],[8790,8,8222,12],[8790,9,8222,13],[8790,10,8223,12],[8790,17,8223,19,"e"],[8790,18,8223,20],[8790,20,8223,22],[8791,10,8224,16],[8791,14,8224,20,"numAttempts"],[8791,25,8224,31],[8791,27,8224,33],[8791,30,8224,36,"_TRANSACTION_RETRY_COUNT"],[8791,54,8224,60],[8791,56,8224,62],[8792,12,8225,20],[8792,18,8225,26,"e"],[8792,19,8225,27],[8793,10,8226,16],[8794,10,8227,16],[8794,14,8227,20],[8794,18,8227,24],[8794,19,8227,25,"db"],[8794,21,8227,27],[8794,23,8227,29],[8795,12,8228,20],[8795,16,8228,24],[8795,17,8228,25,"db"],[8795,19,8228,27],[8795,20,8228,28,"close"],[8795,25,8228,33],[8795,26,8228,34],[8795,27,8228,35],[8796,12,8229,20],[8796,16,8229,24],[8796,17,8229,25,"db"],[8796,19,8229,27],[8796,22,8229,30,"undefined"],[8796,31,8229,39],[8797,10,8230,16],[8798,10,8231,16],[8799,8,8232,12],[8800,6,8233,8],[8801,4,8234,4],[8802,4,8235,4],[8803,0,8236,0],[8804,0,8237,0],[8805,0,8238,0],[8806,4,8239,4],[8806,10,8239,10,"initializeServiceWorkerMessaging"],[8806,42,8239,42,"initializeServiceWorkerMessaging"],[8806,43,8239,42],[8806,45,8239,45],[8807,6,8240,8],[8807,13,8240,15,"_isWorker"],[8807,22,8240,24],[8807,23,8240,25],[8807,24,8240,26],[8807,27,8240,29],[8807,31,8240,33],[8807,32,8240,34,"initializeReceiver"],[8807,50,8240,52],[8807,51,8240,53],[8807,52,8240,54],[8807,55,8240,57],[8807,59,8240,61],[8807,60,8240,62,"initializeSender"],[8807,76,8240,78],[8807,77,8240,79],[8807,78,8240,80],[8808,4,8241,4],[8809,4,8242,4],[8810,0,8243,0],[8811,0,8244,0],[8812,4,8245,4],[8812,10,8245,10,"initializeReceiver"],[8812,28,8245,28,"initializeReceiver"],[8812,29,8245,28],[8812,31,8245,31],[8813,6,8246,8],[8813,10,8246,12],[8813,11,8246,13,"receiver"],[8813,19,8246,21],[8813,22,8246,24,"Receiver"],[8813,30,8246,32],[8813,31,8246,33,"_getInstance"],[8813,43,8246,45],[8813,44,8246,46,"_getWorkerGlobalScope"],[8813,65,8246,67],[8813,66,8246,68],[8813,67,8246,69],[8813,68,8246,70],[8814,6,8247,8],[8815,6,8248,8],[8815,10,8248,12],[8815,11,8248,13,"receiver"],[8815,19,8248,21],[8815,20,8248,22,"_subscribe"],[8815,30,8248,32],[8815,31,8248,33],[8815,43,8248,45],[8815,44,8248,46],[8815,74,8248,76],[8815,81,8248,83,"_origin"],[8815,88,8248,90],[8815,90,8248,92,"data"],[8815,94,8248,96],[8815,99,8248,101],[8816,8,8249,12],[8816,14,8249,18,"keys"],[8816,18,8249,22],[8816,21,8249,25],[8816,27,8249,31],[8816,31,8249,35],[8816,32,8249,36,"_poll"],[8816,37,8249,41],[8816,38,8249,42],[8816,39,8249,43],[8817,8,8250,12],[8817,15,8250,19],[8818,10,8251,16,"keyProcessed"],[8818,22,8251,28],[8818,24,8251,30,"keys"],[8818,28,8251,34],[8818,29,8251,35,"includes"],[8818,37,8251,43],[8818,38,8251,44,"data"],[8818,42,8251,48],[8818,43,8251,49,"key"],[8818,46,8251,52],[8819,8,8252,12],[8819,9,8252,13],[8820,6,8253,8],[8820,7,8253,9],[8820,8,8253,10],[8821,6,8254,8],[8822,6,8255,8],[8822,10,8255,12],[8822,11,8255,13,"receiver"],[8822,19,8255,21],[8822,20,8255,22,"_subscribe"],[8822,30,8255,32],[8822,31,8255,33],[8822,37,8255,39],[8822,38,8255,40],[8822,61,8255,63],[8822,68,8255,70,"_origin"],[8822,75,8255,77],[8822,77,8255,79,"_data"],[8822,82,8255,84],[8822,87,8255,89],[8823,8,8256,12],[8823,15,8256,19],[8823,16,8256,20],[8823,28,8256,32],[8823,29,8256,33],[8823,58,8256,62],[8824,6,8257,8],[8824,7,8257,9],[8824,8,8257,10],[8825,4,8258,4],[8826,4,8259,4],[8827,0,8260,0],[8828,0,8261,0],[8829,0,8262,0],[8830,0,8263,0],[8831,0,8264,0],[8832,0,8265,0],[8833,4,8266,4],[8833,10,8266,10,"initializeSender"],[8833,26,8266,26,"initializeSender"],[8833,27,8266,26],[8833,29,8266,29],[8834,6,8267,8],[8835,6,8268,8],[8835,10,8268,12],[8835,11,8268,13,"activeServiceWorker"],[8835,30,8268,32],[8835,33,8268,35],[8835,39,8268,41,"_getActiveServiceWorker"],[8835,62,8268,64],[8835,63,8268,65],[8835,64,8268,66],[8836,6,8269,8],[8836,10,8269,12],[8836,11,8269,13],[8836,15,8269,17],[8836,16,8269,18,"activeServiceWorker"],[8836,35,8269,37],[8836,37,8269,39],[8837,8,8270,12],[8838,6,8271,8],[8839,6,8272,8],[8839,10,8272,12],[8839,11,8272,13,"sender"],[8839,17,8272,19],[8839,20,8272,22],[8839,24,8272,26,"Sender"],[8839,30,8272,32],[8839,31,8272,33],[8839,35,8272,37],[8839,36,8272,38,"activeServiceWorker"],[8839,55,8272,57],[8839,56,8272,58],[8840,6,8273,8],[8841,6,8274,8],[8841,12,8274,14,"results"],[8841,19,8274,21],[8841,22,8274,24],[8841,28,8274,30],[8841,32,8274,34],[8841,33,8274,35,"sender"],[8841,39,8274,41],[8841,40,8274,42,"_send"],[8841,45,8274,47],[8841,46,8274,48],[8841,52,8274,54],[8841,53,8274,55],[8841,76,8274,78],[8841,77,8274,79],[8841,78,8274,80],[8841,80,8274,82],[8841,83,8274,85],[8841,84,8274,86],[8841,115,8274,117],[8841,116,8274,118],[8842,6,8275,8],[8842,10,8275,12],[8842,11,8275,13,"results"],[8842,18,8275,20],[8842,20,8275,22],[8843,8,8276,12],[8844,6,8277,8],[8845,6,8278,8],[8845,10,8278,12,"results"],[8845,17,8278,19],[8845,18,8278,20],[8845,19,8278,21],[8845,20,8278,22],[8845,22,8278,24,"fulfilled"],[8845,31,8278,33],[8845,35,8279,12,"results"],[8845,42,8279,19],[8845,43,8279,20],[8845,44,8279,21],[8845,45,8279,22],[8845,47,8279,24,"value"],[8845,52,8279,29],[8845,53,8279,30,"includes"],[8845,61,8279,38],[8845,62,8279,39],[8845,74,8279,51],[8845,75,8279,52],[8845,103,8279,80],[8845,104,8279,81],[8845,106,8279,83],[8846,8,8280,12],[8846,12,8280,16],[8846,13,8280,17,"serviceWorkerReceiverAvailable"],[8846,43,8280,47],[8846,46,8280,50],[8846,50,8280,54],[8847,6,8281,8],[8848,4,8282,4],[8849,4,8283,4],[8850,0,8284,0],[8851,0,8285,0],[8852,0,8286,0],[8853,0,8287,0],[8854,0,8288,0],[8855,0,8289,0],[8856,0,8290,0],[8857,0,8291,0],[8858,4,8292,4],[8858,10,8292,10,"notifyServiceWorker"],[8858,29,8292,29,"notifyServiceWorker"],[8858,30,8292,30,"key"],[8858,33,8292,33],[8858,35,8292,35],[8859,6,8293,8],[8859,10,8293,12],[8859,11,8293,13],[8859,15,8293,17],[8859,16,8293,18,"sender"],[8859,22,8293,24],[8859,26,8294,12],[8859,27,8294,13],[8859,31,8294,17],[8859,32,8294,18,"activeServiceWorker"],[8859,51,8294,37],[8859,55,8295,12,"_getServiceWorkerController"],[8859,82,8295,39],[8859,83,8295,40],[8859,84,8295,41],[8859,89,8295,46],[8859,93,8295,50],[8859,94,8295,51,"activeServiceWorker"],[8859,113,8295,70],[8859,115,8295,72],[8860,8,8296,12],[8861,6,8297,8],[8862,6,8298,8],[8862,10,8298,12],[8863,8,8299,12],[8863,14,8299,18],[8863,18,8299,22],[8863,19,8299,23,"sender"],[8863,25,8299,29],[8863,26,8299,30,"_send"],[8863,31,8299,35],[8863,32,8299,36],[8863,44,8299,48],[8863,45,8299,49],[8863,75,8299,79],[8864,10,8299,81,"key"],[8865,8,8299,85],[8865,9,8299,86],[8866,8,8300,12],[8867,8,8301,12],[8867,12,8301,16],[8867,13,8301,17,"serviceWorkerReceiverAvailable"],[8867,43,8301,47],[8867,46,8302,18],[8867,49,8302,21],[8867,50,8302,22],[8867,84,8303,18],[8867,86,8303,20],[8867,87,8303,21],[8867,113,8303,47],[8867,114,8303,48],[8868,6,8304,8],[8868,7,8304,9],[8868,8,8305,8],[8868,14,8305,14],[8869,8,8306,12],[8870,6,8306,12],[8871,4,8308,4],[8872,4,8309,4],[8872,10,8309,10,"_isAvailable"],[8872,22,8309,22,"_isAvailable"],[8872,23,8309,22],[8872,25,8309,25],[8873,6,8310,8],[8873,10,8310,12],[8874,8,8311,12],[8874,12,8311,16],[8874,13,8311,17,"indexedDB"],[8874,22,8311,26],[8874,24,8311,28],[8875,10,8312,16],[8875,17,8312,23],[8875,22,8312,28],[8876,8,8313,12],[8877,8,8314,12],[8877,14,8314,18,"db"],[8877,16,8314,20],[8877,19,8314,23],[8877,25,8314,29,"_openDatabase"],[8877,38,8314,42],[8877,39,8314,43],[8877,40,8314,44],[8878,8,8315,12],[8878,14,8315,18,"_putObject"],[8878,24,8315,28],[8878,25,8315,29,"db"],[8878,27,8315,31],[8878,29,8315,33,"STORAGE_AVAILABLE_KEY"],[8878,50,8315,54],[8878,52,8315,56],[8878,55,8315,59],[8878,56,8315,60],[8879,8,8316,12],[8879,14,8316,18,"_deleteObject"],[8879,27,8316,31],[8879,28,8316,32,"db"],[8879,30,8316,34],[8879,32,8316,36,"STORAGE_AVAILABLE_KEY"],[8879,53,8316,57],[8879,54,8316,58],[8880,8,8317,12],[8880,15,8317,19],[8880,19,8317,23],[8881,6,8318,8],[8881,7,8318,9],[8881,8,8319,8],[8881,14,8319,14],[8881,15,8319,16],[8882,6,8320,8],[8882,13,8320,15],[8882,18,8320,20],[8883,4,8321,4],[8884,4,8322,4],[8884,10,8322,10,"_withPendingWrite"],[8884,27,8322,27,"_withPendingWrite"],[8884,28,8322,28,"write"],[8884,33,8322,33],[8884,35,8322,35],[8885,6,8323,8],[8885,10,8323,12],[8885,11,8323,13,"pendingWrites"],[8885,24,8323,26],[8885,26,8323,28],[8886,6,8324,8],[8886,10,8324,12],[8887,8,8325,12],[8887,14,8325,18,"write"],[8887,19,8325,23],[8887,20,8325,24],[8887,21,8325,25],[8888,6,8326,8],[8888,7,8326,9],[8888,16,8327,16],[8889,8,8328,12],[8889,12,8328,16],[8889,13,8328,17,"pendingWrites"],[8889,26,8328,30],[8889,28,8328,32],[8890,6,8329,8],[8891,4,8330,4],[8892,4,8331,4],[8892,10,8331,10,"_set"],[8892,14,8331,14,"_set"],[8892,15,8331,15,"key"],[8892,18,8331,18],[8892,20,8331,20,"value"],[8892,25,8331,25],[8892,27,8331,27],[8893,6,8332,8],[8893,13,8332,15],[8893,17,8332,19],[8893,18,8332,20,"_withPendingWrite"],[8893,35,8332,37],[8893,36,8332,38],[8893,48,8332,50],[8894,8,8333,12],[8894,14,8333,18],[8894,18,8333,22],[8894,19,8333,23,"_withRetries"],[8894,31,8333,35],[8894,32,8333,37,"db"],[8894,34,8333,39],[8894,38,8333,44,"_putObject"],[8894,48,8333,54],[8894,49,8333,55,"db"],[8894,51,8333,57],[8894,53,8333,59,"key"],[8894,56,8333,62],[8894,58,8333,64,"value"],[8894,63,8333,69],[8894,64,8333,70],[8894,65,8333,71],[8895,8,8334,12],[8895,12,8334,16],[8895,13,8334,17,"localCache"],[8895,23,8334,27],[8895,24,8334,28,"key"],[8895,27,8334,31],[8895,28,8334,32],[8895,31,8334,35,"value"],[8895,36,8334,40],[8896,8,8335,12],[8896,15,8335,19],[8896,19,8335,23],[8896,20,8335,24,"notifyServiceWorker"],[8896,39,8335,43],[8896,40,8335,44,"key"],[8896,43,8335,47],[8896,44,8335,48],[8897,6,8336,8],[8897,7,8336,9],[8897,8,8336,10],[8898,4,8337,4],[8899,4,8338,4],[8899,10,8338,10,"_get"],[8899,14,8338,14,"_get"],[8899,15,8338,15,"key"],[8899,18,8338,18],[8899,20,8338,20],[8900,6,8339,8],[8900,12,8339,14,"obj"],[8900,15,8339,17],[8900,18,8339,21],[8900,24,8339,27],[8900,28,8339,31],[8900,29,8339,32,"_withRetries"],[8900,41,8339,44],[8900,42,8339,46,"db"],[8900,44,8339,48],[8900,48,8339,53,"getObject"],[8900,57,8339,62],[8900,58,8339,63,"db"],[8900,60,8339,65],[8900,62,8339,67,"key"],[8900,65,8339,70],[8900,66,8339,71],[8900,67,8339,73],[8901,6,8340,8],[8901,10,8340,12],[8901,11,8340,13,"localCache"],[8901,21,8340,23],[8901,22,8340,24,"key"],[8901,25,8340,27],[8901,26,8340,28],[8901,29,8340,31,"obj"],[8901,32,8340,34],[8902,6,8341,8],[8902,13,8341,15,"obj"],[8902,16,8341,18],[8903,4,8342,4],[8904,4,8343,4],[8904,10,8343,10,"_remove"],[8904,17,8343,17,"_remove"],[8904,18,8343,18,"key"],[8904,21,8343,21],[8904,23,8343,23],[8905,6,8344,8],[8905,13,8344,15],[8905,17,8344,19],[8905,18,8344,20,"_withPendingWrite"],[8905,35,8344,37],[8905,36,8344,38],[8905,48,8344,50],[8906,8,8345,12],[8906,14,8345,18],[8906,18,8345,22],[8906,19,8345,23,"_withRetries"],[8906,31,8345,35],[8906,32,8345,37,"db"],[8906,34,8345,39],[8906,38,8345,44,"_deleteObject"],[8906,51,8345,57],[8906,52,8345,58,"db"],[8906,54,8345,60],[8906,56,8345,62,"key"],[8906,59,8345,65],[8906,60,8345,66],[8906,61,8345,67],[8907,8,8346,12],[8907,15,8346,19],[8907,19,8346,23],[8907,20,8346,24,"localCache"],[8907,30,8346,34],[8907,31,8346,35,"key"],[8907,34,8346,38],[8907,35,8346,39],[8908,8,8347,12],[8908,15,8347,19],[8908,19,8347,23],[8908,20,8347,24,"notifyServiceWorker"],[8908,39,8347,43],[8908,40,8347,44,"key"],[8908,43,8347,47],[8908,44,8347,48],[8909,6,8348,8],[8909,7,8348,9],[8909,8,8348,10],[8910,4,8349,4],[8911,4,8350,4],[8911,10,8350,10,"_poll"],[8911,15,8350,15,"_poll"],[8911,16,8350,15],[8911,18,8350,18],[8912,6,8351,8],[8913,6,8352,8],[8913,12,8352,14,"result"],[8913,18,8352,20],[8913,21,8352,23],[8913,27,8352,29],[8913,31,8352,33],[8913,32,8352,34,"_withRetries"],[8913,44,8352,46],[8913,45,8352,48,"db"],[8913,47,8352,50],[8913,51,8352,55],[8914,8,8353,12],[8914,14,8353,18,"getAllRequest"],[8914,27,8353,31],[8914,30,8353,34,"getObjectStore"],[8914,44,8353,48],[8914,45,8353,49,"db"],[8914,47,8353,51],[8914,49,8353,53],[8914,54,8353,58],[8914,55,8353,59],[8914,56,8353,60,"getAll"],[8914,62,8353,66],[8914,63,8353,67],[8914,64,8353,68],[8915,8,8354,12],[8915,15,8354,19],[8915,19,8354,23,"DBPromise"],[8915,28,8354,32],[8915,29,8354,33,"getAllRequest"],[8915,42,8354,46],[8915,43,8354,47],[8915,44,8354,48,"toPromise"],[8915,53,8354,57],[8915,54,8354,58],[8915,55,8354,59],[8916,6,8355,8],[8916,7,8355,9],[8916,8,8355,10],[8917,6,8356,8],[8917,10,8356,12],[8917,11,8356,13,"result"],[8917,17,8356,19],[8917,19,8356,21],[8918,8,8357,12],[8918,15,8357,19],[8918,17,8357,21],[8919,6,8358,8],[8920,6,8359,8],[8921,6,8360,8],[8921,10,8360,12],[8921,14,8360,16],[8921,15,8360,17,"pendingWrites"],[8921,28,8360,30],[8921,33,8360,35],[8921,34,8360,36],[8921,36,8360,38],[8922,8,8361,12],[8922,15,8361,19],[8922,17,8361,21],[8923,6,8362,8],[8924,6,8363,8],[8924,12,8363,14,"keys"],[8924,16,8363,18],[8924,19,8363,21],[8924,21,8363,23],[8925,6,8364,8],[8925,12,8364,14,"keysInResult"],[8925,24,8364,26],[8925,27,8364,29],[8925,31,8364,33,"Set"],[8925,34,8364,36],[8925,35,8364,37],[8925,36,8364,38],[8926,6,8365,8],[8926,10,8365,12,"result"],[8926,16,8365,18],[8926,17,8365,19,"length"],[8926,23,8365,25],[8926,28,8365,30],[8926,29,8365,31],[8926,31,8365,33],[8927,8,8366,12],[8927,13,8366,17],[8927,19,8366,23],[8928,10,8366,25,"fbase_key"],[8928,19,8366,34],[8928,21,8366,36,"key"],[8928,24,8366,39],[8929,10,8366,41,"value"],[8930,8,8366,47],[8930,9,8366,48],[8930,13,8366,52,"result"],[8930,19,8366,58],[8930,21,8366,60],[8931,10,8367,16,"keysInResult"],[8931,22,8367,28],[8931,23,8367,29,"add"],[8931,26,8367,32],[8931,27,8367,33,"key"],[8931,30,8367,36],[8931,31,8367,37],[8932,10,8368,16],[8932,14,8368,20,"JSON"],[8932,18,8368,24],[8932,19,8368,25,"stringify"],[8932,28,8368,34],[8932,29,8368,35],[8932,33,8368,39],[8932,34,8368,40,"localCache"],[8932,44,8368,50],[8932,45,8368,51,"key"],[8932,48,8368,54],[8932,49,8368,55],[8932,50,8368,56],[8932,55,8368,61,"JSON"],[8932,59,8368,65],[8932,60,8368,66,"stringify"],[8932,69,8368,75],[8932,70,8368,76,"value"],[8932,75,8368,81],[8932,76,8368,82],[8932,78,8368,84],[8933,12,8369,20],[8933,16,8369,24],[8933,17,8369,25,"notifyListeners"],[8933,32,8369,40],[8933,33,8369,41,"key"],[8933,36,8369,44],[8933,38,8369,46,"value"],[8933,43,8369,51],[8933,44,8369,52],[8934,12,8370,20,"keys"],[8934,16,8370,24],[8934,17,8370,25,"push"],[8934,21,8370,29],[8934,22,8370,30,"key"],[8934,25,8370,33],[8934,26,8370,34],[8935,10,8371,16],[8936,8,8372,12],[8937,6,8373,8],[8938,6,8374,8],[8938,11,8374,13],[8938,17,8374,19,"localKey"],[8938,25,8374,27],[8938,29,8374,31,"Object"],[8938,35,8374,37],[8938,36,8374,38,"keys"],[8938,40,8374,42],[8938,41,8374,43],[8938,45,8374,47],[8938,46,8374,48,"localCache"],[8938,56,8374,58],[8938,57,8374,59],[8938,59,8374,61],[8939,8,8375,12],[8939,12,8375,16],[8939,16,8375,20],[8939,17,8375,21,"localCache"],[8939,27,8375,31],[8939,28,8375,32,"localKey"],[8939,36,8375,40],[8939,37,8375,41],[8939,41,8375,45],[8939,42,8375,46,"keysInResult"],[8939,54,8375,58],[8939,55,8375,59,"has"],[8939,58,8375,62],[8939,59,8375,63,"localKey"],[8939,67,8375,71],[8939,68,8375,72],[8939,70,8375,74],[8940,10,8376,16],[8941,10,8377,16],[8941,14,8377,20],[8941,15,8377,21,"notifyListeners"],[8941,30,8377,36],[8941,31,8377,37,"localKey"],[8941,39,8377,45],[8941,41,8377,47],[8941,45,8377,51],[8941,46,8377,52],[8942,10,8378,16,"keys"],[8942,14,8378,20],[8942,15,8378,21,"push"],[8942,19,8378,25],[8942,20,8378,26,"localKey"],[8942,28,8378,34],[8942,29,8378,35],[8943,8,8379,12],[8944,6,8380,8],[8945,6,8381,8],[8945,13,8381,15,"keys"],[8945,17,8381,19],[8946,4,8382,4],[8947,4,8383,4,"notifyListeners"],[8947,19,8383,19,"notifyListeners"],[8947,20,8383,20,"key"],[8947,23,8383,23],[8947,25,8383,25,"newValue"],[8947,33,8383,33],[8947,35,8383,35],[8948,6,8384,8],[8948,10,8384,12],[8948,11,8384,13,"localCache"],[8948,21,8384,23],[8948,22,8384,24,"key"],[8948,25,8384,27],[8948,26,8384,28],[8948,29,8384,31,"newValue"],[8948,37,8384,39],[8949,6,8385,8],[8949,12,8385,14,"listeners"],[8949,21,8385,23],[8949,24,8385,26],[8949,28,8385,30],[8949,29,8385,31,"listeners"],[8949,38,8385,40],[8949,39,8385,41,"key"],[8949,42,8385,44],[8949,43,8385,45],[8950,6,8386,8],[8950,10,8386,12,"listeners"],[8950,19,8386,21],[8950,21,8386,23],[8951,8,8387,12],[8951,13,8387,17],[8951,19,8387,23,"listener"],[8951,27,8387,31],[8951,31,8387,35,"Array"],[8951,36,8387,40],[8951,37,8387,41,"from"],[8951,41,8387,45],[8951,42,8387,46,"listeners"],[8951,51,8387,55],[8951,52,8387,56],[8951,54,8387,58],[8952,10,8388,16,"listener"],[8952,18,8388,24],[8952,19,8388,25,"newValue"],[8952,27,8388,33],[8952,28,8388,34],[8953,8,8389,12],[8954,6,8390,8],[8955,4,8391,4],[8956,4,8392,4,"startPolling"],[8956,16,8392,16,"startPolling"],[8956,17,8392,16],[8956,19,8392,19],[8957,6,8393,8],[8957,10,8393,12],[8957,11,8393,13,"stopPolling"],[8957,22,8393,24],[8957,23,8393,25],[8957,24,8393,26],[8958,6,8394,8],[8958,10,8394,12],[8958,11,8394,13,"pollTimer"],[8958,20,8394,22],[8958,23,8394,25,"setInterval"],[8958,34,8394,36],[8958,35,8394,37],[8958,47,8394,49],[8958,51,8394,53],[8958,52,8394,54,"_poll"],[8958,57,8394,59],[8958,58,8394,60],[8958,59,8394,61],[8958,61,8394,63,"_POLLING_INTERVAL_MS"],[8958,81,8394,83],[8958,82,8394,84],[8959,4,8395,4],[8960,4,8396,4,"stopPolling"],[8960,15,8396,15,"stopPolling"],[8960,16,8396,15],[8960,18,8396,18],[8961,6,8397,8],[8961,10,8397,12],[8961,14,8397,16],[8961,15,8397,17,"pollTimer"],[8961,24,8397,26],[8961,26,8397,28],[8962,8,8398,12,"clearInterval"],[8962,21,8398,25],[8962,22,8398,26],[8962,26,8398,30],[8962,27,8398,31,"pollTimer"],[8962,36,8398,40],[8962,37,8398,41],[8963,8,8399,12],[8963,12,8399,16],[8963,13,8399,17,"pollTimer"],[8963,22,8399,26],[8963,25,8399,29],[8963,29,8399,33],[8964,6,8400,8],[8965,4,8401,4],[8966,4,8402,4,"_addListener"],[8966,16,8402,16,"_addListener"],[8966,17,8402,17,"key"],[8966,20,8402,20],[8966,22,8402,22,"listener"],[8966,30,8402,30],[8966,32,8402,32],[8967,6,8403,8],[8967,10,8403,12,"Object"],[8967,16,8403,18],[8967,17,8403,19,"keys"],[8967,21,8403,23],[8967,22,8403,24],[8967,26,8403,28],[8967,27,8403,29,"listeners"],[8967,36,8403,38],[8967,37,8403,39],[8967,38,8403,40,"length"],[8967,44,8403,46],[8967,49,8403,51],[8967,50,8403,52],[8967,52,8403,54],[8968,8,8404,12],[8968,12,8404,16],[8968,13,8404,17,"startPolling"],[8968,25,8404,29],[8968,26,8404,30],[8968,27,8404,31],[8969,6,8405,8],[8970,6,8406,8],[8970,10,8406,12],[8970,11,8406,13],[8970,15,8406,17],[8970,16,8406,18,"listeners"],[8970,25,8406,27],[8970,26,8406,28,"key"],[8970,29,8406,31],[8970,30,8406,32],[8970,32,8406,34],[8971,8,8407,12],[8971,12,8407,16],[8971,13,8407,17,"listeners"],[8971,22,8407,26],[8971,23,8407,27,"key"],[8971,26,8407,30],[8971,27,8407,31],[8971,30,8407,34],[8971,34,8407,38,"Set"],[8971,37,8407,41],[8971,38,8407,42],[8971,39,8407,43],[8972,8,8408,12],[8973,8,8409,12],[8973,13,8409,17],[8973,17,8409,21],[8973,18,8409,22,"_get"],[8973,22,8409,26],[8973,23,8409,27,"key"],[8973,26,8409,30],[8973,27,8409,31],[8973,28,8409,32],[8973,29,8409,33],[8974,6,8410,8],[8975,6,8411,8],[8975,10,8411,12],[8975,11,8411,13,"listeners"],[8975,20,8411,22],[8975,21,8411,23,"key"],[8975,24,8411,26],[8975,25,8411,27],[8975,26,8411,28,"add"],[8975,29,8411,31],[8975,30,8411,32,"listener"],[8975,38,8411,40],[8975,39,8411,41],[8976,4,8412,4],[8977,4,8413,4,"_removeListener"],[8977,19,8413,19,"_removeListener"],[8977,20,8413,20,"key"],[8977,23,8413,23],[8977,25,8413,25,"listener"],[8977,33,8413,33],[8977,35,8413,35],[8978,6,8414,8],[8978,10,8414,12],[8978,14,8414,16],[8978,15,8414,17,"listeners"],[8978,24,8414,26],[8978,25,8414,27,"key"],[8978,28,8414,30],[8978,29,8414,31],[8978,31,8414,33],[8979,8,8415,12],[8979,12,8415,16],[8979,13,8415,17,"listeners"],[8979,22,8415,26],[8979,23,8415,27,"key"],[8979,26,8415,30],[8979,27,8415,31],[8979,28,8415,32,"delete"],[8979,34,8415,38],[8979,35,8415,39,"listener"],[8979,43,8415,47],[8979,44,8415,48],[8980,8,8416,12],[8980,12,8416,16],[8980,16,8416,20],[8980,17,8416,21,"listeners"],[8980,26,8416,30],[8980,27,8416,31,"key"],[8980,30,8416,34],[8980,31,8416,35],[8980,32,8416,36,"size"],[8980,36,8416,40],[8980,41,8416,45],[8980,42,8416,46],[8980,44,8416,48],[8981,10,8417,16],[8981,17,8417,23],[8981,21,8417,27],[8981,22,8417,28,"listeners"],[8981,31,8417,37],[8981,32,8417,38,"key"],[8981,35,8417,41],[8981,36,8417,42],[8982,8,8418,12],[8983,6,8419,8],[8984,6,8420,8],[8984,10,8420,12,"Object"],[8984,16,8420,18],[8984,17,8420,19,"keys"],[8984,21,8420,23],[8984,22,8420,24],[8984,26,8420,28],[8984,27,8420,29,"listeners"],[8984,36,8420,38],[8984,37,8420,39],[8984,38,8420,40,"length"],[8984,44,8420,46],[8984,49,8420,51],[8984,50,8420,52],[8984,52,8420,54],[8985,8,8421,12],[8985,12,8421,16],[8985,13,8421,17,"stopPolling"],[8985,24,8421,28],[8985,25,8421,29],[8985,26,8421,30],[8986,6,8422,8],[8987,4,8423,4],[8988,2,8424,0],[8989,2,8425,0,"IndexedDBLocalPersistence"],[8989,27,8425,25],[8989,28,8425,26,"type"],[8989,32,8425,30],[8989,35,8425,33],[8989,42,8425,40],[8990,2,8426,0],[8991,0,8427,0],[8992,0,8428,0],[8993,0,8429,0],[8994,0,8430,0],[8995,0,8431,0],[8996,2,8432,0],[8996,8,8432,6,"indexedDBLocalPersistence"],[8996,33,8432,31],[8996,36,8432,34,"IndexedDBLocalPersistence"],[8996,61,8432,59],[8998,2,8434,0],[8999,0,8435,0],[9000,0,8436,0],[9001,0,8437,0],[9002,0,8438,0],[9003,0,8439,0],[9004,0,8440,0],[9005,0,8441,0],[9006,0,8442,0],[9007,0,8443,0],[9008,0,8444,0],[9009,0,8445,0],[9010,0,8446,0],[9011,0,8447,0],[9012,0,8448,0],[9013,0,8449,0],[9014,2,8450,0],[9014,11,8450,9,"startSignInPhoneMfa"],[9014,30,8450,28,"startSignInPhoneMfa"],[9014,31,8450,29,"auth"],[9014,35,8450,33],[9014,37,8450,35,"request"],[9014,44,8450,42],[9014,46,8450,44],[9015,4,8451,4],[9015,11,8451,11,"_performApiRequest"],[9015,29,8451,29],[9015,30,8451,30,"auth"],[9015,34,8451,34],[9015,36,8451,36],[9015,42,8451,42],[9015,43,8451,43],[9015,66,8451,66],[9015,96,8451,96],[9015,97,8451,97],[9015,131,8451,131,"_addTidIfNecessary"],[9015,149,8451,149],[9015,150,8451,150,"auth"],[9015,154,8451,154],[9015,156,8451,156,"request"],[9015,163,8451,163],[9015,164,8451,164],[9015,165,8451,165],[9016,2,8452,0],[9017,2,8453,0],[9017,11,8453,9,"finalizeSignInPhoneMfa"],[9017,33,8453,31,"finalizeSignInPhoneMfa"],[9017,34,8453,32,"auth"],[9017,38,8453,36],[9017,40,8453,38,"request"],[9017,47,8453,45],[9017,49,8453,47],[9018,4,8454,4],[9018,11,8454,11,"_performApiRequest"],[9018,29,8454,29],[9018,30,8454,30,"auth"],[9018,34,8454,34],[9018,36,8454,36],[9018,42,8454,42],[9018,43,8454,43],[9018,66,8454,66],[9018,99,8454,99],[9018,100,8454,100],[9018,137,8454,137,"_addTidIfNecessary"],[9018,155,8454,155],[9018,156,8454,156,"auth"],[9018,160,8454,160],[9018,162,8454,162,"request"],[9018,169,8454,169],[9018,170,8454,170],[9018,171,8454,171],[9019,2,8455,0],[9020,2,8456,0],[9020,11,8456,9,"finalizeSignInTotpMfa"],[9020,32,8456,30,"finalizeSignInTotpMfa"],[9020,33,8456,31,"auth"],[9020,37,8456,35],[9020,39,8456,37,"request"],[9020,46,8456,44],[9020,48,8456,46],[9021,4,8457,4],[9021,11,8457,11,"_performApiRequest"],[9021,29,8457,29],[9021,30,8457,30,"auth"],[9021,34,8457,34],[9021,36,8457,36],[9021,42,8457,42],[9021,43,8457,43],[9021,66,8457,66],[9021,99,8457,99],[9021,100,8457,100],[9021,137,8457,137,"_addTidIfNecessary"],[9021,155,8457,155],[9021,156,8457,156,"auth"],[9021,160,8457,160],[9021,162,8457,162,"request"],[9021,169,8457,169],[9021,170,8457,170],[9021,171,8457,171],[9022,2,8458,0],[9024,2,8460,0],[9025,0,8461,0],[9026,0,8462,0],[9027,0,8463,0],[9028,0,8464,0],[9029,0,8465,0],[9030,0,8466,0],[9031,0,8467,0],[9032,0,8468,0],[9033,0,8469,0],[9034,0,8470,0],[9035,0,8471,0],[9036,0,8472,0],[9037,0,8473,0],[9038,0,8474,0],[9039,0,8475,0],[9040,2,8476,0],[9041,2,8477,0],[9042,2,8478,0],[9042,8,8478,6,"_JSLOAD_CALLBACK"],[9042,24,8478,22],[9042,27,8478,25,"_generateCallbackName"],[9042,48,8478,46],[9042,49,8478,47],[9042,54,8478,52],[9042,55,8478,53],[9043,2,8479,0],[9043,8,8479,6,"NETWORK_TIMEOUT_DELAY"],[9043,29,8479,27],[9043,32,8479,30],[9043,36,8479,34,"Delay"],[9043,41,8479,39],[9043,42,8479,40],[9043,47,8479,45],[9043,49,8479,47],[9043,54,8479,52],[9043,55,8479,53],[9044,2,8480,0],[9045,0,8481,0],[9046,0,8482,0],[9047,2,8483,0],[9047,8,8483,6,"ReCaptchaLoaderImpl"],[9047,27,8483,25],[9047,28,8483,26],[9048,4,8484,4,"constructor"],[9048,15,8484,15,"constructor"],[9048,16,8484,15],[9048,18,8484,18],[9049,6,8485,8],[9049,10,8485,12],[9049,11,8485,13,"hostLanguage"],[9049,23,8485,25],[9049,26,8485,28],[9049,28,8485,30],[9050,6,8486,8],[9050,10,8486,12],[9050,11,8486,13,"counter"],[9050,18,8486,20],[9050,21,8486,23],[9050,22,8486,24],[9051,6,8487,8],[9052,0,8488,0],[9053,0,8489,0],[9054,0,8490,0],[9055,0,8491,0],[9056,6,8492,8],[9056,10,8492,12],[9056,11,8492,13,"librarySeparatelyLoaded"],[9056,34,8492,36],[9056,37,8492,39],[9056,38,8492,40],[9056,39,8492,41,"_window"],[9056,46,8492,48],[9056,47,8492,49],[9056,48,8492,50],[9056,49,8492,51,"grecaptcha"],[9056,59,8492,61],[9056,61,8492,63,"render"],[9056,67,8492,69],[9057,4,8493,4],[9058,4,8494,4,"load"],[9058,8,8494,8,"load"],[9058,9,8494,9,"auth"],[9058,13,8494,13],[9058,15,8494,15,"hl"],[9058,17,8494,17],[9058,20,8494,20],[9058,22,8494,22],[9058,24,8494,24],[9059,6,8495,8,"_assert"],[9059,13,8495,15],[9059,14,8495,16,"isHostLanguageValid"],[9059,33,8495,35],[9059,34,8495,36,"hl"],[9059,36,8495,38],[9059,37,8495,39],[9059,39,8495,41,"auth"],[9059,43,8495,45],[9059,45,8495,47],[9059,61,8495,63],[9059,62,8495,64],[9059,96,8495,98],[9059,97,8495,99],[9060,6,8496,8],[9060,10,8496,12],[9060,14,8496,16],[9060,15,8496,17,"shouldResolveImmediately"],[9060,39,8496,41],[9060,40,8496,42,"hl"],[9060,42,8496,44],[9060,43,8496,45],[9060,47,8496,49,"isV2"],[9060,51,8496,53],[9060,52,8496,54,"_window"],[9060,59,8496,61],[9060,60,8496,62],[9060,61,8496,63],[9060,62,8496,64,"grecaptcha"],[9060,72,8496,74],[9060,73,8496,75],[9060,75,8496,77],[9061,8,8497,12],[9061,15,8497,19,"Promise"],[9061,22,8497,26],[9061,23,8497,27,"resolve"],[9061,30,8497,34],[9061,31,8497,35,"_window"],[9061,38,8497,42],[9061,39,8497,43],[9061,40,8497,44],[9061,41,8497,45,"grecaptcha"],[9061,51,8497,55],[9061,52,8497,56],[9062,6,8498,8],[9063,6,8499,8],[9063,13,8499,15],[9063,17,8499,19,"Promise"],[9063,24,8499,26],[9063,25,8499,27],[9063,26,8499,28,"resolve"],[9063,33,8499,35],[9063,35,8499,37,"reject"],[9063,41,8499,43],[9063,46,8499,48],[9064,8,8500,12],[9064,14,8500,18,"networkTimeout"],[9064,28,8500,32],[9064,31,8500,35,"_window"],[9064,38,8500,42],[9064,39,8500,43],[9064,40,8500,44],[9064,41,8500,45,"setTimeout"],[9064,51,8500,55],[9064,52,8500,56],[9064,58,8500,62],[9065,10,8501,16,"reject"],[9065,16,8501,22],[9065,17,8501,23,"_createError"],[9065,29,8501,35],[9065,30,8501,36,"auth"],[9065,34,8501,40],[9065,36,8501,42],[9065,60,8501,66],[9065,61,8501,67],[9065,103,8501,109],[9065,104,8501,110],[9065,105,8501,111],[9066,8,8502,12],[9066,9,8502,13],[9066,11,8502,15,"NETWORK_TIMEOUT_DELAY"],[9066,32,8502,36],[9066,33,8502,37,"get"],[9066,36,8502,40],[9066,37,8502,41],[9066,38,8502,42],[9066,39,8502,43],[9067,8,8503,12,"_window"],[9067,15,8503,19],[9067,16,8503,20],[9067,17,8503,21],[9067,18,8503,22,"_JSLOAD_CALLBACK"],[9067,34,8503,38],[9067,35,8503,39],[9067,38,8503,42],[9067,44,8503,48],[9068,10,8504,16,"_window"],[9068,17,8504,23],[9068,18,8504,24],[9068,19,8504,25],[9068,20,8504,26,"clearTimeout"],[9068,32,8504,38],[9068,33,8504,39,"networkTimeout"],[9068,47,8504,53],[9068,48,8504,54],[9069,10,8505,16],[9069,17,8505,23,"_window"],[9069,24,8505,30],[9069,25,8505,31],[9069,26,8505,32],[9069,27,8505,33,"_JSLOAD_CALLBACK"],[9069,43,8505,49],[9069,44,8505,50],[9070,10,8506,16],[9070,16,8506,22,"recaptcha"],[9070,25,8506,31],[9070,28,8506,34,"_window"],[9070,35,8506,41],[9070,36,8506,42],[9070,37,8506,43],[9070,38,8506,44,"grecaptcha"],[9070,48,8506,54],[9071,10,8507,16],[9071,14,8507,20],[9071,15,8507,21,"recaptcha"],[9071,24,8507,30],[9071,28,8507,34],[9071,29,8507,35,"isV2"],[9071,33,8507,39],[9071,34,8507,40,"recaptcha"],[9071,43,8507,49],[9071,44,8507,50],[9071,46,8507,52],[9072,12,8508,20,"reject"],[9072,18,8508,26],[9072,19,8508,27,"_createError"],[9072,31,8508,39],[9072,32,8508,40,"auth"],[9072,36,8508,44],[9072,38,8508,46],[9072,54,8508,62],[9072,55,8508,63],[9072,89,8508,97],[9072,90,8508,98],[9072,91,8508,99],[9073,12,8509,20],[9074,10,8510,16],[9075,10,8511,16],[9076,10,8512,16],[9077,10,8513,16],[9077,16,8513,22,"render"],[9077,22,8513,28],[9077,25,8513,31,"recaptcha"],[9077,34,8513,40],[9077,35,8513,41,"render"],[9077,41,8513,47],[9078,10,8514,16,"recaptcha"],[9078,19,8514,25],[9078,20,8514,26,"render"],[9078,26,8514,32],[9078,29,8514,35],[9078,30,8514,36,"container"],[9078,39,8514,45],[9078,41,8514,47,"params"],[9078,47,8514,53],[9078,52,8514,58],[9079,12,8515,20],[9079,18,8515,26,"widgetId"],[9079,26,8515,34],[9079,29,8515,37,"render"],[9079,35,8515,43],[9079,36,8515,44,"container"],[9079,45,8515,53],[9079,47,8515,55,"params"],[9079,53,8515,61],[9079,54,8515,62],[9080,12,8516,20],[9080,16,8516,24],[9080,17,8516,25,"counter"],[9080,24,8516,32],[9080,26,8516,34],[9081,12,8517,20],[9081,19,8517,27,"widgetId"],[9081,27,8517,35],[9082,10,8518,16],[9082,11,8518,17],[9083,10,8519,16],[9083,14,8519,20],[9083,15,8519,21,"hostLanguage"],[9083,27,8519,33],[9083,30,8519,36,"hl"],[9083,32,8519,38],[9084,10,8520,16,"resolve"],[9084,17,8520,23],[9084,18,8520,24,"recaptcha"],[9084,27,8520,33],[9084,28,8520,34],[9085,8,8521,12],[9085,9,8521,13],[9086,8,8522,12],[9086,14,8522,18,"url"],[9086,17,8522,21],[9086,20,8522,24],[9086,23,8522,27,"_recaptchaV2ScriptUrl"],[9086,44,8522,48],[9086,45,8522,49],[9086,46,8522,50],[9086,50,8522,54],[9086,54,8522,54,"querystring"],[9086,67,8522,65],[9086,68,8522,65,"querystring"],[9086,79,8522,65],[9086,81,8522,66],[9087,10,8523,16,"onload"],[9087,16,8523,22],[9087,18,8523,24,"_JSLOAD_CALLBACK"],[9087,34,8523,40],[9088,10,8524,16,"render"],[9088,16,8524,22],[9088,18,8524,24],[9088,28,8524,34],[9089,10,8525,16,"hl"],[9090,8,8526,12],[9090,9,8526,13],[9090,10,8526,14],[9090,12,8526,16],[9091,8,8527,12,"_loadJS"],[9091,15,8527,19],[9091,16,8527,20,"url"],[9091,19,8527,23],[9091,20,8527,24],[9091,21,8527,25,"catch"],[9091,26,8527,30],[9091,27,8527,31],[9091,33,8527,37],[9092,10,8528,16,"clearTimeout"],[9092,22,8528,28],[9092,23,8528,29,"networkTimeout"],[9092,37,8528,43],[9092,38,8528,44],[9093,10,8529,16,"reject"],[9093,16,8529,22],[9093,17,8529,23,"_createError"],[9093,29,8529,35],[9093,30,8529,36,"auth"],[9093,34,8529,40],[9093,36,8529,42],[9093,52,8529,58],[9093,53,8529,59],[9093,87,8529,93],[9093,88,8529,94],[9093,89,8529,95],[9094,8,8530,12],[9094,9,8530,13],[9094,10,8530,14],[9095,6,8531,8],[9095,7,8531,9],[9095,8,8531,10],[9096,4,8532,4],[9097,4,8533,4,"clearedOneInstance"],[9097,22,8533,22,"clearedOneInstance"],[9097,23,8533,22],[9097,25,8533,25],[9098,6,8534,8],[9098,10,8534,12],[9098,11,8534,13,"counter"],[9098,18,8534,20],[9098,20,8534,22],[9099,4,8535,4],[9100,4,8536,4,"shouldResolveImmediately"],[9100,28,8536,28,"shouldResolveImmediately"],[9100,29,8536,29,"hl"],[9100,31,8536,31],[9100,33,8536,33],[9101,6,8537,8],[9102,6,8538,8],[9103,6,8539,8],[9104,6,8540,8],[9105,6,8541,8],[9106,6,8542,8],[9107,6,8543,8],[9108,6,8544,8],[9108,13,8544,16],[9108,14,8544,17],[9108,15,8544,18,"_window"],[9108,22,8544,25],[9108,23,8544,26],[9108,24,8544,27],[9108,25,8544,28,"grecaptcha"],[9108,35,8544,38],[9108,37,8544,40,"render"],[9108,43,8544,46],[9108,48,8545,13,"hl"],[9108,50,8545,15],[9108,55,8545,20],[9108,59,8545,24],[9108,60,8545,25,"hostLanguage"],[9108,72,8545,37],[9108,76,8546,16],[9108,80,8546,20],[9108,81,8546,21,"counter"],[9108,88,8546,28],[9108,91,8546,31],[9108,92,8546,32],[9108,96,8547,16],[9108,100,8547,20],[9108,101,8547,21,"librarySeparatelyLoaded"],[9108,124,8547,44],[9108,125,8547,45],[9109,4,8548,4],[9110,2,8549,0],[9111,2,8550,0],[9111,11,8550,9,"isHostLanguageValid"],[9111,30,8550,28,"isHostLanguageValid"],[9111,31,8550,29,"hl"],[9111,33,8550,31],[9111,35,8550,33],[9112,4,8551,4],[9112,11,8551,11,"hl"],[9112,13,8551,13],[9112,14,8551,14,"length"],[9112,20,8551,20],[9112,24,8551,24],[9112,25,8551,25],[9112,29,8551,29],[9112,53,8551,53],[9112,54,8551,54,"test"],[9112,58,8551,58],[9112,59,8551,59,"hl"],[9112,61,8551,61],[9112,62,8551,62],[9113,2,8552,0],[9114,2,8553,0],[9114,8,8553,6,"MockReCaptchaLoaderImpl"],[9114,31,8553,29],[9114,32,8553,30],[9115,4,8554,4],[9115,10,8554,10,"load"],[9115,14,8554,14,"load"],[9115,15,8554,15,"auth"],[9115,19,8554,19],[9115,21,8554,21],[9116,6,8555,8],[9116,13,8555,15],[9116,17,8555,19,"MockReCaptcha"],[9116,30,8555,32],[9116,31,8555,33,"auth"],[9116,35,8555,37],[9116,36,8555,38],[9117,4,8556,4],[9118,4,8557,4,"clearedOneInstance"],[9118,22,8557,22,"clearedOneInstance"],[9118,23,8557,22],[9118,25,8557,25],[9118,26,8557,27],[9119,2,8558,0],[9121,2,8560,0],[9122,0,8561,0],[9123,0,8562,0],[9124,0,8563,0],[9125,0,8564,0],[9126,0,8565,0],[9127,0,8566,0],[9128,0,8567,0],[9129,0,8568,0],[9130,0,8569,0],[9131,0,8570,0],[9132,0,8571,0],[9133,0,8572,0],[9134,0,8573,0],[9135,0,8574,0],[9136,0,8575,0],[9137,2,8576,0],[9137,8,8576,6,"RECAPTCHA_VERIFIER_TYPE"],[9137,31,8576,29],[9137,34,8576,32],[9137,45,8576,43],[9138,2,8577,0],[9138,8,8577,6,"DEFAULT_PARAMS"],[9138,22,8577,20],[9138,25,8577,23],[9139,4,8578,4,"theme"],[9139,9,8578,9],[9139,11,8578,11],[9139,18,8578,18],[9140,4,8579,4,"type"],[9140,8,8579,8],[9140,10,8579,10],[9141,2,8580,0],[9141,3,8580,1],[9142,2,8581,0],[9143,0,8582,0],[9144,0,8583,0],[9145,0,8584,0],[9146,0,8585,0],[9147,0,8586,0],[9148,0,8587,0],[9149,0,8588,0],[9150,2,8589,0],[9150,8,8589,6,"RecaptchaVerifier"],[9150,25,8589,23],[9150,26,8589,24],[9151,4,8590,4],[9152,0,8591,0],[9153,0,8592,0],[9154,0,8593,0],[9155,0,8594,0],[9156,0,8595,0],[9157,0,8596,0],[9158,0,8597,0],[9159,0,8598,0],[9160,0,8599,0],[9161,0,8600,0],[9162,0,8601,0],[9163,0,8602,0],[9164,0,8603,0],[9165,0,8604,0],[9166,0,8605,0],[9167,0,8606,0],[9168,0,8607,0],[9169,0,8608,0],[9170,4,8609,4,"constructor"],[9170,15,8609,15,"constructor"],[9170,16,8609,16,"authExtern"],[9170,26,8609,26],[9170,28,8609,28,"containerOrId"],[9170,41,8609,41],[9170,43,8609,43,"parameters"],[9170,53,8609,53],[9170,56,8609,56],[9171,6,8610,8],[9171,9,8610,11,"DEFAULT_PARAMS"],[9172,4,8611,4],[9172,5,8611,5],[9172,7,8611,7],[9173,6,8612,8],[9173,10,8612,12],[9173,11,8612,13,"parameters"],[9173,21,8612,23],[9173,24,8612,26,"parameters"],[9173,34,8612,36],[9174,6,8613,8],[9175,0,8614,0],[9176,0,8615,0],[9177,0,8616,0],[9178,0,8617,0],[9179,0,8618,0],[9180,6,8619,8],[9180,10,8619,12],[9180,11,8619,13,"type"],[9180,15,8619,17],[9180,18,8619,20,"RECAPTCHA_VERIFIER_TYPE"],[9180,41,8619,43],[9181,6,8620,8],[9181,10,8620,12],[9181,11,8620,13,"destroyed"],[9181,20,8620,22],[9181,23,8620,25],[9181,28,8620,30],[9182,6,8621,8],[9182,10,8621,12],[9182,11,8621,13,"widgetId"],[9182,19,8621,21],[9182,22,8621,24],[9182,26,8621,28],[9183,6,8622,8],[9183,10,8622,12],[9183,11,8622,13,"tokenChangeListeners"],[9183,31,8622,33],[9183,34,8622,36],[9183,38,8622,40,"Set"],[9183,41,8622,43],[9183,42,8622,44],[9183,43,8622,45],[9184,6,8623,8],[9184,10,8623,12],[9184,11,8623,13,"renderPromise"],[9184,24,8623,26],[9184,27,8623,29],[9184,31,8623,33],[9185,6,8624,8],[9185,10,8624,12],[9185,11,8624,13,"recaptcha"],[9185,20,8624,22],[9185,23,8624,25],[9185,27,8624,29],[9186,6,8625,8],[9186,10,8625,12],[9186,11,8625,13,"auth"],[9186,15,8625,17],[9186,18,8625,20,"_castAuth"],[9186,27,8625,29],[9186,28,8625,30,"authExtern"],[9186,38,8625,40],[9186,39,8625,41],[9187,6,8626,8],[9187,10,8626,12],[9187,11,8626,13,"isInvisible"],[9187,22,8626,24],[9187,25,8626,27],[9187,29,8626,31],[9187,30,8626,32,"parameters"],[9187,40,8626,42],[9187,41,8626,43,"size"],[9187,45,8626,47],[9187,50,8626,52],[9187,61,8626,63],[9188,6,8627,8,"_assert"],[9188,13,8627,15],[9188,14,8627,16],[9188,21,8627,23,"document"],[9188,29,8627,31],[9188,34,8627,36],[9188,45,8627,47],[9188,47,8627,49],[9188,51,8627,53],[9188,52,8627,54,"auth"],[9188,56,8627,58],[9188,58,8627,60],[9188,103,8627,105],[9188,104,8627,106],[9188,147,8627,149],[9188,148,8627,150],[9189,6,8628,8],[9189,12,8628,14,"container"],[9189,21,8628,23],[9189,24,8628,26],[9189,31,8628,33,"containerOrId"],[9189,44,8628,46],[9189,49,8628,51],[9189,57,8628,59],[9189,60,8629,14,"document"],[9189,68,8629,22],[9189,69,8629,23,"getElementById"],[9189,83,8629,37],[9189,84,8629,38,"containerOrId"],[9189,97,8629,51],[9189,98,8629,52],[9189,101,8630,14,"containerOrId"],[9189,114,8630,27],[9190,6,8631,8,"_assert"],[9190,13,8631,15],[9190,14,8631,16,"container"],[9190,23,8631,25],[9190,25,8631,27],[9190,29,8631,31],[9190,30,8631,32,"auth"],[9190,34,8631,36],[9190,36,8631,38],[9190,52,8631,54],[9190,53,8631,55],[9190,87,8631,89],[9190,88,8631,90],[9191,6,8632,8],[9191,10,8632,12],[9191,11,8632,13,"container"],[9191,20,8632,22],[9191,23,8632,25,"container"],[9191,32,8632,34],[9192,6,8633,8],[9192,10,8633,12],[9192,11,8633,13,"parameters"],[9192,21,8633,23],[9192,22,8633,24,"callback"],[9192,30,8633,32],[9192,33,8633,35],[9192,37,8633,39],[9192,38,8633,40,"makeTokenCallback"],[9192,55,8633,57],[9192,56,8633,58],[9192,60,8633,62],[9192,61,8633,63,"parameters"],[9192,71,8633,73],[9192,72,8633,74,"callback"],[9192,80,8633,82],[9192,81,8633,83],[9193,6,8634,8],[9193,10,8634,12],[9193,11,8634,13,"_recaptchaLoader"],[9193,27,8634,29],[9193,30,8634,32],[9193,34,8634,36],[9193,35,8634,37,"auth"],[9193,39,8634,41],[9193,40,8634,42,"settings"],[9193,48,8634,50],[9193,49,8634,51,"appVerificationDisabledForTesting"],[9193,82,8634,84],[9193,85,8635,14],[9193,89,8635,18,"MockReCaptchaLoaderImpl"],[9193,112,8635,41],[9193,113,8635,42],[9193,114,8635,43],[9193,117,8636,14],[9193,121,8636,18,"ReCaptchaLoaderImpl"],[9193,140,8636,37],[9193,141,8636,38],[9193,142,8636,39],[9194,6,8637,8],[9194,10,8637,12],[9194,11,8637,13,"validateStartingState"],[9194,32,8637,34],[9194,33,8637,35],[9194,34,8637,36],[9195,6,8638,8],[9196,4,8639,4],[9197,4,8640,4],[9198,0,8641,0],[9199,0,8642,0],[9200,0,8643,0],[9201,0,8644,0],[9202,4,8645,4],[9202,10,8645,10,"verify"],[9202,16,8645,16,"verify"],[9202,17,8645,16],[9202,19,8645,19],[9203,6,8646,8],[9203,10,8646,12],[9203,11,8646,13,"assertNotDestroyed"],[9203,29,8646,31],[9203,30,8646,32],[9203,31,8646,33],[9204,6,8647,8],[9204,12,8647,14,"id"],[9204,14,8647,16],[9204,17,8647,19],[9204,23,8647,25],[9204,27,8647,29],[9204,28,8647,30,"render"],[9204,34,8647,36],[9204,35,8647,37],[9204,36,8647,38],[9205,6,8648,8],[9205,12,8648,14,"recaptcha"],[9205,21,8648,23],[9205,24,8648,26],[9205,28,8648,30],[9205,29,8648,31,"getAssertedRecaptcha"],[9205,49,8648,51],[9205,50,8648,52],[9205,51,8648,53],[9206,6,8649,8],[9206,12,8649,14,"response"],[9206,20,8649,22],[9206,23,8649,25,"recaptcha"],[9206,32,8649,34],[9206,33,8649,35,"getResponse"],[9206,44,8649,46],[9206,45,8649,47,"id"],[9206,47,8649,49],[9206,48,8649,50],[9207,6,8650,8],[9207,10,8650,12,"response"],[9207,18,8650,20],[9207,20,8650,22],[9208,8,8651,12],[9208,15,8651,19,"response"],[9208,23,8651,27],[9209,6,8652,8],[9210,6,8653,8],[9210,13,8653,15],[9210,17,8653,19,"Promise"],[9210,24,8653,26],[9210,25,8653,27,"resolve"],[9210,32,8653,34],[9210,36,8653,38],[9211,8,8654,12],[9211,14,8654,18,"tokenChange"],[9211,25,8654,29],[9211,28,8654,33,"token"],[9211,33,8654,38],[9211,37,8654,43],[9212,10,8655,16],[9212,14,8655,20],[9212,15,8655,21,"token"],[9212,20,8655,26],[9212,22,8655,28],[9213,12,8656,20],[9213,19,8656,27],[9213,20,8656,28],[9214,10,8657,16],[9215,10,8658,16],[9215,14,8658,20],[9215,15,8658,21,"tokenChangeListeners"],[9215,35,8658,41],[9215,36,8658,42,"delete"],[9215,42,8658,48],[9215,43,8658,49,"tokenChange"],[9215,54,8658,60],[9215,55,8658,61],[9216,10,8659,16,"resolve"],[9216,17,8659,23],[9216,18,8659,24,"token"],[9216,23,8659,29],[9216,24,8659,30],[9217,8,8660,12],[9217,9,8660,13],[9218,8,8661,12],[9218,12,8661,16],[9218,13,8661,17,"tokenChangeListeners"],[9218,33,8661,37],[9218,34,8661,38,"add"],[9218,37,8661,41],[9218,38,8661,42,"tokenChange"],[9218,49,8661,53],[9218,50,8661,54],[9219,8,8662,12],[9219,12,8662,16],[9219,16,8662,20],[9219,17,8662,21,"isInvisible"],[9219,28,8662,32],[9219,30,8662,34],[9220,10,8663,16,"recaptcha"],[9220,19,8663,25],[9220,20,8663,26,"execute"],[9220,27,8663,33],[9220,28,8663,34,"id"],[9220,30,8663,36],[9220,31,8663,37],[9221,8,8664,12],[9222,6,8665,8],[9222,7,8665,9],[9222,8,8665,10],[9223,4,8666,4],[9224,4,8667,4],[9225,0,8668,0],[9226,0,8669,0],[9227,0,8670,0],[9228,0,8671,0],[9229,4,8672,4,"render"],[9229,10,8672,10,"render"],[9229,11,8672,10],[9229,13,8672,13],[9230,6,8673,8],[9230,10,8673,12],[9231,8,8674,12],[9231,12,8674,16],[9231,13,8674,17,"assertNotDestroyed"],[9231,31,8674,35],[9231,32,8674,36],[9231,33,8674,37],[9232,6,8675,8],[9232,7,8675,9],[9232,8,8676,8],[9232,15,8676,15,"e"],[9232,16,8676,16],[9232,18,8676,18],[9233,8,8677,12],[9234,8,8678,12],[9235,8,8679,12],[9236,8,8680,12],[9236,15,8680,19,"Promise"],[9236,22,8680,26],[9236,23,8680,27,"reject"],[9236,29,8680,33],[9236,30,8680,34,"e"],[9236,31,8680,35],[9236,32,8680,36],[9237,6,8681,8],[9238,6,8682,8],[9238,10,8682,12],[9238,14,8682,16],[9238,15,8682,17,"renderPromise"],[9238,28,8682,30],[9238,30,8682,32],[9239,8,8683,12],[9239,15,8683,19],[9239,19,8683,23],[9239,20,8683,24,"renderPromise"],[9239,33,8683,37],[9240,6,8684,8],[9241,6,8685,8],[9241,10,8685,12],[9241,11,8685,13,"renderPromise"],[9241,24,8685,26],[9241,27,8685,29],[9241,31,8685,33],[9241,32,8685,34,"makeRenderPromise"],[9241,49,8685,51],[9241,50,8685,52],[9241,51,8685,53],[9241,52,8685,54,"catch"],[9241,57,8685,59],[9241,58,8685,60,"e"],[9241,59,8685,61],[9241,63,8685,65],[9242,8,8686,12],[9242,12,8686,16],[9242,13,8686,17,"renderPromise"],[9242,26,8686,30],[9242,29,8686,33],[9242,33,8686,37],[9243,8,8687,12],[9243,14,8687,18,"e"],[9243,15,8687,19],[9244,6,8688,8],[9244,7,8688,9],[9244,8,8688,10],[9245,6,8689,8],[9245,13,8689,15],[9245,17,8689,19],[9245,18,8689,20,"renderPromise"],[9245,31,8689,33],[9246,4,8690,4],[9247,4,8691,4],[9248,4,8692,4,"_reset"],[9248,10,8692,10,"_reset"],[9248,11,8692,10],[9248,13,8692,13],[9249,6,8693,8],[9249,10,8693,12],[9249,11,8693,13,"assertNotDestroyed"],[9249,29,8693,31],[9249,30,8693,32],[9249,31,8693,33],[9250,6,8694,8],[9250,10,8694,12],[9250,14,8694,16],[9250,15,8694,17,"widgetId"],[9250,23,8694,25],[9250,28,8694,30],[9250,32,8694,34],[9250,34,8694,36],[9251,8,8695,12],[9251,12,8695,16],[9251,13,8695,17,"getAssertedRecaptcha"],[9251,33,8695,37],[9251,34,8695,38],[9251,35,8695,39],[9251,36,8695,40,"reset"],[9251,41,8695,45],[9251,42,8695,46],[9251,46,8695,50],[9251,47,8695,51,"widgetId"],[9251,55,8695,59],[9251,56,8695,60],[9252,6,8696,8],[9253,4,8697,4],[9254,4,8698,4],[9255,0,8699,0],[9256,0,8700,0],[9257,4,8701,4,"clear"],[9257,9,8701,9,"clear"],[9257,10,8701,9],[9257,12,8701,12],[9258,6,8702,8],[9258,10,8702,12],[9258,11,8702,13,"assertNotDestroyed"],[9258,29,8702,31],[9258,30,8702,32],[9258,31,8702,33],[9259,6,8703,8],[9259,10,8703,12],[9259,11,8703,13,"destroyed"],[9259,20,8703,22],[9259,23,8703,25],[9259,27,8703,29],[9260,6,8704,8],[9260,10,8704,12],[9260,11,8704,13,"_recaptchaLoader"],[9260,27,8704,29],[9260,28,8704,30,"clearedOneInstance"],[9260,46,8704,48],[9260,47,8704,49],[9260,48,8704,50],[9261,6,8705,8],[9261,10,8705,12],[9261,11,8705,13],[9261,15,8705,17],[9261,16,8705,18,"isInvisible"],[9261,27,8705,29],[9261,29,8705,31],[9262,8,8706,12],[9262,12,8706,16],[9262,13,8706,17,"container"],[9262,22,8706,26],[9262,23,8706,27,"childNodes"],[9262,33,8706,37],[9262,34,8706,38,"forEach"],[9262,41,8706,45],[9262,42,8706,46,"node"],[9262,46,8706,50],[9262,50,8706,54],[9263,10,8707,16],[9263,14,8707,20],[9263,15,8707,21,"container"],[9263,24,8707,30],[9263,25,8707,31,"removeChild"],[9263,36,8707,42],[9263,37,8707,43,"node"],[9263,41,8707,47],[9263,42,8707,48],[9264,8,8708,12],[9264,9,8708,13],[9264,10,8708,14],[9265,6,8709,8],[9266,4,8710,4],[9267,4,8711,4,"validateStartingState"],[9267,25,8711,25,"validateStartingState"],[9267,26,8711,25],[9267,28,8711,28],[9268,6,8712,8,"_assert"],[9268,13,8712,15],[9268,14,8712,16],[9268,15,8712,17],[9268,19,8712,21],[9268,20,8712,22,"parameters"],[9268,30,8712,32],[9268,31,8712,33,"sitekey"],[9268,38,8712,40],[9268,40,8712,42],[9268,44,8712,46],[9268,45,8712,47,"auth"],[9268,49,8712,51],[9268,51,8712,53],[9268,67,8712,69],[9268,68,8712,70],[9268,102,8712,104],[9268,103,8712,105],[9269,6,8713,8,"_assert"],[9269,13,8713,15],[9269,14,8713,16],[9269,18,8713,20],[9269,19,8713,21,"isInvisible"],[9269,30,8713,32],[9269,34,8713,36],[9269,35,8713,37],[9269,39,8713,41],[9269,40,8713,42,"container"],[9269,49,8713,51],[9269,50,8713,52,"hasChildNodes"],[9269,63,8713,65],[9269,64,8713,66],[9269,65,8713,67],[9269,67,8713,69],[9269,71,8713,73],[9269,72,8713,74,"auth"],[9269,76,8713,78],[9269,78,8713,80],[9269,94,8713,96],[9269,95,8713,97],[9269,129,8713,131],[9269,130,8713,132],[9270,6,8714,8,"_assert"],[9270,13,8714,15],[9270,14,8714,16],[9270,21,8714,23,"document"],[9270,29,8714,31],[9270,34,8714,36],[9270,45,8714,47],[9270,47,8714,49],[9270,51,8714,53],[9270,52,8714,54,"auth"],[9270,56,8714,58],[9270,58,8714,60],[9270,103,8714,105],[9270,104,8714,106],[9270,147,8714,149],[9270,148,8714,150],[9271,4,8715,4],[9272,4,8716,4,"makeTokenCallback"],[9272,21,8716,21,"makeTokenCallback"],[9272,22,8716,22,"existing"],[9272,30,8716,30],[9272,32,8716,32],[9273,6,8717,8],[9273,13,8717,15,"token"],[9273,18,8717,20],[9273,22,8717,24],[9274,8,8718,12],[9274,12,8718,16],[9274,13,8718,17,"tokenChangeListeners"],[9274,33,8718,37],[9274,34,8718,38,"forEach"],[9274,41,8718,45],[9274,42,8718,46,"listener"],[9274,50,8718,54],[9274,54,8718,58,"listener"],[9274,62,8718,66],[9274,63,8718,67,"token"],[9274,68,8718,72],[9274,69,8718,73],[9274,70,8718,74],[9275,8,8719,12],[9275,12,8719,16],[9275,19,8719,23,"existing"],[9275,27,8719,31],[9275,32,8719,36],[9275,42,8719,46],[9275,44,8719,48],[9276,10,8720,16,"existing"],[9276,18,8720,24],[9276,19,8720,25,"token"],[9276,24,8720,30],[9276,25,8720,31],[9277,8,8721,12],[9277,9,8721,13],[9277,15,8722,17],[9277,19,8722,21],[9277,26,8722,28,"existing"],[9277,34,8722,36],[9277,39,8722,41],[9277,47,8722,49],[9277,49,8722,51],[9278,10,8723,16],[9278,16,8723,22,"globalFunc"],[9278,26,8723,32],[9278,29,8723,35,"_window"],[9278,36,8723,42],[9278,37,8723,43],[9278,38,8723,44],[9278,39,8723,45,"existing"],[9278,47,8723,53],[9278,48,8723,54],[9279,10,8724,16],[9279,14,8724,20],[9279,21,8724,27,"globalFunc"],[9279,31,8724,37],[9279,36,8724,42],[9279,46,8724,52],[9279,48,8724,54],[9280,12,8725,20,"globalFunc"],[9280,22,8725,30],[9280,23,8725,31,"token"],[9280,28,8725,36],[9280,29,8725,37],[9281,10,8726,16],[9282,8,8727,12],[9283,6,8728,8],[9283,7,8728,9],[9284,4,8729,4],[9285,4,8730,4,"assertNotDestroyed"],[9285,22,8730,22,"assertNotDestroyed"],[9285,23,8730,22],[9285,25,8730,25],[9286,6,8731,8,"_assert"],[9286,13,8731,15],[9286,14,8731,16],[9286,15,8731,17],[9286,19,8731,21],[9286,20,8731,22,"destroyed"],[9286,29,8731,31],[9286,31,8731,33],[9286,35,8731,37],[9286,36,8731,38,"auth"],[9286,40,8731,42],[9286,42,8731,44],[9286,58,8731,60],[9286,59,8731,61],[9286,93,8731,95],[9286,94,8731,96],[9287,4,8732,4],[9288,4,8733,4],[9288,10,8733,10,"makeRenderPromise"],[9288,27,8733,27,"makeRenderPromise"],[9288,28,8733,27],[9288,30,8733,30],[9289,6,8734,8],[9289,12,8734,14],[9289,16,8734,18],[9289,17,8734,19,"init"],[9289,21,8734,23],[9289,22,8734,24],[9289,23,8734,25],[9290,6,8735,8],[9290,10,8735,12],[9290,11,8735,13],[9290,15,8735,17],[9290,16,8735,18,"widgetId"],[9290,24,8735,26],[9290,26,8735,28],[9291,8,8736,12],[9291,12,8736,16,"container"],[9291,21,8736,25],[9291,24,8736,28],[9291,28,8736,32],[9291,29,8736,33,"container"],[9291,38,8736,42],[9292,8,8737,12],[9292,12,8737,16],[9292,13,8737,17],[9292,17,8737,21],[9292,18,8737,22,"isInvisible"],[9292,29,8737,33],[9292,31,8737,35],[9293,10,8738,16],[9293,16,8738,22,"guaranteedEmpty"],[9293,31,8738,37],[9293,34,8738,40,"document"],[9293,42,8738,48],[9293,43,8738,49,"createElement"],[9293,56,8738,62],[9293,57,8738,63],[9293,62,8738,68],[9293,63,8738,69],[9294,10,8739,16,"container"],[9294,19,8739,25],[9294,20,8739,26,"appendChild"],[9294,31,8739,37],[9294,32,8739,38,"guaranteedEmpty"],[9294,47,8739,53],[9294,48,8739,54],[9295,10,8740,16,"container"],[9295,19,8740,25],[9295,22,8740,28,"guaranteedEmpty"],[9295,37,8740,43],[9296,8,8741,12],[9297,8,8742,12],[9297,12,8742,16],[9297,13,8742,17,"widgetId"],[9297,21,8742,25],[9297,24,8742,28],[9297,28,8742,32],[9297,29,8742,33,"getAssertedRecaptcha"],[9297,49,8742,53],[9297,50,8742,54],[9297,51,8742,55],[9297,52,8742,56,"render"],[9297,58,8742,62],[9297,59,8742,63,"container"],[9297,68,8742,72],[9297,70,8742,74],[9297,74,8742,78],[9297,75,8742,79,"parameters"],[9297,85,8742,89],[9297,86,8742,90],[9298,6,8743,8],[9299,6,8744,8],[9299,13,8744,15],[9299,17,8744,19],[9299,18,8744,20,"widgetId"],[9299,26,8744,28],[9300,4,8745,4],[9301,4,8746,4],[9301,10,8746,10,"init"],[9301,14,8746,14,"init"],[9301,15,8746,14],[9301,17,8746,17],[9302,6,8747,8,"_assert"],[9302,13,8747,15],[9302,14,8747,16,"_isHttpOrHttps"],[9302,28,8747,30],[9302,29,8747,31],[9302,30,8747,32],[9302,34,8747,36],[9302,35,8747,37,"_isWorker"],[9302,44,8747,46],[9302,45,8747,47],[9302,46,8747,48],[9302,48,8747,50],[9302,52,8747,54],[9302,53,8747,55,"auth"],[9302,57,8747,59],[9302,59,8747,61],[9302,75,8747,77],[9302,76,8747,78],[9302,110,8747,112],[9302,111,8747,113],[9303,6,8748,8],[9303,12,8748,14,"domReady"],[9303,20,8748,22],[9303,21,8748,23],[9303,22,8748,24],[9304,6,8749,8],[9304,10,8749,12],[9304,11,8749,13,"recaptcha"],[9304,20,8749,22],[9304,23,8749,25],[9304,29,8749,31],[9304,33,8749,35],[9304,34,8749,36,"_recaptchaLoader"],[9304,50,8749,52],[9304,51,8749,53,"load"],[9304,55,8749,57],[9304,56,8749,58],[9304,60,8749,62],[9304,61,8749,63,"auth"],[9304,65,8749,67],[9304,67,8749,69],[9304,71,8749,73],[9304,72,8749,74,"auth"],[9304,76,8749,78],[9304,77,8749,79,"languageCode"],[9304,89,8749,91],[9304,93,8749,95,"undefined"],[9304,102,8749,104],[9304,103,8749,105],[9305,6,8750,8],[9305,12,8750,14,"siteKey"],[9305,19,8750,21],[9305,22,8750,24],[9305,28,8750,30,"getRecaptchaParams"],[9305,46,8750,48],[9305,47,8750,49],[9305,51,8750,53],[9305,52,8750,54,"auth"],[9305,56,8750,58],[9305,57,8750,59],[9306,6,8751,8,"_assert"],[9306,13,8751,15],[9306,14,8751,16,"siteKey"],[9306,21,8751,23],[9306,23,8751,25],[9306,27,8751,29],[9306,28,8751,30,"auth"],[9306,32,8751,34],[9306,34,8751,36],[9306,50,8751,52],[9306,51,8751,53],[9306,85,8751,87],[9306,86,8751,88],[9307,6,8752,8],[9307,10,8752,12],[9307,11,8752,13,"parameters"],[9307,21,8752,23],[9307,22,8752,24,"sitekey"],[9307,29,8752,31],[9307,32,8752,34,"siteKey"],[9307,39,8752,41],[9308,4,8753,4],[9309,4,8754,4,"getAssertedRecaptcha"],[9309,24,8754,24,"getAssertedRecaptcha"],[9309,25,8754,24],[9309,27,8754,27],[9310,6,8755,8,"_assert"],[9310,13,8755,15],[9310,14,8755,16],[9310,18,8755,20],[9310,19,8755,21,"recaptcha"],[9310,28,8755,30],[9310,30,8755,32],[9310,34,8755,36],[9310,35,8755,37,"auth"],[9310,39,8755,41],[9310,41,8755,43],[9310,57,8755,59],[9310,58,8755,60],[9310,92,8755,94],[9310,93,8755,95],[9311,6,8756,8],[9311,13,8756,15],[9311,17,8756,19],[9311,18,8756,20,"recaptcha"],[9311,27,8756,29],[9312,4,8757,4],[9313,2,8758,0],[9314,2,8759,0],[9314,11,8759,9,"domReady"],[9314,19,8759,17,"domReady"],[9314,20,8759,17],[9314,22,8759,20],[9315,4,8760,4],[9315,8,8760,8,"resolver"],[9315,16,8760,16],[9315,19,8760,19],[9315,23,8760,23],[9316,4,8761,4],[9316,11,8761,11],[9316,15,8761,15,"Promise"],[9316,22,8761,22],[9316,23,8761,23,"resolve"],[9316,30,8761,30],[9316,34,8761,34],[9317,6,8762,8],[9317,10,8762,12,"document"],[9317,18,8762,20],[9317,19,8762,21,"readyState"],[9317,29,8762,31],[9317,34,8762,36],[9317,44,8762,46],[9317,46,8762,48],[9318,8,8763,12,"resolve"],[9318,15,8763,19],[9318,16,8763,20],[9318,17,8763,21],[9319,8,8764,12],[9320,6,8765,8],[9321,6,8766,8],[9322,6,8767,8],[9323,6,8768,8],[9324,6,8769,8,"resolver"],[9324,14,8769,16],[9324,17,8769,19,"resolver"],[9324,18,8769,19],[9324,23,8769,25,"resolve"],[9324,30,8769,32],[9324,31,8769,33],[9324,32,8769,34],[9325,6,8770,8,"window"],[9325,12,8770,14],[9325,13,8770,15,"addEventListener"],[9325,29,8770,31],[9325,30,8770,32],[9325,36,8770,38],[9325,38,8770,40,"resolver"],[9325,46,8770,48],[9325,47,8770,49],[9326,4,8771,4],[9326,5,8771,5],[9326,6,8771,6],[9326,7,8771,7,"catch"],[9326,12,8771,12],[9326,13,8771,13,"e"],[9326,14,8771,14],[9326,18,8771,18],[9327,6,8772,8],[9327,10,8772,12,"resolver"],[9327,18,8772,20],[9327,20,8772,22],[9328,8,8773,12,"window"],[9328,14,8773,18],[9328,15,8773,19,"removeEventListener"],[9328,34,8773,38],[9328,35,8773,39],[9328,41,8773,45],[9328,43,8773,47,"resolver"],[9328,51,8773,55],[9328,52,8773,56],[9329,6,8774,8],[9330,6,8775,8],[9330,12,8775,14,"e"],[9330,13,8775,15],[9331,4,8776,4],[9331,5,8776,5],[9331,6,8776,6],[9332,2,8777,0],[9334,2,8779,0],[9335,0,8780,0],[9336,0,8781,0],[9337,0,8782,0],[9338,0,8783,0],[9339,0,8784,0],[9340,0,8785,0],[9341,0,8786,0],[9342,0,8787,0],[9343,0,8788,0],[9344,0,8789,0],[9345,0,8790,0],[9346,0,8791,0],[9347,0,8792,0],[9348,0,8793,0],[9349,0,8794,0],[9350,2,8795,0],[9350,8,8795,6,"ConfirmationResultImpl"],[9350,30,8795,28],[9350,31,8795,29],[9351,4,8796,4,"constructor"],[9351,15,8796,15,"constructor"],[9351,16,8796,16,"verificationId"],[9351,30,8796,30],[9351,32,8796,32,"onConfirmation"],[9351,46,8796,46],[9351,48,8796,48],[9352,6,8797,8],[9352,10,8797,12],[9352,11,8797,13,"verificationId"],[9352,25,8797,27],[9352,28,8797,30,"verificationId"],[9352,42,8797,44],[9353,6,8798,8],[9353,10,8798,12],[9353,11,8798,13,"onConfirmation"],[9353,25,8798,27],[9353,28,8798,30,"onConfirmation"],[9353,42,8798,44],[9354,4,8799,4],[9355,4,8800,4,"confirm"],[9355,11,8800,11,"confirm"],[9355,12,8800,12,"verificationCode"],[9355,28,8800,28],[9355,30,8800,30],[9356,6,8801,8],[9356,12,8801,14,"authCredential"],[9356,26,8801,28],[9356,29,8801,31,"PhoneAuthCredential"],[9356,48,8801,50],[9356,49,8801,51,"_fromVerification"],[9356,66,8801,68],[9356,67,8801,69],[9356,71,8801,73],[9356,72,8801,74,"verificationId"],[9356,86,8801,88],[9356,88,8801,90,"verificationCode"],[9356,104,8801,106],[9356,105,8801,107],[9357,6,8802,8],[9357,13,8802,15],[9357,17,8802,19],[9357,18,8802,20,"onConfirmation"],[9357,32,8802,34],[9357,33,8802,35,"authCredential"],[9357,47,8802,49],[9357,48,8802,50],[9358,4,8803,4],[9359,2,8804,0],[9360,2,8805,0],[9361,0,8806,0],[9362,0,8807,0],[9363,0,8808,0],[9364,0,8809,0],[9365,0,8810,0],[9366,0,8811,0],[9367,0,8812,0],[9368,0,8813,0],[9369,0,8814,0],[9370,0,8815,0],[9371,0,8816,0],[9372,0,8817,0],[9373,0,8818,0],[9374,0,8819,0],[9375,0,8820,0],[9376,0,8821,0],[9377,0,8822,0],[9378,0,8823,0],[9379,0,8824,0],[9380,0,8825,0],[9381,0,8826,0],[9382,0,8827,0],[9383,0,8828,0],[9384,0,8829,0],[9385,0,8830,0],[9386,0,8831,0],[9387,0,8832,0],[9388,0,8833,0],[9389,0,8834,0],[9390,0,8835,0],[9391,0,8836,0],[9392,0,8837,0],[9393,0,8838,0],[9394,0,8839,0],[9395,0,8840,0],[9396,2,8841,0],[9396,17,8841,15,"signInWithPhoneNumber"],[9396,38,8841,36,"signInWithPhoneNumber"],[9396,39,8841,37,"auth"],[9396,43,8841,41],[9396,45,8841,43,"phoneNumber"],[9396,56,8841,54],[9396,58,8841,56,"appVerifier"],[9396,69,8841,67],[9396,71,8841,69],[9397,4,8842,4],[9397,8,8842,8],[9397,12,8842,8,"_isFirebaseServerApp"],[9397,24,8842,28],[9397,25,8842,28,"_isFirebaseServerApp"],[9397,45,8842,28],[9397,47,8842,29,"auth"],[9397,51,8842,33],[9397,52,8842,34,"app"],[9397,55,8842,37],[9397,56,8842,38],[9397,58,8842,40],[9398,6,8843,8],[9398,13,8843,15,"Promise"],[9398,20,8843,22],[9398,21,8843,23,"reject"],[9398,27,8843,29],[9398,28,8843,30,"_serverAppCurrentUserOperationNotSupportedError"],[9398,75,8843,77],[9398,76,8843,78,"auth"],[9398,80,8843,82],[9398,81,8843,83],[9398,82,8843,84],[9399,4,8844,4],[9400,4,8845,4],[9400,10,8845,10,"authInternal"],[9400,22,8845,22],[9400,25,8845,25,"_castAuth"],[9400,34,8845,34],[9400,35,8845,35,"auth"],[9400,39,8845,39],[9400,40,8845,40],[9401,4,8846,4],[9401,10,8846,10,"verificationId"],[9401,24,8846,24],[9401,27,8846,27],[9401,33,8846,33,"_verifyPhoneNumber"],[9401,51,8846,51],[9401,52,8846,52,"authInternal"],[9401,64,8846,64],[9401,66,8846,66,"phoneNumber"],[9401,77,8846,77],[9401,79,8846,79],[9401,83,8846,79,"getModularInstance"],[9401,96,8846,97],[9401,97,8846,97,"getModularInstance"],[9401,115,8846,97],[9401,117,8846,98,"appVerifier"],[9401,128,8846,109],[9401,129,8846,110],[9401,130,8846,111],[9402,4,8847,4],[9402,11,8847,11],[9402,15,8847,15,"ConfirmationResultImpl"],[9402,37,8847,37],[9402,38,8847,38,"verificationId"],[9402,52,8847,52],[9402,54,8847,54,"cred"],[9402,58,8847,58],[9402,62,8847,62,"signInWithCredential"],[9402,82,8847,82],[9402,83,8847,83,"authInternal"],[9402,95,8847,95],[9402,97,8847,97,"cred"],[9402,101,8847,101],[9402,102,8847,102],[9402,103,8847,103],[9403,2,8848,0],[9404,2,8849,0],[9405,0,8850,0],[9406,0,8851,0],[9407,0,8852,0],[9408,0,8853,0],[9409,0,8854,0],[9410,0,8855,0],[9411,0,8856,0],[9412,0,8857,0],[9413,0,8858,0],[9414,0,8859,0],[9415,0,8860,0],[9416,2,8861,0],[9416,17,8861,15,"linkWithPhoneNumber"],[9416,36,8861,34,"linkWithPhoneNumber"],[9416,37,8861,35,"user"],[9416,41,8861,39],[9416,43,8861,41,"phoneNumber"],[9416,54,8861,52],[9416,56,8861,54,"appVerifier"],[9416,67,8861,65],[9416,69,8861,67],[9417,4,8862,4],[9417,10,8862,10,"userInternal"],[9417,22,8862,22],[9417,25,8862,25],[9417,29,8862,25,"getModularInstance"],[9417,42,8862,43],[9417,43,8862,43,"getModularInstance"],[9417,61,8862,43],[9417,63,8862,44,"user"],[9417,67,8862,48],[9417,68,8862,49],[9418,4,8863,4],[9418,10,8863,10,"_assertLinkedStatus"],[9418,29,8863,29],[9418,30,8863,30],[9418,35,8863,35],[9418,37,8863,37,"userInternal"],[9418,49,8863,49],[9418,51,8863,51],[9418,58,8863,58],[9418,59,8863,59],[9418,81,8863,81],[9418,82,8863,82],[9419,4,8864,4],[9419,10,8864,10,"verificationId"],[9419,24,8864,24],[9419,27,8864,27],[9419,33,8864,33,"_verifyPhoneNumber"],[9419,51,8864,51],[9419,52,8864,52,"userInternal"],[9419,64,8864,64],[9419,65,8864,65,"auth"],[9419,69,8864,69],[9419,71,8864,71,"phoneNumber"],[9419,82,8864,82],[9419,84,8864,84],[9419,88,8864,84,"getModularInstance"],[9419,101,8864,102],[9419,102,8864,102,"getModularInstance"],[9419,120,8864,102],[9419,122,8864,103,"appVerifier"],[9419,133,8864,114],[9419,134,8864,115],[9419,135,8864,116],[9420,4,8865,4],[9420,11,8865,11],[9420,15,8865,15,"ConfirmationResultImpl"],[9420,37,8865,37],[9420,38,8865,38,"verificationId"],[9420,52,8865,52],[9420,54,8865,54,"cred"],[9420,58,8865,58],[9420,62,8865,62,"linkWithCredential"],[9420,80,8865,80],[9420,81,8865,81,"userInternal"],[9420,93,8865,93],[9420,95,8865,95,"cred"],[9420,99,8865,99],[9420,100,8865,100],[9420,101,8865,101],[9421,2,8866,0],[9422,2,8867,0],[9423,0,8868,0],[9424,0,8869,0],[9425,0,8870,0],[9426,0,8871,0],[9427,0,8872,0],[9428,0,8873,0],[9429,0,8874,0],[9430,0,8875,0],[9431,0,8876,0],[9432,0,8877,0],[9433,0,8878,0],[9434,0,8879,0],[9435,0,8880,0],[9436,0,8881,0],[9437,2,8882,0],[9437,17,8882,15,"reauthenticateWithPhoneNumber"],[9437,46,8882,44,"reauthenticateWithPhoneNumber"],[9437,47,8882,45,"user"],[9437,51,8882,49],[9437,53,8882,51,"phoneNumber"],[9437,64,8882,62],[9437,66,8882,64,"appVerifier"],[9437,77,8882,75],[9437,79,8882,77],[9438,4,8883,4],[9438,10,8883,10,"userInternal"],[9438,22,8883,22],[9438,25,8883,25],[9438,29,8883,25,"getModularInstance"],[9438,42,8883,43],[9438,43,8883,43,"getModularInstance"],[9438,61,8883,43],[9438,63,8883,44,"user"],[9438,67,8883,48],[9438,68,8883,49],[9439,4,8884,4],[9439,8,8884,8],[9439,12,8884,8,"_isFirebaseServerApp"],[9439,24,8884,28],[9439,25,8884,28,"_isFirebaseServerApp"],[9439,45,8884,28],[9439,47,8884,29,"userInternal"],[9439,59,8884,41],[9439,60,8884,42,"auth"],[9439,64,8884,46],[9439,65,8884,47,"app"],[9439,68,8884,50],[9439,69,8884,51],[9439,71,8884,53],[9440,6,8885,8],[9440,13,8885,15,"Promise"],[9440,20,8885,22],[9440,21,8885,23,"reject"],[9440,27,8885,29],[9440,28,8885,30,"_serverAppCurrentUserOperationNotSupportedError"],[9440,75,8885,77],[9440,76,8885,78,"userInternal"],[9440,88,8885,90],[9440,89,8885,91,"auth"],[9440,93,8885,95],[9440,94,8885,96],[9440,95,8885,97],[9441,4,8886,4],[9442,4,8887,4],[9442,10,8887,10,"verificationId"],[9442,24,8887,24],[9442,27,8887,27],[9442,33,8887,33,"_verifyPhoneNumber"],[9442,51,8887,51],[9442,52,8887,52,"userInternal"],[9442,64,8887,64],[9442,65,8887,65,"auth"],[9442,69,8887,69],[9442,71,8887,71,"phoneNumber"],[9442,82,8887,82],[9442,84,8887,84],[9442,88,8887,84,"getModularInstance"],[9442,101,8887,102],[9442,102,8887,102,"getModularInstance"],[9442,120,8887,102],[9442,122,8887,103,"appVerifier"],[9442,133,8887,114],[9442,134,8887,115],[9442,135,8887,116],[9443,4,8888,4],[9443,11,8888,11],[9443,15,8888,15,"ConfirmationResultImpl"],[9443,37,8888,37],[9443,38,8888,38,"verificationId"],[9443,52,8888,52],[9443,54,8888,54,"cred"],[9443,58,8888,58],[9443,62,8888,62,"reauthenticateWithCredential"],[9443,90,8888,90],[9443,91,8888,91,"userInternal"],[9443,103,8888,103],[9443,105,8888,105,"cred"],[9443,109,8888,109],[9443,110,8888,110],[9443,111,8888,111],[9444,2,8889,0],[9445,2,8890,0],[9446,0,8891,0],[9447,0,8892,0],[9448,0,8893,0],[9449,2,8894,0],[9449,17,8894,15,"_verifyPhoneNumber"],[9449,35,8894,33,"_verifyPhoneNumber"],[9449,36,8894,34,"auth"],[9449,40,8894,38],[9449,42,8894,40,"options"],[9449,49,8894,47],[9449,51,8894,49,"verifier"],[9449,59,8894,57],[9449,61,8894,59],[9450,4,8895,4],[9450,8,8895,8],[9450,9,8895,9,"auth"],[9450,13,8895,13],[9450,14,8895,14,"_getRecaptchaConfig"],[9450,33,8895,33],[9450,34,8895,34],[9450,35,8895,35],[9450,37,8895,37],[9451,6,8896,8],[9451,10,8896,12],[9452,8,8897,12],[9452,14,8897,18,"_initializeRecaptchaConfig"],[9452,40,8897,44],[9452,41,8897,45,"auth"],[9452,45,8897,49],[9452,46,8897,50],[9453,6,8898,8],[9453,7,8898,9],[9453,8,8899,8],[9453,15,8899,15,"error"],[9453,20,8899,20],[9453,22,8899,22],[9454,8,8900,12],[9455,8,8901,12],[9456,8,8902,12],[9457,8,8903,12],[9458,8,8904,12,"console"],[9458,15,8904,19],[9458,16,8904,20,"log"],[9458,19,8904,23],[9458,20,8904,24],[9458,113,8904,117],[9458,114,8904,118],[9459,6,8905,8],[9460,4,8906,4],[9461,4,8907,4],[9461,8,8907,8],[9462,6,8908,8],[9462,10,8908,12,"phoneInfoOptions"],[9462,26,8908,28],[9463,6,8909,8],[9463,10,8909,12],[9463,17,8909,19,"options"],[9463,24,8909,26],[9463,29,8909,31],[9463,37,8909,39],[9463,39,8909,41],[9464,8,8910,12,"phoneInfoOptions"],[9464,24,8910,28],[9464,27,8910,31],[9465,10,8911,16,"phoneNumber"],[9465,21,8911,27],[9465,23,8911,29,"options"],[9466,8,8912,12],[9466,9,8912,13],[9467,6,8913,8],[9467,7,8913,9],[9467,13,8914,13],[9468,8,8915,12,"phoneInfoOptions"],[9468,24,8915,28],[9468,27,8915,31,"options"],[9468,34,8915,38],[9469,6,8916,8],[9470,6,8917,8],[9470,10,8917,12],[9470,19,8917,21],[9470,23,8917,25,"phoneInfoOptions"],[9470,39,8917,41],[9470,41,8917,43],[9471,8,8918,12],[9471,14,8918,18,"session"],[9471,21,8918,25],[9471,24,8918,28,"phoneInfoOptions"],[9471,40,8918,44],[9471,41,8918,45,"session"],[9471,48,8918,52],[9472,8,8919,12],[9472,12,8919,16],[9472,25,8919,29],[9472,29,8919,33,"phoneInfoOptions"],[9472,45,8919,49],[9472,47,8919,51],[9473,10,8920,16,"_assert"],[9473,17,8920,23],[9473,18,8920,24,"session"],[9473,25,8920,31],[9473,26,8920,32,"type"],[9473,30,8920,36],[9473,35,8920,41],[9473,43,8920,49],[9473,44,8920,50],[9473,81,8920,87,"auth"],[9473,85,8920,91],[9473,87,8920,93],[9473,103,8920,109],[9473,104,8920,110],[9473,138,8920,144],[9473,139,8920,145],[9474,10,8921,16],[9474,16,8921,22,"startPhoneMfaEnrollmentRequest"],[9474,46,8921,52],[9474,49,8921,55],[9475,12,8922,20,"idToken"],[9475,19,8922,27],[9475,21,8922,29,"session"],[9475,28,8922,36],[9475,29,8922,37,"credential"],[9475,39,8922,47],[9476,12,8923,20,"phoneEnrollmentInfo"],[9476,31,8923,39],[9476,33,8923,41],[9477,14,8924,24,"phoneNumber"],[9477,25,8924,35],[9477,27,8924,37,"phoneInfoOptions"],[9477,43,8924,53],[9477,44,8924,54,"phoneNumber"],[9477,55,8924,65],[9478,14,8925,24,"clientType"],[9478,24,8925,34],[9478,26,8925,36],[9478,43,8925,53],[9478,44,8925,54],[9479,12,8926,20],[9480,10,8927,16],[9480,11,8927,17],[9481,10,8928,16],[9481,16,8928,22,"startEnrollPhoneMfaActionCallback"],[9481,49,8928,55],[9481,52,8928,58],[9481,58,8928,58,"startEnrollPhoneMfaActionCallback"],[9481,59,8928,65,"authInstance"],[9481,71,8928,77],[9481,73,8928,79,"request"],[9481,80,8928,86],[9481,85,8928,91],[9482,12,8929,20],[9483,12,8930,20],[9483,16,8930,24,"request"],[9483,23,8930,31],[9483,24,8930,32,"phoneEnrollmentInfo"],[9483,43,8930,51],[9483,44,8930,52,"captchaResponse"],[9483,59,8930,67],[9483,64,8930,72,"FAKE_TOKEN"],[9483,74,8930,82],[9483,76,8930,84],[9484,14,8931,24,"_assert"],[9484,21,8931,31],[9484,22,8931,32,"verifier"],[9484,30,8931,40],[9484,32,8931,42,"type"],[9484,36,8931,46],[9484,41,8931,51,"RECAPTCHA_VERIFIER_TYPE"],[9484,64,8931,74],[9484,66,8931,76,"authInstance"],[9484,78,8931,88],[9484,80,8931,90],[9484,96,8931,106],[9484,97,8931,107],[9484,131,8931,141],[9484,132,8931,142],[9485,14,8932,24],[9485,20,8932,30,"requestWithRecaptchaV2"],[9485,42,8932,52],[9485,45,8932,55],[9485,51,8932,61,"injectRecaptchaV2Token"],[9485,73,8932,83],[9485,74,8932,84,"authInstance"],[9485,86,8932,96],[9485,88,8932,98,"request"],[9485,95,8932,105],[9485,97,8932,107,"verifier"],[9485,105,8932,115],[9485,106,8932,116],[9486,14,8933,24],[9486,21,8933,31,"startEnrollPhoneMfa"],[9486,40,8933,50],[9486,41,8933,51,"authInstance"],[9486,53,8933,63],[9486,55,8933,65,"requestWithRecaptchaV2"],[9486,77,8933,87],[9486,78,8933,88],[9487,12,8934,20],[9488,12,8935,20],[9488,19,8935,27,"startEnrollPhoneMfa"],[9488,38,8935,46],[9488,39,8935,47,"authInstance"],[9488,51,8935,59],[9488,53,8935,61,"request"],[9488,60,8935,68],[9488,61,8935,69],[9489,10,8936,16],[9489,11,8936,17],[9490,10,8937,16],[9490,16,8937,22,"startPhoneMfaEnrollmentResponse"],[9490,47,8937,53],[9490,50,8937,56,"handleRecaptchaFlow"],[9490,69,8937,75],[9490,70,8937,76,"auth"],[9490,74,8937,80],[9490,76,8937,82,"startPhoneMfaEnrollmentRequest"],[9490,106,8937,112],[9490,108,8937,114],[9490,126,8937,132],[9490,127,8937,133],[9490,173,8937,179,"startEnrollPhoneMfaActionCallback"],[9490,206,8937,212],[9490,208,8937,214],[9490,224,8937,230],[9490,225,8937,231],[9490,267,8937,273],[9490,268,8937,274],[9491,10,8938,16],[9491,16,8938,22,"response"],[9491,24,8938,30],[9491,27,8938,33],[9491,33,8938,39,"startPhoneMfaEnrollmentResponse"],[9491,64,8938,70],[9491,65,8938,71,"catch"],[9491,70,8938,76],[9491,71,8938,77,"error"],[9491,76,8938,82],[9491,80,8938,86],[9492,12,8939,20],[9492,19,8939,27,"Promise"],[9492,26,8939,34],[9492,27,8939,35,"reject"],[9492,33,8939,41],[9492,34,8939,42,"error"],[9492,39,8939,47],[9492,40,8939,48],[9493,10,8940,16],[9493,11,8940,17],[9493,12,8940,18],[9494,10,8941,16],[9494,17,8941,23,"response"],[9494,25,8941,31],[9494,26,8941,32,"phoneSessionInfo"],[9494,42,8941,48],[9494,43,8941,49,"sessionInfo"],[9494,54,8941,60],[9495,8,8942,12],[9495,9,8942,13],[9495,15,8943,17],[9496,10,8944,16,"_assert"],[9496,17,8944,23],[9496,18,8944,24,"session"],[9496,25,8944,31],[9496,26,8944,32,"type"],[9496,30,8944,36],[9496,35,8944,41],[9496,43,8944,49],[9496,44,8944,50],[9496,82,8944,88,"auth"],[9496,86,8944,92],[9496,88,8944,94],[9496,104,8944,110],[9496,105,8944,111],[9496,139,8944,145],[9496,140,8944,146],[9497,10,8945,16],[9497,16,8945,22,"mfaEnrollmentId"],[9497,31,8945,37],[9497,34,8945,40,"phoneInfoOptions"],[9497,50,8945,56],[9497,51,8945,57,"multiFactorHint"],[9497,66,8945,72],[9497,68,8945,74,"uid"],[9497,71,8945,77],[9497,75,8946,20,"phoneInfoOptions"],[9497,91,8946,36],[9497,92,8946,37,"multiFactorUid"],[9497,106,8946,51],[9498,10,8947,16,"_assert"],[9498,17,8947,23],[9498,18,8947,24,"mfaEnrollmentId"],[9498,33,8947,39],[9498,35,8947,41,"auth"],[9498,39,8947,45],[9498,41,8947,47],[9498,68,8947,74],[9498,69,8947,75],[9498,105,8947,111],[9498,106,8947,112],[9499,10,8948,16],[9499,16,8948,22,"startPhoneMfaSignInRequest"],[9499,42,8948,48],[9499,45,8948,51],[9500,12,8949,20,"mfaPendingCredential"],[9500,32,8949,40],[9500,34,8949,42,"session"],[9500,41,8949,49],[9500,42,8949,50,"credential"],[9500,52,8949,60],[9501,12,8950,20,"mfaEnrollmentId"],[9501,27,8950,35],[9502,12,8951,20,"phoneSignInInfo"],[9502,27,8951,35],[9502,29,8951,37],[9503,14,8952,24,"clientType"],[9503,24,8952,34],[9503,26,8952,36],[9503,43,8952,53],[9503,44,8952,54],[9504,12,8953,20],[9505,10,8954,16],[9505,11,8954,17],[9506,10,8955,16],[9506,16,8955,22,"startSignInPhoneMfaActionCallback"],[9506,49,8955,55],[9506,52,8955,58],[9506,58,8955,58,"startSignInPhoneMfaActionCallback"],[9506,59,8955,65,"authInstance"],[9506,71,8955,77],[9506,73,8955,79,"request"],[9506,80,8955,86],[9506,85,8955,91],[9507,12,8956,20],[9508,12,8957,20],[9508,16,8957,24,"request"],[9508,23,8957,31],[9508,24,8957,32,"phoneSignInInfo"],[9508,39,8957,47],[9508,40,8957,48,"captchaResponse"],[9508,55,8957,63],[9508,60,8957,68,"FAKE_TOKEN"],[9508,70,8957,78],[9508,72,8957,80],[9509,14,8958,24,"_assert"],[9509,21,8958,31],[9509,22,8958,32,"verifier"],[9509,30,8958,40],[9509,32,8958,42,"type"],[9509,36,8958,46],[9509,41,8958,51,"RECAPTCHA_VERIFIER_TYPE"],[9509,64,8958,74],[9509,66,8958,76,"authInstance"],[9509,78,8958,88],[9509,80,8958,90],[9509,96,8958,106],[9509,97,8958,107],[9509,131,8958,141],[9509,132,8958,142],[9510,14,8959,24],[9510,20,8959,30,"requestWithRecaptchaV2"],[9510,42,8959,52],[9510,45,8959,55],[9510,51,8959,61,"injectRecaptchaV2Token"],[9510,73,8959,83],[9510,74,8959,84,"authInstance"],[9510,86,8959,96],[9510,88,8959,98,"request"],[9510,95,8959,105],[9510,97,8959,107,"verifier"],[9510,105,8959,115],[9510,106,8959,116],[9511,14,8960,24],[9511,21,8960,31,"startSignInPhoneMfa"],[9511,40,8960,50],[9511,41,8960,51,"authInstance"],[9511,53,8960,63],[9511,55,8960,65,"requestWithRecaptchaV2"],[9511,77,8960,87],[9511,78,8960,88],[9512,12,8961,20],[9513,12,8962,20],[9513,19,8962,27,"startSignInPhoneMfa"],[9513,38,8962,46],[9513,39,8962,47,"authInstance"],[9513,51,8962,59],[9513,53,8962,61,"request"],[9513,60,8962,68],[9513,61,8962,69],[9514,10,8963,16],[9514,11,8963,17],[9515,10,8964,16],[9515,16,8964,22,"startPhoneMfaSignInResponse"],[9515,43,8964,49],[9515,46,8964,52,"handleRecaptchaFlow"],[9515,65,8964,71],[9515,66,8964,72,"auth"],[9515,70,8964,76],[9515,72,8964,78,"startPhoneMfaSignInRequest"],[9515,98,8964,104],[9515,100,8964,106],[9515,114,8964,120],[9515,115,8964,121],[9515,157,8964,163,"startSignInPhoneMfaActionCallback"],[9515,190,8964,196],[9515,192,8964,198],[9515,208,8964,214],[9515,209,8964,215],[9515,251,8964,257],[9515,252,8964,258],[9516,10,8965,16],[9516,16,8965,22,"response"],[9516,24,8965,30],[9516,27,8965,33],[9516,33,8965,39,"startPhoneMfaSignInResponse"],[9516,60,8965,66],[9516,61,8965,67,"catch"],[9516,66,8965,72],[9516,67,8965,73,"error"],[9516,72,8965,78],[9516,76,8965,82],[9517,12,8966,20],[9517,19,8966,27,"Promise"],[9517,26,8966,34],[9517,27,8966,35,"reject"],[9517,33,8966,41],[9517,34,8966,42,"error"],[9517,39,8966,47],[9517,40,8966,48],[9518,10,8967,16],[9518,11,8967,17],[9518,12,8967,18],[9519,10,8968,16],[9519,17,8968,23,"response"],[9519,25,8968,31],[9519,26,8968,32,"phoneResponseInfo"],[9519,43,8968,49],[9519,44,8968,50,"sessionInfo"],[9519,55,8968,61],[9520,8,8969,12],[9521,6,8970,8],[9521,7,8970,9],[9521,13,8971,13],[9522,8,8972,12],[9522,14,8972,18,"sendPhoneVerificationCodeRequest"],[9522,46,8972,50],[9522,49,8972,53],[9523,10,8973,16,"phoneNumber"],[9523,21,8973,27],[9523,23,8973,29,"phoneInfoOptions"],[9523,39,8973,45],[9523,40,8973,46,"phoneNumber"],[9523,51,8973,57],[9524,10,8974,16,"clientType"],[9524,20,8974,26],[9524,22,8974,28],[9524,39,8974,45],[9524,40,8974,46],[9525,8,8975,12],[9525,9,8975,13],[9526,8,8976,12],[9526,14,8976,18,"sendPhoneVerificationCodeActionCallback"],[9526,53,8976,57],[9526,56,8976,60],[9526,62,8976,60,"sendPhoneVerificationCodeActionCallback"],[9526,63,8976,67,"authInstance"],[9526,75,8976,79],[9526,77,8976,81,"request"],[9526,84,8976,88],[9526,89,8976,93],[9527,10,8977,16],[9528,10,8978,16],[9528,14,8978,20,"request"],[9528,21,8978,27],[9528,22,8978,28,"captchaResponse"],[9528,37,8978,43],[9528,42,8978,48,"FAKE_TOKEN"],[9528,52,8978,58],[9528,54,8978,60],[9529,12,8979,20,"_assert"],[9529,19,8979,27],[9529,20,8979,28,"verifier"],[9529,28,8979,36],[9529,30,8979,38,"type"],[9529,34,8979,42],[9529,39,8979,47,"RECAPTCHA_VERIFIER_TYPE"],[9529,62,8979,70],[9529,64,8979,72,"authInstance"],[9529,76,8979,84],[9529,78,8979,86],[9529,94,8979,102],[9529,95,8979,103],[9529,129,8979,137],[9529,130,8979,138],[9530,12,8980,20],[9530,18,8980,26,"requestWithRecaptchaV2"],[9530,40,8980,48],[9530,43,8980,51],[9530,49,8980,57,"injectRecaptchaV2Token"],[9530,71,8980,79],[9530,72,8980,80,"authInstance"],[9530,84,8980,92],[9530,86,8980,94,"request"],[9530,93,8980,101],[9530,95,8980,103,"verifier"],[9530,103,8980,111],[9530,104,8980,112],[9531,12,8981,20],[9531,19,8981,27,"sendPhoneVerificationCode"],[9531,44,8981,52],[9531,45,8981,53,"authInstance"],[9531,57,8981,65],[9531,59,8981,67,"requestWithRecaptchaV2"],[9531,81,8981,89],[9531,82,8981,90],[9532,10,8982,16],[9533,10,8983,16],[9533,17,8983,23,"sendPhoneVerificationCode"],[9533,42,8983,48],[9533,43,8983,49,"authInstance"],[9533,55,8983,61],[9533,57,8983,63,"request"],[9533,64,8983,70],[9533,65,8983,71],[9534,8,8984,12],[9534,9,8984,13],[9535,8,8985,12],[9535,14,8985,18,"sendPhoneVerificationCodeResponse"],[9535,47,8985,51],[9535,50,8985,54,"handleRecaptchaFlow"],[9535,69,8985,73],[9535,70,8985,74,"auth"],[9535,74,8985,78],[9535,76,8985,80,"sendPhoneVerificationCodeRequest"],[9535,108,8985,112],[9535,110,8985,114],[9535,132,8985,136],[9535,133,8985,137],[9535,183,8985,187,"sendPhoneVerificationCodeActionCallback"],[9535,222,8985,226],[9535,224,8985,228],[9535,240,8985,244],[9535,241,8985,245],[9535,283,8985,287],[9535,284,8985,288],[9536,8,8986,12],[9536,14,8986,18,"response"],[9536,22,8986,26],[9536,25,8986,29],[9536,31,8986,35,"sendPhoneVerificationCodeResponse"],[9536,64,8986,68],[9536,65,8986,69,"catch"],[9536,70,8986,74],[9536,71,8986,75,"error"],[9536,76,8986,80],[9536,80,8986,84],[9537,10,8987,16],[9537,17,8987,23,"Promise"],[9537,24,8987,30],[9537,25,8987,31,"reject"],[9537,31,8987,37],[9537,32,8987,38,"error"],[9537,37,8987,43],[9537,38,8987,44],[9538,8,8988,12],[9538,9,8988,13],[9538,10,8988,14],[9539,8,8989,12],[9539,15,8989,19,"response"],[9539,23,8989,27],[9539,24,8989,28,"sessionInfo"],[9539,35,8989,39],[9540,6,8990,8],[9541,4,8991,4],[9541,5,8991,5],[9541,14,8992,12],[9542,6,8993,8,"verifier"],[9542,14,8993,16],[9542,16,8993,18,"_reset"],[9542,22,8993,24],[9542,23,8993,25],[9542,24,8993,26],[9543,4,8994,4],[9544,2,8995,0],[9545,2,8996,0],[9546,0,8997,0],[9547,0,8998,0],[9548,0,8999,0],[9549,0,9000,0],[9550,0,9001,0],[9551,0,9002,0],[9552,0,9003,0],[9553,0,9004,0],[9554,0,9005,0],[9555,0,9006,0],[9556,0,9007,0],[9557,0,9008,0],[9558,0,9009,0],[9559,0,9010,0],[9560,0,9011,0],[9561,0,9012,0],[9562,0,9013,0],[9563,0,9014,0],[9564,0,9015,0],[9565,0,9016,0],[9566,0,9017,0],[9567,0,9018,0],[9568,2,9019,0],[9568,17,9019,15,"updatePhoneNumber"],[9568,34,9019,32,"updatePhoneNumber"],[9568,35,9019,33,"user"],[9568,39,9019,37],[9568,41,9019,39,"credential"],[9568,51,9019,49],[9568,53,9019,51],[9569,4,9020,4],[9569,10,9020,10,"userInternal"],[9569,22,9020,22],[9569,25,9020,25],[9569,29,9020,25,"getModularInstance"],[9569,42,9020,43],[9569,43,9020,43,"getModularInstance"],[9569,61,9020,43],[9569,63,9020,44,"user"],[9569,67,9020,48],[9569,68,9020,49],[9570,4,9021,4],[9570,8,9021,8],[9570,12,9021,8,"_isFirebaseServerApp"],[9570,24,9021,28],[9570,25,9021,28,"_isFirebaseServerApp"],[9570,45,9021,28],[9570,47,9021,29,"userInternal"],[9570,59,9021,41],[9570,60,9021,42,"auth"],[9570,64,9021,46],[9570,65,9021,47,"app"],[9570,68,9021,50],[9570,69,9021,51],[9570,71,9021,53],[9571,6,9022,8],[9571,13,9022,15,"Promise"],[9571,20,9022,22],[9571,21,9022,23,"reject"],[9571,27,9022,29],[9571,28,9022,30,"_serverAppCurrentUserOperationNotSupportedError"],[9571,75,9022,77],[9571,76,9022,78,"userInternal"],[9571,88,9022,90],[9571,89,9022,91,"auth"],[9571,93,9022,95],[9571,94,9022,96],[9571,95,9022,97],[9572,4,9023,4],[9573,4,9024,4],[9573,10,9024,10,"_link$1"],[9573,17,9024,17],[9573,18,9024,18,"userInternal"],[9573,30,9024,30],[9573,32,9024,32,"credential"],[9573,42,9024,42],[9573,43,9024,43],[9574,2,9025,0],[9575,2,9026,0],[9576,2,9027,0],[9576,17,9027,15,"injectRecaptchaV2Token"],[9576,39,9027,37,"injectRecaptchaV2Token"],[9576,40,9027,38,"auth"],[9576,44,9027,42],[9576,46,9027,44,"request"],[9576,53,9027,51],[9576,55,9027,53,"recaptchaV2Verifier"],[9576,74,9027,72],[9576,76,9027,74],[9577,4,9028,4,"_assert"],[9577,11,9028,11],[9577,12,9028,12,"recaptchaV2Verifier"],[9577,31,9028,31],[9577,32,9028,32,"type"],[9577,36,9028,36],[9577,41,9028,41,"RECAPTCHA_VERIFIER_TYPE"],[9577,64,9028,64],[9577,66,9028,66,"auth"],[9577,70,9028,70],[9577,72,9028,72],[9577,88,9028,88],[9577,89,9028,89],[9577,123,9028,123],[9577,124,9028,124],[9578,4,9029,4],[9578,10,9029,10,"recaptchaV2Token"],[9578,26,9029,26],[9578,29,9029,29],[9578,35,9029,35,"recaptchaV2Verifier"],[9578,54,9029,54],[9578,55,9029,55,"verify"],[9578,61,9029,61],[9578,62,9029,62],[9578,63,9029,63],[9579,4,9030,4,"_assert"],[9579,11,9030,11],[9579,12,9030,12],[9579,19,9030,19,"recaptchaV2Token"],[9579,35,9030,35],[9579,40,9030,40],[9579,48,9030,48],[9579,50,9030,50,"auth"],[9579,54,9030,54],[9579,56,9030,56],[9579,72,9030,72],[9579,73,9030,73],[9579,107,9030,107],[9579,108,9030,108],[9580,4,9031,4],[9580,10,9031,10,"newRequest"],[9580,20,9031,20],[9580,23,9031,23],[9581,6,9031,25],[9581,9,9031,28,"request"],[9582,4,9031,36],[9582,5,9031,37],[9583,4,9032,4],[9583,8,9032,8],[9583,29,9032,29],[9583,33,9032,33,"newRequest"],[9583,43,9032,43],[9583,45,9032,45],[9584,6,9033,8],[9584,12,9033,14,"phoneNumber"],[9584,23,9033,25],[9584,26,9033,28,"newRequest"],[9584,36,9033,38],[9584,37,9033,39,"phoneEnrollmentInfo"],[9584,56,9033,58],[9584,57,9033,59,"phoneNumber"],[9584,68,9033,70],[9585,6,9034,8],[9585,12,9034,14,"captchaResponse"],[9585,27,9034,29],[9585,30,9034,32,"newRequest"],[9585,40,9034,42],[9585,41,9034,43,"phoneEnrollmentInfo"],[9585,60,9034,62],[9585,61,9034,63,"captchaResponse"],[9585,76,9034,78],[9586,6,9035,8],[9586,12,9035,14,"clientType"],[9586,22,9035,24],[9586,25,9035,27,"newRequest"],[9586,35,9035,37],[9586,36,9036,13,"phoneEnrollmentInfo"],[9586,55,9036,32],[9586,56,9036,33,"clientType"],[9586,66,9036,43],[9587,6,9037,8],[9587,12,9037,14,"recaptchaVersion"],[9587,28,9037,30],[9587,31,9037,33,"newRequest"],[9587,41,9037,43],[9587,42,9037,44,"phoneEnrollmentInfo"],[9587,61,9037,63],[9587,62,9037,64,"recaptchaVersion"],[9587,78,9037,80],[9588,6,9038,8,"Object"],[9588,12,9038,14],[9588,13,9038,15,"assign"],[9588,19,9038,21],[9588,20,9038,22,"newRequest"],[9588,30,9038,32],[9588,32,9038,34],[9589,8,9039,12],[9589,29,9039,33],[9589,31,9039,35],[9590,10,9040,16,"phoneNumber"],[9590,21,9040,27],[9591,10,9041,16,"recaptchaToken"],[9591,24,9041,30],[9591,26,9041,32,"recaptchaV2Token"],[9591,42,9041,48],[9592,10,9042,16,"captchaResponse"],[9592,25,9042,31],[9593,10,9043,16,"clientType"],[9593,20,9043,26],[9594,10,9044,16,"recaptchaVersion"],[9595,8,9045,12],[9596,6,9046,8],[9596,7,9046,9],[9596,8,9046,10],[9597,6,9047,8],[9597,13,9047,15,"newRequest"],[9597,23,9047,25],[9598,4,9048,4],[9598,5,9048,5],[9598,11,9049,9],[9598,15,9049,13],[9598,32,9049,30],[9598,36,9049,34,"newRequest"],[9598,46,9049,44],[9598,48,9049,46],[9599,6,9050,8],[9599,12,9050,14,"captchaResponse"],[9599,27,9050,29],[9599,30,9050,32,"newRequest"],[9599,40,9050,42],[9599,41,9050,43,"phoneSignInInfo"],[9599,56,9050,58],[9599,57,9050,59,"captchaResponse"],[9599,72,9050,74],[9600,6,9051,8],[9600,12,9051,14,"clientType"],[9600,22,9051,24],[9600,25,9051,27,"newRequest"],[9600,35,9051,37],[9600,36,9052,13,"phoneSignInInfo"],[9600,51,9052,28],[9600,52,9052,29,"clientType"],[9600,62,9052,39],[9601,6,9053,8],[9601,12,9053,14,"recaptchaVersion"],[9601,28,9053,30],[9601,31,9053,33,"newRequest"],[9601,41,9053,43],[9601,42,9053,44,"phoneSignInInfo"],[9601,57,9053,59],[9601,58,9053,60,"recaptchaVersion"],[9601,74,9053,76],[9602,6,9054,8,"Object"],[9602,12,9054,14],[9602,13,9054,15,"assign"],[9602,19,9054,21],[9602,20,9054,22,"newRequest"],[9602,30,9054,32],[9602,32,9054,34],[9603,8,9055,12],[9603,25,9055,29],[9603,27,9055,31],[9604,10,9056,16,"recaptchaToken"],[9604,24,9056,30],[9604,26,9056,32,"recaptchaV2Token"],[9604,42,9056,48],[9605,10,9057,16,"captchaResponse"],[9605,25,9057,31],[9606,10,9058,16,"clientType"],[9606,20,9058,26],[9607,10,9059,16,"recaptchaVersion"],[9608,8,9060,12],[9609,6,9061,8],[9609,7,9061,9],[9609,8,9061,10],[9610,6,9062,8],[9610,13,9062,15,"newRequest"],[9610,23,9062,25],[9611,4,9063,4],[9611,5,9063,5],[9611,11,9064,9],[9612,6,9065,8,"Object"],[9612,12,9065,14],[9612,13,9065,15,"assign"],[9612,19,9065,21],[9612,20,9065,22,"newRequest"],[9612,30,9065,32],[9612,32,9065,34],[9613,8,9065,36],[9613,24,9065,52],[9613,26,9065,54,"recaptchaV2Token"],[9614,6,9065,71],[9614,7,9065,72],[9614,8,9065,73],[9615,6,9066,8],[9615,13,9066,15,"newRequest"],[9615,23,9066,25],[9616,4,9067,4],[9617,2,9068,0],[9619,2,9070,0],[9620,0,9071,0],[9621,0,9072,0],[9622,0,9073,0],[9623,0,9074,0],[9624,0,9075,0],[9625,0,9076,0],[9626,0,9077,0],[9627,0,9078,0],[9628,0,9079,0],[9629,0,9080,0],[9630,0,9081,0],[9631,0,9082,0],[9632,0,9083,0],[9633,0,9084,0],[9634,0,9085,0],[9635,2,9086,0],[9636,0,9087,0],[9637,0,9088,0],[9638,0,9089,0],[9639,0,9090,0],[9640,0,9091,0],[9641,0,9092,0],[9642,0,9093,0],[9643,0,9094,0],[9644,0,9095,0],[9645,0,9096,0],[9646,0,9097,0],[9647,0,9098,0],[9648,0,9099,0],[9649,0,9100,0],[9650,0,9101,0],[9651,0,9102,0],[9652,0,9103,0],[9653,0,9104,0],[9654,2,9105,0],[9654,8,9105,6,"PhoneAuthProvider"],[9654,25,9105,23],[9654,26,9105,24],[9655,4,9106,4],[9656,0,9107,0],[9657,0,9108,0],[9658,0,9109,0],[9659,4,9110,4,"constructor"],[9659,15,9110,15,"constructor"],[9659,16,9110,16,"auth"],[9659,20,9110,20],[9659,22,9110,22],[9660,6,9111,8],[9661,6,9112,8],[9661,10,9112,12],[9661,11,9112,13,"providerId"],[9661,21,9112,23],[9661,24,9112,26,"PhoneAuthProvider"],[9661,41,9112,43],[9661,42,9112,44,"PROVIDER_ID"],[9661,53,9112,55],[9662,6,9113,8],[9662,10,9113,12],[9662,11,9113,13,"auth"],[9662,15,9113,17],[9662,18,9113,20,"_castAuth"],[9662,27,9113,29],[9662,28,9113,30,"auth"],[9662,32,9113,34],[9662,33,9113,35],[9663,4,9114,4],[9664,4,9115,4],[9665,0,9116,0],[9666,0,9117,0],[9667,0,9118,0],[9668,0,9119,0],[9669,0,9120,0],[9670,0,9121,0],[9671,0,9122,0],[9672,0,9123,0],[9673,0,9124,0],[9674,0,9125,0],[9675,0,9126,0],[9676,0,9127,0],[9677,0,9128,0],[9678,0,9129,0],[9679,0,9130,0],[9680,0,9131,0],[9681,0,9132,0],[9682,0,9133,0],[9683,0,9134,0],[9684,0,9135,0],[9685,0,9136,0],[9686,0,9137,0],[9687,0,9138,0],[9688,0,9139,0],[9689,0,9140,0],[9690,0,9141,0],[9691,0,9142,0],[9692,0,9143,0],[9693,0,9144,0],[9694,0,9145,0],[9695,0,9146,0],[9696,0,9147,0],[9697,4,9148,4,"verifyPhoneNumber"],[9697,21,9148,21,"verifyPhoneNumber"],[9697,22,9148,22,"phoneOptions"],[9697,34,9148,34],[9697,36,9148,36,"applicationVerifier"],[9697,55,9148,55],[9697,57,9148,57],[9698,6,9149,8],[9698,13,9149,15,"_verifyPhoneNumber"],[9698,31,9149,33],[9698,32,9149,34],[9698,36,9149,38],[9698,37,9149,39,"auth"],[9698,41,9149,43],[9698,43,9149,45,"phoneOptions"],[9698,55,9149,57],[9698,57,9149,59],[9698,61,9149,59,"getModularInstance"],[9698,74,9149,77],[9698,75,9149,77,"getModularInstance"],[9698,93,9149,77],[9698,95,9149,78,"applicationVerifier"],[9698,114,9149,97],[9698,115,9149,98],[9698,116,9149,99],[9699,4,9150,4],[9700,4,9151,4],[9701,0,9152,0],[9702,0,9153,0],[9703,0,9154,0],[9704,0,9155,0],[9705,0,9156,0],[9706,0,9157,0],[9707,0,9158,0],[9708,0,9159,0],[9709,0,9160,0],[9710,0,9161,0],[9711,0,9162,0],[9712,0,9163,0],[9713,0,9164,0],[9714,0,9165,0],[9715,0,9166,0],[9716,0,9167,0],[9717,0,9168,0],[9718,0,9169,0],[9719,0,9170,0],[9720,0,9171,0],[9721,0,9172,0],[9722,0,9173,0],[9723,0,9174,0],[9724,0,9175,0],[9725,0,9176,0],[9726,0,9177,0],[9727,4,9178,4],[9727,11,9178,11,"credential"],[9727,21,9178,21,"credential"],[9727,22,9178,22,"verificationId"],[9727,36,9178,36],[9727,38,9178,38,"verificationCode"],[9727,54,9178,54],[9727,56,9178,56],[9728,6,9179,8],[9728,13,9179,15,"PhoneAuthCredential"],[9728,32,9179,34],[9728,33,9179,35,"_fromVerification"],[9728,50,9179,52],[9728,51,9179,53,"verificationId"],[9728,65,9179,67],[9728,67,9179,69,"verificationCode"],[9728,83,9179,85],[9728,84,9179,86],[9729,4,9180,4],[9730,4,9181,4],[9731,0,9182,0],[9732,0,9183,0],[9733,0,9184,0],[9734,4,9185,4],[9734,11,9185,11,"credentialFromResult"],[9734,31,9185,31,"credentialFromResult"],[9734,32,9185,32,"userCredential"],[9734,46,9185,46],[9734,48,9185,48],[9735,6,9186,8],[9735,12,9186,14,"credential"],[9735,22,9186,24],[9735,25,9186,27,"userCredential"],[9735,39,9186,41],[9736,6,9187,8],[9736,13,9187,15,"PhoneAuthProvider"],[9736,30,9187,32],[9736,31,9187,33,"credentialFromTaggedObject"],[9736,57,9187,59],[9736,58,9187,60,"credential"],[9736,68,9187,70],[9736,69,9187,71],[9737,4,9188,4],[9738,4,9189,4],[9739,0,9190,0],[9740,0,9191,0],[9741,0,9192,0],[9742,0,9193,0],[9743,0,9194,0],[9744,0,9195,0],[9745,0,9196,0],[9746,0,9197,0],[9747,0,9198,0],[9748,0,9199,0],[9749,0,9200,0],[9750,0,9201,0],[9751,0,9202,0],[9752,0,9203,0],[9753,0,9204,0],[9754,0,9205,0],[9755,0,9206,0],[9756,0,9207,0],[9757,0,9208,0],[9758,0,9209,0],[9759,0,9210,0],[9760,0,9211,0],[9761,0,9212,0],[9762,0,9213,0],[9763,0,9214,0],[9764,0,9215,0],[9765,0,9216,0],[9766,0,9217,0],[9767,0,9218,0],[9768,0,9219,0],[9769,0,9220,0],[9770,4,9221,4],[9770,11,9221,11,"credentialFromError"],[9770,30,9221,30,"credentialFromError"],[9770,31,9221,31,"error"],[9770,36,9221,36],[9770,38,9221,38],[9771,6,9222,8],[9771,13,9222,15,"PhoneAuthProvider"],[9771,30,9222,32],[9771,31,9222,33,"credentialFromTaggedObject"],[9771,57,9222,59],[9771,58,9222,61,"error"],[9771,63,9222,66],[9771,64,9222,67,"customData"],[9771,74,9222,77],[9771,78,9222,81],[9771,79,9222,82],[9771,80,9222,84],[9771,81,9222,85],[9772,4,9223,4],[9773,4,9224,4],[9773,11,9224,11,"credentialFromTaggedObject"],[9773,37,9224,37,"credentialFromTaggedObject"],[9773,38,9224,38],[9774,6,9224,40,"_tokenResponse"],[9774,20,9224,54],[9774,22,9224,56,"tokenResponse"],[9775,4,9224,70],[9775,5,9224,71],[9775,7,9224,73],[9776,6,9225,8],[9776,10,9225,12],[9776,11,9225,13,"tokenResponse"],[9776,24,9225,26],[9776,26,9225,28],[9777,8,9226,12],[9777,15,9226,19],[9777,19,9226,23],[9778,6,9227,8],[9779,6,9228,8],[9779,12,9228,14],[9780,8,9228,16,"phoneNumber"],[9780,19,9228,27],[9781,8,9228,29,"temporaryProof"],[9782,6,9228,44],[9782,7,9228,45],[9782,10,9228,48,"tokenResponse"],[9782,23,9228,61],[9783,6,9229,8],[9783,10,9229,12,"phoneNumber"],[9783,21,9229,23],[9783,25,9229,27,"temporaryProof"],[9783,39,9229,41],[9783,41,9229,43],[9784,8,9230,12],[9784,15,9230,19,"PhoneAuthCredential"],[9784,34,9230,38],[9784,35,9230,39,"_fromTokenResponse"],[9784,53,9230,57],[9784,54,9230,58,"phoneNumber"],[9784,65,9230,69],[9784,67,9230,71,"temporaryProof"],[9784,81,9230,85],[9784,82,9230,86],[9785,6,9231,8],[9786,6,9232,8],[9786,13,9232,15],[9786,17,9232,19],[9787,4,9233,4],[9788,2,9234,0],[9789,2,9235,0],[9790,2,9236,0,"PhoneAuthProvider"],[9790,19,9236,17],[9790,20,9236,18,"PROVIDER_ID"],[9790,31,9236,29],[9790,34,9236,32],[9790,41,9236,39],[9790,42,9236,40],[9791,2,9237,0],[9792,2,9238,0,"PhoneAuthProvider"],[9792,19,9238,17],[9792,20,9238,18,"PHONE_SIGN_IN_METHOD"],[9792,40,9238,38],[9792,43,9238,41],[9792,50,9238,48],[9792,51,9238,49],[9794,2,9240,0],[9795,0,9241,0],[9796,0,9242,0],[9797,0,9243,0],[9798,0,9244,0],[9799,0,9245,0],[9800,0,9246,0],[9801,0,9247,0],[9802,0,9248,0],[9803,0,9249,0],[9804,0,9250,0],[9805,0,9251,0],[9806,0,9252,0],[9807,0,9253,0],[9808,0,9254,0],[9809,0,9255,0],[9810,2,9256,0],[9811,0,9257,0],[9812,0,9258,0],[9813,0,9259,0],[9814,0,9260,0],[9815,2,9261,0],[9815,11,9261,9,"_withDefaultResolver"],[9815,31,9261,29,"_withDefaultResolver"],[9815,32,9261,30,"auth"],[9815,36,9261,34],[9815,38,9261,36,"resolverOverride"],[9815,54,9261,52],[9815,56,9261,54],[9816,4,9262,4],[9816,8,9262,8,"resolverOverride"],[9816,24,9262,24],[9816,26,9262,26],[9817,6,9263,8],[9817,13,9263,15,"_getInstance"],[9817,25,9263,27],[9817,26,9263,28,"resolverOverride"],[9817,42,9263,44],[9817,43,9263,45],[9818,4,9264,4],[9819,4,9265,4,"_assert"],[9819,11,9265,11],[9819,12,9265,12,"auth"],[9819,16,9265,16],[9819,17,9265,17,"_popupRedirectResolver"],[9819,39,9265,39],[9819,41,9265,41,"auth"],[9819,45,9265,45],[9819,47,9265,47],[9819,63,9265,63],[9819,64,9265,64],[9819,98,9265,98],[9819,99,9265,99],[9820,4,9266,4],[9820,11,9266,11,"auth"],[9820,15,9266,15],[9820,16,9266,16,"_popupRedirectResolver"],[9820,38,9266,38],[9821,2,9267,0],[9823,2,9269,0],[9824,0,9270,0],[9825,0,9271,0],[9826,0,9272,0],[9827,0,9273,0],[9828,0,9274,0],[9829,0,9275,0],[9830,0,9276,0],[9831,0,9277,0],[9832,0,9278,0],[9833,0,9279,0],[9834,0,9280,0],[9835,0,9281,0],[9836,0,9282,0],[9837,0,9283,0],[9838,0,9284,0],[9839,2,9285,0],[9839,8,9285,6,"IdpCredential"],[9839,21,9285,19],[9839,30,9285,28,"AuthCredential"],[9839,44,9285,42],[9839,45,9285,43],[9840,4,9286,4,"constructor"],[9840,15,9286,15,"constructor"],[9840,16,9286,16,"params"],[9840,22,9286,22],[9840,24,9286,24],[9841,6,9287,8],[9841,11,9287,13],[9841,12,9287,14],[9841,20,9287,22],[9841,21,9287,23],[9841,46,9287,48],[9841,54,9287,56],[9841,55,9287,57],[9841,78,9287,80],[9841,79,9287,81],[9842,6,9288,8],[9842,10,9288,12],[9842,11,9288,13,"params"],[9842,17,9288,19],[9842,20,9288,22,"params"],[9842,26,9288,28],[9843,4,9289,4],[9844,4,9290,4,"_getIdTokenResponse"],[9844,23,9290,23,"_getIdTokenResponse"],[9844,24,9290,24,"auth"],[9844,28,9290,28],[9844,30,9290,30],[9845,6,9291,8],[9845,13,9291,15,"signInWithIdp"],[9845,26,9291,28],[9845,27,9291,29,"auth"],[9845,31,9291,33],[9845,33,9291,35],[9845,37,9291,39],[9845,38,9291,40,"_buildIdpRequest"],[9845,54,9291,56],[9845,55,9291,57],[9845,56,9291,58],[9845,57,9291,59],[9846,4,9292,4],[9847,4,9293,4,"_linkToIdToken"],[9847,18,9293,18,"_linkToIdToken"],[9847,19,9293,19,"auth"],[9847,23,9293,23],[9847,25,9293,25,"idToken"],[9847,32,9293,32],[9847,34,9293,34],[9848,6,9294,8],[9848,13,9294,15,"signInWithIdp"],[9848,26,9294,28],[9848,27,9294,29,"auth"],[9848,31,9294,33],[9848,33,9294,35],[9848,37,9294,39],[9848,38,9294,40,"_buildIdpRequest"],[9848,54,9294,56],[9848,55,9294,57,"idToken"],[9848,62,9294,64],[9848,63,9294,65],[9848,64,9294,66],[9849,4,9295,4],[9850,4,9296,4,"_getReauthenticationResolver"],[9850,32,9296,32,"_getReauthenticationResolver"],[9850,33,9296,33,"auth"],[9850,37,9296,37],[9850,39,9296,39],[9851,6,9297,8],[9851,13,9297,15,"signInWithIdp"],[9851,26,9297,28],[9851,27,9297,29,"auth"],[9851,31,9297,33],[9851,33,9297,35],[9851,37,9297,39],[9851,38,9297,40,"_buildIdpRequest"],[9851,54,9297,56],[9851,55,9297,57],[9851,56,9297,58],[9851,57,9297,59],[9852,4,9298,4],[9853,4,9299,4,"_buildIdpRequest"],[9853,20,9299,20,"_buildIdpRequest"],[9853,21,9299,21,"idToken"],[9853,28,9299,28],[9853,30,9299,30],[9854,6,9300,8],[9854,12,9300,14,"request"],[9854,19,9300,21],[9854,22,9300,24],[9855,8,9301,12,"requestUri"],[9855,18,9301,22],[9855,20,9301,24],[9855,24,9301,28],[9855,25,9301,29,"params"],[9855,31,9301,35],[9855,32,9301,36,"requestUri"],[9855,42,9301,46],[9856,8,9302,12,"sessionId"],[9856,17,9302,21],[9856,19,9302,23],[9856,23,9302,27],[9856,24,9302,28,"params"],[9856,30,9302,34],[9856,31,9302,35,"sessionId"],[9856,40,9302,44],[9857,8,9303,12,"postBody"],[9857,16,9303,20],[9857,18,9303,22],[9857,22,9303,26],[9857,23,9303,27,"params"],[9857,29,9303,33],[9857,30,9303,34,"postBody"],[9857,38,9303,42],[9858,8,9304,12,"tenantId"],[9858,16,9304,20],[9858,18,9304,22],[9858,22,9304,26],[9858,23,9304,27,"params"],[9858,29,9304,33],[9858,30,9304,34,"tenantId"],[9858,38,9304,42],[9859,8,9305,12,"pendingToken"],[9859,20,9305,24],[9859,22,9305,26],[9859,26,9305,30],[9859,27,9305,31,"params"],[9859,33,9305,37],[9859,34,9305,38,"pendingToken"],[9859,46,9305,50],[9860,8,9306,12,"returnSecureToken"],[9860,25,9306,29],[9860,27,9306,31],[9860,31,9306,35],[9861,8,9307,12,"returnIdpCredential"],[9861,27,9307,31],[9861,29,9307,33],[9862,6,9308,8],[9862,7,9308,9],[9863,6,9309,8],[9863,10,9309,12,"idToken"],[9863,17,9309,19],[9863,19,9309,21],[9864,8,9310,12,"request"],[9864,15,9310,19],[9864,16,9310,20,"idToken"],[9864,23,9310,27],[9864,26,9310,30,"idToken"],[9864,33,9310,37],[9865,6,9311,8],[9866,6,9312,8],[9866,13,9312,15,"request"],[9866,20,9312,22],[9867,4,9313,4],[9868,2,9314,0],[9869,2,9315,0],[9869,11,9315,9,"_signIn"],[9869,18,9315,16,"_signIn"],[9869,19,9315,17,"params"],[9869,25,9315,23],[9869,27,9315,25],[9870,4,9316,4],[9870,11,9316,11,"_signInWithCredential"],[9870,32,9316,32],[9870,33,9316,33,"params"],[9870,39,9316,39],[9870,40,9316,40,"auth"],[9870,44,9316,44],[9870,46,9316,46],[9870,50,9316,50,"IdpCredential"],[9870,63,9316,63],[9870,64,9316,64,"params"],[9870,70,9316,70],[9870,71,9316,71],[9870,73,9316,73,"params"],[9870,79,9316,79],[9870,80,9316,80,"bypassAuthState"],[9870,95,9316,95],[9870,96,9316,96],[9871,2,9317,0],[9872,2,9318,0],[9872,11,9318,9,"_reauth"],[9872,18,9318,16,"_reauth"],[9872,19,9318,17,"params"],[9872,25,9318,23],[9872,27,9318,25],[9873,4,9319,4],[9873,10,9319,10],[9874,6,9319,12,"auth"],[9874,10,9319,16],[9875,6,9319,18,"user"],[9876,4,9319,23],[9876,5,9319,24],[9876,8,9319,27,"params"],[9876,14,9319,33],[9877,4,9320,4,"_assert"],[9877,11,9320,11],[9877,12,9320,12,"user"],[9877,16,9320,16],[9877,18,9320,18,"auth"],[9877,22,9320,22],[9877,24,9320,24],[9877,40,9320,40],[9877,41,9320,41],[9877,75,9320,75],[9877,76,9320,76],[9878,4,9321,4],[9878,11,9321,11,"_reauthenticate"],[9878,26,9321,26],[9878,27,9321,27,"user"],[9878,31,9321,31],[9878,33,9321,33],[9878,37,9321,37,"IdpCredential"],[9878,50,9321,50],[9878,51,9321,51,"params"],[9878,57,9321,57],[9878,58,9321,58],[9878,60,9321,60,"params"],[9878,66,9321,66],[9878,67,9321,67,"bypassAuthState"],[9878,82,9321,82],[9878,83,9321,83],[9879,2,9322,0],[9880,2,9323,0],[9880,17,9323,15,"_link"],[9880,22,9323,20,"_link"],[9880,23,9323,21,"params"],[9880,29,9323,27],[9880,31,9323,29],[9881,4,9324,4],[9881,10,9324,10],[9882,6,9324,12,"auth"],[9882,10,9324,16],[9883,6,9324,18,"user"],[9884,4,9324,23],[9884,5,9324,24],[9884,8,9324,27,"params"],[9884,14,9324,33],[9885,4,9325,4,"_assert"],[9885,11,9325,11],[9885,12,9325,12,"user"],[9885,16,9325,16],[9885,18,9325,18,"auth"],[9885,22,9325,22],[9885,24,9325,24],[9885,40,9325,40],[9885,41,9325,41],[9885,75,9325,75],[9885,76,9325,76],[9886,4,9326,4],[9886,11,9326,11,"_link$1"],[9886,18,9326,18],[9886,19,9326,19,"user"],[9886,23,9326,23],[9886,25,9326,25],[9886,29,9326,29,"IdpCredential"],[9886,42,9326,42],[9886,43,9326,43,"params"],[9886,49,9326,49],[9886,50,9326,50],[9886,52,9326,52,"params"],[9886,58,9326,58],[9886,59,9326,59,"bypassAuthState"],[9886,74,9326,74],[9886,75,9326,75],[9887,2,9327,0],[9889,2,9329,0],[9890,0,9330,0],[9891,0,9331,0],[9892,0,9332,0],[9893,0,9333,0],[9894,0,9334,0],[9895,0,9335,0],[9896,0,9336,0],[9897,0,9337,0],[9898,0,9338,0],[9899,0,9339,0],[9900,0,9340,0],[9901,0,9341,0],[9902,0,9342,0],[9903,0,9343,0],[9904,0,9344,0],[9905,2,9345,0],[9906,0,9346,0],[9907,0,9347,0],[9908,0,9348,0],[9909,2,9349,0],[9909,8,9349,6,"AbstractPopupRedirectOperation"],[9909,38,9349,36],[9909,39,9349,37],[9910,4,9350,4,"constructor"],[9910,15,9350,15,"constructor"],[9910,16,9350,16,"auth"],[9910,20,9350,20],[9910,22,9350,22,"filter"],[9910,28,9350,28],[9910,30,9350,30,"resolver"],[9910,38,9350,38],[9910,40,9350,40,"user"],[9910,44,9350,44],[9910,46,9350,46,"bypassAuthState"],[9910,61,9350,61],[9910,64,9350,64],[9910,69,9350,69],[9910,71,9350,71],[9911,6,9351,8],[9911,10,9351,12],[9911,11,9351,13,"auth"],[9911,15,9351,17],[9911,18,9351,20,"auth"],[9911,22,9351,24],[9912,6,9352,8],[9912,10,9352,12],[9912,11,9352,13,"resolver"],[9912,19,9352,21],[9912,22,9352,24,"resolver"],[9912,30,9352,32],[9913,6,9353,8],[9913,10,9353,12],[9913,11,9353,13,"user"],[9913,15,9353,17],[9913,18,9353,20,"user"],[9913,22,9353,24],[9914,6,9354,8],[9914,10,9354,12],[9914,11,9354,13,"bypassAuthState"],[9914,26,9354,28],[9914,29,9354,31,"bypassAuthState"],[9914,44,9354,46],[9915,6,9355,8],[9915,10,9355,12],[9915,11,9355,13,"pendingPromise"],[9915,25,9355,27],[9915,28,9355,30],[9915,32,9355,34],[9916,6,9356,8],[9916,10,9356,12],[9916,11,9356,13,"eventManager"],[9916,23,9356,25],[9916,26,9356,28],[9916,30,9356,32],[9917,6,9357,8],[9917,10,9357,12],[9917,11,9357,13,"filter"],[9917,17,9357,19],[9917,20,9357,22,"Array"],[9917,25,9357,27],[9917,26,9357,28,"isArray"],[9917,33,9357,35],[9917,34,9357,36,"filter"],[9917,40,9357,42],[9917,41,9357,43],[9917,44,9357,46,"filter"],[9917,50,9357,52],[9917,53,9357,55],[9917,54,9357,56,"filter"],[9917,60,9357,62],[9917,61,9357,63],[9918,4,9358,4],[9919,4,9359,4,"execute"],[9919,11,9359,11,"execute"],[9919,12,9359,11],[9919,14,9359,14],[9920,6,9360,8],[9920,13,9360,15],[9920,17,9360,19,"Promise"],[9920,24,9360,26],[9920,25,9360,27],[9920,32,9360,34,"resolve"],[9920,39,9360,41],[9920,41,9360,43,"reject"],[9920,47,9360,49],[9920,52,9360,54],[9921,8,9361,12],[9921,12,9361,16],[9921,13,9361,17,"pendingPromise"],[9921,27,9361,31],[9921,30,9361,34],[9922,10,9361,36,"resolve"],[9922,17,9361,43],[9923,10,9361,45,"reject"],[9924,8,9361,52],[9924,9,9361,53],[9925,8,9362,12],[9925,12,9362,16],[9926,10,9363,16],[9926,14,9363,20],[9926,15,9363,21,"eventManager"],[9926,27,9363,33],[9926,30,9363,36],[9926,36,9363,42],[9926,40,9363,46],[9926,41,9363,47,"resolver"],[9926,49,9363,55],[9926,50,9363,56,"_initialize"],[9926,61,9363,67],[9926,62,9363,68],[9926,66,9363,72],[9926,67,9363,73,"auth"],[9926,71,9363,77],[9926,72,9363,78],[9927,10,9364,16],[9927,16,9364,22],[9927,20,9364,26],[9927,21,9364,27,"onExecution"],[9927,32,9364,38],[9927,33,9364,39],[9927,34,9364,40],[9928,10,9365,16],[9928,14,9365,20],[9928,15,9365,21,"eventManager"],[9928,27,9365,33],[9928,28,9365,34,"registerConsumer"],[9928,44,9365,50],[9928,45,9365,51],[9928,49,9365,55],[9928,50,9365,56],[9929,8,9366,12],[9929,9,9366,13],[9929,10,9367,12],[9929,17,9367,19,"e"],[9929,18,9367,20],[9929,20,9367,22],[9930,10,9368,16],[9930,14,9368,20],[9930,15,9368,21,"reject"],[9930,21,9368,27],[9930,22,9368,28,"e"],[9930,23,9368,29],[9930,24,9368,30],[9931,8,9369,12],[9932,6,9370,8],[9932,7,9370,9],[9932,8,9370,10],[9933,4,9371,4],[9934,4,9372,4],[9934,10,9372,10,"onAuthEvent"],[9934,21,9372,21,"onAuthEvent"],[9934,22,9372,22,"event"],[9934,27,9372,27],[9934,29,9372,29],[9935,6,9373,8],[9935,12,9373,14],[9936,8,9373,16,"urlResponse"],[9936,19,9373,27],[9937,8,9373,29,"sessionId"],[9937,17,9373,38],[9938,8,9373,40,"postBody"],[9938,16,9373,48],[9939,8,9373,50,"tenantId"],[9939,16,9373,58],[9940,8,9373,60,"error"],[9940,13,9373,65],[9941,8,9373,67,"type"],[9942,6,9373,72],[9942,7,9373,73],[9942,10,9373,76,"event"],[9942,15,9373,81],[9943,6,9374,8],[9943,10,9374,12,"error"],[9943,15,9374,17],[9943,17,9374,19],[9944,8,9375,12],[9944,12,9375,16],[9944,13,9375,17,"reject"],[9944,19,9375,23],[9944,20,9375,24,"error"],[9944,25,9375,29],[9944,26,9375,30],[9945,8,9376,12],[9946,6,9377,8],[9947,6,9378,8],[9947,12,9378,14,"params"],[9947,18,9378,20],[9947,21,9378,23],[9948,8,9379,12,"auth"],[9948,12,9379,16],[9948,14,9379,18],[9948,18,9379,22],[9948,19,9379,23,"auth"],[9948,23,9379,27],[9949,8,9380,12,"requestUri"],[9949,18,9380,22],[9949,20,9380,24,"urlResponse"],[9949,31,9380,35],[9950,8,9381,12,"sessionId"],[9950,17,9381,21],[9950,19,9381,23,"sessionId"],[9950,28,9381,32],[9951,8,9382,12,"tenantId"],[9951,16,9382,20],[9951,18,9382,22,"tenantId"],[9951,26,9382,30],[9951,30,9382,34,"undefined"],[9951,39,9382,43],[9952,8,9383,12,"postBody"],[9952,16,9383,20],[9952,18,9383,22,"postBody"],[9952,26,9383,30],[9952,30,9383,34,"undefined"],[9952,39,9383,43],[9953,8,9384,12,"user"],[9953,12,9384,16],[9953,14,9384,18],[9953,18,9384,22],[9953,19,9384,23,"user"],[9953,23,9384,27],[9954,8,9385,12,"bypassAuthState"],[9954,23,9385,27],[9954,25,9385,29],[9954,29,9385,33],[9954,30,9385,34,"bypassAuthState"],[9955,6,9386,8],[9955,7,9386,9],[9956,6,9387,8],[9956,10,9387,12],[9957,8,9388,12],[9957,12,9388,16],[9957,13,9388,17,"resolve"],[9957,20,9388,24],[9957,21,9388,25],[9957,27,9388,31],[9957,31,9388,35],[9957,32,9388,36,"getIdpTask"],[9957,42,9388,46],[9957,43,9388,47,"type"],[9957,47,9388,51],[9957,48,9388,52],[9957,49,9388,53,"params"],[9957,55,9388,59],[9957,56,9388,60],[9957,57,9388,61],[9958,6,9389,8],[9958,7,9389,9],[9958,8,9390,8],[9958,15,9390,15,"e"],[9958,16,9390,16],[9958,18,9390,18],[9959,8,9391,12],[9959,12,9391,16],[9959,13,9391,17,"reject"],[9959,19,9391,23],[9959,20,9391,24,"e"],[9959,21,9391,25],[9959,22,9391,26],[9960,6,9392,8],[9961,4,9393,4],[9962,4,9394,4,"onError"],[9962,11,9394,11,"onError"],[9962,12,9394,12,"error"],[9962,17,9394,17],[9962,19,9394,19],[9963,6,9395,8],[9963,10,9395,12],[9963,11,9395,13,"reject"],[9963,17,9395,19],[9963,18,9395,20,"error"],[9963,23,9395,25],[9963,24,9395,26],[9964,4,9396,4],[9965,4,9397,4,"getIdpTask"],[9965,14,9397,14,"getIdpTask"],[9965,15,9397,15,"type"],[9965,19,9397,19],[9965,21,9397,21],[9966,6,9398,8],[9966,14,9398,16,"type"],[9966,18,9398,20],[9967,8,9399,12],[9967,13,9399,17],[9967,29,9399,33],[9967,30,9399,34],[9968,8,9400,12],[9968,13,9400,17],[9968,32,9400,36],[9968,33,9400,37],[9969,10,9401,16],[9969,17,9401,23,"_signIn"],[9969,24,9401,30],[9970,8,9402,12],[9970,13,9402,17],[9970,27,9402,31],[9970,28,9402,32],[9971,8,9403,12],[9971,13,9403,17],[9971,30,9403,34],[9971,31,9403,35],[9972,10,9404,16],[9972,17,9404,23,"_link"],[9972,22,9404,28],[9973,8,9405,12],[9973,13,9405,17],[9973,29,9405,33],[9973,30,9405,34],[9974,8,9406,12],[9974,13,9406,17],[9974,32,9406,36],[9974,33,9406,37],[9975,10,9407,16],[9975,17,9407,23,"_reauth"],[9975,24,9407,30],[9976,8,9408,12],[9977,10,9409,16,"_fail"],[9977,15,9409,21],[9977,16,9409,22],[9977,20,9409,26],[9977,21,9409,27,"auth"],[9977,25,9409,31],[9977,27,9409,33],[9977,43,9409,49],[9977,44,9409,50],[9977,78,9409,84],[9977,79,9409,85],[9978,6,9410,8],[9979,4,9411,4],[9980,4,9412,4,"resolve"],[9980,11,9412,11,"resolve"],[9980,12,9412,12,"cred"],[9980,16,9412,16],[9980,18,9412,18],[9981,6,9413,8,"debugAssert"],[9981,17,9413,19],[9981,18,9413,20],[9981,22,9413,24],[9981,23,9413,25,"pendingPromise"],[9981,37,9413,39],[9981,39,9413,41],[9981,70,9413,72],[9981,71,9413,73],[9982,6,9414,8],[9982,10,9414,12],[9982,11,9414,13,"pendingPromise"],[9982,25,9414,27],[9982,26,9414,28,"resolve"],[9982,33,9414,35],[9982,34,9414,36,"cred"],[9982,38,9414,40],[9982,39,9414,41],[9983,6,9415,8],[9983,10,9415,12],[9983,11,9415,13,"unregisterAndCleanUp"],[9983,31,9415,33],[9983,32,9415,34],[9983,33,9415,35],[9984,4,9416,4],[9985,4,9417,4,"reject"],[9985,10,9417,10,"reject"],[9985,11,9417,11,"error"],[9985,16,9417,16],[9985,18,9417,18],[9986,6,9418,8,"debugAssert"],[9986,17,9418,19],[9986,18,9418,20],[9986,22,9418,24],[9986,23,9418,25,"pendingPromise"],[9986,37,9418,39],[9986,39,9418,41],[9986,70,9418,72],[9986,71,9418,73],[9987,6,9419,8],[9987,10,9419,12],[9987,11,9419,13,"pendingPromise"],[9987,25,9419,27],[9987,26,9419,28,"reject"],[9987,32,9419,34],[9987,33,9419,35,"error"],[9987,38,9419,40],[9987,39,9419,41],[9988,6,9420,8],[9988,10,9420,12],[9988,11,9420,13,"unregisterAndCleanUp"],[9988,31,9420,33],[9988,32,9420,34],[9988,33,9420,35],[9989,4,9421,4],[9990,4,9422,4,"unregisterAndCleanUp"],[9990,24,9422,24,"unregisterAndCleanUp"],[9990,25,9422,24],[9990,27,9422,27],[9991,6,9423,8],[9991,10,9423,12],[9991,14,9423,16],[9991,15,9423,17,"eventManager"],[9991,27,9423,29],[9991,29,9423,31],[9992,8,9424,12],[9992,12,9424,16],[9992,13,9424,17,"eventManager"],[9992,25,9424,29],[9992,26,9424,30,"unregisterConsumer"],[9992,44,9424,48],[9992,45,9424,49],[9992,49,9424,53],[9992,50,9424,54],[9993,6,9425,8],[9994,6,9426,8],[9994,10,9426,12],[9994,11,9426,13,"pendingPromise"],[9994,25,9426,27],[9994,28,9426,30],[9994,32,9426,34],[9995,6,9427,8],[9995,10,9427,12],[9995,11,9427,13,"cleanUp"],[9995,18,9427,20],[9995,19,9427,21],[9995,20,9427,22],[9996,4,9428,4],[9997,2,9429,0],[9999,2,9431,0],[10000,0,9432,0],[10001,0,9433,0],[10002,0,9434,0],[10003,0,9435,0],[10004,0,9436,0],[10005,0,9437,0],[10006,0,9438,0],[10007,0,9439,0],[10008,0,9440,0],[10009,0,9441,0],[10010,0,9442,0],[10011,0,9443,0],[10012,0,9444,0],[10013,0,9445,0],[10014,0,9446,0],[10015,2,9447,0],[10015,8,9447,6,"_POLL_WINDOW_CLOSE_TIMEOUT"],[10015,34,9447,32],[10015,37,9447,35],[10015,41,9447,39,"Delay"],[10015,46,9447,44],[10015,47,9447,45],[10015,51,9447,49],[10015,53,9447,51],[10015,58,9447,56],[10015,59,9447,57],[10016,2,9448,0],[10017,0,9449,0],[10018,0,9450,0],[10019,0,9451,0],[10020,0,9452,0],[10021,0,9453,0],[10022,0,9454,0],[10023,0,9455,0],[10024,0,9456,0],[10025,0,9457,0],[10026,0,9458,0],[10027,0,9459,0],[10028,0,9460,0],[10029,0,9461,0],[10030,0,9462,0],[10031,0,9463,0],[10032,0,9464,0],[10033,0,9465,0],[10034,0,9466,0],[10035,0,9467,0],[10036,0,9468,0],[10037,0,9469,0],[10038,0,9470,0],[10039,0,9471,0],[10040,0,9472,0],[10041,0,9473,0],[10042,0,9474,0],[10043,0,9475,0],[10044,0,9476,0],[10045,0,9477,0],[10046,0,9478,0],[10047,2,9479,0],[10047,17,9479,15,"signInWithPopup"],[10047,32,9479,30,"signInWithPopup"],[10047,33,9479,31,"auth"],[10047,37,9479,35],[10047,39,9479,37,"provider"],[10047,47,9479,45],[10047,49,9479,47,"resolver"],[10047,57,9479,55],[10047,59,9479,57],[10048,4,9480,4],[10048,8,9480,8],[10048,12,9480,8,"_isFirebaseServerApp"],[10048,24,9480,28],[10048,25,9480,28,"_isFirebaseServerApp"],[10048,45,9480,28],[10048,47,9480,29,"auth"],[10048,51,9480,33],[10048,52,9480,34,"app"],[10048,55,9480,37],[10048,56,9480,38],[10048,58,9480,40],[10049,6,9481,8],[10049,13,9481,15,"Promise"],[10049,20,9481,22],[10049,21,9481,23,"reject"],[10049,27,9481,29],[10049,28,9481,30,"_createError"],[10049,40,9481,42],[10049,41,9481,43,"auth"],[10049,45,9481,47],[10049,47,9481,49],[10049,92,9481,94],[10049,93,9481,95],[10049,136,9481,138],[10049,137,9481,139],[10049,138,9481,140],[10050,4,9482,4],[10051,4,9483,4],[10051,10,9483,10,"authInternal"],[10051,22,9483,22],[10051,25,9483,25,"_castAuth"],[10051,34,9483,34],[10051,35,9483,35,"auth"],[10051,39,9483,39],[10051,40,9483,40],[10052,4,9484,4,"_assertInstanceOf"],[10052,21,9484,21],[10052,22,9484,22,"auth"],[10052,26,9484,26],[10052,28,9484,28,"provider"],[10052,36,9484,36],[10052,38,9484,38,"FederatedAuthProvider"],[10052,59,9484,59],[10052,60,9484,60],[10053,4,9485,4],[10053,10,9485,10,"resolverInternal"],[10053,26,9485,26],[10053,29,9485,29,"_withDefaultResolver"],[10053,49,9485,49],[10053,50,9485,50,"authInternal"],[10053,62,9485,62],[10053,64,9485,64,"resolver"],[10053,72,9485,72],[10053,73,9485,73],[10054,4,9486,4],[10054,10,9486,10,"action"],[10054,16,9486,16],[10054,19,9486,19],[10054,23,9486,23,"PopupOperation"],[10054,37,9486,37],[10054,38,9486,38,"authInternal"],[10054,50,9486,50],[10054,52,9486,52],[10054,68,9486,68],[10054,69,9486,69],[10054,108,9486,108,"provider"],[10054,116,9486,116],[10054,118,9486,118,"resolverInternal"],[10054,134,9486,134],[10054,135,9486,135],[10055,4,9487,4],[10055,11,9487,11,"action"],[10055,17,9487,17],[10055,18,9487,18,"executeNotNull"],[10055,32,9487,32],[10055,33,9487,33],[10055,34,9487,34],[10056,2,9488,0],[10057,2,9489,0],[10058,0,9490,0],[10059,0,9491,0],[10060,0,9492,0],[10061,0,9493,0],[10062,0,9494,0],[10063,0,9495,0],[10064,0,9496,0],[10065,0,9497,0],[10066,0,9498,0],[10067,0,9499,0],[10068,0,9500,0],[10069,0,9501,0],[10070,0,9502,0],[10071,0,9503,0],[10072,0,9504,0],[10073,0,9505,0],[10074,0,9506,0],[10075,0,9507,0],[10076,0,9508,0],[10077,0,9509,0],[10078,0,9510,0],[10079,0,9511,0],[10080,0,9512,0],[10081,0,9513,0],[10082,0,9514,0],[10083,0,9515,0],[10084,0,9516,0],[10085,2,9517,0],[10085,17,9517,15,"reauthenticateWithPopup"],[10085,40,9517,38,"reauthenticateWithPopup"],[10085,41,9517,39,"user"],[10085,45,9517,43],[10085,47,9517,45,"provider"],[10085,55,9517,53],[10085,57,9517,55,"resolver"],[10085,65,9517,63],[10085,67,9517,65],[10086,4,9518,4],[10086,10,9518,10,"userInternal"],[10086,22,9518,22],[10086,25,9518,25],[10086,29,9518,25,"getModularInstance"],[10086,42,9518,43],[10086,43,9518,43,"getModularInstance"],[10086,61,9518,43],[10086,63,9518,44,"user"],[10086,67,9518,48],[10086,68,9518,49],[10087,4,9519,4],[10087,8,9519,8],[10087,12,9519,8,"_isFirebaseServerApp"],[10087,24,9519,28],[10087,25,9519,28,"_isFirebaseServerApp"],[10087,45,9519,28],[10087,47,9519,29,"userInternal"],[10087,59,9519,41],[10087,60,9519,42,"auth"],[10087,64,9519,46],[10087,65,9519,47,"app"],[10087,68,9519,50],[10087,69,9519,51],[10087,71,9519,53],[10088,6,9520,8],[10088,13,9520,15,"Promise"],[10088,20,9520,22],[10088,21,9520,23,"reject"],[10088,27,9520,29],[10088,28,9520,30,"_createError"],[10088,40,9520,42],[10088,41,9520,43,"userInternal"],[10088,53,9520,55],[10088,54,9520,56,"auth"],[10088,58,9520,60],[10088,60,9520,62],[10088,105,9520,107],[10088,106,9520,108],[10088,149,9520,151],[10088,150,9520,152],[10088,151,9520,153],[10089,4,9521,4],[10090,4,9522,4,"_assertInstanceOf"],[10090,21,9522,21],[10090,22,9522,22,"userInternal"],[10090,34,9522,34],[10090,35,9522,35,"auth"],[10090,39,9522,39],[10090,41,9522,41,"provider"],[10090,49,9522,49],[10090,51,9522,51,"FederatedAuthProvider"],[10090,72,9522,72],[10090,73,9522,73],[10091,4,9523,4],[10091,10,9523,10,"resolverInternal"],[10091,26,9523,26],[10091,29,9523,29,"_withDefaultResolver"],[10091,49,9523,49],[10091,50,9523,50,"userInternal"],[10091,62,9523,62],[10091,63,9523,63,"auth"],[10091,67,9523,67],[10091,69,9523,69,"resolver"],[10091,77,9523,77],[10091,78,9523,78],[10092,4,9524,4],[10092,10,9524,10,"action"],[10092,16,9524,16],[10092,19,9524,19],[10092,23,9524,23,"PopupOperation"],[10092,37,9524,37],[10092,38,9524,38,"userInternal"],[10092,50,9524,50],[10092,51,9524,51,"auth"],[10092,55,9524,55],[10092,57,9524,57],[10092,73,9524,73],[10092,74,9524,74],[10092,112,9524,112,"provider"],[10092,120,9524,120],[10092,122,9524,122,"resolverInternal"],[10092,138,9524,138],[10092,140,9524,140,"userInternal"],[10092,152,9524,152],[10092,153,9524,153],[10093,4,9525,4],[10093,11,9525,11,"action"],[10093,17,9525,17],[10093,18,9525,18,"executeNotNull"],[10093,32,9525,32],[10093,33,9525,33],[10093,34,9525,34],[10094,2,9526,0],[10095,2,9527,0],[10096,0,9528,0],[10097,0,9529,0],[10098,0,9530,0],[10099,0,9531,0],[10100,0,9532,0],[10101,0,9533,0],[10102,0,9534,0],[10103,0,9535,0],[10104,0,9536,0],[10105,0,9537,0],[10106,0,9538,0],[10107,0,9539,0],[10108,0,9540,0],[10109,0,9541,0],[10110,0,9542,0],[10111,0,9543,0],[10112,0,9544,0],[10113,0,9545,0],[10114,0,9546,0],[10115,0,9547,0],[10116,0,9548,0],[10117,0,9549,0],[10118,0,9550,0],[10119,0,9551,0],[10120,2,9552,0],[10120,17,9552,15,"linkWithPopup"],[10120,30,9552,28,"linkWithPopup"],[10120,31,9552,29,"user"],[10120,35,9552,33],[10120,37,9552,35,"provider"],[10120,45,9552,43],[10120,47,9552,45,"resolver"],[10120,55,9552,53],[10120,57,9552,55],[10121,4,9553,4],[10121,10,9553,10,"userInternal"],[10121,22,9553,22],[10121,25,9553,25],[10121,29,9553,25,"getModularInstance"],[10121,42,9553,43],[10121,43,9553,43,"getModularInstance"],[10121,61,9553,43],[10121,63,9553,44,"user"],[10121,67,9553,48],[10121,68,9553,49],[10122,4,9554,4,"_assertInstanceOf"],[10122,21,9554,21],[10122,22,9554,22,"userInternal"],[10122,34,9554,34],[10122,35,9554,35,"auth"],[10122,39,9554,39],[10122,41,9554,41,"provider"],[10122,49,9554,49],[10122,51,9554,51,"FederatedAuthProvider"],[10122,72,9554,72],[10122,73,9554,73],[10123,4,9555,4],[10123,10,9555,10,"resolverInternal"],[10123,26,9555,26],[10123,29,9555,29,"_withDefaultResolver"],[10123,49,9555,49],[10123,50,9555,50,"userInternal"],[10123,62,9555,62],[10123,63,9555,63,"auth"],[10123,67,9555,67],[10123,69,9555,69,"resolver"],[10123,77,9555,77],[10123,78,9555,78],[10124,4,9556,4],[10124,10,9556,10,"action"],[10124,16,9556,16],[10124,19,9556,19],[10124,23,9556,23,"PopupOperation"],[10124,37,9556,37],[10124,38,9556,38,"userInternal"],[10124,50,9556,50],[10124,51,9556,51,"auth"],[10124,55,9556,55],[10124,57,9556,57],[10124,71,9556,71],[10124,72,9556,72],[10124,108,9556,108,"provider"],[10124,116,9556,116],[10124,118,9556,118,"resolverInternal"],[10124,134,9556,134],[10124,136,9556,136,"userInternal"],[10124,148,9556,148],[10124,149,9556,149],[10125,4,9557,4],[10125,11,9557,11,"action"],[10125,17,9557,17],[10125,18,9557,18,"executeNotNull"],[10125,32,9557,32],[10125,33,9557,33],[10125,34,9557,34],[10126,2,9558,0],[10127,2,9559,0],[10128,0,9560,0],[10129,0,9561,0],[10130,0,9562,0],[10131,0,9563,0],[10132,2,9564,0],[10132,8,9564,6,"PopupOperation"],[10132,22,9564,20],[10132,31,9564,29,"AbstractPopupRedirectOperation"],[10132,61,9564,59],[10132,62,9564,60],[10133,4,9565,4,"constructor"],[10133,15,9565,15,"constructor"],[10133,16,9565,16,"auth"],[10133,20,9565,20],[10133,22,9565,22,"filter"],[10133,28,9565,28],[10133,30,9565,30,"provider"],[10133,38,9565,38],[10133,40,9565,40,"resolver"],[10133,48,9565,48],[10133,50,9565,50,"user"],[10133,54,9565,54],[10133,56,9565,56],[10134,6,9566,8],[10134,11,9566,13],[10134,12,9566,14,"auth"],[10134,16,9566,18],[10134,18,9566,20,"filter"],[10134,24,9566,26],[10134,26,9566,28,"resolver"],[10134,34,9566,36],[10134,36,9566,38,"user"],[10134,40,9566,42],[10134,41,9566,43],[10135,6,9567,8],[10135,10,9567,12],[10135,11,9567,13,"provider"],[10135,19,9567,21],[10135,22,9567,24,"provider"],[10135,30,9567,32],[10136,6,9568,8],[10136,10,9568,12],[10136,11,9568,13,"authWindow"],[10136,21,9568,23],[10136,24,9568,26],[10136,28,9568,30],[10137,6,9569,8],[10137,10,9569,12],[10137,11,9569,13,"pollId"],[10137,17,9569,19],[10137,20,9569,22],[10137,24,9569,26],[10138,6,9570,8],[10138,10,9570,12,"PopupOperation"],[10138,24,9570,26],[10138,25,9570,27,"currentPopupAction"],[10138,43,9570,45],[10138,45,9570,47],[10139,8,9571,12,"PopupOperation"],[10139,22,9571,26],[10139,23,9571,27,"currentPopupAction"],[10139,41,9571,45],[10139,42,9571,46,"cancel"],[10139,48,9571,52],[10139,49,9571,53],[10139,50,9571,54],[10140,6,9572,8],[10141,6,9573,8,"PopupOperation"],[10141,20,9573,22],[10141,21,9573,23,"currentPopupAction"],[10141,39,9573,41],[10141,42,9573,44],[10141,46,9573,48],[10142,4,9574,4],[10143,4,9575,4],[10143,10,9575,10,"executeNotNull"],[10143,24,9575,24,"executeNotNull"],[10143,25,9575,24],[10143,27,9575,27],[10144,6,9576,8],[10144,12,9576,14,"result"],[10144,18,9576,20],[10144,21,9576,23],[10144,27,9576,29],[10144,31,9576,33],[10144,32,9576,34,"execute"],[10144,39,9576,41],[10144,40,9576,42],[10144,41,9576,43],[10145,6,9577,8,"_assert"],[10145,13,9577,15],[10145,14,9577,16,"result"],[10145,20,9577,22],[10145,22,9577,24],[10145,26,9577,28],[10145,27,9577,29,"auth"],[10145,31,9577,33],[10145,33,9577,35],[10145,49,9577,51],[10145,50,9577,52],[10145,84,9577,86],[10145,85,9577,87],[10146,6,9578,8],[10146,13,9578,15,"result"],[10146,19,9578,21],[10147,4,9579,4],[10148,4,9580,4],[10148,10,9580,10,"onExecution"],[10148,21,9580,21,"onExecution"],[10148,22,9580,21],[10148,24,9580,24],[10149,6,9581,8,"debugAssert"],[10149,17,9581,19],[10149,18,9581,20],[10149,22,9581,24],[10149,23,9581,25,"filter"],[10149,29,9581,31],[10149,30,9581,32,"length"],[10149,36,9581,38],[10149,41,9581,43],[10149,42,9581,44],[10149,44,9581,46],[10149,84,9581,86],[10149,85,9581,87],[10150,6,9582,8],[10150,12,9582,14,"eventId"],[10150,19,9582,21],[10150,22,9582,24,"_generateEventId"],[10150,38,9582,40],[10150,39,9582,41],[10150,40,9582,42],[10151,6,9583,8],[10151,10,9583,12],[10151,11,9583,13,"authWindow"],[10151,21,9583,23],[10151,24,9583,26],[10151,30,9583,32],[10151,34,9583,36],[10151,35,9583,37,"resolver"],[10151,43,9583,45],[10151,44,9583,46,"_openPopup"],[10151,54,9583,56],[10151,55,9583,57],[10151,59,9583,61],[10151,60,9583,62,"auth"],[10151,64,9583,66],[10151,66,9583,68],[10151,70,9583,72],[10151,71,9583,73,"provider"],[10151,79,9583,81],[10151,81,9583,83],[10151,85,9583,87],[10151,86,9583,88,"filter"],[10151,92,9583,94],[10151,93,9583,95],[10151,94,9583,96],[10151,95,9583,97],[10152,6,9583,99],[10153,6,9584,8,"eventId"],[10153,13,9584,15],[10153,14,9584,16],[10154,6,9585,8],[10154,10,9585,12],[10154,11,9585,13,"authWindow"],[10154,21,9585,23],[10154,22,9585,24,"associatedEvent"],[10154,37,9585,39],[10154,40,9585,42,"eventId"],[10154,47,9585,49],[10155,6,9586,8],[10156,6,9587,8],[10157,6,9588,8],[10158,6,9589,8],[10159,6,9590,8],[10160,6,9591,8],[10161,6,9592,8],[10162,6,9593,8],[10162,10,9593,12],[10162,11,9593,13,"resolver"],[10162,19,9593,21],[10162,20,9593,22,"_originValidation"],[10162,37,9593,39],[10162,38,9593,40],[10162,42,9593,44],[10162,43,9593,45,"auth"],[10162,47,9593,49],[10162,48,9593,50],[10162,49,9593,51,"catch"],[10162,54,9593,56],[10162,55,9593,57,"e"],[10162,56,9593,58],[10162,60,9593,62],[10163,8,9594,12],[10163,12,9594,16],[10163,13,9594,17,"reject"],[10163,19,9594,23],[10163,20,9594,24,"e"],[10163,21,9594,25],[10163,22,9594,26],[10164,6,9595,8],[10164,7,9595,9],[10164,8,9595,10],[10165,6,9596,8],[10165,10,9596,12],[10165,11,9596,13,"resolver"],[10165,19,9596,21],[10165,20,9596,22,"_isIframeWebStorageSupported"],[10165,48,9596,50],[10165,49,9596,51],[10165,53,9596,55],[10165,54,9596,56,"auth"],[10165,58,9596,60],[10165,60,9596,62,"isSupported"],[10165,71,9596,73],[10165,75,9596,77],[10166,8,9597,12],[10166,12,9597,16],[10166,13,9597,17,"isSupported"],[10166,24,9597,28],[10166,26,9597,30],[10167,10,9598,16],[10167,14,9598,20],[10167,15,9598,21,"reject"],[10167,21,9598,27],[10167,22,9598,28,"_createError"],[10167,34,9598,40],[10167,35,9598,41],[10167,39,9598,45],[10167,40,9598,46,"auth"],[10167,44,9598,50],[10167,46,9598,52],[10167,71,9598,77],[10167,72,9598,78],[10167,115,9598,121],[10167,116,9598,122],[10167,117,9598,123],[10168,8,9599,12],[10169,6,9600,8],[10169,7,9600,9],[10169,8,9600,10],[10170,6,9601,8],[10171,6,9602,8],[10171,10,9602,12],[10171,11,9602,13,"pollUserCancellation"],[10171,31,9602,33],[10171,32,9602,34],[10171,33,9602,35],[10172,4,9603,4],[10173,4,9604,4],[10173,8,9604,8,"eventId"],[10173,15,9604,15,"eventId"],[10173,16,9604,15],[10173,18,9604,18],[10174,6,9605,8],[10174,13,9605,15],[10174,17,9605,19],[10174,18,9605,20,"authWindow"],[10174,28,9605,30],[10174,30,9605,32,"associatedEvent"],[10174,45,9605,47],[10174,49,9605,51],[10174,53,9605,55],[10175,4,9606,4],[10176,4,9607,4,"cancel"],[10176,10,9607,10,"cancel"],[10176,11,9607,10],[10176,13,9607,13],[10177,6,9608,8],[10177,10,9608,12],[10177,11,9608,13,"reject"],[10177,17,9608,19],[10177,18,9608,20,"_createError"],[10177,30,9608,32],[10177,31,9608,33],[10177,35,9608,37],[10177,36,9608,38,"auth"],[10177,40,9608,42],[10177,42,9608,44],[10177,67,9608,69],[10177,68,9608,70],[10177,109,9608,111],[10177,110,9608,112],[10177,111,9608,113],[10178,4,9609,4],[10179,4,9610,4,"cleanUp"],[10179,11,9610,11,"cleanUp"],[10179,12,9610,11],[10179,14,9610,14],[10180,6,9611,8],[10180,10,9611,12],[10180,14,9611,16],[10180,15,9611,17,"authWindow"],[10180,25,9611,27],[10180,27,9611,29],[10181,8,9612,12],[10181,12,9612,16],[10181,13,9612,17,"authWindow"],[10181,23,9612,27],[10181,24,9612,28,"close"],[10181,29,9612,33],[10181,30,9612,34],[10181,31,9612,35],[10182,6,9613,8],[10183,6,9614,8],[10183,10,9614,12],[10183,14,9614,16],[10183,15,9614,17,"pollId"],[10183,21,9614,23],[10183,23,9614,25],[10184,8,9615,12,"window"],[10184,14,9615,18],[10184,15,9615,19,"clearTimeout"],[10184,27,9615,31],[10184,28,9615,32],[10184,32,9615,36],[10184,33,9615,37,"pollId"],[10184,39,9615,43],[10184,40,9615,44],[10185,6,9616,8],[10186,6,9617,8],[10186,10,9617,12],[10186,11,9617,13,"authWindow"],[10186,21,9617,23],[10186,24,9617,26],[10186,28,9617,30],[10187,6,9618,8],[10187,10,9618,12],[10187,11,9618,13,"pollId"],[10187,17,9618,19],[10187,20,9618,22],[10187,24,9618,26],[10188,6,9619,8,"PopupOperation"],[10188,20,9619,22],[10188,21,9619,23,"currentPopupAction"],[10188,39,9619,41],[10188,42,9619,44],[10188,46,9619,48],[10189,4,9620,4],[10190,4,9621,4,"pollUserCancellation"],[10190,24,9621,24,"pollUserCancellation"],[10190,25,9621,24],[10190,27,9621,27],[10191,6,9622,8],[10191,12,9622,14,"poll"],[10191,16,9622,18],[10191,19,9622,21,"poll"],[10191,20,9622,21],[10191,25,9622,27],[10192,8,9623,12],[10192,12,9623,16],[10192,16,9623,20],[10192,17,9623,21,"authWindow"],[10192,27,9623,31],[10192,29,9623,33,"window"],[10192,35,9623,39],[10192,37,9623,41,"closed"],[10192,43,9623,47],[10192,45,9623,49],[10193,10,9624,16],[10194,10,9625,16],[10195,10,9626,16],[10196,10,9627,16],[10197,10,9628,16],[10198,10,9629,16],[10198,14,9629,20],[10198,15,9629,21,"pollId"],[10198,21,9629,27],[10198,24,9629,30,"window"],[10198,30,9629,36],[10198,31,9629,37,"setTimeout"],[10198,41,9629,47],[10198,42,9629,48],[10198,48,9629,54],[10199,12,9630,20],[10199,16,9630,24],[10199,17,9630,25,"pollId"],[10199,23,9630,31],[10199,26,9630,34],[10199,30,9630,38],[10200,12,9631,20],[10200,16,9631,24],[10200,17,9631,25,"reject"],[10200,23,9631,31],[10200,24,9631,32,"_createError"],[10200,36,9631,44],[10200,37,9631,45],[10200,41,9631,49],[10200,42,9631,50,"auth"],[10200,46,9631,54],[10200,48,9631,56],[10200,70,9631,78],[10200,71,9631,79],[10200,111,9631,119],[10200,112,9631,120],[10200,113,9631,121],[10201,10,9632,16],[10201,11,9632,17],[10201,13,9632,19],[10201,17,9632,23],[10201,18,9632,24],[10201,43,9632,49],[10201,44,9632,50],[10202,10,9633,16],[10203,8,9634,12],[10204,8,9635,12],[10204,12,9635,16],[10204,13,9635,17,"pollId"],[10204,19,9635,23],[10204,22,9635,26,"window"],[10204,28,9635,32],[10204,29,9635,33,"setTimeout"],[10204,39,9635,43],[10204,40,9635,44,"poll"],[10204,44,9635,48],[10204,46,9635,50,"_POLL_WINDOW_CLOSE_TIMEOUT"],[10204,72,9635,76],[10204,73,9635,77,"get"],[10204,76,9635,80],[10204,77,9635,81],[10204,78,9635,82],[10204,79,9635,83],[10205,6,9636,8],[10205,7,9636,9],[10206,6,9637,8,"poll"],[10206,10,9637,12],[10206,11,9637,13],[10206,12,9637,14],[10207,4,9638,4],[10208,2,9639,0],[10209,2,9640,0],[10210,2,9641,0],[10211,2,9642,0,"PopupOperation"],[10211,16,9642,14],[10211,17,9642,15,"currentPopupAction"],[10211,35,9642,33],[10211,38,9642,36],[10211,42,9642,40],[10213,2,9644,0],[10214,0,9645,0],[10215,0,9646,0],[10216,0,9647,0],[10217,0,9648,0],[10218,0,9649,0],[10219,0,9650,0],[10220,0,9651,0],[10221,0,9652,0],[10222,0,9653,0],[10223,0,9654,0],[10224,0,9655,0],[10225,0,9656,0],[10226,0,9657,0],[10227,0,9658,0],[10228,0,9659,0],[10229,2,9660,0],[10229,8,9660,6,"PENDING_REDIRECT_KEY"],[10229,28,9660,26],[10229,31,9660,29],[10229,48,9660,46],[10230,2,9661,0],[10231,2,9662,0],[10232,2,9663,0],[10232,8,9663,6,"redirectOutcomeMap"],[10232,26,9663,24],[10232,29,9663,27],[10232,33,9663,31,"Map"],[10232,36,9663,34],[10232,37,9663,35],[10232,38,9663,36],[10233,2,9664,0],[10233,8,9664,6,"RedirectAction"],[10233,22,9664,20],[10233,31,9664,29,"AbstractPopupRedirectOperation"],[10233,61,9664,59],[10233,62,9664,60],[10234,4,9665,4,"constructor"],[10234,15,9665,15,"constructor"],[10234,16,9665,16,"auth"],[10234,20,9665,20],[10234,22,9665,22,"resolver"],[10234,30,9665,30],[10234,32,9665,32,"bypassAuthState"],[10234,47,9665,47],[10234,50,9665,50],[10234,55,9665,55],[10234,57,9665,57],[10235,6,9666,8],[10235,11,9666,13],[10235,12,9666,14,"auth"],[10235,16,9666,18],[10235,18,9666,20],[10235,19,9667,12],[10235,38,9667,31],[10235,39,9667,32],[10235,81,9668,12],[10235,98,9668,29],[10235,99,9668,30],[10235,138,9669,12],[10235,157,9669,31],[10235,158,9669,32],[10235,199,9670,12],[10235,208,9670,21],[10235,209,9670,22],[10235,237,9671,9],[10235,239,9671,11,"resolver"],[10235,247,9671,19],[10235,249,9671,21,"undefined"],[10235,258,9671,30],[10235,260,9671,32,"bypassAuthState"],[10235,275,9671,47],[10235,276,9671,48],[10236,6,9672,8],[10236,10,9672,12],[10236,11,9672,13,"eventId"],[10236,18,9672,20],[10236,21,9672,23],[10236,25,9672,27],[10237,4,9673,4],[10238,4,9674,4],[10239,0,9675,0],[10240,0,9676,0],[10241,0,9677,0],[10242,4,9678,4],[10242,10,9678,10,"execute"],[10242,17,9678,17,"execute"],[10242,18,9678,17],[10242,20,9678,20],[10243,6,9679,8],[10243,10,9679,12,"readyOutcome"],[10243,22,9679,24],[10243,25,9679,27,"redirectOutcomeMap"],[10243,43,9679,45],[10243,44,9679,46,"get"],[10243,47,9679,49],[10243,48,9679,50],[10243,52,9679,54],[10243,53,9679,55,"auth"],[10243,57,9679,59],[10243,58,9679,60,"_key"],[10243,62,9679,64],[10243,63,9679,65],[10243,64,9679,66],[10243,65,9679,67],[10244,6,9680,8],[10244,10,9680,12],[10244,11,9680,13,"readyOutcome"],[10244,23,9680,25],[10244,25,9680,27],[10245,8,9681,12],[10245,12,9681,16],[10246,10,9682,16],[10246,16,9682,22,"hasPendingRedirect"],[10246,34,9682,40],[10246,37,9682,43],[10246,43,9682,49,"_getAndClearPendingRedirectStatus"],[10246,76,9682,82],[10246,77,9682,83],[10246,81,9682,87],[10246,82,9682,88,"resolver"],[10246,90,9682,96],[10246,92,9682,98],[10246,96,9682,102],[10246,97,9682,103,"auth"],[10246,101,9682,107],[10246,102,9682,108],[10247,10,9683,16],[10247,16,9683,22,"result"],[10247,22,9683,28],[10247,25,9683,31,"hasPendingRedirect"],[10247,43,9683,49],[10247,46,9683,52],[10247,52,9683,58],[10247,57,9683,63],[10247,58,9683,64,"execute"],[10247,65,9683,71],[10247,66,9683,72],[10247,67,9683,73],[10247,70,9683,76],[10247,74,9683,80],[10248,10,9684,16,"readyOutcome"],[10248,22,9684,28],[10248,25,9684,31,"readyOutcome"],[10248,26,9684,31],[10248,31,9684,37,"Promise"],[10248,38,9684,44],[10248,39,9684,45,"resolve"],[10248,46,9684,52],[10248,47,9684,53,"result"],[10248,53,9684,59],[10248,54,9684,60],[10249,8,9685,12],[10249,9,9685,13],[10249,10,9686,12],[10249,17,9686,19,"e"],[10249,18,9686,20],[10249,20,9686,22],[10250,10,9687,16,"readyOutcome"],[10250,22,9687,28],[10250,25,9687,31,"readyOutcome"],[10250,26,9687,31],[10250,31,9687,37,"Promise"],[10250,38,9687,44],[10250,39,9687,45,"reject"],[10250,45,9687,51],[10250,46,9687,52,"e"],[10250,47,9687,53],[10250,48,9687,54],[10251,8,9688,12],[10252,8,9689,12,"redirectOutcomeMap"],[10252,26,9689,30],[10252,27,9689,31,"set"],[10252,30,9689,34],[10252,31,9689,35],[10252,35,9689,39],[10252,36,9689,40,"auth"],[10252,40,9689,44],[10252,41,9689,45,"_key"],[10252,45,9689,49],[10252,46,9689,50],[10252,47,9689,51],[10252,49,9689,53,"readyOutcome"],[10252,61,9689,65],[10252,62,9689,66],[10253,6,9690,8],[10254,6,9691,8],[10255,6,9692,8],[10256,6,9693,8],[10256,10,9693,12],[10256,11,9693,13],[10256,15,9693,17],[10256,16,9693,18,"bypassAuthState"],[10256,31,9693,33],[10256,33,9693,35],[10257,8,9694,12,"redirectOutcomeMap"],[10257,26,9694,30],[10257,27,9694,31,"set"],[10257,30,9694,34],[10257,31,9694,35],[10257,35,9694,39],[10257,36,9694,40,"auth"],[10257,40,9694,44],[10257,41,9694,45,"_key"],[10257,45,9694,49],[10257,46,9694,50],[10257,47,9694,51],[10257,49,9694,53],[10257,55,9694,59,"Promise"],[10257,62,9694,66],[10257,63,9694,67,"resolve"],[10257,70,9694,74],[10257,71,9694,75],[10257,75,9694,79],[10257,76,9694,80],[10257,77,9694,81],[10258,6,9695,8],[10259,6,9696,8],[10259,13,9696,15,"readyOutcome"],[10259,25,9696,27],[10259,26,9696,28],[10259,27,9696,29],[10260,4,9697,4],[10261,4,9698,4],[10261,10,9698,10,"onAuthEvent"],[10261,21,9698,21,"onAuthEvent"],[10261,22,9698,22,"event"],[10261,27,9698,27],[10261,29,9698,29],[10262,6,9699,8],[10262,10,9699,12,"event"],[10262,15,9699,17],[10262,16,9699,18,"type"],[10262,20,9699,22],[10262,25,9699,27],[10262,44,9699,46],[10262,45,9699,47],[10262,87,9699,89],[10263,8,9700,12],[10263,15,9700,19],[10263,20,9700,24],[10263,21,9700,25,"onAuthEvent"],[10263,32,9700,36],[10263,33,9700,37,"event"],[10263,38,9700,42],[10263,39,9700,43],[10264,6,9701,8],[10264,7,9701,9],[10264,13,9702,13],[10264,17,9702,17,"event"],[10264,22,9702,22],[10264,23,9702,23,"type"],[10264,27,9702,27],[10264,32,9702,32],[10264,41,9702,41],[10264,42,9702,42],[10264,71,9702,71],[10265,8,9703,12],[10266,8,9704,12],[10266,12,9704,16],[10266,13,9704,17,"resolve"],[10266,20,9704,24],[10266,21,9704,25],[10266,25,9704,29],[10266,26,9704,30],[10267,8,9705,12],[10268,6,9706,8],[10269,6,9707,8],[10269,10,9707,12,"event"],[10269,15,9707,17],[10269,16,9707,18,"eventId"],[10269,23,9707,25],[10269,25,9707,27],[10270,8,9708,12],[10270,14,9708,18,"user"],[10270,18,9708,22],[10270,21,9708,25],[10270,27,9708,31],[10270,31,9708,35],[10270,32,9708,36,"auth"],[10270,36,9708,40],[10270,37,9708,41,"_redirectUserForId"],[10270,55,9708,59],[10270,56,9708,60,"event"],[10270,61,9708,65],[10270,62,9708,66,"eventId"],[10270,69,9708,73],[10270,70,9708,74],[10271,8,9709,12],[10271,12,9709,16,"user"],[10271,16,9709,20],[10271,18,9709,22],[10272,10,9710,16],[10272,14,9710,20],[10272,15,9710,21,"user"],[10272,19,9710,25],[10272,22,9710,28,"user"],[10272,26,9710,32],[10273,10,9711,16],[10273,17,9711,23],[10273,22,9711,28],[10273,23,9711,29,"onAuthEvent"],[10273,34,9711,40],[10273,35,9711,41,"event"],[10273,40,9711,46],[10273,41,9711,47],[10274,8,9712,12],[10274,9,9712,13],[10274,15,9713,17],[10275,10,9714,16],[10275,14,9714,20],[10275,15,9714,21,"resolve"],[10275,22,9714,28],[10275,23,9714,29],[10275,27,9714,33],[10275,28,9714,34],[10276,8,9715,12],[10277,6,9716,8],[10278,4,9717,4],[10279,4,9718,4],[10279,10,9718,10,"onExecution"],[10279,21,9718,21,"onExecution"],[10279,22,9718,21],[10279,24,9718,24],[10279,25,9718,26],[10280,4,9719,4,"cleanUp"],[10280,11,9719,11,"cleanUp"],[10280,12,9719,11],[10280,14,9719,14],[10280,15,9719,16],[10281,2,9720,0],[10282,2,9721,0],[10282,17,9721,15,"_getAndClearPendingRedirectStatus"],[10282,50,9721,48,"_getAndClearPendingRedirectStatus"],[10282,51,9721,49,"resolver"],[10282,59,9721,57],[10282,61,9721,59,"auth"],[10282,65,9721,63],[10282,67,9721,65],[10283,4,9722,4],[10283,10,9722,10,"key"],[10283,13,9722,13],[10283,16,9722,16,"pendingRedirectKey"],[10283,34,9722,34],[10283,35,9722,35,"auth"],[10283,39,9722,39],[10283,40,9722,40],[10284,4,9723,4],[10284,10,9723,10,"persistence"],[10284,21,9723,21],[10284,24,9723,24,"resolverPersistence"],[10284,43,9723,43],[10284,44,9723,44,"resolver"],[10284,52,9723,52],[10284,53,9723,53],[10285,4,9724,4],[10285,8,9724,8],[10285,10,9724,10],[10285,16,9724,16,"persistence"],[10285,27,9724,27],[10285,28,9724,28,"_isAvailable"],[10285,40,9724,40],[10285,41,9724,41],[10285,42,9724,42],[10285,43,9724,43],[10285,45,9724,45],[10286,6,9725,8],[10286,13,9725,15],[10286,18,9725,20],[10287,4,9726,4],[10288,4,9727,4],[10288,10,9727,10,"hasPendingRedirect"],[10288,28,9727,28],[10288,31,9727,31],[10288,32,9727,32],[10288,38,9727,38,"persistence"],[10288,49,9727,49],[10288,50,9727,50,"_get"],[10288,54,9727,54],[10288,55,9727,55,"key"],[10288,58,9727,58],[10288,59,9727,59],[10288,65,9727,65],[10288,71,9727,71],[10289,4,9728,4],[10289,10,9728,10,"persistence"],[10289,21,9728,21],[10289,22,9728,22,"_remove"],[10289,29,9728,29],[10289,30,9728,30,"key"],[10289,33,9728,33],[10289,34,9728,34],[10290,4,9729,4],[10290,11,9729,11,"hasPendingRedirect"],[10290,29,9729,29],[10291,2,9730,0],[10292,2,9731,0],[10292,17,9731,15,"_setPendingRedirectStatus"],[10292,42,9731,40,"_setPendingRedirectStatus"],[10292,43,9731,41,"resolver"],[10292,51,9731,49],[10292,53,9731,51,"auth"],[10292,57,9731,55],[10292,59,9731,57],[10293,4,9732,4],[10293,11,9732,11,"resolverPersistence"],[10293,30,9732,30],[10293,31,9732,31,"resolver"],[10293,39,9732,39],[10293,40,9732,40],[10293,41,9732,41,"_set"],[10293,45,9732,45],[10293,46,9732,46,"pendingRedirectKey"],[10293,64,9732,64],[10293,65,9732,65,"auth"],[10293,69,9732,69],[10293,70,9732,70],[10293,72,9732,72],[10293,78,9732,78],[10293,79,9732,79],[10294,2,9733,0],[10295,2,9734,0],[10295,11,9734,9,"_clearRedirectOutcomes"],[10295,33,9734,31,"_clearRedirectOutcomes"],[10295,34,9734,31],[10295,36,9734,34],[10296,4,9735,4,"redirectOutcomeMap"],[10296,22,9735,22],[10296,23,9735,23,"clear"],[10296,28,9735,28],[10296,29,9735,29],[10296,30,9735,30],[10297,2,9736,0],[10298,2,9737,0],[10298,11,9737,9,"_overrideRedirectResult"],[10298,34,9737,32,"_overrideRedirectResult"],[10298,35,9737,33,"auth"],[10298,39,9737,37],[10298,41,9737,39,"result"],[10298,47,9737,45],[10298,49,9737,47],[10299,4,9738,4,"redirectOutcomeMap"],[10299,22,9738,22],[10299,23,9738,23,"set"],[10299,26,9738,26],[10299,27,9738,27,"auth"],[10299,31,9738,31],[10299,32,9738,32,"_key"],[10299,36,9738,36],[10299,37,9738,37],[10299,38,9738,38],[10299,40,9738,40,"result"],[10299,46,9738,46],[10299,47,9738,47],[10300,2,9739,0],[10301,2,9740,0],[10301,11,9740,9,"resolverPersistence"],[10301,30,9740,28,"resolverPersistence"],[10301,31,9740,29,"resolver"],[10301,39,9740,37],[10301,41,9740,39],[10302,4,9741,4],[10302,11,9741,11,"_getInstance"],[10302,23,9741,23],[10302,24,9741,24,"resolver"],[10302,32,9741,32],[10302,33,9741,33,"_redirectPersistence"],[10302,53,9741,53],[10302,54,9741,54],[10303,2,9742,0],[10304,2,9743,0],[10304,11,9743,9,"pendingRedirectKey"],[10304,29,9743,27,"pendingRedirectKey"],[10304,30,9743,28,"auth"],[10304,34,9743,32],[10304,36,9743,34],[10305,4,9744,4],[10305,11,9744,11,"_persistenceKeyName"],[10305,30,9744,30],[10305,31,9744,31,"PENDING_REDIRECT_KEY"],[10305,51,9744,51],[10305,53,9744,53,"auth"],[10305,57,9744,57],[10305,58,9744,58,"config"],[10305,64,9744,64],[10305,65,9744,65,"apiKey"],[10305,71,9744,71],[10305,73,9744,73,"auth"],[10305,77,9744,77],[10305,78,9744,78,"name"],[10305,82,9744,82],[10305,83,9744,83],[10306,2,9745,0],[10308,2,9747,0],[10309,0,9748,0],[10310,0,9749,0],[10311,0,9750,0],[10312,0,9751,0],[10313,0,9752,0],[10314,0,9753,0],[10315,0,9754,0],[10316,0,9755,0],[10317,0,9756,0],[10318,0,9757,0],[10319,0,9758,0],[10320,0,9759,0],[10321,0,9760,0],[10322,0,9761,0],[10323,0,9762,0],[10324,2,9763,0],[10325,0,9764,0],[10326,0,9765,0],[10327,0,9766,0],[10328,0,9767,0],[10329,0,9768,0],[10330,0,9769,0],[10331,0,9770,0],[10332,0,9771,0],[10333,0,9772,0],[10334,0,9773,0],[10335,0,9774,0],[10336,0,9775,0],[10337,0,9776,0],[10338,0,9777,0],[10339,0,9778,0],[10340,0,9779,0],[10341,0,9780,0],[10342,0,9781,0],[10343,0,9782,0],[10344,0,9783,0],[10345,0,9784,0],[10346,0,9785,0],[10347,0,9786,0],[10348,0,9787,0],[10349,0,9788,0],[10350,0,9789,0],[10351,0,9790,0],[10352,0,9791,0],[10353,0,9792,0],[10354,0,9793,0],[10355,0,9794,0],[10356,0,9795,0],[10357,0,9796,0],[10358,0,9797,0],[10359,0,9798,0],[10360,0,9799,0],[10361,0,9800,0],[10362,0,9801,0],[10363,0,9802,0],[10364,0,9803,0],[10365,0,9804,0],[10366,0,9805,0],[10367,0,9806,0],[10368,2,9807,0],[10368,11,9807,9,"signInWithRedirect"],[10368,29,9807,27,"signInWithRedirect"],[10368,30,9807,28,"auth"],[10368,34,9807,32],[10368,36,9807,34,"provider"],[10368,44,9807,42],[10368,46,9807,44,"resolver"],[10368,54,9807,52],[10368,56,9807,54],[10369,4,9808,4],[10369,11,9808,11,"_signInWithRedirect"],[10369,30,9808,30],[10369,31,9808,31,"auth"],[10369,35,9808,35],[10369,37,9808,37,"provider"],[10369,45,9808,45],[10369,47,9808,47,"resolver"],[10369,55,9808,55],[10369,56,9808,56],[10370,2,9809,0],[10371,2,9810,0],[10371,17,9810,15,"_signInWithRedirect"],[10371,36,9810,34,"_signInWithRedirect"],[10371,37,9810,35,"auth"],[10371,41,9810,39],[10371,43,9810,41,"provider"],[10371,51,9810,49],[10371,53,9810,51,"resolver"],[10371,61,9810,59],[10371,63,9810,61],[10372,4,9811,4],[10372,8,9811,8],[10372,12,9811,8,"_isFirebaseServerApp"],[10372,24,9811,28],[10372,25,9811,28,"_isFirebaseServerApp"],[10372,45,9811,28],[10372,47,9811,29,"auth"],[10372,51,9811,33],[10372,52,9811,34,"app"],[10372,55,9811,37],[10372,56,9811,38],[10372,58,9811,40],[10373,6,9812,8],[10373,13,9812,15,"Promise"],[10373,20,9812,22],[10373,21,9812,23,"reject"],[10373,27,9812,29],[10373,28,9812,30,"_serverAppCurrentUserOperationNotSupportedError"],[10373,75,9812,77],[10373,76,9812,78,"auth"],[10373,80,9812,82],[10373,81,9812,83],[10373,82,9812,84],[10374,4,9813,4],[10375,4,9814,4],[10375,10,9814,10,"authInternal"],[10375,22,9814,22],[10375,25,9814,25,"_castAuth"],[10375,34,9814,34],[10375,35,9814,35,"auth"],[10375,39,9814,39],[10375,40,9814,40],[10376,4,9815,4,"_assertInstanceOf"],[10376,21,9815,21],[10376,22,9815,22,"auth"],[10376,26,9815,26],[10376,28,9815,28,"provider"],[10376,36,9815,36],[10376,38,9815,38,"FederatedAuthProvider"],[10376,59,9815,59],[10376,60,9815,60],[10377,4,9816,4],[10378,4,9817,4],[10379,4,9818,4],[10380,4,9819,4],[10380,10,9819,10,"authInternal"],[10380,22,9819,22],[10380,23,9819,23,"_initializationPromise"],[10380,45,9819,45],[10381,4,9820,4],[10381,10,9820,10,"resolverInternal"],[10381,26,9820,26],[10381,29,9820,29,"_withDefaultResolver"],[10381,49,9820,49],[10381,50,9820,50,"authInternal"],[10381,62,9820,62],[10381,64,9820,64,"resolver"],[10381,72,9820,72],[10381,73,9820,73],[10382,4,9821,4],[10382,10,9821,10,"_setPendingRedirectStatus"],[10382,35,9821,35],[10382,36,9821,36,"resolverInternal"],[10382,52,9821,52],[10382,54,9821,54,"authInternal"],[10382,66,9821,66],[10382,67,9821,67],[10383,4,9822,4],[10383,11,9822,11,"resolverInternal"],[10383,27,9822,27],[10383,28,9822,28,"_openRedirect"],[10383,41,9822,41],[10383,42,9822,42,"authInternal"],[10383,54,9822,54],[10383,56,9822,56,"provider"],[10383,64,9822,64],[10383,66,9822,66],[10383,85,9822,85],[10383,86,9822,86],[10383,126,9822,126],[10383,127,9822,127],[10384,2,9823,0],[10385,2,9824,0],[10386,0,9825,0],[10387,0,9826,0],[10388,0,9827,0],[10389,0,9828,0],[10390,0,9829,0],[10391,0,9830,0],[10392,0,9831,0],[10393,0,9832,0],[10394,0,9833,0],[10395,0,9834,0],[10396,0,9835,0],[10397,0,9836,0],[10398,0,9837,0],[10399,0,9838,0],[10400,0,9839,0],[10401,0,9840,0],[10402,0,9841,0],[10403,0,9842,0],[10404,0,9843,0],[10405,0,9844,0],[10406,0,9845,0],[10407,0,9846,0],[10408,0,9847,0],[10409,0,9848,0],[10410,0,9849,0],[10411,0,9850,0],[10412,0,9851,0],[10413,0,9852,0],[10414,0,9853,0],[10415,0,9854,0],[10416,0,9855,0],[10417,0,9856,0],[10418,0,9857,0],[10419,0,9858,0],[10420,2,9859,0],[10420,11,9859,9,"reauthenticateWithRedirect"],[10420,37,9859,35,"reauthenticateWithRedirect"],[10420,38,9859,36,"user"],[10420,42,9859,40],[10420,44,9859,42,"provider"],[10420,52,9859,50],[10420,54,9859,52,"resolver"],[10420,62,9859,60],[10420,64,9859,62],[10421,4,9860,4],[10421,11,9860,11,"_reauthenticateWithRedirect"],[10421,38,9860,38],[10421,39,9860,39,"user"],[10421,43,9860,43],[10421,45,9860,45,"provider"],[10421,53,9860,53],[10421,55,9860,55,"resolver"],[10421,63,9860,63],[10421,64,9860,64],[10422,2,9861,0],[10423,2,9862,0],[10423,17,9862,15,"_reauthenticateWithRedirect"],[10423,44,9862,42,"_reauthenticateWithRedirect"],[10423,45,9862,43,"user"],[10423,49,9862,47],[10423,51,9862,49,"provider"],[10423,59,9862,57],[10423,61,9862,59,"resolver"],[10423,69,9862,67],[10423,71,9862,69],[10424,4,9863,4],[10424,10,9863,10,"userInternal"],[10424,22,9863,22],[10424,25,9863,25],[10424,29,9863,25,"getModularInstance"],[10424,42,9863,43],[10424,43,9863,43,"getModularInstance"],[10424,61,9863,43],[10424,63,9863,44,"user"],[10424,67,9863,48],[10424,68,9863,49],[10425,4,9864,4,"_assertInstanceOf"],[10425,21,9864,21],[10425,22,9864,22,"userInternal"],[10425,34,9864,34],[10425,35,9864,35,"auth"],[10425,39,9864,39],[10425,41,9864,41,"provider"],[10425,49,9864,49],[10425,51,9864,51,"FederatedAuthProvider"],[10425,72,9864,72],[10425,73,9864,73],[10426,4,9865,4],[10426,8,9865,8],[10426,12,9865,8,"_isFirebaseServerApp"],[10426,24,9865,28],[10426,25,9865,28,"_isFirebaseServerApp"],[10426,45,9865,28],[10426,47,9865,29,"userInternal"],[10426,59,9865,41],[10426,60,9865,42,"auth"],[10426,64,9865,46],[10426,65,9865,47,"app"],[10426,68,9865,50],[10426,69,9865,51],[10426,71,9865,53],[10427,6,9866,8],[10427,13,9866,15,"Promise"],[10427,20,9866,22],[10427,21,9866,23,"reject"],[10427,27,9866,29],[10427,28,9866,30,"_serverAppCurrentUserOperationNotSupportedError"],[10427,75,9866,77],[10427,76,9866,78,"userInternal"],[10427,88,9866,90],[10427,89,9866,91,"auth"],[10427,93,9866,95],[10427,94,9866,96],[10427,95,9866,97],[10428,4,9867,4],[10429,4,9868,4],[10430,4,9869,4],[10431,4,9870,4],[10432,4,9871,4],[10432,10,9871,10,"userInternal"],[10432,22,9871,22],[10432,23,9871,23,"auth"],[10432,27,9871,27],[10432,28,9871,28,"_initializationPromise"],[10432,50,9871,50],[10433,4,9872,4],[10434,4,9873,4],[10434,10,9873,10,"resolverInternal"],[10434,26,9873,26],[10434,29,9873,29,"_withDefaultResolver"],[10434,49,9873,49],[10434,50,9873,50,"userInternal"],[10434,62,9873,62],[10434,63,9873,63,"auth"],[10434,67,9873,67],[10434,69,9873,69,"resolver"],[10434,77,9873,77],[10434,78,9873,78],[10435,4,9874,4],[10435,10,9874,10,"_setPendingRedirectStatus"],[10435,35,9874,35],[10435,36,9874,36,"resolverInternal"],[10435,52,9874,52],[10435,54,9874,54,"userInternal"],[10435,66,9874,66],[10435,67,9874,67,"auth"],[10435,71,9874,71],[10435,72,9874,72],[10436,4,9875,4],[10436,10,9875,10,"eventId"],[10436,17,9875,17],[10436,20,9875,20],[10436,26,9875,26,"prepareUserForRedirect"],[10436,48,9875,48],[10436,49,9875,49,"userInternal"],[10436,61,9875,61],[10436,62,9875,62],[10437,4,9876,4],[10437,11,9876,11,"resolverInternal"],[10437,27,9876,27],[10437,28,9876,28,"_openRedirect"],[10437,41,9876,41],[10437,42,9876,42,"userInternal"],[10437,54,9876,54],[10437,55,9876,55,"auth"],[10437,59,9876,59],[10437,61,9876,61,"provider"],[10437,69,9876,69],[10437,71,9876,71],[10437,90,9876,90],[10437,91,9876,91],[10437,132,9876,132,"eventId"],[10437,139,9876,139],[10437,140,9876,140],[10438,2,9877,0],[10439,2,9878,0],[10440,0,9879,0],[10441,0,9880,0],[10442,0,9881,0],[10443,0,9882,0],[10444,0,9883,0],[10445,0,9884,0],[10446,0,9885,0],[10447,0,9886,0],[10448,0,9887,0],[10449,0,9888,0],[10450,0,9889,0],[10451,0,9890,0],[10452,0,9891,0],[10453,0,9892,0],[10454,0,9893,0],[10455,0,9894,0],[10456,0,9895,0],[10457,0,9896,0],[10458,0,9897,0],[10459,0,9898,0],[10460,0,9899,0],[10461,0,9900,0],[10462,0,9901,0],[10463,0,9902,0],[10464,0,9903,0],[10465,0,9904,0],[10466,0,9905,0],[10467,0,9906,0],[10468,0,9907,0],[10469,0,9908,0],[10470,2,9909,0],[10470,11,9909,9,"linkWithRedirect"],[10470,27,9909,25,"linkWithRedirect"],[10470,28,9909,26,"user"],[10470,32,9909,30],[10470,34,9909,32,"provider"],[10470,42,9909,40],[10470,44,9909,42,"resolver"],[10470,52,9909,50],[10470,54,9909,52],[10471,4,9910,4],[10471,11,9910,11,"_linkWithRedirect"],[10471,28,9910,28],[10471,29,9910,29,"user"],[10471,33,9910,33],[10471,35,9910,35,"provider"],[10471,43,9910,43],[10471,45,9910,45,"resolver"],[10471,53,9910,53],[10471,54,9910,54],[10472,2,9911,0],[10473,2,9912,0],[10473,17,9912,15,"_linkWithRedirect"],[10473,34,9912,32,"_linkWithRedirect"],[10473,35,9912,33,"user"],[10473,39,9912,37],[10473,41,9912,39,"provider"],[10473,49,9912,47],[10473,51,9912,49,"resolver"],[10473,59,9912,57],[10473,61,9912,59],[10474,4,9913,4],[10474,10,9913,10,"userInternal"],[10474,22,9913,22],[10474,25,9913,25],[10474,29,9913,25,"getModularInstance"],[10474,42,9913,43],[10474,43,9913,43,"getModularInstance"],[10474,61,9913,43],[10474,63,9913,44,"user"],[10474,67,9913,48],[10474,68,9913,49],[10475,4,9914,4,"_assertInstanceOf"],[10475,21,9914,21],[10475,22,9914,22,"userInternal"],[10475,34,9914,34],[10475,35,9914,35,"auth"],[10475,39,9914,39],[10475,41,9914,41,"provider"],[10475,49,9914,49],[10475,51,9914,51,"FederatedAuthProvider"],[10475,72,9914,72],[10475,73,9914,73],[10476,4,9915,4],[10477,4,9916,4],[10478,4,9917,4],[10479,4,9918,4],[10479,10,9918,10,"userInternal"],[10479,22,9918,22],[10479,23,9918,23,"auth"],[10479,27,9918,27],[10479,28,9918,28,"_initializationPromise"],[10479,50,9918,50],[10480,4,9919,4],[10481,4,9920,4],[10481,10,9920,10,"resolverInternal"],[10481,26,9920,26],[10481,29,9920,29,"_withDefaultResolver"],[10481,49,9920,49],[10481,50,9920,50,"userInternal"],[10481,62,9920,62],[10481,63,9920,63,"auth"],[10481,67,9920,67],[10481,69,9920,69,"resolver"],[10481,77,9920,77],[10481,78,9920,78],[10482,4,9921,4],[10482,10,9921,10,"_assertLinkedStatus"],[10482,29,9921,29],[10482,30,9921,30],[10482,35,9921,35],[10482,37,9921,37,"userInternal"],[10482,49,9921,49],[10482,51,9921,51,"provider"],[10482,59,9921,59],[10482,60,9921,60,"providerId"],[10482,70,9921,70],[10482,71,9921,71],[10483,4,9922,4],[10483,10,9922,10,"_setPendingRedirectStatus"],[10483,35,9922,35],[10483,36,9922,36,"resolverInternal"],[10483,52,9922,52],[10483,54,9922,54,"userInternal"],[10483,66,9922,66],[10483,67,9922,67,"auth"],[10483,71,9922,71],[10483,72,9922,72],[10484,4,9923,4],[10484,10,9923,10,"eventId"],[10484,17,9923,17],[10484,20,9923,20],[10484,26,9923,26,"prepareUserForRedirect"],[10484,48,9923,48],[10484,49,9923,49,"userInternal"],[10484,61,9923,61],[10484,62,9923,62],[10485,4,9924,4],[10485,11,9924,11,"resolverInternal"],[10485,27,9924,27],[10485,28,9924,28,"_openRedirect"],[10485,41,9924,41],[10485,42,9924,42,"userInternal"],[10485,54,9924,54],[10485,55,9924,55,"auth"],[10485,59,9924,59],[10485,61,9924,61,"provider"],[10485,69,9924,69],[10485,71,9924,71],[10485,88,9924,88],[10485,89,9924,89],[10485,128,9924,128,"eventId"],[10485,135,9924,135],[10485,136,9924,136],[10486,2,9925,0],[10487,2,9926,0],[10488,0,9927,0],[10489,0,9928,0],[10490,0,9929,0],[10491,0,9930,0],[10492,0,9931,0],[10493,0,9932,0],[10494,0,9933,0],[10495,0,9934,0],[10496,0,9935,0],[10497,0,9936,0],[10498,0,9937,0],[10499,0,9938,0],[10500,0,9939,0],[10501,0,9940,0],[10502,0,9941,0],[10503,0,9942,0],[10504,0,9943,0],[10505,0,9944,0],[10506,0,9945,0],[10507,0,9946,0],[10508,0,9947,0],[10509,0,9948,0],[10510,0,9949,0],[10511,0,9950,0],[10512,0,9951,0],[10513,0,9952,0],[10514,0,9953,0],[10515,0,9954,0],[10516,0,9955,0],[10517,0,9956,0],[10518,0,9957,0],[10519,0,9958,0],[10520,0,9959,0],[10521,0,9960,0],[10522,0,9961,0],[10523,0,9962,0],[10524,0,9963,0],[10525,0,9964,0],[10526,0,9965,0],[10527,0,9966,0],[10528,2,9967,0],[10528,17,9967,15,"getRedirectResult"],[10528,34,9967,32,"getRedirectResult"],[10528,35,9967,33,"auth"],[10528,39,9967,37],[10528,41,9967,39,"resolver"],[10528,49,9967,47],[10528,51,9967,49],[10529,4,9968,4],[10529,10,9968,10,"_castAuth"],[10529,19,9968,19],[10529,20,9968,20,"auth"],[10529,24,9968,24],[10529,25,9968,25],[10529,26,9968,26,"_initializationPromise"],[10529,48,9968,48],[10530,4,9969,4],[10530,11,9969,11,"_getRedirectResult"],[10530,29,9969,29],[10530,30,9969,30,"auth"],[10530,34,9969,34],[10530,36,9969,36,"resolver"],[10530,44,9969,44],[10530,46,9969,46],[10530,51,9969,51],[10530,52,9969,52],[10531,2,9970,0],[10532,2,9971,0],[10532,17,9971,15,"_getRedirectResult"],[10532,35,9971,33,"_getRedirectResult"],[10532,36,9971,34,"auth"],[10532,40,9971,38],[10532,42,9971,40,"resolverExtern"],[10532,56,9971,54],[10532,58,9971,56,"bypassAuthState"],[10532,73,9971,71],[10532,76,9971,74],[10532,81,9971,79],[10532,83,9971,81],[10533,4,9972,4],[10533,8,9972,8],[10533,12,9972,8,"_isFirebaseServerApp"],[10533,24,9972,28],[10533,25,9972,28,"_isFirebaseServerApp"],[10533,45,9972,28],[10533,47,9972,29,"auth"],[10533,51,9972,33],[10533,52,9972,34,"app"],[10533,55,9972,37],[10533,56,9972,38],[10533,58,9972,40],[10534,6,9973,8],[10534,13,9973,15,"Promise"],[10534,20,9973,22],[10534,21,9973,23,"reject"],[10534,27,9973,29],[10534,28,9973,30,"_serverAppCurrentUserOperationNotSupportedError"],[10534,75,9973,77],[10534,76,9973,78,"auth"],[10534,80,9973,82],[10534,81,9973,83],[10534,82,9973,84],[10535,4,9974,4],[10536,4,9975,4],[10536,10,9975,10,"authInternal"],[10536,22,9975,22],[10536,25,9975,25,"_castAuth"],[10536,34,9975,34],[10536,35,9975,35,"auth"],[10536,39,9975,39],[10536,40,9975,40],[10537,4,9976,4],[10537,10,9976,10,"resolver"],[10537,18,9976,18],[10537,21,9976,21,"_withDefaultResolver"],[10537,41,9976,41],[10537,42,9976,42,"authInternal"],[10537,54,9976,54],[10537,56,9976,56,"resolverExtern"],[10537,70,9976,70],[10537,71,9976,71],[10538,4,9977,4],[10538,10,9977,10,"action"],[10538,16,9977,16],[10538,19,9977,19],[10538,23,9977,23,"RedirectAction"],[10538,37,9977,37],[10538,38,9977,38,"authInternal"],[10538,50,9977,50],[10538,52,9977,52,"resolver"],[10538,60,9977,60],[10538,62,9977,62,"bypassAuthState"],[10538,77,9977,77],[10538,78,9977,78],[10539,4,9978,4],[10539,10,9978,10,"result"],[10539,16,9978,16],[10539,19,9978,19],[10539,25,9978,25,"action"],[10539,31,9978,31],[10539,32,9978,32,"execute"],[10539,39,9978,39],[10539,40,9978,40],[10539,41,9978,41],[10540,4,9979,4],[10540,8,9979,8,"result"],[10540,14,9979,14],[10540,18,9979,18],[10540,19,9979,19,"bypassAuthState"],[10540,34,9979,34],[10540,36,9979,36],[10541,6,9980,8],[10541,13,9980,15,"result"],[10541,19,9980,21],[10541,20,9980,22,"user"],[10541,24,9980,26],[10541,25,9980,27,"_redirectEventId"],[10541,41,9980,43],[10542,6,9981,8],[10542,12,9981,14,"authInternal"],[10542,24,9981,26],[10542,25,9981,27,"_persistUserIfCurrent"],[10542,46,9981,48],[10542,47,9981,49,"result"],[10542,53,9981,55],[10542,54,9981,56,"user"],[10542,58,9981,60],[10542,59,9981,61],[10543,6,9982,8],[10543,12,9982,14,"authInternal"],[10543,24,9982,26],[10543,25,9982,27,"_setRedirectUser"],[10543,41,9982,43],[10543,42,9982,44],[10543,46,9982,48],[10543,48,9982,50,"resolverExtern"],[10543,62,9982,64],[10543,63,9982,65],[10544,4,9983,4],[10545,4,9984,4],[10545,11,9984,11,"result"],[10545,17,9984,17],[10546,2,9985,0],[10547,2,9986,0],[10547,17,9986,15,"prepareUserForRedirect"],[10547,39,9986,37,"prepareUserForRedirect"],[10547,40,9986,38,"user"],[10547,44,9986,42],[10547,46,9986,44],[10548,4,9987,4],[10548,10,9987,10,"eventId"],[10548,17,9987,17],[10548,20,9987,20,"_generateEventId"],[10548,36,9987,36],[10548,37,9987,37],[10548,40,9987,40,"user"],[10548,44,9987,44],[10548,45,9987,45,"uid"],[10548,48,9987,48],[10548,53,9987,53],[10548,54,9987,54],[10549,4,9988,4,"user"],[10549,8,9988,8],[10549,9,9988,9,"_redirectEventId"],[10549,25,9988,25],[10549,28,9988,28,"eventId"],[10549,35,9988,35],[10550,4,9989,4],[10550,10,9989,10,"user"],[10550,14,9989,14],[10550,15,9989,15,"auth"],[10550,19,9989,19],[10550,20,9989,20,"_setRedirectUser"],[10550,36,9989,36],[10550,37,9989,37,"user"],[10550,41,9989,41],[10550,42,9989,42],[10551,4,9990,4],[10551,10,9990,10,"user"],[10551,14,9990,14],[10551,15,9990,15,"auth"],[10551,19,9990,19],[10551,20,9990,20,"_persistUserIfCurrent"],[10551,41,9990,41],[10551,42,9990,42,"user"],[10551,46,9990,46],[10551,47,9990,47],[10552,4,9991,4],[10552,11,9991,11,"eventId"],[10552,18,9991,18],[10553,2,9992,0],[10555,2,9994,0],[10556,0,9995,0],[10557,0,9996,0],[10558,0,9997,0],[10559,0,9998,0],[10560,0,9999,0],[10561,0,10000,0],[10562,0,10001,0],[10563,0,10002,0],[10564,0,10003,0],[10565,0,10004,0],[10566,0,10005,0],[10567,0,10006,0],[10568,0,10007,0],[10569,0,10008,0],[10570,0,10009,0],[10571,2,10010,0],[10572,2,10011,0],[10573,2,10012,0],[10573,8,10012,6,"EVENT_DUPLICATION_CACHE_DURATION_MS"],[10573,43,10012,41],[10573,46,10012,44],[10573,48,10012,46],[10573,51,10012,49],[10573,53,10012,51],[10573,56,10012,54],[10573,60,10012,58],[10574,2,10013,0],[10574,8,10013,6,"AuthEventManager"],[10574,24,10013,22],[10574,25,10013,23],[10575,4,10014,4,"constructor"],[10575,15,10014,15,"constructor"],[10575,16,10014,16,"auth"],[10575,20,10014,20],[10575,22,10014,22],[10576,6,10015,8],[10576,10,10015,12],[10576,11,10015,13,"auth"],[10576,15,10015,17],[10576,18,10015,20,"auth"],[10576,22,10015,24],[10577,6,10016,8],[10577,10,10016,12],[10577,11,10016,13,"cachedEventUids"],[10577,26,10016,28],[10577,29,10016,31],[10577,33,10016,35,"Set"],[10577,36,10016,38],[10577,37,10016,39],[10577,38,10016,40],[10578,6,10017,8],[10578,10,10017,12],[10578,11,10017,13,"consumers"],[10578,20,10017,22],[10578,23,10017,25],[10578,27,10017,29,"Set"],[10578,30,10017,32],[10578,31,10017,33],[10578,32,10017,34],[10579,6,10018,8],[10579,10,10018,12],[10579,11,10018,13,"queuedRedirectEvent"],[10579,30,10018,32],[10579,33,10018,35],[10579,37,10018,39],[10580,6,10019,8],[10580,10,10019,12],[10580,11,10019,13,"hasHandledPotentialRedirect"],[10580,38,10019,40],[10580,41,10019,43],[10580,46,10019,48],[10581,6,10020,8],[10581,10,10020,12],[10581,11,10020,13,"lastProcessedEventTime"],[10581,33,10020,35],[10581,36,10020,38,"Date"],[10581,40,10020,42],[10581,41,10020,43,"now"],[10581,44,10020,46],[10581,45,10020,47],[10581,46,10020,48],[10582,4,10021,4],[10583,4,10022,4,"registerConsumer"],[10583,20,10022,20,"registerConsumer"],[10583,21,10022,21,"authEventConsumer"],[10583,38,10022,38],[10583,40,10022,40],[10584,6,10023,8],[10584,10,10023,12],[10584,11,10023,13,"consumers"],[10584,20,10023,22],[10584,21,10023,23,"add"],[10584,24,10023,26],[10584,25,10023,27,"authEventConsumer"],[10584,42,10023,44],[10584,43,10023,45],[10585,6,10024,8],[10585,10,10024,12],[10585,14,10024,16],[10585,15,10024,17,"queuedRedirectEvent"],[10585,34,10024,36],[10585,38,10025,12],[10585,42,10025,16],[10585,43,10025,17,"isEventForConsumer"],[10585,61,10025,35],[10585,62,10025,36],[10585,66,10025,40],[10585,67,10025,41,"queuedRedirectEvent"],[10585,86,10025,60],[10585,88,10025,62,"authEventConsumer"],[10585,105,10025,79],[10585,106,10025,80],[10585,108,10025,82],[10586,8,10026,12],[10586,12,10026,16],[10586,13,10026,17,"sendToConsumer"],[10586,27,10026,31],[10586,28,10026,32],[10586,32,10026,36],[10586,33,10026,37,"queuedRedirectEvent"],[10586,52,10026,56],[10586,54,10026,58,"authEventConsumer"],[10586,71,10026,75],[10586,72,10026,76],[10587,8,10027,12],[10587,12,10027,16],[10587,13,10027,17,"saveEventToCache"],[10587,29,10027,33],[10587,30,10027,34],[10587,34,10027,38],[10587,35,10027,39,"queuedRedirectEvent"],[10587,54,10027,58],[10587,55,10027,59],[10588,8,10028,12],[10588,12,10028,16],[10588,13,10028,17,"queuedRedirectEvent"],[10588,32,10028,36],[10588,35,10028,39],[10588,39,10028,43],[10589,6,10029,8],[10590,4,10030,4],[10591,4,10031,4,"unregisterConsumer"],[10591,22,10031,22,"unregisterConsumer"],[10591,23,10031,23,"authEventConsumer"],[10591,40,10031,40],[10591,42,10031,42],[10592,6,10032,8],[10592,10,10032,12],[10592,11,10032,13,"consumers"],[10592,20,10032,22],[10592,21,10032,23,"delete"],[10592,27,10032,29],[10592,28,10032,30,"authEventConsumer"],[10592,45,10032,47],[10592,46,10032,48],[10593,4,10033,4],[10594,4,10034,4,"onEvent"],[10594,11,10034,11,"onEvent"],[10594,12,10034,12,"event"],[10594,17,10034,17],[10594,19,10034,19],[10595,6,10035,8],[10596,6,10036,8],[10596,10,10036,12],[10596,14,10036,16],[10596,15,10036,17,"hasEventBeenHandled"],[10596,34,10036,36],[10596,35,10036,37,"event"],[10596,40,10036,42],[10596,41,10036,43],[10596,43,10036,45],[10597,8,10037,12],[10597,15,10037,19],[10597,20,10037,24],[10598,6,10038,8],[10599,6,10039,8],[10599,10,10039,12,"handled"],[10599,17,10039,19],[10599,20,10039,22],[10599,25,10039,27],[10600,6,10040,8],[10600,10,10040,12],[10600,11,10040,13,"consumers"],[10600,20,10040,22],[10600,21,10040,23,"forEach"],[10600,28,10040,30],[10600,29,10040,31,"consumer"],[10600,37,10040,39],[10600,41,10040,43],[10601,8,10041,12],[10601,12,10041,16],[10601,16,10041,20],[10601,17,10041,21,"isEventForConsumer"],[10601,35,10041,39],[10601,36,10041,40,"event"],[10601,41,10041,45],[10601,43,10041,47,"consumer"],[10601,51,10041,55],[10601,52,10041,56],[10601,54,10041,58],[10602,10,10042,16,"handled"],[10602,17,10042,23],[10602,20,10042,26],[10602,24,10042,30],[10603,10,10043,16],[10603,14,10043,20],[10603,15,10043,21,"sendToConsumer"],[10603,29,10043,35],[10603,30,10043,36,"event"],[10603,35,10043,41],[10603,37,10043,43,"consumer"],[10603,45,10043,51],[10603,46,10043,52],[10604,10,10044,16],[10604,14,10044,20],[10604,15,10044,21,"saveEventToCache"],[10604,31,10044,37],[10604,32,10044,38,"event"],[10604,37,10044,43],[10604,38,10044,44],[10605,8,10045,12],[10606,6,10046,8],[10606,7,10046,9],[10606,8,10046,10],[10607,6,10047,8],[10607,10,10047,12],[10607,14,10047,16],[10607,15,10047,17,"hasHandledPotentialRedirect"],[10607,42,10047,44],[10607,46,10047,48],[10607,47,10047,49,"isRedirectEvent"],[10607,62,10047,64],[10607,63,10047,65,"event"],[10607,68,10047,70],[10607,69,10047,71],[10607,71,10047,73],[10608,8,10048,12],[10609,8,10049,12],[10610,8,10050,12],[10610,15,10050,19,"handled"],[10610,22,10050,26],[10611,6,10051,8],[10612,6,10052,8],[10612,10,10052,12],[10612,11,10052,13,"hasHandledPotentialRedirect"],[10612,38,10052,40],[10612,41,10052,43],[10612,45,10052,47],[10613,6,10053,8],[10614,6,10054,8],[10614,10,10054,12],[10614,11,10054,13,"handled"],[10614,18,10054,20],[10614,20,10054,22],[10615,8,10055,12],[10615,12,10055,16],[10615,13,10055,17,"queuedRedirectEvent"],[10615,32,10055,36],[10615,35,10055,39,"event"],[10615,40,10055,44],[10616,8,10056,12,"handled"],[10616,15,10056,19],[10616,18,10056,22],[10616,22,10056,26],[10617,6,10057,8],[10618,6,10058,8],[10618,13,10058,15,"handled"],[10618,20,10058,22],[10619,4,10059,4],[10620,4,10060,4,"sendToConsumer"],[10620,18,10060,18,"sendToConsumer"],[10620,19,10060,19,"event"],[10620,24,10060,24],[10620,26,10060,26,"consumer"],[10620,34,10060,34],[10620,36,10060,36],[10621,6,10061,8],[10621,10,10061,12,"event"],[10621,15,10061,17],[10621,16,10061,18,"error"],[10621,21,10061,23],[10621,25,10061,27],[10621,26,10061,28,"isNullRedirectEvent"],[10621,45,10061,47],[10621,46,10061,48,"event"],[10621,51,10061,53],[10621,52,10061,54],[10621,54,10061,56],[10622,8,10062,12],[10622,14,10062,18,"code"],[10622,18,10062,22],[10622,21,10062,25,"event"],[10622,26,10062,30],[10622,27,10062,31,"error"],[10622,32,10062,36],[10622,33,10062,37,"code"],[10622,37,10062,41],[10622,39,10062,43,"split"],[10622,44,10062,48],[10622,45,10062,49],[10622,52,10062,56],[10622,53,10062,57],[10622,54,10062,58],[10622,55,10062,59],[10622,56,10062,60],[10622,60,10063,16],[10622,76,10063,32],[10622,77,10063,33],[10623,8,10064,12,"consumer"],[10623,16,10064,20],[10623,17,10064,21,"onError"],[10623,24,10064,28],[10623,25,10064,29,"_createError"],[10623,37,10064,41],[10623,38,10064,42],[10623,42,10064,46],[10623,43,10064,47,"auth"],[10623,47,10064,51],[10623,49,10064,53,"code"],[10623,53,10064,57],[10623,54,10064,58],[10623,55,10064,59],[10624,6,10065,8],[10624,7,10065,9],[10624,13,10066,13],[10625,8,10067,12,"consumer"],[10625,16,10067,20],[10625,17,10067,21,"onAuthEvent"],[10625,28,10067,32],[10625,29,10067,33,"event"],[10625,34,10067,38],[10625,35,10067,39],[10626,6,10068,8],[10627,4,10069,4],[10628,4,10070,4,"isEventForConsumer"],[10628,22,10070,22,"isEventForConsumer"],[10628,23,10070,23,"event"],[10628,28,10070,28],[10628,30,10070,30,"consumer"],[10628,38,10070,38],[10628,40,10070,40],[10629,6,10071,8],[10629,12,10071,14,"eventIdMatches"],[10629,26,10071,28],[10629,29,10071,31,"consumer"],[10629,37,10071,39],[10629,38,10071,40,"eventId"],[10629,45,10071,47],[10629,50,10071,52],[10629,54,10071,56],[10629,58,10072,13],[10629,59,10072,14],[10629,60,10072,15,"event"],[10629,65,10072,20],[10629,66,10072,21,"eventId"],[10629,73,10072,28],[10629,77,10072,32,"event"],[10629,82,10072,37],[10629,83,10072,38,"eventId"],[10629,90,10072,45],[10629,95,10072,50,"consumer"],[10629,103,10072,58],[10629,104,10072,59,"eventId"],[10629,111,10072,67],[10630,6,10073,8],[10630,13,10073,15,"consumer"],[10630,21,10073,23],[10630,22,10073,24,"filter"],[10630,28,10073,30],[10630,29,10073,31,"includes"],[10630,37,10073,39],[10630,38,10073,40,"event"],[10630,43,10073,45],[10630,44,10073,46,"type"],[10630,48,10073,50],[10630,49,10073,51],[10630,53,10073,55,"eventIdMatches"],[10630,67,10073,69],[10631,4,10074,4],[10632,4,10075,4,"hasEventBeenHandled"],[10632,23,10075,23,"hasEventBeenHandled"],[10632,24,10075,24,"event"],[10632,29,10075,29],[10632,31,10075,31],[10633,6,10076,8],[10633,10,10076,12,"Date"],[10633,14,10076,16],[10633,15,10076,17,"now"],[10633,18,10076,20],[10633,19,10076,21],[10633,20,10076,22],[10633,23,10076,25],[10633,27,10076,29],[10633,28,10076,30,"lastProcessedEventTime"],[10633,50,10076,52],[10633,54,10077,12,"EVENT_DUPLICATION_CACHE_DURATION_MS"],[10633,89,10077,47],[10633,91,10077,49],[10634,8,10078,12],[10634,12,10078,16],[10634,13,10078,17,"cachedEventUids"],[10634,28,10078,32],[10634,29,10078,33,"clear"],[10634,34,10078,38],[10634,35,10078,39],[10634,36,10078,40],[10635,6,10079,8],[10636,6,10080,8],[10636,13,10080,15],[10636,17,10080,19],[10636,18,10080,20,"cachedEventUids"],[10636,33,10080,35],[10636,34,10080,36,"has"],[10636,37,10080,39],[10636,38,10080,40,"eventUid"],[10636,46,10080,48],[10636,47,10080,49,"event"],[10636,52,10080,54],[10636,53,10080,55],[10636,54,10080,56],[10637,4,10081,4],[10638,4,10082,4,"saveEventToCache"],[10638,20,10082,20,"saveEventToCache"],[10638,21,10082,21,"event"],[10638,26,10082,26],[10638,28,10082,28],[10639,6,10083,8],[10639,10,10083,12],[10639,11,10083,13,"cachedEventUids"],[10639,26,10083,28],[10639,27,10083,29,"add"],[10639,30,10083,32],[10639,31,10083,33,"eventUid"],[10639,39,10083,41],[10639,40,10083,42,"event"],[10639,45,10083,47],[10639,46,10083,48],[10639,47,10083,49],[10640,6,10084,8],[10640,10,10084,12],[10640,11,10084,13,"lastProcessedEventTime"],[10640,33,10084,35],[10640,36,10084,38,"Date"],[10640,40,10084,42],[10640,41,10084,43,"now"],[10640,44,10084,46],[10640,45,10084,47],[10640,46,10084,48],[10641,4,10085,4],[10642,2,10086,0],[10643,2,10087,0],[10643,11,10087,9,"eventUid"],[10643,19,10087,17,"eventUid"],[10643,20,10087,18,"e"],[10643,21,10087,19],[10643,23,10087,21],[10644,4,10088,4],[10644,11,10088,11],[10644,12,10088,12,"e"],[10644,13,10088,13],[10644,14,10088,14,"type"],[10644,18,10088,18],[10644,20,10088,20,"e"],[10644,21,10088,21],[10644,22,10088,22,"eventId"],[10644,29,10088,29],[10644,31,10088,31,"e"],[10644,32,10088,32],[10644,33,10088,33,"sessionId"],[10644,42,10088,42],[10644,44,10088,44,"e"],[10644,45,10088,45],[10644,46,10088,46,"tenantId"],[10644,54,10088,54],[10644,55,10088,55],[10644,56,10088,56,"filter"],[10644,62,10088,62],[10644,63,10088,63,"v"],[10644,64,10088,64],[10644,68,10088,68,"v"],[10644,69,10088,69],[10644,70,10088,70],[10644,71,10088,71,"join"],[10644,75,10088,75],[10644,76,10088,76],[10644,79,10088,79],[10644,80,10088,80],[10645,2,10089,0],[10646,2,10090,0],[10646,11,10090,9,"isNullRedirectEvent"],[10646,30,10090,28,"isNullRedirectEvent"],[10646,31,10090,29],[10647,4,10090,31,"type"],[10647,8,10090,35],[10648,4,10090,37,"error"],[10649,2,10090,43],[10649,3,10090,44],[10649,5,10090,46],[10650,4,10091,4],[10650,11,10091,12,"type"],[10650,15,10091,16],[10650,20,10091,21],[10650,29,10091,30],[10650,30,10091,31],[10650,61,10092,8,"error"],[10650,66,10092,13],[10650,68,10092,15,"code"],[10650,72,10092,19],[10650,77,10092,24],[10650,85,10092,32],[10650,100,10092,47],[10650,101,10092,48],[10650,136,10092,83],[10651,2,10093,0],[10652,2,10094,0],[10652,11,10094,9,"isRedirectEvent"],[10652,26,10094,24,"isRedirectEvent"],[10652,27,10094,25,"event"],[10652,32,10094,30],[10652,34,10094,32],[10653,4,10095,4],[10653,12,10095,12,"event"],[10653,17,10095,17],[10653,18,10095,18,"type"],[10653,22,10095,22],[10654,6,10096,8],[10654,11,10096,13],[10654,30,10096,32],[10654,31,10096,33],[10655,6,10097,8],[10655,11,10097,13],[10655,28,10097,30],[10655,29,10097,31],[10656,6,10098,8],[10656,11,10098,13],[10656,30,10098,32],[10656,31,10098,33],[10657,8,10099,12],[10657,15,10099,19],[10657,19,10099,23],[10658,6,10100,8],[10658,11,10100,13],[10658,20,10100,22],[10658,21,10100,23],[10659,8,10101,12],[10659,15,10101,19,"isNullRedirectEvent"],[10659,34,10101,38],[10659,35,10101,39,"event"],[10659,40,10101,44],[10659,41,10101,45],[10660,6,10102,8],[10661,8,10103,12],[10661,15,10103,19],[10661,20,10103,24],[10662,4,10104,4],[10663,2,10105,0],[10665,2,10107,0],[10666,0,10108,0],[10667,0,10109,0],[10668,0,10110,0],[10669,0,10111,0],[10670,0,10112,0],[10671,0,10113,0],[10672,0,10114,0],[10673,0,10115,0],[10674,0,10116,0],[10675,0,10117,0],[10676,0,10118,0],[10677,0,10119,0],[10678,0,10120,0],[10679,0,10121,0],[10680,0,10122,0],[10681,2,10123,0],[10681,17,10123,15,"_getProjectConfig"],[10681,34,10123,32,"_getProjectConfig"],[10681,35,10123,33,"auth"],[10681,39,10123,37],[10681,41,10123,39,"request"],[10681,48,10123,46],[10681,51,10123,49],[10681,52,10123,50],[10681,53,10123,51],[10681,55,10123,53],[10682,4,10124,4],[10682,11,10124,11,"_performApiRequest"],[10682,29,10124,29],[10682,30,10124,30,"auth"],[10682,34,10124,34],[10682,36,10124,36],[10682,41,10124,41],[10682,42,10124,42],[10682,64,10124,64],[10682,78,10124,78],[10682,79,10124,79],[10682,114,10124,114,"request"],[10682,121,10124,121],[10682,122,10124,122],[10683,2,10125,0],[10685,2,10127,0],[10686,0,10128,0],[10687,0,10129,0],[10688,0,10130,0],[10689,0,10131,0],[10690,0,10132,0],[10691,0,10133,0],[10692,0,10134,0],[10693,0,10135,0],[10694,0,10136,0],[10695,0,10137,0],[10696,0,10138,0],[10697,0,10139,0],[10698,0,10140,0],[10699,0,10141,0],[10700,0,10142,0],[10701,2,10143,0],[10701,8,10143,6,"IP_ADDRESS_REGEX"],[10701,24,10143,22],[10701,27,10143,25],[10701,65,10143,63],[10702,2,10144,0],[10702,8,10144,6,"HTTP_REGEX"],[10702,18,10144,16],[10702,21,10144,19],[10702,30,10144,28],[10703,2,10145,0],[10703,17,10145,15,"_validateOrigin"],[10703,32,10145,30,"_validateOrigin"],[10703,33,10145,31,"auth"],[10703,37,10145,35],[10703,39,10145,37],[10704,4,10146,4],[10705,4,10147,4],[10705,8,10147,8,"auth"],[10705,12,10147,12],[10705,13,10147,13,"config"],[10705,19,10147,19],[10705,20,10147,20,"emulator"],[10705,28,10147,28],[10705,30,10147,30],[10706,6,10148,8],[10707,4,10149,4],[10708,4,10150,4],[10708,10,10150,10],[10709,6,10150,12,"authorizedDomains"],[10710,4,10150,30],[10710,5,10150,31],[10710,8,10150,34],[10710,14,10150,40,"_getProjectConfig"],[10710,31,10150,57],[10710,32,10150,58,"auth"],[10710,36,10150,62],[10710,37,10150,63],[10711,4,10151,4],[10711,9,10151,9],[10711,15,10151,15,"domain"],[10711,21,10151,21],[10711,25,10151,25,"authorizedDomains"],[10711,42,10151,42],[10711,44,10151,44],[10712,6,10152,8],[10712,10,10152,12],[10713,8,10153,12],[10713,12,10153,16,"matchDomain"],[10713,23,10153,27],[10713,24,10153,28,"domain"],[10713,30,10153,34],[10713,31,10153,35],[10713,33,10153,37],[10714,10,10154,16],[10715,8,10155,12],[10716,6,10156,8],[10716,7,10156,9],[10716,8,10157,8],[10716,14,10157,14],[10717,8,10158,12],[10718,6,10158,12],[10719,4,10160,4],[10720,4,10161,4],[10721,4,10162,4,"_fail"],[10721,9,10162,9],[10721,10,10162,10,"auth"],[10721,14,10162,14],[10721,16,10162,16],[10721,37,10162,37],[10721,38,10162,38],[10721,72,10162,72],[10721,73,10162,73],[10722,2,10163,0],[10723,2,10164,0],[10723,11,10164,9,"matchDomain"],[10723,22,10164,20,"matchDomain"],[10723,23,10164,21,"expected"],[10723,31,10164,29],[10723,33,10164,31],[10724,4,10165,4],[10724,10,10165,10,"currentUrl"],[10724,20,10165,20],[10724,23,10165,23,"_getCurrentUrl"],[10724,37,10165,37],[10724,38,10165,38],[10724,39,10165,39],[10725,4,10166,4],[10725,10,10166,10],[10726,6,10166,12,"protocol"],[10726,14,10166,20],[10727,6,10166,22,"hostname"],[10728,4,10166,31],[10728,5,10166,32],[10728,8,10166,35],[10728,12,10166,39,"URL"],[10728,15,10166,42],[10728,16,10166,43,"currentUrl"],[10728,26,10166,53],[10728,27,10166,54],[10729,4,10167,4],[10729,8,10167,8,"expected"],[10729,16,10167,16],[10729,17,10167,17,"startsWith"],[10729,27,10167,27],[10729,28,10167,28],[10729,49,10167,49],[10729,50,10167,50],[10729,52,10167,52],[10730,6,10168,8],[10730,12,10168,14,"ceUrl"],[10730,17,10168,19],[10730,20,10168,22],[10730,24,10168,26,"URL"],[10730,27,10168,29],[10730,28,10168,30,"expected"],[10730,36,10168,38],[10730,37,10168,39],[10731,6,10169,8],[10731,10,10169,12,"ceUrl"],[10731,15,10169,17],[10731,16,10169,18,"hostname"],[10731,24,10169,26],[10731,29,10169,31],[10731,31,10169,33],[10731,35,10169,37,"hostname"],[10731,43,10169,45],[10731,48,10169,50],[10731,50,10169,52],[10731,52,10169,54],[10732,8,10170,12],[10733,8,10171,12],[10733,15,10171,20,"protocol"],[10733,23,10171,28],[10733,28,10171,33],[10733,47,10171,52],[10733,51,10172,16,"expected"],[10733,59,10172,24],[10733,60,10172,25,"replace"],[10733,67,10172,32],[10733,68,10172,33],[10733,89,10172,54],[10733,91,10172,56],[10733,93,10172,58],[10733,94,10172,59],[10733,99,10173,20,"currentUrl"],[10733,109,10173,30],[10733,110,10173,31,"replace"],[10733,117,10173,38],[10733,118,10173,39],[10733,139,10173,60],[10733,141,10173,62],[10733,143,10173,64],[10733,144,10173,65],[10734,6,10174,8],[10735,6,10175,8],[10735,13,10175,15,"protocol"],[10735,21,10175,23],[10735,26,10175,28],[10735,45,10175,47],[10735,49,10175,51,"ceUrl"],[10735,54,10175,56],[10735,55,10175,57,"hostname"],[10735,63,10175,65],[10735,68,10175,70,"hostname"],[10735,76,10175,78],[10736,4,10176,4],[10737,4,10177,4],[10737,8,10177,8],[10737,9,10177,9,"HTTP_REGEX"],[10737,19,10177,19],[10737,20,10177,20,"test"],[10737,24,10177,24],[10737,25,10177,25,"protocol"],[10737,33,10177,33],[10737,34,10177,34],[10737,36,10177,36],[10738,6,10178,8],[10738,13,10178,15],[10738,18,10178,20],[10739,4,10179,4],[10740,4,10180,4],[10740,8,10180,8,"IP_ADDRESS_REGEX"],[10740,24,10180,24],[10740,25,10180,25,"test"],[10740,29,10180,29],[10740,30,10180,30,"expected"],[10740,38,10180,38],[10740,39,10180,39],[10740,41,10180,41],[10741,6,10181,8],[10742,6,10182,8],[10743,6,10183,8],[10743,13,10183,15,"hostname"],[10743,21,10183,23],[10743,26,10183,28,"expected"],[10743,34,10183,36],[10744,4,10184,4],[10745,4,10185,4],[10746,4,10186,4],[10746,10,10186,10,"escapedDomainPattern"],[10746,30,10186,30],[10746,33,10186,33,"expected"],[10746,41,10186,41],[10746,42,10186,42,"replace"],[10746,49,10186,49],[10746,50,10186,50],[10746,55,10186,55],[10746,57,10186,57],[10746,62,10186,62],[10746,63,10186,63],[10747,4,10187,4],[10748,4,10188,4],[10749,4,10189,4],[10749,10,10189,10,"re"],[10749,12,10189,12],[10749,15,10189,15],[10749,19,10189,19,"RegExp"],[10749,25,10189,25],[10749,26,10189,26],[10749,35,10189,35],[10749,38,10189,38,"escapedDomainPattern"],[10749,58,10189,58],[10749,61,10189,61],[10749,64,10189,64],[10749,67,10189,67,"escapedDomainPattern"],[10749,87,10189,87],[10749,90,10189,90],[10749,94,10189,94],[10749,96,10189,96],[10749,99,10189,99],[10749,100,10189,100],[10750,4,10190,4],[10750,11,10190,11,"re"],[10750,13,10190,13],[10750,14,10190,14,"test"],[10750,18,10190,18],[10750,19,10190,19,"hostname"],[10750,27,10190,27],[10750,28,10190,28],[10751,2,10191,0],[10753,2,10193,0],[10754,0,10194,0],[10755,0,10195,0],[10756,0,10196,0],[10757,0,10197,0],[10758,0,10198,0],[10759,0,10199,0],[10760,0,10200,0],[10761,0,10201,0],[10762,0,10202,0],[10763,0,10203,0],[10764,0,10204,0],[10765,0,10205,0],[10766,0,10206,0],[10767,0,10207,0],[10768,0,10208,0],[10769,2,10209,0],[10769,8,10209,6,"NETWORK_TIMEOUT"],[10769,23,10209,21],[10769,26,10209,24],[10769,30,10209,28,"Delay"],[10769,35,10209,33],[10769,36,10209,34],[10769,41,10209,39],[10769,43,10209,41],[10769,48,10209,46],[10769,49,10209,47],[10770,2,10210,0],[10771,0,10211,0],[10772,0,10212,0],[10773,0,10213,0],[10774,2,10214,0],[10774,11,10214,9,"resetUnloadedGapiModules"],[10774,35,10214,33,"resetUnloadedGapiModules"],[10774,36,10214,33],[10774,38,10214,36],[10775,4,10215,4],[10776,4,10216,4],[10777,4,10217,4],[10778,4,10218,4],[10778,10,10218,10,"beacon"],[10778,16,10218,16],[10778,19,10218,19,"_window"],[10778,26,10218,26],[10778,27,10218,27],[10778,28,10218,28],[10778,29,10218,29,"___jsl"],[10778,35,10218,35],[10779,4,10219,4],[10780,4,10220,4],[10780,8,10220,8,"beacon"],[10780,14,10220,14],[10780,16,10220,16,"H"],[10780,17,10220,17],[10780,19,10220,19],[10781,6,10221,8],[10782,6,10222,8],[10782,11,10222,13],[10782,17,10222,19,"hint"],[10782,21,10222,23],[10782,25,10222,27,"Object"],[10782,31,10222,33],[10782,32,10222,34,"keys"],[10782,36,10222,38],[10782,37,10222,39,"beacon"],[10782,43,10222,45],[10782,44,10222,46,"H"],[10782,45,10222,47],[10782,46,10222,48],[10782,48,10222,50],[10783,8,10223,12],[10784,8,10224,12,"beacon"],[10784,14,10224,18],[10784,15,10224,19,"H"],[10784,16,10224,20],[10784,17,10224,21,"hint"],[10784,21,10224,25],[10784,22,10224,26],[10784,23,10224,27,"r"],[10784,24,10224,28],[10784,27,10224,31,"beacon"],[10784,33,10224,37],[10784,34,10224,38,"H"],[10784,35,10224,39],[10784,36,10224,40,"hint"],[10784,40,10224,44],[10784,41,10224,45],[10784,42,10224,46,"r"],[10784,43,10224,47],[10784,47,10224,51],[10784,49,10224,53],[10785,8,10225,12],[10786,8,10226,12,"beacon"],[10786,14,10226,18],[10786,15,10226,19,"H"],[10786,16,10226,20],[10786,17,10226,21,"hint"],[10786,21,10226,25],[10786,22,10226,26],[10786,23,10226,27,"L"],[10786,24,10226,28],[10786,27,10226,31,"beacon"],[10786,33,10226,37],[10786,34,10226,38,"H"],[10786,35,10226,39],[10786,36,10226,40,"hint"],[10786,40,10226,44],[10786,41,10226,45],[10786,42,10226,46,"L"],[10786,43,10226,47],[10786,47,10226,51],[10786,49,10226,53],[10787,8,10227,12],[10788,8,10228,12,"beacon"],[10788,14,10228,18],[10788,15,10228,19,"H"],[10788,16,10228,20],[10788,17,10228,21,"hint"],[10788,21,10228,25],[10788,22,10228,26],[10788,23,10228,27,"r"],[10788,24,10228,28],[10788,27,10228,31],[10788,28,10228,32],[10788,31,10228,35,"beacon"],[10788,37,10228,41],[10788,38,10228,42,"H"],[10788,39,10228,43],[10788,40,10228,44,"hint"],[10788,44,10228,48],[10788,45,10228,49],[10788,46,10228,50,"L"],[10788,47,10228,51],[10788,48,10228,52],[10789,8,10229,12],[10790,8,10230,12],[10790,12,10230,16,"beacon"],[10790,18,10230,22],[10790,19,10230,23,"CP"],[10790,21,10230,25],[10790,23,10230,27],[10791,10,10231,16],[10791,15,10231,21],[10791,19,10231,25,"i"],[10791,20,10231,26],[10791,23,10231,29],[10791,24,10231,30],[10791,26,10231,32,"i"],[10791,27,10231,33],[10791,30,10231,36,"beacon"],[10791,36,10231,42],[10791,37,10231,43,"CP"],[10791,39,10231,45],[10791,40,10231,46,"length"],[10791,46,10231,52],[10791,48,10231,54,"i"],[10791,49,10231,55],[10791,51,10231,57],[10791,53,10231,59],[10792,12,10232,20],[10793,12,10233,20,"beacon"],[10793,18,10233,26],[10793,19,10233,27,"CP"],[10793,21,10233,29],[10793,22,10233,30,"i"],[10793,23,10233,31],[10793,24,10233,32],[10793,27,10233,35],[10793,31,10233,39],[10794,10,10234,16],[10795,8,10235,12],[10796,6,10236,8],[10797,4,10237,4],[10798,2,10238,0],[10799,2,10239,0],[10799,11,10239,9,"loadGapi"],[10799,19,10239,17,"loadGapi"],[10799,20,10239,18,"auth"],[10799,24,10239,22],[10799,26,10239,24],[10800,4,10240,4],[10800,11,10240,11],[10800,15,10240,15,"Promise"],[10800,22,10240,22],[10800,23,10240,23],[10800,24,10240,24,"resolve"],[10800,31,10240,31],[10800,33,10240,33,"reject"],[10800,39,10240,39],[10800,44,10240,44],[10801,6,10241,8],[10802,6,10242,8],[10802,15,10242,17,"loadGapiIframe"],[10802,29,10242,31,"loadGapiIframe"],[10802,30,10242,31],[10802,32,10242,34],[10803,8,10243,12],[10804,8,10244,12],[10805,8,10245,12,"resetUnloadedGapiModules"],[10805,32,10245,36],[10805,33,10245,37],[10805,34,10245,38],[10806,8,10246,12,"gapi"],[10806,12,10246,16],[10806,13,10246,17,"load"],[10806,17,10246,21],[10806,18,10246,22],[10806,32,10246,36],[10806,34,10246,38],[10807,10,10247,16,"callback"],[10807,18,10247,24],[10807,20,10247,26,"callback"],[10807,21,10247,26],[10807,26,10247,32],[10808,12,10248,20,"resolve"],[10808,19,10248,27],[10808,20,10248,28,"gapi"],[10808,24,10248,32],[10808,25,10248,33,"iframes"],[10808,32,10248,40],[10808,33,10248,41,"getContext"],[10808,43,10248,51],[10808,44,10248,52],[10808,45,10248,53],[10808,46,10248,54],[10809,10,10249,16],[10809,11,10249,17],[10810,10,10250,16,"ontimeout"],[10810,19,10250,25],[10810,21,10250,27,"ontimeout"],[10810,22,10250,27],[10810,27,10250,33],[10811,12,10251,20],[10812,12,10252,20],[10813,12,10253,20],[10814,12,10254,20],[10815,12,10255,20],[10816,12,10256,20],[10817,12,10257,20,"resetUnloadedGapiModules"],[10817,36,10257,44],[10817,37,10257,45],[10817,38,10257,46],[10818,12,10258,20,"reject"],[10818,18,10258,26],[10818,19,10258,27,"_createError"],[10818,31,10258,39],[10818,32,10258,40,"auth"],[10818,36,10258,44],[10818,38,10258,46],[10818,62,10258,70],[10818,63,10258,71],[10818,105,10258,113],[10818,106,10258,114],[10818,107,10258,115],[10819,10,10259,16],[10819,11,10259,17],[10820,10,10260,16,"timeout"],[10820,17,10260,23],[10820,19,10260,25,"NETWORK_TIMEOUT"],[10820,34,10260,40],[10820,35,10260,41,"get"],[10820,38,10260,44],[10820,39,10260,45],[10821,8,10261,12],[10821,9,10261,13],[10821,10,10261,14],[10822,6,10262,8],[10823,6,10263,8],[10823,10,10263,12,"_window"],[10823,17,10263,19],[10823,18,10263,20],[10823,19,10263,21],[10823,20,10263,22,"gapi"],[10823,24,10263,26],[10823,26,10263,28,"iframes"],[10823,33,10263,35],[10823,35,10263,37,"Iframe"],[10823,41,10263,43],[10823,43,10263,45],[10824,8,10264,12],[10825,8,10265,12,"resolve"],[10825,15,10265,19],[10825,16,10265,20,"gapi"],[10825,20,10265,24],[10825,21,10265,25,"iframes"],[10825,28,10265,32],[10825,29,10265,33,"getContext"],[10825,39,10265,43],[10825,40,10265,44],[10825,41,10265,45],[10825,42,10265,46],[10826,6,10266,8],[10826,7,10266,9],[10826,13,10267,13],[10826,17,10267,17],[10826,18,10267,18],[10826,19,10267,19,"_window"],[10826,26,10267,26],[10826,27,10267,27],[10826,28,10267,28],[10826,29,10267,29,"gapi"],[10826,33,10267,33],[10826,35,10267,35,"load"],[10826,39,10267,39],[10826,41,10267,41],[10827,8,10268,12],[10828,8,10269,12,"loadGapiIframe"],[10828,22,10269,26],[10828,23,10269,27],[10828,24,10269,28],[10829,6,10270,8],[10829,7,10270,9],[10829,13,10271,13],[10830,8,10272,12],[10831,8,10273,12],[10832,8,10274,12],[10833,8,10275,12],[10834,8,10276,12],[10835,8,10277,12],[10835,14,10277,18,"cbName"],[10835,20,10277,24],[10835,23,10277,27,"_generateCallbackName"],[10835,44,10277,48],[10835,45,10277,49],[10835,56,10277,60],[10835,57,10277,61],[10836,8,10278,12],[10837,8,10279,12,"_window"],[10837,15,10279,19],[10837,16,10279,20],[10837,17,10279,21],[10837,18,10279,22,"cbName"],[10837,24,10279,28],[10837,25,10279,29],[10837,28,10279,32],[10837,34,10279,38],[10838,10,10280,16],[10839,10,10281,16],[10839,14,10281,20],[10839,15,10281,21],[10839,16,10281,22,"gapi"],[10839,20,10281,26],[10839,21,10281,27,"load"],[10839,25,10281,31],[10839,27,10281,33],[10840,12,10282,20,"loadGapiIframe"],[10840,26,10282,34],[10840,27,10282,35],[10840,28,10282,36],[10841,10,10283,16],[10841,11,10283,17],[10841,17,10284,21],[10842,12,10285,20],[10843,12,10286,20,"reject"],[10843,18,10286,26],[10843,19,10286,27,"_createError"],[10843,31,10286,39],[10843,32,10286,40,"auth"],[10843,36,10286,44],[10843,38,10286,46],[10843,62,10286,70],[10843,63,10286,71],[10843,105,10286,113],[10843,106,10286,114],[10843,107,10286,115],[10844,10,10287,16],[10845,8,10288,12],[10845,9,10288,13],[10846,8,10289,12],[10847,8,10290,12],[10847,15,10290,19,"_loadJS"],[10847,22,10290,26],[10847,23,10290,27],[10847,26,10290,30,"_gapiScriptUrl"],[10847,40,10290,44],[10847,41,10290,45],[10847,42,10290,46],[10847,53,10290,57,"cbName"],[10847,59,10290,63],[10847,61,10290,65],[10847,62,10290,66],[10847,63,10291,17,"catch"],[10847,68,10291,22],[10847,69,10291,23,"e"],[10847,70,10291,24],[10847,74,10291,28,"reject"],[10847,80,10291,34],[10847,81,10291,35,"e"],[10847,82,10291,36],[10847,83,10291,37],[10847,84,10291,38],[10848,6,10292,8],[10849,4,10293,4],[10849,5,10293,5],[10849,6,10293,6],[10849,7,10293,7,"catch"],[10849,12,10293,12],[10849,13,10293,13,"error"],[10849,18,10293,18],[10849,22,10293,22],[10850,6,10294,8],[10851,6,10295,8,"cachedGApiLoader"],[10851,22,10295,24],[10851,25,10295,27],[10851,29,10295,31],[10852,6,10296,8],[10852,12,10296,14,"error"],[10852,17,10296,19],[10853,4,10297,4],[10853,5,10297,5],[10853,6,10297,6],[10854,2,10298,0],[10855,2,10299,0],[10855,6,10299,4,"cachedGApiLoader"],[10855,22,10299,20],[10855,25,10299,23],[10855,29,10299,27],[10856,2,10300,0],[10856,11,10300,9,"_loadGapi"],[10856,20,10300,18,"_loadGapi"],[10856,21,10300,19,"auth"],[10856,25,10300,23],[10856,27,10300,25],[10857,4,10301,4,"cachedGApiLoader"],[10857,20,10301,20],[10857,23,10301,23,"cachedGApiLoader"],[10857,39,10301,39],[10857,43,10301,43,"loadGapi"],[10857,51,10301,51],[10857,52,10301,52,"auth"],[10857,56,10301,56],[10857,57,10301,57],[10858,4,10302,4],[10858,11,10302,11,"cachedGApiLoader"],[10858,27,10302,27],[10859,2,10303,0],[10861,2,10305,0],[10862,0,10306,0],[10863,0,10307,0],[10864,0,10308,0],[10865,0,10309,0],[10866,0,10310,0],[10867,0,10311,0],[10868,0,10312,0],[10869,0,10313,0],[10870,0,10314,0],[10871,0,10315,0],[10872,0,10316,0],[10873,0,10317,0],[10874,0,10318,0],[10875,0,10319,0],[10876,0,10320,0],[10877,2,10321,0],[10877,8,10321,6,"PING_TIMEOUT"],[10877,20,10321,18],[10877,23,10321,21],[10877,27,10321,25,"Delay"],[10877,32,10321,30],[10877,33,10321,31],[10877,37,10321,35],[10877,39,10321,37],[10877,44,10321,42],[10877,45,10321,43],[10878,2,10322,0],[10878,8,10322,6,"IFRAME_PATH"],[10878,19,10322,17],[10878,22,10322,20],[10878,38,10322,36],[10879,2,10323,0],[10879,8,10323,6,"EMULATED_IFRAME_PATH"],[10879,28,10323,26],[10879,31,10323,29],[10879,53,10323,51],[10880,2,10324,0],[10880,8,10324,6,"IFRAME_ATTRIBUTES"],[10880,25,10324,23],[10880,28,10324,26],[10881,4,10325,4,"style"],[10881,9,10325,9],[10881,11,10325,11],[10882,6,10326,8,"position"],[10882,14,10326,16],[10882,16,10326,18],[10882,26,10326,28],[10883,6,10327,8,"top"],[10883,9,10327,11],[10883,11,10327,13],[10883,19,10327,21],[10884,6,10328,8,"width"],[10884,11,10328,13],[10884,13,10328,15],[10884,18,10328,20],[10885,6,10329,8,"height"],[10885,12,10329,14],[10885,14,10329,16],[10886,4,10330,4],[10886,5,10330,5],[10887,4,10331,4],[10887,17,10331,17],[10887,19,10331,19],[10887,25,10331,25],[10888,4,10332,4,"tabindex"],[10888,12,10332,12],[10888,14,10332,14],[10889,2,10333,0],[10889,3,10333,1],[10890,2,10334,0],[10891,2,10335,0],[10892,2,10336,0],[10892,8,10336,6,"EID_FROM_APIHOST"],[10892,24,10336,22],[10892,27,10336,25],[10892,31,10336,29,"Map"],[10892,34,10336,32],[10892,35,10336,33],[10892,36,10337,4],[10892,37,10337,5],[10892,69,10337,37],[10892,70,10337,38],[10892,100,10337,68],[10892,103,10337,71],[10892,104,10337,72],[10893,2,10337,74],[10894,2,10338,4],[10894,3,10338,5],[10894,51,10338,53],[10894,53,10338,55],[10894,56,10338,58],[10894,57,10338,59],[10895,2,10338,61],[10896,2,10339,4],[10896,3,10339,5],[10896,48,10339,50],[10896,50,10339,52],[10896,53,10339,55],[10896,54,10339,56],[10896,55,10339,57],[10897,2,10339,57],[10897,3,10340,1],[10897,4,10340,2],[10898,2,10341,0],[10898,11,10341,9,"getIframeUrl"],[10898,23,10341,21,"getIframeUrl"],[10898,24,10341,22,"auth"],[10898,28,10341,26],[10898,30,10341,28],[10899,4,10342,4],[10899,10,10342,10,"config"],[10899,16,10342,16],[10899,19,10342,19,"auth"],[10899,23,10342,23],[10899,24,10342,24,"config"],[10899,30,10342,30],[10900,4,10343,4,"_assert"],[10900,11,10343,11],[10900,12,10343,12,"config"],[10900,18,10343,18],[10900,19,10343,19,"authDomain"],[10900,29,10343,29],[10900,31,10343,31,"auth"],[10900,35,10343,35],[10900,37,10343,37],[10900,66,10343,66],[10900,67,10343,67],[10900,106,10343,106],[10900,107,10343,107],[10901,4,10344,4],[10901,10,10344,10,"url"],[10901,13,10344,13],[10901,16,10344,16,"config"],[10901,22,10344,22],[10901,23,10344,23,"emulator"],[10901,31,10344,31],[10901,34,10345,10,"_emulatorUrl"],[10901,46,10345,22],[10901,47,10345,23,"config"],[10901,53,10345,29],[10901,55,10345,31,"EMULATED_IFRAME_PATH"],[10901,75,10345,51],[10901,76,10345,52],[10901,79,10346,10],[10901,90,10346,21,"auth"],[10901,94,10346,25],[10901,95,10346,26,"config"],[10901,101,10346,32],[10901,102,10346,33,"authDomain"],[10901,112,10346,43],[10901,116,10346,47,"IFRAME_PATH"],[10901,127,10346,58],[10901,129,10346,60],[10902,4,10347,4],[10902,10,10347,10,"params"],[10902,16,10347,16],[10902,19,10347,19],[10903,6,10348,8,"apiKey"],[10903,12,10348,14],[10903,14,10348,16,"config"],[10903,20,10348,22],[10903,21,10348,23,"apiKey"],[10903,27,10348,29],[10904,6,10349,8,"appName"],[10904,13,10349,15],[10904,15,10349,17,"auth"],[10904,19,10349,21],[10904,20,10349,22,"name"],[10904,24,10349,26],[10905,6,10350,8,"v"],[10905,7,10350,9],[10905,9,10350,11,"SDK_VERSION"],[10905,21,10350,22],[10905,22,10350,22,"SDK_VERSION"],[10906,4,10351,4],[10906,5,10351,5],[10907,4,10352,4],[10907,10,10352,10,"eid"],[10907,13,10352,13],[10907,16,10352,16,"EID_FROM_APIHOST"],[10907,32,10352,32],[10907,33,10352,33,"get"],[10907,36,10352,36],[10907,37,10352,37,"auth"],[10907,41,10352,41],[10907,42,10352,42,"config"],[10907,48,10352,48],[10907,49,10352,49,"apiHost"],[10907,56,10352,56],[10907,57,10352,57],[10908,4,10353,4],[10908,8,10353,8,"eid"],[10908,11,10353,11],[10908,13,10353,13],[10909,6,10354,8,"params"],[10909,12,10354,14],[10909,13,10354,15,"eid"],[10909,16,10354,18],[10909,19,10354,21,"eid"],[10909,22,10354,24],[10910,4,10355,4],[10911,4,10356,4],[10911,10,10356,10,"frameworks"],[10911,20,10356,20],[10911,23,10356,23,"auth"],[10911,27,10356,27],[10911,28,10356,28,"_getFrameworks"],[10911,42,10356,42],[10911,43,10356,43],[10911,44,10356,44],[10912,4,10357,4],[10912,8,10357,8,"frameworks"],[10912,18,10357,18],[10912,19,10357,19,"length"],[10912,25,10357,25],[10912,27,10357,27],[10913,6,10358,8,"params"],[10913,12,10358,14],[10913,13,10358,15,"fw"],[10913,15,10358,17],[10913,18,10358,20,"frameworks"],[10913,28,10358,30],[10913,29,10358,31,"join"],[10913,33,10358,35],[10913,34,10358,36],[10913,37,10358,39],[10913,38,10358,40],[10914,4,10359,4],[10915,4,10360,4],[10915,11,10360,11],[10915,14,10360,14,"url"],[10915,17,10360,17],[10915,21,10360,21],[10915,25,10360,21,"querystring"],[10915,38,10360,32],[10915,39,10360,32,"querystring"],[10915,50,10360,32],[10915,52,10360,33,"params"],[10915,58,10360,39],[10915,59,10360,40],[10915,60,10360,41,"slice"],[10915,65,10360,46],[10915,66,10360,47],[10915,67,10360,48],[10915,68,10360,49],[10915,70,10360,51],[10916,2,10361,0],[10917,2,10362,0],[10917,17,10362,15,"_openIframe"],[10917,28,10362,26,"_openIframe"],[10917,29,10362,27,"auth"],[10917,33,10362,31],[10917,35,10362,33],[10918,4,10363,4],[10918,10,10363,10,"context"],[10918,17,10363,17],[10918,20,10363,20],[10918,26,10363,26,"_loadGapi"],[10918,35,10363,35],[10918,36,10363,36,"auth"],[10918,40,10363,40],[10918,41,10363,41],[10919,4,10364,4],[10919,10,10364,10,"gapi"],[10919,14,10364,14],[10919,17,10364,17,"_window"],[10919,24,10364,24],[10919,25,10364,25],[10919,26,10364,26],[10919,27,10364,27,"gapi"],[10919,31,10364,31],[10920,4,10365,4,"_assert"],[10920,11,10365,11],[10920,12,10365,12,"gapi"],[10920,16,10365,16],[10920,18,10365,18,"auth"],[10920,22,10365,22],[10920,24,10365,24],[10920,40,10365,40],[10920,41,10365,41],[10920,75,10365,75],[10920,76,10365,76],[10921,4,10366,4],[10921,11,10366,11,"context"],[10921,18,10366,18],[10921,19,10366,19,"open"],[10921,23,10366,23],[10921,24,10366,24],[10922,6,10367,8,"where"],[10922,11,10367,13],[10922,13,10367,15,"document"],[10922,21,10367,23],[10922,22,10367,24,"body"],[10922,26,10367,28],[10923,6,10368,8,"url"],[10923,9,10368,11],[10923,11,10368,13,"getIframeUrl"],[10923,23,10368,25],[10923,24,10368,26,"auth"],[10923,28,10368,30],[10923,29,10368,31],[10924,6,10369,8,"messageHandlersFilter"],[10924,27,10369,29],[10924,29,10369,31,"gapi"],[10924,33,10369,35],[10924,34,10369,36,"iframes"],[10924,41,10369,43],[10924,42,10369,44,"CROSS_ORIGIN_IFRAMES_FILTER"],[10924,69,10369,71],[10925,6,10370,8,"attributes"],[10925,16,10370,18],[10925,18,10370,20,"IFRAME_ATTRIBUTES"],[10925,35,10370,37],[10926,6,10371,8,"dontclear"],[10926,15,10371,17],[10926,17,10371,19],[10927,4,10372,4],[10927,5,10372,5],[10927,7,10372,8,"iframe"],[10927,13,10372,14],[10927,17,10372,19],[10927,21,10372,23,"Promise"],[10927,28,10372,30],[10927,29,10372,31],[10927,36,10372,38,"resolve"],[10927,43,10372,45],[10927,45,10372,47,"reject"],[10927,51,10372,53],[10927,56,10372,58],[10928,6,10373,8],[10928,12,10373,14,"iframe"],[10928,18,10373,20],[10928,19,10373,21,"restyle"],[10928,26,10373,28],[10928,27,10373,29],[10929,8,10374,12],[10930,8,10375,12,"setHideOnLeave"],[10930,22,10375,26],[10930,24,10375,28],[10931,6,10376,8],[10931,7,10376,9],[10931,8,10376,10],[10932,6,10377,8],[10932,12,10377,14,"networkError"],[10932,24,10377,26],[10932,27,10377,29,"_createError"],[10932,39,10377,41],[10932,40,10377,42,"auth"],[10932,44,10377,46],[10932,46,10377,48],[10932,70,10377,72],[10932,71,10377,73],[10932,113,10377,115],[10932,114,10377,116],[10933,6,10378,8],[10934,6,10379,8],[10935,6,10380,8],[10935,12,10380,14,"networkErrorTimer"],[10935,29,10380,31],[10935,32,10380,34,"_window"],[10935,39,10380,41],[10935,40,10380,42],[10935,41,10380,43],[10935,42,10380,44,"setTimeout"],[10935,52,10380,54],[10935,53,10380,55],[10935,59,10380,61],[10936,8,10381,12,"reject"],[10936,14,10381,18],[10936,15,10381,19,"networkError"],[10936,27,10381,31],[10936,28,10381,32],[10937,6,10382,8],[10937,7,10382,9],[10937,9,10382,11,"PING_TIMEOUT"],[10937,21,10382,23],[10937,22,10382,24,"get"],[10937,25,10382,27],[10937,26,10382,28],[10937,27,10382,29],[10937,28,10382,30],[10938,6,10383,8],[10939,6,10384,8],[10939,15,10384,17,"clearTimerAndResolve"],[10939,35,10384,37,"clearTimerAndResolve"],[10939,36,10384,37],[10939,38,10384,40],[10940,8,10385,12,"_window"],[10940,15,10385,19],[10940,16,10385,20],[10940,17,10385,21],[10940,18,10385,22,"clearTimeout"],[10940,30,10385,34],[10940,31,10385,35,"networkErrorTimer"],[10940,48,10385,52],[10940,49,10385,53],[10941,8,10386,12,"resolve"],[10941,15,10386,19],[10941,16,10386,20,"iframe"],[10941,22,10386,26],[10941,23,10386,27],[10942,6,10387,8],[10943,6,10388,8],[10944,6,10389,8],[10945,6,10390,8,"iframe"],[10945,12,10390,14],[10945,13,10390,15,"ping"],[10945,17,10390,19],[10945,18,10390,20,"clearTimerAndResolve"],[10945,38,10390,40],[10945,39,10390,41],[10945,40,10390,42,"then"],[10945,44,10390,46],[10945,45,10390,47,"clearTimerAndResolve"],[10945,65,10390,67],[10945,67,10390,69],[10945,73,10390,75],[10946,8,10391,12,"reject"],[10946,14,10391,18],[10946,15,10391,19,"networkError"],[10946,27,10391,31],[10946,28,10391,32],[10947,6,10392,8],[10947,7,10392,9],[10947,8,10392,10],[10948,4,10393,4],[10948,5,10393,5],[10948,6,10393,6],[10948,7,10393,7],[10949,2,10394,0],[10951,2,10396,0],[10952,0,10397,0],[10953,0,10398,0],[10954,0,10399,0],[10955,0,10400,0],[10956,0,10401,0],[10957,0,10402,0],[10958,0,10403,0],[10959,0,10404,0],[10960,0,10405,0],[10961,0,10406,0],[10962,0,10407,0],[10963,0,10408,0],[10964,0,10409,0],[10965,0,10410,0],[10966,0,10411,0],[10967,2,10412,0],[10967,8,10412,6,"BASE_POPUP_OPTIONS"],[10967,26,10412,24],[10967,29,10412,27],[10968,4,10413,4,"location"],[10968,12,10413,12],[10968,14,10413,14],[10968,19,10413,19],[10969,4,10414,4,"resizable"],[10969,13,10414,13],[10969,15,10414,15],[10969,20,10414,20],[10970,4,10415,4,"statusbar"],[10970,13,10415,13],[10970,15,10415,15],[10970,20,10415,20],[10971,4,10416,4,"toolbar"],[10971,11,10416,11],[10971,13,10416,13],[10972,2,10417,0],[10972,3,10417,1],[10973,2,10418,0],[10973,8,10418,6,"DEFAULT_WIDTH"],[10973,21,10418,19],[10973,24,10418,22],[10973,27,10418,25],[10974,2,10419,0],[10974,8,10419,6,"DEFAULT_HEIGHT"],[10974,22,10419,20],[10974,25,10419,23],[10974,28,10419,26],[10975,2,10420,0],[10975,8,10420,6,"TARGET_BLANK"],[10975,20,10420,18],[10975,23,10420,21],[10975,31,10420,29],[10976,2,10421,0],[10976,8,10421,6,"FIREFOX_EMPTY_URL"],[10976,25,10421,23],[10976,28,10421,26],[10976,46,10421,44],[10977,2,10422,0],[10977,8,10422,6,"AuthPopup"],[10977,17,10422,15],[10977,18,10422,16],[10978,4,10423,4,"constructor"],[10978,15,10423,15,"constructor"],[10978,16,10423,16,"window"],[10978,22,10423,22],[10978,24,10423,24],[10979,6,10424,8],[10979,10,10424,12],[10979,11,10424,13,"window"],[10979,17,10424,19],[10979,20,10424,22,"window"],[10979,26,10424,28],[10980,6,10425,8],[10980,10,10425,12],[10980,11,10425,13,"associatedEvent"],[10980,26,10425,28],[10980,29,10425,31],[10980,33,10425,35],[10981,4,10426,4],[10982,4,10427,4,"close"],[10982,9,10427,9,"close"],[10982,10,10427,9],[10982,12,10427,12],[10983,6,10428,8],[10983,10,10428,12],[10983,14,10428,16],[10983,15,10428,17,"window"],[10983,21,10428,23],[10983,23,10428,25],[10984,8,10429,12],[10984,12,10429,16],[10985,10,10430,16],[10985,14,10430,20],[10985,15,10430,21,"window"],[10985,21,10430,27],[10985,22,10430,28,"close"],[10985,27,10430,33],[10985,28,10430,34],[10985,29,10430,35],[10986,8,10431,12],[10986,9,10431,13],[10986,10,10432,12],[10986,17,10432,19,"e"],[10986,18,10432,20],[10986,20,10432,22],[10986,21,10432,24],[10987,6,10433,8],[10988,4,10434,4],[10989,2,10435,0],[10990,2,10436,0],[10990,11,10436,9,"_open"],[10990,16,10436,14,"_open"],[10990,17,10436,15,"auth"],[10990,21,10436,19],[10990,23,10436,21,"url"],[10990,26,10436,24],[10990,28,10436,26,"name"],[10990,32,10436,30],[10990,34,10436,32,"width"],[10990,39,10436,37],[10990,42,10436,40,"DEFAULT_WIDTH"],[10990,55,10436,53],[10990,57,10436,55,"height"],[10990,63,10436,61],[10990,66,10436,64,"DEFAULT_HEIGHT"],[10990,80,10436,78],[10990,82,10436,80],[10991,4,10437,4],[10991,10,10437,10,"top"],[10991,13,10437,13],[10991,16,10437,16,"Math"],[10991,20,10437,20],[10991,21,10437,21,"max"],[10991,24,10437,24],[10991,25,10437,25],[10991,26,10437,26,"window"],[10991,32,10437,32],[10991,33,10437,33,"screen"],[10991,39,10437,39],[10991,40,10437,40,"availHeight"],[10991,51,10437,51],[10991,54,10437,54,"height"],[10991,60,10437,60],[10991,64,10437,64],[10991,65,10437,65],[10991,67,10437,67],[10991,68,10437,68],[10991,69,10437,69],[10991,70,10437,70,"toString"],[10991,78,10437,78],[10991,79,10437,79],[10991,80,10437,80],[10992,4,10438,4],[10992,10,10438,10,"left"],[10992,14,10438,14],[10992,17,10438,17,"Math"],[10992,21,10438,21],[10992,22,10438,22,"max"],[10992,25,10438,25],[10992,26,10438,26],[10992,27,10438,27,"window"],[10992,33,10438,33],[10992,34,10438,34,"screen"],[10992,40,10438,40],[10992,41,10438,41,"availWidth"],[10992,51,10438,51],[10992,54,10438,54,"width"],[10992,59,10438,59],[10992,63,10438,63],[10992,64,10438,64],[10992,66,10438,66],[10992,67,10438,67],[10992,68,10438,68],[10992,69,10438,69,"toString"],[10992,77,10438,77],[10992,78,10438,78],[10992,79,10438,79],[10993,4,10439,4],[10993,8,10439,8,"target"],[10993,14,10439,14],[10993,17,10439,17],[10993,19,10439,19],[10994,4,10440,4],[10994,10,10440,10,"options"],[10994,17,10440,17],[10994,20,10440,20],[10995,6,10441,8],[10995,9,10441,11,"BASE_POPUP_OPTIONS"],[10995,27,10441,29],[10996,6,10442,8,"width"],[10996,11,10442,13],[10996,13,10442,15,"width"],[10996,18,10442,20],[10996,19,10442,21,"toString"],[10996,27,10442,29],[10996,28,10442,30],[10996,29,10442,31],[10997,6,10443,8,"height"],[10997,12,10443,14],[10997,14,10443,16,"height"],[10997,20,10443,22],[10997,21,10443,23,"toString"],[10997,29,10443,31],[10997,30,10443,32],[10997,31,10443,33],[10998,6,10444,8,"top"],[10998,9,10444,11],[10999,6,10445,8,"left"],[11000,4,10446,4],[11000,5,10446,5],[11001,4,10447,4],[11002,4,10448,4],[11003,4,10449,4],[11003,10,10449,10,"ua"],[11003,12,10449,12],[11003,15,10449,15],[11003,19,10449,15,"getUA"],[11003,32,10449,20],[11003,33,10449,20,"getUA"],[11003,38,10449,20],[11003,40,10449,21],[11003,41,10449,22],[11003,42,10449,23,"toLowerCase"],[11003,53,10449,34],[11003,54,10449,35],[11003,55,10449,36],[11004,4,10450,4],[11004,8,10450,8,"name"],[11004,12,10450,12],[11004,14,10450,14],[11005,6,10451,8,"target"],[11005,12,10451,14],[11005,15,10451,17,"_isChromeIOS"],[11005,27,10451,29],[11005,28,10451,30,"ua"],[11005,30,10451,32],[11005,31,10451,33],[11005,34,10451,36,"TARGET_BLANK"],[11005,46,10451,48],[11005,49,10451,51,"name"],[11005,53,10451,55],[11006,4,10452,4],[11007,4,10453,4],[11007,8,10453,8,"_isFirefox"],[11007,18,10453,18],[11007,19,10453,19,"ua"],[11007,21,10453,21],[11007,22,10453,22],[11007,24,10453,24],[11008,6,10454,8],[11009,6,10455,8,"url"],[11009,9,10455,11],[11009,12,10455,14,"url"],[11009,15,10455,17],[11009,19,10455,21,"FIREFOX_EMPTY_URL"],[11009,36,10455,38],[11010,6,10456,8],[11011,6,10457,8],[11012,6,10458,8,"options"],[11012,13,10458,15],[11012,14,10458,16,"scrollbars"],[11012,24,10458,26],[11012,27,10458,29],[11012,32,10458,34],[11013,4,10459,4],[11014,4,10460,4],[11014,10,10460,10,"optionsString"],[11014,23,10460,23],[11014,26,10460,26,"Object"],[11014,32,10460,32],[11014,33,10460,33,"entries"],[11014,40,10460,40],[11014,41,10460,41,"options"],[11014,48,10460,48],[11014,49,10460,49],[11014,50,10460,50,"reduce"],[11014,56,10460,56],[11014,57,10460,57],[11014,58,10460,58,"accum"],[11014,63,10460,63],[11014,65,10460,65],[11014,66,10460,66,"key"],[11014,69,10460,69],[11014,71,10460,71,"value"],[11014,76,10460,76],[11014,77,10460,77],[11014,82,10460,82],[11014,85,10460,85,"accum"],[11014,90,10460,90],[11014,93,10460,93,"key"],[11014,96,10460,96],[11014,100,10460,100,"value"],[11014,105,10460,105],[11014,108,10460,108],[11014,110,10460,110],[11014,112,10460,112],[11014,113,10460,113],[11015,4,10461,4],[11015,8,10461,8,"_isIOSStandalone"],[11015,24,10461,24],[11015,25,10461,25,"ua"],[11015,27,10461,27],[11015,28,10461,28],[11015,32,10461,32,"target"],[11015,38,10461,38],[11015,43,10461,43],[11015,50,10461,50],[11015,52,10461,52],[11016,6,10462,8,"openAsNewWindowIOS"],[11016,24,10462,26],[11016,25,10462,27,"url"],[11016,28,10462,30],[11016,32,10462,34],[11016,34,10462,36],[11016,36,10462,38,"target"],[11016,42,10462,44],[11016,43,10462,45],[11017,6,10463,8],[11017,13,10463,15],[11017,17,10463,19,"AuthPopup"],[11017,26,10463,28],[11017,27,10463,29],[11017,31,10463,33],[11017,32,10463,34],[11018,4,10464,4],[11019,4,10465,4],[11020,4,10466,4],[11021,4,10467,4],[11021,10,10467,10,"newWin"],[11021,16,10467,16],[11021,19,10467,19,"window"],[11021,25,10467,25],[11021,26,10467,26,"open"],[11021,30,10467,30],[11021,31,10467,31,"url"],[11021,34,10467,34],[11021,38,10467,38],[11021,40,10467,40],[11021,42,10467,42,"target"],[11021,48,10467,48],[11021,50,10467,50,"optionsString"],[11021,63,10467,63],[11021,64,10467,64],[11022,4,10468,4,"_assert"],[11022,11,10468,11],[11022,12,10468,12,"newWin"],[11022,18,10468,18],[11022,20,10468,20,"auth"],[11022,24,10468,24],[11022,26,10468,26],[11022,41,10468,41],[11022,42,10468,42],[11022,75,10468,75],[11022,76,10468,76],[11023,4,10469,4],[11024,4,10470,4],[11024,8,10470,8],[11025,6,10471,8,"newWin"],[11025,12,10471,14],[11025,13,10471,15,"focus"],[11025,18,10471,20],[11025,19,10471,21],[11025,20,10471,22],[11026,4,10472,4],[11026,5,10472,5],[11026,6,10473,4],[11026,13,10473,11,"e"],[11026,14,10473,12],[11026,16,10473,14],[11026,17,10473,16],[11027,4,10474,4],[11027,11,10474,11],[11027,15,10474,15,"AuthPopup"],[11027,24,10474,24],[11027,25,10474,25,"newWin"],[11027,31,10474,31],[11027,32,10474,32],[11028,2,10475,0],[11029,2,10476,0],[11029,11,10476,9,"openAsNewWindowIOS"],[11029,29,10476,27,"openAsNewWindowIOS"],[11029,30,10476,28,"url"],[11029,33,10476,31],[11029,35,10476,33,"target"],[11029,41,10476,39],[11029,43,10476,41],[11030,4,10477,4],[11030,10,10477,10,"el"],[11030,12,10477,12],[11030,15,10477,15,"document"],[11030,23,10477,23],[11030,24,10477,24,"createElement"],[11030,37,10477,37],[11030,38,10477,38],[11030,41,10477,41],[11030,42,10477,42],[11031,4,10478,4,"el"],[11031,6,10478,6],[11031,7,10478,7,"href"],[11031,11,10478,11],[11031,14,10478,14,"url"],[11031,17,10478,17],[11032,4,10479,4,"el"],[11032,6,10479,6],[11032,7,10479,7,"target"],[11032,13,10479,13],[11032,16,10479,16,"target"],[11032,22,10479,22],[11033,4,10480,4],[11033,10,10480,10,"click"],[11033,15,10480,15],[11033,18,10480,18,"document"],[11033,26,10480,26],[11033,27,10480,27,"createEvent"],[11033,38,10480,38],[11033,39,10480,39],[11033,51,10480,51],[11033,52,10480,52],[11034,4,10481,4,"click"],[11034,9,10481,9],[11034,10,10481,10,"initMouseEvent"],[11034,24,10481,24],[11034,25,10481,25],[11034,32,10481,32],[11034,34,10481,34],[11034,38,10481,38],[11034,40,10481,40],[11034,44,10481,44],[11034,46,10481,46,"window"],[11034,52,10481,52],[11034,54,10481,54],[11034,55,10481,55],[11034,57,10481,57],[11034,58,10481,58],[11034,60,10481,60],[11034,61,10481,61],[11034,63,10481,63],[11034,64,10481,64],[11034,66,10481,66],[11034,67,10481,67],[11034,69,10481,69],[11034,74,10481,74],[11034,76,10481,76],[11034,81,10481,81],[11034,83,10481,83],[11034,88,10481,88],[11034,90,10481,90],[11034,95,10481,95],[11034,97,10481,97],[11034,98,10481,98],[11034,100,10481,100],[11034,104,10481,104],[11034,105,10481,105],[11035,4,10482,4,"el"],[11035,6,10482,6],[11035,7,10482,7,"dispatchEvent"],[11035,20,10482,20],[11035,21,10482,21,"click"],[11035,26,10482,26],[11035,27,10482,27],[11036,2,10483,0],[11038,2,10485,0],[11039,0,10486,0],[11040,0,10487,0],[11041,0,10488,0],[11042,0,10489,0],[11043,0,10490,0],[11044,0,10491,0],[11045,0,10492,0],[11046,0,10493,0],[11047,0,10494,0],[11048,0,10495,0],[11049,0,10496,0],[11050,0,10497,0],[11051,0,10498,0],[11052,0,10499,0],[11053,0,10500,0],[11054,2,10501,0],[11055,0,10502,0],[11056,0,10503,0],[11057,0,10504,0],[11058,0,10505,0],[11059,2,10506,0],[11059,8,10506,6,"WIDGET_PATH"],[11059,19,10506,17],[11059,22,10506,20],[11059,39,10506,37],[11060,2,10507,0],[11061,0,10508,0],[11062,0,10509,0],[11063,0,10510,0],[11064,0,10511,0],[11065,2,10512,0],[11065,8,10512,6,"EMULATOR_WIDGET_PATH"],[11065,28,10512,26],[11065,31,10512,29],[11065,54,10512,52],[11066,2,10513,0],[11067,0,10514,0],[11068,0,10515,0],[11069,0,10516,0],[11070,0,10517,0],[11071,2,10518,0],[11071,8,10518,6,"FIREBASE_APP_CHECK_FRAGMENT_ID"],[11071,38,10518,36],[11071,41,10518,39,"encodeURIComponent"],[11071,59,10518,57],[11071,60,10518,58],[11071,65,10518,63],[11071,66,10518,64],[11072,2,10519,0],[11072,17,10519,15,"_getRedirectUrl"],[11072,32,10519,30,"_getRedirectUrl"],[11072,33,10519,31,"auth"],[11072,37,10519,35],[11072,39,10519,37,"provider"],[11072,47,10519,45],[11072,49,10519,47,"authType"],[11072,57,10519,55],[11072,59,10519,57,"redirectUrl"],[11072,70,10519,68],[11072,72,10519,70,"eventId"],[11072,79,10519,77],[11072,81,10519,79,"additionalParams"],[11072,97,10519,95],[11072,99,10519,97],[11073,4,10520,4,"_assert"],[11073,11,10520,11],[11073,12,10520,12,"auth"],[11073,16,10520,16],[11073,17,10520,17,"config"],[11073,23,10520,23],[11073,24,10520,24,"authDomain"],[11073,34,10520,34],[11073,36,10520,36,"auth"],[11073,40,10520,40],[11073,42,10520,42],[11073,71,10520,71],[11073,72,10520,72],[11073,111,10520,111],[11073,112,10520,112],[11074,4,10521,4,"_assert"],[11074,11,10521,11],[11074,12,10521,12,"auth"],[11074,16,10521,16],[11074,17,10521,17,"config"],[11074,23,10521,23],[11074,24,10521,24,"apiKey"],[11074,30,10521,30],[11074,32,10521,32,"auth"],[11074,36,10521,36],[11074,38,10521,38],[11074,55,10521,55],[11074,56,10521,56],[11074,91,10521,91],[11074,92,10521,92],[11075,4,10522,4],[11075,10,10522,10,"params"],[11075,16,10522,16],[11075,19,10522,19],[11076,6,10523,8,"apiKey"],[11076,12,10523,14],[11076,14,10523,16,"auth"],[11076,18,10523,20],[11076,19,10523,21,"config"],[11076,25,10523,27],[11076,26,10523,28,"apiKey"],[11076,32,10523,34],[11077,6,10524,8,"appName"],[11077,13,10524,15],[11077,15,10524,17,"auth"],[11077,19,10524,21],[11077,20,10524,22,"name"],[11077,24,10524,26],[11078,6,10525,8,"authType"],[11078,14,10525,16],[11079,6,10526,8,"redirectUrl"],[11079,17,10526,19],[11080,6,10527,8,"v"],[11080,7,10527,9],[11080,9,10527,11,"SDK_VERSION"],[11080,21,10527,22],[11080,22,10527,22,"SDK_VERSION"],[11080,33,10527,22],[11081,6,10528,8,"eventId"],[11082,4,10529,4],[11082,5,10529,5],[11083,4,10530,4],[11083,8,10530,8,"provider"],[11083,16,10530,16],[11083,28,10530,28,"FederatedAuthProvider"],[11083,49,10530,49],[11083,51,10530,51],[11084,6,10531,8,"provider"],[11084,14,10531,16],[11084,15,10531,17,"setDefaultLanguage"],[11084,33,10531,35],[11084,34,10531,36,"auth"],[11084,38,10531,40],[11084,39,10531,41,"languageCode"],[11084,51,10531,53],[11084,52,10531,54],[11085,6,10532,8,"params"],[11085,12,10532,14],[11085,13,10532,15,"providerId"],[11085,23,10532,25],[11085,26,10532,28,"provider"],[11085,34,10532,36],[11085,35,10532,37,"providerId"],[11085,45,10532,47],[11085,49,10532,51],[11085,51,10532,53],[11086,6,10533,8],[11086,10,10533,12],[11086,11,10533,13],[11086,15,10533,13,"isEmpty"],[11086,28,10533,20],[11086,29,10533,20,"isEmpty"],[11086,36,10533,20],[11086,38,10533,21,"provider"],[11086,46,10533,29],[11086,47,10533,30,"getCustomParameters"],[11086,66,10533,49],[11086,67,10533,50],[11086,68,10533,51],[11086,69,10533,52],[11086,71,10533,54],[11087,8,10534,12,"params"],[11087,14,10534,18],[11087,15,10534,19,"customParameters"],[11087,31,10534,35],[11087,34,10534,38,"JSON"],[11087,38,10534,42],[11087,39,10534,43,"stringify"],[11087,48,10534,52],[11087,49,10534,53,"provider"],[11087,57,10534,61],[11087,58,10534,62,"getCustomParameters"],[11087,77,10534,81],[11087,78,10534,82],[11087,79,10534,83],[11087,80,10534,84],[11088,6,10535,8],[11089,6,10536,8],[11090,6,10537,8],[11090,11,10537,13],[11090,17,10537,19],[11090,18,10537,20,"key"],[11090,21,10537,23],[11090,23,10537,25,"value"],[11090,28,10537,30],[11090,29,10537,31],[11090,33,10537,35,"Object"],[11090,39,10537,41],[11090,40,10537,42,"entries"],[11090,47,10537,49],[11090,48,10537,50,"additionalParams"],[11090,64,10537,66],[11090,68,10537,70],[11090,69,10537,71],[11090,70,10537,72],[11090,71,10537,73],[11090,73,10537,75],[11091,8,10538,12,"params"],[11091,14,10538,18],[11091,15,10538,19,"key"],[11091,18,10538,22],[11091,19,10538,23],[11091,22,10538,26,"value"],[11091,27,10538,31],[11092,6,10539,8],[11093,4,10540,4],[11094,4,10541,4],[11094,8,10541,8,"provider"],[11094,16,10541,16],[11094,28,10541,28,"BaseOAuthProvider"],[11094,45,10541,45],[11094,47,10541,47],[11095,6,10542,8],[11095,12,10542,14,"scopes"],[11095,18,10542,20],[11095,21,10542,23,"provider"],[11095,29,10542,31],[11095,30,10542,32,"getScopes"],[11095,39,10542,41],[11095,40,10542,42],[11095,41,10542,43],[11095,42,10542,44,"filter"],[11095,48,10542,50],[11095,49,10542,51,"scope"],[11095,54,10542,56],[11095,58,10542,60,"scope"],[11095,63,10542,65],[11095,68,10542,70],[11095,70,10542,72],[11095,71,10542,73],[11096,6,10543,8],[11096,10,10543,12,"scopes"],[11096,16,10543,18],[11096,17,10543,19,"length"],[11096,23,10543,25],[11096,26,10543,28],[11096,27,10543,29],[11096,29,10543,31],[11097,8,10544,12,"params"],[11097,14,10544,18],[11097,15,10544,19,"scopes"],[11097,21,10544,25],[11097,24,10544,28,"scopes"],[11097,30,10544,34],[11097,31,10544,35,"join"],[11097,35,10544,39],[11097,36,10544,40],[11097,39,10544,43],[11097,40,10544,44],[11098,6,10545,8],[11099,4,10546,4],[11100,4,10547,4],[11100,8,10547,8,"auth"],[11100,12,10547,12],[11100,13,10547,13,"tenantId"],[11100,21,10547,21],[11100,23,10547,23],[11101,6,10548,8,"params"],[11101,12,10548,14],[11101,13,10548,15,"tid"],[11101,16,10548,18],[11101,19,10548,21,"auth"],[11101,23,10548,25],[11101,24,10548,26,"tenantId"],[11101,32,10548,34],[11102,4,10549,4],[11103,4,10550,4],[11104,4,10551,4],[11105,4,10552,4],[11105,10,10552,10,"paramsDict"],[11105,20,10552,20],[11105,23,10552,23,"params"],[11105,29,10552,29],[11106,4,10553,4],[11106,9,10553,9],[11106,15,10553,15,"key"],[11106,18,10553,18],[11106,22,10553,22,"Object"],[11106,28,10553,28],[11106,29,10553,29,"keys"],[11106,33,10553,33],[11106,34,10553,34,"paramsDict"],[11106,44,10553,44],[11106,45,10553,45],[11106,47,10553,47],[11107,6,10554,8],[11107,10,10554,12,"paramsDict"],[11107,20,10554,22],[11107,21,10554,23,"key"],[11107,24,10554,26],[11107,25,10554,27],[11107,30,10554,32,"undefined"],[11107,39,10554,41],[11107,41,10554,43],[11108,8,10555,12],[11108,15,10555,19,"paramsDict"],[11108,25,10555,29],[11108,26,10555,30,"key"],[11108,29,10555,33],[11108,30,10555,34],[11109,6,10556,8],[11110,4,10557,4],[11111,4,10558,4],[11112,4,10559,4],[11112,10,10559,10,"appCheckToken"],[11112,23,10559,23],[11112,26,10559,26],[11112,32,10559,32,"auth"],[11112,36,10559,36],[11112,37,10559,37,"_getAppCheckToken"],[11112,54,10559,54],[11112,55,10559,55],[11112,56,10559,56],[11113,4,10560,4],[11113,10,10560,10,"appCheckTokenFragment"],[11113,31,10560,31],[11113,34,10560,34,"appCheckToken"],[11113,47,10560,47],[11113,50,10561,10],[11113,54,10561,14,"FIREBASE_APP_CHECK_FRAGMENT_ID"],[11113,84,10561,44],[11113,88,10561,48,"encodeURIComponent"],[11113,106,10561,66],[11113,107,10561,67,"appCheckToken"],[11113,120,10561,80],[11113,121,10561,81],[11113,123,10561,83],[11113,126,10562,10],[11113,128,10562,12],[11114,4,10563,4],[11115,4,10564,4],[11115,11,10564,11],[11115,14,10564,14,"getHandlerBase"],[11115,28,10564,28],[11115,29,10564,29,"auth"],[11115,33,10564,33],[11115,34,10564,34],[11115,38,10564,38],[11115,42,10564,38,"querystring"],[11115,55,10564,49],[11115,56,10564,49,"querystring"],[11115,67,10564,49],[11115,69,10564,50,"paramsDict"],[11115,79,10564,60],[11115,80,10564,61],[11115,81,10564,62,"slice"],[11115,86,10564,67],[11115,87,10564,68],[11115,88,10564,69],[11115,89,10564,70],[11115,92,10564,73,"appCheckTokenFragment"],[11115,113,10564,94],[11115,115,10564,96],[11116,2,10565,0],[11117,2,10566,0],[11117,11,10566,9,"getHandlerBase"],[11117,25,10566,23,"getHandlerBase"],[11117,26,10566,24],[11118,4,10566,26,"config"],[11119,2,10566,33],[11119,3,10566,34],[11119,5,10566,36],[11120,4,10567,4],[11120,8,10567,8],[11120,9,10567,9,"config"],[11120,15,10567,15],[11120,16,10567,16,"emulator"],[11120,24,10567,24],[11120,26,10567,26],[11121,6,10568,8],[11121,13,10568,15],[11121,24,10568,26,"config"],[11121,30,10568,32],[11121,31,10568,33,"authDomain"],[11121,41,10568,43],[11121,45,10568,47,"WIDGET_PATH"],[11121,56,10568,58],[11121,58,10568,60],[11122,4,10569,4],[11123,4,10570,4],[11123,11,10570,11,"_emulatorUrl"],[11123,23,10570,23],[11123,24,10570,24,"config"],[11123,30,10570,30],[11123,32,10570,32,"EMULATOR_WIDGET_PATH"],[11123,52,10570,52],[11123,53,10570,53],[11124,2,10571,0],[11126,2,10573,0],[11127,0,10574,0],[11128,0,10575,0],[11129,0,10576,0],[11130,0,10577,0],[11131,0,10578,0],[11132,0,10579,0],[11133,0,10580,0],[11134,0,10581,0],[11135,0,10582,0],[11136,0,10583,0],[11137,0,10584,0],[11138,0,10585,0],[11139,0,10586,0],[11140,0,10587,0],[11141,0,10588,0],[11142,2,10589,0],[11143,0,10590,0],[11144,0,10591,0],[11145,0,10592,0],[11146,2,10593,0],[11146,8,10593,6,"WEB_STORAGE_SUPPORT_KEY"],[11146,31,10593,29],[11146,34,10593,32],[11146,53,10593,51],[11147,2,10594,0],[11147,8,10594,6,"BrowserPopupRedirectResolver"],[11147,36,10594,34],[11147,37,10594,35],[11148,4,10595,4,"constructor"],[11148,15,10595,15,"constructor"],[11148,16,10595,15],[11148,18,10595,18],[11149,6,10596,8],[11149,10,10596,12],[11149,11,10596,13,"eventManagers"],[11149,24,10596,26],[11149,27,10596,29],[11149,28,10596,30],[11149,29,10596,31],[11150,6,10597,8],[11150,10,10597,12],[11150,11,10597,13,"iframes"],[11150,18,10597,20],[11150,21,10597,23],[11150,22,10597,24],[11150,23,10597,25],[11151,6,10598,8],[11151,10,10598,12],[11151,11,10598,13,"originValidationPromises"],[11151,35,10598,37],[11151,38,10598,40],[11151,39,10598,41],[11151,40,10598,42],[11152,6,10599,8],[11152,10,10599,12],[11152,11,10599,13,"_redirectPersistence"],[11152,31,10599,33],[11152,34,10599,36,"browserSessionPersistence"],[11152,59,10599,61],[11153,6,10600,8],[11153,10,10600,12],[11153,11,10600,13,"_completeRedirectFn"],[11153,30,10600,32],[11153,33,10600,35,"_getRedirectResult"],[11153,51,10600,53],[11154,6,10601,8],[11154,10,10601,12],[11154,11,10601,13,"_overrideRedirectResult"],[11154,34,10601,36],[11154,37,10601,39,"_overrideRedirectResult"],[11154,60,10601,62],[11155,4,10602,4],[11156,4,10603,4],[11157,4,10604,4],[11158,4,10605,4],[11158,10,10605,10,"_openPopup"],[11158,20,10605,20,"_openPopup"],[11158,21,10605,21,"auth"],[11158,25,10605,25],[11158,27,10605,27,"provider"],[11158,35,10605,35],[11158,37,10605,37,"authType"],[11158,45,10605,45],[11158,47,10605,47,"eventId"],[11158,54,10605,54],[11158,56,10605,56],[11159,6,10606,8,"debugAssert"],[11159,17,10606,19],[11159,18,10606,20],[11159,22,10606,24],[11159,23,10606,25,"eventManagers"],[11159,36,10606,38],[11159,37,10606,39,"auth"],[11159,41,10606,43],[11159,42,10606,44,"_key"],[11159,46,10606,48],[11159,47,10606,49],[11159,48,10606,50],[11159,49,10606,51],[11159,51,10606,53,"manager"],[11159,58,10606,60],[11159,60,10606,62],[11159,106,10606,108],[11159,107,10606,109],[11160,6,10607,8],[11160,12,10607,14,"url"],[11160,15,10607,17],[11160,18,10607,20],[11160,24,10607,26,"_getRedirectUrl"],[11160,39,10607,41],[11160,40,10607,42,"auth"],[11160,44,10607,46],[11160,46,10607,48,"provider"],[11160,54,10607,56],[11160,56,10607,58,"authType"],[11160,64,10607,66],[11160,66,10607,68,"_getCurrentUrl"],[11160,80,10607,82],[11160,81,10607,83],[11160,82,10607,84],[11160,84,10607,86,"eventId"],[11160,91,10607,93],[11160,92,10607,94],[11161,6,10608,8],[11161,13,10608,15,"_open"],[11161,18,10608,20],[11161,19,10608,21,"auth"],[11161,23,10608,25],[11161,25,10608,27,"url"],[11161,28,10608,30],[11161,30,10608,32,"_generateEventId"],[11161,46,10608,48],[11161,47,10608,49],[11161,48,10608,50],[11161,49,10608,51],[11162,4,10609,4],[11163,4,10610,4],[11163,10,10610,10,"_openRedirect"],[11163,23,10610,23,"_openRedirect"],[11163,24,10610,24,"auth"],[11163,28,10610,28],[11163,30,10610,30,"provider"],[11163,38,10610,38],[11163,40,10610,40,"authType"],[11163,48,10610,48],[11163,50,10610,50,"eventId"],[11163,57,10610,57],[11163,59,10610,59],[11164,6,10611,8],[11164,12,10611,14],[11164,16,10611,18],[11164,17,10611,19,"_originValidation"],[11164,34,10611,36],[11164,35,10611,37,"auth"],[11164,39,10611,41],[11164,40,10611,42],[11165,6,10612,8],[11165,12,10612,14,"url"],[11165,15,10612,17],[11165,18,10612,20],[11165,24,10612,26,"_getRedirectUrl"],[11165,39,10612,41],[11165,40,10612,42,"auth"],[11165,44,10612,46],[11165,46,10612,48,"provider"],[11165,54,10612,56],[11165,56,10612,58,"authType"],[11165,64,10612,66],[11165,66,10612,68,"_getCurrentUrl"],[11165,80,10612,82],[11165,81,10612,83],[11165,82,10612,84],[11165,84,10612,86,"eventId"],[11165,91,10612,93],[11165,92,10612,94],[11166,6,10613,8,"_setWindowLocation"],[11166,24,10613,26],[11166,25,10613,27,"url"],[11166,28,10613,30],[11166,29,10613,31],[11167,6,10614,8],[11167,13,10614,15],[11167,17,10614,19,"Promise"],[11167,24,10614,26],[11167,25,10614,27],[11167,31,10614,33],[11167,32,10614,35],[11167,33,10614,36],[11167,34,10614,37],[11168,4,10615,4],[11169,4,10616,4,"_initialize"],[11169,15,10616,15,"_initialize"],[11169,16,10616,16,"auth"],[11169,20,10616,20],[11169,22,10616,22],[11170,6,10617,8],[11170,12,10617,14,"key"],[11170,15,10617,17],[11170,18,10617,20,"auth"],[11170,22,10617,24],[11170,23,10617,25,"_key"],[11170,27,10617,29],[11170,28,10617,30],[11170,29,10617,31],[11171,6,10618,8],[11171,10,10618,12],[11171,14,10618,16],[11171,15,10618,17,"eventManagers"],[11171,28,10618,30],[11171,29,10618,31,"key"],[11171,32,10618,34],[11171,33,10618,35],[11171,35,10618,37],[11172,8,10619,12],[11172,14,10619,18],[11173,10,10619,20,"manager"],[11173,17,10619,27],[11174,10,10619,29,"promise"],[11175,8,10619,37],[11175,9,10619,38],[11175,12,10619,41],[11175,16,10619,45],[11175,17,10619,46,"eventManagers"],[11175,30,10619,59],[11175,31,10619,60,"key"],[11175,34,10619,63],[11175,35,10619,64],[11176,8,10620,12],[11176,12,10620,16,"manager"],[11176,19,10620,23],[11176,21,10620,25],[11177,10,10621,16],[11177,17,10621,23,"Promise"],[11177,24,10621,30],[11177,25,10621,31,"resolve"],[11177,32,10621,38],[11177,33,10621,39,"manager"],[11177,40,10621,46],[11177,41,10621,47],[11178,8,10622,12],[11178,9,10622,13],[11178,15,10623,17],[11179,10,10624,16,"debugAssert"],[11179,21,10624,27],[11179,22,10624,28,"promise"],[11179,29,10624,35],[11179,31,10624,37],[11179,73,10624,79],[11179,74,10624,80],[11180,10,10625,16],[11180,17,10625,23,"promise"],[11180,24,10625,30],[11181,8,10626,12],[11182,6,10627,8],[11183,6,10628,8],[11183,12,10628,14,"promise"],[11183,19,10628,21],[11183,22,10628,24],[11183,26,10628,28],[11183,27,10628,29,"initAndGetManager"],[11183,44,10628,46],[11183,45,10628,47,"auth"],[11183,49,10628,51],[11183,50,10628,52],[11184,6,10629,8],[11184,10,10629,12],[11184,11,10629,13,"eventManagers"],[11184,24,10629,26],[11184,25,10629,27,"key"],[11184,28,10629,30],[11184,29,10629,31],[11184,32,10629,34],[11185,8,10629,36,"promise"],[11186,6,10629,44],[11186,7,10629,45],[11187,6,10630,8],[11188,6,10631,8],[11189,6,10632,8,"promise"],[11189,13,10632,15],[11189,14,10632,16,"catch"],[11189,19,10632,21],[11189,20,10632,22],[11189,26,10632,28],[11190,8,10633,12],[11190,15,10633,19],[11190,19,10633,23],[11190,20,10633,24,"eventManagers"],[11190,33,10633,37],[11190,34,10633,38,"key"],[11190,37,10633,41],[11190,38,10633,42],[11191,6,10634,8],[11191,7,10634,9],[11191,8,10634,10],[11192,6,10635,8],[11192,13,10635,15,"promise"],[11192,20,10635,22],[11193,4,10636,4],[11194,4,10637,4],[11194,10,10637,10,"initAndGetManager"],[11194,27,10637,27,"initAndGetManager"],[11194,28,10637,28,"auth"],[11194,32,10637,32],[11194,34,10637,34],[11195,6,10638,8],[11195,12,10638,14,"iframe"],[11195,18,10638,20],[11195,21,10638,23],[11195,27,10638,29,"_openIframe"],[11195,38,10638,40],[11195,39,10638,41,"auth"],[11195,43,10638,45],[11195,44,10638,46],[11196,6,10639,8],[11196,12,10639,14,"manager"],[11196,19,10639,21],[11196,22,10639,24],[11196,26,10639,28,"AuthEventManager"],[11196,42,10639,44],[11196,43,10639,45,"auth"],[11196,47,10639,49],[11196,48,10639,50],[11197,6,10640,8,"iframe"],[11197,12,10640,14],[11197,13,10640,15,"register"],[11197,21,10640,23],[11197,22,10640,24],[11197,33,10640,35],[11197,35,10640,38,"iframeEvent"],[11197,46,10640,49],[11197,50,10640,54],[11198,8,10641,12,"_assert"],[11198,15,10641,19],[11198,16,10641,20,"iframeEvent"],[11198,27,10641,31],[11198,29,10641,33,"authEvent"],[11198,38,10641,42],[11198,40,10641,44,"auth"],[11198,44,10641,48],[11198,46,10641,50],[11198,66,10641,70],[11198,67,10641,71],[11198,105,10641,109],[11198,106,10641,110],[11199,8,10642,12],[11200,8,10643,12],[11200,14,10643,18,"handled"],[11200,21,10643,25],[11200,24,10643,28,"manager"],[11200,31,10643,35],[11200,32,10643,36,"onEvent"],[11200,39,10643,43],[11200,40,10643,44,"iframeEvent"],[11200,51,10643,55],[11200,52,10643,56,"authEvent"],[11200,61,10643,65],[11200,62,10643,66],[11201,8,10644,12],[11201,15,10644,19],[11202,10,10644,21,"status"],[11202,16,10644,27],[11202,18,10644,29,"handled"],[11202,25,10644,36],[11202,28,10644,39],[11202,33,10644,44],[11202,34,10644,45],[11202,58,10644,69],[11202,65,10644,76],[11202,66,10644,77],[11203,8,10644,101],[11203,9,10644,102],[11204,6,10645,8],[11204,7,10645,9],[11204,9,10645,11,"gapi"],[11204,13,10645,15],[11204,14,10645,16,"iframes"],[11204,21,10645,23],[11204,22,10645,24,"CROSS_ORIGIN_IFRAMES_FILTER"],[11204,49,10645,51],[11204,50,10645,52],[11205,6,10646,8],[11205,10,10646,12],[11205,11,10646,13,"eventManagers"],[11205,24,10646,26],[11205,25,10646,27,"auth"],[11205,29,10646,31],[11205,30,10646,32,"_key"],[11205,34,10646,36],[11205,35,10646,37],[11205,36,10646,38],[11205,37,10646,39],[11205,40,10646,42],[11206,8,10646,44,"manager"],[11207,6,10646,52],[11207,7,10646,53],[11208,6,10647,8],[11208,10,10647,12],[11208,11,10647,13,"iframes"],[11208,18,10647,20],[11208,19,10647,21,"auth"],[11208,23,10647,25],[11208,24,10647,26,"_key"],[11208,28,10647,30],[11208,29,10647,31],[11208,30,10647,32],[11208,31,10647,33],[11208,34,10647,36,"iframe"],[11208,40,10647,42],[11209,6,10648,8],[11209,13,10648,15,"manager"],[11209,20,10648,22],[11210,4,10649,4],[11211,4,10650,4,"_isIframeWebStorageSupported"],[11211,32,10650,32,"_isIframeWebStorageSupported"],[11211,33,10650,33,"auth"],[11211,37,10650,37],[11211,39,10650,39,"cb"],[11211,41,10650,41],[11211,43,10650,43],[11212,6,10651,8],[11212,12,10651,14,"iframe"],[11212,18,10651,20],[11212,21,10651,23],[11212,25,10651,27],[11212,26,10651,28,"iframes"],[11212,33,10651,35],[11212,34,10651,36,"auth"],[11212,38,10651,40],[11212,39,10651,41,"_key"],[11212,43,10651,45],[11212,44,10651,46],[11212,45,10651,47],[11212,46,10651,48],[11213,6,10652,8,"iframe"],[11213,12,10652,14],[11213,13,10652,15,"send"],[11213,17,10652,19],[11213,18,10652,20,"WEB_STORAGE_SUPPORT_KEY"],[11213,41,10652,43],[11213,43,10652,45],[11214,8,10652,47,"type"],[11214,12,10652,51],[11214,14,10652,53,"WEB_STORAGE_SUPPORT_KEY"],[11215,6,10652,77],[11215,7,10652,78],[11215,9,10652,80,"result"],[11215,15,10652,86],[11215,19,10652,90],[11216,8,10653,12],[11216,14,10653,18,"isSupported"],[11216,25,10653,29],[11216,28,10653,32,"result"],[11216,34,10653,38],[11216,37,10653,41],[11216,38,10653,42],[11216,39,10653,43],[11216,42,10653,46,"WEB_STORAGE_SUPPORT_KEY"],[11216,65,10653,69],[11216,66,10653,70],[11217,8,10654,12],[11217,12,10654,16,"isSupported"],[11217,23,10654,27],[11217,28,10654,32,"undefined"],[11217,37,10654,41],[11217,39,10654,43],[11218,10,10655,16,"cb"],[11218,12,10655,18],[11218,13,10655,19],[11218,14,10655,20],[11218,15,10655,21,"isSupported"],[11218,26,10655,32],[11218,27,10655,33],[11219,8,10656,12],[11220,8,10657,12,"_fail"],[11220,13,10657,17],[11220,14,10657,18,"auth"],[11220,18,10657,22],[11220,20,10657,24],[11220,36,10657,40],[11220,37,10657,41],[11220,71,10657,75],[11220,72,10657,76],[11221,6,10658,8],[11221,7,10658,9],[11221,9,10658,11,"gapi"],[11221,13,10658,15],[11221,14,10658,16,"iframes"],[11221,21,10658,23],[11221,22,10658,24,"CROSS_ORIGIN_IFRAMES_FILTER"],[11221,49,10658,51],[11221,50,10658,52],[11222,4,10659,4],[11223,4,10660,4,"_originValidation"],[11223,21,10660,21,"_originValidation"],[11223,22,10660,22,"auth"],[11223,26,10660,26],[11223,28,10660,28],[11224,6,10661,8],[11224,12,10661,14,"key"],[11224,15,10661,17],[11224,18,10661,20,"auth"],[11224,22,10661,24],[11224,23,10661,25,"_key"],[11224,27,10661,29],[11224,28,10661,30],[11224,29,10661,31],[11225,6,10662,8],[11225,10,10662,12],[11225,11,10662,13],[11225,15,10662,17],[11225,16,10662,18,"originValidationPromises"],[11225,40,10662,42],[11225,41,10662,43,"key"],[11225,44,10662,46],[11225,45,10662,47],[11225,47,10662,49],[11226,8,10663,12],[11226,12,10663,16],[11226,13,10663,17,"originValidationPromises"],[11226,37,10663,41],[11226,38,10663,42,"key"],[11226,41,10663,45],[11226,42,10663,46],[11226,45,10663,49,"_validateOrigin"],[11226,60,10663,64],[11226,61,10663,65,"auth"],[11226,65,10663,69],[11226,66,10663,70],[11227,6,10664,8],[11228,6,10665,8],[11228,13,10665,15],[11228,17,10665,19],[11228,18,10665,20,"originValidationPromises"],[11228,42,10665,44],[11228,43,10665,45,"key"],[11228,46,10665,48],[11228,47,10665,49],[11229,4,10666,4],[11230,4,10667,4],[11230,8,10667,8,"_shouldInitProactively"],[11230,30,10667,30,"_shouldInitProactively"],[11230,31,10667,30],[11230,33,10667,33],[11231,6,10668,8],[11232,6,10669,8],[11232,13,10669,15,"_isMobileBrowser"],[11232,29,10669,31],[11232,30,10669,32],[11232,31,10669,33],[11232,35,10669,37,"_isSafari"],[11232,44,10669,46],[11232,45,10669,47],[11232,46,10669,48],[11232,50,10669,52,"_isIOS"],[11232,56,10669,58],[11232,57,10669,59],[11232,58,10669,60],[11233,4,10670,4],[11234,2,10671,0],[11235,2,10672,0],[11236,0,10673,0],[11237,0,10674,0],[11238,0,10675,0],[11239,0,10676,0],[11240,0,10677,0],[11241,0,10678,0],[11242,0,10679,0],[11243,0,10680,0],[11244,2,10681,0],[11244,8,10681,6,"browserPopupRedirectResolver"],[11244,36,10681,34],[11244,39,10681,37,"BrowserPopupRedirectResolver"],[11244,67,10681,65],[11245,2,10683,0],[11245,8,10683,6,"MultiFactorAssertionImpl"],[11245,32,10683,30],[11245,33,10683,31],[11246,4,10684,4,"constructor"],[11246,15,10684,15,"constructor"],[11246,16,10684,16,"factorId"],[11246,24,10684,24],[11246,26,10684,26],[11247,6,10685,8],[11247,10,10685,12],[11247,11,10685,13,"factorId"],[11247,19,10685,21],[11247,22,10685,24,"factorId"],[11247,30,10685,32],[11248,4,10686,4],[11249,4,10687,4,"_process"],[11249,12,10687,12,"_process"],[11249,13,10687,13,"auth"],[11249,17,10687,17],[11249,19,10687,19,"session"],[11249,26,10687,26],[11249,28,10687,28,"displayName"],[11249,39,10687,39],[11249,41,10687,41],[11250,6,10688,8],[11250,14,10688,16,"session"],[11250,21,10688,23],[11250,22,10688,24,"type"],[11250,26,10688,28],[11251,8,10689,12],[11251,13,10689,17],[11251,21,10689,25],[11251,22,10689,26],[11252,10,10690,16],[11252,17,10690,23],[11252,21,10690,27],[11252,22,10690,28,"_finalizeEnroll"],[11252,37,10690,43],[11252,38,10690,44,"auth"],[11252,42,10690,48],[11252,44,10690,50,"session"],[11252,51,10690,57],[11252,52,10690,58,"credential"],[11252,62,10690,68],[11252,64,10690,70,"displayName"],[11252,75,10690,81],[11252,76,10690,82],[11253,8,10691,12],[11253,13,10691,17],[11253,21,10691,25],[11253,22,10691,26],[11254,10,10692,16],[11254,17,10692,23],[11254,21,10692,27],[11254,22,10692,28,"_finalizeSignIn"],[11254,37,10692,43],[11254,38,10692,44,"auth"],[11254,42,10692,48],[11254,44,10692,50,"session"],[11254,51,10692,57],[11254,52,10692,58,"credential"],[11254,62,10692,68],[11254,63,10692,69],[11255,8,10693,12],[11256,10,10694,16],[11256,17,10694,23,"debugFail"],[11256,26,10694,32],[11256,27,10694,33],[11256,62,10694,68],[11256,63,10694,69],[11257,6,10695,8],[11258,4,10696,4],[11259,2,10697,0],[11261,2,10699,0],[11262,0,10700,0],[11263,0,10701,0],[11264,0,10702,0],[11265,0,10703,0],[11266,2,10704,0],[11266,8,10704,6,"PhoneMultiFactorAssertionImpl"],[11266,37,10704,35],[11266,46,10704,44,"MultiFactorAssertionImpl"],[11266,70,10704,68],[11266,71,10704,69],[11267,4,10705,4,"constructor"],[11267,15,10705,15,"constructor"],[11267,16,10705,16,"credential"],[11267,26,10705,26],[11267,28,10705,28],[11268,6,10706,8],[11268,11,10706,13],[11268,12,10706,14],[11268,19,10706,21],[11268,20,10706,22],[11268,40,10706,42],[11268,41,10706,43],[11269,6,10707,8],[11269,10,10707,12],[11269,11,10707,13,"credential"],[11269,21,10707,23],[11269,24,10707,26,"credential"],[11269,34,10707,36],[11270,4,10708,4],[11271,4,10709,4],[11272,4,10710,4],[11272,11,10710,11,"_fromCredential"],[11272,26,10710,26,"_fromCredential"],[11272,27,10710,27,"credential"],[11272,37,10710,37],[11272,39,10710,39],[11273,6,10711,8],[11273,13,10711,15],[11273,17,10711,19,"PhoneMultiFactorAssertionImpl"],[11273,46,10711,48],[11273,47,10711,49,"credential"],[11273,57,10711,59],[11273,58,10711,60],[11274,4,10712,4],[11275,4,10713,4],[11276,4,10714,4,"_finalizeEnroll"],[11276,19,10714,19,"_finalizeEnroll"],[11276,20,10714,20,"auth"],[11276,24,10714,24],[11276,26,10714,26,"idToken"],[11276,33,10714,33],[11276,35,10714,35,"displayName"],[11276,46,10714,46],[11276,48,10714,48],[11277,6,10715,8],[11277,13,10715,15,"finalizeEnrollPhoneMfa"],[11277,35,10715,37],[11277,36,10715,38,"auth"],[11277,40,10715,42],[11277,42,10715,44],[11278,8,10716,12,"idToken"],[11278,15,10716,19],[11279,8,10717,12,"displayName"],[11279,19,10717,23],[11280,8,10718,12,"phoneVerificationInfo"],[11280,29,10718,33],[11280,31,10718,35],[11280,35,10718,39],[11280,36,10718,40,"credential"],[11280,46,10718,50],[11280,47,10718,51,"_makeVerificationRequest"],[11280,71,10718,75],[11280,72,10718,76],[11281,6,10719,8],[11281,7,10719,9],[11281,8,10719,10],[11282,4,10720,4],[11283,4,10721,4],[11284,4,10722,4,"_finalizeSignIn"],[11284,19,10722,19,"_finalizeSignIn"],[11284,20,10722,20,"auth"],[11284,24,10722,24],[11284,26,10722,26,"mfaPendingCredential"],[11284,46,10722,46],[11284,48,10722,48],[11285,6,10723,8],[11285,13,10723,15,"finalizeSignInPhoneMfa"],[11285,35,10723,37],[11285,36,10723,38,"auth"],[11285,40,10723,42],[11285,42,10723,44],[11286,8,10724,12,"mfaPendingCredential"],[11286,28,10724,32],[11287,8,10725,12,"phoneVerificationInfo"],[11287,29,10725,33],[11287,31,10725,35],[11287,35,10725,39],[11287,36,10725,40,"credential"],[11287,46,10725,50],[11287,47,10725,51,"_makeVerificationRequest"],[11287,71,10725,75],[11287,72,10725,76],[11288,6,10726,8],[11288,7,10726,9],[11288,8,10726,10],[11289,4,10727,4],[11290,2,10728,0],[11291,2,10729,0],[11292,0,10730,0],[11293,0,10731,0],[11294,0,10732,0],[11295,0,10733,0],[11296,2,10734,0],[11296,8,10734,6,"PhoneMultiFactorGenerator"],[11296,33,10734,31],[11296,34,10734,32],[11297,4,10735,4,"constructor"],[11297,15,10735,15,"constructor"],[11297,16,10735,15],[11297,18,10735,18],[11297,19,10735,20],[11298,4,10736,4],[11299,0,10737,0],[11300,0,10738,0],[11301,0,10739,0],[11302,0,10740,0],[11303,0,10741,0],[11304,0,10742,0],[11305,0,10743,0],[11306,0,10744,0],[11307,0,10745,0],[11308,4,10746,4],[11308,11,10746,11,"assertion"],[11308,20,10746,20,"assertion"],[11308,21,10746,21,"credential"],[11308,31,10746,31],[11308,33,10746,33],[11309,6,10747,8],[11309,13,10747,15,"PhoneMultiFactorAssertionImpl"],[11309,42,10747,44],[11309,43,10747,45,"_fromCredential"],[11309,58,10747,60],[11309,59,10747,61,"credential"],[11309,69,10747,71],[11309,70,10747,72],[11310,4,10748,4],[11311,2,10749,0],[11312,2,10750,0],[11313,0,10751,0],[11314,0,10752,0],[11315,2,10753,0,"PhoneMultiFactorGenerator"],[11315,27,10753,25],[11315,28,10753,26,"FACTOR_ID"],[11315,37,10753,35],[11315,40,10753,38],[11315,47,10753,45],[11317,2,10755,0],[11318,0,10756,0],[11319,0,10757,0],[11320,0,10758,0],[11321,0,10759,0],[11322,2,10760,0],[11322,8,10760,6,"TotpMultiFactorGenerator"],[11322,32,10760,30],[11322,33,10760,31],[11323,4,10761,4],[11324,0,10762,0],[11325,0,10763,0],[11326,0,10764,0],[11327,0,10765,0],[11328,0,10766,0],[11329,0,10767,0],[11330,0,10768,0],[11331,0,10769,0],[11332,0,10770,0],[11333,4,10771,4],[11333,11,10771,11,"assertionForEnrollment"],[11333,33,10771,33,"assertionForEnrollment"],[11333,34,10771,34,"secret"],[11333,40,10771,40],[11333,42,10771,42,"oneTimePassword"],[11333,57,10771,57],[11333,59,10771,59],[11334,6,10772,8],[11334,13,10772,15,"TotpMultiFactorAssertionImpl"],[11334,41,10772,43],[11334,42,10772,44,"_fromSecret"],[11334,53,10772,55],[11334,54,10772,56,"secret"],[11334,60,10772,62],[11334,62,10772,64,"oneTimePassword"],[11334,77,10772,79],[11334,78,10772,80],[11335,4,10773,4],[11336,4,10774,4],[11337,0,10775,0],[11338,0,10776,0],[11339,0,10777,0],[11340,0,10778,0],[11341,0,10779,0],[11342,0,10780,0],[11343,0,10781,0],[11344,0,10782,0],[11345,4,10783,4],[11345,11,10783,11,"assertionForSignIn"],[11345,29,10783,29,"assertionForSignIn"],[11345,30,10783,30,"enrollmentId"],[11345,42,10783,42],[11345,44,10783,44,"oneTimePassword"],[11345,59,10783,59],[11345,61,10783,61],[11346,6,10784,8],[11346,13,10784,15,"TotpMultiFactorAssertionImpl"],[11346,41,10784,43],[11346,42,10784,44,"_fromEnrollmentId"],[11346,59,10784,61],[11346,60,10784,62,"enrollmentId"],[11346,72,10784,74],[11346,74,10784,76,"oneTimePassword"],[11346,89,10784,91],[11346,90,10784,92],[11347,4,10785,4],[11348,4,10786,4],[11349,0,10787,0],[11350,0,10788,0],[11351,0,10789,0],[11352,0,10790,0],[11353,0,10791,0],[11354,0,10792,0],[11355,0,10793,0],[11356,0,10794,0],[11357,4,10795,4],[11357,17,10795,17,"generateSecret"],[11357,31,10795,31,"generateSecret"],[11357,32,10795,32,"session"],[11357,39,10795,39],[11357,41,10795,41],[11358,6,10796,8],[11358,12,10796,14,"mfaSession"],[11358,22,10796,24],[11358,25,10796,27,"session"],[11358,32,10796,34],[11359,6,10797,8,"_assert"],[11359,13,10797,15],[11359,14,10797,16],[11359,21,10797,23,"mfaSession"],[11359,31,10797,33],[11359,32,10797,34,"user"],[11359,36,10797,38],[11359,38,10797,40,"auth"],[11359,42,10797,44],[11359,47,10797,49],[11359,58,10797,60],[11359,60,10797,62],[11359,76,10797,78],[11359,77,10797,79],[11359,111,10797,113],[11359,112,10797,114],[11360,6,10798,8],[11360,12,10798,14,"response"],[11360,20,10798,22],[11360,23,10798,25],[11360,29,10798,31,"startEnrollTotpMfa"],[11360,47,10798,49],[11360,48,10798,50,"mfaSession"],[11360,58,10798,60],[11360,59,10798,61,"user"],[11360,63,10798,65],[11360,64,10798,66,"auth"],[11360,68,10798,70],[11360,70,10798,72],[11361,8,10799,12,"idToken"],[11361,15,10799,19],[11361,17,10799,21,"mfaSession"],[11361,27,10799,31],[11361,28,10799,32,"credential"],[11361,38,10799,42],[11362,8,10800,12,"totpEnrollmentInfo"],[11362,26,10800,30],[11362,28,10800,32],[11362,29,10800,33],[11363,6,10801,8],[11363,7,10801,9],[11363,8,10801,10],[11364,6,10802,8],[11364,13,10802,15,"TotpSecret"],[11364,23,10802,25],[11364,24,10802,26,"_fromStartTotpMfaEnrollmentResponse"],[11364,59,10802,61],[11364,60,10802,62,"response"],[11364,68,10802,70],[11364,70,10802,72,"mfaSession"],[11364,80,10802,82],[11364,81,10802,83,"user"],[11364,85,10802,87],[11364,86,10802,88,"auth"],[11364,90,10802,92],[11364,91,10802,93],[11365,4,10803,4],[11366,2,10804,0],[11367,2,10805,0],[11368,0,10806,0],[11369,0,10807,0],[11370,2,10808,0,"TotpMultiFactorGenerator"],[11370,26,10808,24],[11370,27,10808,25,"FACTOR_ID"],[11370,36,10808,34],[11370,39,10808,37],[11370,45,10808,43],[11370,46,10808,44],[11371,2,10809,0],[11371,8,10809,6,"TotpMultiFactorAssertionImpl"],[11371,36,10809,34],[11371,45,10809,43,"MultiFactorAssertionImpl"],[11371,69,10809,67],[11371,70,10809,68],[11372,4,10810,4,"constructor"],[11372,15,10810,15,"constructor"],[11372,16,10810,16,"otp"],[11372,19,10810,19],[11372,21,10810,21,"enrollmentId"],[11372,33,10810,33],[11372,35,10810,35,"secret"],[11372,41,10810,41],[11372,43,10810,43],[11373,6,10811,8],[11373,11,10811,13],[11373,12,10811,14],[11373,18,10811,20],[11373,19,10811,21],[11373,38,10811,40],[11373,39,10811,41],[11374,6,10812,8],[11374,10,10812,12],[11374,11,10812,13,"otp"],[11374,14,10812,16],[11374,17,10812,19,"otp"],[11374,20,10812,22],[11375,6,10813,8],[11375,10,10813,12],[11375,11,10813,13,"enrollmentId"],[11375,23,10813,25],[11375,26,10813,28,"enrollmentId"],[11375,38,10813,40],[11376,6,10814,8],[11376,10,10814,12],[11376,11,10814,13,"secret"],[11376,17,10814,19],[11376,20,10814,22,"secret"],[11376,26,10814,28],[11377,4,10815,4],[11378,4,10816,4],[11379,4,10817,4],[11379,11,10817,11,"_fromSecret"],[11379,22,10817,22,"_fromSecret"],[11379,23,10817,23,"secret"],[11379,29,10817,29],[11379,31,10817,31,"otp"],[11379,34,10817,34],[11379,36,10817,36],[11380,6,10818,8],[11380,13,10818,15],[11380,17,10818,19,"TotpMultiFactorAssertionImpl"],[11380,45,10818,47],[11380,46,10818,48,"otp"],[11380,49,10818,51],[11380,51,10818,53,"undefined"],[11380,60,10818,62],[11380,62,10818,64,"secret"],[11380,68,10818,70],[11380,69,10818,71],[11381,4,10819,4],[11382,4,10820,4],[11383,4,10821,4],[11383,11,10821,11,"_fromEnrollmentId"],[11383,28,10821,28,"_fromEnrollmentId"],[11383,29,10821,29,"enrollmentId"],[11383,41,10821,41],[11383,43,10821,43,"otp"],[11383,46,10821,46],[11383,48,10821,48],[11384,6,10822,8],[11384,13,10822,15],[11384,17,10822,19,"TotpMultiFactorAssertionImpl"],[11384,45,10822,47],[11384,46,10822,48,"otp"],[11384,49,10822,51],[11384,51,10822,53,"enrollmentId"],[11384,63,10822,65],[11384,64,10822,66],[11385,4,10823,4],[11386,4,10824,4],[11387,4,10825,4],[11387,10,10825,10,"_finalizeEnroll"],[11387,25,10825,25,"_finalizeEnroll"],[11387,26,10825,26,"auth"],[11387,30,10825,30],[11387,32,10825,32,"idToken"],[11387,39,10825,39],[11387,41,10825,41,"displayName"],[11387,52,10825,52],[11387,54,10825,54],[11388,6,10826,8,"_assert"],[11388,13,10826,15],[11388,14,10826,16],[11388,21,10826,23],[11388,25,10826,27],[11388,26,10826,28,"secret"],[11388,32,10826,34],[11388,37,10826,39],[11388,48,10826,50],[11388,50,10826,52,"auth"],[11388,54,10826,56],[11388,56,10826,58],[11388,72,10826,74],[11388,73,10826,75],[11388,107,10826,109],[11388,108,10826,110],[11389,6,10827,8],[11389,13,10827,15,"finalizeEnrollTotpMfa"],[11389,34,10827,36],[11389,35,10827,37,"auth"],[11389,39,10827,41],[11389,41,10827,43],[11390,8,10828,12,"idToken"],[11390,15,10828,19],[11391,8,10829,12,"displayName"],[11391,19,10829,23],[11392,8,10830,12,"totpVerificationInfo"],[11392,28,10830,32],[11392,30,10830,34],[11392,34,10830,38],[11392,35,10830,39,"secret"],[11392,41,10830,45],[11392,42,10830,46,"_makeTotpVerificationInfo"],[11392,67,10830,71],[11392,68,10830,72],[11392,72,10830,76],[11392,73,10830,77,"otp"],[11392,76,10830,80],[11393,6,10831,8],[11393,7,10831,9],[11393,8,10831,10],[11394,4,10832,4],[11395,4,10833,4],[11396,4,10834,4],[11396,10,10834,10,"_finalizeSignIn"],[11396,25,10834,25,"_finalizeSignIn"],[11396,26,10834,26,"auth"],[11396,30,10834,30],[11396,32,10834,32,"mfaPendingCredential"],[11396,52,10834,52],[11396,54,10834,54],[11397,6,10835,8,"_assert"],[11397,13,10835,15],[11397,14,10835,16],[11397,18,10835,20],[11397,19,10835,21,"enrollmentId"],[11397,31,10835,33],[11397,36,10835,38,"undefined"],[11397,45,10835,47],[11397,49,10835,51],[11397,53,10835,55],[11397,54,10835,56,"otp"],[11397,57,10835,59],[11397,62,10835,64,"undefined"],[11397,71,10835,73],[11397,73,10835,75,"auth"],[11397,77,10835,79],[11397,79,10835,81],[11397,95,10835,97],[11397,96,10835,98],[11397,130,10835,132],[11397,131,10835,133],[11398,6,10836,8],[11398,12,10836,14,"totpVerificationInfo"],[11398,32,10836,34],[11398,35,10836,37],[11399,8,10836,39,"verificationCode"],[11399,24,10836,55],[11399,26,10836,57],[11399,30,10836,61],[11399,31,10836,62,"otp"],[11400,6,10836,66],[11400,7,10836,67],[11401,6,10837,8],[11401,13,10837,15,"finalizeSignInTotpMfa"],[11401,34,10837,36],[11401,35,10837,37,"auth"],[11401,39,10837,41],[11401,41,10837,43],[11402,8,10838,12,"mfaPendingCredential"],[11402,28,10838,32],[11403,8,10839,12,"mfaEnrollmentId"],[11403,23,10839,27],[11403,25,10839,29],[11403,29,10839,33],[11403,30,10839,34,"enrollmentId"],[11403,42,10839,46],[11404,8,10840,12,"totpVerificationInfo"],[11405,6,10841,8],[11405,7,10841,9],[11405,8,10841,10],[11406,4,10842,4],[11407,2,10843,0],[11408,2,10844,0],[11409,0,10845,0],[11410,0,10846,0],[11411,0,10847,0],[11412,0,10848,0],[11413,0,10849,0],[11414,0,10850,0],[11415,2,10851,0],[11415,8,10851,6,"TotpSecret"],[11415,18,10851,16],[11415,19,10851,17],[11416,4,10852,4],[11417,4,10853,4,"constructor"],[11417,15,10853,15,"constructor"],[11417,16,10853,16,"secretKey"],[11417,25,10853,25],[11417,27,10853,27,"hashingAlgorithm"],[11417,43,10853,43],[11417,45,10853,45,"codeLength"],[11417,55,10853,55],[11417,57,10853,57,"codeIntervalSeconds"],[11417,76,10853,76],[11417,78,10853,78,"enrollmentCompletionDeadline"],[11417,106,10853,106],[11417,108,10853,108,"sessionInfo"],[11417,119,10853,119],[11417,121,10853,121,"auth"],[11417,125,10853,125],[11417,127,10853,127],[11418,6,10854,8],[11418,10,10854,12],[11418,11,10854,13,"sessionInfo"],[11418,22,10854,24],[11418,25,10854,27,"sessionInfo"],[11418,36,10854,38],[11419,6,10855,8],[11419,10,10855,12],[11419,11,10855,13,"auth"],[11419,15,10855,17],[11419,18,10855,20,"auth"],[11419,22,10855,24],[11420,6,10856,8],[11420,10,10856,12],[11420,11,10856,13,"secretKey"],[11420,20,10856,22],[11420,23,10856,25,"secretKey"],[11420,32,10856,34],[11421,6,10857,8],[11421,10,10857,12],[11421,11,10857,13,"hashingAlgorithm"],[11421,27,10857,29],[11421,30,10857,32,"hashingAlgorithm"],[11421,46,10857,48],[11422,6,10858,8],[11422,10,10858,12],[11422,11,10858,13,"codeLength"],[11422,21,10858,23],[11422,24,10858,26,"codeLength"],[11422,34,10858,36],[11423,6,10859,8],[11423,10,10859,12],[11423,11,10859,13,"codeIntervalSeconds"],[11423,30,10859,32],[11423,33,10859,35,"codeIntervalSeconds"],[11423,52,10859,54],[11424,6,10860,8],[11424,10,10860,12],[11424,11,10860,13,"enrollmentCompletionDeadline"],[11424,39,10860,41],[11424,42,10860,44,"enrollmentCompletionDeadline"],[11424,70,10860,72],[11425,4,10861,4],[11426,4,10862,4],[11427,4,10863,4],[11427,11,10863,11,"_fromStartTotpMfaEnrollmentResponse"],[11427,46,10863,46,"_fromStartTotpMfaEnrollmentResponse"],[11427,47,10863,47,"response"],[11427,55,10863,55],[11427,57,10863,57,"auth"],[11427,61,10863,61],[11427,63,10863,63],[11428,6,10864,8],[11428,13,10864,15],[11428,17,10864,19,"TotpSecret"],[11428,27,10864,29],[11428,28,10864,30,"response"],[11428,36,10864,38],[11428,37,10864,39,"totpSessionInfo"],[11428,52,10864,54],[11428,53,10864,55,"sharedSecretKey"],[11428,68,10864,70],[11428,70,10864,72,"response"],[11428,78,10864,80],[11428,79,10864,81,"totpSessionInfo"],[11428,94,10864,96],[11428,95,10864,97,"hashingAlgorithm"],[11428,111,10864,113],[11428,113,10864,115,"response"],[11428,121,10864,123],[11428,122,10864,124,"totpSessionInfo"],[11428,137,10864,139],[11428,138,10864,140,"verificationCodeLength"],[11428,160,10864,162],[11428,162,10864,164,"response"],[11428,170,10864,172],[11428,171,10864,173,"totpSessionInfo"],[11428,186,10864,188],[11428,187,10864,189,"periodSec"],[11428,196,10864,198],[11428,198,10864,200],[11428,202,10864,204,"Date"],[11428,206,10864,208],[11428,207,10864,209,"response"],[11428,215,10864,217],[11428,216,10864,218,"totpSessionInfo"],[11428,231,10864,233],[11428,232,10864,234,"finalizeEnrollmentTime"],[11428,254,10864,256],[11428,255,10864,257],[11428,256,10864,258,"toUTCString"],[11428,267,10864,269],[11428,268,10864,270],[11428,269,10864,271],[11428,271,10864,273,"response"],[11428,279,10864,281],[11428,280,10864,282,"totpSessionInfo"],[11428,295,10864,297],[11428,296,10864,298,"sessionInfo"],[11428,307,10864,309],[11428,309,10864,311,"auth"],[11428,313,10864,315],[11428,314,10864,316],[11429,4,10865,4],[11430,4,10866,4],[11431,4,10867,4,"_makeTotpVerificationInfo"],[11431,29,10867,29,"_makeTotpVerificationInfo"],[11431,30,10867,30,"otp"],[11431,33,10867,33],[11431,35,10867,35],[11432,6,10868,8],[11432,13,10868,15],[11433,8,10868,17,"sessionInfo"],[11433,19,10868,28],[11433,21,10868,30],[11433,25,10868,34],[11433,26,10868,35,"sessionInfo"],[11433,37,10868,46],[11434,8,10868,48,"verificationCode"],[11434,24,10868,64],[11434,26,10868,66,"otp"],[11435,6,10868,70],[11435,7,10868,71],[11436,4,10869,4],[11437,4,10870,4],[11438,0,10871,0],[11439,0,10872,0],[11440,0,10873,0],[11441,0,10874,0],[11442,0,10875,0],[11443,0,10876,0],[11444,0,10877,0],[11445,0,10878,0],[11446,0,10879,0],[11447,4,10880,4,"generateQrCodeUrl"],[11447,21,10880,21,"generateQrCodeUrl"],[11447,22,10880,22,"accountName"],[11447,33,10880,33],[11447,35,10880,35,"issuer"],[11447,41,10880,41],[11447,43,10880,43],[11448,6,10881,8],[11448,10,10881,12,"useDefaults"],[11448,21,10881,23],[11448,24,10881,26],[11448,29,10881,31],[11449,6,10882,8],[11449,10,10882,12,"_isEmptyString"],[11449,24,10882,26],[11449,25,10882,27,"accountName"],[11449,36,10882,38],[11449,37,10882,39],[11449,41,10882,43,"_isEmptyString"],[11449,55,10882,57],[11449,56,10882,58,"issuer"],[11449,62,10882,64],[11449,63,10882,65],[11449,65,10882,67],[11450,8,10883,12,"useDefaults"],[11450,19,10883,23],[11450,22,10883,26],[11450,26,10883,30],[11451,6,10884,8],[11452,6,10885,8],[11452,10,10885,12,"useDefaults"],[11452,21,10885,23],[11452,23,10885,25],[11453,8,10886,12],[11453,12,10886,16,"_isEmptyString"],[11453,26,10886,30],[11453,27,10886,31,"accountName"],[11453,38,10886,42],[11453,39,10886,43],[11453,41,10886,45],[11454,10,10887,16,"accountName"],[11454,21,10887,27],[11454,24,10887,30],[11454,28,10887,34],[11454,29,10887,35,"auth"],[11454,33,10887,39],[11454,34,10887,40,"currentUser"],[11454,45,10887,51],[11454,47,10887,53,"email"],[11454,52,10887,58],[11454,56,10887,62],[11454,69,10887,75],[11455,8,10888,12],[11456,8,10889,12],[11456,12,10889,16,"_isEmptyString"],[11456,26,10889,30],[11456,27,10889,31,"issuer"],[11456,33,10889,37],[11456,34,10889,38],[11456,36,10889,40],[11457,10,10890,16,"issuer"],[11457,16,10890,22],[11457,19,10890,25],[11457,23,10890,29],[11457,24,10890,30,"auth"],[11457,28,10890,34],[11457,29,10890,35,"name"],[11457,33,10890,39],[11458,8,10891,12],[11459,6,10892,8],[11460,6,10893,8],[11460,13,10893,15],[11460,31,10893,33,"issuer"],[11460,37,10893,39],[11460,41,10893,43,"accountName"],[11460,52,10893,54],[11460,63,10893,65],[11460,67,10893,69],[11460,68,10893,70,"secretKey"],[11460,77,10893,79],[11460,88,10893,90,"issuer"],[11460,94,10893,96],[11460,108,10893,110],[11460,112,10893,114],[11460,113,10893,115,"hashingAlgorithm"],[11460,129,10893,131],[11460,140,10893,142],[11460,144,10893,146],[11460,145,10893,147,"codeLength"],[11460,155,10893,157],[11460,157,10893,159],[11461,4,10894,4],[11462,2,10895,0],[11463,2,10896,0],[11464,2,10897,0],[11464,11,10897,9,"_isEmptyString"],[11464,25,10897,23,"_isEmptyString"],[11464,26,10897,24,"input"],[11464,31,10897,29],[11464,33,10897,31],[11465,4,10898,4],[11465,11,10898,11],[11465,18,10898,18,"input"],[11465,23,10898,23],[11465,28,10898,28],[11465,39,10898,39],[11465,43,10898,43,"input"],[11465,48,10898,48],[11465,50,10898,50,"length"],[11465,56,10898,56],[11465,61,10898,61],[11465,62,10898,62],[11466,2,10899,0],[11467,2,10901,0],[11467,6,10901,4,"name"],[11467,10,10901,8],[11467,13,10901,11],[11467,29,10901,27],[11468,2,10902,0],[11468,6,10902,4,"version"],[11468,13,10902,11],[11468,16,10902,14],[11468,24,10902,22],[11470,2,10904,0],[11471,0,10905,0],[11472,0,10906,0],[11473,0,10907,0],[11474,0,10908,0],[11475,0,10909,0],[11476,0,10910,0],[11477,0,10911,0],[11478,0,10912,0],[11479,0,10913,0],[11480,0,10914,0],[11481,0,10915,0],[11482,0,10916,0],[11483,0,10917,0],[11484,0,10918,0],[11485,0,10919,0],[11486,2,10920,0],[11486,8,10920,6,"AuthInterop"],[11486,19,10920,17],[11486,20,10920,18],[11487,4,10921,4,"constructor"],[11487,15,10921,15,"constructor"],[11487,16,10921,16,"auth"],[11487,20,10921,20],[11487,22,10921,22],[11488,6,10922,8],[11488,10,10922,12],[11488,11,10922,13,"auth"],[11488,15,10922,17],[11488,18,10922,20,"auth"],[11488,22,10922,24],[11489,6,10923,8],[11489,10,10923,12],[11489,11,10923,13,"internalListeners"],[11489,28,10923,30],[11489,31,10923,33],[11489,35,10923,37,"Map"],[11489,38,10923,40],[11489,39,10923,41],[11489,40,10923,42],[11490,4,10924,4],[11491,4,10925,4,"getUid"],[11491,10,10925,10,"getUid"],[11491,11,10925,10],[11491,13,10925,13],[11492,6,10926,8],[11492,10,10926,12],[11492,11,10926,13,"assertAuthConfigured"],[11492,31,10926,33],[11492,32,10926,34],[11492,33,10926,35],[11493,6,10927,8],[11493,13,10927,15],[11493,17,10927,19],[11493,18,10927,20,"auth"],[11493,22,10927,24],[11493,23,10927,25,"currentUser"],[11493,34,10927,36],[11493,36,10927,38,"uid"],[11493,39,10927,41],[11493,43,10927,45],[11493,47,10927,49],[11494,4,10928,4],[11495,4,10929,4],[11495,10,10929,10,"getToken"],[11495,18,10929,18,"getToken"],[11495,19,10929,19,"forceRefresh"],[11495,31,10929,31],[11495,33,10929,33],[11496,6,10930,8],[11496,10,10930,12],[11496,11,10930,13,"assertAuthConfigured"],[11496,31,10930,33],[11496,32,10930,34],[11496,33,10930,35],[11497,6,10931,8],[11497,12,10931,14],[11497,16,10931,18],[11497,17,10931,19,"auth"],[11497,21,10931,23],[11497,22,10931,24,"_initializationPromise"],[11497,44,10931,46],[11498,6,10932,8],[11498,10,10932,12],[11498,11,10932,13],[11498,15,10932,17],[11498,16,10932,18,"auth"],[11498,20,10932,22],[11498,21,10932,23,"currentUser"],[11498,32,10932,34],[11498,34,10932,36],[11499,8,10933,12],[11499,15,10933,19],[11499,19,10933,23],[11500,6,10934,8],[11501,6,10935,8],[11501,12,10935,14,"accessToken"],[11501,23,10935,25],[11501,26,10935,28],[11501,32,10935,34],[11501,36,10935,38],[11501,37,10935,39,"auth"],[11501,41,10935,43],[11501,42,10935,44,"currentUser"],[11501,53,10935,55],[11501,54,10935,56,"getIdToken"],[11501,64,10935,66],[11501,65,10935,67,"forceRefresh"],[11501,77,10935,79],[11501,78,10935,80],[11502,6,10936,8],[11502,13,10936,15],[11503,8,10936,17,"accessToken"],[11504,6,10936,29],[11504,7,10936,30],[11505,4,10937,4],[11506,4,10938,4,"addAuthTokenListener"],[11506,24,10938,24,"addAuthTokenListener"],[11506,25,10938,25,"listener"],[11506,33,10938,33],[11506,35,10938,35],[11507,6,10939,8],[11507,10,10939,12],[11507,11,10939,13,"assertAuthConfigured"],[11507,31,10939,33],[11507,32,10939,34],[11507,33,10939,35],[11508,6,10940,8],[11508,10,10940,12],[11508,14,10940,16],[11508,15,10940,17,"internalListeners"],[11508,32,10940,34],[11508,33,10940,35,"has"],[11508,36,10940,38],[11508,37,10940,39,"listener"],[11508,45,10940,47],[11508,46,10940,48],[11508,48,10940,50],[11509,8,10941,12],[11510,6,10942,8],[11511,6,10943,8],[11511,12,10943,14,"unsubscribe"],[11511,23,10943,25],[11511,26,10943,28],[11511,30,10943,32],[11511,31,10943,33,"auth"],[11511,35,10943,37],[11511,36,10943,38,"onIdTokenChanged"],[11511,52,10943,54],[11511,53,10943,55,"user"],[11511,57,10943,59],[11511,61,10943,63],[11512,8,10944,12,"listener"],[11512,16,10944,20],[11512,17,10944,21,"user"],[11512,21,10944,25],[11512,23,10944,27,"stsTokenManager"],[11512,38,10944,42],[11512,39,10944,43,"accessToken"],[11512,50,10944,54],[11512,54,10944,58],[11512,58,10944,62],[11512,59,10944,63],[11513,6,10945,8],[11513,7,10945,9],[11513,8,10945,10],[11514,6,10946,8],[11514,10,10946,12],[11514,11,10946,13,"internalListeners"],[11514,28,10946,30],[11514,29,10946,31,"set"],[11514,32,10946,34],[11514,33,10946,35,"listener"],[11514,41,10946,43],[11514,43,10946,45,"unsubscribe"],[11514,54,10946,56],[11514,55,10946,57],[11515,6,10947,8],[11515,10,10947,12],[11515,11,10947,13,"updateProactiveRefresh"],[11515,33,10947,35],[11515,34,10947,36],[11515,35,10947,37],[11516,4,10948,4],[11517,4,10949,4,"removeAuthTokenListener"],[11517,27,10949,27,"removeAuthTokenListener"],[11517,28,10949,28,"listener"],[11517,36,10949,36],[11517,38,10949,38],[11518,6,10950,8],[11518,10,10950,12],[11518,11,10950,13,"assertAuthConfigured"],[11518,31,10950,33],[11518,32,10950,34],[11518,33,10950,35],[11519,6,10951,8],[11519,12,10951,14,"unsubscribe"],[11519,23,10951,25],[11519,26,10951,28],[11519,30,10951,32],[11519,31,10951,33,"internalListeners"],[11519,48,10951,50],[11519,49,10951,51,"get"],[11519,52,10951,54],[11519,53,10951,55,"listener"],[11519,61,10951,63],[11519,62,10951,64],[11520,6,10952,8],[11520,10,10952,12],[11520,11,10952,13,"unsubscribe"],[11520,22,10952,24],[11520,24,10952,26],[11521,8,10953,12],[11522,6,10954,8],[11523,6,10955,8],[11523,10,10955,12],[11523,11,10955,13,"internalListeners"],[11523,28,10955,30],[11523,29,10955,31,"delete"],[11523,35,10955,37],[11523,36,10955,38,"listener"],[11523,44,10955,46],[11523,45,10955,47],[11524,6,10956,8,"unsubscribe"],[11524,17,10956,19],[11524,18,10956,20],[11524,19,10956,21],[11525,6,10957,8],[11525,10,10957,12],[11525,11,10957,13,"updateProactiveRefresh"],[11525,33,10957,35],[11525,34,10957,36],[11525,35,10957,37],[11526,4,10958,4],[11527,4,10959,4,"assertAuthConfigured"],[11527,24,10959,24,"assertAuthConfigured"],[11527,25,10959,24],[11527,27,10959,27],[11528,6,10960,8,"_assert"],[11528,13,10960,15],[11528,14,10960,16],[11528,18,10960,20],[11528,19,10960,21,"auth"],[11528,23,10960,25],[11528,24,10960,26,"_initializationPromise"],[11528,46,10960,48],[11528,48,10960,50],[11528,87,10960,89],[11528,88,10960,90],[11528,138,10960,140],[11528,139,10960,141],[11529,4,10961,4],[11530,4,10962,4,"updateProactiveRefresh"],[11530,26,10962,26,"updateProactiveRefresh"],[11530,27,10962,26],[11530,29,10962,29],[11531,6,10963,8],[11531,10,10963,12],[11531,14,10963,16],[11531,15,10963,17,"internalListeners"],[11531,32,10963,34],[11531,33,10963,35,"size"],[11531,37,10963,39],[11531,40,10963,42],[11531,41,10963,43],[11531,43,10963,45],[11532,8,10964,12],[11532,12,10964,16],[11532,13,10964,17,"auth"],[11532,17,10964,21],[11532,18,10964,22,"_startProactiveRefresh"],[11532,40,10964,44],[11532,41,10964,45],[11532,42,10964,46],[11533,6,10965,8],[11533,7,10965,9],[11533,13,10966,13],[11534,8,10967,12],[11534,12,10967,16],[11534,13,10967,17,"auth"],[11534,17,10967,21],[11534,18,10967,22,"_stopProactiveRefresh"],[11534,39,10967,43],[11534,40,10967,44],[11534,41,10967,45],[11535,6,10968,8],[11536,4,10969,4],[11537,2,10970,0],[11539,2,10972,0],[11540,0,10973,0],[11541,0,10974,0],[11542,0,10975,0],[11543,0,10976,0],[11544,0,10977,0],[11545,0,10978,0],[11546,0,10979,0],[11547,0,10980,0],[11548,0,10981,0],[11549,0,10982,0],[11550,0,10983,0],[11551,0,10984,0],[11552,0,10985,0],[11553,0,10986,0],[11554,0,10987,0],[11555,2,10988,0],[11555,11,10988,9,"getVersionForPlatform"],[11555,32,10988,30,"getVersionForPlatform"],[11555,33,10988,31,"clientPlatform"],[11555,47,10988,45],[11555,49,10988,47],[11556,4,10989,4],[11556,12,10989,12,"clientPlatform"],[11556,26,10989,26],[11557,6,10990,8],[11557,11,10990,13],[11557,17,10990,19],[11557,18,10990,20],[11558,8,10991,12],[11558,15,10991,19],[11558,21,10991,25],[11559,6,10992,8],[11559,11,10992,13],[11559,24,10992,26],[11559,25,10992,27],[11560,8,10993,12],[11560,15,10993,19],[11560,19,10993,23],[11561,6,10994,8],[11561,11,10994,13],[11561,19,10994,21],[11561,20,10994,22],[11562,8,10995,12],[11562,15,10995,19],[11562,26,10995,30],[11563,6,10996,8],[11563,11,10996,13],[11563,20,10996,22],[11563,21,10996,23],[11564,8,10997,12],[11564,15,10997,19],[11564,24,10997,28],[11565,6,10998,8],[11565,11,10998,13],[11565,25,10998,27],[11565,26,10998,28],[11566,8,10999,12],[11566,15,10999,19],[11566,30,10999,34],[11567,6,11000,8],[11568,8,11001,12],[11568,15,11001,19,"undefined"],[11568,24,11001,28],[11569,4,11002,4],[11570,2,11003,0],[11571,2,11004,0],[11572,2,11005,0],[11572,11,11005,9,"registerAuth"],[11572,23,11005,21,"registerAuth"],[11572,24,11005,22,"clientPlatform"],[11572,38,11005,36],[11572,40,11005,38],[11573,4,11006,4],[11573,8,11006,4,"_registerComponent"],[11573,20,11006,22],[11573,21,11006,22,"_registerComponent"],[11573,39,11006,22],[11573,41,11006,23],[11573,45,11006,27,"Component"],[11573,63,11006,36],[11573,64,11006,36,"Component"],[11573,73,11006,36],[11573,74,11006,37],[11573,80,11006,43],[11573,81,11006,44],[11573,108,11006,71],[11573,109,11006,72,"container"],[11573,118,11006,81],[11573,120,11006,83],[11574,6,11006,85,"options"],[11574,13,11006,92],[11574,15,11006,94,"deps"],[11575,4,11006,99],[11575,5,11006,100],[11575,10,11006,105],[11576,6,11007,8],[11576,12,11007,14,"app"],[11576,15,11007,17],[11576,18,11007,20,"container"],[11576,27,11007,29],[11576,28,11007,30,"getProvider"],[11576,39,11007,41],[11576,40,11007,42],[11576,45,11007,47],[11576,46,11007,48],[11576,47,11007,49,"getImmediate"],[11576,59,11007,61],[11576,60,11007,62],[11576,61,11007,63],[11577,6,11008,8],[11577,12,11008,14,"heartbeatServiceProvider"],[11577,36,11008,38],[11577,39,11008,41,"container"],[11577,48,11008,50],[11577,49,11008,51,"getProvider"],[11577,60,11008,62],[11577,61,11008,63],[11577,72,11008,74],[11577,73,11008,75],[11578,6,11009,8],[11578,12,11009,14,"appCheckServiceProvider"],[11578,35,11009,37],[11578,38,11009,40,"container"],[11578,47,11009,49],[11578,48,11009,50,"getProvider"],[11578,59,11009,61],[11578,60,11009,62],[11578,80,11009,82],[11578,81,11009,83],[11579,6,11010,8],[11579,12,11010,14],[11580,8,11010,16,"apiKey"],[11580,14,11010,22],[11581,8,11010,24,"authDomain"],[11582,6,11010,35],[11582,7,11010,36],[11582,10,11010,39,"app"],[11582,13,11010,42],[11582,14,11010,43,"options"],[11582,21,11010,50],[11583,6,11011,8,"_assert"],[11583,13,11011,15],[11583,14,11011,16,"apiKey"],[11583,20,11011,22],[11583,24,11011,26],[11583,25,11011,27,"apiKey"],[11583,31,11011,33],[11583,32,11011,34,"includes"],[11583,40,11011,42],[11583,41,11011,43],[11583,44,11011,46],[11583,45,11011,47],[11583,47,11011,49],[11583,64,11011,66],[11583,65,11011,67],[11583,102,11011,104],[11584,8,11011,106,"appName"],[11584,15,11011,113],[11584,17,11011,115,"app"],[11584,20,11011,118],[11584,21,11011,119,"name"],[11585,6,11011,124],[11585,7,11011,125],[11585,8,11011,126],[11586,6,11012,8],[11586,12,11012,14,"config"],[11586,18,11012,20],[11586,21,11012,23],[11587,8,11013,12,"apiKey"],[11587,14,11013,18],[11588,8,11014,12,"authDomain"],[11588,18,11014,22],[11589,8,11015,12,"clientPlatform"],[11589,22,11015,26],[11590,8,11016,12,"apiHost"],[11590,15,11016,19],[11590,17,11016,21],[11590,49,11016,53],[11590,50,11016,54],[11591,8,11017,12,"tokenApiHost"],[11591,20,11017,24],[11591,22,11017,26],[11591,50,11017,54],[11591,51,11017,55],[11592,8,11018,12,"apiScheme"],[11592,17,11018,21],[11592,19,11018,23],[11592,26,11018,30],[11592,27,11018,31],[11593,8,11019,12,"sdkClientVersion"],[11593,24,11019,28],[11593,26,11019,30,"_getClientVersion"],[11593,43,11019,47],[11593,44,11019,48,"clientPlatform"],[11593,58,11019,62],[11594,6,11020,8],[11594,7,11020,9],[11595,6,11021,8],[11595,12,11021,14,"authInstance"],[11595,24,11021,26],[11595,27,11021,29],[11595,31,11021,33,"AuthImpl"],[11595,39,11021,41],[11595,40,11021,42,"app"],[11595,43,11021,45],[11595,45,11021,47,"heartbeatServiceProvider"],[11595,69,11021,71],[11595,71,11021,73,"appCheckServiceProvider"],[11595,94,11021,96],[11595,96,11021,98,"config"],[11595,102,11021,104],[11595,103,11021,105],[11596,6,11022,8,"_initializeAuthInstance"],[11596,29,11022,31],[11596,30,11022,32,"authInstance"],[11596,42,11022,44],[11596,44,11022,46,"deps"],[11596,48,11022,50],[11596,49,11022,51],[11597,6,11023,8],[11597,13,11023,15,"authInstance"],[11597,25,11023,27],[11598,4,11024,4],[11598,5,11024,5],[11598,7,11024,7],[11598,15,11024,15],[11598,16,11024,16],[11598,42,11024,42],[11599,4,11025,8],[11600,0,11026,0],[11601,0,11027,0],[11602,0,11028,0],[11602,7,11025,8],[11602,8,11029,9,"setInstantiationMode"],[11602,28,11029,29],[11602,29,11029,30],[11602,39,11029,40],[11602,40,11029,41],[11602,72,11029,73],[11603,4,11030,8],[11604,0,11031,0],[11605,0,11032,0],[11606,0,11033,0],[11606,7,11030,8],[11606,8,11034,9,"setInstanceCreatedCallback"],[11606,34,11034,35],[11606,35,11034,36],[11606,36,11034,37,"container"],[11606,45,11034,46],[11606,47,11034,48,"_instanceIdentifier"],[11606,66,11034,67],[11606,68,11034,69,"_instance"],[11606,77,11034,78],[11606,82,11034,83],[11607,6,11035,8],[11607,12,11035,14,"authInternalProvider"],[11607,32,11035,34],[11607,35,11035,37,"container"],[11607,44,11035,46],[11607,45,11035,47,"getProvider"],[11607,56,11035,58],[11607,57,11035,59],[11607,72,11035,74],[11607,73,11035,75],[11607,107,11035,109],[11607,108,11035,110],[11608,6,11036,8,"authInternalProvider"],[11608,26,11036,28],[11608,27,11036,29,"initialize"],[11608,37,11036,39],[11608,38,11036,40],[11608,39,11036,41],[11609,4,11037,4],[11609,5,11037,5],[11609,6,11037,6],[11609,7,11037,7],[11610,4,11038,4],[11610,8,11038,4,"_registerComponent"],[11610,20,11038,22],[11610,21,11038,22,"_registerComponent"],[11610,39,11038,22],[11610,41,11038,23],[11610,45,11038,27,"Component"],[11610,63,11038,36],[11610,64,11038,36,"Component"],[11610,73,11038,36],[11610,74,11038,37],[11610,89,11038,52],[11610,90,11038,53],[11610,126,11038,89,"container"],[11610,135,11038,98],[11610,139,11038,102],[11611,6,11039,8],[11611,12,11039,14,"auth"],[11611,16,11039,18],[11611,19,11039,21,"_castAuth"],[11611,28,11039,30],[11611,29,11039,31,"container"],[11611,38,11039,40],[11611,39,11039,41,"getProvider"],[11611,50,11039,52],[11611,51,11039,53],[11611,57,11039,59],[11611,58,11039,60],[11611,83,11039,85],[11611,84,11039,86],[11611,85,11039,87,"getImmediate"],[11611,97,11039,99],[11611,98,11039,100],[11611,99,11039,101],[11611,100,11039,102],[11612,6,11040,8],[11612,13,11040,15],[11612,14,11040,16,"auth"],[11612,18,11040,20],[11612,22,11040,24],[11612,26,11040,28,"AuthInterop"],[11612,37,11040,39],[11612,38,11040,40,"auth"],[11612,42,11040,44],[11612,43,11040,45],[11612,45,11040,47,"auth"],[11612,49,11040,51],[11612,50,11040,52],[11613,4,11041,4],[11613,5,11041,5],[11613,7,11041,7],[11613,16,11041,16],[11613,17,11041,17],[11613,44,11041,44],[11613,45,11041,45],[11613,46,11041,46,"setInstantiationMode"],[11613,66,11041,66],[11613,67,11041,67],[11613,77,11041,77],[11613,78,11041,78],[11613,110,11041,110],[11613,111,11041,111],[11613,112,11041,112],[11614,4,11042,4],[11614,8,11042,4,"registerVersion"],[11614,20,11042,19],[11614,21,11042,19,"registerVersion"],[11614,36,11042,19],[11614,38,11042,20,"name"],[11614,42,11042,24],[11614,44,11042,26,"version"],[11614,51,11042,33],[11614,53,11042,35,"getVersionForPlatform"],[11614,74,11042,56],[11614,75,11042,57,"clientPlatform"],[11614,89,11042,71],[11614,90,11042,72],[11614,91,11042,73],[11615,4,11043,4],[11616,4,11044,4],[11616,8,11044,4,"registerVersion"],[11616,20,11044,19],[11616,21,11044,19,"registerVersion"],[11616,36,11044,19],[11616,38,11044,20,"name"],[11616,42,11044,24],[11616,44,11044,26,"version"],[11616,51,11044,33],[11616,53,11044,35],[11616,62,11044,44],[11616,63,11044,45],[11617,2,11045,0],[11619,2,11047,0],[11620,0,11048,0],[11621,0,11049,0],[11622,0,11050,0],[11623,0,11051,0],[11624,0,11052,0],[11625,0,11053,0],[11626,0,11054,0],[11627,0,11055,0],[11628,0,11056,0],[11629,0,11057,0],[11630,0,11058,0],[11631,0,11059,0],[11632,0,11060,0],[11633,0,11061,0],[11634,0,11062,0],[11635,2,11063,0],[11635,8,11063,6,"DEFAULT_ID_TOKEN_MAX_AGE"],[11635,32,11063,30],[11635,35,11063,33],[11635,36,11063,34],[11635,39,11063,37],[11635,41,11063,39],[11636,2,11064,0],[11636,8,11064,6,"authIdTokenMaxAge"],[11636,25,11064,23],[11636,28,11064,26],[11636,32,11064,26,"getExperimentalSetting"],[11636,45,11064,48],[11636,46,11064,48,"getExperimentalSetting"],[11636,68,11064,48],[11636,70,11064,49],[11636,89,11064,68],[11636,90,11064,69],[11636,94,11064,73,"DEFAULT_ID_TOKEN_MAX_AGE"],[11636,118,11064,97],[11637,2,11065,0],[11637,6,11065,4,"lastPostedIdToken"],[11637,23,11065,21],[11637,26,11065,24],[11637,30,11065,28],[11638,2,11066,0],[11638,8,11066,6,"mintCookieFactory"],[11638,25,11066,23],[11638,28,11066,27,"url"],[11638,31,11066,30],[11638,35,11066,35],[11638,41,11066,42,"user"],[11638,45,11066,46],[11638,49,11066,51],[11639,4,11067,4],[11639,10,11067,10,"idTokenResult"],[11639,23,11067,23],[11639,26,11067,26,"user"],[11639,30,11067,30],[11639,35,11067,35],[11639,41,11067,41,"user"],[11639,45,11067,45],[11639,46,11067,46,"getIdTokenResult"],[11639,62,11067,62],[11639,63,11067,63],[11639,64,11067,64],[11639,65,11067,65],[11640,4,11068,4],[11640,10,11068,10,"idTokenAge"],[11640,20,11068,20],[11640,23,11068,23,"idTokenResult"],[11640,36,11068,36],[11640,40,11069,8],[11640,41,11069,9],[11640,45,11069,13,"Date"],[11640,49,11069,17],[11640,50,11069,18],[11640,51,11069,19],[11640,52,11069,20,"getTime"],[11640,59,11069,27],[11640,60,11069,28],[11640,61,11069,29],[11640,64,11069,32,"Date"],[11640,68,11069,36],[11640,69,11069,37,"parse"],[11640,74,11069,42],[11640,75,11069,43,"idTokenResult"],[11640,88,11069,56],[11640,89,11069,57,"issuedAtTime"],[11640,101,11069,69],[11640,102,11069,70],[11640,106,11069,74],[11640,110,11069,78],[11641,4,11070,4],[11641,8,11070,8,"idTokenAge"],[11641,18,11070,18],[11641,22,11070,22,"idTokenAge"],[11641,32,11070,32],[11641,35,11070,35,"authIdTokenMaxAge"],[11641,52,11070,52],[11641,54,11070,54],[11642,6,11071,8],[11643,4,11072,4],[11644,4,11073,4],[11645,4,11074,4],[11645,10,11074,10,"idToken"],[11645,17,11074,17],[11645,20,11074,20,"idTokenResult"],[11645,33,11074,33],[11645,35,11074,35,"token"],[11645,40,11074,40],[11646,4,11075,4],[11646,8,11075,8,"lastPostedIdToken"],[11646,25,11075,25],[11646,30,11075,30,"idToken"],[11646,37,11075,37],[11646,39,11075,39],[11647,6,11076,8],[11648,4,11077,4],[11649,4,11078,4,"lastPostedIdToken"],[11649,21,11078,21],[11649,24,11078,24,"idToken"],[11649,31,11078,31],[11650,4,11079,4],[11650,10,11079,10,"fetch"],[11650,15,11079,15],[11650,16,11079,16,"url"],[11650,19,11079,19],[11650,21,11079,21],[11651,6,11080,8,"method"],[11651,12,11080,14],[11651,14,11080,16,"idToken"],[11651,21,11080,23],[11651,24,11080,26],[11651,30,11080,32],[11651,33,11080,35],[11651,41,11080,43],[11652,6,11081,8,"headers"],[11652,13,11081,15],[11652,15,11081,17,"idToken"],[11652,22,11081,24],[11652,25,11082,14],[11653,8,11083,16],[11653,23,11083,31],[11653,25,11083,33],[11653,35,11083,43,"idToken"],[11653,42,11083,50],[11654,6,11084,12],[11654,7,11084,13],[11654,10,11085,14],[11654,11,11085,15],[11655,4,11086,4],[11655,5,11086,5],[11655,6,11086,6],[11656,2,11087,0],[11656,3,11087,1],[11657,2,11088,0],[11658,0,11089,0],[11659,0,11090,0],[11660,0,11091,0],[11661,0,11092,0],[11662,0,11093,0],[11663,0,11094,0],[11664,0,11095,0],[11665,2,11096,0],[11665,11,11096,9,"getAuth"],[11665,18,11096,16,"getAuth"],[11665,19,11096,17,"app"],[11665,22,11096,20],[11665,25,11096,23],[11665,29,11096,23,"getApp"],[11665,41,11096,29],[11665,42,11096,29,"getApp"],[11665,48,11096,29],[11665,50,11096,30],[11665,51,11096,31],[11665,53,11096,33],[11666,4,11097,4],[11666,10,11097,10,"provider"],[11666,18,11097,18],[11666,21,11097,21],[11666,25,11097,21,"_getProvider"],[11666,37,11097,33],[11666,38,11097,33,"_getProvider"],[11666,50,11097,33],[11666,52,11097,34,"app"],[11666,55,11097,37],[11666,57,11097,39],[11666,63,11097,45],[11666,64,11097,46],[11667,4,11098,4],[11667,8,11098,8,"provider"],[11667,16,11098,16],[11667,17,11098,17,"isInitialized"],[11667,30,11098,30],[11667,31,11098,31],[11667,32,11098,32],[11667,34,11098,34],[11668,6,11099,8],[11668,13,11099,15,"provider"],[11668,21,11099,23],[11668,22,11099,24,"getImmediate"],[11668,34,11099,36],[11668,35,11099,37],[11668,36,11099,38],[11669,4,11100,4],[11670,4,11101,4],[11670,10,11101,10,"auth"],[11670,14,11101,14],[11670,17,11101,17,"initializeAuth"],[11670,31,11101,31],[11670,32,11101,32,"app"],[11670,35,11101,35],[11670,37,11101,37],[11671,6,11102,8,"popupRedirectResolver"],[11671,27,11102,29],[11671,29,11102,31,"browserPopupRedirectResolver"],[11671,57,11102,59],[11672,6,11103,8,"persistence"],[11672,17,11103,19],[11672,19,11103,21],[11672,20,11104,12,"indexedDBLocalPersistence"],[11672,45,11104,37],[11672,47,11105,12,"browserLocalPersistence"],[11672,70,11105,35],[11672,72,11106,12,"browserSessionPersistence"],[11672,97,11106,37],[11673,4,11108,4],[11673,5,11108,5],[11673,6,11108,6],[11674,4,11109,4],[11674,10,11109,10,"authTokenSyncPath"],[11674,27,11109,27],[11674,30,11109,30],[11674,34,11109,30,"getExperimentalSetting"],[11674,47,11109,52],[11674,48,11109,52,"getExperimentalSetting"],[11674,70,11109,52],[11674,72,11109,53],[11674,90,11109,71],[11674,91,11109,72],[11675,4,11110,4],[11676,4,11111,4],[11676,8,11111,8,"authTokenSyncPath"],[11676,25,11111,25],[11676,29,11112,8],[11676,36,11112,15,"isSecureContext"],[11676,51,11112,30],[11676,56,11112,35],[11676,65,11112,44],[11676,69,11113,8,"isSecureContext"],[11676,84,11113,23],[11676,86,11113,25],[11677,6,11114,8],[11678,6,11115,8],[11678,12,11115,14,"authTokenSyncUrl"],[11678,28,11115,30],[11678,31,11115,33],[11678,35,11115,37,"URL"],[11678,38,11115,40],[11678,39,11115,41,"authTokenSyncPath"],[11678,56,11115,58],[11678,58,11115,60,"location"],[11678,66,11115,68],[11678,67,11115,69,"origin"],[11678,73,11115,75],[11678,74,11115,76],[11679,6,11116,8],[11679,10,11116,12,"location"],[11679,18,11116,20],[11679,19,11116,21,"origin"],[11679,25,11116,27],[11679,30,11116,32,"authTokenSyncUrl"],[11679,46,11116,48],[11679,47,11116,49,"origin"],[11679,53,11116,55],[11679,55,11116,57],[11680,8,11117,12],[11680,14,11117,18,"mintCookie"],[11680,24,11117,28],[11680,27,11117,31,"mintCookieFactory"],[11680,44,11117,48],[11680,45,11117,49,"authTokenSyncUrl"],[11680,61,11117,65],[11680,62,11117,66,"toString"],[11680,70,11117,74],[11680,71,11117,75],[11680,72,11117,76],[11680,73,11117,77],[11681,8,11118,12,"beforeAuthStateChanged"],[11681,30,11118,34],[11681,31,11118,35,"auth"],[11681,35,11118,39],[11681,37,11118,41,"mintCookie"],[11681,47,11118,51],[11681,49,11118,53],[11681,55,11118,59,"mintCookie"],[11681,65,11118,69],[11681,66,11118,70,"auth"],[11681,70,11118,74],[11681,71,11118,75,"currentUser"],[11681,82,11118,86],[11681,83,11118,87],[11681,84,11118,88],[11682,8,11119,12,"onIdTokenChanged"],[11682,24,11119,28],[11682,25,11119,29,"auth"],[11682,29,11119,33],[11682,31,11119,35,"user"],[11682,35,11119,39],[11682,39,11119,43,"mintCookie"],[11682,49,11119,53],[11682,50,11119,54,"user"],[11682,54,11119,58],[11682,55,11119,59],[11682,56,11119,60],[11683,6,11120,8],[11684,4,11121,4],[11685,4,11122,4],[11685,10,11122,10,"authEmulatorHost"],[11685,26,11122,26],[11685,29,11122,29],[11685,33,11122,29,"getDefaultEmulatorHost"],[11685,46,11122,51],[11685,47,11122,51,"getDefaultEmulatorHost"],[11685,69,11122,51],[11685,71,11122,52],[11685,77,11122,58],[11685,78,11122,59],[11686,4,11123,4],[11686,8,11123,8,"authEmulatorHost"],[11686,24,11123,24],[11686,26,11123,26],[11687,6,11124,8,"connectAuthEmulator"],[11687,25,11124,27],[11687,26,11124,28,"auth"],[11687,30,11124,32],[11687,32,11124,34],[11687,42,11124,44,"authEmulatorHost"],[11687,58,11124,60],[11687,60,11124,62],[11687,61,11124,63],[11688,4,11125,4],[11689,4,11126,4],[11689,11,11126,11,"auth"],[11689,15,11126,15],[11690,2,11127,0],[11691,2,11128,0],[11691,11,11128,9,"getScriptParentElement"],[11691,33,11128,31,"getScriptParentElement"],[11691,34,11128,31],[11691,36,11128,34],[11692,4,11129,4],[11692,11,11129,11,"document"],[11692,19,11129,19],[11692,20,11129,20,"getElementsByTagName"],[11692,40,11129,40],[11692,41,11129,41],[11692,47,11129,47],[11692,48,11129,48],[11692,51,11129,51],[11692,52,11129,52],[11692,53,11129,53],[11692,57,11129,57,"document"],[11692,65,11129,65],[11693,2,11130,0],[11694,2,11131,0,"_setExternalJSProvider"],[11694,24,11131,22],[11694,25,11131,23],[11695,4,11132,4,"loadJS"],[11695,10,11132,10,"loadJS"],[11695,11,11132,11,"url"],[11695,14,11132,14],[11695,16,11132,16],[11696,6,11133,8],[11697,6,11134,8],[11697,13,11134,15],[11697,17,11134,19,"Promise"],[11697,24,11134,26],[11697,25,11134,27],[11697,26,11134,28,"resolve"],[11697,33,11134,35],[11697,35,11134,37,"reject"],[11697,41,11134,43],[11697,46,11134,48],[11698,8,11135,12],[11698,14,11135,18,"el"],[11698,16,11135,20],[11698,19,11135,23,"document"],[11698,27,11135,31],[11698,28,11135,32,"createElement"],[11698,41,11135,45],[11698,42,11135,46],[11698,50,11135,54],[11698,51,11135,55],[11699,8,11136,12,"el"],[11699,10,11136,14],[11699,11,11136,15,"setAttribute"],[11699,23,11136,27],[11699,24,11136,28],[11699,29,11136,33],[11699,31,11136,35,"url"],[11699,34,11136,38],[11699,35,11136,39],[11700,8,11137,12,"el"],[11700,10,11137,14],[11700,11,11137,15,"onload"],[11700,17,11137,21],[11700,20,11137,24,"resolve"],[11700,27,11137,31],[11701,8,11138,12,"el"],[11701,10,11138,14],[11701,11,11138,15,"onerror"],[11701,18,11138,22],[11701,21,11138,25,"e"],[11701,22,11138,26],[11701,26,11138,30],[11702,10,11139,16],[11702,16,11139,22,"error"],[11702,21,11139,27],[11702,24,11139,30,"_createError"],[11702,36,11139,42],[11702,37,11139,43],[11702,53,11139,59],[11702,54,11139,60],[11702,88,11139,94],[11702,89,11139,95],[11703,10,11140,16,"error"],[11703,15,11140,21],[11703,16,11140,22,"customData"],[11703,26,11140,32],[11703,29,11140,35,"e"],[11703,30,11140,36],[11704,10,11141,16,"reject"],[11704,16,11141,22],[11704,17,11141,23,"error"],[11704,22,11141,28],[11704,23,11141,29],[11705,8,11142,12],[11705,9,11142,13],[11706,8,11143,12,"el"],[11706,10,11143,14],[11706,11,11143,15,"type"],[11706,15,11143,19],[11706,18,11143,22],[11706,35,11143,39],[11707,8,11144,12,"el"],[11707,10,11144,14],[11707,11,11144,15,"charset"],[11707,18,11144,22],[11707,21,11144,25],[11707,28,11144,32],[11708,8,11145,12,"getScriptParentElement"],[11708,30,11145,34],[11708,31,11145,35],[11708,32,11145,36],[11708,33,11145,37,"appendChild"],[11708,44,11145,48],[11708,45,11145,49,"el"],[11708,47,11145,51],[11708,48,11145,52],[11709,6,11146,8],[11709,7,11146,9],[11709,8,11146,10],[11710,4,11147,4],[11710,5,11147,5],[11711,4,11148,4,"gapiScript"],[11711,14,11148,14],[11711,16,11148,16],[11711,51,11148,51],[11712,4,11149,4,"recaptchaV2Script"],[11712,21,11149,21],[11712,23,11149,23],[11712,64,11149,64],[11713,4,11150,4,"recaptchaEnterpriseScript"],[11713,29,11150,29],[11713,31,11150,31],[11714,2,11151,0],[11714,3,11151,1],[11714,4,11151,2],[11715,2,11152,0,"registerAuth"],[11715,14,11152,12],[11715,15,11152,13],[11715,24,11152,22],[11715,25,11152,23],[11715,53,11152,51],[11715,54,11152,52],[11716,0,11152,53],[11716,3]],"functionMap":{"names":["<global>","_debugErrorMap","_prodErrorMap","_logWarn","_logError","_fail","_createError","_errorWithCustomMessage","_serverAppCurrentUserOperationNotSupportedError","_assertInstanceOf","createErrorInternal","_assert","debugFail","debugAssert","_getCurrentUrl","_isHttpOrHttps","_getCurrentScheme","_isOnline","_getUserLanguage","Delay","Delay#constructor","Delay#get","_emulatorUrl","FetchProvider","FetchProvider.initialize","FetchProvider.fetch","FetchProvider.headers","FetchProvider.response","_addTidIfNecessary","_performApiRequest","_performFetchWithErrorHandling$argument_2","_performFetchWithErrorHandling","_performSignInRequest","_getFinalTarget","_parseEnforcementState","NetworkTimeout","NetworkTimeout#clearNetworkTimeout","NetworkTimeout#constructor","Promise$argument_0","setTimeout$argument_0","_makeTaggedError","isV2","isEnterprise","RecaptchaConfig","RecaptchaConfig#constructor","RecaptchaConfig#getProviderEnforcementState","RecaptchaConfig#isProviderEnabled","RecaptchaConfig#isAnyProviderEnabled","getRecaptchaParams","getRecaptchaConfig","deleteAccount","deleteLinkedAccounts","getAccountInfo","utcTimestampToDateString","getIdToken","getIdTokenResult","secondsStringToMilliseconds","_parseToken","_tokenExpiresIn","_logoutIfInvalidated","isUserInvalidated","ProactiveRefresh","ProactiveRefresh#constructor","ProactiveRefresh#_start","ProactiveRefresh#_stop","ProactiveRefresh#getInterval","ProactiveRefresh#schedule","ProactiveRefresh#iteration","UserMetadata","UserMetadata#constructor","UserMetadata#_initializeTime","UserMetadata#_copy","UserMetadata#toJSON","_reloadWithoutSaving","reload","mergeProviderData","original.filter$argument_0","newData.some$argument_0","extractProviderData","providers.map$argument_0","requestStsToken","revokeToken","StsTokenManager","StsTokenManager#constructor","StsTokenManager#get__isExpired","StsTokenManager#updateFromServerResponse","StsTokenManager#updateFromIdToken","StsTokenManager#getToken","StsTokenManager#clearRefreshToken","StsTokenManager#refresh","StsTokenManager#updateTokensAndExpiration","StsTokenManager.fromJSON","StsTokenManager#toJSON","StsTokenManager#_assign","StsTokenManager#_clone","StsTokenManager#_performRefresh","assertStringOrUndefined","UserImpl","UserImpl#constructor","UserImpl#getIdToken","UserImpl#getIdTokenResult","UserImpl#reload","UserImpl#_assign","user.providerData.map$argument_0","UserImpl#_clone","UserImpl#_onReload","UserImpl#_notifyReloadListener","UserImpl#_startProactiveRefresh","UserImpl#_stopProactiveRefresh","UserImpl#_updateTokensIfNecessary","UserImpl#_delete","UserImpl#toJSON","providerData.map$argument_0","UserImpl#get__refreshToken","UserImpl._fromJSON","UserImpl._fromIdTokenResponse","UserImpl._fromGetAccountInfoResponse","_getInstance","InMemoryPersistence","InMemoryPersistence#constructor","InMemoryPersistence#_isAvailable","InMemoryPersistence#_set","InMemoryPersistence#_get","InMemoryPersistence#_remove","InMemoryPersistence#_addListener","InMemoryPersistence#_removeListener","_persistenceKeyName","PersistenceUserManager","PersistenceUserManager#constructor","PersistenceUserManager#setCurrentUser","PersistenceUserManager#getCurrentUser","getAccountInfo._catch$argument_0","PersistenceUserManager#removeCurrentUser","PersistenceUserManager#savePersistenceForRedirect","PersistenceUserManager#setPersistence","PersistenceUserManager#_delete","PersistenceUserManager.create","persistenceHierarchy.map$argument_0","filter$argument_0","availablePersistences.filter$argument_0","_getBrowserName","_isFirefox","_isSafari","_isChromeIOS","_isIEMobile","_isAndroid","_isBlackBerry","_isWebOS","_isIOS","_isIOS7Or8","_isIOSStandalone","_isIE10","_isMobileBrowser","_getClientVersion","AuthMiddlewareQueue","AuthMiddlewareQueue#constructor","AuthMiddlewareQueue#pushCallback","wrappedCallback","<anonymous>","queue.index","AuthMiddlewareQueue#runMiddleware","_getPasswordPolicy","PasswordPolicyImpl","PasswordPolicyImpl#constructor","PasswordPolicyImpl#validatePassword","PasswordPolicyImpl#validatePasswordLengthOptions","PasswordPolicyImpl#validatePasswordCharacterOptions","PasswordPolicyImpl#updatePasswordCharacterOptionsStatuses","AuthImpl","AuthImpl#constructor","AuthImpl#_initializeWithPersistence","queue$argument_0","AuthImpl#_onStorageEvent","AuthImpl#initializeCurrentUserFromIdToken","AuthImpl#initializeCurrentUser","_popupRedirectResolver._overrideRedirectResult$argument_1","AuthImpl#tryRedirectSignIn","AuthImpl#reloadAndSetCurrentUserOrClear","AuthImpl#useDeviceLanguage","AuthImpl#_delete","AuthImpl#updateCurrentUser","AuthImpl#_updateCurrentUser","AuthImpl#signOut","AuthImpl#setPersistence","AuthImpl#_getRecaptchaConfig","AuthImpl#validatePassword","AuthImpl#_getPasswordPolicyInternal","AuthImpl#_updatePasswordPolicy","AuthImpl#_getPersistenceType","AuthImpl#_getPersistence","AuthImpl#_updateErrorMap","AuthImpl#onAuthStateChanged","AuthImpl#beforeAuthStateChanged","AuthImpl#onIdTokenChanged","AuthImpl#authStateReady","onAuthStateChanged$argument_0","AuthImpl#revokeAccessToken","AuthImpl#toJSON","AuthImpl#_setRedirectUser","AuthImpl#getOrInitRedirectPersistenceManager","AuthImpl#_redirectUserForId","AuthImpl#_persistUserIfCurrent","AuthImpl#_notifyListenersIfCurrent","AuthImpl#_key","AuthImpl#_startProactiveRefresh","AuthImpl#_stopProactiveRefresh","AuthImpl#get___currentUser","AuthImpl#notifyAuthListeners","AuthImpl#registerStateListener","promise.then$argument_0","AuthImpl#directlySetCurrentUser","AuthImpl#queue","AuthImpl#get__assertedPersistence","AuthImpl#_logFramework","AuthImpl#_getFrameworks","AuthImpl#_getAdditionalHeaders","AuthImpl#_getAppCheckToken","_castAuth","Subscription","Subscription#constructor","createSubscribe$argument_0","Subscription#get__next","externalJSProvider.loadJS","_setExternalJSProvider","_loadJS","_recaptchaV2ScriptUrl","_recaptchaEnterpriseScriptUrl","_gapiScriptUrl","_generateCallbackName","MockReCaptcha","MockReCaptcha#constructor","MockReCaptcha#render","MockReCaptcha#reset","MockReCaptcha#getResponse","MockReCaptcha#execute","MockGreCAPTCHATopLevel","MockGreCAPTCHATopLevel#constructor","MockGreCAPTCHATopLevel#ready","MockGreCAPTCHATopLevel#execute","MockGreCAPTCHATopLevel#render","MockGreCAPTCHA","MockGreCAPTCHA#ready","MockGreCAPTCHA#execute","MockGreCAPTCHA#render","MockWidget","MockWidget#constructor","clickHandler","MockWidget#getResponse","MockWidget#_delete","MockWidget#execute","window.setTimeout$argument_0","MockWidget#checkIfDeleted","generateRandomAlphaNumericString","RecaptchaEnterpriseVerifier","RecaptchaEnterpriseVerifier#constructor","RecaptchaEnterpriseVerifier#verify","retrieveSiteKey","getRecaptchaConfig.then$argument_0","getRecaptchaConfig.then._catch$argument_0","retrieveRecaptchaToken","grecaptcha.enterprise.ready$argument_0","grecaptcha.enterprise.execute.then$argument_0","grecaptcha.enterprise.execute.then._catch$argument_0","retrieveSiteKey.then$argument_0","_loadJS.then$argument_0","_loadJS.then._catch$argument_0","retrieveSiteKey.then._catch$argument_0","injectRecaptchaFields","handleRecaptchaFlow","actionMethod._catch$argument_0","_initializeRecaptchaConfig","initializeAuth","_initializeAuthInstance","connectAuthEmulator","extractProtocol","extractHostAndPort","parsePort","emitEmulatorWarning","attachBanner","AuthCredential","AuthCredential#constructor","AuthCredential#toJSON","AuthCredential#_getIdTokenResponse","AuthCredential#_linkToIdToken","AuthCredential#_getReauthenticationResolver","resetPassword","updateEmailPassword","linkEmailPassword","applyActionCode$1","signInWithPassword","sendOobCode","sendEmailVerification$1","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","verifyAndChangeEmail","signInWithEmailLink$1","signInWithEmailLinkForLinking","EmailAuthCredential","EmailAuthCredential#constructor","EmailAuthCredential._fromEmailAndPassword","EmailAuthCredential._fromEmailAndCode","EmailAuthCredential#toJSON","EmailAuthCredential.fromJSON","EmailAuthCredential#_getIdTokenResponse","EmailAuthCredential#_linkToIdToken","EmailAuthCredential#_getReauthenticationResolver","signInWithIdp","OAuthCredential","OAuthCredential#constructor","OAuthCredential._fromParams","OAuthCredential#toJSON","OAuthCredential.fromJSON","OAuthCredential#_getIdTokenResponse","OAuthCredential#_linkToIdToken","OAuthCredential#_getReauthenticationResolver","OAuthCredential#buildRequest","sendPhoneVerificationCode","signInWithPhoneNumber$1","linkWithPhoneNumber$1","verifyPhoneNumberForExisting","PhoneAuthCredential","PhoneAuthCredential#constructor","PhoneAuthCredential._fromVerification","PhoneAuthCredential._fromTokenResponse","PhoneAuthCredential#_getIdTokenResponse","PhoneAuthCredential#_linkToIdToken","PhoneAuthCredential#_getReauthenticationResolver","PhoneAuthCredential#_makeVerificationRequest","PhoneAuthCredential#toJSON","PhoneAuthCredential.fromJSON","parseMode","parseDeepLink","ActionCodeURL","ActionCodeURL#constructor","ActionCodeURL.parseLink","parseActionCodeURL","EmailAuthProvider","EmailAuthProvider#constructor","EmailAuthProvider.credential","EmailAuthProvider.credentialWithLink","FederatedAuthProvider","FederatedAuthProvider#constructor","FederatedAuthProvider#setDefaultLanguage","FederatedAuthProvider#setCustomParameters","FederatedAuthProvider#getCustomParameters","BaseOAuthProvider","BaseOAuthProvider#constructor","BaseOAuthProvider#addScope","BaseOAuthProvider#getScopes","OAuthProvider","OAuthProvider.credentialFromJSON","OAuthProvider#credential","OAuthProvider#_credential","OAuthProvider.credentialFromResult","OAuthProvider.credentialFromError","OAuthProvider.oauthCredentialFromTaggedObject","FacebookAuthProvider","FacebookAuthProvider#constructor","FacebookAuthProvider.credential","FacebookAuthProvider.credentialFromResult","FacebookAuthProvider.credentialFromError","FacebookAuthProvider.credentialFromTaggedObject","GoogleAuthProvider","GoogleAuthProvider#constructor","GoogleAuthProvider.credential","GoogleAuthProvider.credentialFromResult","GoogleAuthProvider.credentialFromError","GoogleAuthProvider.credentialFromTaggedObject","GithubAuthProvider","GithubAuthProvider#constructor","GithubAuthProvider.credential","GithubAuthProvider.credentialFromResult","GithubAuthProvider.credentialFromError","GithubAuthProvider.credentialFromTaggedObject","SAMLAuthCredential","SAMLAuthCredential#constructor","SAMLAuthCredential#_getIdTokenResponse","SAMLAuthCredential#_linkToIdToken","SAMLAuthCredential#_getReauthenticationResolver","SAMLAuthCredential#toJSON","SAMLAuthCredential.fromJSON","SAMLAuthCredential._create","SAMLAuthCredential#buildRequest","SAMLAuthProvider","SAMLAuthProvider#constructor","SAMLAuthProvider.credentialFromResult","SAMLAuthProvider.credentialFromError","SAMLAuthProvider.credentialFromJSON","SAMLAuthProvider.samlCredentialFromTaggedObject","TwitterAuthProvider","TwitterAuthProvider#constructor","TwitterAuthProvider.credential","TwitterAuthProvider.credentialFromResult","TwitterAuthProvider.credentialFromError","TwitterAuthProvider.credentialFromTaggedObject","signUp","UserCredentialImpl","UserCredentialImpl#constructor","UserCredentialImpl._fromIdTokenResponse","UserCredentialImpl._forOperation","providerIdForResponse","signInAnonymously","MultiFactorError","MultiFactorError#constructor","MultiFactorError._fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","idTokenProvider._catch$argument_0","providerDataAsNames","providerData.map.filter$argument_0","unlink","userInternal.providerData.filter$argument_0","_link$1","_assertLinkedStatus","_reauthenticate","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","signInWithCustomToken$1","signInWithCustomToken","MultiFactorInfoImpl","MultiFactorInfoImpl#constructor","MultiFactorInfoImpl._fromServerResponse","PhoneMultiFactorInfoImpl","PhoneMultiFactorInfoImpl#constructor","PhoneMultiFactorInfoImpl._fromServerResponse","TotpMultiFactorInfoImpl","TotpMultiFactorInfoImpl#constructor","TotpMultiFactorInfoImpl._fromServerResponse","_setActionCodeSettingsOnRequest","recachePasswordPolicy","sendPasswordResetEmail","confirmPasswordReset","resetPassword._catch$argument_0","applyActionCode","checkActionCode","verifyPasswordResetCode","createUserWithEmailAndPassword","signUpResponse._catch$argument_0","signInWithEmailAndPassword","signInWithCredential._catch$argument_0","sendSignInLinkToEmail","setActionCodeSettings","isSignInWithEmailLink","signInWithEmailLink","createAuthUri","fetchSignInMethodsForEmail","sendEmailVerification","verifyBeforeUpdateEmail","updateProfile$1","updateProfile","userInternal.providerData.find$argument_0","updateEmail","updatePassword","updateEmailOrPassword","_fromIdTokenResponse","GenericAdditionalUserInfo","GenericAdditionalUserInfo#constructor","FederatedAdditionalUserInfoWithUsername","FederatedAdditionalUserInfoWithUsername#constructor","FacebookAdditionalUserInfo","FacebookAdditionalUserInfo#constructor","GithubAdditionalUserInfo","GithubAdditionalUserInfo#constructor","GoogleAdditionalUserInfo","GoogleAdditionalUserInfo#constructor","TwitterAdditionalUserInfo","TwitterAdditionalUserInfo#constructor","getAdditionalUserInfo","setPersistence","initializeRecaptchaConfig","validatePassword","onIdTokenChanged","beforeAuthStateChanged","onAuthStateChanged","useDeviceLanguage","updateCurrentUser","signOut","revokeAccessToken","deleteUser","MultiFactorSessionImpl","MultiFactorSessionImpl#constructor","MultiFactorSessionImpl._fromIdtoken","MultiFactorSessionImpl._fromMfaPendingCredential","MultiFactorSessionImpl#toJSON","MultiFactorSessionImpl.fromJSON","MultiFactorResolverImpl","MultiFactorResolverImpl#constructor","MultiFactorResolverImpl._fromError","map$argument_0","MultiFactorResolverImpl$argument_2","MultiFactorResolverImpl#resolveSignIn","getMultiFactorResolver","startEnrollPhoneMfa","finalizeEnrollPhoneMfa","startEnrollTotpMfa","finalizeEnrollTotpMfa","withdrawMfa","MultiFactorUserImpl","MultiFactorUserImpl#constructor","user._onReload$argument_0","userInfo.mfaInfo.map$argument_0","MultiFactorUserImpl._fromUser","MultiFactorUserImpl#getSession","MultiFactorUserImpl#enroll","MultiFactorUserImpl#unenroll","enrolledFactors.filter$argument_0","multiFactor","BrowserPersistenceClass","BrowserPersistenceClass#constructor","BrowserPersistenceClass#_isAvailable","BrowserPersistenceClass#_set","BrowserPersistenceClass#_get","BrowserPersistenceClass#_remove","BrowserPersistenceClass#get__storage","BrowserLocalPersistence","BrowserLocalPersistence#constructor","boundEventHandler","BrowserLocalPersistence#forAllChangedKeys","BrowserLocalPersistence#onStorageEvent","forAllChangedKeys$argument_0","triggerListeners","BrowserLocalPersistence#notifyListeners","BrowserLocalPersistence#startPolling","setInterval$argument_0","BrowserLocalPersistence#stopPolling","BrowserLocalPersistence#attachListener","BrowserLocalPersistence#detachListener","BrowserLocalPersistence#_addListener","BrowserLocalPersistence#_removeListener","BrowserLocalPersistence#_set","BrowserLocalPersistence#_get","BrowserLocalPersistence#_remove","getDocumentCookie","getCookieName","CookiePersistence","CookiePersistence#constructor","CookiePersistence#_getFinalTarget","CookiePersistence#_isAvailable","CookiePersistence#_set","CookiePersistence#_get","CookiePersistence#_remove","fetch._catch$argument_0","CookiePersistence#_addListener","cb","event.changed.find$argument_0","event.deleted.find$argument_0","unsubscribe","CookiePersistence#_removeListener","BrowserSessionPersistence","BrowserSessionPersistence#constructor","BrowserSessionPersistence#_addListener","BrowserSessionPersistence#_removeListener","_allSettled","promises.map$argument_0","Receiver","Receiver#constructor","Receiver._getInstance","receivers.find$argument_0","Receiver#isListeningto","Receiver#handleEvent","Array.from.map$argument_0","Receiver#_subscribe","Receiver#_unsubscribe","_generateEventId","Sender","Sender#constructor","Sender#removeMessageHandler","Sender#_send","handler.onMessage","Promise._finally$argument_0","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","_getServiceWorkerController","_getWorkerGlobalScope","DBPromise","DBPromise#constructor","DBPromise#toPromise","request.addEventListener$argument_1","getObjectStore","_deleteDatabase","_openDatabase","_putObject","getObject","_deleteObject","IndexedDBLocalPersistence","IndexedDBLocalPersistence#constructor","initializeServiceWorkerMessaging.then$argument_0","initializeServiceWorkerMessaging.then$argument_1","IndexedDBLocalPersistence#_openDb","IndexedDBLocalPersistence#_withRetries","IndexedDBLocalPersistence#initializeServiceWorkerMessaging","IndexedDBLocalPersistence#initializeReceiver","receiver._subscribe$argument_1","IndexedDBLocalPersistence#initializeSender","IndexedDBLocalPersistence#notifyServiceWorker","IndexedDBLocalPersistence#_isAvailable","IndexedDBLocalPersistence#_withPendingWrite","IndexedDBLocalPersistence#_set","_withPendingWrite$argument_0","_withRetries$argument_0","IndexedDBLocalPersistence#_get","IndexedDBLocalPersistence#_remove","IndexedDBLocalPersistence#_poll","IndexedDBLocalPersistence#notifyListeners","IndexedDBLocalPersistence#startPolling","IndexedDBLocalPersistence#stopPolling","IndexedDBLocalPersistence#_addListener","IndexedDBLocalPersistence#_removeListener","startSignInPhoneMfa","finalizeSignInPhoneMfa","finalizeSignInTotpMfa","ReCaptchaLoaderImpl","ReCaptchaLoaderImpl#constructor","ReCaptchaLoaderImpl#load","_window.setTimeout$argument_0","_window._JSLOAD_CALLBACK","recaptcha.render","_loadJS._catch$argument_0","ReCaptchaLoaderImpl#clearedOneInstance","ReCaptchaLoaderImpl#shouldResolveImmediately","isHostLanguageValid","MockReCaptchaLoaderImpl","MockReCaptchaLoaderImpl#load","MockReCaptchaLoaderImpl#clearedOneInstance","RecaptchaVerifier","RecaptchaVerifier#constructor","RecaptchaVerifier#verify","tokenChange","RecaptchaVerifier#render","makeRenderPromise._catch$argument_0","RecaptchaVerifier#_reset","RecaptchaVerifier#clear","container.childNodes.forEach$argument_0","RecaptchaVerifier#validateStartingState","RecaptchaVerifier#makeTokenCallback","tokenChangeListeners.forEach$argument_0","RecaptchaVerifier#assertNotDestroyed","RecaptchaVerifier#makeRenderPromise","RecaptchaVerifier#init","RecaptchaVerifier#getAssertedRecaptcha","domReady","resolver","Promise._catch$argument_0","ConfirmationResultImpl","ConfirmationResultImpl#constructor","ConfirmationResultImpl#confirm","signInWithPhoneNumber","ConfirmationResultImpl$argument_1","linkWithPhoneNumber","reauthenticateWithPhoneNumber","_verifyPhoneNumber","startEnrollPhoneMfaActionCallback","startPhoneMfaEnrollmentResponse._catch$argument_0","startSignInPhoneMfaActionCallback","startPhoneMfaSignInResponse._catch$argument_0","sendPhoneVerificationCodeActionCallback","sendPhoneVerificationCodeResponse._catch$argument_0","updatePhoneNumber","injectRecaptchaV2Token","PhoneAuthProvider","PhoneAuthProvider#constructor","PhoneAuthProvider#verifyPhoneNumber","PhoneAuthProvider.credential","PhoneAuthProvider.credentialFromResult","PhoneAuthProvider.credentialFromError","PhoneAuthProvider.credentialFromTaggedObject","_withDefaultResolver","IdpCredential","IdpCredential#constructor","IdpCredential#_getIdTokenResponse","IdpCredential#_linkToIdToken","IdpCredential#_getReauthenticationResolver","IdpCredential#_buildIdpRequest","_signIn","_reauth","_link","AbstractPopupRedirectOperation","AbstractPopupRedirectOperation#constructor","AbstractPopupRedirectOperation#execute","AbstractPopupRedirectOperation#onAuthEvent","AbstractPopupRedirectOperation#onError","AbstractPopupRedirectOperation#getIdpTask","AbstractPopupRedirectOperation#resolve","AbstractPopupRedirectOperation#reject","AbstractPopupRedirectOperation#unregisterAndCleanUp","signInWithPopup","reauthenticateWithPopup","linkWithPopup","PopupOperation","PopupOperation#constructor","PopupOperation#executeNotNull","PopupOperation#onExecution","resolver._originValidation._catch$argument_0","resolver._isIframeWebStorageSupported$argument_1","PopupOperation#get__eventId","PopupOperation#cancel","PopupOperation#cleanUp","PopupOperation#pollUserCancellation","poll","RedirectAction","RedirectAction#constructor","RedirectAction#execute","readyOutcome","redirectOutcomeMap.set$argument_1","RedirectAction#onAuthEvent","RedirectAction#onExecution","RedirectAction#cleanUp","_getAndClearPendingRedirectStatus","_setPendingRedirectStatus","_clearRedirectOutcomes","_overrideRedirectResult","resolverPersistence","pendingRedirectKey","signInWithRedirect","_signInWithRedirect","reauthenticateWithRedirect","_reauthenticateWithRedirect","linkWithRedirect","_linkWithRedirect","getRedirectResult","_getRedirectResult","prepareUserForRedirect","AuthEventManager","AuthEventManager#constructor","AuthEventManager#registerConsumer","AuthEventManager#unregisterConsumer","AuthEventManager#onEvent","consumers.forEach$argument_0","AuthEventManager#sendToConsumer","AuthEventManager#isEventForConsumer","AuthEventManager#hasEventBeenHandled","AuthEventManager#saveEventToCache","eventUid","isNullRedirectEvent","isRedirectEvent","_getProjectConfig","_validateOrigin","matchDomain","resetUnloadedGapiModules","loadGapi","loadGapiIframe","gapi.load$argument_1.callback","gapi.load$argument_1.ontimeout","_window.cbName","_loadGapi","getIframeUrl","_openIframe","context.open$argument_1","clearTimerAndResolve","iframe.ping.then$argument_1","AuthPopup","AuthPopup#constructor","AuthPopup#close","_open","Object.entries.reduce$argument_0","openAsNewWindowIOS","_getRedirectUrl","provider.getScopes.filter$argument_0","getHandlerBase","BrowserPopupRedirectResolver","BrowserPopupRedirectResolver#constructor","BrowserPopupRedirectResolver#_openPopup","BrowserPopupRedirectResolver#_openRedirect","BrowserPopupRedirectResolver#_initialize","promise._catch$argument_0","BrowserPopupRedirectResolver#initAndGetManager","iframe.register$argument_1","BrowserPopupRedirectResolver#_isIframeWebStorageSupported","iframe.send$argument_2","BrowserPopupRedirectResolver#_originValidation","BrowserPopupRedirectResolver#get___shouldInitProactively","MultiFactorAssertionImpl","MultiFactorAssertionImpl#constructor","MultiFactorAssertionImpl#_process","PhoneMultiFactorAssertionImpl","PhoneMultiFactorAssertionImpl#constructor","PhoneMultiFactorAssertionImpl._fromCredential","PhoneMultiFactorAssertionImpl#_finalizeEnroll","PhoneMultiFactorAssertionImpl#_finalizeSignIn","PhoneMultiFactorGenerator","PhoneMultiFactorGenerator#constructor","PhoneMultiFactorGenerator.assertion","TotpMultiFactorGenerator","TotpMultiFactorGenerator.assertionForEnrollment","TotpMultiFactorGenerator.assertionForSignIn","TotpMultiFactorGenerator.generateSecret","TotpMultiFactorAssertionImpl","TotpMultiFactorAssertionImpl#constructor","TotpMultiFactorAssertionImpl._fromSecret","TotpMultiFactorAssertionImpl._fromEnrollmentId","TotpMultiFactorAssertionImpl#_finalizeEnroll","TotpMultiFactorAssertionImpl#_finalizeSignIn","TotpSecret","TotpSecret#constructor","TotpSecret._fromStartTotpMfaEnrollmentResponse","TotpSecret#_makeTotpVerificationInfo","TotpSecret#generateQrCodeUrl","_isEmptyString","AuthInterop","AuthInterop#constructor","AuthInterop#getUid","AuthInterop#getToken","AuthInterop#addAuthTokenListener","auth.onIdTokenChanged$argument_0","AuthInterop#removeAuthTokenListener","AuthInterop#assertAuthConfigured","AuthInterop#updateProactiveRefresh","getVersionForPlatform","registerAuth","Component$argument_1","Component.setInstantiationMode.setInstanceCreatedCallback$argument_0","mintCookieFactory","getAuth","beforeAuthStateChanged$argument_2","onIdTokenChanged$argument_1","getScriptParentElement","_setExternalJSProvider$argument_0.loadJS","el.onerror"],"mappings":"AAA;ACwH;CDgK;AEC;CFS;AG0J;CHI;AIC;CJI;AKkB;CLE;AMC;CNE;AOC;CPS;AQC;CRE;ASC;CTS;AUC;CVU;AWC;CXI;AYO;CZS;AaQ;CbI;AckB;CdE;AeC;CfE;AgBC;ChBE;AiBqB;CjBe;AkBC;ClBa;AmBuB;ICC;KDM;IEC;KFU;CnBC;AsBkB;CtBO;AuBkB;ICC;KDQ;IEC;KFc;IGC;KHc;IIC;KJc;CvBC;A4ByH;C5BQ;A6BC;gECC;KDsC;C7BC;A+BC;C/BoD;AgCC;ChCQ;AiCC;CjCmB;AkCC;ClCW;AmCC;ICC;KDE;IEC;mCCM;oCCC;aDE;SDC;KFC;CnCC;AwCC;CxCc;AyCkB;CzCG;A0CC;C1CG;A2CC;ICC;KDe;IEO;KFY;IGO;KHI;IIO;KJG;C3CC;AgDkB;ChDE;AiDC;CjDE;AkDkB;ClDE;AmDC;CnDE;AoDC;CpDE;AqDkB;CrDiB;AsD8B;CtDE;AuDa;CvDgB;AwDC;CxDE;AyDC;CzDoB;A0DI;C1DM;A2DkB;C3De;A4DC;C5DG;A6DkB;ICC;KDS;IEC;KFM;IGC;KHQ;IIC;KJa;IKC;kC3BM;S2BE;KLC;IMC;KNa;C7DC;AoEkB;ICC;KDI;IEC;KFG;IGC;KHI;IIC;KJK;CpEC;AyEkB;CzEgC;A0EQ;C1EQ;A2EC;oCCC,mBC,kCD,CD;C3EE;A8EC;yBCC;KDS;C9EC;AgFkB;oElDC;KkDmB;ChFO;AiFC;CjFE;AkFwB;ICC;KDI;IEC;KFG;IGC;KHQ;IIC;KJI;IKC;KLU;IMC;KNE;IOC;KPG;IQC;KRI;ISC;KTsB;IUC;KVM;IWC;KXI;IYC;KZE;IaC;KbE;ClFC;AgGkB;ChGE;AiGC;ICC;KDmB;IEC;KFS;IGC;KHE;IIC;KJE;IKC;kDCY,6BD;KLG;IOC;KPQ;IQC;KRQ;ISC;KTQ;IUC;KVE;IWC;KXE;IYC;KZc;IaC;KbU;IcC;gDCU,6BD;KdY;IgBC;KhBE;IiBC;iDFsC,6BE;KjBM;IkBM;KlBa;ImBM;KnBgC;CjGC;AqHmB;CrHU;AsHkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJG;IKC;KLE;IMC;KNG;IOC;KPG;CtHC;A8HyB;C9HE;A+HC;ICC;KDS;IEC;KFE;IGC;sFCM,eD;KHO;IKC;KLE;IMC;KNE;IOC;KPU;IQC;KRE;ISC;kFCK;SDK,WE,0BF;iCLmB,eK;gEGoB,4BH;mDCc;SDO;KTE;C/HC;A4IqB;C5IiD;A6IC;C7IE;A8IC;C9IM;A+IC;C/IE;AgJC;ChJE;AiJC;CjJE;AkJC;ClJE;AmJC;CnJE;AoJC;CpJG;AqJC;CrJG;AsJC;CtJE;AuJC;CvJE;AwJC;CxJQ;AyJqB;CzJoB;A0JkB;ICC;KDG;IEC;gCCG,sBvH;SuHW,CD;eEK;gCCG,uBD;SFC;KFC;IMC;KNgC;C1JC;AiKyB;CjKE;AkKyB;ICC;KDoC;IEC;KFgB;IGO;KHS;IIO;KJmB;IKY;KLa;ClKC;AwKkB;ICC;wDnIuC,+DmI;KDC;IEC;iDCM;SD0B;KFE;III;KJqB;IKC;KLU;IMC;mCxIM;+BCC,2ED;iBwIC;8ECwC,uBD;KNoB;IQC;KR4B;ISC;KTa;IUC;KVE;IWC;KXE;IYC;KZa;IaC;0BVU;SUG;KbC;IcC;Kda;IeC;0BZI;SYE;KfC;IgBC;KhBO;IiBC;KjBa;IkBC;KlBO;ImBC;KnBS;IoBC;KpBE;IqBC;KrBE;IsBC;KtBE;IuBC;KvBE;IwBC;KxBE;IyBC;KzBE;I0BC;2B5JC;4D6JK;iB7JG;S4JE;K1BC;I4BI;K5Be;I6BC;K7BO;I8BC;K9BK;I+BC;K/BU;IgCC;6B7BI,e6B;KhCS;IiCC;8B9BE,6C8B;KjCE;IkCE;KlCI;ImCC;KnCE;IoCC;KpCK;IqCC;KrCK;IsCE;KtCE;IuCC;KvCU;IwCC;mBlDE,SkD;qBCY;SDK;mBlDG;akDG;mBlDI;akDG;KxCE;I0CM;K1Cc;I2CC;K3CK;I4CC;K5CG;I6CC;K7CS;I8CC;K9CE;I+CC;K/CuB;IgDC;KhDe;CxKC;AyNO;CzNE;A0NE;ICC;2CCG,sCD;KDC;IGC;KHG;C1NC;I8NmB;K9NE;A+NK;C/NE;AgOC;ChOE;AiOC;CjOE;AkOC;ClOE;AmOC;CnOE;AoOC;CpOE;AqOqB;ICC;KDI;IEC;KFK;IGC;KHI;IIC;KJG;IKC;KLI;CrOC;A2OC;ICC;KDE;IEC;KFE;IGC;KHI;IIC;KJI;C3OC;AgPC;ICC;KDE;IEC;KFI;IGC;KHI;ChPC;AoPC;ICC;4BCK;SDE;KDa;IGC;KHG;IIC;KJQ;IKC;yCCK;SDsB;KLC;IOC;KPI;CpPC;A4PC;C5PO;A6PK;ICM;KDM;IEM;QCC;+B1NU;0B2NK;iB3Nc;2B4NC;iB5NE;a0NC;SDC;QIC;4CCG;8BCG;qBDE;+BEC;qBFE;iBDC;SJK;2BzNM;sBiOE;8BCc;qBDE;+BEC;qBFE;ajOE;uBoOC;apOE;SyNC;KFC;C7PC;A2QC;C3QsD;A4QC;6DCS;aDS;0ECQ;aDoB;C5Qc;A8QC;C9QiB;A+Q2C;C/Qc;AgRC;ChRU;AiRwB;CjRuC;AkRC;ClRG;AmRC;CnRgB;AoRC;CpRS;AqRC;ICC;KDiB;CrRc;AuR0B;ICE;KDmB;IEM;KFE;IGE;KHE;IIE;KJE;IKE;KLE;CvRC;A6RkB;C7RE;A8RC;C9RE;A+RG;C/RE;AgSC;ChSE;AiSkB;CjSE;AkSC;ClSE;AmSC;CnSE;AoSC;CpSE;AqSC;CrSE;AsSC;CtSE;AuSkB;CvSE;AwSC;CxSE;AyS4B;ICE;KDW;IEE;KFE;IGE;KHE;IIE;KJO;IKS;KLW;IME;KNkB;IOE;KPoB;IQE;KRE;CzSC;AkTkB;ClTE;AmT2B;ICC;KDG;IEE;KF2B;IGE;KHU;IIU;KJa;IKE;KLG;IME;KNI;IOE;KPI;IQC;KR0B;CnTC;A4TkB;C5TE;A6TC;C7TE;A8TC;C9TM;A+TI;C/TM;AgUuB;ICC;KDG;IEE;KFE;IGE;KHE;IIE;KJE;IKE;KLK;IME;KNE;IOE;KPS;IQE;KRiB;ISE;KTiB;ChUC;A0UuB;C1UiB;A2UM;C3UY;A4UO;ICO;KDa;IEU;KFQ;C5UC;A+UO;C/UE;AgVuB;ICC;KDK;IEmB;KFE;IGuB;KHI;ChVC;AoVqC;ICM;KDM;IEM;KFE;IGW;KHG;III;KJE;CpVC;AyVwB;ICC;KDI;IEM;KFM;IGI;KHE;CzVC;A6VyC;ICK;KDI;IEsB;KFE;IGE;KHQ;IIM;KJE;IKO;KLE;IMC;KNyB;C7VC;AoWyD;ICC;KDE;IEa;KFM;IGM;KHE;IIO;KJE;IKC;KLa;CpWC;A0W+D;ICC;KDG;IEc;KFO;IGM;KHE;IIO;KJE;IKC;KLe;C1WC;AgXgE;ICC;KDE;IEM;KFM;IGM;KHE;IIO;KJE;IKC;KLa;ChXC;AsX0B;ICE;KDG;IEE;KFG;IGE;KHI;IIE;KJI;IKE;KLM;IMU;KNU;IOM;KPE;IQC;KRM;CtXC;A+XwB;ICK;KDG;IEiB;KFE;IGO;KHE;IIK;KJI;IKC;KLc;C/XC;AqYyD;ICC;KDE;IEO;KFO;IGM;KHE;IIO;KJE;IKC;KLc;CrYC;A2YsB;C3YE;A4YkB;ICC;KDK;IEC;KFU;IGC;KHS;C5YC;AgZC;ChZQ;AiZgC;CjZoB;AkZkB;ICC;KDY;IEC;KFE;ClZC;AqZC;iCCI;KDK;CrZC;AuZqB;avSE,8BuS;gBCC,YD;CvZC;AyZ0B;iECQ,sCD;CzZM;A2ZC;C3ZG;A4ZC;C5ZO;A6ZkB;C7ZsB;A8ZkB;C9ZW;A+Ze;C/ZE;AgaY;ChaI;AiaiB;CjaE;AkakB;ClaE;AmaqC;CnaY;AoakB;ICC;KDK;IEC;KFQ;CpaC;AuaC;ICC;KDG;IEC;KFE;CvaC;A0aC;ICC;KDE;IEC;KFE;C1aC;A6akB;C7aqB;A8a+B;C9aK;A+aoC;C/aW;AgbU;eCK;KDM;ChbE;AkbS;ClbE;AmbW;CnbwC;AobW;CpbI;AqbqB;gDCY;KDK;CrbI;AubwB;+GCI;KDK;CvbC;AybwD;ICO;KDK;CzbG;A2bS;C3bG;A4b0C;C5bU;A6bkB;C7bE;A8bsC;C9bW;A+b+B;C/bc;AgcmC;ChciB;AickB;CjcE;Akc0B;4DCgB,6CD;ClcM;AocyB;CpcM;Aqcc;CrcE;AscC;Ctce;AucsB;CvcuC;AwcC;ICC;KDI;CxcC;A0cC;ICC;KDG;C1cC;A4cC;ICC;KDE;C5cC;A8cC;ICC;KDE;C9cC;AgdC;ICC;KDE;ChdC;AkdC;ICC;KDE;CldC;AodQ;CpdY;Aqd2C;CrdE;Asd4B;CtdE;AudwB;CvdG;AwdiB;CxdE;AydW;CzdE;A0dgB;C1dE;A2dQ;C3dE;A4dsB;C5dE;A6dY;C7dE;A8dS;C9dG;A+da;C/dE;AgekB;ICC;KDI;IEC;KFE;IGC;KHE;IIC;KJS;IKC;KLU;CheC;AsekB;ICC;KDI;IEE;yDCG,uED;2DEG;SFuB;KFC;IKC;KLG;CteC;A4eW;C5eM;A6ekB;C7eE;A8eC;C9eE;A+eC;C/eE;AgfC;ChfE;AifC;CjfE;AkfE;ICC;uBCG;4DCE,4ED;SDE;KDC;IIC;KJE;IKC;KLE;IMC;KNW;IOC;+DCS,oCD;KPW;ClfC;A2fY;C3fM;A4fuB;ICC;KDG;IEC;KFY;IGC;KHG;IIC;KJG;IKC;KLG;IMC;KNE;C5fC;AmgBsB;ICC;ctWC,yBsW;iCCC,iDD;KDS;IGC;KHY;IIC;mCCG;aDE;iCEgB;SFU;KJc;IOC;KPQ;IQC;qCCE;mCJC;aIO;SDC;KRC;IUC;KVK;IWC;KXE;IYC;KZE;IaC;KbmB;IcC;KdW;IeE;KfG;IgBC;KhBI;IiBC;KjBG;CngBC;AqhB4B;CrhBI;AshBE;CthBM;AuhBC;ICC;KDG;IEE;KFO;IGI;KHQ;IIE;KJE;IKE;KLU;IME;gECa,eD;KNC;IQE;wBCM;yDCC,8BD;yDEI,8BF;aDI;gCIC,0DJ;qCnBK;SmBM;4BIC,6BJ;KRE;IaC;KbO;CvhBC;AqiB6B;ICC;cxYC,2BwY;KDC;IEC;KFG;IGC;KHG;CriBC;AyiB+B;oCCC;KDc;CziBC;A2iBsB;ICC;KDI;IEO;qDCI,+CD;KFO;IIC;KJE;IKW;kDCY,qDD;KLQ;IOQ;KPQ;IQQ;KRU;C3iBC;AojBmB;CpjBM;AqjBsB;ICC;KDG;IEM;KFM;IGc;2BlhBW;wCCG;aDE;gBmhBG;yDlhBS;6BkhBE;iBnhBa;SkhBS,UE;SFI;KHC;CrjBC;A2jBsB;C3jBE;A4jBC;C5jBE;A6jBkB;C7jBG;A8jBC;C9jBW;A+jBC;C/jBE;AgkBC;ChkBE;AikB4B;ICC;KDE;IEC;2B7hBC;qD8hBC;a9hBE;mD8hBC;a9hBE;S6hBC;KFC;CjkBC;AqkBC;CrkBI;AskBC;CtkBG;AukBC;uBjiBE;0C8hBC;S9hBE;kD8hBC;S9hBQ;4C8hBC;S9hBe;KiiBC;CvkBC;AwkBC;CxkBM;AykBC;CzkBI;A0kBC;C1kBG;A2kBG;ICC;yDCe,SD,EE,SF;KDC;IIC;KJM;IKC;KLkB;IMK;KNE;IOI;4ECG;SDK;+DCE;SDE;KPC;ISQ;KTgB;IUU;KVgB;IWC;KXY;IYC;KZQ;IaC;sCCC;oCCC,kCD;SDG;KbC;IgBC;6CDC,0BC;KhBG;IiBC;sCHC;oCCC,8BD;SGG;KjBC;IkBC;+CHE;SGG;KlB2B;ImBC;KnBQ;IoBC;qCnFE,wBmF;KpBC;IqBC;KrBK;IsBC;KtBU;IuBC;KvBU;C3kBC;AmmB0B;CnmBE;AomBC;CpmBE;AqmBC;CrmBE;AsmByB;ICC;KDS;IEC;2BlkBK;wDmkBC;ankBE;0CokBC;mCCW;iBDI;apkBG;+BskBM;atkBG;SkkBC;KFC;IOC;KPE;IQC;KRY;CtmBC;A+mBC;C/mBE;AgnBC;ICC;KDE;IEC,wBF;ChnBC;AmnB+B;ICoB;KD8B;IEM;2B/kBQ;gCglBC;ahlBM;S+kBK;KFC;IIM;4DCa;SDG;KJE;IME;KNK;IOI;8CCK;aDE;KPE;ISC;KTI;IUC;e/dC;8CgeC,2Bhe;S+dU;KVC;IYC;KZE;IaC;KbY;IcC;KdO;IeC;KfG;CnnBC;AmoBC;uB7lBE;mB8lBQ,e9lB;K6lBE,QE;KFK;CnoBC;AsoBkB;ICC;KDG;IEC;KFG;CtoBC;AyoBqC;sDCM,gDD;CzoBC;A2oBa;sDDI,8CC;C3oBC;A4oBgB;sDFM,wDE;C5oBC;A6oBK;0DCkC;iBDQ;6EEE;iBFE;0DGe;iBHQ;yEIE;iBJE;4DKS;aLQ;2EME;aNE;C7oBO;AopBwB;CppBM;AqpBE;CrpByC;AspBqC;ICK;KDI;IEkC;KFE;IG4B;KHE;IIK;KJG;IKiC;KLE;IMC;KNS;CtpBC;A6pB2B;C7pBM;A8pBkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJE;IKC;KLc;C9pBC;AoqBC;CpqBE;AqqBC;CrqBI;AsqBC;CtqBI;AuqBsB;ICC;KDQ;IEC;2BnoBC;SmoBU;KFC;IGC;KHqB;IIC;KJE;IKC;KLc;IMC;KNI;IOC;KPI;IQC;KRM;CvqBC;AgrBkD;ChrBS;AirB6B;CjrBS;AkrB0B;ClrBM;AmrBM;ICC;KDS;IEC;KFI;IGC;yDCa;SDE;8DEC;SFI;KHG;IMC;KNE;IOC;KPE;IQC;KRU;ISC;qBCC;gDncO;iBmcG;SDI;KTE;CnrBC;A8rByB;ICC;KDQ;IEK;+BCM,6BD;+BCG,uBD;qDEO,2BF;KFG;IKC;KLmB;IMC,uBN;IOC,aP;C9rBC;AssBC;CtsBS;AusBC;CvsBE;AwsBC;CxsBE;AysBC;CzsBE;A0sBC;C1sBE;A2sBC;C3sBE;A4sB8D;C5sBE;A6sBC;C7sBa;A8sBoC;C9sBE;A+sBC;C/sBe;AgtBgC;ChtBE;AitBC;CjtBa;AktB0C;CltBG;AmtBC;CntBc;AotBC;CptBM;AqtBqB;ICC;KDO;IEC;KFQ;IGC;KHE;IIC;+BCM;SDM;KJa;IMC;KNS;IOC;KPI;IQC;KRM;ISC;KTG;CrtBC;A+tBC;+DrlBC,MqlB;C/tBC;AguBC;ChuBG;AiuBC;CjuBW;AkuBkB;CluBE;AmuBoB;CnuBkB;AouBC;CpuB2B;AquBuB;CruBwB;AsuBC;uBhsBC;QisBE;0BCK;iBDE;2BEC;iBFS;SjsBG;gCosBiB;apsBS;uBskBG,ctkB;KgsBE,QjG;KiGI;CtuBC;A2uBE;C3uBG;A4uBsC;C5uBoB;A6uBC;OCU,wBxsB;uDmkBQ;SnkBE;QysBE;SzsBG;qE0sBG;S1sBE;KwsBC,CD;C7uBC;AivB4B;ICC;KDG;IEC;KFO;CjvBC;AovBC;yDCwB,mDD;CpvBe;AsvBC;CtvBO;AuvBoC;mDCuB,qBD;CvvBuB;AyvBC;CzvBK;A0vBuB;ICC;KDO;IEG;KFI;IGC;2BvtBI,SutB;KHC;IIC;sBCgB;SDE;KJE;IMC;qCCG;SDK;KNI;IQC;gFCE;SDM;KRC;IUC;KVM;IWC;KXG;C1vBC;AswBY;ICC;KDE;IEC;KFS;CtwBC;AywBO;ICC;KDG;IEE;KFE;IGE;KHM;IIE;KJK;CzwBC;A8wBM;ICC,iBD;IEW;KFE;C9wBC;AixBW;ICW;KDE;IEU;KFE;IGU;KHQ;CjxBC;AqxBK;ICC;KDK;IEE;KFE;IGE;KHE;IIE;KJO;IKE;KLQ;CrxBC;A2xBQ;ICE;KDQ;IEE;KFE;IGE;KHE;IIW;KJc;C3xBC;AgyBE;ChyBE;AiyBqB;ICC;KDG;IEC;KFG;IGC;KHQ;IIC;uDCK;SDE;KJG;IMC;KNS;IOC;KPE;IQC;KRO;CjyBC;A0yBkB;C1yBe;A2yBE;uECC;KDkB;oCEU;KFG;yFCC;gB9oBE,6B8oB;KDC;C3yBI;0B8yBqB,ShpB;C9JqB;A+yBS;qDCsB,kCD;mCEC,wBF;C/yBQ;AkzBC;ClzBE;ImzBE;2B7wBE;yB8wBI;a9wBI;S6wBI;KnzBC"},"hasCjsExports":false},"type":"js/module"}]}