{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.deepMerge = exports.deepClone = void 0;\n  exports.deepMergeObjects = deepMergeObjects;\n  exports.getObjectProperty = void 0;\n  exports.getResolvedTokenValueFromConfig = getResolvedTokenValueFromConfig;\n  exports.getTokenFromConfig = void 0;\n  exports.resolveAliasesFromConfig = resolveAliasesFromConfig;\n  exports.resolveStringToken = resolveStringToken;\n  exports.resolveTokensFromConfig = resolveTokensFromConfig;\n  exports.resolvedTokenization = resolvedTokenization;\n  exports.setObjectKeyValue = void 0;\n  const deepClone = obj => JSON.parse(JSON.stringify(obj));\n  exports.deepClone = deepClone;\n  const deepMerge = function () {\n    let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let source = arguments.length > 1 ? arguments[1] : undefined;\n    for (const key in source) {\n      if (source.hasOwnProperty(key)) {\n        if (typeof target[key] === 'object' && typeof source[key] === 'object') {\n          deepMerge(target[key], source[key]);\n        } else {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  exports.deepMerge = deepMerge;\n  const setObjectKeyValue = (obj, keys, value) => {\n    let current = obj;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (i === keys.length - 1) {\n        // we've reached the desired key, so update its value\n        current[key] = value;\n      } else {\n        // we're still traversing the object, so create the key if it doesn't exist\n        if (!current[key]) {\n          current[key] = {};\n        }\n        current = current[key];\n      }\n    }\n    return obj;\n  };\n  exports.setObjectKeyValue = setObjectKeyValue;\n  function deepMergeObjects() {\n    const isObject = obj => obj && typeof obj === 'object';\n    for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n      objects[_key] = arguments[_key];\n    }\n    return objects.reduce((prev, obj) => {\n      if (isObject(prev) && isObject(obj)) {\n        Object.keys(obj).forEach(key => {\n          if (isObject(obj[key])) {\n            if (!prev[key] || !isObject(prev[key])) {\n              prev[key] = {};\n            }\n            prev[key] = deepMerge(prev[key], obj[key]);\n          } else {\n            prev[key] = obj[key];\n          }\n        });\n      }\n      return prev;\n    }, {});\n  }\n  function resolvedTokenization(props, config) {\n    const aliasedResolvedProps = resolveAliasesFromConfig(config, props);\n    const newProps = resolveTokensFromConfig(config, aliasedResolvedProps);\n    return newProps;\n  }\n  function resolveAliasesFromConfig(config, props) {\n    const aliasResolvedProps = {};\n    Object.keys(props).map(key => {\n      var _config$aliases;\n      if (config !== null && config !== void 0 && (_config$aliases = config.aliases) !== null && _config$aliases !== void 0 && _config$aliases[key]) {\n        var _config$aliases2;\n        aliasResolvedProps[(_config$aliases2 = config.aliases) === null || _config$aliases2 === void 0 ? void 0 : _config$aliases2[key]] = props[key];\n      } else {\n        aliasResolvedProps[key] = props[key];\n      }\n    });\n    return aliasResolvedProps;\n  }\n  function resolveTokensFromConfig(config, props) {\n    let newProps = {};\n    Object.keys(props).map(prop => {\n      const value = props[prop];\n      newProps[prop] = getResolvedTokenValueFromConfig(config, props, prop, value);\n    });\n    // console.log('&&&&&', newProps);\n\n    return newProps;\n  }\n  function getResolvedTokenValueFromConfig(config, _props, prop, value) {\n    let resolvedTokenValue = getTokenFromConfig(config, prop, value);\n\n    // Special case for token ends with em on mobile\n    // This will work for lineHeight and letterSpacing\n    // console.log('hello from token ends with em on mobile', resolvedTokenValue);\n    // if (\n    //   typeof resolvedTokenValue === 'string' &&\n    //   resolvedTokenValue.endsWith('em') &&\n    //   Platform.OS !== 'web'\n    // ) {\n    //   const fontSize = getTokenFromConfig(config, 'fontSize', props?.fontSize);\n    //   resolvedTokenValue =\n    //     parseFloat(resolvedTokenValue) * parseFloat(fontSize ?? BASE_FONT_SIZE);\n    // }\n\n    return resolvedTokenValue;\n  }\n  const getTokenFromConfig = (config, prop, value) => {\n    const aliasTokenType = config.propertyTokenMap[prop];\n\n    // const tokenScale = config?.tokens?.[aliasTokenType];\n    let token;\n\n    // resolveStringToken(value, config, config.propertyTokenMap);\n    if (typeof value === 'string' && value.includes('$')) {\n      var _config$propertyResol;\n      if ((_config$propertyResol = config.propertyResolver) !== null && _config$propertyResol !== void 0 && _config$propertyResol[prop]) {\n        var _config$propertyResol2;\n        let transformer = (_config$propertyResol2 = config.propertyResolver) === null || _config$propertyResol2 === void 0 ? void 0 : _config$propertyResol2[prop];\n        token = transformer(value, function (value1) {\n          let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : aliasTokenType;\n          return resolveStringToken(value1, config, config.propertyTokenMap, prop, scale);\n        });\n      } else {\n        token = resolveStringToken(value, config, config.propertyTokenMap, prop);\n      }\n    } else {\n      var _config$propertyResol3;\n      if ((_config$propertyResol3 = config.propertyResolver) !== null && _config$propertyResol3 !== void 0 && _config$propertyResol3[prop]) {\n        var _config$propertyResol4;\n        let transformer = (_config$propertyResol4 = config.propertyResolver) === null || _config$propertyResol4 === void 0 ? void 0 : _config$propertyResol4[prop];\n        token = transformer(value, function (value) {\n          let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : aliasTokenType;\n          if (typeof value === 'string' && value.includes('$')) {\n            return resolveStringToken(value, config, config.propertyTokenMap, prop, scale);\n          } else {\n            return value;\n          }\n        });\n      } else {\n        token = value;\n      }\n      // console.log(token, typeof token, prop, '******');\n    }\n    return token;\n  };\n  exports.getTokenFromConfig = getTokenFromConfig;\n  function isNumeric(str) {\n    return typeof str === 'number' ? true : false;\n    // return /^[-+]?[0-9]*\\.?[0-9]+$/.test(str);\n  }\n  function resolveStringToken(string, config, tokenScaleMap, propName, scale) {\n    let typeofResult = 'string';\n    const token_scale = scale ?? tokenScaleMap[propName];\n    const splitTokenBySpace = string.split(' ');\n    const result = splitTokenBySpace.map(currentToken => {\n      let splitCurrentToken = currentToken.split('$');\n      if (currentToken.startsWith('$')) {\n        splitCurrentToken = splitCurrentToken.slice(1);\n      }\n      if (splitCurrentToken.length > 1) {\n        const tokenValue = getObjectProperty(config.tokens, splitCurrentToken);\n        typeofResult = typeof tokenValue;\n        return tokenValue;\n      } else {\n        if (tokenScaleMap[propName]) {\n          if (!config || !config.tokens) {\n            throw new Error('You cannot use tokens without wrapping the component with StyledProvider. Please wrap the component with a StyledProvider and pass theme config.');\n          }\n          if (config !== null && config !== void 0 && config.tokens[token_scale] && config !== null && config !== void 0 && config.tokens[token_scale].hasOwnProperty(splitCurrentToken[0])) {\n            const tokenValue = config === null || config === void 0 ? void 0 : config.tokens[token_scale][splitCurrentToken[0]];\n            typeofResult = typeof tokenValue;\n            if (typeof tokenValue !== 'undefined' && tokenValue !== null) {\n              return tokenValue;\n            } else {\n              return '';\n            }\n          }\n        }\n        return splitCurrentToken[splitCurrentToken.length - 1];\n      }\n    });\n    let finalResult = result;\n    if (finalResult === '') {\n      return undefined;\n    } else {\n      finalResult = result.join(' ');\n      if (isNumeric(finalResult) || typeofResult === 'number') {\n        return parseFloat(finalResult);\n      } else {\n        return finalResult;\n      }\n    }\n  }\n  const getObjectProperty = (object, keyPath) => {\n    if (!Array.isArray(keyPath)) {\n      keyPath = [keyPath];\n    }\n    return keyPath.reduce((baseObj, key) => baseObj && baseObj[key], object);\n  };\n  exports.getObjectProperty = getObjectProperty;\n});","lineCount":213,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"deepMerge"],[7,19,6,17],[7,22,6,20,"exports"],[7,29,6,27],[7,30,6,28,"deepClone"],[7,39,6,37],[7,42,6,40],[7,47,6,45],[7,48,6,46],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"deepMergeObjects"],[8,26,7,24],[8,29,7,27,"deepMergeObjects"],[8,45,7,43],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"getObjectProperty"],[9,27,8,25],[9,30,8,28],[9,35,8,33],[9,36,8,34],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"getResolvedTokenValueFromConfig"],[10,41,9,39],[10,44,9,42,"getResolvedTokenValueFromConfig"],[10,75,9,73],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"getTokenFromConfig"],[11,28,10,26],[11,31,10,29],[11,36,10,34],[11,37,10,35],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"resolveAliasesFromConfig"],[12,34,11,32],[12,37,11,35,"resolveAliasesFromConfig"],[12,61,11,59],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"resolveStringToken"],[13,28,12,26],[13,31,12,29,"resolveStringToken"],[13,49,12,47],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"resolveTokensFromConfig"],[14,33,13,31],[14,36,13,34,"resolveTokensFromConfig"],[14,59,13,57],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"resolvedTokenization"],[15,30,14,28],[15,33,14,31,"resolvedTokenization"],[15,53,14,51],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"setObjectKeyValue"],[16,27,15,25],[16,30,15,28],[16,35,15,33],[16,36,15,34],[17,2,16,0],[17,8,16,6,"deepClone"],[17,17,16,15],[17,20,16,18,"obj"],[17,23,16,21],[17,27,16,25,"JSON"],[17,31,16,29],[17,32,16,30,"parse"],[17,37,16,35],[17,38,16,36,"JSON"],[17,42,16,40],[17,43,16,41,"stringify"],[17,52,16,50],[17,53,16,51,"obj"],[17,56,16,54],[17,57,16,55],[17,58,16,56],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"deepClone"],[18,19,17,17],[18,22,17,20,"deepClone"],[18,31,17,29],[19,2,18,0],[19,8,18,6,"deepMerge"],[19,17,18,15],[19,20,18,18],[19,29,18,18,"deepMerge"],[19,30,18,18],[19,32,18,30],[20,4,19,2],[20,8,19,6,"target"],[20,14,19,12],[20,17,19,15,"arguments"],[20,26,19,24],[20,27,19,25,"length"],[20,33,19,31],[20,36,19,34],[20,37,19,35],[20,41,19,39,"arguments"],[20,50,19,48],[20,51,19,49],[20,52,19,50],[20,53,19,51],[20,58,19,56,"undefined"],[20,67,19,65],[20,70,19,68,"arguments"],[20,79,19,77],[20,80,19,78],[20,81,19,79],[20,82,19,80],[20,85,19,83],[20,86,19,84],[20,87,19,85],[21,4,20,2],[21,8,20,6,"source"],[21,14,20,12],[21,17,20,15,"arguments"],[21,26,20,24],[21,27,20,25,"length"],[21,33,20,31],[21,36,20,34],[21,37,20,35],[21,40,20,38,"arguments"],[21,49,20,47],[21,50,20,48],[21,51,20,49],[21,52,20,50],[21,55,20,53,"undefined"],[21,64,20,62],[22,4,21,2],[22,9,21,7],[22,15,21,13,"key"],[22,18,21,16],[22,22,21,20,"source"],[22,28,21,26],[22,30,21,28],[23,6,22,4],[23,10,22,8,"source"],[23,16,22,14],[23,17,22,15,"hasOwnProperty"],[23,31,22,29],[23,32,22,30,"key"],[23,35,22,33],[23,36,22,34],[23,38,22,36],[24,8,23,6],[24,12,23,10],[24,19,23,17,"target"],[24,25,23,23],[24,26,23,24,"key"],[24,29,23,27],[24,30,23,28],[24,35,23,33],[24,43,23,41],[24,47,23,45],[24,54,23,52,"source"],[24,60,23,58],[24,61,23,59,"key"],[24,64,23,62],[24,65,23,63],[24,70,23,68],[24,78,23,76],[24,80,23,78],[25,10,24,8,"deepMerge"],[25,19,24,17],[25,20,24,18,"target"],[25,26,24,24],[25,27,24,25,"key"],[25,30,24,28],[25,31,24,29],[25,33,24,31,"source"],[25,39,24,37],[25,40,24,38,"key"],[25,43,24,41],[25,44,24,42],[25,45,24,43],[26,8,25,6],[26,9,25,7],[26,15,25,13],[27,10,26,8,"target"],[27,16,26,14],[27,17,26,15,"key"],[27,20,26,18],[27,21,26,19],[27,24,26,22,"source"],[27,30,26,28],[27,31,26,29,"key"],[27,34,26,32],[27,35,26,33],[28,8,27,6],[29,6,28,4],[30,4,29,2],[31,4,30,2],[31,11,30,9,"target"],[31,17,30,15],[32,2,31,0],[32,3,31,1],[33,2,32,0,"exports"],[33,9,32,7],[33,10,32,8,"deepMerge"],[33,19,32,17],[33,22,32,20,"deepMerge"],[33,31,32,29],[34,2,33,0],[34,8,33,6,"setObjectKeyValue"],[34,25,33,23],[34,28,33,26,"setObjectKeyValue"],[34,29,33,27,"obj"],[34,32,33,30],[34,34,33,32,"keys"],[34,38,33,36],[34,40,33,38,"value"],[34,45,33,43],[34,50,33,48],[35,4,34,2],[35,8,34,6,"current"],[35,15,34,13],[35,18,34,16,"obj"],[35,21,34,19],[36,4,35,2],[36,9,35,7],[36,13,35,11,"i"],[36,14,35,12],[36,17,35,15],[36,18,35,16],[36,20,35,18,"i"],[36,21,35,19],[36,24,35,22,"keys"],[36,28,35,26],[36,29,35,27,"length"],[36,35,35,33],[36,37,35,35,"i"],[36,38,35,36],[36,40,35,38],[36,42,35,40],[37,6,36,4],[37,12,36,10,"key"],[37,15,36,13],[37,18,36,16,"keys"],[37,22,36,20],[37,23,36,21,"i"],[37,24,36,22],[37,25,36,23],[38,6,37,4],[38,10,37,8,"i"],[38,11,37,9],[38,16,37,14,"keys"],[38,20,37,18],[38,21,37,19,"length"],[38,27,37,25],[38,30,37,28],[38,31,37,29],[38,33,37,31],[39,8,38,6],[40,8,39,6,"current"],[40,15,39,13],[40,16,39,14,"key"],[40,19,39,17],[40,20,39,18],[40,23,39,21,"value"],[40,28,39,26],[41,6,40,4],[41,7,40,5],[41,13,40,11],[42,8,41,6],[43,8,42,6],[43,12,42,10],[43,13,42,11,"current"],[43,20,42,18],[43,21,42,19,"key"],[43,24,42,22],[43,25,42,23],[43,27,42,25],[44,10,43,8,"current"],[44,17,43,15],[44,18,43,16,"key"],[44,21,43,19],[44,22,43,20],[44,25,43,23],[44,26,43,24],[44,27,43,25],[45,8,44,6],[46,8,45,6,"current"],[46,15,45,13],[46,18,45,16,"current"],[46,25,45,23],[46,26,45,24,"key"],[46,29,45,27],[46,30,45,28],[47,6,46,4],[48,4,47,2],[49,4,48,2],[49,11,48,9,"obj"],[49,14,48,12],[50,2,49,0],[50,3,49,1],[51,2,50,0,"exports"],[51,9,50,7],[51,10,50,8,"setObjectKeyValue"],[51,27,50,25],[51,30,50,28,"setObjectKeyValue"],[51,47,50,45],[52,2,51,0],[52,11,51,9,"deepMergeObjects"],[52,27,51,25,"deepMergeObjects"],[52,28,51,25],[52,30,51,28],[53,4,52,2],[53,10,52,8,"isObject"],[53,18,52,16],[53,21,52,19,"obj"],[53,24,52,22],[53,28,52,26,"obj"],[53,31,52,29],[53,35,52,33],[53,42,52,40,"obj"],[53,45,52,43],[53,50,52,48],[53,58,52,56],[54,4,53,2],[54,9,53,7],[54,13,53,11,"_len"],[54,17,53,15],[54,20,53,18,"arguments"],[54,29,53,27],[54,30,53,28,"length"],[54,36,53,34],[54,38,53,36,"objects"],[54,45,53,43],[54,48,53,46],[54,52,53,50,"Array"],[54,57,53,55],[54,58,53,56,"_len"],[54,62,53,60],[54,63,53,61],[54,65,53,63,"_key"],[54,69,53,67],[54,72,53,70],[54,73,53,71],[54,75,53,73,"_key"],[54,79,53,77],[54,82,53,80,"_len"],[54,86,53,84],[54,88,53,86,"_key"],[54,92,53,90],[54,94,53,92],[54,96,53,94],[55,6,54,4,"objects"],[55,13,54,11],[55,14,54,12,"_key"],[55,18,54,16],[55,19,54,17],[55,22,54,20,"arguments"],[55,31,54,29],[55,32,54,30,"_key"],[55,36,54,34],[55,37,54,35],[56,4,55,2],[57,4,56,2],[57,11,56,9,"objects"],[57,18,56,16],[57,19,56,17,"reduce"],[57,25,56,23],[57,26,56,24],[57,27,56,25,"prev"],[57,31,56,29],[57,33,56,31,"obj"],[57,36,56,34],[57,41,56,39],[58,6,57,4],[58,10,57,8,"isObject"],[58,18,57,16],[58,19,57,17,"prev"],[58,23,57,21],[58,24,57,22],[58,28,57,26,"isObject"],[58,36,57,34],[58,37,57,35,"obj"],[58,40,57,38],[58,41,57,39],[58,43,57,41],[59,8,58,6,"Object"],[59,14,58,12],[59,15,58,13,"keys"],[59,19,58,17],[59,20,58,18,"obj"],[59,23,58,21],[59,24,58,22],[59,25,58,23,"forEach"],[59,32,58,30],[59,33,58,31,"key"],[59,36,58,34],[59,40,58,38],[60,10,59,8],[60,14,59,12,"isObject"],[60,22,59,20],[60,23,59,21,"obj"],[60,26,59,24],[60,27,59,25,"key"],[60,30,59,28],[60,31,59,29],[60,32,59,30],[60,34,59,32],[61,12,60,10],[61,16,60,14],[61,17,60,15,"prev"],[61,21,60,19],[61,22,60,20,"key"],[61,25,60,23],[61,26,60,24],[61,30,60,28],[61,31,60,29,"isObject"],[61,39,60,37],[61,40,60,38,"prev"],[61,44,60,42],[61,45,60,43,"key"],[61,48,60,46],[61,49,60,47],[61,50,60,48],[61,52,60,50],[62,14,61,12,"prev"],[62,18,61,16],[62,19,61,17,"key"],[62,22,61,20],[62,23,61,21],[62,26,61,24],[62,27,61,25],[62,28,61,26],[63,12,62,10],[64,12,63,10,"prev"],[64,16,63,14],[64,17,63,15,"key"],[64,20,63,18],[64,21,63,19],[64,24,63,22,"deepMerge"],[64,33,63,31],[64,34,63,32,"prev"],[64,38,63,36],[64,39,63,37,"key"],[64,42,63,40],[64,43,63,41],[64,45,63,43,"obj"],[64,48,63,46],[64,49,63,47,"key"],[64,52,63,50],[64,53,63,51],[64,54,63,52],[65,10,64,8],[65,11,64,9],[65,17,64,15],[66,12,65,10,"prev"],[66,16,65,14],[66,17,65,15,"key"],[66,20,65,18],[66,21,65,19],[66,24,65,22,"obj"],[66,27,65,25],[66,28,65,26,"key"],[66,31,65,29],[66,32,65,30],[67,10,66,8],[68,8,67,6],[68,9,67,7],[68,10,67,8],[69,6,68,4],[70,6,69,4],[70,13,69,11,"prev"],[70,17,69,15],[71,4,70,2],[71,5,70,3],[71,7,70,5],[71,8,70,6],[71,9,70,7],[71,10,70,8],[72,2,71,0],[73,2,72,0],[73,11,72,9,"resolvedTokenization"],[73,31,72,29,"resolvedTokenization"],[73,32,72,30,"props"],[73,37,72,35],[73,39,72,37,"config"],[73,45,72,43],[73,47,72,45],[74,4,73,2],[74,10,73,8,"aliasedResolvedProps"],[74,30,73,28],[74,33,73,31,"resolveAliasesFromConfig"],[74,57,73,55],[74,58,73,56,"config"],[74,64,73,62],[74,66,73,64,"props"],[74,71,73,69],[74,72,73,70],[75,4,74,2],[75,10,74,8,"newProps"],[75,18,74,16],[75,21,74,19,"resolveTokensFromConfig"],[75,44,74,42],[75,45,74,43,"config"],[75,51,74,49],[75,53,74,51,"aliasedResolvedProps"],[75,73,74,71],[75,74,74,72],[76,4,75,2],[76,11,75,9,"newProps"],[76,19,75,17],[77,2,76,0],[78,2,77,0],[78,11,77,9,"resolveAliasesFromConfig"],[78,35,77,33,"resolveAliasesFromConfig"],[78,36,77,34,"config"],[78,42,77,40],[78,44,77,42,"props"],[78,49,77,47],[78,51,77,49],[79,4,78,2],[79,10,78,8,"aliasResolvedProps"],[79,28,78,26],[79,31,78,29],[79,32,78,30],[79,33,78,31],[80,4,79,2,"Object"],[80,10,79,8],[80,11,79,9,"keys"],[80,15,79,13],[80,16,79,14,"props"],[80,21,79,19],[80,22,79,20],[80,23,79,21,"map"],[80,26,79,24],[80,27,79,25,"key"],[80,30,79,28],[80,34,79,32],[81,6,80,4],[81,10,80,8,"_config$aliases"],[81,25,80,23],[82,6,81,4],[82,10,81,8,"config"],[82,16,81,14],[82,21,81,19],[82,25,81,23],[82,29,81,27,"config"],[82,35,81,33],[82,40,81,38],[82,45,81,43],[82,46,81,44],[82,50,81,48],[82,51,81,49,"_config$aliases"],[82,66,81,64],[82,69,81,67,"config"],[82,75,81,73],[82,76,81,74,"aliases"],[82,83,81,81],[82,89,81,87],[82,93,81,91],[82,97,81,95,"_config$aliases"],[82,112,81,110],[82,117,81,115],[82,122,81,120],[82,123,81,121],[82,127,81,125,"_config$aliases"],[82,142,81,140],[82,143,81,141,"key"],[82,146,81,144],[82,147,81,145],[82,149,81,147],[83,8,82,6],[83,12,82,10,"_config$aliases2"],[83,28,82,26],[84,8,83,6,"aliasResolvedProps"],[84,26,83,24],[84,27,83,25],[84,28,83,26,"_config$aliases2"],[84,44,83,42],[84,47,83,45,"config"],[84,53,83,51],[84,54,83,52,"aliases"],[84,61,83,59],[84,67,83,65],[84,71,83,69],[84,75,83,73,"_config$aliases2"],[84,91,83,89],[84,96,83,94],[84,101,83,99],[84,102,83,100],[84,105,83,103],[84,110,83,108],[84,111,83,109],[84,114,83,112,"_config$aliases2"],[84,130,83,128],[84,131,83,129,"key"],[84,134,83,132],[84,135,83,133],[84,136,83,134],[84,139,83,137,"props"],[84,144,83,142],[84,145,83,143,"key"],[84,148,83,146],[84,149,83,147],[85,6,84,4],[85,7,84,5],[85,13,84,11],[86,8,85,6,"aliasResolvedProps"],[86,26,85,24],[86,27,85,25,"key"],[86,30,85,28],[86,31,85,29],[86,34,85,32,"props"],[86,39,85,37],[86,40,85,38,"key"],[86,43,85,41],[86,44,85,42],[87,6,86,4],[88,4,87,2],[88,5,87,3],[88,6,87,4],[89,4,88,2],[89,11,88,9,"aliasResolvedProps"],[89,29,88,27],[90,2,89,0],[91,2,90,0],[91,11,90,9,"resolveTokensFromConfig"],[91,34,90,32,"resolveTokensFromConfig"],[91,35,90,33,"config"],[91,41,90,39],[91,43,90,41,"props"],[91,48,90,46],[91,50,90,48],[92,4,91,2],[92,8,91,6,"newProps"],[92,16,91,14],[92,19,91,17],[92,20,91,18],[92,21,91,19],[93,4,92,2,"Object"],[93,10,92,8],[93,11,92,9,"keys"],[93,15,92,13],[93,16,92,14,"props"],[93,21,92,19],[93,22,92,20],[93,23,92,21,"map"],[93,26,92,24],[93,27,92,25,"prop"],[93,31,92,29],[93,35,92,33],[94,6,93,4],[94,12,93,10,"value"],[94,17,93,15],[94,20,93,18,"props"],[94,25,93,23],[94,26,93,24,"prop"],[94,30,93,28],[94,31,93,29],[95,6,94,4,"newProps"],[95,14,94,12],[95,15,94,13,"prop"],[95,19,94,17],[95,20,94,18],[95,23,94,21,"getResolvedTokenValueFromConfig"],[95,54,94,52],[95,55,94,53,"config"],[95,61,94,59],[95,63,94,61,"props"],[95,68,94,66],[95,70,94,68,"prop"],[95,74,94,72],[95,76,94,74,"value"],[95,81,94,79],[95,82,94,80],[96,4,95,2],[96,5,95,3],[96,6,95,4],[97,4,96,2],[99,4,98,2],[99,11,98,9,"newProps"],[99,19,98,17],[100,2,99,0],[101,2,100,0],[101,11,100,9,"getResolvedTokenValueFromConfig"],[101,42,100,40,"getResolvedTokenValueFromConfig"],[101,43,100,41,"config"],[101,49,100,47],[101,51,100,49,"_props"],[101,57,100,55],[101,59,100,57,"prop"],[101,63,100,61],[101,65,100,63,"value"],[101,70,100,68],[101,72,100,70],[102,4,101,2],[102,8,101,6,"resolvedTokenValue"],[102,26,101,24],[102,29,101,27,"getTokenFromConfig"],[102,47,101,45],[102,48,101,46,"config"],[102,54,101,52],[102,56,101,54,"prop"],[102,60,101,58],[102,62,101,60,"value"],[102,67,101,65],[102,68,101,66],[104,4,103,2],[105,4,104,2],[106,4,105,2],[107,4,106,2],[108,4,107,2],[109,4,108,2],[110,4,109,2],[111,4,110,2],[112,4,111,2],[113,4,112,2],[114,4,113,2],[115,4,114,2],[117,4,116,2],[117,11,116,9,"resolvedTokenValue"],[117,29,116,27],[118,2,117,0],[119,2,118,0],[119,8,118,6,"getTokenFromConfig"],[119,26,118,24],[119,29,118,27,"getTokenFromConfig"],[119,30,118,28,"config"],[119,36,118,34],[119,38,118,36,"prop"],[119,42,118,40],[119,44,118,42,"value"],[119,49,118,47],[119,54,118,52],[120,4,119,2],[120,10,119,8,"aliasTokenType"],[120,24,119,22],[120,27,119,25,"config"],[120,33,119,31],[120,34,119,32,"propertyTokenMap"],[120,50,119,48],[120,51,119,49,"prop"],[120,55,119,53],[120,56,119,54],[122,4,121,2],[123,4,122,2],[123,8,122,6,"token"],[123,13,122,11],[125,4,124,2],[126,4,125,2],[126,8,125,6],[126,15,125,13,"value"],[126,20,125,18],[126,25,125,23],[126,33,125,31],[126,37,125,35,"value"],[126,42,125,40],[126,43,125,41,"includes"],[126,51,125,49],[126,52,125,50],[126,55,125,53],[126,56,125,54],[126,58,125,56],[127,6,126,4],[127,10,126,8,"_config$propertyResol"],[127,31,126,29],[128,6,127,4],[128,10,127,8],[128,11,127,9,"_config$propertyResol"],[128,32,127,30],[128,35,127,33,"config"],[128,41,127,39],[128,42,127,40,"propertyResolver"],[128,58,127,56],[128,64,127,62],[128,68,127,66],[128,72,127,70,"_config$propertyResol"],[128,93,127,91],[128,98,127,96],[128,103,127,101],[128,104,127,102],[128,108,127,106,"_config$propertyResol"],[128,129,127,127],[128,130,127,128,"prop"],[128,134,127,132],[128,135,127,133],[128,137,127,135],[129,8,128,6],[129,12,128,10,"_config$propertyResol2"],[129,34,128,32],[130,8,129,6],[130,12,129,10,"transformer"],[130,23,129,21],[130,26,129,24],[130,27,129,25,"_config$propertyResol2"],[130,49,129,47],[130,52,129,50,"config"],[130,58,129,56],[130,59,129,57,"propertyResolver"],[130,75,129,73],[130,81,129,79],[130,85,129,83],[130,89,129,87,"_config$propertyResol2"],[130,111,129,109],[130,116,129,114],[130,121,129,119],[130,122,129,120],[130,125,129,123],[130,130,129,128],[130,131,129,129],[130,134,129,132,"_config$propertyResol2"],[130,156,129,154],[130,157,129,155,"prop"],[130,161,129,159],[130,162,129,160],[131,8,130,6,"token"],[131,13,130,11],[131,16,130,14,"transformer"],[131,27,130,25],[131,28,130,26,"value"],[131,33,130,31],[131,35,130,33],[131,45,130,43,"value1"],[131,51,130,49],[131,53,130,51],[132,10,131,8],[132,14,131,12,"scale"],[132,19,131,17],[132,22,131,20,"arguments"],[132,31,131,29],[132,32,131,30,"length"],[132,38,131,36],[132,41,131,39],[132,42,131,40],[132,46,131,44,"arguments"],[132,55,131,53],[132,56,131,54],[132,57,131,55],[132,58,131,56],[132,63,131,61,"undefined"],[132,72,131,70],[132,75,131,73,"arguments"],[132,84,131,82],[132,85,131,83],[132,86,131,84],[132,87,131,85],[132,90,131,88,"aliasTokenType"],[132,104,131,102],[133,10,132,8],[133,17,132,15,"resolveStringToken"],[133,35,132,33],[133,36,132,34,"value1"],[133,42,132,40],[133,44,132,42,"config"],[133,50,132,48],[133,52,132,50,"config"],[133,58,132,56],[133,59,132,57,"propertyTokenMap"],[133,75,132,73],[133,77,132,75,"prop"],[133,81,132,79],[133,83,132,81,"scale"],[133,88,132,86],[133,89,132,87],[134,8,133,6],[134,9,133,7],[134,10,133,8],[135,6,134,4],[135,7,134,5],[135,13,134,11],[136,8,135,6,"token"],[136,13,135,11],[136,16,135,14,"resolveStringToken"],[136,34,135,32],[136,35,135,33,"value"],[136,40,135,38],[136,42,135,40,"config"],[136,48,135,46],[136,50,135,48,"config"],[136,56,135,54],[136,57,135,55,"propertyTokenMap"],[136,73,135,71],[136,75,135,73,"prop"],[136,79,135,77],[136,80,135,78],[137,6,136,4],[138,4,137,2],[138,5,137,3],[138,11,137,9],[139,6,138,4],[139,10,138,8,"_config$propertyResol3"],[139,32,138,30],[140,6,139,4],[140,10,139,8],[140,11,139,9,"_config$propertyResol3"],[140,33,139,31],[140,36,139,34,"config"],[140,42,139,40],[140,43,139,41,"propertyResolver"],[140,59,139,57],[140,65,139,63],[140,69,139,67],[140,73,139,71,"_config$propertyResol3"],[140,95,139,93],[140,100,139,98],[140,105,139,103],[140,106,139,104],[140,110,139,108,"_config$propertyResol3"],[140,132,139,130],[140,133,139,131,"prop"],[140,137,139,135],[140,138,139,136],[140,140,139,138],[141,8,140,6],[141,12,140,10,"_config$propertyResol4"],[141,34,140,32],[142,8,141,6],[142,12,141,10,"transformer"],[142,23,141,21],[142,26,141,24],[142,27,141,25,"_config$propertyResol4"],[142,49,141,47],[142,52,141,50,"config"],[142,58,141,56],[142,59,141,57,"propertyResolver"],[142,75,141,73],[142,81,141,79],[142,85,141,83],[142,89,141,87,"_config$propertyResol4"],[142,111,141,109],[142,116,141,114],[142,121,141,119],[142,122,141,120],[142,125,141,123],[142,130,141,128],[142,131,141,129],[142,134,141,132,"_config$propertyResol4"],[142,156,141,154],[142,157,141,155,"prop"],[142,161,141,159],[142,162,141,160],[143,8,142,6,"token"],[143,13,142,11],[143,16,142,14,"transformer"],[143,27,142,25],[143,28,142,26,"value"],[143,33,142,31],[143,35,142,33],[143,45,142,43,"value"],[143,50,142,48],[143,52,142,50],[144,10,143,8],[144,14,143,12,"scale"],[144,19,143,17],[144,22,143,20,"arguments"],[144,31,143,29],[144,32,143,30,"length"],[144,38,143,36],[144,41,143,39],[144,42,143,40],[144,46,143,44,"arguments"],[144,55,143,53],[144,56,143,54],[144,57,143,55],[144,58,143,56],[144,63,143,61,"undefined"],[144,72,143,70],[144,75,143,73,"arguments"],[144,84,143,82],[144,85,143,83],[144,86,143,84],[144,87,143,85],[144,90,143,88,"aliasTokenType"],[144,104,143,102],[145,10,144,8],[145,14,144,12],[145,21,144,19,"value"],[145,26,144,24],[145,31,144,29],[145,39,144,37],[145,43,144,41,"value"],[145,48,144,46],[145,49,144,47,"includes"],[145,57,144,55],[145,58,144,56],[145,61,144,59],[145,62,144,60],[145,64,144,62],[146,12,145,10],[146,19,145,17,"resolveStringToken"],[146,37,145,35],[146,38,145,36,"value"],[146,43,145,41],[146,45,145,43,"config"],[146,51,145,49],[146,53,145,51,"config"],[146,59,145,57],[146,60,145,58,"propertyTokenMap"],[146,76,145,74],[146,78,145,76,"prop"],[146,82,145,80],[146,84,145,82,"scale"],[146,89,145,87],[146,90,145,88],[147,10,146,8],[147,11,146,9],[147,17,146,15],[148,12,147,10],[148,19,147,17,"value"],[148,24,147,22],[149,10,148,8],[150,8,149,6],[150,9,149,7],[150,10,149,8],[151,6,150,4],[151,7,150,5],[151,13,150,11],[152,8,151,6,"token"],[152,13,151,11],[152,16,151,14,"value"],[152,21,151,19],[153,6,152,4],[154,6,153,4],[155,4,154,2],[156,4,155,2],[156,11,155,9,"token"],[156,16,155,14],[157,2,156,0],[157,3,156,1],[158,2,157,0,"exports"],[158,9,157,7],[158,10,157,8,"getTokenFromConfig"],[158,28,157,26],[158,31,157,29,"getTokenFromConfig"],[158,49,157,47],[159,2,158,0],[159,11,158,9,"isNumeric"],[159,20,158,18,"isNumeric"],[159,21,158,19,"str"],[159,24,158,22],[159,26,158,24],[160,4,159,2],[160,11,159,9],[160,18,159,16,"str"],[160,21,159,19],[160,26,159,24],[160,34,159,32],[160,37,159,35],[160,41,159,39],[160,44,159,42],[160,49,159,47],[161,4,160,2],[162,2,161,0],[163,2,162,0],[163,11,162,9,"resolveStringToken"],[163,29,162,27,"resolveStringToken"],[163,30,162,28,"string"],[163,36,162,34],[163,38,162,36,"config"],[163,44,162,42],[163,46,162,44,"tokenScaleMap"],[163,59,162,57],[163,61,162,59,"propName"],[163,69,162,67],[163,71,162,69,"scale"],[163,76,162,74],[163,78,162,76],[164,4,163,2],[164,8,163,6,"typeofResult"],[164,20,163,18],[164,23,163,21],[164,31,163,29],[165,4,164,2],[165,10,164,8,"token_scale"],[165,21,164,19],[165,24,164,22,"scale"],[165,29,164,27],[165,33,164,31,"tokenScaleMap"],[165,46,164,44],[165,47,164,45,"propName"],[165,55,164,53],[165,56,164,54],[166,4,165,2],[166,10,165,8,"splitTokenBySpace"],[166,27,165,25],[166,30,165,28,"string"],[166,36,165,34],[166,37,165,35,"split"],[166,42,165,40],[166,43,165,41],[166,46,165,44],[166,47,165,45],[167,4,166,2],[167,10,166,8,"result"],[167,16,166,14],[167,19,166,17,"splitTokenBySpace"],[167,36,166,34],[167,37,166,35,"map"],[167,40,166,38],[167,41,166,39,"currentToken"],[167,53,166,51],[167,57,166,55],[168,6,167,4],[168,10,167,8,"splitCurrentToken"],[168,27,167,25],[168,30,167,28,"currentToken"],[168,42,167,40],[168,43,167,41,"split"],[168,48,167,46],[168,49,167,47],[168,52,167,50],[168,53,167,51],[169,6,168,4],[169,10,168,8,"currentToken"],[169,22,168,20],[169,23,168,21,"startsWith"],[169,33,168,31],[169,34,168,32],[169,37,168,35],[169,38,168,36],[169,40,168,38],[170,8,169,6,"splitCurrentToken"],[170,25,169,23],[170,28,169,26,"splitCurrentToken"],[170,45,169,43],[170,46,169,44,"slice"],[170,51,169,49],[170,52,169,50],[170,53,169,51],[170,54,169,52],[171,6,170,4],[172,6,171,4],[172,10,171,8,"splitCurrentToken"],[172,27,171,25],[172,28,171,26,"length"],[172,34,171,32],[172,37,171,35],[172,38,171,36],[172,40,171,38],[173,8,172,6],[173,14,172,12,"tokenValue"],[173,24,172,22],[173,27,172,25,"getObjectProperty"],[173,44,172,42],[173,45,172,43,"config"],[173,51,172,49],[173,52,172,50,"tokens"],[173,58,172,56],[173,60,172,58,"splitCurrentToken"],[173,77,172,75],[173,78,172,76],[174,8,173,6,"typeofResult"],[174,20,173,18],[174,23,173,21],[174,30,173,28,"tokenValue"],[174,40,173,38],[175,8,174,6],[175,15,174,13,"tokenValue"],[175,25,174,23],[176,6,175,4],[176,7,175,5],[176,13,175,11],[177,8,176,6],[177,12,176,10,"tokenScaleMap"],[177,25,176,23],[177,26,176,24,"propName"],[177,34,176,32],[177,35,176,33],[177,37,176,35],[178,10,177,8],[178,14,177,12],[178,15,177,13,"config"],[178,21,177,19],[178,25,177,23],[178,26,177,24,"config"],[178,32,177,30],[178,33,177,31,"tokens"],[178,39,177,37],[178,41,177,39],[179,12,178,10],[179,18,178,16],[179,22,178,20,"Error"],[179,27,178,25],[179,28,178,26],[179,174,178,172],[179,175,178,173],[180,10,179,8],[181,10,180,8],[181,14,180,12,"config"],[181,20,180,18],[181,25,180,23],[181,29,180,27],[181,33,180,31,"config"],[181,39,180,37],[181,44,180,42],[181,49,180,47],[181,50,180,48],[181,54,180,52,"config"],[181,60,180,58],[181,61,180,59,"tokens"],[181,67,180,65],[181,68,180,66,"token_scale"],[181,79,180,77],[181,80,180,78],[181,84,180,82,"config"],[181,90,180,88],[181,95,180,93],[181,99,180,97],[181,103,180,101,"config"],[181,109,180,107],[181,114,180,112],[181,119,180,117],[181,120,180,118],[181,124,180,122,"config"],[181,130,180,128],[181,131,180,129,"tokens"],[181,137,180,135],[181,138,180,136,"token_scale"],[181,149,180,147],[181,150,180,148],[181,151,180,149,"hasOwnProperty"],[181,165,180,163],[181,166,180,164,"splitCurrentToken"],[181,183,180,181],[181,184,180,182],[181,185,180,183],[181,186,180,184],[181,187,180,185],[181,189,180,187],[182,12,181,10],[182,18,181,16,"tokenValue"],[182,28,181,26],[182,31,181,29,"config"],[182,37,181,35],[182,42,181,40],[182,46,181,44],[182,50,181,48,"config"],[182,56,181,54],[182,61,181,59],[182,66,181,64],[182,67,181,65],[182,70,181,68],[182,75,181,73],[182,76,181,74],[182,79,181,77,"config"],[182,85,181,83],[182,86,181,84,"tokens"],[182,92,181,90],[182,93,181,91,"token_scale"],[182,104,181,102],[182,105,181,103],[182,106,181,104,"splitCurrentToken"],[182,123,181,121],[182,124,181,122],[182,125,181,123],[182,126,181,124],[182,127,181,125],[183,12,182,10,"typeofResult"],[183,24,182,22],[183,27,182,25],[183,34,182,32,"tokenValue"],[183,44,182,42],[184,12,183,10],[184,16,183,14],[184,23,183,21,"tokenValue"],[184,33,183,31],[184,38,183,36],[184,49,183,47],[184,53,183,51,"tokenValue"],[184,63,183,61],[184,68,183,66],[184,72,183,70],[184,74,183,72],[185,14,184,12],[185,21,184,19,"tokenValue"],[185,31,184,29],[186,12,185,10],[186,13,185,11],[186,19,185,17],[187,14,186,12],[187,21,186,19],[187,23,186,21],[188,12,187,10],[189,10,188,8],[190,8,189,6],[191,8,190,6],[191,15,190,13,"splitCurrentToken"],[191,32,190,30],[191,33,190,31,"splitCurrentToken"],[191,50,190,48],[191,51,190,49,"length"],[191,57,190,55],[191,60,190,58],[191,61,190,59],[191,62,190,60],[192,6,191,4],[193,4,192,2],[193,5,192,3],[193,6,192,4],[194,4,193,2],[194,8,193,6,"finalResult"],[194,19,193,17],[194,22,193,20,"result"],[194,28,193,26],[195,4,194,2],[195,8,194,6,"finalResult"],[195,19,194,17],[195,24,194,22],[195,26,194,24],[195,28,194,26],[196,6,195,4],[196,13,195,11,"undefined"],[196,22,195,20],[197,4,196,2],[197,5,196,3],[197,11,196,9],[198,6,197,4,"finalResult"],[198,17,197,15],[198,20,197,18,"result"],[198,26,197,24],[198,27,197,25,"join"],[198,31,197,29],[198,32,197,30],[198,35,197,33],[198,36,197,34],[199,6,198,4],[199,10,198,8,"isNumeric"],[199,19,198,17],[199,20,198,18,"finalResult"],[199,31,198,29],[199,32,198,30],[199,36,198,34,"typeofResult"],[199,48,198,46],[199,53,198,51],[199,61,198,59],[199,63,198,61],[200,8,199,6],[200,15,199,13,"parseFloat"],[200,25,199,23],[200,26,199,24,"finalResult"],[200,37,199,35],[200,38,199,36],[201,6,200,4],[201,7,200,5],[201,13,200,11],[202,8,201,6],[202,15,201,13,"finalResult"],[202,26,201,24],[203,6,202,4],[204,4,203,2],[205,2,204,0],[206,2,205,0],[206,8,205,6,"getObjectProperty"],[206,25,205,23],[206,28,205,26,"getObjectProperty"],[206,29,205,27,"object"],[206,35,205,33],[206,37,205,35,"keyPath"],[206,44,205,42],[206,49,205,47],[207,4,206,2],[207,8,206,6],[207,9,206,7,"Array"],[207,14,206,12],[207,15,206,13,"isArray"],[207,22,206,20],[207,23,206,21,"keyPath"],[207,30,206,28],[207,31,206,29],[207,33,206,31],[208,6,207,4,"keyPath"],[208,13,207,11],[208,16,207,14],[208,17,207,15,"keyPath"],[208,24,207,22],[208,25,207,23],[209,4,208,2],[210,4,209,2],[210,11,209,9,"keyPath"],[210,18,209,16],[210,19,209,17,"reduce"],[210,25,209,23],[210,26,209,24],[210,27,209,25,"baseObj"],[210,34,209,32],[210,36,209,34,"key"],[210,39,209,37],[210,44,209,42,"baseObj"],[210,51,209,49],[210,55,209,53,"baseObj"],[210,62,209,60],[210,63,209,61,"key"],[210,66,209,64],[210,67,209,65],[210,69,209,67,"object"],[210,75,209,73],[210,76,209,74],[211,2,210,0],[211,3,210,1],[212,2,211,0,"exports"],[212,9,211,7],[212,10,211,8,"getObjectProperty"],[212,27,211,25],[212,30,211,28,"getObjectProperty"],[212,47,211,45],[213,0,211,46],[213,3]],"functionMap":{"names":["<global>","deepClone","deepMerge","setObjectKeyValue","deepMergeObjects","isObject","objects.reduce$argument_0","Object.keys.forEach$argument_0","resolvedTokenization","resolveAliasesFromConfig","Object.keys.map$argument_0","resolveTokensFromConfig","getResolvedTokenValueFromConfig","getTokenFromConfig","transformer$argument_1","isNumeric","resolveStringToken","splitTokenBySpace.map$argument_0","getObjectProperty","keyPath.reduce$argument_0"],"mappings":"AAA;kBCe,sCD;kBEE;CFa;0BGE;CHgB;AIE;mBCC,qCD;wBEI;+BCE;ODS;GFG;CJC;AQC;CRI;ASC;yBCE;GDQ;CTE;AWC;yBDE;GCG;CXI;AYC;CZiB;2BaC;iCCY;ODG;iCCS;ODO;CbO;AeE;CfG;AgBC;uCCI;GD0B;ChBY;0BkBC;wBCI,yCD;ClBC"},"hasCjsExports":true},"type":"js/module"}]}