{"dependencies":[{"name":"./calculatePosition","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":635},"end":{"line":14,"column":56,"index":691}}],"key":"oe5Zd6DJjix1L+ODEANX8+9+IQQ=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":692},"end":{"line":15,"column":54,"index":746}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./useCloseOnScroll","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":747},"end":{"line":16,"column":54,"index":801}}],"key":"ccMOx4Q+dmWeCCqSYJ5+jh9jo5Y=","exportNames":["*"],"imports":1}},{"name":"@react-native-aria/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":802},"end":{"line":17,"column":66,"index":868}}],"key":"ijskzN+IV/diNKTT1BJzRK8qf8I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.useOverlayPosition = useOverlayPosition;\n  var _calculatePosition = require(_dependencyMap[0], \"./calculatePosition\");\n  var _react = require(_dependencyMap[1], \"react\");\n  var _useCloseOnScroll = require(_dependencyMap[2], \"./useCloseOnScroll\");\n  var _reactNativeAriaUtils = require(_dependencyMap[3], \"@react-native-aria/utils\");\n  //@ts-nocheck\n  /*\n   * Copyright 2020 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n\n  // @ts-ignore\n  let visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\n  /**\n   * Handles positioning overlays like popovers and menus relative to a trigger\n   * element, and updating the position when the window resizes.\n   */\n  function useOverlayPosition(props) {\n    var _targetRef$current, _targetRef$current2;\n    const direction = (0, _reactNativeAriaUtils.isRTL)() ? 'rtl' : undefined;\n    let {\n      targetRef,\n      overlayRef,\n      scrollRef = overlayRef,\n      placement = 'bottom',\n      containerPadding = 12,\n      shouldFlip = true,\n      boundaryElement = typeof document !== 'undefined' ? document.body : null,\n      offset = 0,\n      crossOffset = 0,\n      shouldUpdatePosition = true,\n      isOpen = true,\n      shouldOverlapWithTrigger = false,\n      onClose\n    } = props;\n    let [position, setPosition] = (0, _react.useState)({\n      position: {},\n      arrowOffsetLeft: undefined,\n      arrowOffsetTop: undefined,\n      maxHeight: undefined,\n      placement: undefined\n    });\n    let deps = [shouldUpdatePosition, placement, overlayRef.current, (_targetRef$current = targetRef.current) === null || _targetRef$current === void 0 ? void 0 : _targetRef$current.offsetLeft, (_targetRef$current2 = targetRef.current) === null || _targetRef$current2 === void 0 ? void 0 : _targetRef$current2.offsetTop, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction, shouldOverlapWithTrigger];\n    let updatePosition = (0, _react.useCallback)(() => {\n      if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) {\n        return;\n      }\n      setPosition((0, _calculatePosition.calculatePosition)({\n        placement: translateRTL(placement, direction),\n        overlayNode: overlayRef.current,\n        targetNode: targetRef.current,\n        scrollNode: scrollRef.current,\n        padding: containerPadding,\n        shouldFlip,\n        boundaryElement,\n        offset,\n        crossOffset,\n        shouldOverlapWithTrigger\n      }));\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n\n    // Update position when anything changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    (0, _reactNativeAriaUtils.useLayoutEffect)(updatePosition, deps);\n\n    // Update position on window resize\n    useResize(updatePosition);\n\n    // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n    // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n    let isResizing = (0, _react.useRef)(false);\n    (0, _reactNativeAriaUtils.useLayoutEffect)(() => {\n      let timeout;\n      let onResize = () => {\n        isResizing.current = true;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n          isResizing.current = false;\n        }, 500);\n        updatePosition();\n      };\n      visualViewport === null || visualViewport === void 0 || visualViewport.addEventListener('resize', onResize);\n      return () => {\n        visualViewport === null || visualViewport === void 0 || visualViewport.removeEventListener('resize', onResize);\n      };\n    }, [updatePosition]);\n    let close = (0, _react.useCallback)(() => {\n      if (!isResizing.current) {\n        onClose();\n      }\n    }, [onClose, isResizing]);\n\n    // When scrolling a parent scrollable region of the trigger (other than the body),\n    // we hide the popover. Otherwise, its position would be incorrect.\n    (0, _useCloseOnScroll.useCloseOnScroll)({\n      triggerRef: targetRef,\n      isOpen,\n      onClose: onClose ? close : undefined\n    });\n\n    // useLayoutEffect(() => {\n    //   const mutationObserver = new MutationObserver((mutations) => {\n    //     updatePosition();\n    //     mutations.forEach((mutation) => {\n    //       // if (mutation.attributeName === 'style') {\n    //       //   const transform = mutation.target.style.transform;\n    //       //   if (transform) {\n    //       //     const match = transform.match(/scale\\((.+)\\)/);\n    //       //     if (match) {\n    //       //       const scale = parseFloat(match[1]);\n    //       //       console.log(`Scale: ${scale}`);\n    //       //       // updatePosition();\n    //       //     }\n    //       //   }\n    //       // }\n    //     });\n    //   });\n\n    //   mutationObserver.observe(overlayRef?.current, { attributes: true });\n\n    //   return () => mutationObserver.disconnect();\n    // }, [overlayRef, updatePosition]);\n\n    return {\n      rendered: true,\n      overlayProps: {\n        style: Object.assign({\n          position: 'absolute',\n          zIndex: 100000\n        }, position.position, {\n          maxHeight: position.maxHeight\n        })\n      },\n      placement: position.placement,\n      arrowProps: {\n        style: {\n          left: position.arrowOffsetLeft,\n          top: position.arrowOffsetTop\n        }\n      },\n      isFlipped: position.isFlipped,\n      updatePosition\n    };\n  }\n  function useResize(onResize) {\n    (0, _reactNativeAriaUtils.useLayoutEffect)(() => {\n      window.addEventListener('resize', onResize, false);\n      return () => {\n        window.removeEventListener('resize', onResize, false);\n      };\n    }, [onResize]);\n  }\n  function translateRTL(position, direction) {\n    if (direction === 'rtl') {\n      return position.replace('start', 'right').replace('end', 'left');\n    }\n    return position.replace('start', 'left').replace('end', 'right');\n  }\n});","lineCount":174,"map":[[7,2,25,0,"exports"],[7,9,25,0],[7,10,25,0,"useOverlayPosition"],[7,28,25,0],[7,31,25,0,"useOverlayPosition"],[7,49,25,0],[8,2,14,0],[8,6,14,0,"_calculatePosition"],[8,24,14,0],[8,27,14,0,"require"],[8,34,14,0],[8,35,14,0,"_dependencyMap"],[8,49,14,0],[9,2,15,0],[9,6,15,0,"_react"],[9,12,15,0],[9,15,15,0,"require"],[9,22,15,0],[9,23,15,0,"_dependencyMap"],[9,37,15,0],[10,2,16,0],[10,6,16,0,"_useCloseOnScroll"],[10,23,16,0],[10,26,16,0,"require"],[10,33,16,0],[10,34,16,0,"_dependencyMap"],[10,48,16,0],[11,2,17,0],[11,6,17,0,"_reactNativeAriaUtils"],[11,27,17,0],[11,30,17,0,"require"],[11,37,17,0],[11,38,17,0,"_dependencyMap"],[11,52,17,0],[12,2,1,0],[13,2,2,0],[14,0,3,0],[15,0,4,0],[16,0,5,0],[17,0,6,0],[18,0,7,0],[19,0,8,0],[20,0,9,0],[21,0,10,0],[22,0,11,0],[23,0,12,0],[25,2,18,0],[26,2,19,0],[26,6,19,4,"visualViewport"],[26,20,19,18],[26,23,19,21],[26,30,19,28,"window"],[26,36,19,34],[26,41,19,39],[26,52,19,50],[26,56,19,54,"window"],[26,62,19,60],[26,63,19,61,"visualViewport"],[26,77,19,75],[28,2,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,2,25,7],[32,11,25,16,"useOverlayPosition"],[32,29,25,34,"useOverlayPosition"],[32,30,25,35,"props"],[32,35,25,40],[32,37,25,42],[33,4,26,2],[33,8,26,6,"_targetRef$current"],[33,26,26,24],[33,28,26,26,"_targetRef$current2"],[33,47,26,45],[34,4,27,2],[34,10,27,8,"direction"],[34,19,27,17],[34,22,27,20],[34,26,27,20,"isRTL"],[34,47,27,25],[34,48,27,25,"isRTL"],[34,53,27,25],[34,55,27,26],[34,56,27,27],[34,59,27,30],[34,64,27,35],[34,67,27,38,"undefined"],[34,76,27,47],[35,4,28,2],[35,8,28,6],[36,6,29,4,"targetRef"],[36,15,29,13],[37,6,30,4,"overlayRef"],[37,16,30,14],[38,6,31,4,"scrollRef"],[38,15,31,13],[38,18,31,16,"overlayRef"],[38,28,31,26],[39,6,32,4,"placement"],[39,15,32,13],[39,18,32,16],[39,26,32,24],[40,6,33,4,"containerPadding"],[40,22,33,20],[40,25,33,23],[40,27,33,25],[41,6,34,4,"shouldFlip"],[41,16,34,14],[41,19,34,17],[41,23,34,21],[42,6,35,4,"boundaryElement"],[42,21,35,19],[42,24,35,22],[42,31,35,29,"document"],[42,39,35,37],[42,44,35,42],[42,55,35,53],[42,58,35,56,"document"],[42,66,35,64],[42,67,35,65,"body"],[42,71,35,69],[42,74,35,72],[42,78,35,76],[43,6,36,4,"offset"],[43,12,36,10],[43,15,36,13],[43,16,36,14],[44,6,37,4,"crossOffset"],[44,17,37,15],[44,20,37,18],[44,21,37,19],[45,6,38,4,"shouldUpdatePosition"],[45,26,38,24],[45,29,38,27],[45,33,38,31],[46,6,39,4,"isOpen"],[46,12,39,10],[46,15,39,13],[46,19,39,17],[47,6,40,4,"shouldOverlapWithTrigger"],[47,30,40,28],[47,33,40,31],[47,38,40,36],[48,6,41,4,"onClose"],[49,4,42,2],[49,5,42,3],[49,8,42,6,"props"],[49,13,42,11],[50,4,43,2],[50,8,43,6],[50,9,43,7,"position"],[50,17,43,15],[50,19,43,17,"setPosition"],[50,30,43,28],[50,31,43,29],[50,34,43,32],[50,38,43,32,"useState"],[50,44,43,40],[50,45,43,40,"useState"],[50,53,43,40],[50,55,43,41],[51,6,44,4,"position"],[51,14,44,12],[51,16,44,14],[51,17,44,15],[51,18,44,16],[52,6,45,4,"arrowOffsetLeft"],[52,21,45,19],[52,23,45,21,"undefined"],[52,32,45,30],[53,6,46,4,"arrowOffsetTop"],[53,20,46,18],[53,22,46,20,"undefined"],[53,31,46,29],[54,6,47,4,"maxHeight"],[54,15,47,13],[54,17,47,15,"undefined"],[54,26,47,24],[55,6,48,4,"placement"],[55,15,48,13],[55,17,48,15,"undefined"],[56,4,49,2],[56,5,49,3],[56,6,49,4],[57,4,50,2],[57,8,50,6,"deps"],[57,12,50,10],[57,15,50,13],[57,16,50,14,"shouldUpdatePosition"],[57,36,50,34],[57,38,50,36,"placement"],[57,47,50,45],[57,49,50,47,"overlayRef"],[57,59,50,57],[57,60,50,58,"current"],[57,67,50,65],[57,69,50,67],[57,70,50,68,"_targetRef$current"],[57,88,50,86],[57,91,50,89,"targetRef"],[57,100,50,98],[57,101,50,99,"current"],[57,108,50,106],[57,114,50,112],[57,118,50,116],[57,122,50,120,"_targetRef$current"],[57,140,50,138],[57,145,50,143],[57,150,50,148],[57,151,50,149],[57,154,50,152],[57,159,50,157],[57,160,50,158],[57,163,50,161,"_targetRef$current"],[57,181,50,179],[57,182,50,180,"offsetLeft"],[57,192,50,190],[57,194,50,192],[57,195,50,193,"_targetRef$current2"],[57,214,50,212],[57,217,50,215,"targetRef"],[57,226,50,224],[57,227,50,225,"current"],[57,234,50,232],[57,240,50,238],[57,244,50,242],[57,248,50,246,"_targetRef$current2"],[57,267,50,265],[57,272,50,270],[57,277,50,275],[57,278,50,276],[57,281,50,279],[57,286,50,284],[57,287,50,285],[57,290,50,288,"_targetRef$current2"],[57,309,50,307],[57,310,50,308,"offsetTop"],[57,319,50,317],[57,321,50,319,"scrollRef"],[57,330,50,328],[57,331,50,329,"current"],[57,338,50,336],[57,340,50,338,"containerPadding"],[57,356,50,354],[57,358,50,356,"shouldFlip"],[57,368,50,366],[57,370,50,368,"boundaryElement"],[57,385,50,383],[57,387,50,385,"offset"],[57,393,50,391],[57,395,50,393,"crossOffset"],[57,406,50,404],[57,408,50,406,"isOpen"],[57,414,50,412],[57,416,50,414,"direction"],[57,425,50,423],[57,427,50,425,"shouldOverlapWithTrigger"],[57,451,50,449],[57,452,50,450],[58,4,51,2],[58,8,51,6,"updatePosition"],[58,22,51,20],[58,25,51,23],[58,29,51,23,"useCallback"],[58,35,51,34],[58,36,51,34,"useCallback"],[58,47,51,34],[58,49,51,35],[58,55,51,41],[59,6,52,4],[59,10,52,8,"shouldUpdatePosition"],[59,30,52,28],[59,35,52,33],[59,40,52,38],[59,44,52,42],[59,45,52,43,"isOpen"],[59,51,52,49],[59,55,52,53],[59,56,52,54,"overlayRef"],[59,66,52,64],[59,67,52,65,"current"],[59,74,52,72],[59,78,52,76],[59,79,52,77,"targetRef"],[59,88,52,86],[59,89,52,87,"current"],[59,96,52,94],[59,100,52,98],[59,101,52,99,"scrollRef"],[59,110,52,108],[59,111,52,109,"current"],[59,118,52,116],[59,122,52,120],[59,123,52,121,"boundaryElement"],[59,138,52,136],[59,140,52,138],[60,8,53,6],[61,6,54,4],[62,6,55,4,"setPosition"],[62,17,55,15],[62,18,55,16],[62,22,55,16,"calculatePosition"],[62,40,55,33],[62,41,55,33,"calculatePosition"],[62,58,55,33],[62,60,55,34],[63,8,56,6,"placement"],[63,17,56,15],[63,19,56,17,"translateRTL"],[63,31,56,29],[63,32,56,30,"placement"],[63,41,56,39],[63,43,56,41,"direction"],[63,52,56,50],[63,53,56,51],[64,8,57,6,"overlayNode"],[64,19,57,17],[64,21,57,19,"overlayRef"],[64,31,57,29],[64,32,57,30,"current"],[64,39,57,37],[65,8,58,6,"targetNode"],[65,18,58,16],[65,20,58,18,"targetRef"],[65,29,58,27],[65,30,58,28,"current"],[65,37,58,35],[66,8,59,6,"scrollNode"],[66,18,59,16],[66,20,59,18,"scrollRef"],[66,29,59,27],[66,30,59,28,"current"],[66,37,59,35],[67,8,60,6,"padding"],[67,15,60,13],[67,17,60,15,"containerPadding"],[67,33,60,31],[68,8,61,6,"shouldFlip"],[68,18,61,16],[69,8,62,6,"boundaryElement"],[69,23,62,21],[70,8,63,6,"offset"],[70,14,63,12],[71,8,64,6,"crossOffset"],[71,19,64,17],[72,8,65,6,"shouldOverlapWithTrigger"],[73,6,66,4],[73,7,66,5],[73,8,66,6],[73,9,66,7],[74,6,67,4],[75,4,68,2],[75,5,68,3],[75,7,68,5,"deps"],[75,11,68,9],[75,12,68,10],[77,4,70,2],[78,4,71,2],[79,4,72,2],[79,8,72,2,"useLayoutEffect"],[79,29,72,17],[79,30,72,17,"useLayoutEffect"],[79,45,72,17],[79,47,72,18,"updatePosition"],[79,61,72,32],[79,63,72,34,"deps"],[79,67,72,38],[79,68,72,39],[81,4,74,2],[82,4,75,2,"useResize"],[82,13,75,11],[82,14,75,12,"updatePosition"],[82,28,75,26],[82,29,75,27],[84,4,77,2],[85,4,78,2],[86,4,79,2],[86,8,79,6,"isResizing"],[86,18,79,16],[86,21,79,19],[86,25,79,19,"useRef"],[86,31,79,25],[86,32,79,25,"useRef"],[86,38,79,25],[86,40,79,26],[86,45,79,31],[86,46,79,32],[87,4,80,2],[87,8,80,2,"useLayoutEffect"],[87,29,80,17],[87,30,80,17,"useLayoutEffect"],[87,45,80,17],[87,47,80,18],[87,53,80,24],[88,6,81,4],[88,10,81,8,"timeout"],[88,17,81,15],[89,6,82,4],[89,10,82,8,"onResize"],[89,18,82,16],[89,21,82,19,"onResize"],[89,22,82,19],[89,27,82,25],[90,8,83,6,"isResizing"],[90,18,83,16],[90,19,83,17,"current"],[90,26,83,24],[90,29,83,27],[90,33,83,31],[91,8,84,6,"clearTimeout"],[91,20,84,18],[91,21,84,19,"timeout"],[91,28,84,26],[91,29,84,27],[92,8,85,6,"timeout"],[92,15,85,13],[92,18,85,16,"setTimeout"],[92,28,85,26],[92,29,85,27],[92,35,85,33],[93,10,86,8,"isResizing"],[93,20,86,18],[93,21,86,19,"current"],[93,28,86,26],[93,31,86,29],[93,36,86,34],[94,8,87,6],[94,9,87,7],[94,11,87,9],[94,14,87,12],[94,15,87,13],[95,8,88,6,"updatePosition"],[95,22,88,20],[95,23,88,21],[95,24,88,22],[96,6,89,4],[96,7,89,5],[97,6,90,4,"visualViewport"],[97,20,90,18],[97,25,90,23],[97,29,90,27],[97,33,90,31,"visualViewport"],[97,47,90,45],[97,52,90,50],[97,57,90,55],[97,58,90,56],[97,62,90,60,"visualViewport"],[97,76,90,74],[97,77,90,75,"addEventListener"],[97,93,90,91],[97,94,90,92],[97,102,90,100],[97,104,90,102,"onResize"],[97,112,90,110],[97,113,90,111],[98,6,91,4],[98,13,91,11],[98,19,91,17],[99,8,92,6,"visualViewport"],[99,22,92,20],[99,27,92,25],[99,31,92,29],[99,35,92,33,"visualViewport"],[99,49,92,47],[99,54,92,52],[99,59,92,57],[99,60,92,58],[99,64,92,62,"visualViewport"],[99,78,92,76],[99,79,92,77,"removeEventListener"],[99,98,92,96],[99,99,92,97],[99,107,92,105],[99,109,92,107,"onResize"],[99,117,92,115],[99,118,92,116],[100,6,93,4],[100,7,93,5],[101,4,94,2],[101,5,94,3],[101,7,94,5],[101,8,94,6,"updatePosition"],[101,22,94,20],[101,23,94,21],[101,24,94,22],[102,4,95,2],[102,8,95,6,"close"],[102,13,95,11],[102,16,95,14],[102,20,95,14,"useCallback"],[102,26,95,25],[102,27,95,25,"useCallback"],[102,38,95,25],[102,40,95,26],[102,46,95,32],[103,6,96,4],[103,10,96,8],[103,11,96,9,"isResizing"],[103,21,96,19],[103,22,96,20,"current"],[103,29,96,27],[103,31,96,29],[104,8,97,6,"onClose"],[104,15,97,13],[104,16,97,14],[104,17,97,15],[105,6,98,4],[106,4,99,2],[106,5,99,3],[106,7,99,5],[106,8,99,6,"onClose"],[106,15,99,13],[106,17,99,15,"isResizing"],[106,27,99,25],[106,28,99,26],[106,29,99,27],[108,4,101,2],[109,4,102,2],[110,4,103,2],[110,8,103,2,"useCloseOnScroll"],[110,25,103,18],[110,26,103,18,"useCloseOnScroll"],[110,42,103,18],[110,44,103,19],[111,6,104,4,"triggerRef"],[111,16,104,14],[111,18,104,16,"targetRef"],[111,27,104,25],[112,6,105,4,"isOpen"],[112,12,105,10],[113,6,106,4,"onClose"],[113,13,106,11],[113,15,106,13,"onClose"],[113,22,106,20],[113,25,106,23,"close"],[113,30,106,28],[113,33,106,31,"undefined"],[114,4,107,2],[114,5,107,3],[114,6,107,4],[116,4,109,2],[117,4,110,2],[118,4,111,2],[119,4,112,2],[120,4,113,2],[121,4,114,2],[122,4,115,2],[123,4,116,2],[124,4,117,2],[125,4,118,2],[126,4,119,2],[127,4,120,2],[128,4,121,2],[129,4,122,2],[130,4,123,2],[131,4,124,2],[132,4,125,2],[134,4,127,2],[136,4,129,2],[137,4,130,2],[139,4,132,2],[139,11,132,9],[140,6,133,4,"rendered"],[140,14,133,12],[140,16,133,14],[140,20,133,18],[141,6,134,4,"overlayProps"],[141,18,134,16],[141,20,134,18],[142,8,135,6,"style"],[142,13,135,11],[142,15,135,11,"Object"],[142,21,135,11],[142,22,135,11,"assign"],[142,28,135,11],[143,10,136,8,"position"],[143,18,136,16],[143,20,136,18],[143,30,136,28],[144,10,137,8,"zIndex"],[144,16,137,14],[144,18,137,16],[145,8,137,22],[145,11,139,11,"position"],[145,19,139,19],[145,20,139,20,"position"],[145,28,139,28],[146,10,140,8,"maxHeight"],[146,19,140,17],[146,21,140,19,"position"],[146,29,140,27],[146,30,140,28,"maxHeight"],[147,8,140,37],[148,6,142,4],[148,7,142,5],[149,6,143,4,"placement"],[149,15,143,13],[149,17,143,15,"position"],[149,25,143,23],[149,26,143,24,"placement"],[149,35,143,33],[150,6,144,4,"arrowProps"],[150,16,144,14],[150,18,144,16],[151,8,145,6,"style"],[151,13,145,11],[151,15,145,13],[152,10,146,8,"left"],[152,14,146,12],[152,16,146,14,"position"],[152,24,146,22],[152,25,146,23,"arrowOffsetLeft"],[152,40,146,38],[153,10,147,8,"top"],[153,13,147,11],[153,15,147,13,"position"],[153,23,147,21],[153,24,147,22,"arrowOffsetTop"],[154,8,148,6],[155,6,149,4],[155,7,149,5],[156,6,150,4,"isFlipped"],[156,15,150,13],[156,17,150,15,"position"],[156,25,150,23],[156,26,150,24,"isFlipped"],[156,35,150,33],[157,6,151,4,"updatePosition"],[158,4,152,2],[158,5,152,3],[159,2,153,0],[160,2,154,0],[160,11,154,9,"useResize"],[160,20,154,18,"useResize"],[160,21,154,19,"onResize"],[160,29,154,27],[160,31,154,29],[161,4,155,2],[161,8,155,2,"useLayoutEffect"],[161,29,155,17],[161,30,155,17,"useLayoutEffect"],[161,45,155,17],[161,47,155,18],[161,53,155,24],[162,6,156,4,"window"],[162,12,156,10],[162,13,156,11,"addEventListener"],[162,29,156,27],[162,30,156,28],[162,38,156,36],[162,40,156,38,"onResize"],[162,48,156,46],[162,50,156,48],[162,55,156,53],[162,56,156,54],[163,6,157,4],[163,13,157,11],[163,19,157,17],[164,8,158,6,"window"],[164,14,158,12],[164,15,158,13,"removeEventListener"],[164,34,158,32],[164,35,158,33],[164,43,158,41],[164,45,158,43,"onResize"],[164,53,158,51],[164,55,158,53],[164,60,158,58],[164,61,158,59],[165,6,159,4],[165,7,159,5],[166,4,160,2],[166,5,160,3],[166,7,160,5],[166,8,160,6,"onResize"],[166,16,160,14],[166,17,160,15],[166,18,160,16],[167,2,161,0],[168,2,162,0],[168,11,162,9,"translateRTL"],[168,23,162,21,"translateRTL"],[168,24,162,22,"position"],[168,32,162,30],[168,34,162,32,"direction"],[168,43,162,41],[168,45,162,43],[169,4,163,2],[169,8,163,6,"direction"],[169,17,163,15],[169,22,163,20],[169,27,163,25],[169,29,163,27],[170,6,164,4],[170,13,164,11,"position"],[170,21,164,19],[170,22,164,20,"replace"],[170,29,164,27],[170,30,164,28],[170,37,164,35],[170,39,164,37],[170,46,164,44],[170,47,164,45],[170,48,164,46,"replace"],[170,55,164,53],[170,56,164,54],[170,61,164,59],[170,63,164,61],[170,69,164,67],[170,70,164,68],[171,4,165,2],[172,4,166,2],[172,11,166,9,"position"],[172,19,166,17],[172,20,166,18,"replace"],[172,27,166,25],[172,28,166,26],[172,35,166,33],[172,37,166,35],[172,43,166,41],[172,44,166,42],[172,45,166,43,"replace"],[172,52,166,50],[172,53,166,51],[172,58,166,56],[172,60,166,58],[172,67,166,65],[172,68,166,66],[173,2,167,0],[174,0,167,1],[174,3]],"functionMap":{"names":["<global>","useOverlayPosition","updatePosition","useLayoutEffect$argument_0","onResize","setTimeout$argument_0","<anonymous>","close","useResize","translateRTL"],"mappings":"AAA;OCwB;mCC0B;GDiB;kBEY;mBCE;2BCG;ODE;KDE;WGE;KHE;GFC;0BMC;GNI;CDsD;AQC;kBLC;WGE;KHE;GKC;CRC;ASC;CTK"},"hasCjsExports":false},"type":"js/module"}]}