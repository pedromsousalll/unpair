{"dependencies":[{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":42,"index":42}}],"key":"BkBYK9w6fHruAfQL7S4qWsYds2s=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"Component\", {\n    enumerable: true,\n    get: function () {\n      return Component;\n    }\n  });\n  Object.defineProperty(exports, \"ComponentContainer\", {\n    enumerable: true,\n    get: function () {\n      return ComponentContainer;\n    }\n  });\n  Object.defineProperty(exports, \"Provider\", {\n    enumerable: true,\n    get: function () {\n      return Provider;\n    }\n  });\n  var _firebaseUtil = require(_dependencyMap[0], \"@firebase/util\");\n  /**\n   * Component for service name T, e.g. `auth`, `auth-internal`\n   */\n  class Component {\n    /**\n     *\n     * @param name The public service name, e.g. app, auth, firestore, database\n     * @param instanceFactory Service factory responsible for creating the public interface\n     * @param type whether the service provided by the component is public or private\n     */\n    constructor(name, instanceFactory, type) {\n      this.name = name;\n      this.instanceFactory = instanceFactory;\n      this.type = type;\n      this.multipleInstances = false;\n      /**\n       * Properties to be added to the service namespace\n       */\n      this.serviceProps = {};\n      this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\n      this.onInstanceCreated = null;\n    }\n    setInstantiationMode(mode) {\n      this.instantiationMode = mode;\n      return this;\n    }\n    setMultipleInstances(multipleInstances) {\n      this.multipleInstances = multipleInstances;\n      return this;\n    }\n    setServiceProps(props) {\n      this.serviceProps = props;\n      return this;\n    }\n    setInstanceCreatedCallback(callback) {\n      this.onInstanceCreated = callback;\n      return this;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n   * NameServiceMapping[T] is an alias for the type of the instance\n   */\n  class Provider {\n    constructor(name, container) {\n      this.name = name;\n      this.container = container;\n      this.component = null;\n      this.instances = new Map();\n      this.instancesDeferred = new Map();\n      this.instancesOptions = new Map();\n      this.onInitCallbacks = new Map();\n    }\n    /**\n     * @param identifier A provider can provide multiple instances of a service\n     * if this.component.multipleInstances is true.\n     */\n    get(identifier) {\n      // if multipleInstances is not supported, use the default name\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n      if (!this.instancesDeferred.has(normalizedIdentifier)) {\n        const deferred = new _firebaseUtil.Deferred();\n        this.instancesDeferred.set(normalizedIdentifier, deferred);\n        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n          // initialize the service if it can be auto-initialized\n          try {\n            const instance = this.getOrInitializeService({\n              instanceIdentifier: normalizedIdentifier\n            });\n            if (instance) {\n              deferred.resolve(instance);\n            }\n          } catch (e) {\n            // when the instance factory throws an exception during get(), it should not cause\n            // a fatal error. We just return the unresolved promise in this case.\n          }\n        }\n      }\n      return this.instancesDeferred.get(normalizedIdentifier).promise;\n    }\n    getImmediate(options) {\n      // if multipleInstances is not supported, use the default name\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(options?.identifier);\n      const optional = options?.optional ?? false;\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        try {\n          return this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n        } catch (e) {\n          if (optional) {\n            return null;\n          } else {\n            throw e;\n          }\n        }\n      } else {\n        // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\n        if (optional) {\n          return null;\n        } else {\n          throw Error(`Service ${this.name} is not available`);\n        }\n      }\n    }\n    getComponent() {\n      return this.component;\n    }\n    setComponent(component) {\n      if (component.name !== this.name) {\n        throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\n      }\n      if (this.component) {\n        throw Error(`Component for ${this.name} has already been provided`);\n      }\n      this.component = component;\n      // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n      if (!this.shouldAutoInitialize()) {\n        return;\n      }\n      // if the service is eager, initialize the default instance\n      if (isComponentEager(component)) {\n        try {\n          this.getOrInitializeService({\n            instanceIdentifier: DEFAULT_ENTRY_NAME\n          });\n        } catch (e) {\n          // when the instance factory for an eager Component throws an exception during the eager\n          // initialization, it should not cause a fatal error.\n          // TODO: Investigate if we need to make it configurable, because some component may want to cause\n          // a fatal error in this case?\n        }\n      }\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          instanceDeferred.resolve(instance);\n        } catch (e) {\n          // when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    }\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\n      this.instancesDeferred.delete(identifier);\n      this.instancesOptions.delete(identifier);\n      this.instances.delete(identifier);\n    }\n    // app.delete() will call this method on every provider to delete the services\n    // TODO: should we mark the provider as deleted?\n    async delete() {\n      const services = Array.from(this.instances.values());\n      await Promise.all([...services.filter(service => 'INTERNAL' in service) // legacy services\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .map(service => service.INTERNAL.delete()), ...services.filter(service => '_delete' in service) // modularized services\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .map(service => service._delete())]);\n    }\n    isComponentSet() {\n      return this.component != null;\n    }\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\n      return this.instances.has(identifier);\n    }\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\n      return this.instancesOptions.get(identifier) || {};\n    }\n    initialize(opts = {}) {\n      const {\n        options = {}\n      } = opts;\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n      if (this.isInitialized(normalizedIdentifier)) {\n        throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\n      }\n      if (!this.isComponentSet()) {\n        throw Error(`Component ${this.name} has not been registered yet`);\n      }\n      const instance = this.getOrInitializeService({\n        instanceIdentifier: normalizedIdentifier,\n        options\n      });\n      // resolve any pending promise waiting for the service instance\n      for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n        const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        if (normalizedIdentifier === normalizedDeferredIdentifier) {\n          instanceDeferred.resolve(instance);\n        }\n      }\n      return instance;\n    }\n    /**\n     *\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n     *\n     * @param identifier An optional instance identifier\n     * @returns a function to unregister the callback\n     */\n    onInit(callback, identifier) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n      const existingCallbacks = this.onInitCallbacks.get(normalizedIdentifier) ?? new Set();\n      existingCallbacks.add(callback);\n      this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n      const existingInstance = this.instances.get(normalizedIdentifier);\n      if (existingInstance) {\n        callback(existingInstance, normalizedIdentifier);\n      }\n      return () => {\n        existingCallbacks.delete(callback);\n      };\n    }\n    /**\n     * Invoke onInit callbacks synchronously\n     * @param instance the service instance`\n     */\n    invokeOnInitCallbacks(instance, identifier) {\n      const callbacks = this.onInitCallbacks.get(identifier);\n      if (!callbacks) {\n        return;\n      }\n      for (const callback of callbacks) {\n        try {\n          callback(instance, identifier);\n        } catch {\n          // ignore errors in the onInit callback\n        }\n      }\n    }\n    getOrInitializeService({\n      instanceIdentifier,\n      options = {}\n    }) {\n      let instance = this.instances.get(instanceIdentifier);\n      if (!instance && this.component) {\n        instance = this.component.instanceFactory(this.container, {\n          instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n          options\n        });\n        this.instances.set(instanceIdentifier, instance);\n        this.instancesOptions.set(instanceIdentifier, options);\n        /**\n         * Invoke onInit listeners.\n         * Note this.component.onInstanceCreated is different, which is used by the component creator,\n         * while onInit listeners are registered by consumers of the provider.\n         */\n        this.invokeOnInitCallbacks(instance, instanceIdentifier);\n        /**\n         * Order is important\n         * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n         * makes `isInitialized()` return true.\n         */\n        if (this.component.onInstanceCreated) {\n          try {\n            this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n          } catch {\n            // ignore errors in the onInstanceCreatedCallback\n          }\n        }\n      }\n      return instance || null;\n    }\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\n      if (this.component) {\n        return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n      } else {\n        return identifier; // assume multiple instances are supported before the component is provided.\n      }\n    }\n    shouldAutoInitialize() {\n      return !!this.component && this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */;\n    }\n  }\n  // undefined should be passed to the service factory for the default instance\n  function normalizeIdentifierForFactory(identifier) {\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n  }\n  function isComponentEager(component) {\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n   */\n  class ComponentContainer {\n    constructor(name) {\n      this.name = name;\n      this.providers = new Map();\n    }\n    /**\n     *\n     * @param component Component being added\n     * @param overwrite When a component with the same name has already been registered,\n     * if overwrite is true: overwrite the existing component with the new component and create a new\n     * provider with the new component. It can be useful in tests where you want to use different mocks\n     * for different tests.\n     * if overwrite is false: throw an exception\n     */\n    addComponent(component) {\n      const provider = this.getProvider(component.name);\n      if (provider.isComponentSet()) {\n        throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\n      }\n      provider.setComponent(component);\n    }\n    addOrOverwriteComponent(component) {\n      const provider = this.getProvider(component.name);\n      if (provider.isComponentSet()) {\n        // delete the existing provider from the container, so we can register the new component\n        this.providers.delete(component.name);\n      }\n      this.addComponent(component);\n    }\n    /**\n     * getProvider provides a type safe interface where it can only be called with a field name\n     * present in NameServiceMapping interface.\n     *\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\n     * themselves.\n     */\n    getProvider(name) {\n      if (this.providers.has(name)) {\n        return this.providers.get(name);\n      }\n      // create a Provider for a service that hasn't registered with Firebase\n      const provider = new Provider(name, this);\n      this.providers.set(name, provider);\n      return provider;\n    }\n    getProviders() {\n      return Array.from(this.providers.values());\n    }\n  }\n});","lineCount":417,"map":[[7,2,407,0,"Object"],[7,8,407,0],[7,9,407,0,"defineProperty"],[7,23,407,0],[7,24,407,0,"exports"],[7,31,407,0],[8,4,407,0,"enumerable"],[8,14,407,0],[9,4,407,0,"get"],[9,7,407,0],[9,18,407,0,"get"],[9,19,407,0],[10,6,407,0],[10,13,407,9,"Component"],[10,22,407,18],[11,4,407,18],[12,2,407,18],[13,2,407,0,"Object"],[13,8,407,0],[13,9,407,0,"defineProperty"],[13,23,407,0],[13,24,407,0,"exports"],[13,31,407,0],[14,4,407,0,"enumerable"],[14,14,407,0],[15,4,407,0,"get"],[15,7,407,0],[15,18,407,0,"get"],[15,19,407,0],[16,6,407,0],[16,13,407,20,"ComponentContainer"],[16,31,407,38],[17,4,407,38],[18,2,407,38],[19,2,407,0,"Object"],[19,8,407,0],[19,9,407,0,"defineProperty"],[19,23,407,0],[19,24,407,0,"exports"],[19,31,407,0],[20,4,407,0,"enumerable"],[20,14,407,0],[21,4,407,0,"get"],[21,7,407,0],[21,18,407,0,"get"],[21,19,407,0],[22,6,407,0],[22,13,407,40,"Provider"],[22,21,407,48],[23,4,407,48],[24,2,407,48],[25,2,1,0],[25,6,1,0,"_firebaseUtil"],[25,19,1,0],[25,22,1,0,"require"],[25,29,1,0],[25,30,1,0,"_dependencyMap"],[25,44,1,0],[26,2,3,0],[27,0,4,0],[28,0,5,0],[29,2,6,0],[29,8,6,6,"Component"],[29,17,6,15],[29,18,6,16],[30,4,7,4],[31,0,8,0],[32,0,9,0],[33,0,10,0],[34,0,11,0],[35,0,12,0],[36,4,13,4,"constructor"],[36,15,13,15,"constructor"],[36,16,13,16,"name"],[36,20,13,20],[36,22,13,22,"instanceFactory"],[36,37,13,37],[36,39,13,39,"type"],[36,43,13,43],[36,45,13,45],[37,6,14,8],[37,10,14,12],[37,11,14,13,"name"],[37,15,14,17],[37,18,14,20,"name"],[37,22,14,24],[38,6,15,8],[38,10,15,12],[38,11,15,13,"instanceFactory"],[38,26,15,28],[38,29,15,31,"instanceFactory"],[38,44,15,46],[39,6,16,8],[39,10,16,12],[39,11,16,13,"type"],[39,15,16,17],[39,18,16,20,"type"],[39,22,16,24],[40,6,17,8],[40,10,17,12],[40,11,17,13,"multipleInstances"],[40,28,17,30],[40,31,17,33],[40,36,17,38],[41,6,18,8],[42,0,19,0],[43,0,20,0],[44,6,21,8],[44,10,21,12],[44,11,21,13,"serviceProps"],[44,23,21,25],[44,26,21,28],[44,27,21,29],[44,28,21,30],[45,6,22,8],[45,10,22,12],[45,11,22,13,"instantiationMode"],[45,28,22,30],[45,31,22,33],[45,37,22,39],[45,38,22,40],[46,6,23,8],[46,10,23,12],[46,11,23,13,"onInstanceCreated"],[46,28,23,30],[46,31,23,33],[46,35,23,37],[47,4,24,4],[48,4,25,4,"setInstantiationMode"],[48,24,25,24,"setInstantiationMode"],[48,25,25,25,"mode"],[48,29,25,29],[48,31,25,31],[49,6,26,8],[49,10,26,12],[49,11,26,13,"instantiationMode"],[49,28,26,30],[49,31,26,33,"mode"],[49,35,26,37],[50,6,27,8],[50,13,27,15],[50,17,27,19],[51,4,28,4],[52,4,29,4,"setMultipleInstances"],[52,24,29,24,"setMultipleInstances"],[52,25,29,25,"multipleInstances"],[52,42,29,42],[52,44,29,44],[53,6,30,8],[53,10,30,12],[53,11,30,13,"multipleInstances"],[53,28,30,30],[53,31,30,33,"multipleInstances"],[53,48,30,50],[54,6,31,8],[54,13,31,15],[54,17,31,19],[55,4,32,4],[56,4,33,4,"setServiceProps"],[56,19,33,19,"setServiceProps"],[56,20,33,20,"props"],[56,25,33,25],[56,27,33,27],[57,6,34,8],[57,10,34,12],[57,11,34,13,"serviceProps"],[57,23,34,25],[57,26,34,28,"props"],[57,31,34,33],[58,6,35,8],[58,13,35,15],[58,17,35,19],[59,4,36,4],[60,4,37,4,"setInstanceCreatedCallback"],[60,30,37,30,"setInstanceCreatedCallback"],[60,31,37,31,"callback"],[60,39,37,39],[60,41,37,41],[61,6,38,8],[61,10,38,12],[61,11,38,13,"onInstanceCreated"],[61,28,38,30],[61,31,38,33,"callback"],[61,39,38,41],[62,6,39,8],[62,13,39,15],[62,17,39,19],[63,4,40,4],[64,2,41,0],[66,2,43,0],[67,0,44,0],[68,0,45,0],[69,0,46,0],[70,0,47,0],[71,0,48,0],[72,0,49,0],[73,0,50,0],[74,0,51,0],[75,0,52,0],[76,0,53,0],[77,0,54,0],[78,0,55,0],[79,0,56,0],[80,0,57,0],[81,0,58,0],[82,2,59,0],[82,8,59,6,"DEFAULT_ENTRY_NAME"],[82,26,59,24],[82,29,59,27],[82,40,59,38],[84,2,61,0],[85,0,62,0],[86,0,63,0],[87,0,64,0],[88,0,65,0],[89,0,66,0],[90,0,67,0],[91,0,68,0],[92,0,69,0],[93,0,70,0],[94,0,71,0],[95,0,72,0],[96,0,73,0],[97,0,74,0],[98,0,75,0],[99,0,76,0],[100,2,77,0],[101,0,78,0],[102,0,79,0],[103,0,80,0],[104,2,81,0],[104,8,81,6,"Provider"],[104,16,81,14],[104,17,81,15],[105,4,82,4,"constructor"],[105,15,82,15,"constructor"],[105,16,82,16,"name"],[105,20,82,20],[105,22,82,22,"container"],[105,31,82,31],[105,33,82,33],[106,6,83,8],[106,10,83,12],[106,11,83,13,"name"],[106,15,83,17],[106,18,83,20,"name"],[106,22,83,24],[107,6,84,8],[107,10,84,12],[107,11,84,13,"container"],[107,20,84,22],[107,23,84,25,"container"],[107,32,84,34],[108,6,85,8],[108,10,85,12],[108,11,85,13,"component"],[108,20,85,22],[108,23,85,25],[108,27,85,29],[109,6,86,8],[109,10,86,12],[109,11,86,13,"instances"],[109,20,86,22],[109,23,86,25],[109,27,86,29,"Map"],[109,30,86,32],[109,31,86,33],[109,32,86,34],[110,6,87,8],[110,10,87,12],[110,11,87,13,"instancesDeferred"],[110,28,87,30],[110,31,87,33],[110,35,87,37,"Map"],[110,38,87,40],[110,39,87,41],[110,40,87,42],[111,6,88,8],[111,10,88,12],[111,11,88,13,"instancesOptions"],[111,27,88,29],[111,30,88,32],[111,34,88,36,"Map"],[111,37,88,39],[111,38,88,40],[111,39,88,41],[112,6,89,8],[112,10,89,12],[112,11,89,13,"onInitCallbacks"],[112,26,89,28],[112,29,89,31],[112,33,89,35,"Map"],[112,36,89,38],[112,37,89,39],[112,38,89,40],[113,4,90,4],[114,4,91,4],[115,0,92,0],[116,0,93,0],[117,0,94,0],[118,4,95,4,"get"],[118,7,95,7,"get"],[118,8,95,8,"identifier"],[118,18,95,18],[118,20,95,20],[119,6,96,8],[120,6,97,8],[120,12,97,14,"normalizedIdentifier"],[120,32,97,34],[120,35,97,37],[120,39,97,41],[120,40,97,42,"normalizeInstanceIdentifier"],[120,67,97,69],[120,68,97,70,"identifier"],[120,78,97,80],[120,79,97,81],[121,6,98,8],[121,10,98,12],[121,11,98,13],[121,15,98,17],[121,16,98,18,"instancesDeferred"],[121,33,98,35],[121,34,98,36,"has"],[121,37,98,39],[121,38,98,40,"normalizedIdentifier"],[121,58,98,60],[121,59,98,61],[121,61,98,63],[122,8,99,12],[122,14,99,18,"deferred"],[122,22,99,26],[122,25,99,29],[122,29,99,33,"Deferred"],[122,42,99,41],[122,43,99,41,"Deferred"],[122,51,99,41],[122,52,99,42],[122,53,99,43],[123,8,100,12],[123,12,100,16],[123,13,100,17,"instancesDeferred"],[123,30,100,34],[123,31,100,35,"set"],[123,34,100,38],[123,35,100,39,"normalizedIdentifier"],[123,55,100,59],[123,57,100,61,"deferred"],[123,65,100,69],[123,66,100,70],[124,8,101,12],[124,12,101,16],[124,16,101,20],[124,17,101,21,"isInitialized"],[124,30,101,34],[124,31,101,35,"normalizedIdentifier"],[124,51,101,55],[124,52,101,56],[124,56,102,16],[124,60,102,20],[124,61,102,21,"shouldAutoInitialize"],[124,81,102,41],[124,82,102,42],[124,83,102,43],[124,85,102,45],[125,10,103,16],[126,10,104,16],[126,14,104,20],[127,12,105,20],[127,18,105,26,"instance"],[127,26,105,34],[127,29,105,37],[127,33,105,41],[127,34,105,42,"getOrInitializeService"],[127,56,105,64],[127,57,105,65],[128,14,106,24,"instanceIdentifier"],[128,32,106,42],[128,34,106,44,"normalizedIdentifier"],[129,12,107,20],[129,13,107,21],[129,14,107,22],[130,12,108,20],[130,16,108,24,"instance"],[130,24,108,32],[130,26,108,34],[131,14,109,24,"deferred"],[131,22,109,32],[131,23,109,33,"resolve"],[131,30,109,40],[131,31,109,41,"instance"],[131,39,109,49],[131,40,109,50],[132,12,110,20],[133,10,111,16],[133,11,111,17],[133,12,112,16],[133,19,112,23,"e"],[133,20,112,24],[133,22,112,26],[134,12,113,20],[135,12,114,20],[136,10,114,20],[137,8,116,12],[138,6,117,8],[139,6,118,8],[139,13,118,15],[139,17,118,19],[139,18,118,20,"instancesDeferred"],[139,35,118,37],[139,36,118,38,"get"],[139,39,118,41],[139,40,118,42,"normalizedIdentifier"],[139,60,118,62],[139,61,118,63],[139,62,118,64,"promise"],[139,69,118,71],[140,4,119,4],[141,4,120,4,"getImmediate"],[141,16,120,16,"getImmediate"],[141,17,120,17,"options"],[141,24,120,24],[141,26,120,26],[142,6,121,8],[143,6,122,8],[143,12,122,14,"normalizedIdentifier"],[143,32,122,34],[143,35,122,37],[143,39,122,41],[143,40,122,42,"normalizeInstanceIdentifier"],[143,67,122,69],[143,68,122,70,"options"],[143,75,122,77],[143,77,122,79,"identifier"],[143,87,122,89],[143,88,122,90],[144,6,123,8],[144,12,123,14,"optional"],[144,20,123,22],[144,23,123,25,"options"],[144,30,123,32],[144,32,123,34,"optional"],[144,40,123,42],[144,44,123,46],[144,49,123,51],[145,6,124,8],[145,10,124,12],[145,14,124,16],[145,15,124,17,"isInitialized"],[145,28,124,30],[145,29,124,31,"normalizedIdentifier"],[145,49,124,51],[145,50,124,52],[145,54,125,12],[145,58,125,16],[145,59,125,17,"shouldAutoInitialize"],[145,79,125,37],[145,80,125,38],[145,81,125,39],[145,83,125,41],[146,8,126,12],[146,12,126,16],[147,10,127,16],[147,17,127,23],[147,21,127,27],[147,22,127,28,"getOrInitializeService"],[147,44,127,50],[147,45,127,51],[148,12,128,20,"instanceIdentifier"],[148,30,128,38],[148,32,128,40,"normalizedIdentifier"],[149,10,129,16],[149,11,129,17],[149,12,129,18],[150,8,130,12],[150,9,130,13],[150,10,131,12],[150,17,131,19,"e"],[150,18,131,20],[150,20,131,22],[151,10,132,16],[151,14,132,20,"optional"],[151,22,132,28],[151,24,132,30],[152,12,133,20],[152,19,133,27],[152,23,133,31],[153,10,134,16],[153,11,134,17],[153,17,135,21],[154,12,136,20],[154,18,136,26,"e"],[154,19,136,27],[155,10,137,16],[156,8,138,12],[157,6,139,8],[157,7,139,9],[157,13,140,13],[158,8,141,12],[159,8,142,12],[159,12,142,16,"optional"],[159,20,142,24],[159,22,142,26],[160,10,143,16],[160,17,143,23],[160,21,143,27],[161,8,144,12],[161,9,144,13],[161,15,145,17],[162,10,146,16],[162,16,146,22,"Error"],[162,21,146,27],[162,22,146,28],[162,33,146,39],[162,37,146,43],[162,38,146,44,"name"],[162,42,146,48],[162,61,146,67],[162,62,146,68],[163,8,147,12],[164,6,148,8],[165,4,149,4],[166,4,150,4,"getComponent"],[166,16,150,16,"getComponent"],[166,17,150,16],[166,19,150,19],[167,6,151,8],[167,13,151,15],[167,17,151,19],[167,18,151,20,"component"],[167,27,151,29],[168,4,152,4],[169,4,153,4,"setComponent"],[169,16,153,16,"setComponent"],[169,17,153,17,"component"],[169,26,153,26],[169,28,153,28],[170,6,154,8],[170,10,154,12,"component"],[170,19,154,21],[170,20,154,22,"name"],[170,24,154,26],[170,29,154,31],[170,33,154,35],[170,34,154,36,"name"],[170,38,154,40],[170,40,154,42],[171,8,155,12],[171,14,155,18,"Error"],[171,19,155,23],[171,20,155,24],[171,45,155,49,"component"],[171,54,155,58],[171,55,155,59,"name"],[171,59,155,63],[171,76,155,80],[171,80,155,84],[171,81,155,85,"name"],[171,85,155,89],[171,88,155,92],[171,89,155,93],[172,6,156,8],[173,6,157,8],[173,10,157,12],[173,14,157,16],[173,15,157,17,"component"],[173,24,157,26],[173,26,157,28],[174,8,158,12],[174,14,158,18,"Error"],[174,19,158,23],[174,20,158,24],[174,37,158,41],[174,41,158,45],[174,42,158,46,"name"],[174,46,158,50],[174,74,158,78],[174,75,158,79],[175,6,159,8],[176,6,160,8],[176,10,160,12],[176,11,160,13,"component"],[176,20,160,22],[176,23,160,25,"component"],[176,32,160,34],[177,6,161,8],[178,6,162,8],[178,10,162,12],[178,11,162,13],[178,15,162,17],[178,16,162,18,"shouldAutoInitialize"],[178,36,162,38],[178,37,162,39],[178,38,162,40],[178,40,162,42],[179,8,163,12],[180,6,164,8],[181,6,165,8],[182,6,166,8],[182,10,166,12,"isComponentEager"],[182,26,166,28],[182,27,166,29,"component"],[182,36,166,38],[182,37,166,39],[182,39,166,41],[183,8,167,12],[183,12,167,16],[184,10,168,16],[184,14,168,20],[184,15,168,21,"getOrInitializeService"],[184,37,168,43],[184,38,168,44],[185,12,168,46,"instanceIdentifier"],[185,30,168,64],[185,32,168,66,"DEFAULT_ENTRY_NAME"],[186,10,168,85],[186,11,168,86],[186,12,168,87],[187,8,169,12],[187,9,169,13],[187,10,170,12],[187,17,170,19,"e"],[187,18,170,20],[187,20,170,22],[188,10,171,16],[189,10,172,16],[190,10,173,16],[191,10,174,16],[192,8,174,16],[193,6,176,8],[194,6,177,8],[195,6,178,8],[196,6,179,8],[197,6,180,8],[197,11,180,13],[197,17,180,19],[197,18,180,20,"instanceIdentifier"],[197,36,180,38],[197,38,180,40,"instanceDeferred"],[197,54,180,56],[197,55,180,57],[197,59,180,61],[197,63,180,65],[197,64,180,66,"instancesDeferred"],[197,81,180,83],[197,82,180,84,"entries"],[197,89,180,91],[197,90,180,92],[197,91,180,93],[197,93,180,95],[198,8,181,12],[198,14,181,18,"normalizedIdentifier"],[198,34,181,38],[198,37,181,41],[198,41,181,45],[198,42,181,46,"normalizeInstanceIdentifier"],[198,69,181,73],[198,70,181,74,"instanceIdentifier"],[198,88,181,92],[198,89,181,93],[199,8,182,12],[199,12,182,16],[200,10,183,16],[201,10,184,16],[201,16,184,22,"instance"],[201,24,184,30],[201,27,184,33],[201,31,184,37],[201,32,184,38,"getOrInitializeService"],[201,54,184,60],[201,55,184,61],[202,12,185,20,"instanceIdentifier"],[202,30,185,38],[202,32,185,40,"normalizedIdentifier"],[203,10,186,16],[203,11,186,17],[203,12,186,18],[204,10,187,16,"instanceDeferred"],[204,26,187,32],[204,27,187,33,"resolve"],[204,34,187,40],[204,35,187,41,"instance"],[204,43,187,49],[204,44,187,50],[205,8,188,12],[205,9,188,13],[205,10,189,12],[205,17,189,19,"e"],[205,18,189,20],[205,20,189,22],[206,10,190,16],[207,10,191,16],[208,8,191,16],[209,6,193,8],[210,4,194,4],[211,4,195,4,"clearInstance"],[211,17,195,17,"clearInstance"],[211,18,195,18,"identifier"],[211,28,195,28],[211,31,195,31,"DEFAULT_ENTRY_NAME"],[211,49,195,49],[211,51,195,51],[212,6,196,8],[212,10,196,12],[212,11,196,13,"instancesDeferred"],[212,28,196,30],[212,29,196,31,"delete"],[212,35,196,37],[212,36,196,38,"identifier"],[212,46,196,48],[212,47,196,49],[213,6,197,8],[213,10,197,12],[213,11,197,13,"instancesOptions"],[213,27,197,29],[213,28,197,30,"delete"],[213,34,197,36],[213,35,197,37,"identifier"],[213,45,197,47],[213,46,197,48],[214,6,198,8],[214,10,198,12],[214,11,198,13,"instances"],[214,20,198,22],[214,21,198,23,"delete"],[214,27,198,29],[214,28,198,30,"identifier"],[214,38,198,40],[214,39,198,41],[215,4,199,4],[216,4,200,4],[217,4,201,4],[218,4,202,4],[218,10,202,10,"delete"],[218,16,202,16,"delete"],[218,17,202,16],[218,19,202,19],[219,6,203,8],[219,12,203,14,"services"],[219,20,203,22],[219,23,203,25,"Array"],[219,28,203,30],[219,29,203,31,"from"],[219,33,203,35],[219,34,203,36],[219,38,203,40],[219,39,203,41,"instances"],[219,48,203,50],[219,49,203,51,"values"],[219,55,203,57],[219,56,203,58],[219,57,203,59],[219,58,203,60],[220,6,204,8],[220,12,204,14,"Promise"],[220,19,204,21],[220,20,204,22,"all"],[220,23,204,25],[220,24,204,26],[220,25,205,12],[220,28,205,15,"services"],[220,36,205,23],[220,37,206,17,"filter"],[220,43,206,23],[220,44,206,24,"service"],[220,51,206,31],[220,55,206,35],[220,65,206,45],[220,69,206,49,"service"],[220,76,206,56],[220,77,206,57],[220,78,206,58],[221,6,207,16],[222,6,207,16],[222,7,208,17,"map"],[222,10,208,20],[222,11,208,21,"service"],[222,18,208,28],[222,22,208,32,"service"],[222,29,208,39],[222,30,208,40,"INTERNAL"],[222,38,208,48],[222,39,208,49,"delete"],[222,45,208,55],[222,46,208,56],[222,47,208,57],[222,48,208,58],[222,50,209,12],[222,53,209,15,"services"],[222,61,209,23],[222,62,210,17,"filter"],[222,68,210,23],[222,69,210,24,"service"],[222,76,210,31],[222,80,210,35],[222,89,210,44],[222,93,210,48,"service"],[222,100,210,55],[222,101,210,56],[222,102,210,57],[223,6,211,16],[224,6,211,16],[224,7,212,17,"map"],[224,10,212,20],[224,11,212,21,"service"],[224,18,212,28],[224,22,212,32,"service"],[224,29,212,39],[224,30,212,40,"_delete"],[224,37,212,47],[224,38,212,48],[224,39,212,49],[224,40,212,50],[224,41,213,9],[224,42,213,10],[225,4,214,4],[226,4,215,4,"isComponentSet"],[226,18,215,18,"isComponentSet"],[226,19,215,18],[226,21,215,21],[227,6,216,8],[227,13,216,15],[227,17,216,19],[227,18,216,20,"component"],[227,27,216,29],[227,31,216,33],[227,35,216,37],[228,4,217,4],[229,4,218,4,"isInitialized"],[229,17,218,17,"isInitialized"],[229,18,218,18,"identifier"],[229,28,218,28],[229,31,218,31,"DEFAULT_ENTRY_NAME"],[229,49,218,49],[229,51,218,51],[230,6,219,8],[230,13,219,15],[230,17,219,19],[230,18,219,20,"instances"],[230,27,219,29],[230,28,219,30,"has"],[230,31,219,33],[230,32,219,34,"identifier"],[230,42,219,44],[230,43,219,45],[231,4,220,4],[232,4,221,4,"getOptions"],[232,14,221,14,"getOptions"],[232,15,221,15,"identifier"],[232,25,221,25],[232,28,221,28,"DEFAULT_ENTRY_NAME"],[232,46,221,46],[232,48,221,48],[233,6,222,8],[233,13,222,15],[233,17,222,19],[233,18,222,20,"instancesOptions"],[233,34,222,36],[233,35,222,37,"get"],[233,38,222,40],[233,39,222,41,"identifier"],[233,49,222,51],[233,50,222,52],[233,54,222,56],[233,55,222,57],[233,56,222,58],[234,4,223,4],[235,4,224,4,"initialize"],[235,14,224,14,"initialize"],[235,15,224,15,"opts"],[235,19,224,19],[235,22,224,22],[235,23,224,23],[235,24,224,24],[235,26,224,26],[236,6,225,8],[236,12,225,14],[237,8,225,16,"options"],[237,15,225,23],[237,18,225,26],[237,19,225,27],[238,6,225,29],[238,7,225,30],[238,10,225,33,"opts"],[238,14,225,37],[239,6,226,8],[239,12,226,14,"normalizedIdentifier"],[239,32,226,34],[239,35,226,37],[239,39,226,41],[239,40,226,42,"normalizeInstanceIdentifier"],[239,67,226,69],[239,68,226,70,"opts"],[239,72,226,74],[239,73,226,75,"instanceIdentifier"],[239,91,226,93],[239,92,226,94],[240,6,227,8],[240,10,227,12],[240,14,227,16],[240,15,227,17,"isInitialized"],[240,28,227,30],[240,29,227,31,"normalizedIdentifier"],[240,49,227,51],[240,50,227,52],[240,52,227,54],[241,8,228,12],[241,14,228,18,"Error"],[241,19,228,23],[241,20,228,24],[241,23,228,27],[241,27,228,31],[241,28,228,32,"name"],[241,32,228,36],[241,36,228,40,"normalizedIdentifier"],[241,56,228,60],[241,88,228,92],[241,89,228,93],[242,6,229,8],[243,6,230,8],[243,10,230,12],[243,11,230,13],[243,15,230,17],[243,16,230,18,"isComponentSet"],[243,30,230,32],[243,31,230,33],[243,32,230,34],[243,34,230,36],[244,8,231,12],[244,14,231,18,"Error"],[244,19,231,23],[244,20,231,24],[244,33,231,37],[244,37,231,41],[244,38,231,42,"name"],[244,42,231,46],[244,72,231,76],[244,73,231,77],[245,6,232,8],[246,6,233,8],[246,12,233,14,"instance"],[246,20,233,22],[246,23,233,25],[246,27,233,29],[246,28,233,30,"getOrInitializeService"],[246,50,233,52],[246,51,233,53],[247,8,234,12,"instanceIdentifier"],[247,26,234,30],[247,28,234,32,"normalizedIdentifier"],[247,48,234,52],[248,8,235,12,"options"],[249,6,236,8],[249,7,236,9],[249,8,236,10],[250,6,237,8],[251,6,238,8],[251,11,238,13],[251,17,238,19],[251,18,238,20,"instanceIdentifier"],[251,36,238,38],[251,38,238,40,"instanceDeferred"],[251,54,238,56],[251,55,238,57],[251,59,238,61],[251,63,238,65],[251,64,238,66,"instancesDeferred"],[251,81,238,83],[251,82,238,84,"entries"],[251,89,238,91],[251,90,238,92],[251,91,238,93],[251,93,238,95],[252,8,239,12],[252,14,239,18,"normalizedDeferredIdentifier"],[252,42,239,46],[252,45,239,49],[252,49,239,53],[252,50,239,54,"normalizeInstanceIdentifier"],[252,77,239,81],[252,78,239,82,"instanceIdentifier"],[252,96,239,100],[252,97,239,101],[253,8,240,12],[253,12,240,16,"normalizedIdentifier"],[253,32,240,36],[253,37,240,41,"normalizedDeferredIdentifier"],[253,65,240,69],[253,67,240,71],[254,10,241,16,"instanceDeferred"],[254,26,241,32],[254,27,241,33,"resolve"],[254,34,241,40],[254,35,241,41,"instance"],[254,43,241,49],[254,44,241,50],[255,8,242,12],[256,6,243,8],[257,6,244,8],[257,13,244,15,"instance"],[257,21,244,23],[258,4,245,4],[259,4,246,4],[260,0,247,0],[261,0,248,0],[262,0,249,0],[263,0,250,0],[264,0,251,0],[265,0,252,0],[266,0,253,0],[267,4,254,4,"onInit"],[267,10,254,10,"onInit"],[267,11,254,11,"callback"],[267,19,254,19],[267,21,254,21,"identifier"],[267,31,254,31],[267,33,254,33],[268,6,255,8],[268,12,255,14,"normalizedIdentifier"],[268,32,255,34],[268,35,255,37],[268,39,255,41],[268,40,255,42,"normalizeInstanceIdentifier"],[268,67,255,69],[268,68,255,70,"identifier"],[268,78,255,80],[268,79,255,81],[269,6,256,8],[269,12,256,14,"existingCallbacks"],[269,29,256,31],[269,32,256,34],[269,36,256,38],[269,37,256,39,"onInitCallbacks"],[269,52,256,54],[269,53,256,55,"get"],[269,56,256,58],[269,57,256,59,"normalizedIdentifier"],[269,77,256,79],[269,78,256,80],[269,82,257,12],[269,86,257,16,"Set"],[269,89,257,19],[269,90,257,20],[269,91,257,21],[270,6,258,8,"existingCallbacks"],[270,23,258,25],[270,24,258,26,"add"],[270,27,258,29],[270,28,258,30,"callback"],[270,36,258,38],[270,37,258,39],[271,6,259,8],[271,10,259,12],[271,11,259,13,"onInitCallbacks"],[271,26,259,28],[271,27,259,29,"set"],[271,30,259,32],[271,31,259,33,"normalizedIdentifier"],[271,51,259,53],[271,53,259,55,"existingCallbacks"],[271,70,259,72],[271,71,259,73],[272,6,260,8],[272,12,260,14,"existingInstance"],[272,28,260,30],[272,31,260,33],[272,35,260,37],[272,36,260,38,"instances"],[272,45,260,47],[272,46,260,48,"get"],[272,49,260,51],[272,50,260,52,"normalizedIdentifier"],[272,70,260,72],[272,71,260,73],[273,6,261,8],[273,10,261,12,"existingInstance"],[273,26,261,28],[273,28,261,30],[274,8,262,12,"callback"],[274,16,262,20],[274,17,262,21,"existingInstance"],[274,33,262,37],[274,35,262,39,"normalizedIdentifier"],[274,55,262,59],[274,56,262,60],[275,6,263,8],[276,6,264,8],[276,13,264,15],[276,19,264,21],[277,8,265,12,"existingCallbacks"],[277,25,265,29],[277,26,265,30,"delete"],[277,32,265,36],[277,33,265,37,"callback"],[277,41,265,45],[277,42,265,46],[278,6,266,8],[278,7,266,9],[279,4,267,4],[280,4,268,4],[281,0,269,0],[282,0,270,0],[283,0,271,0],[284,4,272,4,"invokeOnInitCallbacks"],[284,25,272,25,"invokeOnInitCallbacks"],[284,26,272,26,"instance"],[284,34,272,34],[284,36,272,36,"identifier"],[284,46,272,46],[284,48,272,48],[285,6,273,8],[285,12,273,14,"callbacks"],[285,21,273,23],[285,24,273,26],[285,28,273,30],[285,29,273,31,"onInitCallbacks"],[285,44,273,46],[285,45,273,47,"get"],[285,48,273,50],[285,49,273,51,"identifier"],[285,59,273,61],[285,60,273,62],[286,6,274,8],[286,10,274,12],[286,11,274,13,"callbacks"],[286,20,274,22],[286,22,274,24],[287,8,275,12],[288,6,276,8],[289,6,277,8],[289,11,277,13],[289,17,277,19,"callback"],[289,25,277,27],[289,29,277,31,"callbacks"],[289,38,277,40],[289,40,277,42],[290,8,278,12],[290,12,278,16],[291,10,279,16,"callback"],[291,18,279,24],[291,19,279,25,"instance"],[291,27,279,33],[291,29,279,35,"identifier"],[291,39,279,45],[291,40,279,46],[292,8,280,12],[292,9,280,13],[292,10,281,12],[292,16,281,18],[293,10,282,16],[294,8,282,16],[295,6,284,8],[296,4,285,4],[297,4,286,4,"getOrInitializeService"],[297,26,286,26,"getOrInitializeService"],[297,27,286,27],[298,6,286,29,"instanceIdentifier"],[298,24,286,47],[299,6,286,49,"options"],[299,13,286,56],[299,16,286,59],[299,17,286,60],[300,4,286,62],[300,5,286,63],[300,7,286,65],[301,6,287,8],[301,10,287,12,"instance"],[301,18,287,20],[301,21,287,23],[301,25,287,27],[301,26,287,28,"instances"],[301,35,287,37],[301,36,287,38,"get"],[301,39,287,41],[301,40,287,42,"instanceIdentifier"],[301,58,287,60],[301,59,287,61],[302,6,288,8],[302,10,288,12],[302,11,288,13,"instance"],[302,19,288,21],[302,23,288,25],[302,27,288,29],[302,28,288,30,"component"],[302,37,288,39],[302,39,288,41],[303,8,289,12,"instance"],[303,16,289,20],[303,19,289,23],[303,23,289,27],[303,24,289,28,"component"],[303,33,289,37],[303,34,289,38,"instanceFactory"],[303,49,289,53],[303,50,289,54],[303,54,289,58],[303,55,289,59,"container"],[303,64,289,68],[303,66,289,70],[304,10,290,16,"instanceIdentifier"],[304,28,290,34],[304,30,290,36,"normalizeIdentifierForFactory"],[304,59,290,65],[304,60,290,66,"instanceIdentifier"],[304,78,290,84],[304,79,290,85],[305,10,291,16,"options"],[306,8,292,12],[306,9,292,13],[306,10,292,14],[307,8,293,12],[307,12,293,16],[307,13,293,17,"instances"],[307,22,293,26],[307,23,293,27,"set"],[307,26,293,30],[307,27,293,31,"instanceIdentifier"],[307,45,293,49],[307,47,293,51,"instance"],[307,55,293,59],[307,56,293,60],[308,8,294,12],[308,12,294,16],[308,13,294,17,"instancesOptions"],[308,29,294,33],[308,30,294,34,"set"],[308,33,294,37],[308,34,294,38,"instanceIdentifier"],[308,52,294,56],[308,54,294,58,"options"],[308,61,294,65],[308,62,294,66],[309,8,295,12],[310,0,296,0],[311,0,297,0],[312,0,298,0],[313,0,299,0],[314,8,300,12],[314,12,300,16],[314,13,300,17,"invokeOnInitCallbacks"],[314,34,300,38],[314,35,300,39,"instance"],[314,43,300,47],[314,45,300,49,"instanceIdentifier"],[314,63,300,67],[314,64,300,68],[315,8,301,12],[316,0,302,0],[317,0,303,0],[318,0,304,0],[319,0,305,0],[320,8,306,12],[320,12,306,16],[320,16,306,20],[320,17,306,21,"component"],[320,26,306,30],[320,27,306,31,"onInstanceCreated"],[320,44,306,48],[320,46,306,50],[321,10,307,16],[321,14,307,20],[322,12,308,20],[322,16,308,24],[322,17,308,25,"component"],[322,26,308,34],[322,27,308,35,"onInstanceCreated"],[322,44,308,52],[322,45,308,53],[322,49,308,57],[322,50,308,58,"container"],[322,59,308,67],[322,61,308,69,"instanceIdentifier"],[322,79,308,87],[322,81,308,89,"instance"],[322,89,308,97],[322,90,308,98],[323,10,309,16],[323,11,309,17],[323,12,310,16],[323,18,310,22],[324,12,311,20],[325,10,311,20],[326,8,313,12],[327,6,314,8],[328,6,315,8],[328,13,315,15,"instance"],[328,21,315,23],[328,25,315,27],[328,29,315,31],[329,4,316,4],[330,4,317,4,"normalizeInstanceIdentifier"],[330,31,317,31,"normalizeInstanceIdentifier"],[330,32,317,32,"identifier"],[330,42,317,42],[330,45,317,45,"DEFAULT_ENTRY_NAME"],[330,63,317,63],[330,65,317,65],[331,6,318,8],[331,10,318,12],[331,14,318,16],[331,15,318,17,"component"],[331,24,318,26],[331,26,318,28],[332,8,319,12],[332,15,319,19],[332,19,319,23],[332,20,319,24,"component"],[332,29,319,33],[332,30,319,34,"multipleInstances"],[332,47,319,51],[332,50,319,54,"identifier"],[332,60,319,64],[332,63,319,67,"DEFAULT_ENTRY_NAME"],[332,81,319,85],[333,6,320,8],[333,7,320,9],[333,13,321,13],[334,8,322,12],[334,15,322,19,"identifier"],[334,25,322,29],[334,26,322,30],[334,27,322,31],[335,6,323,8],[336,4,324,4],[337,4,325,4,"shouldAutoInitialize"],[337,24,325,24,"shouldAutoInitialize"],[337,25,325,24],[337,27,325,27],[338,6,326,8],[338,13,326,16],[338,14,326,17],[338,15,326,18],[338,19,326,22],[338,20,326,23,"component"],[338,29,326,32],[338,33,327,12],[338,37,327,16],[338,38,327,17,"component"],[338,47,327,26],[338,48,327,27,"instantiationMode"],[338,65,327,44],[338,70,327,49],[338,80,327,59],[338,81,327,60],[339,4,328,4],[340,2,329,0],[341,2,330,0],[342,2,331,0],[342,11,331,9,"normalizeIdentifierForFactory"],[342,40,331,38,"normalizeIdentifierForFactory"],[342,41,331,39,"identifier"],[342,51,331,49],[342,53,331,51],[343,4,332,4],[343,11,332,11,"identifier"],[343,21,332,21],[343,26,332,26,"DEFAULT_ENTRY_NAME"],[343,44,332,44],[343,47,332,47,"undefined"],[343,56,332,56],[343,59,332,59,"identifier"],[343,69,332,69],[344,2,333,0],[345,2,334,0],[345,11,334,9,"isComponentEager"],[345,27,334,25,"isComponentEager"],[345,28,334,26,"component"],[345,37,334,35],[345,39,334,37],[346,4,335,4],[346,11,335,11,"component"],[346,20,335,20],[346,21,335,21,"instantiationMode"],[346,38,335,38],[346,43,335,43],[346,50,335,50],[346,51,335,51],[347,2,336,0],[349,2,338,0],[350,0,339,0],[351,0,340,0],[352,0,341,0],[353,0,342,0],[354,0,343,0],[355,0,344,0],[356,0,345,0],[357,0,346,0],[358,0,347,0],[359,0,348,0],[360,0,349,0],[361,0,350,0],[362,0,351,0],[363,0,352,0],[364,0,353,0],[365,2,354,0],[366,0,355,0],[367,0,356,0],[368,2,357,0],[368,8,357,6,"ComponentContainer"],[368,26,357,24],[368,27,357,25],[369,4,358,4,"constructor"],[369,15,358,15,"constructor"],[369,16,358,16,"name"],[369,20,358,20],[369,22,358,22],[370,6,359,8],[370,10,359,12],[370,11,359,13,"name"],[370,15,359,17],[370,18,359,20,"name"],[370,22,359,24],[371,6,360,8],[371,10,360,12],[371,11,360,13,"providers"],[371,20,360,22],[371,23,360,25],[371,27,360,29,"Map"],[371,30,360,32],[371,31,360,33],[371,32,360,34],[372,4,361,4],[373,4,362,4],[374,0,363,0],[375,0,364,0],[376,0,365,0],[377,0,366,0],[378,0,367,0],[379,0,368,0],[380,0,369,0],[381,0,370,0],[382,4,371,4,"addComponent"],[382,16,371,16,"addComponent"],[382,17,371,17,"component"],[382,26,371,26],[382,28,371,28],[383,6,372,8],[383,12,372,14,"provider"],[383,20,372,22],[383,23,372,25],[383,27,372,29],[383,28,372,30,"getProvider"],[383,39,372,41],[383,40,372,42,"component"],[383,49,372,51],[383,50,372,52,"name"],[383,54,372,56],[383,55,372,57],[384,6,373,8],[384,10,373,12,"provider"],[384,18,373,20],[384,19,373,21,"isComponentSet"],[384,33,373,35],[384,34,373,36],[384,35,373,37],[384,37,373,39],[385,8,374,12],[385,14,374,18],[385,18,374,22,"Error"],[385,23,374,27],[385,24,374,28],[385,37,374,41,"component"],[385,46,374,50],[385,47,374,51,"name"],[385,51,374,55],[385,88,374,92],[385,92,374,96],[385,93,374,97,"name"],[385,97,374,101],[385,99,374,103],[385,100,374,104],[386,6,375,8],[387,6,376,8,"provider"],[387,14,376,16],[387,15,376,17,"setComponent"],[387,27,376,29],[387,28,376,30,"component"],[387,37,376,39],[387,38,376,40],[388,4,377,4],[389,4,378,4,"addOrOverwriteComponent"],[389,27,378,27,"addOrOverwriteComponent"],[389,28,378,28,"component"],[389,37,378,37],[389,39,378,39],[390,6,379,8],[390,12,379,14,"provider"],[390,20,379,22],[390,23,379,25],[390,27,379,29],[390,28,379,30,"getProvider"],[390,39,379,41],[390,40,379,42,"component"],[390,49,379,51],[390,50,379,52,"name"],[390,54,379,56],[390,55,379,57],[391,6,380,8],[391,10,380,12,"provider"],[391,18,380,20],[391,19,380,21,"isComponentSet"],[391,33,380,35],[391,34,380,36],[391,35,380,37],[391,37,380,39],[392,8,381,12],[393,8,382,12],[393,12,382,16],[393,13,382,17,"providers"],[393,22,382,26],[393,23,382,27,"delete"],[393,29,382,33],[393,30,382,34,"component"],[393,39,382,43],[393,40,382,44,"name"],[393,44,382,48],[393,45,382,49],[394,6,383,8],[395,6,384,8],[395,10,384,12],[395,11,384,13,"addComponent"],[395,23,384,25],[395,24,384,26,"component"],[395,33,384,35],[395,34,384,36],[396,4,385,4],[397,4,386,4],[398,0,387,0],[399,0,388,0],[400,0,389,0],[401,0,390,0],[402,0,391,0],[403,0,392,0],[404,4,393,4,"getProvider"],[404,15,393,15,"getProvider"],[404,16,393,16,"name"],[404,20,393,20],[404,22,393,22],[405,6,394,8],[405,10,394,12],[405,14,394,16],[405,15,394,17,"providers"],[405,24,394,26],[405,25,394,27,"has"],[405,28,394,30],[405,29,394,31,"name"],[405,33,394,35],[405,34,394,36],[405,36,394,38],[406,8,395,12],[406,15,395,19],[406,19,395,23],[406,20,395,24,"providers"],[406,29,395,33],[406,30,395,34,"get"],[406,33,395,37],[406,34,395,38,"name"],[406,38,395,42],[406,39,395,43],[407,6,396,8],[408,6,397,8],[409,6,398,8],[409,12,398,14,"provider"],[409,20,398,22],[409,23,398,25],[409,27,398,29,"Provider"],[409,35,398,37],[409,36,398,38,"name"],[409,40,398,42],[409,42,398,44],[409,46,398,48],[409,47,398,49],[410,6,399,8],[410,10,399,12],[410,11,399,13,"providers"],[410,20,399,22],[410,21,399,23,"set"],[410,24,399,26],[410,25,399,27,"name"],[410,29,399,31],[410,31,399,33,"provider"],[410,39,399,41],[410,40,399,42],[411,6,400,8],[411,13,400,15,"provider"],[411,21,400,23],[412,4,401,4],[413,4,402,4,"getProviders"],[413,16,402,16,"getProviders"],[413,17,402,16],[413,19,402,19],[414,6,403,8],[414,13,403,15,"Array"],[414,18,403,20],[414,19,403,21,"from"],[414,23,403,25],[414,24,403,26],[414,28,403,30],[414,29,403,31,"providers"],[414,38,403,40],[414,39,403,41,"values"],[414,45,403,47],[414,46,403,48],[414,47,403,49],[414,48,403,50],[415,4,404,4],[416,2,405,0],[417,0,405,1],[417,3]],"functionMap":{"names":["<global>","Component","Component#constructor","Component#setInstantiationMode","Component#setMultipleInstances","Component#setServiceProps","Component#setInstanceCreatedCallback","Provider","Provider#constructor","Provider#get","Provider#getImmediate","Provider#getComponent","Provider#setComponent","Provider#clearInstance","Provider#_delete","services.filter$argument_0","services.filter.map$argument_0","Provider#isComponentSet","Provider#isInitialized","Provider#getOptions","Provider#initialize","Provider#onInit","<anonymous>","Provider#invokeOnInitCallbacks","Provider#getOrInitializeService","Provider#normalizeInstanceIdentifier","Provider#shouldAutoInitialize","normalizeIdentifierForFactory","isComponentEager","ComponentContainer","ComponentContainer#constructor","ComponentContainer#addComponent","ComponentContainer#addOrOverwriteComponent","ComponentContainer#getProvider","ComponentContainer#getProviders"],"mappings":"AAA;ACK;ICO;KDW;IEC;KFG;IGC;KHG;IIC;KJG;IKC;KLG;CDC;AOwC;ICC;KDQ;IEK;KFwB;IGC;KH6B;IIC;KJE;IKC;KLyC;IMC;KNI;IOG;wBCI,gCD;qBEE,oCF;wBCE,+BD;qBEE,4BF;KPE;IUC;KVE;IWC;KXE;IYC;KZE;IaC;KbqB;IcS;eCU;SDE;KdC;IgBK;KhBa;IiBC;KjB8B;IkBC;KlBO;ImBC;KnBG;CPC;A2BE;C3BE;A4BC;C5BE;A6BqB;ICC;KDG;IEU;KFM;IGC;KHO;IIQ;KJQ;IKC;KLE;C7BC"},"hasCjsExports":false},"type":"js/module"}]}