{"dependencies":[{"name":"@react-stately/toggle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"6bmSd31+eNkQ9N718MDmkg/hVg0=","exportNames":["*"],"imports":1}},{"name":"@react-aria/label","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":45,"index":101}}],"key":"5wzhdZHdQjf2PCDavajv7B5b+u8=","exportNames":["*"],"imports":1}},{"name":"@react-aria/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":102},"end":{"line":3,"column":63,"index":165}}],"key":"1YkQy8j1AiEA5UJkjTUYe2TKBMU=","exportNames":["*"],"imports":1}},{"name":"@react-aria/toggle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":166},"end":{"line":4,"column":47,"index":213}}],"key":"ovlazxxdUEbZxAImSFOpgRLMZjk=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":214},"end":{"line":5,"column":34,"index":248}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/esm/extends","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":249},"end":{"line":6,"column":80,"index":329}}],"key":"gl2ZgOYyY6D11DMpqsIzlL3I5u4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useCheckbox = useCheckbox;\n  exports.useCheckboxGroup = useCheckboxGroup;\n  exports.useCheckboxGroupItem = useCheckboxGroupItem;\n  var _reactStatelyToggle = require(_dependencyMap[0], \"@react-stately/toggle\");\n  var _reactAriaLabel = require(_dependencyMap[1], \"@react-aria/label\");\n  var _reactAriaUtils = require(_dependencyMap[2], \"@react-aria/utils\");\n  var _reactAriaToggle = require(_dependencyMap[3], \"@react-aria/toggle\");\n  var _react = require(_dependencyMap[4], \"react\");\n  var _babelRuntimeHelpersEsmExtends2 = require(_dependencyMap[5], \"@babel/runtime/helpers/esm/extends\");\n  var _babelRuntimeHelpersEsmExtends = _interopDefault(_babelRuntimeHelpersEsmExtends2);\n  /**\n   * Provides the behavior and accessibility implementation for a checkbox component.\n   * Checkboxes allow users to select multiple items from a list of individual items, or\n   * to mark one individual item as selected.\n   * @param props - Props for the checkbox.\n   * @param state - State for the checkbox, as returned by `useToggleState`.\n   * @param inputRef - A ref for the HTML input element.\n   */\n  function useCheckbox(props, state, inputRef) {\n    let {\n      inputProps\n    } = (0, _reactAriaToggle.useToggle)(props, state, inputRef);\n    let {\n      isSelected\n    } = state;\n    let {\n      isIndeterminate\n    } = props;\n    (0, _react.useEffect)(() => {\n      // indeterminate is a property, but it can only be set via javascript\n      // https://css-tricks.com/indeterminate-checkboxes/\n      if (inputRef.current) {\n        inputRef.current.indeterminate = isIndeterminate;\n      }\n    });\n    return {\n      inputProps: (0, _babelRuntimeHelpersEsmExtends.default)({}, inputProps, {\n        checked: isSelected,\n        'aria-checked': isIndeterminate ? 'mixed' : isSelected\n      })\n    };\n  }\n\n  /*\n   * Copyright 2020 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n  const $c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames = new WeakMap();\n\n  /**\n   * Provides the behavior and accessibility implementation for a checkbox group component.\n   * Checkbox groups allow users to select multiple items from a list of options.\n   * @param props - Props for the checkbox group.\n   * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n   */\n  function useCheckboxGroup(props, state) {\n    let {\n      isDisabled,\n      name\n    } = props;\n    let {\n      labelProps,\n      fieldProps\n    } = (0, _reactAriaLabel.useLabel)((0, _babelRuntimeHelpersEsmExtends.default)({}, props, {\n      // Checkbox group is not an HTML input element so it\n      // shouldn't be labeled by a <label> element.\n      labelElementType: 'span'\n    }));\n    let domProps = (0, _reactAriaUtils.filterDOMProps)(props, {\n      labelable: true\n    }); // Pass name prop from group to all items by attaching to the state.\n\n    $c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames.set(state, name);\n    return {\n      groupProps: (0, _reactAriaUtils.mergeProps)(domProps, (0, _babelRuntimeHelpersEsmExtends.default)({\n        role: 'group',\n        'aria-disabled': isDisabled || undefined\n      }, fieldProps)),\n      labelProps\n    };\n  }\n\n  /**\n   * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n   * Checkbox groups allow users to select multiple items from a list of options.\n   * @param props - Props for the checkbox.\n   * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n   * @param inputRef - A ref for the HTML input element.\n   */\n  function useCheckboxGroupItem(props, state, inputRef) {\n    const toggleState = (0, _reactStatelyToggle.useToggleState)({\n      isReadOnly: props.isReadOnly || state.isReadOnly,\n      isSelected: state.isSelected(props.value),\n      onChange(isSelected) {\n        if (isSelected) {\n          state.addValue(props.value);\n        } else {\n          state.removeValue(props.value);\n        }\n        if (props.onChange) {\n          props.onChange(isSelected);\n        }\n      }\n    });\n    let {\n      inputProps\n    } = useCheckbox((0, _babelRuntimeHelpersEsmExtends.default)({}, props, {\n      isReadOnly: props.isReadOnly || state.isReadOnly,\n      isDisabled: props.isDisabled || state.isDisabled,\n      name: props.name || $c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames.get(state)\n    }), toggleState, inputRef);\n    return {\n      inputProps\n    };\n  }\n});","lineCount":134,"map":[[12,2,16,0,"exports"],[12,9,16,0],[12,10,16,0,"useCheckbox"],[12,21,16,0],[12,24,16,0,"useCheckbox"],[12,35,16,0],[13,2,60,0,"exports"],[13,9,60,0],[13,10,60,0,"useCheckboxGroup"],[13,26,60,0],[13,29,60,0,"useCheckboxGroup"],[13,45,60,0],[14,2,94,0,"exports"],[14,9,94,0],[14,10,94,0,"useCheckboxGroupItem"],[14,30,94,0],[14,33,94,0,"useCheckboxGroupItem"],[14,53,94,0],[15,2,1,0],[15,6,1,0,"_reactStatelyToggle"],[15,25,1,0],[15,28,1,0,"require"],[15,35,1,0],[15,36,1,0,"_dependencyMap"],[15,50,1,0],[16,2,2,0],[16,6,2,0,"_reactAriaLabel"],[16,21,2,0],[16,24,2,0,"require"],[16,31,2,0],[16,32,2,0,"_dependencyMap"],[16,46,2,0],[17,2,3,0],[17,6,3,0,"_reactAriaUtils"],[17,21,3,0],[17,24,3,0,"require"],[17,31,3,0],[17,32,3,0,"_dependencyMap"],[17,46,3,0],[18,2,4,0],[18,6,4,0,"_reactAriaToggle"],[18,22,4,0],[18,25,4,0,"require"],[18,32,4,0],[18,33,4,0,"_dependencyMap"],[18,47,4,0],[19,2,5,0],[19,6,5,0,"_react"],[19,12,5,0],[19,15,5,0,"require"],[19,22,5,0],[19,23,5,0,"_dependencyMap"],[19,37,5,0],[20,2,6,0],[20,6,6,0,"_babelRuntimeHelpersEsmExtends2"],[20,37,6,0],[20,40,6,0,"require"],[20,47,6,0],[20,48,6,0,"_dependencyMap"],[20,62,6,0],[21,2,6,0],[21,6,6,0,"_babelRuntimeHelpersEsmExtends"],[21,36,6,0],[21,39,6,0,"_interopDefault"],[21,54,6,0],[21,55,6,0,"_babelRuntimeHelpersEsmExtends2"],[21,86,6,0],[22,2,8,0],[23,0,9,0],[24,0,10,0],[25,0,11,0],[26,0,12,0],[27,0,13,0],[28,0,14,0],[29,0,15,0],[30,2,16,7],[30,11,16,16,"useCheckbox"],[30,22,16,27,"useCheckbox"],[30,23,16,28,"props"],[30,28,16,33],[30,30,16,35,"state"],[30,35,16,40],[30,37,16,42,"inputRef"],[30,45,16,50],[30,47,16,52],[31,4,17,2],[31,8,17,6],[32,6,18,4,"inputProps"],[33,4,19,2],[33,5,19,3],[33,8,19,6],[33,12,19,6,"useToggle"],[33,28,19,15],[33,29,19,15,"useToggle"],[33,38,19,15],[33,40,19,16,"props"],[33,45,19,21],[33,47,19,23,"state"],[33,52,19,28],[33,54,19,30,"inputRef"],[33,62,19,38],[33,63,19,39],[34,4,20,2],[34,8,20,6],[35,6,21,4,"isSelected"],[36,4,22,2],[36,5,22,3],[36,8,22,6,"state"],[36,13,22,11],[37,4,23,2],[37,8,23,6],[38,6,24,4,"isIndeterminate"],[39,4,25,2],[39,5,25,3],[39,8,25,6,"props"],[39,13,25,11],[40,4,26,2],[40,8,26,2,"useEffect"],[40,14,26,11],[40,15,26,11,"useEffect"],[40,24,26,11],[40,26,26,12],[40,32,26,18],[41,6,27,4],[42,6,28,4],[43,6,29,4],[43,10,29,8,"inputRef"],[43,18,29,16],[43,19,29,17,"current"],[43,26,29,24],[43,28,29,26],[44,8,30,6,"inputRef"],[44,16,30,14],[44,17,30,15,"current"],[44,24,30,22],[44,25,30,23,"indeterminate"],[44,38,30,36],[44,41,30,39,"isIndeterminate"],[44,56,30,54],[45,6,31,4],[46,4,32,2],[46,5,32,3],[46,6,32,4],[47,4,33,2],[47,11,33,9],[48,6,34,4,"inputProps"],[48,16,34,14],[48,18,34,16],[48,22,34,16,"_babelRuntimeHelpersEsmExtends"],[48,52,34,46],[48,53,34,46,"default"],[48,60,34,46],[48,62,34,47],[48,63,34,48],[48,64,34,49],[48,66,34,51,"inputProps"],[48,76,34,61],[48,78,34,63],[49,8,35,6,"checked"],[49,15,35,13],[49,17,35,15,"isSelected"],[49,27,35,25],[50,8,36,6],[50,22,36,20],[50,24,36,22,"isIndeterminate"],[50,39,36,37],[50,42,36,40],[50,49,36,47],[50,52,36,50,"isSelected"],[51,6,37,4],[51,7,37,5],[52,4,38,2],[52,5,38,3],[53,2,39,0],[55,2,41,0],[56,0,42,0],[57,0,43,0],[58,0,44,0],[59,0,45,0],[60,0,46,0],[61,0,47,0],[62,0,48,0],[63,0,49,0],[64,0,50,0],[65,0,51,0],[66,2,52,0],[66,8,52,6,"$c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames"],[66,66,52,64],[66,69,52,67],[66,73,52,71,"WeakMap"],[66,80,52,78],[66,81,52,79],[66,82,52,80],[68,2,54,0],[69,0,55,0],[70,0,56,0],[71,0,57,0],[72,0,58,0],[73,0,59,0],[74,2,60,7],[74,11,60,16,"useCheckboxGroup"],[74,27,60,32,"useCheckboxGroup"],[74,28,60,33,"props"],[74,33,60,38],[74,35,60,40,"state"],[74,40,60,45],[74,42,60,47],[75,4,61,2],[75,8,61,6],[76,6,62,4,"isDisabled"],[76,16,62,14],[77,6,63,4,"name"],[78,4,64,2],[78,5,64,3],[78,8,64,6,"props"],[78,13,64,11],[79,4,65,2],[79,8,65,6],[80,6,66,4,"labelProps"],[80,16,66,14],[81,6,67,4,"fieldProps"],[82,4,68,2],[82,5,68,3],[82,8,68,6],[82,12,68,6,"useLabel"],[82,27,68,14],[82,28,68,14,"useLabel"],[82,36,68,14],[82,38,68,15],[82,42,68,15,"_babelRuntimeHelpersEsmExtends"],[82,72,68,45],[82,73,68,45,"default"],[82,80,68,45],[82,82,68,46],[82,83,68,47],[82,84,68,48],[82,86,68,50,"props"],[82,91,68,55],[82,93,68,57],[83,6,69,4],[84,6,70,4],[85,6,71,4,"labelElementType"],[85,22,71,20],[85,24,71,22],[86,4,72,2],[86,5,72,3],[86,6,72,4],[86,7,72,5],[87,4,73,2],[87,8,73,6,"domProps"],[87,16,73,14],[87,19,73,17],[87,23,73,17,"filterDOMProps"],[87,38,73,31],[87,39,73,31,"filterDOMProps"],[87,53,73,31],[87,55,73,32,"props"],[87,60,73,37],[87,62,73,39],[88,6,74,4,"labelable"],[88,15,74,13],[88,17,74,15],[89,4,75,2],[89,5,75,3],[89,6,75,4],[89,7,75,5],[89,8,75,6],[91,4,77,2,"$c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames"],[91,62,77,60],[91,63,77,61,"set"],[91,66,77,64],[91,67,77,65,"state"],[91,72,77,70],[91,74,77,72,"name"],[91,78,77,76],[91,79,77,77],[92,4,78,2],[92,11,78,9],[93,6,79,4,"groupProps"],[93,16,79,14],[93,18,79,16],[93,22,79,16,"mergeProps"],[93,37,79,26],[93,38,79,26,"mergeProps"],[93,48,79,26],[93,50,79,27,"domProps"],[93,58,79,35],[93,60,79,37],[93,64,79,37,"_babelRuntimeHelpersEsmExtends"],[93,94,79,67],[93,95,79,67,"default"],[93,102,79,67],[93,104,79,68],[94,8,80,6,"role"],[94,12,80,10],[94,14,80,12],[94,21,80,19],[95,8,81,6],[95,23,81,21],[95,25,81,23,"isDisabled"],[95,35,81,33],[95,39,81,37,"undefined"],[96,6,82,4],[96,7,82,5],[96,9,82,7,"fieldProps"],[96,19,82,17],[96,20,82,18],[96,21,82,19],[97,6,83,4,"labelProps"],[98,4,84,2],[98,5,84,3],[99,2,85,0],[101,2,87,0],[102,0,88,0],[103,0,89,0],[104,0,90,0],[105,0,91,0],[106,0,92,0],[107,0,93,0],[108,2,94,7],[108,11,94,16,"useCheckboxGroupItem"],[108,31,94,36,"useCheckboxGroupItem"],[108,32,94,37,"props"],[108,37,94,42],[108,39,94,44,"state"],[108,44,94,49],[108,46,94,51,"inputRef"],[108,54,94,59],[108,56,94,61],[109,4,95,2],[109,10,95,8,"toggleState"],[109,21,95,19],[109,24,95,22],[109,28,95,22,"useToggleState"],[109,47,95,36],[109,48,95,36,"useToggleState"],[109,62,95,36],[109,64,95,37],[110,6,96,4,"isReadOnly"],[110,16,96,14],[110,18,96,16,"props"],[110,23,96,21],[110,24,96,22,"isReadOnly"],[110,34,96,32],[110,38,96,36,"state"],[110,43,96,41],[110,44,96,42,"isReadOnly"],[110,54,96,52],[111,6,97,4,"isSelected"],[111,16,97,14],[111,18,97,16,"state"],[111,23,97,21],[111,24,97,22,"isSelected"],[111,34,97,32],[111,35,97,33,"props"],[111,40,97,38],[111,41,97,39,"value"],[111,46,97,44],[111,47,97,45],[112,6,99,4,"onChange"],[112,14,99,12,"onChange"],[112,15,99,13,"isSelected"],[112,25,99,23],[112,27,99,25],[113,8,100,6],[113,12,100,10,"isSelected"],[113,22,100,20],[113,24,100,22],[114,10,101,8,"state"],[114,15,101,13],[114,16,101,14,"addValue"],[114,24,101,22],[114,25,101,23,"props"],[114,30,101,28],[114,31,101,29,"value"],[114,36,101,34],[114,37,101,35],[115,8,102,6],[115,9,102,7],[115,15,102,13],[116,10,103,8,"state"],[116,15,103,13],[116,16,103,14,"removeValue"],[116,27,103,25],[116,28,103,26,"props"],[116,33,103,31],[116,34,103,32,"value"],[116,39,103,37],[116,40,103,38],[117,8,104,6],[118,8,106,6],[118,12,106,10,"props"],[118,17,106,15],[118,18,106,16,"onChange"],[118,26,106,24],[118,28,106,26],[119,10,107,8,"props"],[119,15,107,13],[119,16,107,14,"onChange"],[119,24,107,22],[119,25,107,23,"isSelected"],[119,35,107,33],[119,36,107,34],[120,8,108,6],[121,6,109,4],[122,4,111,2],[122,5,111,3],[122,6,111,4],[123,4,112,2],[123,8,112,6],[124,6,113,4,"inputProps"],[125,4,114,2],[125,5,114,3],[125,8,114,6,"useCheckbox"],[125,19,114,17],[125,20,114,18],[125,24,114,18,"_babelRuntimeHelpersEsmExtends"],[125,54,114,48],[125,55,114,48,"default"],[125,62,114,48],[125,64,114,49],[125,65,114,50],[125,66,114,51],[125,68,114,53,"props"],[125,73,114,58],[125,75,114,60],[126,6,115,4,"isReadOnly"],[126,16,115,14],[126,18,115,16,"props"],[126,23,115,21],[126,24,115,22,"isReadOnly"],[126,34,115,32],[126,38,115,36,"state"],[126,43,115,41],[126,44,115,42,"isReadOnly"],[126,54,115,52],[127,6,116,4,"isDisabled"],[127,16,116,14],[127,18,116,16,"props"],[127,23,116,21],[127,24,116,22,"isDisabled"],[127,34,116,32],[127,38,116,36,"state"],[127,43,116,41],[127,44,116,42,"isDisabled"],[127,54,116,52],[128,6,117,4,"name"],[128,10,117,8],[128,12,117,10,"props"],[128,17,117,15],[128,18,117,16,"name"],[128,22,117,20],[128,26,117,24,"$c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames"],[128,84,117,82],[128,85,117,83,"get"],[128,88,117,86],[128,89,117,87,"state"],[128,94,117,92],[129,4,118,2],[129,5,118,3],[129,6,118,4],[129,8,118,6,"toggleState"],[129,19,118,17],[129,21,118,19,"inputRef"],[129,29,118,27],[129,30,118,28],[130,4,119,2],[130,11,119,9],[131,6,120,4,"inputProps"],[132,4,121,2],[132,5,121,3],[133,2,122,0],[134,0,122,1],[134,3]],"functionMap":{"names":["<global>","useCheckbox","useEffect$argument_0","useCheckboxGroup","useCheckboxGroupItem","useToggleState$argument_0.onChange"],"mappings":"AAA;OCe;YCU;GDM;CDO;OGqB;CHyB;OIS;ICK;KDU;CJa"},"hasCjsExports":false},"type":"js/module"}]}