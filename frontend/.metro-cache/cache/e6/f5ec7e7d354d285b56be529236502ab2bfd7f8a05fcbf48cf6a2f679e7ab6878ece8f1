{"dependencies":[{"name":"./TableCollection.mjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":99,"index":99}}],"key":"ZivoSOBQx7FKKGgij/j1BVHBfZM=","exportNames":["*"],"imports":1}},{"name":"./useTableState.mjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":100},"end":{"line":2,"column":95,"index":195}}],"key":"18kUGcLQYGx+hYCdJE6eclQbKjY=","exportNames":["*"],"imports":1}},{"name":"@react-stately/collections","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":196},"end":{"line":3,"column":89,"index":285}}],"key":"oPA1pq1AaTHiTwy6sr13sX+8yu4=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":286},"end":{"line":4,"column":48,"index":334}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"@react-stately/flags","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":335},"end":{"line":5,"column":79,"index":414}}],"key":"e0xOpZyVvq0YPdtv/G8tF+J/jYA=","exportNames":["*"],"imports":1}},{"name":"@react-stately/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":415},"end":{"line":6,"column":85,"index":500}}],"key":"UWd/F16JM6opz+K5fhKP3CQOwig=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"UNSTABLE_useTreeGridState\", {\n    enumerable: true,\n    get: function () {\n      return $ee65a0057fd99531$export$34dfa8a1622185a4;\n    }\n  });\n  var _TableCollectionMjs = require(_dependencyMap[0], \"./TableCollection.mjs\");\n  var _useTableStateMjs = require(_dependencyMap[1], \"./useTableState.mjs\");\n  var _reactStatelyCollections = require(_dependencyMap[2], \"@react-stately/collections\");\n  var _react = require(_dependencyMap[3], \"react\");\n  var _reactStatelyFlags = require(_dependencyMap[4], \"@react-stately/flags\");\n  var _reactStatelyUtils = require(_dependencyMap[5], \"@react-stately/utils\");\n  /*\n   * Copyright 2023 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n\n  function $ee65a0057fd99531$export$34dfa8a1622185a4(props) {\n    let {\n      selectionMode = 'none',\n      showSelectionCheckboxes: showSelectionCheckboxes,\n      showDragButtons: showDragButtons,\n      UNSTABLE_expandedKeys: propExpandedKeys,\n      UNSTABLE_defaultExpandedKeys: propDefaultExpandedKeys,\n      UNSTABLE_onExpandedChange: UNSTABLE_onExpandedChange,\n      children: children\n    } = props;\n    if (!(0, _reactStatelyFlags.tableNestedRows)()) throw new Error('Feature flag for table nested rows must be enabled to use useTreeGridState.');\n    let [expandedKeys, setExpandedKeys] = (0, _reactStatelyUtils.useControlledState)(propExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propExpandedKeys) : undefined, propDefaultExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propDefaultExpandedKeys) : new Set(), UNSTABLE_onExpandedChange);\n    let context = (0, _react.useMemo)(() => ({\n      showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== 'none',\n      showDragButtons: showDragButtons,\n      selectionMode: selectionMode,\n      columns: []\n    }), [children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n    let builder = (0, _react.useMemo)(() => new (0, _reactStatelyCollections.CollectionBuilder)(), []);\n    let nodes = (0, _react.useMemo)(() => builder.build({\n      children: children\n    }, context), [builder, children, context]);\n    let treeGridCollection = (0, _react.useMemo)(() => {\n      return $ee65a0057fd99531$var$generateTreeGridCollection(nodes, {\n        showSelectionCheckboxes: showSelectionCheckboxes,\n        showDragButtons: showDragButtons,\n        expandedKeys: expandedKeys\n      });\n    }, [nodes, showSelectionCheckboxes, showDragButtons, expandedKeys]);\n    let onToggle = key => {\n      setExpandedKeys($ee65a0057fd99531$var$toggleKey(expandedKeys, key, treeGridCollection));\n    };\n    let collection = (0, _react.useMemo)(() => {\n      return new (0, _TableCollectionMjs.TableCollection)(treeGridCollection.tableNodes, null, context);\n    }, [context, treeGridCollection.tableNodes]);\n    let tableState = (0, _useTableStateMjs.useTableState)({\n      ...props,\n      collection: collection\n    });\n    return {\n      ...tableState,\n      keyMap: treeGridCollection.keyMap,\n      userColumnCount: treeGridCollection.userColumnCount,\n      expandedKeys: expandedKeys,\n      toggleKey: onToggle\n    };\n  }\n  function $ee65a0057fd99531$var$toggleKey(currentExpandedKeys, key, collection) {\n    let updatedExpandedKeys;\n    if (currentExpandedKeys === 'all') {\n      updatedExpandedKeys = new Set(collection.flattenedRows.filter(row => row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount).map(row => row.key));\n      updatedExpandedKeys.delete(key);\n    } else {\n      updatedExpandedKeys = new Set(currentExpandedKeys);\n      if (updatedExpandedKeys.has(key)) updatedExpandedKeys.delete(key);else updatedExpandedKeys.add(key);\n    }\n    return updatedExpandedKeys;\n  }\n  function $ee65a0057fd99531$var$convertExpanded(expanded) {\n    if (!expanded) return new Set();\n    return expanded === 'all' ? 'all' : new Set(expanded);\n  }\n  function $ee65a0057fd99531$var$generateTreeGridCollection(nodes, opts) {\n    let {\n      expandedKeys = new Set()\n    } = opts;\n    let body = null;\n    let flattenedRows = [];\n    let columnCount = 0;\n    let userColumnCount = 0;\n    let originalColumns = [];\n    let keyMap = new Map();\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) columnCount++;\n    if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) columnCount++;\n    let topLevelRows = [];\n    let visit = node => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          keyMap.set(body.key, body);\n          break;\n        case 'column':\n          if (!node.hasChildNodes) userColumnCount++;\n          break;\n        case 'item':\n          topLevelRows.push(node);\n          return;\n      }\n      for (let child of node.childNodes) visit(child);\n    };\n    for (let node of nodes) {\n      if (node.type === 'column') originalColumns.push(node);\n      visit(node);\n    }\n    columnCount += userColumnCount;\n    // Update each grid node in the treegrid table with values specific to a treegrid structure. Also store a set of flattened row nodes for TableCollection to consume\n    let globalRowCount = 0;\n    let visitNode = (node, i) => {\n      // Clone row node and its children so modifications to the node for treegrid specific values aren't applied on the nodes provided\n      // to TableCollection. Index, level, and parent keys are all changed to reflect a flattened row structure rather than the treegrid structure\n      // values automatically calculated via CollectionBuilder\n      if (node.type === 'item') {\n        let childNodes = [];\n        for (let child of node.childNodes) if (child.type === 'cell') {\n          let cellClone = {\n            ...child\n          };\n          if (cellClone.index + 1 === columnCount) cellClone.nextKey = null;\n          childNodes.push({\n            ...cellClone\n          });\n        }\n        let clone = {\n          ...node,\n          childNodes: childNodes,\n          parentKey: body.key,\n          level: 1,\n          index: globalRowCount++\n        };\n        flattenedRows.push(clone);\n      }\n      let newProps = {};\n      // Assign indexOfType to cells and rows for aria-posinset\n      if (node.type !== 'placeholder' && node.type !== 'column') newProps['indexOfType'] = i;\n      // Use Object.assign instead of spread to preserve object reference for keyMap. Also ensures retrieving nodes\n      // via .childNodes returns the same object as the one found via keyMap look up\n      Object.assign(node, newProps);\n      keyMap.set(node.key, node);\n      let lastNode = null;\n      let rowIndex = 0;\n      for (let child of node.childNodes) if (!(child.type === 'item' && expandedKeys !== 'all' && !expandedKeys.has(node.key))) {\n        if (child.parentKey == null)\n          // if child is a cell/expanded row/column and the parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        if (lastNode) {\n          lastNode.nextKey = child.key;\n          child.prevKey = lastNode.key;\n        } else child.prevKey = null;\n        if (child.type === 'item') visitNode(child, rowIndex++);else\n          // We enforce that the cells come before rows so can just reuse cell index\n          visitNode(child, child.index);\n        lastNode = child;\n      }\n      if (lastNode) lastNode.nextKey = null;\n    };\n    let last = null;\n    for (let [i, node] of topLevelRows.entries()) {\n      visitNode(node, i);\n      if (last) {\n        last.nextKey = node.key;\n        node.prevKey = last.key;\n      } else node.prevKey = null;\n      last = node;\n    }\n    if (last) last.nextKey = null;\n    return {\n      keyMap: keyMap,\n      userColumnCount: userColumnCount,\n      flattenedRows: flattenedRows,\n      tableNodes: [...originalColumns, {\n        ...body,\n        childNodes: flattenedRows\n      }]\n    };\n  }\n});","lineCount":196,"map":[[7,2,201,0,"Object"],[7,8,201,0],[7,9,201,0,"defineProperty"],[7,23,201,0],[7,24,201,0,"exports"],[7,31,201,0],[8,4,201,0,"enumerable"],[8,14,201,0],[9,4,201,0,"get"],[9,7,201,0],[9,18,201,0,"get"],[9,19,201,0],[10,6,201,0],[10,13,201,8,"$ee65a0057fd99531$export$34dfa8a1622185a4"],[10,54,201,49],[11,4,201,49],[12,2,201,49],[13,2,1,0],[13,6,1,0,"_TableCollectionMjs"],[13,25,1,0],[13,28,1,0,"require"],[13,35,1,0],[13,36,1,0,"_dependencyMap"],[13,50,1,0],[14,2,2,0],[14,6,2,0,"_useTableStateMjs"],[14,23,2,0],[14,26,2,0,"require"],[14,33,2,0],[14,34,2,0,"_dependencyMap"],[14,48,2,0],[15,2,3,0],[15,6,3,0,"_reactStatelyCollections"],[15,30,3,0],[15,33,3,0,"require"],[15,40,3,0],[15,41,3,0,"_dependencyMap"],[15,55,3,0],[16,2,4,0],[16,6,4,0,"_react"],[16,12,4,0],[16,15,4,0,"require"],[16,22,4,0],[16,23,4,0,"_dependencyMap"],[16,37,4,0],[17,2,5,0],[17,6,5,0,"_reactStatelyFlags"],[17,24,5,0],[17,27,5,0,"require"],[17,34,5,0],[17,35,5,0,"_dependencyMap"],[17,49,5,0],[18,2,6,0],[18,6,6,0,"_reactStatelyUtils"],[18,24,6,0],[18,27,6,0,"require"],[18,34,6,0],[18,35,6,0,"_dependencyMap"],[18,49,6,0],[19,2,8,0],[20,0,9,0],[21,0,10,0],[22,0,11,0],[23,0,12,0],[24,0,13,0],[25,0,14,0],[26,0,15,0],[27,0,16,0],[28,0,17,0],[29,0,18,0],[31,2,24,0],[31,11,24,9,"$ee65a0057fd99531$export$34dfa8a1622185a4"],[31,52,24,50,"$ee65a0057fd99531$export$34dfa8a1622185a4"],[31,53,24,51,"props"],[31,58,24,56],[31,60,24,58],[32,4,25,4],[32,8,25,8],[33,6,25,25,"selectionMode"],[33,19,25,38],[33,22,25,41],[33,28,25,47],[34,6,25,49,"showSelectionCheckboxes"],[34,29,25,72],[34,31,25,74,"showSelectionCheckboxes"],[34,54,25,97],[35,6,25,99,"showDragButtons"],[35,21,25,114],[35,23,25,116,"showDragButtons"],[35,38,25,131],[36,6,25,133,"UNSTABLE_expandedKeys"],[36,27,25,154],[36,29,25,156,"propExpandedKeys"],[36,45,25,172],[37,6,25,174,"UNSTABLE_defaultExpandedKeys"],[37,34,25,202],[37,36,25,204,"propDefaultExpandedKeys"],[37,59,25,227],[38,6,25,229,"UNSTABLE_onExpandedChange"],[38,31,25,254],[38,33,25,256,"UNSTABLE_onExpandedChange"],[38,58,25,281],[39,6,25,283,"children"],[39,14,25,291],[39,16,25,293,"children"],[40,4,25,302],[40,5,25,303],[40,8,25,306,"props"],[40,13,25,311],[41,4,26,4],[41,8,26,8],[41,9,26,9],[41,10,26,10],[41,11,26,11],[41,13,26,13,"$2Mvwf$tableNestedRows"],[41,31,26,35],[41,32,26,35,"tableNestedRows"],[41,47,26,35],[41,49,26,37],[41,50,26,38],[41,52,26,40],[41,58,26,46],[41,62,26,50,"Error"],[41,67,26,55],[41,68,26,56],[41,145,26,133],[41,146,26,134],[42,4,27,4],[42,8,27,8],[42,9,27,9,"expandedKeys"],[42,21,27,21],[42,23,27,23,"setExpandedKeys"],[42,38,27,38],[42,39,27,39],[42,42,27,42],[42,43,27,43],[42,44,27,44],[42,46,27,46,"$2Mvwf$useControlledState"],[42,64,27,71],[42,65,27,71,"useControlledState"],[42,83,27,71],[42,85,27,73,"propExpandedKeys"],[42,101,27,89],[42,104,27,92,"$ee65a0057fd99531$var$convertExpanded"],[42,141,27,129],[42,142,27,130,"propExpandedKeys"],[42,158,27,146],[42,159,27,147],[42,162,27,150,"undefined"],[42,171,27,159],[42,173,27,161,"propDefaultExpandedKeys"],[42,196,27,184],[42,199,27,187,"$ee65a0057fd99531$var$convertExpanded"],[42,236,27,224],[42,237,27,225,"propDefaultExpandedKeys"],[42,260,27,248],[42,261,27,249],[42,264,27,252],[42,268,27,256,"Set"],[42,271,27,259],[42,272,27,260],[42,273,27,261],[42,275,27,263,"UNSTABLE_onExpandedChange"],[42,300,27,288],[42,301,27,289],[43,4,28,4],[43,8,28,8,"context"],[43,15,28,15],[43,18,28,18],[43,19,28,19],[43,20,28,20],[43,22,28,22,"$2Mvwf$useMemo"],[43,28,28,36],[43,29,28,36,"useMemo"],[43,36,28,36],[43,38,28,38],[43,45,28,43],[44,6,29,12,"showSelectionCheckboxes"],[44,29,29,35],[44,31,29,37,"showSelectionCheckboxes"],[44,54,29,60],[44,58,29,64,"selectionMode"],[44,71,29,77],[44,76,29,82],[44,82,29,88],[45,6,30,12,"showDragButtons"],[45,21,30,27],[45,23,30,29,"showDragButtons"],[45,38,30,44],[46,6,31,12,"selectionMode"],[46,19,31,25],[46,21,31,27,"selectionMode"],[46,34,31,40],[47,6,32,12,"columns"],[47,13,32,19],[47,15,32,21],[48,4,33,8],[48,5,33,9],[48,6,33,10],[48,8,33,12],[48,9,34,8,"children"],[48,17,34,16],[48,19,35,8,"showSelectionCheckboxes"],[48,42,35,31],[48,44,36,8,"selectionMode"],[48,57,36,21],[48,59,37,8,"showDragButtons"],[48,74,37,23],[48,75,38,5],[48,76,38,6],[49,4,39,4],[49,8,39,8,"builder"],[49,15,39,15],[49,18,39,18],[49,19,39,19],[49,20,39,20],[49,22,39,22,"$2Mvwf$useMemo"],[49,28,39,36],[49,29,39,36,"useMemo"],[49,36,39,36],[49,38,39,38],[49,44,39,42],[49,49,39,47],[49,50,39,48],[49,52,39,50,"$2Mvwf$CollectionBuilder"],[49,76,39,74],[49,77,39,74,"CollectionBuilder"],[49,94,39,74],[49,96,39,76],[49,97,39,77],[49,99,39,79],[49,101,39,81],[49,102,39,82],[50,4,40,4],[50,8,40,8,"nodes"],[50,13,40,13],[50,16,40,16],[50,17,40,17],[50,18,40,18],[50,20,40,20,"$2Mvwf$useMemo"],[50,26,40,34],[50,27,40,34,"useMemo"],[50,34,40,34],[50,36,40,36],[50,42,40,40,"builder"],[50,49,40,47],[50,50,40,48,"build"],[50,55,40,53],[50,56,40,54],[51,6,41,12,"children"],[51,14,41,20],[51,16,41,22,"children"],[52,4,42,8],[52,5,42,9],[52,7,42,11,"context"],[52,14,42,18],[52,15,42,19],[52,17,42,21],[52,18,43,8,"builder"],[52,25,43,15],[52,27,44,8,"children"],[52,35,44,16],[52,37,45,8,"context"],[52,44,45,15],[52,45,46,5],[52,46,46,6],[53,4,47,4],[53,8,47,8,"treeGridCollection"],[53,26,47,26],[53,29,47,29],[53,30,47,30],[53,31,47,31],[53,33,47,33,"$2Mvwf$useMemo"],[53,39,47,47],[53,40,47,47,"useMemo"],[53,47,47,47],[53,49,47,49],[53,55,47,53],[54,6,48,8],[54,13,48,15,"$ee65a0057fd99531$var$generateTreeGridCollection"],[54,61,48,63],[54,62,48,64,"nodes"],[54,67,48,69],[54,69,48,71],[55,8,49,12,"showSelectionCheckboxes"],[55,31,49,35],[55,33,49,37,"showSelectionCheckboxes"],[55,56,49,60],[56,8,50,12,"showDragButtons"],[56,23,50,27],[56,25,50,29,"showDragButtons"],[56,40,50,44],[57,8,51,12,"expandedKeys"],[57,20,51,24],[57,22,51,26,"expandedKeys"],[58,6,52,8],[58,7,52,9],[58,8,52,10],[59,4,53,4],[59,5,53,5],[59,7,53,7],[59,8,54,8,"nodes"],[59,13,54,13],[59,15,55,8,"showSelectionCheckboxes"],[59,38,55,31],[59,40,56,8,"showDragButtons"],[59,55,56,23],[59,57,57,8,"expandedKeys"],[59,69,57,20],[59,70,58,5],[59,71,58,6],[60,4,59,4],[60,8,59,8,"onToggle"],[60,16,59,16],[60,19,59,20,"key"],[60,22,59,23],[60,26,59,26],[61,6,60,8,"setExpandedKeys"],[61,21,60,23],[61,22,60,24,"$ee65a0057fd99531$var$toggleKey"],[61,53,60,55],[61,54,60,56,"expandedKeys"],[61,66,60,68],[61,68,60,70,"key"],[61,71,60,73],[61,73,60,75,"treeGridCollection"],[61,91,60,93],[61,92,60,94],[61,93,60,95],[62,4,61,4],[62,5,61,5],[63,4,62,4],[63,8,62,8,"collection"],[63,18,62,18],[63,21,62,21],[63,22,62,22],[63,23,62,23],[63,25,62,25,"$2Mvwf$useMemo"],[63,31,62,39],[63,32,62,39,"useMemo"],[63,39,62,39],[63,41,62,41],[63,47,62,45],[64,6,63,8],[64,13,63,15],[64,18,63,20],[64,19,63,21],[64,21,63,23,"$788781baa30117fa$export$596e1b2e2cf93690"],[64,40,63,64],[64,41,63,64,"TableCollection"],[64,56,63,64],[64,58,63,66,"treeGridCollection"],[64,76,63,84],[64,77,63,85,"tableNodes"],[64,87,63,95],[64,89,63,97],[64,93,63,101],[64,95,63,103,"context"],[64,102,63,110],[64,103,63,111],[65,4,64,4],[65,5,64,5],[65,7,64,7],[65,8,65,8,"context"],[65,15,65,15],[65,17,66,8,"treeGridCollection"],[65,35,66,26],[65,36,66,27,"tableNodes"],[65,46,66,37],[65,47,67,5],[65,48,67,6],[66,4,68,4],[66,8,68,8,"tableState"],[66,18,68,18],[66,21,68,21],[66,22,68,22],[66,23,68,23],[66,25,68,25,"$4a0dd036d492cee4$export$907bcc6c48325fd6"],[66,42,68,66],[66,43,68,66,"useTableState"],[66,56,68,66],[66,58,68,68],[67,6,69,8],[67,9,69,11,"props"],[67,14,69,16],[68,6,70,8,"collection"],[68,16,70,18],[68,18,70,20,"collection"],[69,4,71,4],[69,5,71,5],[69,6,71,6],[70,4,72,4],[70,11,72,11],[71,6,73,8],[71,9,73,11,"tableState"],[71,19,73,21],[72,6,74,8,"keyMap"],[72,12,74,14],[72,14,74,16,"treeGridCollection"],[72,32,74,34],[72,33,74,35,"keyMap"],[72,39,74,41],[73,6,75,8,"userColumnCount"],[73,21,75,23],[73,23,75,25,"treeGridCollection"],[73,41,75,43],[73,42,75,44,"userColumnCount"],[73,57,75,59],[74,6,76,8,"expandedKeys"],[74,18,76,20],[74,20,76,22,"expandedKeys"],[74,32,76,34],[75,6,77,8,"toggleKey"],[75,15,77,17],[75,17,77,19,"onToggle"],[76,4,78,4],[76,5,78,5],[77,2,79,0],[78,2,80,0],[78,11,80,9,"$ee65a0057fd99531$var$toggleKey"],[78,42,80,40,"$ee65a0057fd99531$var$toggleKey"],[78,43,80,41,"currentExpandedKeys"],[78,62,80,60],[78,64,80,62,"key"],[78,67,80,65],[78,69,80,67,"collection"],[78,79,80,77],[78,81,80,79],[79,4,81,4],[79,8,81,8,"updatedExpandedKeys"],[79,27,81,27],[80,4,82,4],[80,8,82,8,"currentExpandedKeys"],[80,27,82,27],[80,32,82,32],[80,37,82,37],[80,39,82,39],[81,6,83,8,"updatedExpandedKeys"],[81,25,83,27],[81,28,83,30],[81,32,83,34,"Set"],[81,35,83,37],[81,36,83,38,"collection"],[81,46,83,48],[81,47,83,49,"flattenedRows"],[81,60,83,62],[81,61,83,63,"filter"],[81,67,83,69],[81,68,83,71,"row"],[81,71,83,74],[81,75,83,77,"row"],[81,78,83,80],[81,79,83,81,"props"],[81,84,83,86],[81,85,83,87,"UNSTABLE_childItems"],[81,104,83,106],[81,108,83,110,"row"],[81,111,83,113],[81,112,83,114,"props"],[81,117,83,119],[81,118,83,120,"children"],[81,126,83,128],[81,127,83,129,"length"],[81,133,83,135],[81,136,83,138,"collection"],[81,146,83,148],[81,147,83,149,"userColumnCount"],[81,162,83,164],[81,163,83,165],[81,164,83,166,"map"],[81,167,83,169],[81,168,83,171,"row"],[81,171,83,174],[81,175,83,177,"row"],[81,178,83,180],[81,179,83,181,"key"],[81,182,83,184],[81,183,83,185],[81,184,83,186],[82,6,84,8,"updatedExpandedKeys"],[82,25,84,27],[82,26,84,28,"delete"],[82,32,84,34],[82,33,84,35,"key"],[82,36,84,38],[82,37,84,39],[83,4,85,4],[83,5,85,5],[83,11,85,11],[84,6,86,8,"updatedExpandedKeys"],[84,25,86,27],[84,28,86,30],[84,32,86,34,"Set"],[84,35,86,37],[84,36,86,38,"currentExpandedKeys"],[84,55,86,57],[84,56,86,58],[85,6,87,8],[85,10,87,12,"updatedExpandedKeys"],[85,29,87,31],[85,30,87,32,"has"],[85,33,87,35],[85,34,87,36,"key"],[85,37,87,39],[85,38,87,40],[85,40,87,42,"updatedExpandedKeys"],[85,59,87,61],[85,60,87,62,"delete"],[85,66,87,68],[85,67,87,69,"key"],[85,70,87,72],[85,71,87,73],[85,72,87,74],[85,77,88,13,"updatedExpandedKeys"],[85,96,88,32],[85,97,88,33,"add"],[85,100,88,36],[85,101,88,37,"key"],[85,104,88,40],[85,105,88,41],[86,4,89,4],[87,4,90,4],[87,11,90,11,"updatedExpandedKeys"],[87,30,90,30],[88,2,91,0],[89,2,92,0],[89,11,92,9,"$ee65a0057fd99531$var$convertExpanded"],[89,48,92,46,"$ee65a0057fd99531$var$convertExpanded"],[89,49,92,47,"expanded"],[89,57,92,55],[89,59,92,57],[90,4,93,4],[90,8,93,8],[90,9,93,9,"expanded"],[90,17,93,17],[90,19,93,19],[90,26,93,26],[90,30,93,30,"Set"],[90,33,93,33],[90,34,93,34],[90,35,93,35],[91,4,94,4],[91,11,94,11,"expanded"],[91,19,94,19],[91,24,94,24],[91,29,94,29],[91,32,94,32],[91,37,94,37],[91,40,94,40],[91,44,94,44,"Set"],[91,47,94,47],[91,48,94,48,"expanded"],[91,56,94,56],[91,57,94,57],[92,2,95,0],[93,2,96,0],[93,11,96,9,"$ee65a0057fd99531$var$generateTreeGridCollection"],[93,59,96,57,"$ee65a0057fd99531$var$generateTreeGridCollection"],[93,60,96,58,"nodes"],[93,65,96,63],[93,67,96,65,"opts"],[93,71,96,69],[93,73,96,71],[94,4,97,4],[94,8,97,8],[95,6,97,24,"expandedKeys"],[95,18,97,36],[95,21,97,39],[95,25,97,43,"Set"],[95,28,97,46],[95,29,97,47],[96,4,97,49],[96,5,97,50],[96,8,97,53,"opts"],[96,12,97,57],[97,4,98,4],[97,8,98,8,"body"],[97,12,98,12],[97,15,98,15],[97,19,98,19],[98,4,99,4],[98,8,99,8,"flattenedRows"],[98,21,99,21],[98,24,99,24],[98,26,99,26],[99,4,100,4],[99,8,100,8,"columnCount"],[99,19,100,19],[99,22,100,22],[99,23,100,23],[100,4,101,4],[100,8,101,8,"userColumnCount"],[100,23,101,23],[100,26,101,26],[100,27,101,27],[101,4,102,4],[101,8,102,8,"originalColumns"],[101,23,102,23],[101,26,102,26],[101,28,102,28],[102,4,103,4],[102,8,103,8,"keyMap"],[102,14,103,14],[102,17,103,17],[102,21,103,21,"Map"],[102,24,103,24],[102,25,103,25],[102,26,103,26],[103,4,104,4],[103,8,104,8,"opts"],[103,12,104,12],[103,17,104,17],[103,21,104,21],[103,25,104,25,"opts"],[103,29,104,29],[103,34,104,34],[103,39,104,39],[103,40,104,40],[103,43,104,43],[103,48,104,48],[103,49,104,49],[103,52,104,52,"opts"],[103,56,104,56],[103,57,104,57,"showSelectionCheckboxes"],[103,80,104,80],[103,82,104,82,"columnCount"],[103,93,104,93],[103,95,104,95],[104,4,105,4],[104,8,105,8,"opts"],[104,12,105,12],[104,17,105,17],[104,21,105,21],[104,25,105,25,"opts"],[104,29,105,29],[104,34,105,34],[104,39,105,39],[104,40,105,40],[104,43,105,43],[104,48,105,48],[104,49,105,49],[104,52,105,52,"opts"],[104,56,105,56],[104,57,105,57,"showDragButtons"],[104,72,105,72],[104,74,105,74,"columnCount"],[104,85,105,85],[104,87,105,87],[105,4,106,4],[105,8,106,8,"topLevelRows"],[105,20,106,20],[105,23,106,23],[105,25,106,25],[106,4,107,4],[106,8,107,8,"visit"],[106,13,107,13],[106,16,107,17,"node"],[106,20,107,21],[106,24,107,24],[107,6,108,8],[107,14,108,15,"node"],[107,18,108,19],[107,19,108,20,"type"],[107,23,108,24],[108,8,109,12],[108,13,109,17],[108,19,109,23],[109,10,110,16,"body"],[109,14,110,20],[109,17,110,23,"node"],[109,21,110,27],[110,10,111,16,"keyMap"],[110,16,111,22],[110,17,111,23,"set"],[110,20,111,26],[110,21,111,27,"body"],[110,25,111,31],[110,26,111,32,"key"],[110,29,111,35],[110,31,111,37,"body"],[110,35,111,41],[110,36,111,42],[111,10,112,16],[112,8,113,12],[112,13,113,17],[112,21,113,25],[113,10,114,16],[113,14,114,20],[113,15,114,21,"node"],[113,19,114,25],[113,20,114,26,"hasChildNodes"],[113,33,114,39],[113,35,114,41,"userColumnCount"],[113,50,114,56],[113,52,114,58],[114,10,115,16],[115,8,116,12],[115,13,116,17],[115,19,116,23],[116,10,117,16,"topLevelRows"],[116,22,117,28],[116,23,117,29,"push"],[116,27,117,33],[116,28,117,34,"node"],[116,32,117,38],[116,33,117,39],[117,10,118,16],[118,6,119,8],[119,6,120,8],[119,11,120,13],[119,15,120,17,"child"],[119,20,120,22],[119,24,120,26,"node"],[119,28,120,30],[119,29,120,31,"childNodes"],[119,39,120,41],[119,41,120,42,"visit"],[119,46,120,47],[119,47,120,48,"child"],[119,52,120,53],[119,53,120,54],[120,4,121,4],[120,5,121,5],[121,4,122,4],[121,9,122,9],[121,13,122,13,"node"],[121,17,122,17],[121,21,122,21,"nodes"],[121,26,122,26],[121,28,122,27],[122,6,123,8],[122,10,123,12,"node"],[122,14,123,16],[122,15,123,17,"type"],[122,19,123,21],[122,24,123,26],[122,32,123,34],[122,34,123,36,"originalColumns"],[122,49,123,51],[122,50,123,52,"push"],[122,54,123,56],[122,55,123,57,"node"],[122,59,123,61],[122,60,123,62],[123,6,124,8,"visit"],[123,11,124,13],[123,12,124,14,"node"],[123,16,124,18],[123,17,124,19],[124,4,125,4],[125,4,126,4,"columnCount"],[125,15,126,15],[125,19,126,19,"userColumnCount"],[125,34,126,34],[126,4,127,4],[127,4,128,4],[127,8,128,8,"globalRowCount"],[127,22,128,22],[127,25,128,25],[127,26,128,26],[128,4,129,4],[128,8,129,8,"visitNode"],[128,17,129,17],[128,20,129,20,"visitNode"],[128,21,129,21,"node"],[128,25,129,25],[128,27,129,27,"i"],[128,28,129,28],[128,33,129,31],[129,6,130,8],[130,6,131,8],[131,6,132,8],[132,6,133,8],[132,10,133,12,"node"],[132,14,133,16],[132,15,133,17,"type"],[132,19,133,21],[132,24,133,26],[132,30,133,32],[132,32,133,34],[133,8,134,12],[133,12,134,16,"childNodes"],[133,22,134,26],[133,25,134,29],[133,27,134,31],[134,8,135,12],[134,13,135,17],[134,17,135,21,"child"],[134,22,135,26],[134,26,135,30,"node"],[134,30,135,34],[134,31,135,35,"childNodes"],[134,41,135,45],[134,43,135,46],[134,47,135,50,"child"],[134,52,135,55],[134,53,135,56,"type"],[134,57,135,60],[134,62,135,65],[134,68,135,71],[134,70,135,73],[135,10,136,16],[135,14,136,20,"cellClone"],[135,23,136,29],[135,26,136,32],[136,12,137,20],[136,15,137,23,"child"],[137,10,138,16],[137,11,138,17],[138,10,139,16],[138,14,139,20,"cellClone"],[138,23,139,29],[138,24,139,30,"index"],[138,29,139,35],[138,32,139,38],[138,33,139,39],[138,38,139,44,"columnCount"],[138,49,139,55],[138,51,139,57,"cellClone"],[138,60,139,66],[138,61,139,67,"nextKey"],[138,68,139,74],[138,71,139,77],[138,75,139,81],[139,10,140,16,"childNodes"],[139,20,140,26],[139,21,140,27,"push"],[139,25,140,31],[139,26,140,32],[140,12,141,20],[140,15,141,23,"cellClone"],[141,10,142,16],[141,11,142,17],[141,12,142,18],[142,8,143,12],[143,8,144,12],[143,12,144,16,"clone"],[143,17,144,21],[143,20,144,24],[144,10,145,16],[144,13,145,19,"node"],[144,17,145,23],[145,10,146,16,"childNodes"],[145,20,146,26],[145,22,146,28,"childNodes"],[145,32,146,38],[146,10,147,16,"parentKey"],[146,19,147,25],[146,21,147,27,"body"],[146,25,147,31],[146,26,147,32,"key"],[146,29,147,35],[147,10,148,16,"level"],[147,15,148,21],[147,17,148,23],[147,18,148,24],[148,10,149,16,"index"],[148,15,149,21],[148,17,149,23,"globalRowCount"],[148,31,149,37],[149,8,150,12],[149,9,150,13],[150,8,151,12,"flattenedRows"],[150,21,151,25],[150,22,151,26,"push"],[150,26,151,30],[150,27,151,31,"clone"],[150,32,151,36],[150,33,151,37],[151,6,152,8],[152,6,153,8],[152,10,153,12,"newProps"],[152,18,153,20],[152,21,153,23],[152,22,153,24],[152,23,153,25],[153,6,154,8],[154,6,155,8],[154,10,155,12,"node"],[154,14,155,16],[154,15,155,17,"type"],[154,19,155,21],[154,24,155,26],[154,37,155,39],[154,41,155,43,"node"],[154,45,155,47],[154,46,155,48,"type"],[154,50,155,52],[154,55,155,57],[154,63,155,65],[154,65,155,67,"newProps"],[154,73,155,75],[154,74,155,76],[154,87,155,89],[154,88,155,90],[154,91,155,93,"i"],[154,92,155,94],[155,6,156,8],[156,6,157,8],[157,6,158,8,"Object"],[157,12,158,14],[157,13,158,15,"assign"],[157,19,158,21],[157,20,158,22,"node"],[157,24,158,26],[157,26,158,28,"newProps"],[157,34,158,36],[157,35,158,37],[158,6,159,8,"keyMap"],[158,12,159,14],[158,13,159,15,"set"],[158,16,159,18],[158,17,159,19,"node"],[158,21,159,23],[158,22,159,24,"key"],[158,25,159,27],[158,27,159,29,"node"],[158,31,159,33],[158,32,159,34],[159,6,160,8],[159,10,160,12,"lastNode"],[159,18,160,20],[159,21,160,23],[159,25,160,27],[160,6,161,8],[160,10,161,12,"rowIndex"],[160,18,161,20],[160,21,161,23],[160,22,161,24],[161,6,162,8],[161,11,162,13],[161,15,162,17,"child"],[161,20,162,22],[161,24,162,26,"node"],[161,28,162,30],[161,29,162,31,"childNodes"],[161,39,162,41],[161,41,162,42],[161,45,162,46],[161,47,162,48,"child"],[161,52,162,53],[161,53,162,54,"type"],[161,57,162,58],[161,62,162,63],[161,68,162,69],[161,72,162,73,"expandedKeys"],[161,84,162,85],[161,89,162,90],[161,94,162,95],[161,98,162,99],[161,99,162,100,"expandedKeys"],[161,111,162,112],[161,112,162,113,"has"],[161,115,162,116],[161,116,162,117,"node"],[161,120,162,121],[161,121,162,122,"key"],[161,124,162,125],[161,125,162,126],[161,126,162,127],[161,128,162,129],[162,8,163,12],[162,12,163,16,"child"],[162,17,163,21],[162,18,163,22,"parentKey"],[162,27,163,31],[162,31,163,35],[162,35,163,39],[163,10,163,41],[164,10,164,12,"child"],[164,15,164,17],[164,16,164,18,"parentKey"],[164,25,164,27],[164,28,164,30,"node"],[164,32,164,34],[164,33,164,35,"key"],[164,36,164,38],[165,8,165,12],[165,12,165,16,"lastNode"],[165,20,165,24],[165,22,165,26],[166,10,166,16,"lastNode"],[166,18,166,24],[166,19,166,25,"nextKey"],[166,26,166,32],[166,29,166,35,"child"],[166,34,166,40],[166,35,166,41,"key"],[166,38,166,44],[167,10,167,16,"child"],[167,15,167,21],[167,16,167,22,"prevKey"],[167,23,167,29],[167,26,167,32,"lastNode"],[167,34,167,40],[167,35,167,41,"key"],[167,38,167,44],[168,8,168,12],[168,9,168,13],[168,15,168,19,"child"],[168,20,168,24],[168,21,168,25,"prevKey"],[168,28,168,32],[168,31,168,35],[168,35,168,39],[169,8,169,12],[169,12,169,16,"child"],[169,17,169,21],[169,18,169,22,"type"],[169,22,169,26],[169,27,169,31],[169,33,169,37],[169,35,169,39,"visitNode"],[169,44,169,48],[169,45,169,49,"child"],[169,50,169,54],[169,52,169,56,"rowIndex"],[169,60,169,64],[169,62,169,66],[169,63,169,67],[169,64,169,68],[170,10,170,17],[171,10,171,12,"visitNode"],[171,19,171,21],[171,20,171,22,"child"],[171,25,171,27],[171,27,171,29,"child"],[171,32,171,34],[171,33,171,35,"index"],[171,38,171,40],[171,39,171,41],[172,8,172,12,"lastNode"],[172,16,172,20],[172,19,172,23,"child"],[172,24,172,28],[173,6,173,8],[174,6,174,8],[174,10,174,12,"lastNode"],[174,18,174,20],[174,20,174,22,"lastNode"],[174,28,174,30],[174,29,174,31,"nextKey"],[174,36,174,38],[174,39,174,41],[174,43,174,45],[175,4,175,4],[175,5,175,5],[176,4,176,4],[176,8,176,8,"last"],[176,12,176,12],[176,15,176,15],[176,19,176,19],[177,4,177,4],[177,9,177,9],[177,13,177,13],[177,14,177,14,"i"],[177,15,177,15],[177,17,177,17,"node"],[177,21,177,21],[177,22,177,22],[177,26,177,26,"topLevelRows"],[177,38,177,38],[177,39,177,39,"entries"],[177,46,177,46],[177,47,177,47],[177,48,177,48],[177,50,177,49],[178,6,178,8,"visitNode"],[178,15,178,17],[178,16,178,18,"node"],[178,20,178,22],[178,22,178,24,"i"],[178,23,178,25],[178,24,178,26],[179,6,179,8],[179,10,179,12,"last"],[179,14,179,16],[179,16,179,18],[180,8,180,12,"last"],[180,12,180,16],[180,13,180,17,"nextKey"],[180,20,180,24],[180,23,180,27,"node"],[180,27,180,31],[180,28,180,32,"key"],[180,31,180,35],[181,8,181,12,"node"],[181,12,181,16],[181,13,181,17,"prevKey"],[181,20,181,24],[181,23,181,27,"last"],[181,27,181,31],[181,28,181,32,"key"],[181,31,181,35],[182,6,182,8],[182,7,182,9],[182,13,182,15,"node"],[182,17,182,19],[182,18,182,20,"prevKey"],[182,25,182,27],[182,28,182,30],[182,32,182,34],[183,6,183,8,"last"],[183,10,183,12],[183,13,183,15,"node"],[183,17,183,19],[184,4,184,4],[185,4,185,4],[185,8,185,8,"last"],[185,12,185,12],[185,14,185,14,"last"],[185,18,185,18],[185,19,185,19,"nextKey"],[185,26,185,26],[185,29,185,29],[185,33,185,33],[186,4,186,4],[186,11,186,11],[187,6,187,8,"keyMap"],[187,12,187,14],[187,14,187,16,"keyMap"],[187,20,187,22],[188,6,188,8,"userColumnCount"],[188,21,188,23],[188,23,188,25,"userColumnCount"],[188,38,188,40],[189,6,189,8,"flattenedRows"],[189,19,189,21],[189,21,189,23,"flattenedRows"],[189,34,189,36],[190,6,190,8,"tableNodes"],[190,16,190,18],[190,18,190,20],[190,19,191,12],[190,22,191,15,"originalColumns"],[190,37,191,30],[190,39,192,12],[191,8,193,16],[191,11,193,19,"body"],[191,15,193,23],[192,8,194,16,"childNodes"],[192,18,194,26],[192,20,194,28,"flattenedRows"],[193,6,195,12],[193,7,195,13],[194,4,197,4],[194,5,197,5],[195,2,198,0],[196,0,198,1],[196,3]],"functionMap":{"names":["<global>","$ee65a0057fd99531$export$34dfa8a1622185a4","<anonymous>","onToggle","$ee65a0057fd99531$var$toggleKey","collection.flattenedRows.filter$argument_0","collection.flattenedRows.filter.map$argument_0","$ee65a0057fd99531$var$convertExpanded","$ee65a0057fd99531$var$generateTreeGridCollection","visit","visitNode"],"mappings":"AAA;ACuB;sCCI;UDK;sCCM,uCD;oCCC;mBDE;iDCK;KDM;mBEM;KFE;yCCC;KDE;CDe;AIC;sECG,8FD,ME,cF;CJQ;AOC;CPG;AQC;gBCW;KDc;oBEQ;KF8C;CRuB"},"hasCjsExports":false},"type":"js/module"}]}