{"dependencies":[{"name":"@react-aria/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":97,"index":97}}],"key":"1YkQy8j1AiEA5UJkjTUYe2TKBMU=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":98},"end":{"line":2,"column":54,"index":152}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":153},"end":{"line":3,"column":55,"index":208}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"@react-aria/focus","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":209},"end":{"line":4,"column":49,"index":258}}],"key":"42Ka3xqFBlJqUlpORqJoyRxBjm0=","exportNames":["*"],"imports":1}},{"name":"@react-aria/label","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":259},"end":{"line":5,"column":45,"index":304}}],"key":"5wzhdZHdQjf2PCDavajv7B5b+u8=","exportNames":["*"],"imports":1}},{"name":"./useMove","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":305},"end":{"line":6,"column":36,"index":341}}],"key":"1QtvBFz/7nWHkHHp1/BPdopX/5s=","exportNames":["*"],"imports":1}},{"name":"@react-native-aria/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":342},"end":{"line":7,"column":49,"index":391}}],"key":"ijskzN+IV/diNKTT1BJzRK8qf8I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.useSliderThumb = useSliderThumb;\n  var _reactAriaUtils = require(_dependencyMap[0], \"@react-aria/utils\");\n  var _utils = require(_dependencyMap[1], \"./utils\");\n  var _react = require(_dependencyMap[2], \"react\");\n  var _reactAriaFocus = require(_dependencyMap[3], \"@react-aria/focus\");\n  var _reactAriaLabel = require(_dependencyMap[4], \"@react-aria/label\");\n  var _useMove = require(_dependencyMap[5], \"./useMove\");\n  var _reactNativeAriaUtils = require(_dependencyMap[6], \"@react-native-aria/utils\");\n  /**\n   * Provides behavior and accessibility for a thumb of a slider component.\n   *\n   * @param opts Options for this Slider thumb.\n   * @param state Slider state, created via `useSliderState`.\n   */\n  function useSliderThumb(opts, state, isReversed) {\n    let {\n      index,\n      isRequired,\n      isDisabled,\n      validationState,\n      trackLayout,\n      inputRef\n    } = opts;\n    let isVertical = opts.orientation === 'vertical';\n    let direction = (0, _reactNativeAriaUtils.isRTL)() ? 'rtl' : undefined;\n    let {\n      addGlobalListener,\n      removeGlobalListener\n    } = (0, _reactAriaUtils.useGlobalListeners)();\n    let labelId = _utils.sliderIds.get(state);\n    const {\n      labelProps,\n      fieldProps\n    } = (0, _reactAriaLabel.useLabel)(Object.assign({}, opts, {\n      'id': (0, _utils.getSliderThumbId)(state, index),\n      'aria-labelledby': `${labelId} ${opts['aria-labelledby'] ?? ''}`.trim()\n    }));\n    const value = state.values[index];\n    const focusInput = (0, _react.useCallback)(() => {\n      if (inputRef.current) {\n        (0, _reactAriaUtils.focusWithoutScrolling)(inputRef.current);\n      }\n    }, [inputRef]);\n    const isFocused = state.focusedThumb === index;\n    (0, _react.useEffect)(() => {\n      if (isFocused) {\n        focusInput();\n      }\n    }, [isFocused, focusInput]);\n    const stateRef = (0, _react.useRef)(null);\n    stateRef.current = state;\n    let reverseX = isReversed || direction === 'rtl';\n    let currentPosition = (0, _react.useRef)(null);\n    let {\n      moveProps\n    } = (0, _useMove.useMove)({\n      onMoveStart() {\n        currentPosition.current = null;\n        state.setThumbDragging(index, true);\n      },\n      onMove({\n        deltaX,\n        deltaY,\n        pointerType\n      }) {\n        let size = isVertical ? trackLayout.height : trackLayout.width;\n        if (currentPosition.current == null) {\n          currentPosition.current = stateRef.current.getThumbPercent(index) * size;\n        }\n        if (pointerType === 'keyboard') {\n          // (invert left/right according to language direction) + (according to vertical)\n          let delta = ((reverseX ? -deltaX : deltaX) + (reverseX ? deltaY : -deltaY)) * stateRef.current.step;\n          currentPosition.current += delta * size;\n          stateRef.current.setThumbValue(index, stateRef.current.getThumbValue(index) + delta);\n        } else {\n          let delta = isVertical ? deltaY : deltaX;\n          if (reverseX) {\n            if (!isVertical) {\n              delta = -delta;\n            }\n          } else {\n            if (isVertical) {\n              delta = -delta;\n            }\n          }\n          currentPosition.current += delta;\n          stateRef.current.setThumbPercent(index, (0, _reactAriaUtils.clamp)(currentPosition.current / size, 0, 1));\n        }\n      },\n      onMoveEnd() {\n        state.setThumbDragging(index, false);\n      }\n    });\n\n    // Immediately register editability with the state\n    state.setThumbEditable(index, !isDisabled);\n    const {\n      focusableProps\n    } = (0, _reactAriaFocus.useFocusable)((0, _reactAriaUtils.mergeProps)(opts, {\n      onFocus: () => state.setFocusedThumb(index),\n      onBlur: () => state.setFocusedThumb(undefined)\n    }), inputRef);\n    let currentPointer = (0, _react.useRef)(undefined);\n    let onDown = id => {\n      focusInput();\n      currentPointer.current = id;\n      state.setThumbDragging(index, true);\n      addGlobalListener(window, 'mouseup', onUp, false);\n      addGlobalListener(window, 'touchend', onUp, false);\n      addGlobalListener(window, 'pointerup', onUp, false);\n    };\n    let onUp = e => {\n      var _e$changedTouches;\n      let id = e.pointerId ?? ((_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : _e$changedTouches[0].identifier);\n      if (id === currentPointer.current) {\n        focusInput();\n        state.setThumbDragging(index, false);\n        removeGlobalListener(window, 'mouseup', onUp, false);\n        removeGlobalListener(window, 'touchend', onUp, false);\n        removeGlobalListener(window, 'pointerup', onUp, false);\n      }\n    };\n\n    // We install mouse handlers for the drag motion on the thumb div, but\n    // not the key handler for moving the thumb with the slider.  Instead,\n    // we focus the range input, and let the browser handle the keyboard\n    // interactions; we then listen to input's onChange to update state.\n    return {\n      inputProps: (0, _reactAriaUtils.mergeProps)(focusableProps, fieldProps, {\n        'type': 'range',\n        'tabIndex': !isDisabled ? 0 : undefined,\n        'min': state.getThumbMinValue(index),\n        'max': state.getThumbMaxValue(index),\n        'step': state.step,\n        'value': value,\n        'disabled': isDisabled,\n        'aria-orientation': opts.orientation,\n        'aria-valuetext': state.getThumbValueLabel(index),\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': opts['aria-errormessage'],\n        'onChange': e => {\n          state.setThumbValue(index, parseFloat(e.target.value));\n        }\n      }),\n      thumbProps: !isDisabled ? (0, _reactAriaUtils.mergeProps)(moveProps, {\n        onMouseDown: e => {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onDown();\n        },\n        onPointerDown: e => {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onDown(e.pointerId);\n        },\n        onTouchStart: e => {\n          onDown(e.changedTouches[0].identifier);\n        }\n      }) : {},\n      labelProps\n    };\n  }\n});","lineCount":172,"map":[[7,2,14,0,"exports"],[7,9,14,0],[7,10,14,0,"useSliderThumb"],[7,24,14,0],[7,27,14,0,"useSliderThumb"],[7,41,14,0],[8,2,1,0],[8,6,1,0,"_reactAriaUtils"],[8,21,1,0],[8,24,1,0,"require"],[8,31,1,0],[8,32,1,0,"_dependencyMap"],[8,46,1,0],[9,2,2,0],[9,6,2,0,"_utils"],[9,12,2,0],[9,15,2,0,"require"],[9,22,2,0],[9,23,2,0,"_dependencyMap"],[9,37,2,0],[10,2,3,0],[10,6,3,0,"_react"],[10,12,3,0],[10,15,3,0,"require"],[10,22,3,0],[10,23,3,0,"_dependencyMap"],[10,37,3,0],[11,2,4,0],[11,6,4,0,"_reactAriaFocus"],[11,21,4,0],[11,24,4,0,"require"],[11,31,4,0],[11,32,4,0,"_dependencyMap"],[11,46,4,0],[12,2,5,0],[12,6,5,0,"_reactAriaLabel"],[12,21,5,0],[12,24,5,0,"require"],[12,31,5,0],[12,32,5,0,"_dependencyMap"],[12,46,5,0],[13,2,6,0],[13,6,6,0,"_useMove"],[13,14,6,0],[13,17,6,0,"require"],[13,24,6,0],[13,25,6,0,"_dependencyMap"],[13,39,6,0],[14,2,7,0],[14,6,7,0,"_reactNativeAriaUtils"],[14,27,7,0],[14,30,7,0,"require"],[14,37,7,0],[14,38,7,0,"_dependencyMap"],[14,52,7,0],[15,2,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,2,14,7],[21,11,14,16,"useSliderThumb"],[21,25,14,30,"useSliderThumb"],[21,26,14,31,"opts"],[21,30,14,35],[21,32,14,37,"state"],[21,37,14,42],[21,39,14,44,"isReversed"],[21,49,14,54],[21,51,14,56],[22,4,15,2],[22,8,15,6],[23,6,16,4,"index"],[23,11,16,9],[24,6,17,4,"isRequired"],[24,16,17,14],[25,6,18,4,"isDisabled"],[25,16,18,14],[26,6,19,4,"validationState"],[26,21,19,19],[27,6,20,4,"trackLayout"],[27,17,20,15],[28,6,21,4,"inputRef"],[29,4,22,2],[29,5,22,3],[29,8,22,6,"opts"],[29,12,22,10],[30,4,23,2],[30,8,23,6,"isVertical"],[30,18,23,16],[30,21,23,19,"opts"],[30,25,23,23],[30,26,23,24,"orientation"],[30,37,23,35],[30,42,23,40],[30,52,23,50],[31,4,24,2],[31,8,24,6,"direction"],[31,17,24,15],[31,20,24,18],[31,24,24,18,"isRTL"],[31,45,24,23],[31,46,24,23,"isRTL"],[31,51,24,23],[31,53,24,24],[31,54,24,25],[31,57,24,28],[31,62,24,33],[31,65,24,36,"undefined"],[31,74,24,45],[32,4,25,2],[32,8,25,6],[33,6,26,4,"addGlobalListener"],[33,23,26,21],[34,6,27,4,"removeGlobalListener"],[35,4,28,2],[35,5,28,3],[35,8,28,6],[35,12,28,6,"useGlobalListeners"],[35,27,28,24],[35,28,28,24,"useGlobalListeners"],[35,46,28,24],[35,48,28,25],[35,49,28,26],[36,4,29,2],[36,8,29,6,"labelId"],[36,15,29,13],[36,18,29,16,"sliderIds"],[36,24,29,25],[36,25,29,25,"sliderIds"],[36,34,29,25],[36,35,29,26,"get"],[36,38,29,29],[36,39,29,30,"state"],[36,44,29,35],[36,45,29,36],[37,4,30,2],[37,10,30,8],[38,6,31,4,"labelProps"],[38,16,31,14],[39,6,32,4,"fieldProps"],[40,4,33,2],[40,5,33,3],[40,8,33,6],[40,12,33,6,"useLabel"],[40,27,33,14],[40,28,33,14,"useLabel"],[40,36,33,14],[40,38,33,14,"Object"],[40,44,33,14],[40,45,33,14,"assign"],[40,51,33,14],[40,56,34,7,"opts"],[40,60,34,11],[41,6,35,4],[41,10,35,8],[41,12,35,10],[41,16,35,10,"getSliderThumbId"],[41,22,35,26],[41,23,35,26,"getSliderThumbId"],[41,39,35,26],[41,41,35,27,"state"],[41,46,35,32],[41,48,35,34,"index"],[41,53,35,39],[41,54,35,40],[42,6,36,4],[42,23,36,21],[42,25,36,23],[42,28,36,26,"labelId"],[42,35,36,33],[42,39,36,37,"opts"],[42,43,36,41],[42,44,36,42],[42,61,36,59],[42,62,36,60],[42,66,36,64],[42,68,36,66],[42,70,36,68],[42,71,36,69,"trim"],[42,75,36,73],[42,76,36,74],[43,4,36,75],[43,6,37,3],[43,7,37,4],[44,4,38,2],[44,10,38,8,"value"],[44,15,38,13],[44,18,38,16,"state"],[44,23,38,21],[44,24,38,22,"values"],[44,30,38,28],[44,31,38,29,"index"],[44,36,38,34],[44,37,38,35],[45,4,39,2],[45,10,39,8,"focusInput"],[45,20,39,18],[45,23,39,21],[45,27,39,21,"useCallback"],[45,33,39,32],[45,34,39,32,"useCallback"],[45,45,39,32],[45,47,39,33],[45,53,39,39],[46,6,40,4],[46,10,40,8,"inputRef"],[46,18,40,16],[46,19,40,17,"current"],[46,26,40,24],[46,28,40,26],[47,8,41,6],[47,12,41,6,"focusWithoutScrolling"],[47,27,41,27],[47,28,41,27,"focusWithoutScrolling"],[47,49,41,27],[47,51,41,28,"inputRef"],[47,59,41,36],[47,60,41,37,"current"],[47,67,41,44],[47,68,41,45],[48,6,42,4],[49,4,43,2],[49,5,43,3],[49,7,43,5],[49,8,43,6,"inputRef"],[49,16,43,14],[49,17,43,15],[49,18,43,16],[50,4,44,2],[50,10,44,8,"isFocused"],[50,19,44,17],[50,22,44,20,"state"],[50,27,44,25],[50,28,44,26,"focusedThumb"],[50,40,44,38],[50,45,44,43,"index"],[50,50,44,48],[51,4,45,2],[51,8,45,2,"useEffect"],[51,14,45,11],[51,15,45,11,"useEffect"],[51,24,45,11],[51,26,45,12],[51,32,45,18],[52,6,46,4],[52,10,46,8,"isFocused"],[52,19,46,17],[52,21,46,19],[53,8,47,6,"focusInput"],[53,18,47,16],[53,19,47,17],[53,20,47,18],[54,6,48,4],[55,4,49,2],[55,5,49,3],[55,7,49,5],[55,8,49,6,"isFocused"],[55,17,49,15],[55,19,49,17,"focusInput"],[55,29,49,27],[55,30,49,28],[55,31,49,29],[56,4,50,2],[56,10,50,8,"stateRef"],[56,18,50,16],[56,21,50,19],[56,25,50,19,"useRef"],[56,31,50,25],[56,32,50,25,"useRef"],[56,38,50,25],[56,40,50,26],[56,44,50,30],[56,45,50,31],[57,4,51,2,"stateRef"],[57,12,51,10],[57,13,51,11,"current"],[57,20,51,18],[57,23,51,21,"state"],[57,28,51,26],[58,4,52,2],[58,8,52,6,"reverseX"],[58,16,52,14],[58,19,52,17,"isReversed"],[58,29,52,27],[58,33,52,31,"direction"],[58,42,52,40],[58,47,52,45],[58,52,52,50],[59,4,53,2],[59,8,53,6,"currentPosition"],[59,23,53,21],[59,26,53,24],[59,30,53,24,"useRef"],[59,36,53,30],[59,37,53,30,"useRef"],[59,43,53,30],[59,45,53,31],[59,49,53,35],[59,50,53,36],[60,4,54,2],[60,8,54,6],[61,6,55,4,"moveProps"],[62,4,56,2],[62,5,56,3],[62,8,56,6],[62,12,56,6,"useMove"],[62,20,56,13],[62,21,56,13,"useMove"],[62,28,56,13],[62,30,56,14],[63,6,57,4,"onMoveStart"],[63,17,57,15,"onMoveStart"],[63,18,57,15],[63,20,57,18],[64,8,58,6,"currentPosition"],[64,23,58,21],[64,24,58,22,"current"],[64,31,58,29],[64,34,58,32],[64,38,58,36],[65,8,59,6,"state"],[65,13,59,11],[65,14,59,12,"setThumbDragging"],[65,30,59,28],[65,31,59,29,"index"],[65,36,59,34],[65,38,59,36],[65,42,59,40],[65,43,59,41],[66,6,60,4],[66,7,60,5],[67,6,61,4,"onMove"],[67,12,61,10,"onMove"],[67,13,61,11],[68,8,62,6,"deltaX"],[68,14,62,12],[69,8,63,6,"deltaY"],[69,14,63,12],[70,8,64,6,"pointerType"],[71,6,65,4],[71,7,65,5],[71,9,65,7],[72,8,66,6],[72,12,66,10,"size"],[72,16,66,14],[72,19,66,17,"isVertical"],[72,29,66,27],[72,32,66,30,"trackLayout"],[72,43,66,41],[72,44,66,42,"height"],[72,50,66,48],[72,53,66,51,"trackLayout"],[72,64,66,62],[72,65,66,63,"width"],[72,70,66,68],[73,8,67,6],[73,12,67,10,"currentPosition"],[73,27,67,25],[73,28,67,26,"current"],[73,35,67,33],[73,39,67,37],[73,43,67,41],[73,45,67,43],[74,10,68,8,"currentPosition"],[74,25,68,23],[74,26,68,24,"current"],[74,33,68,31],[74,36,68,34,"stateRef"],[74,44,68,42],[74,45,68,43,"current"],[74,52,68,50],[74,53,68,51,"getThumbPercent"],[74,68,68,66],[74,69,68,67,"index"],[74,74,68,72],[74,75,68,73],[74,78,68,76,"size"],[74,82,68,80],[75,8,69,6],[76,8,70,6],[76,12,70,10,"pointerType"],[76,23,70,21],[76,28,70,26],[76,38,70,36],[76,40,70,38],[77,10,71,8],[78,10,72,8],[78,14,72,12,"delta"],[78,19,72,17],[78,22,72,20],[78,23,72,21],[78,24,72,22,"reverseX"],[78,32,72,30],[78,35,72,33],[78,36,72,34,"deltaX"],[78,42,72,40],[78,45,72,43,"deltaX"],[78,51,72,49],[78,56,72,54,"reverseX"],[78,64,72,62],[78,67,72,65,"deltaY"],[78,73,72,71],[78,76,72,74],[78,77,72,75,"deltaY"],[78,83,72,81],[78,84,72,82],[78,88,72,86,"stateRef"],[78,96,72,94],[78,97,72,95,"current"],[78,104,72,102],[78,105,72,103,"step"],[78,109,72,107],[79,10,73,8,"currentPosition"],[79,25,73,23],[79,26,73,24,"current"],[79,33,73,31],[79,37,73,35,"delta"],[79,42,73,40],[79,45,73,43,"size"],[79,49,73,47],[80,10,74,8,"stateRef"],[80,18,74,16],[80,19,74,17,"current"],[80,26,74,24],[80,27,74,25,"setThumbValue"],[80,40,74,38],[80,41,74,39,"index"],[80,46,74,44],[80,48,74,46,"stateRef"],[80,56,74,54],[80,57,74,55,"current"],[80,64,74,62],[80,65,74,63,"getThumbValue"],[80,78,74,76],[80,79,74,77,"index"],[80,84,74,82],[80,85,74,83],[80,88,74,86,"delta"],[80,93,74,91],[80,94,74,92],[81,8,75,6],[81,9,75,7],[81,15,75,13],[82,10,76,8],[82,14,76,12,"delta"],[82,19,76,17],[82,22,76,20,"isVertical"],[82,32,76,30],[82,35,76,33,"deltaY"],[82,41,76,39],[82,44,76,42,"deltaX"],[82,50,76,48],[83,10,77,8],[83,14,77,12,"reverseX"],[83,22,77,20],[83,24,77,22],[84,12,78,10],[84,16,78,14],[84,17,78,15,"isVertical"],[84,27,78,25],[84,29,78,27],[85,14,79,12,"delta"],[85,19,79,17],[85,22,79,20],[85,23,79,21,"delta"],[85,28,79,26],[86,12,80,10],[87,10,81,8],[87,11,81,9],[87,17,81,15],[88,12,82,10],[88,16,82,14,"isVertical"],[88,26,82,24],[88,28,82,26],[89,14,83,12,"delta"],[89,19,83,17],[89,22,83,20],[89,23,83,21,"delta"],[89,28,83,26],[90,12,84,10],[91,10,85,8],[92,10,86,8,"currentPosition"],[92,25,86,23],[92,26,86,24,"current"],[92,33,86,31],[92,37,86,35,"delta"],[92,42,86,40],[93,10,87,8,"stateRef"],[93,18,87,16],[93,19,87,17,"current"],[93,26,87,24],[93,27,87,25,"setThumbPercent"],[93,42,87,40],[93,43,87,41,"index"],[93,48,87,46],[93,50,87,48],[93,54,87,48,"clamp"],[93,69,87,53],[93,70,87,53,"clamp"],[93,75,87,53],[93,77,87,54,"currentPosition"],[93,92,87,69],[93,93,87,70,"current"],[93,100,87,77],[93,103,87,80,"size"],[93,107,87,84],[93,109,87,86],[93,110,87,87],[93,112,87,89],[93,113,87,90],[93,114,87,91],[93,115,87,92],[94,8,88,6],[95,6,89,4],[95,7,89,5],[96,6,90,4,"onMoveEnd"],[96,15,90,13,"onMoveEnd"],[96,16,90,13],[96,18,90,16],[97,8,91,6,"state"],[97,13,91,11],[97,14,91,12,"setThumbDragging"],[97,30,91,28],[97,31,91,29,"index"],[97,36,91,34],[97,38,91,36],[97,43,91,41],[97,44,91,42],[98,6,92,4],[99,4,93,2],[99,5,93,3],[99,6,93,4],[101,4,95,2],[102,4,96,2,"state"],[102,9,96,7],[102,10,96,8,"setThumbEditable"],[102,26,96,24],[102,27,96,25,"index"],[102,32,96,30],[102,34,96,32],[102,35,96,33,"isDisabled"],[102,45,96,43],[102,46,96,44],[103,4,97,2],[103,10,97,8],[104,6,98,4,"focusableProps"],[105,4,99,2],[105,5,99,3],[105,8,99,6],[105,12,99,6,"useFocusable"],[105,27,99,18],[105,28,99,18,"useFocusable"],[105,40,99,18],[105,42,99,19],[105,46,99,19,"mergeProps"],[105,61,99,29],[105,62,99,29,"mergeProps"],[105,72,99,29],[105,74,99,30,"opts"],[105,78,99,34],[105,80,99,36],[106,6,100,4,"onFocus"],[106,13,100,11],[106,15,100,13,"onFocus"],[106,16,100,13],[106,21,100,19,"state"],[106,26,100,24],[106,27,100,25,"setFocusedThumb"],[106,42,100,40],[106,43,100,41,"index"],[106,48,100,46],[106,49,100,47],[107,6,101,4,"onBlur"],[107,12,101,10],[107,14,101,12,"onBlur"],[107,15,101,12],[107,20,101,18,"state"],[107,25,101,23],[107,26,101,24,"setFocusedThumb"],[107,41,101,39],[107,42,101,40,"undefined"],[107,51,101,49],[108,4,102,2],[108,5,102,3],[108,6,102,4],[108,8,102,6,"inputRef"],[108,16,102,14],[108,17,102,15],[109,4,103,2],[109,8,103,6,"currentPointer"],[109,22,103,20],[109,25,103,23],[109,29,103,23,"useRef"],[109,35,103,29],[109,36,103,29,"useRef"],[109,42,103,29],[109,44,103,30,"undefined"],[109,53,103,39],[109,54,103,40],[110,4,104,2],[110,8,104,6,"onDown"],[110,14,104,12],[110,17,104,15,"id"],[110,19,104,17],[110,23,104,21],[111,6,105,4,"focusInput"],[111,16,105,14],[111,17,105,15],[111,18,105,16],[112,6,106,4,"currentPointer"],[112,20,106,18],[112,21,106,19,"current"],[112,28,106,26],[112,31,106,29,"id"],[112,33,106,31],[113,6,107,4,"state"],[113,11,107,9],[113,12,107,10,"setThumbDragging"],[113,28,107,26],[113,29,107,27,"index"],[113,34,107,32],[113,36,107,34],[113,40,107,38],[113,41,107,39],[114,6,108,4,"addGlobalListener"],[114,23,108,21],[114,24,108,22,"window"],[114,30,108,28],[114,32,108,30],[114,41,108,39],[114,43,108,41,"onUp"],[114,47,108,45],[114,49,108,47],[114,54,108,52],[114,55,108,53],[115,6,109,4,"addGlobalListener"],[115,23,109,21],[115,24,109,22,"window"],[115,30,109,28],[115,32,109,30],[115,42,109,40],[115,44,109,42,"onUp"],[115,48,109,46],[115,50,109,48],[115,55,109,53],[115,56,109,54],[116,6,110,4,"addGlobalListener"],[116,23,110,21],[116,24,110,22,"window"],[116,30,110,28],[116,32,110,30],[116,43,110,41],[116,45,110,43,"onUp"],[116,49,110,47],[116,51,110,49],[116,56,110,54],[116,57,110,55],[117,4,111,2],[117,5,111,3],[118,4,112,2],[118,8,112,6,"onUp"],[118,12,112,10],[118,15,112,13,"e"],[118,16,112,14],[118,20,112,18],[119,6,113,4],[119,10,113,8,"_e$changedTouches"],[119,27,113,25],[120,6,114,4],[120,10,114,8,"id"],[120,12,114,10],[120,15,114,13,"e"],[120,16,114,14],[120,17,114,15,"pointerId"],[120,26,114,24],[120,31,114,29],[120,32,114,30,"_e$changedTouches"],[120,49,114,47],[120,52,114,50,"e"],[120,53,114,51],[120,54,114,52,"changedTouches"],[120,68,114,66],[120,74,114,72],[120,78,114,76],[120,82,114,80,"_e$changedTouches"],[120,99,114,97],[120,104,114,102],[120,109,114,107],[120,110,114,108],[120,113,114,111],[120,118,114,116],[120,119,114,117],[120,122,114,120,"_e$changedTouches"],[120,139,114,137],[120,140,114,138],[120,141,114,139],[120,142,114,140],[120,143,114,141,"identifier"],[120,153,114,151],[120,154,114,152],[121,6,115,4],[121,10,115,8,"id"],[121,12,115,10],[121,17,115,15,"currentPointer"],[121,31,115,29],[121,32,115,30,"current"],[121,39,115,37],[121,41,115,39],[122,8,116,6,"focusInput"],[122,18,116,16],[122,19,116,17],[122,20,116,18],[123,8,117,6,"state"],[123,13,117,11],[123,14,117,12,"setThumbDragging"],[123,30,117,28],[123,31,117,29,"index"],[123,36,117,34],[123,38,117,36],[123,43,117,41],[123,44,117,42],[124,8,118,6,"removeGlobalListener"],[124,28,118,26],[124,29,118,27,"window"],[124,35,118,33],[124,37,118,35],[124,46,118,44],[124,48,118,46,"onUp"],[124,52,118,50],[124,54,118,52],[124,59,118,57],[124,60,118,58],[125,8,119,6,"removeGlobalListener"],[125,28,119,26],[125,29,119,27,"window"],[125,35,119,33],[125,37,119,35],[125,47,119,45],[125,49,119,47,"onUp"],[125,53,119,51],[125,55,119,53],[125,60,119,58],[125,61,119,59],[126,8,120,6,"removeGlobalListener"],[126,28,120,26],[126,29,120,27,"window"],[126,35,120,33],[126,37,120,35],[126,48,120,46],[126,50,120,48,"onUp"],[126,54,120,52],[126,56,120,54],[126,61,120,59],[126,62,120,60],[127,6,121,4],[128,4,122,2],[128,5,122,3],[130,4,124,2],[131,4,125,2],[132,4,126,2],[133,4,127,2],[134,4,128,2],[134,11,128,9],[135,6,129,4,"inputProps"],[135,16,129,14],[135,18,129,16],[135,22,129,16,"mergeProps"],[135,37,129,26],[135,38,129,26,"mergeProps"],[135,48,129,26],[135,50,129,27,"focusableProps"],[135,64,129,41],[135,66,129,43,"fieldProps"],[135,76,129,53],[135,78,129,55],[136,8,130,6],[136,14,130,12],[136,16,130,14],[136,23,130,21],[137,8,131,6],[137,18,131,16],[137,20,131,18],[137,21,131,19,"isDisabled"],[137,31,131,29],[137,34,131,32],[137,35,131,33],[137,38,131,36,"undefined"],[137,47,131,45],[138,8,132,6],[138,13,132,11],[138,15,132,13,"state"],[138,20,132,18],[138,21,132,19,"getThumbMinValue"],[138,37,132,35],[138,38,132,36,"index"],[138,43,132,41],[138,44,132,42],[139,8,133,6],[139,13,133,11],[139,15,133,13,"state"],[139,20,133,18],[139,21,133,19,"getThumbMaxValue"],[139,37,133,35],[139,38,133,36,"index"],[139,43,133,41],[139,44,133,42],[140,8,134,6],[140,14,134,12],[140,16,134,14,"state"],[140,21,134,19],[140,22,134,20,"step"],[140,26,134,24],[141,8,135,6],[141,15,135,13],[141,17,135,15,"value"],[141,22,135,20],[142,8,136,6],[142,18,136,16],[142,20,136,18,"isDisabled"],[142,30,136,28],[143,8,137,6],[143,26,137,24],[143,28,137,26,"opts"],[143,32,137,30],[143,33,137,31,"orientation"],[143,44,137,42],[144,8,138,6],[144,24,138,22],[144,26,138,24,"state"],[144,31,138,29],[144,32,138,30,"getThumbValueLabel"],[144,50,138,48],[144,51,138,49,"index"],[144,56,138,54],[144,57,138,55],[145,8,139,6],[145,23,139,21],[145,25,139,23,"isRequired"],[145,35,139,33],[145,39,139,37,"undefined"],[145,48,139,46],[146,8,140,6],[146,22,140,20],[146,24,140,22,"validationState"],[146,39,140,37],[146,44,140,42],[146,53,140,51],[146,57,140,55,"undefined"],[146,66,140,64],[147,8,141,6],[147,27,141,25],[147,29,141,27,"opts"],[147,33,141,31],[147,34,141,32],[147,53,141,51],[147,54,141,52],[148,8,142,6],[148,18,142,16],[148,20,142,18,"e"],[148,21,142,19],[148,25,142,23],[149,10,143,8,"state"],[149,15,143,13],[149,16,143,14,"setThumbValue"],[149,29,143,27],[149,30,143,28,"index"],[149,35,143,33],[149,37,143,35,"parseFloat"],[149,47,143,45],[149,48,143,46,"e"],[149,49,143,47],[149,50,143,48,"target"],[149,56,143,54],[149,57,143,55,"value"],[149,62,143,60],[149,63,143,61],[149,64,143,62],[150,8,144,6],[151,6,145,4],[151,7,145,5],[151,8,145,6],[152,6,146,4,"thumbProps"],[152,16,146,14],[152,18,146,16],[152,19,146,17,"isDisabled"],[152,29,146,27],[152,32,146,30],[152,36,146,30,"mergeProps"],[152,51,146,40],[152,52,146,40,"mergeProps"],[152,62,146,40],[152,64,146,41,"moveProps"],[152,73,146,50],[152,75,146,52],[153,8,147,6,"onMouseDown"],[153,19,147,17],[153,21,147,19,"e"],[153,22,147,20],[153,26,147,24],[154,10,148,8],[154,14,148,12,"e"],[154,15,148,13],[154,16,148,14,"button"],[154,22,148,20],[154,27,148,25],[154,28,148,26],[154,32,148,30,"e"],[154,33,148,31],[154,34,148,32,"altKey"],[154,40,148,38],[154,44,148,42,"e"],[154,45,148,43],[154,46,148,44,"ctrlKey"],[154,53,148,51],[154,57,148,55,"e"],[154,58,148,56],[154,59,148,57,"metaKey"],[154,66,148,64],[154,68,148,66],[155,12,149,10],[156,10,150,8],[157,10,151,8,"onDown"],[157,16,151,14],[157,17,151,15],[157,18,151,16],[158,8,152,6],[158,9,152,7],[159,8,153,6,"onPointerDown"],[159,21,153,19],[159,23,153,21,"e"],[159,24,153,22],[159,28,153,26],[160,10,154,8],[160,14,154,12,"e"],[160,15,154,13],[160,16,154,14,"button"],[160,22,154,20],[160,27,154,25],[160,28,154,26],[160,32,154,30,"e"],[160,33,154,31],[160,34,154,32,"altKey"],[160,40,154,38],[160,44,154,42,"e"],[160,45,154,43],[160,46,154,44,"ctrlKey"],[160,53,154,51],[160,57,154,55,"e"],[160,58,154,56],[160,59,154,57,"metaKey"],[160,66,154,64],[160,68,154,66],[161,12,155,10],[162,10,156,8],[163,10,157,8,"onDown"],[163,16,157,14],[163,17,157,15,"e"],[163,18,157,16],[163,19,157,17,"pointerId"],[163,28,157,26],[163,29,157,27],[164,8,158,6],[164,9,158,7],[165,8,159,6,"onTouchStart"],[165,20,159,18],[165,22,159,20,"e"],[165,23,159,21],[165,27,159,25],[166,10,160,8,"onDown"],[166,16,160,14],[166,17,160,15,"e"],[166,18,160,16],[166,19,160,17,"changedTouches"],[166,33,160,31],[166,34,160,32],[166,35,160,33],[166,36,160,34],[166,37,160,35,"identifier"],[166,47,160,45],[166,48,160,46],[167,8,161,6],[168,6,162,4],[168,7,162,5],[168,8,162,6],[168,11,162,9],[168,12,162,10],[168,13,162,11],[169,6,163,4,"labelProps"],[170,4,164,2],[170,5,164,3],[171,2,165,0],[172,0,165,1],[172,3]],"functionMap":{"names":["<global>","useSliderThumb","focusInput","useEffect$argument_0","useMove$argument_0.onMoveStart","useMove$argument_0.onMove","useMove$argument_0.onMoveEnd","mergeProps$argument_1.onFocus","mergeProps$argument_1.onBlur","onDown","onUp","mergeProps$argument_2.onChange","mergeProps$argument_1.onMouseDown","mergeProps$argument_1.onPointerDown","mergeProps$argument_1.onTouchStart"],"mappings":"AAA;OCa;iCCyB;GDI;YEE;GFI;IGQ;KHG;IIC;KJ4B;IKC;KLE;aMQ,kCN;YOC,sCP;eQG;GRO;aSC;GTU;kBUoB;OVE;mBWG;OXK;qBYC;OZK;oBaC;ObE;CDI"},"hasCjsExports":false},"type":"js/module"}]}