{"dependencies":[{"name":"@firebase/app","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":125,"index":125}}],"key":"yqoiliQRTUQ9dvZxqpPLznnKsQ4=","exportNames":["*"],"imports":1}},{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":126},"end":{"line":2,"column":338,"index":464}}],"key":"BkBYK9w6fHruAfQL7S4qWsYds2s=","exportNames":["*"],"imports":1}},{"name":"@firebase/component","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":465},"end":{"line":3,"column":48,"index":513}}],"key":"Us9erpYucP7UHYJWKKSJ2tNZDvI=","exportNames":["*"],"imports":1}},{"name":"@firebase/logger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":514},"end":{"line":4,"column":52,"index":566}}],"key":"ORGtDHPxrSEUSLP9WZfOMGsHx5g=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"$\", {\n    enumerable: true,\n    get: function () {\n      return SAMLAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"A\", {\n    enumerable: true,\n    get: function () {\n      return ActionCodeOperation;\n    }\n  });\n  Object.defineProperty(exports, \"B\", {\n    enumerable: true,\n    get: function () {\n      return useDeviceLanguage;\n    }\n  });\n  Object.defineProperty(exports, \"C\", {\n    enumerable: true,\n    get: function () {\n      return updateCurrentUser;\n    }\n  });\n  Object.defineProperty(exports, \"D\", {\n    enumerable: true,\n    get: function () {\n      return signOut;\n    }\n  });\n  Object.defineProperty(exports, \"E\", {\n    enumerable: true,\n    get: function () {\n      return revokeAccessToken;\n    }\n  });\n  Object.defineProperty(exports, \"F\", {\n    enumerable: true,\n    get: function () {\n      return FactorId;\n    }\n  });\n  Object.defineProperty(exports, \"G\", {\n    enumerable: true,\n    get: function () {\n      return deleteUser;\n    }\n  });\n  Object.defineProperty(exports, \"H\", {\n    enumerable: true,\n    get: function () {\n      return debugErrorMap;\n    }\n  });\n  Object.defineProperty(exports, \"I\", {\n    enumerable: true,\n    get: function () {\n      return prodErrorMap;\n    }\n  });\n  Object.defineProperty(exports, \"J\", {\n    enumerable: true,\n    get: function () {\n      return AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;\n    }\n  });\n  Object.defineProperty(exports, \"K\", {\n    enumerable: true,\n    get: function () {\n      return initializeAuth;\n    }\n  });\n  Object.defineProperty(exports, \"L\", {\n    enumerable: true,\n    get: function () {\n      return connectAuthEmulator;\n    }\n  });\n  Object.defineProperty(exports, \"M\", {\n    enumerable: true,\n    get: function () {\n      return AuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"N\", {\n    enumerable: true,\n    get: function () {\n      return EmailAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"O\", {\n    enumerable: true,\n    get: function () {\n      return OperationType;\n    }\n  });\n  Object.defineProperty(exports, \"P\", {\n    enumerable: true,\n    get: function () {\n      return PhoneAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Q\", {\n    enumerable: true,\n    get: function () {\n      return OAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"R\", {\n    enumerable: true,\n    get: function () {\n      return RecaptchaVerifier;\n    }\n  });\n  Object.defineProperty(exports, \"S\", {\n    enumerable: true,\n    get: function () {\n      return SignInMethod;\n    }\n  });\n  Object.defineProperty(exports, \"T\", {\n    enumerable: true,\n    get: function () {\n      return TotpMultiFactorGenerator;\n    }\n  });\n  Object.defineProperty(exports, \"U\", {\n    enumerable: true,\n    get: function () {\n      return PhoneAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"V\", {\n    enumerable: true,\n    get: function () {\n      return inMemoryPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"W\", {\n    enumerable: true,\n    get: function () {\n      return EmailAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"X\", {\n    enumerable: true,\n    get: function () {\n      return FacebookAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Y\", {\n    enumerable: true,\n    get: function () {\n      return GoogleAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Z\", {\n    enumerable: true,\n    get: function () {\n      return GithubAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"_\", {\n    enumerable: true,\n    get: function () {\n      return OAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"a\", {\n    enumerable: true,\n    get: function () {\n      return browserCookiePersistence;\n    }\n  });\n  Object.defineProperty(exports, \"a0\", {\n    enumerable: true,\n    get: function () {\n      return TwitterAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"a1\", {\n    enumerable: true,\n    get: function () {\n      return signInAnonymously;\n    }\n  });\n  Object.defineProperty(exports, \"a2\", {\n    enumerable: true,\n    get: function () {\n      return signInWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a3\", {\n    enumerable: true,\n    get: function () {\n      return linkWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a4\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a5\", {\n    enumerable: true,\n    get: function () {\n      return signInWithCustomToken;\n    }\n  });\n  Object.defineProperty(exports, \"a6\", {\n    enumerable: true,\n    get: function () {\n      return sendPasswordResetEmail;\n    }\n  });\n  Object.defineProperty(exports, \"a7\", {\n    enumerable: true,\n    get: function () {\n      return confirmPasswordReset;\n    }\n  });\n  Object.defineProperty(exports, \"a8\", {\n    enumerable: true,\n    get: function () {\n      return applyActionCode;\n    }\n  });\n  Object.defineProperty(exports, \"a9\", {\n    enumerable: true,\n    get: function () {\n      return checkActionCode;\n    }\n  });\n  Object.defineProperty(exports, \"aA\", {\n    enumerable: true,\n    get: function () {\n      return signInWithIdp;\n    }\n  });\n  Object.defineProperty(exports, \"aB\", {\n    enumerable: true,\n    get: function () {\n      return _fail;\n    }\n  });\n  Object.defineProperty(exports, \"aC\", {\n    enumerable: true,\n    get: function () {\n      return debugAssert;\n    }\n  });\n  Object.defineProperty(exports, \"aD\", {\n    enumerable: true,\n    get: function () {\n      return _persistenceKeyName;\n    }\n  });\n  Object.defineProperty(exports, \"aE\", {\n    enumerable: true,\n    get: function () {\n      return _serverAppCurrentUserOperationNotSupportedError;\n    }\n  });\n  Object.defineProperty(exports, \"aF\", {\n    enumerable: true,\n    get: function () {\n      return _castAuth;\n    }\n  });\n  Object.defineProperty(exports, \"aG\", {\n    enumerable: true,\n    get: function () {\n      return FederatedAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"aH\", {\n    enumerable: true,\n    get: function () {\n      return BaseOAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"aI\", {\n    enumerable: true,\n    get: function () {\n      return _emulatorUrl;\n    }\n  });\n  Object.defineProperty(exports, \"aJ\", {\n    enumerable: true,\n    get: function () {\n      return _performApiRequest;\n    }\n  });\n  Object.defineProperty(exports, \"aK\", {\n    enumerable: true,\n    get: function () {\n      return _isIOS;\n    }\n  });\n  Object.defineProperty(exports, \"aL\", {\n    enumerable: true,\n    get: function () {\n      return _isAndroid;\n    }\n  });\n  Object.defineProperty(exports, \"aM\", {\n    enumerable: true,\n    get: function () {\n      return _isIOS7Or8;\n    }\n  });\n  Object.defineProperty(exports, \"aN\", {\n    enumerable: true,\n    get: function () {\n      return _createError;\n    }\n  });\n  Object.defineProperty(exports, \"aO\", {\n    enumerable: true,\n    get: function () {\n      return _isMobileBrowser;\n    }\n  });\n  Object.defineProperty(exports, \"aP\", {\n    enumerable: true,\n    get: function () {\n      return _isIE10;\n    }\n  });\n  Object.defineProperty(exports, \"aQ\", {\n    enumerable: true,\n    get: function () {\n      return UserImpl;\n    }\n  });\n  Object.defineProperty(exports, \"aR\", {\n    enumerable: true,\n    get: function () {\n      return AuthImpl;\n    }\n  });\n  Object.defineProperty(exports, \"aS\", {\n    enumerable: true,\n    get: function () {\n      return _getClientVersion;\n    }\n  });\n  Object.defineProperty(exports, \"aT\", {\n    enumerable: true,\n    get: function () {\n      return FetchProvider;\n    }\n  });\n  Object.defineProperty(exports, \"aU\", {\n    enumerable: true,\n    get: function () {\n      return SAMLAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"aa\", {\n    enumerable: true,\n    get: function () {\n      return verifyPasswordResetCode;\n    }\n  });\n  Object.defineProperty(exports, \"ab\", {\n    enumerable: true,\n    get: function () {\n      return createUserWithEmailAndPassword;\n    }\n  });\n  Object.defineProperty(exports, \"ac\", {\n    enumerable: true,\n    get: function () {\n      return signInWithEmailAndPassword;\n    }\n  });\n  Object.defineProperty(exports, \"ad\", {\n    enumerable: true,\n    get: function () {\n      return sendSignInLinkToEmail;\n    }\n  });\n  Object.defineProperty(exports, \"ae\", {\n    enumerable: true,\n    get: function () {\n      return isSignInWithEmailLink;\n    }\n  });\n  Object.defineProperty(exports, \"af\", {\n    enumerable: true,\n    get: function () {\n      return signInWithEmailLink;\n    }\n  });\n  Object.defineProperty(exports, \"ag\", {\n    enumerable: true,\n    get: function () {\n      return fetchSignInMethodsForEmail;\n    }\n  });\n  Object.defineProperty(exports, \"ah\", {\n    enumerable: true,\n    get: function () {\n      return sendEmailVerification;\n    }\n  });\n  Object.defineProperty(exports, \"ai\", {\n    enumerable: true,\n    get: function () {\n      return verifyBeforeUpdateEmail;\n    }\n  });\n  Object.defineProperty(exports, \"aj\", {\n    enumerable: true,\n    get: function () {\n      return ActionCodeURL;\n    }\n  });\n  Object.defineProperty(exports, \"ak\", {\n    enumerable: true,\n    get: function () {\n      return parseActionCodeURL;\n    }\n  });\n  Object.defineProperty(exports, \"al\", {\n    enumerable: true,\n    get: function () {\n      return updateProfile;\n    }\n  });\n  Object.defineProperty(exports, \"am\", {\n    enumerable: true,\n    get: function () {\n      return updateEmail;\n    }\n  });\n  Object.defineProperty(exports, \"an\", {\n    enumerable: true,\n    get: function () {\n      return updatePassword;\n    }\n  });\n  Object.defineProperty(exports, \"ao\", {\n    enumerable: true,\n    get: function () {\n      return getIdToken;\n    }\n  });\n  Object.defineProperty(exports, \"ap\", {\n    enumerable: true,\n    get: function () {\n      return getIdTokenResult;\n    }\n  });\n  Object.defineProperty(exports, \"aq\", {\n    enumerable: true,\n    get: function () {\n      return unlink;\n    }\n  });\n  Object.defineProperty(exports, \"ar\", {\n    enumerable: true,\n    get: function () {\n      return getAdditionalUserInfo;\n    }\n  });\n  Object.defineProperty(exports, \"as\", {\n    enumerable: true,\n    get: function () {\n      return reload;\n    }\n  });\n  Object.defineProperty(exports, \"at\", {\n    enumerable: true,\n    get: function () {\n      return getMultiFactorResolver;\n    }\n  });\n  Object.defineProperty(exports, \"au\", {\n    enumerable: true,\n    get: function () {\n      return multiFactor;\n    }\n  });\n  Object.defineProperty(exports, \"av\", {\n    enumerable: true,\n    get: function () {\n      return _getInstance;\n    }\n  });\n  Object.defineProperty(exports, \"aw\", {\n    enumerable: true,\n    get: function () {\n      return _assert;\n    }\n  });\n  Object.defineProperty(exports, \"ax\", {\n    enumerable: true,\n    get: function () {\n      return _signInWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"ay\", {\n    enumerable: true,\n    get: function () {\n      return _reauthenticate;\n    }\n  });\n  Object.defineProperty(exports, \"az\", {\n    enumerable: true,\n    get: function () {\n      return _link;\n    }\n  });\n  Object.defineProperty(exports, \"b\", {\n    enumerable: true,\n    get: function () {\n      return browserLocalPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"c\", {\n    enumerable: true,\n    get: function () {\n      return browserSessionPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"d\", {\n    enumerable: true,\n    get: function () {\n      return signInWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"e\", {\n    enumerable: true,\n    get: function () {\n      return linkWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"f\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"g\", {\n    enumerable: true,\n    get: function () {\n      return signInWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"h\", {\n    enumerable: true,\n    get: function () {\n      return linkWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"i\", {\n    enumerable: true,\n    get: function () {\n      return indexedDBLocalPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"j\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"k\", {\n    enumerable: true,\n    get: function () {\n      return getRedirectResult;\n    }\n  });\n  Object.defineProperty(exports, \"l\", {\n    enumerable: true,\n    get: function () {\n      return linkWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"m\", {\n    enumerable: true,\n    get: function () {\n      return browserPopupRedirectResolver;\n    }\n  });\n  Object.defineProperty(exports, \"n\", {\n    enumerable: true,\n    get: function () {\n      return PhoneMultiFactorGenerator;\n    }\n  });\n  Object.defineProperty(exports, \"o\", {\n    enumerable: true,\n    get: function () {\n      return TotpSecret;\n    }\n  });\n  Object.defineProperty(exports, \"p\", {\n    enumerable: true,\n    get: function () {\n      return getAuth;\n    }\n  });\n  Object.defineProperty(exports, \"q\", {\n    enumerable: true,\n    get: function () {\n      return ProviderId;\n    }\n  });\n  Object.defineProperty(exports, \"r\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"s\", {\n    enumerable: true,\n    get: function () {\n      return signInWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"t\", {\n    enumerable: true,\n    get: function () {\n      return setPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"u\", {\n    enumerable: true,\n    get: function () {\n      return updatePhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"v\", {\n    enumerable: true,\n    get: function () {\n      return initializeRecaptchaConfig;\n    }\n  });\n  Object.defineProperty(exports, \"w\", {\n    enumerable: true,\n    get: function () {\n      return validatePassword;\n    }\n  });\n  Object.defineProperty(exports, \"x\", {\n    enumerable: true,\n    get: function () {\n      return onIdTokenChanged;\n    }\n  });\n  Object.defineProperty(exports, \"y\", {\n    enumerable: true,\n    get: function () {\n      return beforeAuthStateChanged;\n    }\n  });\n  Object.defineProperty(exports, \"z\", {\n    enumerable: true,\n    get: function () {\n      return onAuthStateChanged;\n    }\n  });\n  var _firebaseApp = require(_dependencyMap[0], \"@firebase/app\");\n  var _firebaseUtil = require(_dependencyMap[1], \"@firebase/util\");\n  var _firebaseComponent = require(_dependencyMap[2], \"@firebase/component\");\n  var _firebaseLogger = require(_dependencyMap[3], \"@firebase/logger\");\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * An enum of factors that may be used for multifactor authentication.\n   *\n   * @public\n   */\n  const FactorId = {\n    /** Phone as second factor */\n    PHONE: 'phone',\n    TOTP: 'totp'\n  };\n  /**\n   * Enumeration of supported providers.\n   *\n   * @public\n   */\n  const ProviderId = {\n    /** Facebook provider ID */\n    FACEBOOK: 'facebook.com',\n    /** GitHub provider ID */\n    GITHUB: 'github.com',\n    /** Google provider ID */\n    GOOGLE: 'google.com',\n    /** Password provider */\n    PASSWORD: 'password',\n    /** Phone provider */\n    PHONE: 'phone',\n    /** Twitter provider ID */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported sign-in methods.\n   *\n   * @public\n   */\n  const SignInMethod = {\n    /** Email link sign in method */\n    EMAIL_LINK: 'emailLink',\n    /** Email/password sign in method */\n    EMAIL_PASSWORD: 'password',\n    /** Facebook sign in method */\n    FACEBOOK: 'facebook.com',\n    /** GitHub sign in method */\n    GITHUB: 'github.com',\n    /** Google sign in method */\n    GOOGLE: 'google.com',\n    /** Phone sign in method */\n    PHONE: 'phone',\n    /** Twitter sign in method */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported operation types.\n   *\n   * @public\n   */\n  const OperationType = {\n    /** Operation involving linking an additional provider to an already signed-in user. */\n    LINK: 'link',\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\n    REAUTHENTICATE: 'reauthenticate',\n    /** Operation involving signing in a user. */\n    SIGN_IN: 'signIn'\n  };\n  /**\n   * An enumeration of the possible email action types.\n   *\n   * @public\n   */\n  const ActionCodeOperation = {\n    /** The email link sign-in action. */\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n    /** The password reset action. */\n    PASSWORD_RESET: 'PASSWORD_RESET',\n    /** The email revocation action. */\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\n    /** The revert second factor addition email action. */\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n    /** The revert second factor addition email action. */\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n    /** The email verification action. */\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _debugErrorMap() {\n    return {\n      [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n      [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n      [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',\n      [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',\n      [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',\n      [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',\n      [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n      [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n      [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n      [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n      [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',\n      [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',\n      [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n      [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n      [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.',\n      [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n      [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n      [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n      [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',\n      [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n      [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.',\n      [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',\n      [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n      [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',\n      [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n      [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n      [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n      [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n      [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n      [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n      [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n      [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n      [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',\n      [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',\n      [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',\n      [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',\n      [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n      [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n      [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',\n      [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n      [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',\n      [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n      [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n      [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n      [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n      [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',\n      [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',\n      [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n      [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n      [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n      [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n      [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',\n      [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n      [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n      [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n      [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n      [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n      [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n      [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n      [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n      [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',\n      [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n      [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n      [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',\n      [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',\n      [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.',\n      [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n      [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n      [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n      [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n      [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n      [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n      [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n      [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n      [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n      [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n      [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n      [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n      [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',\n      [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',\n      [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n      [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n      [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n      [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n      [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n      [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',\n      [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n      [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n      [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n      [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n      [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n      [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.',\n      [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n      [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n      [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n      [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n      [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n      [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n      [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n      [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n      [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n      [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n      [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' + 'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n    };\n  }\n  function _prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return {\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'\n    };\n  }\n  /**\n   * A verbose error map with detailed descriptions for most error codes.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const debugErrorMap = _debugErrorMap;\n  /**\n   * A minimal error map with all verbose error messages stripped.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const prodErrorMap = _prodErrorMap;\n  const _DEFAULT_AUTH_ERROR_FACTORY = new _firebaseUtil.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n  /**\n   * A map of potential `Auth` error codes, for easier comparison with errors\n   * thrown by the SDK.\n   *\n   * @remarks\n   * Note that you can't tree-shake individual keys\n   * in the map, so by using the map you might substantially increase your\n   * bundle size.\n   *\n   * @public\n   */\n  const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n    ARGUMENT_ERROR: 'auth/argument-error',\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n    CODE_EXPIRED: 'auth/code-expired',\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n    EMAIL_EXISTS: 'auth/email-already-in-use',\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n    INTERNAL_ERROR: 'auth/internal-error',\n    INVALID_API_KEY: 'auth/invalid-api-key',\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n    INVALID_APP_ID: 'auth/invalid-app-id',\n    INVALID_AUTH: 'auth/invalid-user-token',\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n    INVALID_CODE: 'auth/invalid-verification-code',\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n    INVALID_EMAIL: 'auth/invalid-email',\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\n    INVALID_PASSWORD: 'auth/wrong-password',\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n    INVALID_SENDER: 'auth/invalid-sender',\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n    MISSING_CODE: 'auth/missing-verification-code',\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\n    MODULE_DESTROYED: 'auth/app-deleted',\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n    NULL_USER: 'auth/null-user',\n    NO_AUTH_EVENT: 'auth/no-auth-event',\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n    POPUP_BLOCKED: 'auth/popup-blocked',\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n    TIMEOUT: 'auth/timeout',\n    TOKEN_EXPIRED: 'auth/user-token-expired',\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\n    USER_CANCELLED: 'auth/user-cancelled',\n    USER_DELETED: 'auth/user-not-found',\n    USER_DISABLED: 'auth/user-disabled',\n    USER_MISMATCH: 'auth/user-mismatch',\n    USER_SIGNED_OUT: 'auth/user-signed-out',\n    WEAK_PASSWORD: 'auth/weak-password',\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n    ALREADY_INITIALIZED: 'auth/already-initialized',\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n    INVALID_REQ_TYPE: 'auth/invalid-req-type',\n    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const logClient = new _firebaseLogger.Logger('@firebase/auth');\n  function _logWarn(msg, ...args) {\n    if (logClient.logLevel <= _firebaseLogger.LogLevel.WARN) {\n      logClient.warn(`Auth (${_firebaseApp.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n  function _logError(msg, ...args) {\n    if (logClient.logLevel <= _firebaseLogger.LogLevel.ERROR) {\n      logClient.error(`Auth (${_firebaseApp.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _fail(authOrCode, ...rest) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n  function _createError(authOrCode, ...rest) {\n    return createErrorInternal(authOrCode, ...rest);\n  }\n  function _errorWithCustomMessage(auth, code, message) {\n    const errorMap = {\n      ...prodErrorMap(),\n      [code]: message\n    };\n    const factory = new _firebaseUtil.ErrorFactory('auth', 'Firebase', errorMap);\n    return factory.create(code, {\n      appName: auth.name\n    });\n  }\n  function _serverAppCurrentUserOperationNotSupportedError(auth) {\n    return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n  }\n  function createErrorInternal(authOrCode, ...rest) {\n    if (typeof authOrCode !== 'string') {\n      const code = rest[0];\n      const fullParams = [...rest.slice(1)];\n      if (fullParams[0]) {\n        fullParams[0].appName = authOrCode.name;\n      }\n      return authOrCode._errorFactory.create(code, ...fullParams);\n    }\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n  }\n  function _assert(assertion, authOrCode, ...rest) {\n    if (!assertion) {\n      throw createErrorInternal(authOrCode, ...rest);\n    }\n  }\n  /**\n   * Unconditionally fails, throwing an internal error with the given message.\n   *\n   * @param failure type of failure encountered\n   * @throws Error\n   */\n  function debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\n    _logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n  }\n  /**\n   * Fails if the given assertion condition is false, throwing an Error with the\n   * given message if it did.\n   *\n   * @param assertion\n   * @param message\n   */\n  function debugAssert(assertion, message) {\n    if (!assertion) {\n      debugFail(message);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getCurrentUrl() {\n    return typeof self !== 'undefined' && self.location?.href || '';\n  }\n  function _isHttpOrHttps() {\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n  }\n  function _getCurrentScheme() {\n    return typeof self !== 'undefined' && self.location?.protocol || null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine whether the browser is working online\n   */\n  function _isOnline() {\n    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    _isHttpOrHttps() || (0, _firebaseUtil.isBrowserExtension)() || 'connection' in navigator)) {\n      return navigator.onLine;\n    }\n    // If we can't determine the state, assume it is online.\n    return true;\n  }\n  function _getUserLanguage() {\n    if (typeof navigator === 'undefined') {\n      return null;\n    }\n    const navigatorLanguage = navigator;\n    return (\n      // Most reliable, but only supported in Chrome/Firefox.\n      navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n      // Supported in most browsers, but returns the language of the browser\n      // UI, not the language set in browser settings.\n      navigatorLanguage.language ||\n      // Couldn't determine language.\n      null\n    );\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * A structure to help pick between a range of long and short delay durations\n   * depending on the current environment. In general, the long delay is used for\n   * mobile environments whereas short delays are used for desktop environments.\n   */\n  class Delay {\n    constructor(shortDelay, longDelay) {\n      this.shortDelay = shortDelay;\n      this.longDelay = longDelay;\n      // Internal error when improperly initialized.\n      debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n      this.isMobile = (0, _firebaseUtil.isMobileCordova)() || (0, _firebaseUtil.isReactNative)();\n    }\n    get() {\n      if (!_isOnline()) {\n        // Pick the shorter timeout.\n        return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n      }\n      // If running in a mobile environment, return the long delay, otherwise\n      // return the short delay.\n      // This could be improved in the future to dynamically change based on other\n      // variables instead of just reading the current environment.\n      return this.isMobile ? this.longDelay : this.shortDelay;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _emulatorUrl(config, path) {\n    debugAssert(config.emulator, 'Emulator should always be set here');\n    const {\n      url\n    } = config.emulator;\n    if (!path) {\n      return url;\n    }\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class FetchProvider {\n    static initialize(fetchImpl, headersImpl, responseImpl) {\n      this.fetchImpl = fetchImpl;\n      if (headersImpl) {\n        this.headersImpl = headersImpl;\n      }\n      if (responseImpl) {\n        this.responseImpl = responseImpl;\n      }\n    }\n    static fetch() {\n      if (this.fetchImpl) {\n        return this.fetchImpl;\n      }\n      if (typeof self !== 'undefined' && 'fetch' in self) {\n        return self.fetch;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n        return globalThis.fetch;\n      }\n      if (typeof fetch !== 'undefined') {\n        return fetch;\n      }\n      debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static headers() {\n      if (this.headersImpl) {\n        return this.headersImpl;\n      }\n      if (typeof self !== 'undefined' && 'Headers' in self) {\n        return self.Headers;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n        return globalThis.Headers;\n      }\n      if (typeof Headers !== 'undefined') {\n        return Headers;\n      }\n      debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static response() {\n      if (this.responseImpl) {\n        return this.responseImpl;\n      }\n      if (typeof self !== 'undefined' && 'Response' in self) {\n        return self.Response;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Response) {\n        return globalThis.Response;\n      }\n      if (typeof Response !== 'undefined') {\n        return Response;\n      }\n      debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Map from errors returned by the server to errors to developer visible errors\n   */\n  const SERVER_ERROR_MAP = {\n    // Custom token errors.\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Create Auth URI errors.\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Sign in with email and password errors (some apply to sign up too).\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n    // invalid.\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n\n    // Sign up with email and password errors.\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n\n    // Verify assertion for sign in with credential errors:\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Send Password reset email errors:\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Operations that require ID token in request:\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n\n    // Other errors.\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n\n    // Phone Auth related errors.\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n\n    // Other action code errors when additional settings passed.\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n    // This is OK as this error will be caught by client side validation.\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n\n    // getProjectConfig errors when clientId is passed.\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n\n    // User actions (sign-up or deletion) disabled errors.\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n\n    // Multi factor related errors.\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n\n    // Blocking functions related errors.\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Recaptcha related errors.\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const CookieAuthProxiedEndpoints = [\"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, \"/v1/token\" /* Endpoint.TOKEN */];\n  const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\n  function _addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) {\n      return {\n        ...request,\n        tenantId: auth.tenantId\n      };\n    }\n    return request;\n  }\n  async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n      let body = {};\n      let params = {};\n      if (request) {\n        if (method === \"GET\" /* HttpMethod.GET */) {\n          params = request;\n        } else {\n          body = {\n            body: JSON.stringify(request)\n          };\n        }\n      }\n      const query = (0, _firebaseUtil.querystring)({\n        key: auth.config.apiKey,\n        ...params\n      }).slice(1);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n      if (auth.languageCode) {\n        headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n      }\n      const fetchArgs = {\n        method,\n        headers,\n        ...body\n      };\n      /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n         problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n         'RequestInitializerDict' is not implemented.\"\n         https://github.com/cloudflare/next-on-pages/issues/487 */\n      if (!(0, _firebaseUtil.isCloudflareWorker)()) {\n        fetchArgs.referrerPolicy = 'no-referrer';\n      }\n      if (auth.emulatorConfig && (0, _firebaseUtil.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        fetchArgs.credentials = 'include';\n      }\n      return FetchProvider.fetch()(await _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n    });\n  }\n  async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n    auth._canInitEmulator = false;\n    const errorMap = {\n      ...SERVER_ERROR_MAP,\n      ...customErrorMap\n    };\n    try {\n      const networkTimeout = new NetworkTimeout(auth);\n      const response = await Promise.race([fetchFn(), networkTimeout.promise]);\n      // If we've reached this point, the fetch succeeded and the networkTimeout\n      // didn't throw; clear the network timeout delay so that Node won't hang\n      networkTimeout.clearNetworkTimeout();\n      const json = await response.json();\n      if ('needConfirmation' in json) {\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n      }\n      if (response.ok && !('errorMessage' in json)) {\n        return json;\n      } else {\n        const errorMessage = response.ok ? json.errorMessage : json.error.message;\n        const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n        if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n          throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n        } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n          throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n        } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n          throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n        }\n        const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n        if (serverErrorMessage) {\n          throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n        } else {\n          _fail(auth, authError);\n        }\n      }\n    } catch (e) {\n      if (e instanceof _firebaseUtil.FirebaseError) {\n        throw e;\n      }\n      // Changing this to a different error code will log user out when there is a network error\n      // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n      // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n      _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n        'message': String(e)\n      });\n    }\n  }\n  async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n    if ('mfaPendingCredential' in serverResponse) {\n      _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n        _serverResponse: serverResponse\n      });\n    }\n    return serverResponse;\n  }\n  async function _getFinalTarget(auth, host, path, query) {\n    const base = `${host}${path}?${query}`;\n    const authInternal = auth;\n    const finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;\n    // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n    // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n    // from the response\n    if (CookieAuthProxiedEndpoints.includes(path)) {\n      // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n      // here since auth initialization calls this function.\n      await authInternal._persistenceManagerAvailable;\n      if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n        const cookiePersistence = authInternal._getPersistence();\n        return cookiePersistence._getFinalTarget(finalTarget).toString();\n      }\n    }\n    return finalTarget;\n  }\n  function _parseEnforcementState(enforcementStateStr) {\n    switch (enforcementStateStr) {\n      case 'ENFORCE':\n        return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n      case 'AUDIT':\n        return \"AUDIT\" /* EnforcementState.AUDIT */;\n      case 'OFF':\n        return \"OFF\" /* EnforcementState.OFF */;\n      default:\n        return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n    }\n  }\n  class NetworkTimeout {\n    clearNetworkTimeout() {\n      clearTimeout(this.timer);\n    }\n    constructor(auth) {\n      this.auth = auth;\n      // Node timers and browser timers are fundamentally incompatible, but we\n      // don't care about the value here\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timer = null;\n      this.promise = new Promise((_, reject) => {\n        this.timer = setTimeout(() => {\n          return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, DEFAULT_API_TIMEOUT_MS.get());\n      });\n    }\n  }\n  function _makeTaggedError(auth, code, response) {\n    const errorParams = {\n      appName: auth.name\n    };\n    if (response.email) {\n      errorParams.email = response.email;\n    }\n    if (response.phoneNumber) {\n      errorParams.phoneNumber = response.phoneNumber;\n    }\n    const error = _createError(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function isEnterprise(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n  }\n  class RecaptchaConfig {\n    constructor(response) {\n      /**\n       * The reCAPTCHA site key.\n       */\n      this.siteKey = '';\n      /**\n       * The list of providers and their enablement status for reCAPTCHA Enterprise.\n       */\n      this.recaptchaEnforcementState = [];\n      if (response.recaptchaKey === undefined) {\n        throw new Error('recaptchaKey undefined');\n      }\n      // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n      this.siteKey = response.recaptchaKey.split('/')[3];\n      this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n    }\n    /**\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n     *\n     * @param providerStr - The provider whose enforcement state is to be returned.\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n     */\n    getProviderEnforcementState(providerStr) {\n      if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n        return null;\n      }\n      for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n        if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n          return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n        }\n      }\n      return null;\n    }\n    /**\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n     *\n     * @param providerStr - The provider whose enablement state is to be returned.\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n     */\n    isProviderEnabled(providerStr) {\n      return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n    }\n    /**\n     * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n     * returns false.\n     *\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n     */\n    isAnyProviderEnabled() {\n      return this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) || this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function getRecaptchaConfig(auth, request) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function deleteAccount(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n  }\n  async function deleteLinkedAccounts(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  async function getAccountInfo(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) {\n      return undefined;\n    }\n    try {\n      // Convert to date object.\n      const date = new Date(Number(utcTimestamp));\n      // Test date is valid.\n      if (!isNaN(date.getTime())) {\n        // Convert to UTC date string.\n        return date.toUTCString();\n      }\n    } catch (e) {\n      // Do nothing. undefined will be returned.\n    }\n    return undefined;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function getIdToken(user, forceRefresh = false) {\n    return (0, _firebaseUtil.getModularInstance)(user).getIdToken(forceRefresh);\n  }\n  /**\n   * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  async function getIdTokenResult(user, forceRefresh = false) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const token = await userInternal.getIdToken(forceRefresh);\n    const claims = _parseToken(token);\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n    const signInProvider = firebase?.['sign_in_provider'];\n    return {\n      claims,\n      token,\n      authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n      issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n      expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n      signInProvider: signInProvider || null,\n      signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n    };\n  }\n  function secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n  }\n  function _parseToken(token) {\n    const [algorithm, payload, signature] = token.split('.');\n    if (algorithm === undefined || payload === undefined || signature === undefined) {\n      _logError('JWT malformed, contained fewer than 3 sections');\n      return null;\n    }\n    try {\n      const decoded = (0, _firebaseUtil.base64Decode)(payload);\n      if (!decoded) {\n        _logError('Failed to decode base64 JWT payload');\n        return null;\n      }\n      return JSON.parse(decoded);\n    } catch (e) {\n      _logError('Caught error parsing JWT payload as JSON', e?.toString());\n      return null;\n    }\n  }\n  /**\n   * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n   */\n  function _tokenExpiresIn(token) {\n    const parsedToken = _parseToken(token);\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n    if (bypassAuthState) {\n      return promise;\n    }\n    try {\n      return await promise;\n    } catch (e) {\n      if (e instanceof _firebaseUtil.FirebaseError && isUserInvalidated(e)) {\n        if (user.auth.currentUser === user) {\n          await user.auth.signOut();\n        }\n      }\n      throw e;\n    }\n  }\n  function isUserInvalidated({\n    code\n  }) {\n    return code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class ProactiveRefresh {\n    constructor(user) {\n      this.user = user;\n      this.isRunning = false;\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timerId = null;\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n    }\n    _start() {\n      if (this.isRunning) {\n        return;\n      }\n      this.isRunning = true;\n      this.schedule();\n    }\n    _stop() {\n      if (!this.isRunning) {\n        return;\n      }\n      this.isRunning = false;\n      if (this.timerId !== null) {\n        clearTimeout(this.timerId);\n      }\n    }\n    getInterval(wasError) {\n      if (wasError) {\n        const interval = this.errorBackoff;\n        this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n        return interval;\n      } else {\n        // Reset the error backoff\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n        const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n        const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n        return Math.max(0, interval);\n      }\n    }\n    schedule(wasError = false) {\n      if (!this.isRunning) {\n        // Just in case...\n        return;\n      }\n      const interval = this.getInterval(wasError);\n      this.timerId = setTimeout(async () => {\n        await this.iteration();\n      }, interval);\n    }\n    async iteration() {\n      try {\n        await this.user.getIdToken(true);\n      } catch (e) {\n        // Only retry on network errors\n        if (e?.code === `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          this.schedule(/* wasError */true);\n        }\n        return;\n      }\n      this.schedule();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserMetadata {\n    constructor(createdAt, lastLoginAt) {\n      this.createdAt = createdAt;\n      this.lastLoginAt = lastLoginAt;\n      this._initializeTime();\n    }\n    _initializeTime() {\n      this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n      this.creationTime = utcTimestampToDateString(this.createdAt);\n    }\n    _copy(metadata) {\n      this.createdAt = metadata.createdAt;\n      this.lastLoginAt = metadata.lastLoginAt;\n      this._initializeTime();\n    }\n    toJSON() {\n      return {\n        createdAt: this.createdAt,\n        lastLoginAt: this.lastLoginAt\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reloadWithoutSaving(user) {\n    const auth = user.auth;\n    const idToken = await user.getIdToken();\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {\n      idToken\n    }));\n    _assert(response?.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const coreAccount = response.users[0];\n    user._notifyReloadListener(coreAccount);\n    const newProviderData = coreAccount.providerUserInfo?.length ? extractProviderData(coreAccount.providerUserInfo) : [];\n    const providerData = mergeProviderData(user.providerData, newProviderData);\n    // Preserves the non-nonymous status of the stored user, even if no more\n    // credentials (federated or email/password) are linked to the user. If\n    // the user was previously anonymous, then use provider data to update.\n    // On the other hand, if it was not anonymous before, it should never be\n    // considered anonymous now.\n    const oldIsAnonymous = user.isAnonymous;\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !providerData?.length;\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n    const updates = {\n      uid: coreAccount.localId,\n      displayName: coreAccount.displayName || null,\n      photoURL: coreAccount.photoUrl || null,\n      email: coreAccount.email || null,\n      emailVerified: coreAccount.emailVerified || false,\n      phoneNumber: coreAccount.phoneNumber || null,\n      tenantId: coreAccount.tenantId || null,\n      providerData,\n      metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n      isAnonymous\n    };\n    Object.assign(user, updates);\n  }\n  /**\n   * Reloads user account data, if signed in.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function reload(user) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _reloadWithoutSaving(userInternal);\n    // Even though the current user hasn't changed, update\n    // current user will trigger a persistence update w/ the\n    // new info.\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\n  }\n  function mergeProviderData(original, newData) {\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n    return [...deduped, ...newData];\n  }\n  function extractProviderData(providers) {\n    return providers.map(({\n      providerId,\n      ...provider\n    }) => {\n      return {\n        providerId,\n        uid: provider.rawId || '',\n        displayName: provider.displayName || null,\n        email: provider.email || null,\n        phoneNumber: provider.phoneNumber || null,\n        photoURL: provider.photoUrl || null\n      };\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function requestStsToken(auth, refreshToken) {\n    const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n      const body = (0, _firebaseUtil.querystring)({\n        'grant_type': 'refresh_token',\n        'refresh_token': refreshToken\n      }).slice(1);\n      const {\n        tokenApiHost,\n        apiKey\n      } = auth.config;\n      const url = await _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n      const options = {\n        method: \"POST\" /* HttpMethod.POST */,\n        headers,\n        body\n      };\n      if (auth.emulatorConfig && (0, _firebaseUtil.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        options.credentials = 'include';\n      }\n      return FetchProvider.fetch()(url, options);\n    });\n    // The response comes back in snake_case. Convert to camel:\n    return {\n      accessToken: response.access_token,\n      expiresIn: response.expires_in,\n      refreshToken: response.refresh_token\n    };\n  }\n  async function revokeToken(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * We need to mark this class as internal explicitly to exclude it in the public typings, because\n   * it references AuthInternal which has a circular dependency with UserInternal.\n   *\n   * @internal\n   */\n  class StsTokenManager {\n    constructor() {\n      this.refreshToken = null;\n      this.accessToken = null;\n      this.expirationTime = null;\n    }\n    get isExpired() {\n      return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n    }\n    updateFromServerResponse(response) {\n      _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n      this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n    }\n    updateFromIdToken(idToken) {\n      _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = _tokenExpiresIn(idToken);\n      this.updateTokensAndExpiration(idToken, null, expiresIn);\n    }\n    async getToken(auth, forceRefresh = false) {\n      if (!forceRefresh && this.accessToken && !this.isExpired) {\n        return this.accessToken;\n      }\n      _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n      if (this.refreshToken) {\n        await this.refresh(auth, this.refreshToken);\n        return this.accessToken;\n      }\n      return null;\n    }\n    clearRefreshToken() {\n      this.refreshToken = null;\n    }\n    async refresh(auth, oldToken) {\n      const {\n        accessToken,\n        refreshToken,\n        expiresIn\n      } = await requestStsToken(auth, oldToken);\n      this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n    }\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n      this.refreshToken = refreshToken || null;\n      this.accessToken = accessToken || null;\n      this.expirationTime = Date.now() + expiresInSec * 1000;\n    }\n    static fromJSON(appName, object) {\n      const {\n        refreshToken,\n        accessToken,\n        expirationTime\n      } = object;\n      const manager = new StsTokenManager();\n      if (refreshToken) {\n        _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.refreshToken = refreshToken;\n      }\n      if (accessToken) {\n        _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.accessToken = accessToken;\n      }\n      if (expirationTime) {\n        _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.expirationTime = expirationTime;\n      }\n      return manager;\n    }\n    toJSON() {\n      return {\n        refreshToken: this.refreshToken,\n        accessToken: this.accessToken,\n        expirationTime: this.expirationTime\n      };\n    }\n    _assign(stsTokenManager) {\n      this.accessToken = stsTokenManager.accessToken;\n      this.refreshToken = stsTokenManager.refreshToken;\n      this.expirationTime = stsTokenManager.expirationTime;\n    }\n    _clone() {\n      return Object.assign(new StsTokenManager(), this.toJSON());\n    }\n    _performRefresh() {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function assertStringOrUndefined(assertion, appName) {\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n      appName\n    });\n  }\n  class UserImpl {\n    constructor({\n      uid,\n      auth,\n      stsTokenManager,\n      ...opt\n    }) {\n      // For the user object, provider is always Firebase.\n      this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n      this.proactiveRefresh = new ProactiveRefresh(this);\n      this.reloadUserInfo = null;\n      this.reloadListener = null;\n      this.uid = uid;\n      this.auth = auth;\n      this.stsTokenManager = stsTokenManager;\n      this.accessToken = stsTokenManager.accessToken;\n      this.displayName = opt.displayName || null;\n      this.email = opt.email || null;\n      this.emailVerified = opt.emailVerified || false;\n      this.phoneNumber = opt.phoneNumber || null;\n      this.photoURL = opt.photoURL || null;\n      this.isAnonymous = opt.isAnonymous || false;\n      this.tenantId = opt.tenantId || null;\n      this.providerData = opt.providerData ? [...opt.providerData] : [];\n      this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    async getIdToken(forceRefresh) {\n      const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n      _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      if (this.accessToken !== accessToken) {\n        this.accessToken = accessToken;\n        await this.auth._persistUserIfCurrent(this);\n        this.auth._notifyListenersIfCurrent(this);\n      }\n      return accessToken;\n    }\n    getIdTokenResult(forceRefresh) {\n      return getIdTokenResult(this, forceRefresh);\n    }\n    reload() {\n      return reload(this);\n    }\n    _assign(user) {\n      if (this === user) {\n        return;\n      }\n      _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.displayName = user.displayName;\n      this.photoURL = user.photoURL;\n      this.email = user.email;\n      this.emailVerified = user.emailVerified;\n      this.phoneNumber = user.phoneNumber;\n      this.isAnonymous = user.isAnonymous;\n      this.tenantId = user.tenantId;\n      this.providerData = user.providerData.map(userInfo => ({\n        ...userInfo\n      }));\n      this.metadata._copy(user.metadata);\n      this.stsTokenManager._assign(user.stsTokenManager);\n    }\n    _clone(auth) {\n      const newUser = new UserImpl({\n        ...this,\n        auth,\n        stsTokenManager: this.stsTokenManager._clone()\n      });\n      newUser.metadata._copy(this.metadata);\n      return newUser;\n    }\n    _onReload(callback) {\n      // There should only ever be one listener, and that is a single instance of MultiFactorUser\n      _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.reloadListener = callback;\n      if (this.reloadUserInfo) {\n        this._notifyReloadListener(this.reloadUserInfo);\n        this.reloadUserInfo = null;\n      }\n    }\n    _notifyReloadListener(userInfo) {\n      if (this.reloadListener) {\n        this.reloadListener(userInfo);\n      } else {\n        // If no listener is subscribed yet, save the result so it's available when they do subscribe\n        this.reloadUserInfo = userInfo;\n      }\n    }\n    _startProactiveRefresh() {\n      this.proactiveRefresh._start();\n    }\n    _stopProactiveRefresh() {\n      this.proactiveRefresh._stop();\n    }\n    async _updateTokensIfNecessary(response, reload = false) {\n      let tokensRefreshed = false;\n      if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n        this.stsTokenManager.updateFromServerResponse(response);\n        tokensRefreshed = true;\n      }\n      if (reload) {\n        await _reloadWithoutSaving(this);\n      }\n      await this.auth._persistUserIfCurrent(this);\n      if (tokensRefreshed) {\n        this.auth._notifyListenersIfCurrent(this);\n      }\n    }\n    async delete() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n      }\n      const idToken = await this.getIdToken();\n      await _logoutIfInvalidated(this, deleteAccount(this.auth, {\n        idToken\n      }));\n      this.stsTokenManager.clearRefreshToken();\n      // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n      //       cancels pending actions...\n      return this.auth.signOut();\n    }\n    toJSON() {\n      return {\n        uid: this.uid,\n        email: this.email || undefined,\n        emailVerified: this.emailVerified,\n        displayName: this.displayName || undefined,\n        isAnonymous: this.isAnonymous,\n        photoURL: this.photoURL || undefined,\n        phoneNumber: this.phoneNumber || undefined,\n        tenantId: this.tenantId || undefined,\n        providerData: this.providerData.map(userInfo => ({\n          ...userInfo\n        })),\n        stsTokenManager: this.stsTokenManager.toJSON(),\n        // Redirect event ID must be maintained in case there is a pending\n        // redirect event.\n        _redirectEventId: this._redirectEventId,\n        ...this.metadata.toJSON(),\n        // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n        apiKey: this.auth.config.apiKey,\n        appName: this.auth.name\n        // Missing authDomain will be tolerated by the legacy SDK.\n        // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n      };\n    }\n    get refreshToken() {\n      return this.stsTokenManager.refreshToken || '';\n    }\n    static _fromJSON(auth, object) {\n      const displayName = object.displayName ?? undefined;\n      const email = object.email ?? undefined;\n      const phoneNumber = object.phoneNumber ?? undefined;\n      const photoURL = object.photoURL ?? undefined;\n      const tenantId = object.tenantId ?? undefined;\n      const _redirectEventId = object._redirectEventId ?? undefined;\n      const createdAt = object.createdAt ?? undefined;\n      const lastLoginAt = object.lastLoginAt ?? undefined;\n      const {\n        uid,\n        emailVerified,\n        isAnonymous,\n        providerData,\n        stsTokenManager: plainObjectTokenManager\n      } = object;\n      _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n      _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(displayName, auth.name);\n      assertStringOrUndefined(email, auth.name);\n      _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(phoneNumber, auth.name);\n      assertStringOrUndefined(photoURL, auth.name);\n      assertStringOrUndefined(tenantId, auth.name);\n      assertStringOrUndefined(_redirectEventId, auth.name);\n      assertStringOrUndefined(createdAt, auth.name);\n      assertStringOrUndefined(lastLoginAt, auth.name);\n      const user = new UserImpl({\n        uid,\n        auth,\n        email,\n        emailVerified,\n        displayName,\n        isAnonymous,\n        photoURL,\n        phoneNumber,\n        tenantId,\n        stsTokenManager,\n        createdAt,\n        lastLoginAt\n      });\n      if (providerData && Array.isArray(providerData)) {\n        user.providerData = providerData.map(userInfo => ({\n          ...userInfo\n        }));\n      }\n      if (_redirectEventId) {\n        user._redirectEventId = _redirectEventId;\n      }\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromServerResponse(idTokenResponse);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: idTokenResponse.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // Updates the user info and data and resolves with a user instance.\n      await _reloadWithoutSaving(user);\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromGetAccountInfoResponse(auth, response, idToken) {\n      const coreAccount = response.users[0];\n      _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n      const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromIdToken(idToken);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: coreAccount.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // update the user with data from the GetAccountInfo response.\n      const updates = {\n        uid: coreAccount.localId,\n        displayName: coreAccount.displayName || null,\n        photoURL: coreAccount.photoUrl || null,\n        email: coreAccount.email || null,\n        emailVerified: coreAccount.emailVerified || false,\n        phoneNumber: coreAccount.phoneNumber || null,\n        tenantId: coreAccount.tenantId || null,\n        providerData,\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n        isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length\n      };\n      Object.assign(user, updates);\n      return user;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const instanceCache = new Map();\n  function _getInstance(cls) {\n    debugAssert(cls instanceof Function, 'Expected a class definition');\n    let instance = instanceCache.get(cls);\n    if (instance) {\n      debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n      return instance;\n    }\n    instance = new cls();\n    instanceCache.set(cls, instance);\n    return instance;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class InMemoryPersistence {\n    constructor() {\n      this.type = \"NONE\" /* PersistenceType.NONE */;\n      this.storage = {};\n    }\n    async _isAvailable() {\n      return true;\n    }\n    async _set(key, value) {\n      this.storage[key] = value;\n    }\n    async _get(key) {\n      const value = this.storage[key];\n      return value === undefined ? null : value;\n    }\n    async _remove(key) {\n      delete this.storage[key];\n    }\n    _addListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n    _removeListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n  }\n  InMemoryPersistence.type = 'NONE';\n  /**\n   * An implementation of {@link Persistence} of type 'NONE'.\n   *\n   * @public\n   */\n  const inMemoryPersistence = InMemoryPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _persistenceKeyName(key, apiKey, appName) {\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n  }\n  class PersistenceUserManager {\n    constructor(persistence, auth, userKey) {\n      this.persistence = persistence;\n      this.auth = auth;\n      this.userKey = userKey;\n      const {\n        config,\n        name\n      } = this.auth;\n      this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n      this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n      this.boundEventHandler = auth._onStorageEvent.bind(auth);\n      this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    setCurrentUser(user) {\n      return this.persistence._set(this.fullUserKey, user.toJSON());\n    }\n    async getCurrentUser() {\n      const blob = await this.persistence._get(this.fullUserKey);\n      if (!blob) {\n        return null;\n      }\n      if (typeof blob === 'string') {\n        const response = await getAccountInfo(this.auth, {\n          idToken: blob\n        }).catch(() => undefined);\n        if (!response) {\n          return null;\n        }\n        return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n      }\n      return UserImpl._fromJSON(this.auth, blob);\n    }\n    removeCurrentUser() {\n      return this.persistence._remove(this.fullUserKey);\n    }\n    savePersistenceForRedirect() {\n      return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n    }\n    async setPersistence(newPersistence) {\n      if (this.persistence === newPersistence) {\n        return;\n      }\n      const currentUser = await this.getCurrentUser();\n      await this.removeCurrentUser();\n      this.persistence = newPersistence;\n      if (currentUser) {\n        return this.setCurrentUser(currentUser);\n      }\n    }\n    delete() {\n      this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n    }\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\n      if (!persistenceHierarchy.length) {\n        return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n      }\n      // Eliminate any persistences that are not available\n      const availablePersistences = (await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (await persistence._isAvailable()) {\n          return persistence;\n        }\n        return undefined;\n      }))).filter(persistence => persistence);\n      // Fall back to the first persistence listed, or in memory if none available\n      let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n      const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n      // Pull out the existing user, setting the chosen persistence to that\n      // persistence if the user exists.\n      let userToMigrate = null;\n      // Note, here we check for a user in _all_ persistences, not just the\n      // ones deemed available. If we can migrate a user out of a broken\n      // persistence, we will (but only if that persistence supports migration).\n      for (const persistence of persistenceHierarchy) {\n        try {\n          const blob = await persistence._get(key);\n          if (blob) {\n            let user;\n            if (typeof blob === 'string') {\n              const response = await getAccountInfo(auth, {\n                idToken: blob\n              }).catch(() => undefined);\n              if (!response) {\n                break;\n              }\n              user = await UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n            } else {\n              user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n            }\n            if (persistence !== selectedPersistence) {\n              userToMigrate = user;\n            }\n            selectedPersistence = persistence;\n            break;\n          }\n        } catch {}\n      }\n      // If we find the user in a persistence that does support migration, use\n      // that migration path (of only persistences that support migration)\n      const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n      // If the persistence does _not_ allow migration, just finish off here\n      if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\n      }\n      selectedPersistence = migrationHierarchy[0];\n      if (userToMigrate) {\n        // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n        // we'll just let it bubble to surface the error.\n        await selectedPersistence._set(key, userToMigrate.toJSON());\n      }\n      // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n      // such as users getting stuck with a previous account after signing out and refreshing the tab.\n      await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      }));\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine the browser for the purposes of reporting usage to the API\n   */\n  function _getBrowserName(userAgent) {\n    const ua = userAgent.toLowerCase();\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n      return \"Opera\" /* BrowserName.OPERA */;\n    } else if (_isIEMobile(ua)) {\n      // Windows phone IEMobile browser.\n      return \"IEMobile\" /* BrowserName.IEMOBILE */;\n    } else if (ua.includes('msie') || ua.includes('trident/')) {\n      return \"IE\" /* BrowserName.IE */;\n    } else if (ua.includes('edge/')) {\n      return \"Edge\" /* BrowserName.EDGE */;\n    } else if (_isFirefox(ua)) {\n      return \"Firefox\" /* BrowserName.FIREFOX */;\n    } else if (ua.includes('silk/')) {\n      return \"Silk\" /* BrowserName.SILK */;\n    } else if (_isBlackBerry(ua)) {\n      // Blackberry browser.\n      return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n    } else if (_isWebOS(ua)) {\n      // WebOS default browser.\n      return \"Webos\" /* BrowserName.WEBOS */;\n    } else if (_isSafari(ua)) {\n      return \"Safari\" /* BrowserName.SAFARI */;\n    } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n      return \"Chrome\" /* BrowserName.CHROME */;\n    } else if (_isAndroid(ua)) {\n      // Android stock browser.\n      return \"Android\" /* BrowserName.ANDROID */;\n    } else {\n      // Most modern browsers have name/version at end of user agent string.\n      const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n      const matches = userAgent.match(re);\n      if (matches?.length === 2) {\n        return matches[1];\n      }\n    }\n    return \"Other\" /* BrowserName.OTHER */;\n  }\n  function _isFirefox(ua = (0, _firebaseUtil.getUA)()) {\n    return /firefox\\//i.test(ua);\n  }\n  function _isSafari(userAgent = (0, _firebaseUtil.getUA)()) {\n    const ua = userAgent.toLowerCase();\n    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n  }\n  function _isChromeIOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /crios\\//i.test(ua);\n  }\n  function _isIEMobile(ua = (0, _firebaseUtil.getUA)()) {\n    return /iemobile/i.test(ua);\n  }\n  function _isAndroid(ua = (0, _firebaseUtil.getUA)()) {\n    return /android/i.test(ua);\n  }\n  function _isBlackBerry(ua = (0, _firebaseUtil.getUA)()) {\n    return /blackberry/i.test(ua);\n  }\n  function _isWebOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /webos/i.test(ua);\n  }\n  function _isIOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n  }\n  function _isIOS7Or8(ua = (0, _firebaseUtil.getUA)()) {\n    return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n  }\n  function _isIE10() {\n    return (0, _firebaseUtil.isIE)() && document.documentMode === 10;\n  }\n  function _isMobileBrowser(ua = (0, _firebaseUtil.getUA)()) {\n    // TODO: implement getBrowserName equivalent for OS.\n    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /*\n   * Determine the SDK version string\n   */\n  function _getClientVersion(clientPlatform, frameworks = []) {\n    let reportedPlatform;\n    switch (clientPlatform) {\n      case \"Browser\" /* ClientPlatform.BROWSER */:\n        // In a browser environment, report the browser name.\n        reportedPlatform = _getBrowserName((0, _firebaseUtil.getUA)());\n        break;\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        // Technically a worker runs from a browser but we need to differentiate a\n        // worker from a browser.\n        // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n        reportedPlatform = `${_getBrowserName((0, _firebaseUtil.getUA)())}-${clientPlatform}`;\n        break;\n      default:\n        reportedPlatform = clientPlatform;\n    }\n    const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${_firebaseApp.SDK_VERSION}/${reportedFrameworks}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthMiddlewareQueue {\n    constructor(auth) {\n      this.auth = auth;\n      this.queue = [];\n    }\n    pushCallback(callback, onAbort) {\n      // The callback could be sync or async. Wrap it into a\n      // function that is always async.\n      const wrappedCallback = user => new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n      // Attach the onAbort if present\n      wrappedCallback.onAbort = onAbort;\n      this.queue.push(wrappedCallback);\n      const index = this.queue.length - 1;\n      return () => {\n        // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n        // indexing of other elements.\n        this.queue[index] = () => Promise.resolve();\n      };\n    }\n    async runMiddleware(nextUser) {\n      if (this.auth.currentUser === nextUser) {\n        return;\n      }\n      // While running the middleware, build a temporary stack of onAbort\n      // callbacks to call if one middleware callback rejects.\n      const onAbortStack = [];\n      try {\n        for (const beforeStateCallback of this.queue) {\n          await beforeStateCallback(nextUser);\n          // Only push the onAbort if the callback succeeds\n          if (beforeStateCallback.onAbort) {\n            onAbortStack.push(beforeStateCallback.onAbort);\n          }\n        }\n      } catch (e) {\n        // Run all onAbort, with separate try/catch to ignore any errors and\n        // continue\n        onAbortStack.reverse();\n        for (const onAbort of onAbortStack) {\n          try {\n            onAbort();\n          } catch (_) {\n            /* swallow error */\n          }\n        }\n        throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n          originalMessage: e?.message\n        });\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n   *\n   * @param auth Auth object.\n   * @param request Password policy request.\n   * @returns Password policy response.\n   */\n  async function _getPasswordPolicy(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Minimum min password length enforced by the backend, even if no minimum length is set.\n  const MINIMUM_MIN_PASSWORD_LENGTH = 6;\n  /**\n   * Stores password policy requirements and provides password validation against the policy.\n   *\n   * @internal\n   */\n  class PasswordPolicyImpl {\n    constructor(response) {\n      // Only include custom strength options defined in the response.\n      const responseOptions = response.customStrengthOptions;\n      this.customStrengthOptions = {};\n      // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n      this.customStrengthOptions.minPasswordLength = responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n      if (responseOptions.maxPasswordLength) {\n        this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n      }\n      if (responseOptions.containsLowercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n      }\n      if (responseOptions.containsUppercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n      }\n      if (responseOptions.containsNumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n      }\n      if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n      }\n      this.enforcementState = response.enforcementState;\n      if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n        this.enforcementState = 'OFF';\n      }\n      // Use an empty string if no non-alphanumeric characters are specified in the response.\n      this.allowedNonAlphanumericCharacters = response.allowedNonAlphanumericCharacters?.join('') ?? '';\n      this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n      this.schemaVersion = response.schemaVersion;\n    }\n    validatePassword(password) {\n      const status = {\n        isValid: true,\n        passwordPolicy: this\n      };\n      // Check the password length and character options.\n      this.validatePasswordLengthOptions(password, status);\n      this.validatePasswordCharacterOptions(password, status);\n      // Combine the status into single isValid property.\n      status.isValid && (status.isValid = status.meetsMinPasswordLength ?? true);\n      status.isValid && (status.isValid = status.meetsMaxPasswordLength ?? true);\n      status.isValid && (status.isValid = status.containsLowercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsUppercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsNumericCharacter ?? true);\n      status.isValid && (status.isValid = status.containsNonAlphanumericCharacter ?? true);\n      return status;\n    }\n    /**\n     * Validates that the password meets the length options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordLengthOptions(password, status) {\n      const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n      const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n      if (minPasswordLength) {\n        status.meetsMinPasswordLength = password.length >= minPasswordLength;\n      }\n      if (maxPasswordLength) {\n        status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n      }\n    }\n    /**\n     * Validates that the password meets the character options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordCharacterOptions(password, status) {\n      // Assign statuses for requirements even if the password is an empty string.\n      this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n      let passwordChar;\n      for (let i = 0; i < password.length; i++) {\n        passwordChar = password.charAt(i);\n        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n      }\n    }\n    /**\n     * Updates the running validation status with the statuses for the character options.\n     * Expected to be called each time a character is processed to update each option status\n     * based on the current character.\n     *\n     * @param status Validation status.\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n     * @param containsNumericCharacter Whether the character is a numeric character.\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n     */\n    updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n      if (this.customStrengthOptions.containsLowercaseLetter) {\n        status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsUppercaseLetter) {\n        status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsNumericCharacter) {\n        status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n      }\n      if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n        status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthImpl {\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n      this.app = app;\n      this.heartbeatServiceProvider = heartbeatServiceProvider;\n      this.appCheckServiceProvider = appCheckServiceProvider;\n      this.config = config;\n      this.currentUser = null;\n      this.emulatorConfig = null;\n      this.operations = Promise.resolve();\n      this.authStateSubscription = new Subscription(this);\n      this.idTokenSubscription = new Subscription(this);\n      this.beforeStateQueue = new AuthMiddlewareQueue(this);\n      this.redirectUser = null;\n      this.isProactiveRefreshEnabled = false;\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n      // Any network calls will set this to true and prevent subsequent emulator\n      // initialization\n      this._canInitEmulator = true;\n      this._isInitialized = false;\n      this._deleted = false;\n      this._initializationPromise = null;\n      this._popupRedirectResolver = null;\n      this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n      this._agentRecaptchaConfig = null;\n      this._tenantRecaptchaConfigs = {};\n      this._projectPasswordPolicy = null;\n      this._tenantPasswordPolicies = {};\n      this._resolvePersistenceManagerAvailable = undefined;\n      // Tracks the last notified UID for state change listeners to prevent\n      // repeated calls to the callbacks. Undefined means it's never been\n      // called, whereas null means it's been called with a signed out user\n      this.lastNotifiedUid = undefined;\n      this.languageCode = null;\n      this.tenantId = null;\n      this.settings = {\n        appVerificationDisabledForTesting: false\n      };\n      this.frameworks = [];\n      this.name = app.name;\n      this.clientVersion = config.sdkClientVersion;\n      // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n      // persistenceMananger to be available. see _getFinalTarget for more context\n      this._persistenceManagerAvailable = new Promise(resolve => this._resolvePersistenceManagerAvailable = resolve);\n    }\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n      if (popupRedirectResolver) {\n        this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n      }\n      // Have to check for app deletion throughout initialization (after each\n      // promise resolution)\n      this._initializationPromise = this.queue(async () => {\n        if (this._deleted) {\n          return;\n        }\n        this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n        this._resolvePersistenceManagerAvailable?.();\n        if (this._deleted) {\n          return;\n        }\n        // Initialize the resolver early if necessary (only applicable to web:\n        // this will cause the iframe to load immediately in certain cases)\n        if (this._popupRedirectResolver?._shouldInitProactively) {\n          // If this fails, don't halt auth loading\n          try {\n            await this._popupRedirectResolver._initialize(this);\n          } catch (e) {\n            /* Ignore the error */\n          }\n        }\n        await this.initializeCurrentUser(popupRedirectResolver);\n        this.lastNotifiedUid = this.currentUser?.uid || null;\n        if (this._deleted) {\n          return;\n        }\n        this._isInitialized = true;\n      });\n      return this._initializationPromise;\n    }\n    /**\n     * If the persistence is changed in another window, the user manager will let us know\n     */\n    async _onStorageEvent() {\n      if (this._deleted) {\n        return;\n      }\n      const user = await this.assertedPersistence.getCurrentUser();\n      if (!this.currentUser && !user) {\n        // No change, do nothing (was signed out and remained signed out).\n        return;\n      }\n      // If the same user is to be synchronized.\n      if (this.currentUser && user && this.currentUser.uid === user.uid) {\n        // Data update, simply copy data changes.\n        this._currentUser._assign(user);\n        // If tokens changed from previous user tokens, this will trigger\n        // notifyAuthListeners_.\n        await this.currentUser.getIdToken();\n        return;\n      }\n      // Update current Auth state. Either a new login or logout.\n      // Skip blocking callbacks, they should not apply to a change in another tab.\n      await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n    }\n    async initializeCurrentUserFromIdToken(idToken) {\n      try {\n        const response = await getAccountInfo(this, {\n          idToken\n        });\n        const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n        await this.directlySetCurrentUser(user);\n      } catch (err) {\n        console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n        await this.directlySetCurrentUser(null);\n      }\n    }\n    async initializeCurrentUser(popupRedirectResolver) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        const idToken = this.app.settings.authIdToken;\n        if (idToken) {\n          // Start the auth operation in the next tick to allow a moment for the customer's app to\n          // attach an emulator, if desired.\n          return new Promise(resolve => {\n            setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n          });\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      // First check to see if we have a pending redirect event.\n      const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();\n      let futureCurrentUser = previouslyStoredUser;\n      let needsTocheckMiddleware = false;\n      if (popupRedirectResolver && this.config.authDomain) {\n        await this.getOrInitRedirectPersistenceManager();\n        const redirectUserEventId = this.redirectUser?._redirectEventId;\n        const storedUserEventId = futureCurrentUser?._redirectEventId;\n        const result = await this.tryRedirectSignIn(popupRedirectResolver);\n        // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n        // matches the redirect user, then we want to initially sign in with the\n        // new user object from result.\n        // TODO(samgho): More thoroughly test all of this\n        if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && result?.user) {\n          futureCurrentUser = result.user;\n          needsTocheckMiddleware = true;\n        }\n      }\n      // If no user in persistence, there is no current user. Set to null.\n      if (!futureCurrentUser) {\n        return this.directlySetCurrentUser(null);\n      }\n      if (!futureCurrentUser._redirectEventId) {\n        // This isn't a redirect link operation, we can reload and bail.\n        // First though, ensure that we check the middleware is happy.\n        if (needsTocheckMiddleware) {\n          try {\n            await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n          } catch (e) {\n            futureCurrentUser = previouslyStoredUser;\n            // We know this is available since the bit is only set when the\n            // resolver is available\n            this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n          }\n        }\n        if (futureCurrentUser) {\n          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      await this.getOrInitRedirectPersistenceManager();\n      // If the redirect user's event ID matches the current user's event ID,\n      // DO NOT reload the current user, otherwise they'll be cleared from storage.\n      // This is important for the reauthenticateWithRedirect() flow.\n      if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n        return this.directlySetCurrentUser(futureCurrentUser);\n      }\n      return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n    }\n    async tryRedirectSignIn(redirectResolver) {\n      // The redirect user needs to be checked (and signed in if available)\n      // during auth initialization. All of the normal sign in and link/reauth\n      // flows call back into auth and push things onto the promise queue. We\n      // need to await the result of the redirect sign in *inside the promise\n      // queue*. This presents a problem: we run into deadlock. See:\n      //    ┌> [Initialization] ─────┐\n      //    ┌> [<other queue tasks>] │\n      //    └─ [getRedirectResult] <─┘\n      //    where [] are tasks on the queue and arrows denote awaits\n      // Initialization will never complete because it's waiting on something\n      // that's waiting for initialization to complete!\n      //\n      // Instead, this method calls getRedirectResult() (stored in\n      // _completeRedirectFn) with an optional parameter that instructs all of\n      // the underlying auth operations to skip anything that mutates auth state.\n      let result = null;\n      try {\n        // We know this._popupRedirectResolver is set since redirectResolver\n        // is passed in. The _completeRedirectFn expects the unwrapped extern.\n        result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n      } catch (e) {\n        // Swallow any errors here; the code can retrieve them in\n        // getRedirectResult().\n        await this._setRedirectUser(null);\n      }\n      return result;\n    }\n    async reloadAndSetCurrentUserOrClear(user) {\n      try {\n        await _reloadWithoutSaving(user);\n      } catch (e) {\n        if (e?.code !== `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          // Something's wrong with the user's token. Log them out and remove\n          // them from storage\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      return this.directlySetCurrentUser(user);\n    }\n    useDeviceLanguage() {\n      this.languageCode = _getUserLanguage();\n    }\n    async _delete() {\n      this._deleted = true;\n    }\n    async updateCurrentUser(userExtern) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // The public updateCurrentUser method needs to make a copy of the user,\n      // and also check that the project matches\n      const user = userExtern ? (0, _firebaseUtil.getModularInstance)(userExtern) : null;\n      if (user) {\n        _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n      }\n      return this._updateCurrentUser(user && user._clone(this));\n    }\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n      if (this._deleted) {\n        return;\n      }\n      if (user) {\n        _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n      }\n      if (!skipBeforeStateCallbacks) {\n        await this.beforeStateQueue.runMiddleware(user);\n      }\n      return this.queue(async () => {\n        await this.directlySetCurrentUser(user);\n        this.notifyAuthListeners();\n      });\n    }\n    async signOut() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // Run first, to block _setRedirectUser() if any callbacks fail.\n      await this.beforeStateQueue.runMiddleware(null);\n      // Clear the redirect user when signOut is called\n      if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n        await this._setRedirectUser(null);\n      }\n      // Prevent callbacks from being called again in _updateCurrentUser, as\n      // they were already called in the first line.\n      return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);\n    }\n    setPersistence(persistence) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      return this.queue(async () => {\n        await this.assertedPersistence.setPersistence(_getInstance(persistence));\n      });\n    }\n    _getRecaptchaConfig() {\n      if (this.tenantId == null) {\n        return this._agentRecaptchaConfig;\n      } else {\n        return this._tenantRecaptchaConfigs[this.tenantId];\n      }\n    }\n    async validatePassword(password) {\n      if (!this._getPasswordPolicyInternal()) {\n        await this._updatePasswordPolicy();\n      }\n      // Password policy will be defined after fetching.\n      const passwordPolicy = this._getPasswordPolicyInternal();\n      // Check that the policy schema version is supported by the SDK.\n      // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n      if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n        return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n      }\n      return passwordPolicy.validatePassword(password);\n    }\n    _getPasswordPolicyInternal() {\n      if (this.tenantId === null) {\n        return this._projectPasswordPolicy;\n      } else {\n        return this._tenantPasswordPolicies[this.tenantId];\n      }\n    }\n    async _updatePasswordPolicy() {\n      const response = await _getPasswordPolicy(this);\n      const passwordPolicy = new PasswordPolicyImpl(response);\n      if (this.tenantId === null) {\n        this._projectPasswordPolicy = passwordPolicy;\n      } else {\n        this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n      }\n    }\n    _getPersistenceType() {\n      return this.assertedPersistence.persistence.type;\n    }\n    _getPersistence() {\n      return this.assertedPersistence.persistence;\n    }\n    _updateErrorMap(errorMap) {\n      this._errorFactory = new _firebaseUtil.ErrorFactory('auth', 'Firebase', errorMap());\n    }\n    onAuthStateChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n    }\n    beforeAuthStateChanged(callback, onAbort) {\n      return this.beforeStateQueue.pushCallback(callback, onAbort);\n    }\n    onIdTokenChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n    }\n    authStateReady() {\n      return new Promise((resolve, reject) => {\n        if (this.currentUser) {\n          resolve();\n        } else {\n          const unsubscribe = this.onAuthStateChanged(() => {\n            unsubscribe();\n            resolve();\n          }, reject);\n        }\n      });\n    }\n    /**\n     * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n     */\n    async revokeAccessToken(token) {\n      if (this.currentUser) {\n        const idToken = await this.currentUser.getIdToken();\n        // Generalize this to accept other providers once supported.\n        const request = {\n          providerId: 'apple.com',\n          tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n          token,\n          idToken\n        };\n        if (this.tenantId != null) {\n          request.tenantId = this.tenantId;\n        }\n        await revokeToken(this, request);\n      }\n    }\n    toJSON() {\n      return {\n        apiKey: this.config.apiKey,\n        authDomain: this.config.authDomain,\n        appName: this.name,\n        currentUser: this._currentUser?.toJSON()\n      };\n    }\n    async _setRedirectUser(user, popupRedirectResolver) {\n      const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n      return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n    }\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n      if (!this.redirectPersistenceManager) {\n        const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n        _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n        this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();\n      }\n      return this.redirectPersistenceManager;\n    }\n    async _redirectUserForId(id) {\n      // Make sure we've cleared any pending persistence actions if we're not in\n      // the initializer\n      if (this._isInitialized) {\n        await this.queue(async () => {});\n      }\n      if (this._currentUser?._redirectEventId === id) {\n        return this._currentUser;\n      }\n      if (this.redirectUser?._redirectEventId === id) {\n        return this.redirectUser;\n      }\n      return null;\n    }\n    async _persistUserIfCurrent(user) {\n      if (user === this.currentUser) {\n        return this.queue(async () => this.directlySetCurrentUser(user));\n      }\n    }\n    /** Notifies listeners only if the user is current */\n    _notifyListenersIfCurrent(user) {\n      if (user === this.currentUser) {\n        this.notifyAuthListeners();\n      }\n    }\n    _key() {\n      return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n    }\n    _startProactiveRefresh() {\n      this.isProactiveRefreshEnabled = true;\n      if (this.currentUser) {\n        this._currentUser._startProactiveRefresh();\n      }\n    }\n    _stopProactiveRefresh() {\n      this.isProactiveRefreshEnabled = false;\n      if (this.currentUser) {\n        this._currentUser._stopProactiveRefresh();\n      }\n    }\n    /** Returns the current user cast as the internal type */\n    get _currentUser() {\n      return this.currentUser;\n    }\n    notifyAuthListeners() {\n      if (!this._isInitialized) {\n        return;\n      }\n      this.idTokenSubscription.next(this.currentUser);\n      const currentUid = this.currentUser?.uid ?? null;\n      if (this.lastNotifiedUid !== currentUid) {\n        this.lastNotifiedUid = currentUid;\n        this.authStateSubscription.next(this.currentUser);\n      }\n    }\n    registerStateListener(subscription, nextOrObserver, error, completed) {\n      if (this._deleted) {\n        return () => {};\n      }\n      const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n      let isUnsubscribed = false;\n      const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n      _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // The callback needs to be called asynchronously per the spec.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      promise.then(() => {\n        if (isUnsubscribed) {\n          return;\n        }\n        cb(this.currentUser);\n      });\n      if (typeof nextOrObserver === 'function') {\n        const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      } else {\n        const unsubscribe = subscription.addObserver(nextOrObserver);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      }\n    }\n    /**\n     * Unprotected (from race conditions) method to set the current user. This\n     * should only be called from within a queued callback. This is necessary\n     * because the queue shouldn't rely on another queued callback.\n     */\n    async directlySetCurrentUser(user) {\n      if (this.currentUser && this.currentUser !== user) {\n        this._currentUser._stopProactiveRefresh();\n      }\n      if (user && this.isProactiveRefreshEnabled) {\n        user._startProactiveRefresh();\n      }\n      this.currentUser = user;\n      if (user) {\n        await this.assertedPersistence.setCurrentUser(user);\n      } else {\n        await this.assertedPersistence.removeCurrentUser();\n      }\n    }\n    queue(action) {\n      // In case something errors, the callback still should be called in order\n      // to keep the promise chain alive\n      this.operations = this.operations.then(action, action);\n      return this.operations;\n    }\n    get assertedPersistence() {\n      _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.persistenceManager;\n    }\n    _logFramework(framework) {\n      if (!framework || this.frameworks.includes(framework)) {\n        return;\n      }\n      this.frameworks.push(framework);\n      // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n      // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n      this.frameworks.sort();\n      this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n    }\n    _getFrameworks() {\n      return this.frameworks;\n    }\n    async _getAdditionalHeaders() {\n      // Additional headers on every request\n      const headers = {\n        [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n      };\n      if (this.app.options.appId) {\n        headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n      }\n      // If the heartbeat service exists, add the heartbeat string\n      const heartbeatsHeader = await this.heartbeatServiceProvider.getImmediate({\n        optional: true\n      })?.getHeartbeatsHeader();\n      if (heartbeatsHeader) {\n        headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n      }\n      // If the App Check service exists, add the App Check token in the headers\n      const appCheckToken = await this._getAppCheckToken();\n      if (appCheckToken) {\n        headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n      }\n      return headers;\n    }\n    async _getAppCheckToken() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app) && this.app.settings.appCheckToken) {\n        return this.app.settings.appCheckToken;\n      }\n      const appCheckTokenResult = await this.appCheckServiceProvider.getImmediate({\n        optional: true\n      })?.getToken();\n      if (appCheckTokenResult?.error) {\n        // Context: appCheck.getToken() will never throw even if an error happened.\n        // In the error case, a dummy token will be returned along with an error field describing\n        // the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n        _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n      }\n      return appCheckTokenResult?.token;\n    }\n  }\n  /**\n   * Method to be used to cast down to our private implementation of Auth.\n   * It will also handle unwrapping from the compat type if necessary\n   *\n   * @param auth Auth object passed in from developer\n   */\n  function _castAuth(auth) {\n    return (0, _firebaseUtil.getModularInstance)(auth);\n  }\n  /** Helper class to wrap subscriber logic */\n  class Subscription {\n    constructor(auth) {\n      this.auth = auth;\n      this.observer = null;\n      this.addObserver = (0, _firebaseUtil.createSubscribe)(observer => this.observer = observer);\n    }\n    get next() {\n      _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.observer.next.bind(this.observer);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  let externalJSProvider = {\n    async loadJS() {\n      throw new Error('Unable to load external scripts');\n    },\n    recaptchaV2Script: '',\n    recaptchaEnterpriseScript: '',\n    gapiScript: ''\n  };\n  function _loadJS(url) {\n    return externalJSProvider.loadJS(url);\n  }\n  function _recaptchaEnterpriseScriptUrl() {\n    return externalJSProvider.recaptchaEnterpriseScript;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MockGreCAPTCHATopLevel {\n    constructor() {\n      this.enterprise = new MockGreCAPTCHA();\n    }\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n  class MockGreCAPTCHA {\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\n  const FAKE_TOKEN = 'NO_RECAPTCHA';\n  class RecaptchaEnterpriseVerifier {\n    /**\n     *\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     */\n    constructor(authExtern) {\n      /**\n       * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n       */\n      this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n      this.auth = _castAuth(authExtern);\n    }\n    /**\n     * Executes the verification process.\n     *\n     * @returns A Promise for a token that can be used to assert the validity of a request.\n     */\n    async verify(action = 'verify', forceRefresh = false) {\n      async function retrieveSiteKey(auth) {\n        if (!forceRefresh) {\n          if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n            return auth._agentRecaptchaConfig.siteKey;\n          }\n          if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n            return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n          }\n        }\n        return new Promise(async (resolve, reject) => {\n          getRecaptchaConfig(auth, {\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }).then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          }).catch(error => {\n            reject(error);\n          });\n        });\n      }\n      function retrieveRecaptchaToken(siteKey, resolve, reject) {\n        const grecaptcha = window.grecaptcha;\n        if (isEnterprise(grecaptcha)) {\n          grecaptcha.enterprise.ready(() => {\n            grecaptcha.enterprise.execute(siteKey, {\n              action\n            }).then(token => {\n              resolve(token);\n            }).catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n          });\n        } else {\n          reject(Error('No reCAPTCHA enterprise script loaded.'));\n        }\n      }\n      // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n      if (this.auth.settings.appVerificationDisabledForTesting) {\n        const mockRecaptcha = new MockGreCAPTCHATopLevel();\n        return mockRecaptcha.execute('siteKey', {\n          action: 'verify'\n        });\n      }\n      return new Promise((resolve, reject) => {\n        retrieveSiteKey(this.auth).then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (true) {\n              reject(new Error('RecaptchaVerifier is only supported in browser'));\n              return;\n            }\n            let url = _recaptchaEnterpriseScriptUrl();\n            if (url.length !== 0) {\n              url += siteKey;\n            }\n            _loadJS(url).then(() => {\n              retrieveRecaptchaToken(siteKey, resolve, reject);\n            }).catch(error => {\n              reject(error);\n            });\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n  async function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\n    let captchaResponse;\n    if (isFakeToken) {\n      captchaResponse = FAKE_TOKEN;\n    } else {\n      try {\n        captchaResponse = await verifier.verify(action);\n      } catch (error) {\n        captchaResponse = await verifier.verify(action, true);\n      }\n    }\n    const newRequest = {\n      ...request\n    };\n    if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ || action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n      if ('phoneEnrollmentInfo' in newRequest) {\n        const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n        const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneEnrollmentInfo': {\n            phoneNumber,\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      } else if ('phoneSignInInfo' in newRequest) {\n        const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneSignInInfo': {\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      }\n      return newRequest;\n    }\n    if (!isCaptchaResp) {\n      Object.assign(newRequest, {\n        captchaResponse\n      });\n    } else {\n      Object.assign(newRequest, {\n        'captchaResp': captchaResponse\n      });\n    }\n    Object.assign(newRequest, {\n      'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    });\n    Object.assign(newRequest, {\n      'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    return newRequest;\n  }\n  async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n    if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return actionMethod(authInstance, request).catch(async error => {\n          if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n            console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n            return actionMethod(authInstance, requestWithRecaptcha);\n          } else {\n            return Promise.reject(error);\n          }\n        });\n      }\n    } else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);\n        return actionMethod(authInstance, requestWithRecaptcha).catch(async error => {\n          if (authInstance._getRecaptchaConfig()?.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n            // AUDIT mode\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` || error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n              console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n              // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n              // check fails.\n              // Fallback to reCAPTCHA v2 flow.\n              const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n              // isCaptchaResp\n              true // isFakeToken\n              );\n              // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n              return actionMethod(authInstance, requestWithRecaptchaFields);\n            }\n          }\n          // ENFORCE mode or AUDIT mode with any other error.\n          return Promise.reject(error);\n        });\n      } else {\n        // Do reCAPTCHA v2 flow.\n        const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n        // isCaptchaResp\n        true // isFakeToken\n        );\n        // This will call the PhoneApiCaller to fetch and inject v2 token.\n        return actionMethod(authInstance, requestWithRecaptchaFields);\n      }\n    } else {\n      return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n    }\n  }\n  async function _initializeRecaptchaConfig(auth) {\n    const authInternal = _castAuth(auth);\n    const response = await getRecaptchaConfig(authInternal, {\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n      version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    const config = new RecaptchaConfig(response);\n    if (authInternal.tenantId == null) {\n      authInternal._agentRecaptchaConfig = config;\n    } else {\n      authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n    }\n    if (config.isAnyProviderEnabled()) {\n      const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n      void verifier.verify();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Initializes an {@link Auth} instance with fine-grained control over\n   * {@link Dependencies}.\n   *\n   * @remarks\n   *\n   * This function allows more control over the {@link Auth} instance than\n   * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n   * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n   * initialize Auth and works for most use cases. Use `initializeAuth` if you\n   * need control over which persistence layer is used, or to minimize bundle\n   * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n   *\n   * For example, if your app only uses anonymous accounts and you only want\n   * accounts saved for the current session, initialize `Auth` with:\n   *\n   * ```js\n   * const auth = initializeAuth(app, {\n   *   persistence: browserSessionPersistence,\n   *   popupRedirectResolver: undefined,\n   * });\n   * ```\n   *\n   * @public\n   */\n  function initializeAuth(app, deps) {\n    const provider = (0, _firebaseApp._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      const auth = provider.getImmediate();\n      const initialOptions = provider.getOptions();\n      if ((0, _firebaseUtil.deepEqual)(initialOptions, deps ?? {})) {\n        return auth;\n      } else {\n        _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n      }\n    }\n    const auth = provider.initialize({\n      options: deps\n    });\n    return auth;\n  }\n  function _initializeAuthInstance(auth, deps) {\n    const persistence = deps?.persistence || [];\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n    if (deps?.errorMap) {\n      auth._updateErrorMap(deps.errorMap);\n    }\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n  }\n\n  /**\n   * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n   * Firebase Auth services.\n   *\n   * @remarks\n   * This must be called synchronously immediately following the first call to\n   * {@link initializeAuth}.  Do not use with production credentials as emulator\n   * traffic is not encrypted.\n   *\n   *\n   * @example\n   * ```javascript\n   * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n   * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n   * `true` to disable the warning banner attached to the DOM.\n   *\n   * @public\n   */\n  function connectAuthEmulator(auth, url, options) {\n    const authInternal = _castAuth(auth);\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n    const disableWarnings = !!options?.disableWarnings;\n    const protocol = extractProtocol(url);\n    const {\n      host,\n      port\n    } = extractHostAndPort(url);\n    const portStr = port === null ? '' : `:${port}`;\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    const emulator = {\n      url: `${protocol}//${host}${portStr}/`\n    };\n    const emulatorConfig = Object.freeze({\n      host,\n      port,\n      protocol: protocol.replace(':', ''),\n      options: Object.freeze({\n        disableWarnings\n      })\n    });\n    // There are a few scenarios to guard against if the Auth instance has already started:\n    if (!authInternal._canInitEmulator) {\n      // Applications may not initialize the emulator for the first time if Auth has already started\n      // to make network requests.\n      _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // Applications may not alter the configuration of the emulator (aka pass a different config)\n      // once Auth has started to make network requests.\n      _assert((0, _firebaseUtil.deepEqual)(emulator, authInternal.config.emulator) && (0, _firebaseUtil.deepEqual)(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n      // connections, so long as the config matches the existing config. This results in a no-op.\n      return;\n    }\n    authInternal.config.emulator = emulator;\n    authInternal.emulatorConfig = emulatorConfig;\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    // Workaround to get cookies in Firebase Studio\n    if ((0, _firebaseUtil.isCloudWorkstation)(host)) {\n      void (0, _firebaseUtil.pingServer)(`${protocol}//${host}${portStr}`);\n      (0, _firebaseUtil.updateEmulatorBanner)('Auth', true);\n    } else if (!disableWarnings) {\n      emitEmulatorWarning();\n    }\n  }\n  function extractProtocol(url) {\n    const protocolEnd = url.indexOf(':');\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n  }\n  function extractHostAndPort(url) {\n    const protocol = extractProtocol(url);\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) {\n      return {\n        host: '',\n        port: null\n      };\n    }\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n      const host = bracketedIPv6[1];\n      return {\n        host,\n        port: parsePort(hostAndPort.substr(host.length + 1))\n      };\n    } else {\n      const [host, port] = hostAndPort.split(':');\n      return {\n        host,\n        port: parsePort(port)\n      };\n    }\n  }\n  function parsePort(portStr) {\n    if (!portStr) {\n      return null;\n    }\n    const port = Number(portStr);\n    if (isNaN(port)) {\n      return null;\n    }\n    return port;\n  }\n  function emitEmulatorWarning() {\n    function attachBanner() {\n      const el = document.createElement('p');\n      const sty = el.style;\n      el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n      sty.position = 'fixed';\n      sty.width = '100%';\n      sty.backgroundColor = '#ffffff';\n      sty.border = '.1em solid #000000';\n      sty.color = '#b50000';\n      sty.bottom = '0px';\n      sty.left = '0px';\n      sty.margin = '0px';\n      sty.zIndex = '10000';\n      sty.textAlign = 'center';\n      el.classList.add('firebase-emulator-warning');\n      document.body.appendChild(el);\n    }\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\n      console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n    }\n    if (false && typeof document !== 'undefined') {\n      if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', attachBanner);\n      } else {\n        attachBanner();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by an {@link AuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class AuthCredential {\n    /** @internal */\n    constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    signInMethod) {\n      this.providerId = providerId;\n      this.signInMethod = signInMethod;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getIdTokenResponse(_auth) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _linkToIdToken(_auth, _idToken) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getReauthenticationResolver(_auth) {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function resetPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function updateEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  // Used for linking an email/password account to an existing idToken. Uses the same request/response\n  // format as updateEmailPassword.\n  async function linkEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n  }\n  async function applyActionCode$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithPassword(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function sendOobCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n  }\n  async function sendEmailVerification$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendPasswordResetEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendSignInLinkToEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function verifyAndChangeEmail(auth, request) {\n    return sendOobCode(auth, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithEmailLink$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n  async function signInWithEmailLinkForLinking(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n   * {@link ProviderId}.PASSWORD\n   *\n   * @remarks\n   * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @public\n   */\n  class EmailAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(/** @internal */\n    _email, /** @internal */\n    _password, signInMethod, /** @internal */\n    _tenantId = null) {\n      super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\n      this._email = _email;\n      this._password = _password;\n      this._tenantId = _tenantId;\n    }\n    /** @internal */\n    static _fromEmailAndPassword(email, password) {\n      return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n    }\n    /** @internal */\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\n      return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      return {\n        email: this._email,\n        password: this._password,\n        signInMethod: this.signInMethod,\n        tenantId: this._tenantId\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n     *\n     * @param json - Either `object` or the stringified representation of the object. When string is\n     * provided, `JSON.parse` would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      if (obj?.email && obj?.password) {\n        if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n          return this._fromEmailAndPassword(obj.email, obj.password);\n        } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n          return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n        }\n      }\n      return null;\n    }\n    /** @internal */\n    async _getIdTokenResponse(auth) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLink$1(auth, {\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    async _linkToIdToken(auth, idToken) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            idToken,\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLinkForLinking(auth, {\n            idToken,\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return this._getIdTokenResponse(auth);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithIdp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI$1 = 'http://localhost';\n  /**\n   * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class OAuthCredential extends AuthCredential {\n    constructor() {\n      super(...arguments);\n      this.pendingToken = null;\n    }\n    /** @internal */\n    static _fromParams(params) {\n      const cred = new OAuthCredential(params.providerId, params.signInMethod);\n      if (params.idToken || params.accessToken) {\n        // OAuth 2 and either ID token or access token.\n        if (params.idToken) {\n          cred.idToken = params.idToken;\n        }\n        if (params.accessToken) {\n          cred.accessToken = params.accessToken;\n        }\n        // Add nonce if available and no pendingToken is present.\n        if (params.nonce && !params.pendingToken) {\n          cred.nonce = params.nonce;\n        }\n        if (params.pendingToken) {\n          cred.pendingToken = params.pendingToken;\n        }\n      } else if (params.oauthToken && params.oauthTokenSecret) {\n        // OAuth 1 and OAuth token with token secret\n        cred.accessToken = params.oauthToken;\n        cred.secret = params.oauthTokenSecret;\n      } else {\n        _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      return cred;\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        idToken: this.idToken,\n        accessToken: this.accessToken,\n        secret: this.secret,\n        nonce: this.nonce,\n        pendingToken: this.pendingToken,\n        providerId: this.providerId,\n        signInMethod: this.signInMethod\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        ...rest\n      } = obj;\n      if (!providerId || !signInMethod) {\n        return null;\n      }\n      const cred = new OAuthCredential(providerId, signInMethod);\n      cred.idToken = rest.idToken || undefined;\n      cred.accessToken = rest.accessToken || undefined;\n      cred.secret = rest.secret;\n      cred.nonce = rest.nonce;\n      cred.pendingToken = rest.pendingToken || null;\n      return cred;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    buildRequest() {\n      const request = {\n        requestUri: IDP_REQUEST_URI$1,\n        returnSecureToken: true\n      };\n      if (this.pendingToken) {\n        request.pendingToken = this.pendingToken;\n      } else {\n        const postBody = {};\n        if (this.idToken) {\n          postBody['id_token'] = this.idToken;\n        }\n        if (this.accessToken) {\n          postBody['access_token'] = this.accessToken;\n        }\n        if (this.secret) {\n          postBody['oauth_token_secret'] = this.secret;\n        }\n        postBody['providerId'] = this.providerId;\n        if (this.nonce && !this.pendingToken) {\n          postBody['nonce'] = this.nonce;\n        }\n        request.postBody = (0, _firebaseUtil.querystring)(postBody);\n      }\n      return request;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithPhoneNumber$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n  }\n  async function linkWithPhoneNumber$1(auth, request) {\n    const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n    if (response.temporaryProof) {\n      throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n    }\n    return response;\n  }\n  const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n  };\n  async function verifyPhoneNumberForExisting(auth, request) {\n    const apiRequest = {\n      ...request,\n      operation: 'REAUTH'\n    };\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Represents the credentials returned by {@link PhoneAuthProvider}.\n   *\n   * @public\n   */\n  class PhoneAuthCredential extends AuthCredential {\n    constructor(params) {\n      super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\n      this.params = params;\n    }\n    /** @internal */\n    static _fromVerification(verificationId, verificationCode) {\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode\n      });\n    }\n    /** @internal */\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\n      return new PhoneAuthCredential({\n        phoneNumber,\n        temporaryProof\n      });\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      return linkWithPhoneNumber$1(auth, {\n        idToken,\n        ...this._makeVerificationRequest()\n      });\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _makeVerificationRequest() {\n      const {\n        temporaryProof,\n        phoneNumber,\n        verificationId,\n        verificationCode\n      } = this.params;\n      if (temporaryProof && phoneNumber) {\n        return {\n          temporaryProof,\n          phoneNumber\n        };\n      }\n      return {\n        sessionInfo: verificationId,\n        code: verificationCode\n      };\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      const obj = {\n        providerId: this.providerId\n      };\n      if (this.params.phoneNumber) {\n        obj.phoneNumber = this.params.phoneNumber;\n      }\n      if (this.params.temporaryProof) {\n        obj.temporaryProof = this.params.temporaryProof;\n      }\n      if (this.params.verificationCode) {\n        obj.verificationCode = this.params.verificationCode;\n      }\n      if (this.params.verificationId) {\n        obj.verificationId = this.params.verificationId;\n      }\n      return obj;\n    }\n    /** Generates a phone credential based on a plain object or a JSON string. */\n    static fromJSON(json) {\n      if (typeof json === 'string') {\n        json = JSON.parse(json);\n      }\n      const {\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      } = json;\n      if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n        return null;\n      }\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      });\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Maps the mode string in action code URL to Action Code Info operation.\n   *\n   * @param mode\n   */\n  function parseMode(mode) {\n    switch (mode) {\n      case 'recoverEmail':\n        return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n      case 'resetPassword':\n        return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n      case 'signIn':\n        return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n      case 'verifyEmail':\n        return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n      case 'verifyAndChangeEmail':\n        return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n      case 'revertSecondFactorAddition':\n        return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n      default:\n        return null;\n    }\n  }\n  /**\n   * Helper to parse FDL links\n   *\n   * @param url\n   */\n  function parseDeepLink(url) {\n    const link = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(url))['link'];\n    // Double link case (automatic redirect).\n    const doubleDeepLink = link ? (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(link))['deep_link_id'] : null;\n    // iOS custom scheme links.\n    const iOSDeepLink = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(url))['deep_link_id'];\n    const iOSDoubleDeepLink = iOSDeepLink ? (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(iOSDeepLink))['link'] : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n  }\n  /**\n   * A utility class to parse email action URLs such as password reset, email verification,\n   * email link sign in, etc.\n   *\n   * @public\n   */\n  class ActionCodeURL {\n    /**\n     * @param actionLink - The link from which to extract the URL.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @internal\n     */\n    constructor(actionLink) {\n      const searchParams = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(actionLink));\n      const apiKey = searchParams[\"apiKey\" /* QueryField.API_KEY */] ?? null;\n      const code = searchParams[\"oobCode\" /* QueryField.CODE */] ?? null;\n      const operation = parseMode(searchParams[\"mode\" /* QueryField.MODE */] ?? null);\n      // Validate API key, code and mode.\n      _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.apiKey = apiKey;\n      this.operation = operation;\n      this.code = code;\n      this.continueUrl = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */] ?? null;\n      this.languageCode = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */] ?? null;\n      this.tenantId = searchParams[\"tenantId\" /* QueryField.TENANT_ID */] ?? null;\n    }\n    /**\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n     * otherwise returns null.\n     *\n     * @param link  - The email action link string.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @public\n     */\n    static parseLink(link) {\n      const actionLink = parseDeepLink(link);\n      try {\n        return new ActionCodeURL(actionLink);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if\n   * the link is valid, otherwise returns null.\n   *\n   * @public\n   */\n  function parseActionCodeURL(link) {\n    return ActionCodeURL.parseLink(link);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating {@link EmailAuthCredential}.\n   *\n   * @public\n   */\n  class EmailAuthProvider {\n    constructor() {\n      /**\n       * Always set to {@link ProviderId}.PASSWORD, even for email link.\n       */\n      this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and password.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credential(email, password);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n     * ```\n     *\n     * @param email - Email address.\n     * @param password - User account password.\n     * @returns The auth provider credential.\n     */\n    static credential(email, password) {\n      return EmailAuthCredential._fromEmailAndPassword(email, password);\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n     * email link operation.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * await sendSignInLinkToEmail(auth, email);\n     * // Obtain emailLink from user.\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n     * ```\n     *\n     * @param auth - The {@link Auth} instance used to verify the link.\n     * @param email - Email address.\n     * @param emailLink - Sign-in email link.\n     * @returns - The auth provider credential.\n     */\n    static credentialWithLink(email, emailLink) {\n      const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n      _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n    }\n  }\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  EmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The base class for all Federated providers (OAuth (including OIDC), SAML).\n   *\n   * This class is not meant to be instantiated directly.\n   *\n   * @public\n   */\n  class FederatedAuthProvider {\n    /**\n     * Constructor for generic OAuth providers.\n     *\n     * @param providerId - Provider for which credentials should be generated.\n     */\n    constructor(providerId) {\n      this.providerId = providerId;\n      /** @internal */\n      this.defaultLanguageCode = null;\n      /** @internal */\n      this.customParameters = {};\n    }\n    /**\n     * Set the language gode.\n     *\n     * @param languageCode - language code\n     */\n    setDefaultLanguage(languageCode) {\n      this.defaultLanguageCode = languageCode;\n    }\n    /**\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n     * operations.\n     *\n     * @remarks\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n     *\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n     */\n    setCustomParameters(customOAuthParameters) {\n      this.customParameters = customOAuthParameters;\n      return this;\n    }\n    /**\n     * Retrieve the current list of {@link CustomParameters}.\n     */\n    getCustomParameters() {\n      return this.customParameters;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Common code to all OAuth providers. This is separate from the\n   * {@link OAuthProvider} so that child providers (like\n   * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n   * Instead, they rely on a static `credential` method.\n   */\n  class BaseOAuthProvider extends FederatedAuthProvider {\n    constructor() {\n      super(...arguments);\n      /** @internal */\n      this.scopes = [];\n    }\n    /**\n     * Add an OAuth scope to the credential.\n     *\n     * @param scope - Provider OAuth scope to add.\n     */\n    addScope(scope) {\n      // If not already added, add scope to list.\n      if (!this.scopes.includes(scope)) {\n        this.scopes.push(scope);\n      }\n      return this;\n    }\n    /**\n     * Retrieve the current list of OAuth scopes.\n     */\n    getScopes() {\n      return [...this.scopes];\n    }\n  }\n  /**\n   * Provider for generating generic {@link OAuthCredential}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new OAuthProvider('google.com');\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a OAuth Access Token for the provider.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a OAuth Access Token for the provider.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class OAuthProvider extends BaseOAuthProvider {\n    /**\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return OAuthCredential._fromParams(obj);\n    }\n    /**\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n     *\n     * @remarks\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n     * the raw nonce must match the nonce field in the ID token.\n     *\n     * @example\n     * ```javascript\n     * // `googleUser` from the onsuccess Google Sign In callback.\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\n     * const provider = new OAuthProvider('google.com');\n     * const credential = provider.credential({\n     *   idToken: googleUser.getAuthResponse().id_token,\n     * });\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param params - Either the options object containing the ID token, access token and raw nonce\n     * or the ID token string.\n     */\n    credential(params) {\n      return this._credential({\n        ...params,\n        nonce: params.rawNonce\n      });\n    }\n    /** An internal credential method that accepts more permissive options */\n    _credential(params) {\n      _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      // For OAuthCredential, sign in method is same as providerId.\n      return OAuthCredential._fromParams({\n        ...params,\n        providerId: this.providerId,\n        signInMethod: this.providerId\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n    }\n    static oauthCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce,\n        providerId\n      } = tokenResponse;\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      }\n      if (!providerId) {\n        return null;\n      }\n      try {\n        return new OAuthProvider(providerId)._credential({\n          idToken: oauthIdToken,\n          accessToken: oauthAccessToken,\n          nonce,\n          pendingToken\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('user_birthday');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = FacebookAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = FacebookAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  class FacebookAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"facebook.com\" /* ProviderId.FACEBOOK */);\n    }\n    /**\n     * Creates a credential for Facebook.\n     *\n     * @example\n     * ```javascript\n     * // `event` from the Facebook auth.authResponseChange callback.\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param accessToken - Facebook access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: FacebookAuthProvider.PROVIDER_ID,\n        signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  FacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GoogleAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Google Access Token.\n   *   const credential = GoogleAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Google Access Token.\n   * const credential = GoogleAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  class GoogleAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"google.com\" /* ProviderId.GOOGLE */);\n      this.addScope('profile');\n    }\n    /**\n     * Creates a credential for Google. At least one of ID token and access token is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param idToken - Google ID token.\n     * @param accessToken - Google access token.\n     */\n    static credential(idToken, accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GoogleAuthProvider.PROVIDER_ID,\n        signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n        idToken,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken\n      } = tokenResponse;\n      if (!oauthIdToken && !oauthAccessToken) {\n        // This could be an oauth 1 credential or a phone credential\n        return null;\n      }\n      try {\n        return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  GoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n   *\n   * @remarks\n   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n   * the {@link signInWithPopup} handler:\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GithubAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('repo');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a GitHub Access Token.\n   *   const credential = GithubAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GithubAuthProvider();\n   * provider.addScope('repo');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a GitHub Access Token.\n   * const credential = GithubAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class GithubAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"github.com\" /* ProviderId.GITHUB */);\n    }\n    /**\n     * Creates a credential for GitHub.\n     *\n     * @param accessToken - GitHub access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GithubAuthProvider.PROVIDER_ID,\n        signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI = 'http://localhost';\n  /**\n   * @public\n   */\n  class SAMLAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(providerId, pendingToken) {\n      super(providerId, providerId);\n      this.pendingToken = pendingToken;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        signInMethod: this.signInMethod,\n        providerId: this.providerId,\n        pendingToken: this.pendingToken\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        pendingToken\n      } = obj;\n      if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n        return null;\n      }\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    /**\n     * Helper static method to avoid exposing the constructor to end users.\n     *\n     * @internal\n     */\n    static _create(providerId, pendingToken) {\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    buildRequest() {\n      return {\n        requestUri: IDP_REQUEST_URI,\n        returnSecureToken: true,\n        pendingToken: this.pendingToken\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const SAML_PROVIDER_PREFIX = 'saml.';\n  /**\n   * An {@link AuthProvider} for SAML.\n   *\n   * @public\n   */\n  class SAMLAuthProvider extends FederatedAuthProvider {\n    /**\n     * Constructor. The providerId must start with \"saml.\"\n     * @param providerId - SAML provider ID.\n     */\n    constructor(providerId) {\n      _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      super(providerId);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n     * successful SAML flow completes.\n     *\n     * @remarks\n     *\n     * For example, to get an {@link AuthCredential}, you could write the\n     * following code:\n     *\n     * ```js\n     * const userCredential = await signInWithPopup(auth, samlProvider);\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n     * ```\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n    }\n    /**\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const credential = SAMLAuthCredential.fromJSON(json);\n      _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return credential;\n    }\n    static samlCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        pendingToken,\n        providerId\n      } = tokenResponse;\n      if (!pendingToken || !providerId) {\n        return null;\n      }\n      try {\n        return SAMLAuthCredential._create(providerId, pendingToken);\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new TwitterAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Twitter Access Token and Secret.\n   *   const credential = TwitterAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   *   const secret = credential.secret;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new TwitterAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Twitter Access Token and Secret.\n   * const credential = TwitterAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * const secret = credential.secret;\n   * ```\n   *\n   * @public\n   */\n  class TwitterAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"twitter.com\" /* ProviderId.TWITTER */);\n    }\n    /**\n     * Creates a credential for Twitter.\n     *\n     * @param token - Twitter access token.\n     * @param secret - Twitter secret.\n     */\n    static credential(token, secret) {\n      return OAuthCredential._fromParams({\n        providerId: TwitterAuthProvider.PROVIDER_ID,\n        signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n        oauthToken: token,\n        oauthTokenSecret: secret\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthAccessToken,\n        oauthTokenSecret\n      } = tokenResponse;\n      if (!oauthAccessToken || !oauthTokenSecret) {\n        return null;\n      }\n      try {\n        return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  TwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signUp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserCredentialImpl {\n    constructor(params) {\n      this.user = params.user;\n      this.providerId = params.providerId;\n      this._tokenResponse = params._tokenResponse;\n      this.operationType = params.operationType;\n    }\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n      const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n      const providerId = providerIdForResponse(idTokenResponse);\n      const userCred = new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: idTokenResponse,\n        operationType\n      });\n      return userCred;\n    }\n    static async _forOperation(user, operationType, response) {\n      await user._updateTokensIfNecessary(response, /* reload */true);\n      const providerId = providerIdForResponse(response);\n      return new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: response,\n        operationType\n      });\n    }\n  }\n  function providerIdForResponse(response) {\n    if (response.providerId) {\n      return response.providerId;\n    }\n    if ('phoneNumber' in response) {\n      return \"phone\" /* ProviderId.PHONE */;\n    }\n    return null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in as an anonymous user.\n   *\n   * @remarks\n   * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n   * new anonymous user identity will be created and returned.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  async function signInAnonymously(auth) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    await authInternal._initializationPromise;\n    if (authInternal.currentUser?.isAnonymous) {\n      // If an anonymous user is already signed in, no need to sign them in again.\n      return new UserCredentialImpl({\n        user: authInternal.currentUser,\n        providerId: null,\n        operationType: \"signIn\" /* OperationType.SIGN_IN */\n      });\n    }\n    const response = await signUp(authInternal, {\n      returnSecureToken: true\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorError extends _firebaseUtil.FirebaseError {\n    constructor(auth, error, operationType, user) {\n      super(error.code, error.message);\n      this.operationType = operationType;\n      this.user = user;\n      // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(this, MultiFactorError.prototype);\n      this.customData = {\n        appName: auth.name,\n        tenantId: auth.tenantId ?? undefined,\n        _serverResponse: error.customData._serverResponse,\n        operationType\n      };\n    }\n    static _fromErrorAndOperation(auth, error, operationType, user) {\n      return new MultiFactorError(auth, error, operationType, user);\n    }\n  }\n  function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(error => {\n      if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n        throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Takes a set of UserInfo provider data and converts it to a set of names\n   */\n  function providerDataAsNames(providerData) {\n    return new Set(providerData.map(({\n      providerId\n    }) => providerId).filter(pid => !!pid));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Unlinks a provider from a user account.\n   *\n   * @param user - The user.\n   * @param providerId - The provider to unlink.\n   *\n   * @public\n   */\n  async function unlink(user, providerId) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _assertLinkedStatus(true, userInternal, providerId);\n    const {\n      providerUserInfo\n    } = await deleteLinkedAccounts(userInternal.auth, {\n      idToken: await userInternal.getIdToken(),\n      deleteProvider: [providerId]\n    });\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n      userInternal.phoneNumber = null;\n    }\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    return userInternal;\n  }\n  async function _link(user, credential, bypassAuthState = false) {\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n    return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n  }\n  async function _assertLinkedStatus(expected, user, provider) {\n    await _reloadWithoutSaving(user);\n    const providerIds = providerDataAsNames(user.providerData);\n    const code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n    _assert(providerIds.has(provider) === expected, user.auth, code);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reauthenticate(user, credential, bypassAuthState = false) {\n    const {\n      auth\n    } = user;\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n    try {\n      const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n      _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const parsed = _parseToken(response.idToken);\n      _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const {\n        sub: localId\n      } = parsed;\n      _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      return UserCredentialImpl._forOperation(user, operationType, response);\n    } catch (e) {\n      // Convert user deleted error into user mismatch\n      if (e?.code === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n        _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _signInWithCredential(auth, credential, bypassAuthState = false) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"signIn\" /* OperationType.SIGN_IN */;\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n    if (!bypassAuthState) {\n      await auth._updateCurrentUser(userCredential.user);\n    }\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function signInWithCredential(auth, credential) {\n    return _signInWithCredential(_castAuth(auth), credential);\n  }\n  /**\n   * Links the user account with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function linkWithCredential(user, credential) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\n    return _link(userInternal, credential);\n  }\n  /**\n   * Re-authenticates a user using a fresh credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n   * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n   * or a `TOKEN_EXPIRED` error.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function reauthenticateWithCredential(user, credential) {\n    return _reauthenticate((0, _firebaseUtil.getModularInstance)(user), credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithCustomToken$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in using a custom token.\n   *\n   * @remarks\n   * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n   * be generated by an auth backend using the\n   * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n   * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n   *\n   * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param customToken - The custom token to sign in with.\n   *\n   * @public\n   */\n  async function signInWithCustomToken(auth, customToken) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const response = await signInWithCustomToken$1(authInternal, {\n      token: customToken,\n      returnSecureToken: true\n    });\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(cred.user);\n    return cred;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorInfoImpl {\n    constructor(factorId, response) {\n      this.factorId = factorId;\n      this.uid = response.mfaEnrollmentId;\n      this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n      this.displayName = response.displayName;\n    }\n    static _fromServerResponse(auth, enrollment) {\n      if ('phoneInfo' in enrollment) {\n        return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      } else if ('totpInfo' in enrollment) {\n        return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      }\n      return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }\n  class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"phone\" /* FactorId.PHONE */, response);\n      this.phoneNumber = response.phoneInfo;\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new PhoneMultiFactorInfoImpl(enrollment);\n    }\n  }\n  class TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"totp\" /* FactorId.TOTP */, response);\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new TotpMultiFactorInfoImpl(enrollment);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    _assert(actionCodeSettings.url?.length > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n    _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.linkDomain = actionCodeSettings.linkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n      _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n      request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n      _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n      request.androidInstallApp = actionCodeSettings.android.installApp;\n      request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n      request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates the password policy cached in the {@link Auth} instance if a policy is already\n   * cached for the project or tenant.\n   *\n   * @remarks\n   * We only fetch the password policy if the password did not meet policy requirements and\n   * there is an existing policy cached. A developer must call validatePassword at least\n   * once for the cache to be automatically updated.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @private\n   */\n  async function recachePasswordPolicy(auth) {\n    const authInternal = _castAuth(auth);\n    if (authInternal._getPasswordPolicyInternal()) {\n      await authInternal._updatePasswordPolicy();\n    }\n  }\n  /**\n   * Sends a password reset email to the given email address. This method does not throw an error when\n   * there's no user account with the given email address and\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   *\n   * @remarks\n   * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n   * the email sent to the user, along with the new password specified by the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain code from user.\n   * await confirmPasswordReset('user@example.com', code);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n    }\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A confirmation code sent to the user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  async function confirmPasswordReset(auth, oobCode, newPassword) {\n    await resetPassword((0, _firebaseUtil.getModularInstance)(auth), {\n      oobCode,\n      newPassword\n    }).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    // Do not return the email.\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function applyActionCode(auth, oobCode) {\n    await applyActionCode$1((0, _firebaseUtil.getModularInstance)(auth), {\n      oobCode\n    });\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns metadata about the code.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function checkActionCode(auth, oobCode) {\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const response = await resetPassword(authModular, {\n      oobCode\n    });\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\n    // VERIFY_AND_CHANGE_EMAIL.\n    // New email should not be empty if the request type is\n    // VERIFY_AND_CHANGE_EMAIL.\n    // Multi-factor info could not be empty if the request type is\n    // REVERT_SECOND_FACTOR_ADDITION.\n    const operation = response.requestType;\n    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    switch (operation) {\n      case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n        break;\n      case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n        _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        break;\n      case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n        _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // fall through\n      default:\n        _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    // The multi-factor info for revert second factor addition\n    let multiFactorInfo = null;\n    if (response.mfaInfo) {\n      multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n    }\n    return {\n      data: {\n        email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n        previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n        multiFactorInfo\n      },\n      operation\n    };\n  }\n  /**\n   * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns the user's email address if valid.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param code - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function verifyPasswordResetCode(auth, code) {\n    const {\n      data\n    } = await checkActionCode((0, _firebaseUtil.getModularInstance)(auth), code);\n    // Email should always be present since a code was sent to it\n    return data.email;\n  }\n  /**\n   * Creates a new user account associated with the specified email address and password.\n   *\n   * @remarks\n   * On successful creation of the user account, this user will also be signed in to your application.\n   *\n   * User account creation can fail if the account already exists or the password is invalid.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The email address acts as a unique identifier for the user and enables an email-based\n   * password reset. This function will create a new user account and set the initial user password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param password - The user's chosen password.\n   *\n   * @public\n   */\n  async function createUserWithEmailAndPassword(auth, email, password) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const request = {\n      returnSecureToken: true,\n      email,\n      password,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    const response = await signUpResponse.catch(error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in using an email and password.\n   *\n   * @remarks\n   * Fails with an error if the email address and password do not match. When\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n   * email/password.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The user's password is NOT the password used to access the user's email account. The\n   * email address serves as a unique identifier for the user, and the password is used to access\n   * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The users email address.\n   * @param password - The users password.\n   *\n   * @public\n   */\n  function signInWithEmailAndPassword(auth, email, password) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    return signInWithCredential((0, _firebaseUtil.getModularInstance)(auth), EmailAuthProvider.credential(email, password)).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Sends a sign-in email link to the user with the specified email.\n   *\n   * @remarks\n   * The sign-in operation has to always be completed in the app unlike other out of band email\n   * actions (password reset and email verifications). This is because, at the end of the flow,\n   * the user is expected to be signed in and their Auth state persisted within the app.\n   *\n   * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n   * address and the email link supplied in the email sent to the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   * @param authInternal - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    function setActionCodeSettings(request, actionCodeSettings) {\n      _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n      }\n    }\n    setActionCodeSettings(request, actionCodeSettings);\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function isSignInWithEmailLink(auth, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    return actionCodeUrl?.operation === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @remarks\n   * If no link is passed, the link is inferred from the current URL.\n   *\n   * Fails with an error if the email address is invalid or OTP in email link expires.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  async function signInWithEmailLink(auth, email, emailLink) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\n    // instance.\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n    return signInWithCredential(authModular, credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function createAuthUri(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Gets the list of possible sign in methods for the given email address. This method returns an\n   * empty list when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, irrespective of the number of authentication methods available for the given email.\n   *\n   * @remarks\n   * This is useful to differentiate methods of sign-in for the same provider, eg.\n   * {@link EmailAuthProvider} which has 2 methods of sign-in,\n   * {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   *\n   * Deprecated. Migrating off of this method is recommended as a security best-practice.\n   * Learn more in the Identity Platform documentation for\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n   * @public\n   */\n  async function fetchSignInMethodsForEmail(auth, email) {\n    // createAuthUri returns an error if continue URI is not http or https.\n    // For environments like Cordova, Chrome extensions, native frameworks, file\n    // systems, etc, use http://localhost as continue URL.\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n    const request = {\n      identifier: email,\n      continueUri\n    };\n    const {\n      signinMethods\n    } = await createAuthUri((0, _firebaseUtil.getModularInstance)(auth), request);\n    return signinMethods || [];\n  }\n  /**\n   * Sends a verification email to a user.\n   *\n   * @remarks\n   * The verification process is completed by calling {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendEmailVerification(user, actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendEmailVerification(user, actionCodeSettings) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n      idToken\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await sendEmailVerification$1(userInternal.auth, request);\n    if (email !== user.email) {\n      await user.reload();\n    }\n  }\n  /**\n   * Sends a verification email to a new email address.\n   *\n   * @remarks\n   * The user's email will be updated to the new one after being verified.\n   *\n   * If you have a custom email action handler, you can complete the verification process by calling\n   * {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address to be verified before update.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n      idToken,\n      newEmail\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await verifyAndChangeEmail(userInternal.auth, request);\n    if (email !== user.email) {\n      // If the local copy of the email on user is outdated, reload the\n      // user.\n      await user.reload();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function updateProfile$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates a user's profile data.\n   *\n   * @param user - The user.\n   * @param profile - The profile's `displayName` and `photoURL` to update.\n   *\n   * @public\n   */\n  async function updateProfile(user, {\n    displayName,\n    photoURL: photoUrl\n  }) {\n    if (displayName === undefined && photoUrl === undefined) {\n      return;\n    }\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await userInternal.getIdToken();\n    const profileRequest = {\n      idToken,\n      displayName,\n      photoUrl,\n      returnSecureToken: true\n    };\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n    userInternal.displayName = response.displayName || null;\n    userInternal.photoURL = response.photoUrl || null;\n    // Update the password provider as well\n    const passwordProvider = userInternal.providerData.find(({\n      providerId\n    }) => providerId === \"password\" /* ProviderId.PASSWORD */);\n    if (passwordProvider) {\n      passwordProvider.displayName = userInternal.displayName;\n      passwordProvider.photoURL = userInternal.photoURL;\n    }\n    await userInternal._updateTokensIfNecessary(response);\n  }\n  /**\n   * Updates the user's email address.\n   *\n   * @remarks\n   * An email will be sent to the original email address (if it was set) that allows to revoke the\n   * email address change, in order to protect them from account hijacking.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address.\n   *\n   * Throws \"auth/operation-not-allowed\" error when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n   *\n   * @public\n   */\n  function updateEmail(user, newEmail) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    return updateEmailOrPassword(userInternal, newEmail, null);\n  }\n  /**\n   * Updates the user's password.\n   *\n   * @remarks\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function updatePassword(user, newPassword) {\n    return updateEmailOrPassword((0, _firebaseUtil.getModularInstance)(user), null, newPassword);\n  }\n  async function updateEmailOrPassword(user, email, password) {\n    const {\n      auth\n    } = user;\n    const idToken = await user.getIdToken();\n    const request = {\n      idToken,\n      returnSecureToken: true\n    };\n    if (email) {\n      request.email = email;\n    }\n    if (password) {\n      request.password = password;\n    }\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n    await user._updateTokensIfNecessary(response, /* reload */true);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Parse the `AdditionalUserInfo` from the ID token response.\n   *\n   */\n  function _fromIdTokenResponse(idTokenResponse) {\n    if (!idTokenResponse) {\n      return null;\n    }\n    const {\n      providerId\n    } = idTokenResponse;\n    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n    if (!providerId && idTokenResponse?.idToken) {\n      const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.['sign_in_provider'];\n      if (signInProvider) {\n        const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n        // Uses generic class in accordance with the legacy SDK.\n        return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n      }\n    }\n    if (!providerId) {\n      return null;\n    }\n    switch (providerId) {\n      case \"facebook.com\" /* ProviderId.FACEBOOK */:\n        return new FacebookAdditionalUserInfo(isNewUser, profile);\n      case \"github.com\" /* ProviderId.GITHUB */:\n        return new GithubAdditionalUserInfo(isNewUser, profile);\n      case \"google.com\" /* ProviderId.GOOGLE */:\n        return new GoogleAdditionalUserInfo(isNewUser, profile);\n      case \"twitter.com\" /* ProviderId.TWITTER */:\n        return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n      case \"custom\" /* ProviderId.CUSTOM */:\n      case \"anonymous\" /* ProviderId.ANONYMOUS */:\n        return new GenericAdditionalUserInfo(isNewUser, null);\n      default:\n        return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n  }\n  class GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile = {}) {\n      this.isNewUser = isNewUser;\n      this.providerId = providerId;\n      this.profile = profile;\n    }\n  }\n  class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile, username) {\n      super(isNewUser, providerId, profile);\n      this.username = username;\n    }\n  }\n  class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\n    }\n  }\n  class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof profile?.login === 'string' ? profile?.login : null);\n    }\n  }\n  class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\n    }\n  }\n  class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile, screenName) {\n      super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\n    }\n  }\n  /**\n   * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n   *\n   * @param userCredential - The user credential.\n   *\n   * @public\n   */\n  function getAdditionalUserInfo(userCredential) {\n    const {\n      user,\n      _tokenResponse\n    } = userCredential;\n    if (user.isAnonymous && !_tokenResponse) {\n      // Handle the special case where signInAnonymously() gets called twice.\n      // No network call is made so there's nothing to actually fill this in\n      return {\n        providerId: null,\n        isNewUser: false,\n        profile: null\n      };\n    }\n    return _fromIdTokenResponse(_tokenResponse);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Non-optional auth methods.\n  /**\n   * Changes the type of persistence on the {@link Auth} instance for the currently saved\n   * `Auth` session and applies this type of persistence for future sign-in requests, including\n   * sign-in with redirect requests.\n   *\n   * @remarks\n   * This makes it easy for a user signing in to specify whether their session should be\n   * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n   * that are shared by other users or have sensitive data.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * setPersistence(auth, browserSessionPersistence);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param persistence - The {@link Persistence} to use.\n   * @returns A `Promise` that resolves once the persistence change has completed\n   *\n   * @public\n   */\n  function setPersistence(auth, persistence) {\n    return (0, _firebaseUtil.getModularInstance)(auth).setPersistence(persistence);\n  }\n  /**\n   * Loads the reCAPTCHA configuration into the `Auth` instance.\n   *\n   * @remarks\n   * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n   * verification flow should be triggered for each auth provider, into the\n   * current Auth session.\n   *\n   * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n   * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n   * verification, the SDK will transparently load the reCAPTCHA config and restart the\n   * auth flows.\n   *\n   * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n   * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * initializeRecaptchaConfig(auth);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function initializeRecaptchaConfig(auth) {\n    return _initializeRecaptchaConfig(auth);\n  }\n  /**\n   * Validates the password against the password policy configured for the project or tenant.\n   *\n   * @remarks\n   * If no tenant ID is set on the `Auth` instance, then this method will use the password\n   * policy configured for the project. Otherwise, this method will use the policy configured\n   * for the tenant. If a password policy has not been configured, then the default policy\n   * configured for all projects will be used.\n   *\n   * If an auth flow fails because a submitted password does not meet the password policy\n   * requirements and this method has previously been called, then this method will use the\n   * most recent policy available when called again.\n   *\n   * @example\n   * ```javascript\n   * validatePassword(auth, 'some-password');\n   * ```\n   *\n   * @param auth The {@link Auth} instance.\n   * @param password The password to validate.\n   *\n   * @public\n   */\n  async function validatePassword(auth, password) {\n    const authInternal = _castAuth(auth);\n    return authInternal.validatePassword(password);\n  }\n  /**\n   * Adds an observer for changes to the signed-in user's ID token.\n   *\n   * @remarks\n   * This includes sign-in, sign-out, and token refresh events.\n   * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onIdTokenChanged(auth, nextOrObserver, error, completed) {\n    return (0, _firebaseUtil.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Adds a blocking callback that runs before an auth state change\n   * sets a new user.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param callback - callback triggered before new user value is set.\n   *   If this throws, it blocks the user from being set.\n   * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n   *   callback throws, allowing you to undo any side effects.\n   */\n  function beforeAuthStateChanged(auth, callback, onAbort) {\n    return (0, _firebaseUtil.getModularInstance)(auth).beforeAuthStateChanged(callback, onAbort);\n  }\n  /**\n   * Adds an observer for changes to the user's sign-in state.\n   *\n   * @remarks\n   * To keep the old behavior, see {@link onIdTokenChanged}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onAuthStateChanged(auth, nextOrObserver, error, completed) {\n    return (0, _firebaseUtil.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Sets the current language to the default device/browser preference.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function useDeviceLanguage(auth) {\n    (0, _firebaseUtil.getModularInstance)(auth).useDeviceLanguage();\n  }\n  /**\n   * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n   * {@link Auth} instance.\n   *\n   * @remarks\n   * A new instance copy of the user provided will be made and set as currentUser.\n   *\n   * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n   * like other sign in methods.\n   *\n   * The operation fails with an error if the user to be updated belongs to a different Firebase\n   * project.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param user - The new {@link User}.\n   *\n   * @public\n   */\n  function updateCurrentUser(auth, user) {\n    return (0, _firebaseUtil.getModularInstance)(auth).updateCurrentUser(user);\n  }\n  /**\n   * Signs out the current user.\n   *\n   * @remarks\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signOut(auth) {\n    return (0, _firebaseUtil.getModularInstance)(auth).signOut();\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param token - The Apple OAuth access token.\n   *\n   * @public\n   */\n  function revokeAccessToken(auth, token) {\n    const authInternal = _castAuth(auth);\n    return authInternal.revokeAccessToken(token);\n  }\n  /**\n   * Deletes and signs out the user.\n   *\n   * @remarks\n   * Important: this is a security-sensitive operation that requires the user to have recently\n   * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function deleteUser(user) {\n    return (0, _firebaseUtil.getModularInstance)(user).delete();\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorSessionImpl {\n    constructor(type, credential, user) {\n      this.type = type;\n      this.credential = credential;\n      this.user = user;\n    }\n    static _fromIdtoken(idToken, user) {\n      return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n    }\n    static _fromMfaPendingCredential(mfaPendingCredential) {\n      return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n    }\n    toJSON() {\n      const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n      return {\n        multiFactorSession: {\n          [key]: this.credential\n        }\n      };\n    }\n    static fromJSON(obj) {\n      if (obj?.multiFactorSession) {\n        if (obj.multiFactorSession?.pendingCredential) {\n          return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n        } else if (obj.multiFactorSession?.idToken) {\n          return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n        }\n      }\n      return null;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorResolverImpl {\n    constructor(session, hints, signInResolver) {\n      this.session = session;\n      this.hints = hints;\n      this.signInResolver = signInResolver;\n    }\n    /** @internal */\n    static _fromError(authExtern, error) {\n      const auth = _castAuth(authExtern);\n      const serverResponse = error.customData._serverResponse;\n      const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n      _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n      return new MultiFactorResolverImpl(session, hints, async assertion => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = {\n          ...serverResponse,\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        };\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case \"signIn\" /* OperationType.SIGN_IN */:\n            const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n            _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n          default:\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n      });\n    }\n    async resolveSignIn(assertionExtern) {\n      const assertion = assertionExtern;\n      return this.signInResolver(assertion);\n    }\n  }\n  /**\n   * Provides a {@link MultiFactorResolver} suitable for completion of a\n   * multi-factor flow.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param error - The {@link MultiFactorError} raised during a sign-in, or\n   * reauthentication operation.\n   *\n   * @public\n   */\n  function getMultiFactorResolver(auth, error) {\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const errorInternal = error;\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(errorInternal.customData._serverResponse?.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function withdrawMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n  }\n  class MultiFactorUserImpl {\n    constructor(user) {\n      this.user = user;\n      this.enrolledFactors = [];\n      user._onReload(userInfo => {\n        if (userInfo.mfaInfo) {\n          this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n        }\n      });\n    }\n    static _fromUser(user) {\n      return new MultiFactorUserImpl(user);\n    }\n    async getSession() {\n      return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n    }\n    async enroll(assertionExtern, displayName) {\n      const assertion = assertionExtern;\n      const session = await this.getSession();\n      const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n      // New tokens will be issued after enrollment of the new second factors.\n      // They need to be updated on the user.\n      await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n      // The user needs to be reloaded to get the new multi-factor information\n      // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n      // will be updated.\n      return this.user.reload();\n    }\n    async unenroll(infoOrUid) {\n      const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n      const idToken = await this.user.getIdToken();\n      try {\n        const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        }));\n        // Remove the second factor from the user's list.\n        this.enrolledFactors = this.enrolledFactors.filter(({\n          uid\n        }) => uid !== mfaEnrollmentId);\n        // Depending on whether the backend decided to revoke the user's session,\n        // the tokenResponse may be empty. If the tokens were not updated (and they\n        // are now invalid), reloading the user will discover this and invalidate\n        // the user's state accordingly.\n        await this.user._updateTokensIfNecessary(idTokenResponse);\n        await this.user.reload();\n      } catch (e) {\n        throw e;\n      }\n    }\n  }\n  const multiFactorUserCache = new WeakMap();\n  /**\n   * The {@link MultiFactorUser} corresponding to the user.\n   *\n   * @remarks\n   * This is used to access all multi-factor properties and operations related to the user.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function multiFactor(user) {\n    const userModular = (0, _firebaseUtil.getModularInstance)(user);\n    if (!multiFactorUserCache.has(userModular)) {\n      multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n    }\n    return multiFactorUserCache.get(userModular);\n  }\n  var name = \"@firebase/auth\";\n  var version = \"1.11.0\";\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthInterop {\n    constructor(auth) {\n      this.auth = auth;\n      this.internalListeners = new Map();\n    }\n    getUid() {\n      this.assertAuthConfigured();\n      return this.auth.currentUser?.uid || null;\n    }\n    async getToken(forceRefresh) {\n      this.assertAuthConfigured();\n      await this.auth._initializationPromise;\n      if (!this.auth.currentUser) {\n        return null;\n      }\n      const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n      return {\n        accessToken\n      };\n    }\n    addAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      if (this.internalListeners.has(listener)) {\n        return;\n      }\n      const unsubscribe = this.auth.onIdTokenChanged(user => {\n        listener(user?.stsTokenManager.accessToken || null);\n      });\n      this.internalListeners.set(listener, unsubscribe);\n      this.updateProactiveRefresh();\n    }\n    removeAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      const unsubscribe = this.internalListeners.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      this.internalListeners.delete(listener);\n      unsubscribe();\n      this.updateProactiveRefresh();\n    }\n    assertAuthConfigured() {\n      _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n    }\n    updateProactiveRefresh() {\n      if (this.internalListeners.size > 0) {\n        this.auth._startProactiveRefresh();\n      } else {\n        this.auth._stopProactiveRefresh();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getVersionForPlatform(clientPlatform) {\n    switch (clientPlatform) {\n      case \"Node\" /* ClientPlatform.NODE */:\n        return 'node';\n      case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n        return 'rn';\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        return 'webworker';\n      case \"Cordova\" /* ClientPlatform.CORDOVA */:\n        return 'cordova';\n      case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n        return 'web-extension';\n      default:\n        return undefined;\n    }\n  }\n  /** @internal */\n  function registerAuth(clientPlatform) {\n    (0, _firebaseApp._registerComponent)(new _firebaseComponent.Component(\"auth\" /* _ComponentName.AUTH */, (container, {\n      options: deps\n    }) => {\n      const app = container.getProvider('app').getImmediate();\n      const heartbeatServiceProvider = container.getProvider('heartbeat');\n      const appCheckServiceProvider = container.getProvider('app-check-internal');\n      const {\n        apiKey,\n        authDomain\n      } = app.options;\n      _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n        appName: app.name\n      });\n      const config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n        tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n        apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n    /**\n     * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n     * For why we do this, See go/firebase-next-auth-init\n     */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n    /**\n     * Because all firebase products that depend on auth depend on auth-internal directly,\n     * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n     */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n      const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n      authInternalProvider.initialize();\n    }));\n    (0, _firebaseApp._registerComponent)(new _firebaseComponent.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n      const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n      return (auth => new AuthInterop(auth))(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n    (0, _firebaseApp.registerVersion)(name, version, getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    (0, _firebaseApp.registerVersion)(name, version, 'esm2020');\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Initialize the fetch polyfill, the types are slightly off so just cast and hope for the best\n  FetchProvider.initialize(fetch, Headers, Response);\n  // First, we set up the various platform-specific features for Node (register\n  // the version and declare the Node getAuth function)\n  function getAuth(app = (0, _firebaseApp.getApp)()) {\n    const provider = (0, _firebaseApp._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      return provider.getImmediate();\n    }\n    const auth = initializeAuth(app);\n    const authEmulatorHost = (0, _firebaseUtil.getDefaultEmulatorHost)('auth');\n    if (authEmulatorHost) {\n      connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n    }\n    return auth;\n  }\n  registerAuth(\"Node\" /* ClientPlatform.NODE */);\n  // The rest of this file contains no-ops and errors for browser-specific\n  // methods. We keep the browser and Node entry points the same, but features\n  // that only work in browsers are set to either do nothing (setPersistence) or\n  // to reject with an auth/operation-not-supported-in-this-environment error.\n  // The below exports are pulled into the main entry point by a rollup alias\n  // plugin (overwriting the default browser imports).\n  /** auth/operation-not-supported-in-this-environment */\n  const NOT_AVAILABLE_ERROR = _createError(\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n  /** Reject with auth/operation-not-supported-in-this-environment */\n  async function fail() {\n    throw NOT_AVAILABLE_ERROR;\n  }\n  /**\n   * A class which will throw with\n   * auth/operation-not-supported-in-this-environment if instantiated\n   */\n  class FailClass {\n    constructor() {\n      throw NOT_AVAILABLE_ERROR;\n    }\n  }\n  const browserLocalPersistence = inMemoryPersistence;\n  const browserSessionPersistence = inMemoryPersistence;\n  const browserCookiePersistence = inMemoryPersistence;\n  const indexedDBLocalPersistence = inMemoryPersistence;\n  const browserPopupRedirectResolver = NOT_AVAILABLE_ERROR;\n  const PhoneAuthProvider = FailClass;\n  const signInWithPhoneNumber = fail;\n  const linkWithPhoneNumber = fail;\n  const reauthenticateWithPhoneNumber = fail;\n  const updatePhoneNumber = fail;\n  const signInWithPopup = fail;\n  const linkWithPopup = fail;\n  const reauthenticateWithPopup = fail;\n  const signInWithRedirect = fail;\n  const linkWithRedirect = fail;\n  const reauthenticateWithRedirect = fail;\n  const getRedirectResult = fail;\n  const RecaptchaVerifier = FailClass;\n  class PhoneMultiFactorGenerator {\n    static assertion() {\n      throw NOT_AVAILABLE_ERROR;\n    }\n  }\n  // Set persistence should no-op instead of fail. Changing the prototype will\n  // make sure both setPersistence(auth, persistence) and\n  // auth.setPersistence(persistence) are covered.\n  AuthImpl.prototype.setPersistence = async () => {};\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function finalizeSignInTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  class MultiFactorAssertionImpl {\n    constructor(factorId) {\n      this.factorId = factorId;\n    }\n    _process(auth, session, displayName) {\n      switch (session.type) {\n        case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n          return this._finalizeEnroll(auth, session.credential, displayName);\n        case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n          return this._finalizeSignIn(auth, session.credential);\n        default:\n          return debugFail('unexpected MultiFactorSessionType');\n      }\n    }\n  }\n\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * @public\n   */\n  class TotpMultiFactorGenerator {\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n     * the TOTP (time-based one-time password) second factor.\n     * This assertion is used to complete enrollment in TOTP second factor.\n     *\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorUser.enroll}.\n     */\n    static assertionForEnrollment(secret, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n    }\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n     * This assertion is used to complete signIn with TOTP as the second factor.\n     *\n     * @param enrollmentId identifies the enrolled TOTP second factor.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}.\n     */\n    static assertionForSignIn(enrollmentId, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n    }\n    /**\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\n     * Used for generating a QR code URL or inputting into a TOTP app.\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\n     *\n     * @param session The {@link MultiFactorSession} that the user is part of.\n     * @returns A promise to {@link TotpSecret}.\n     */\n    static async generateSecret(session) {\n      const mfaSession = session;\n      _assert(typeof mfaSession.user?.auth !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n        idToken: mfaSession.credential,\n        totpEnrollmentInfo: {}\n      });\n      return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n    }\n  }\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  TotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\n  class TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(otp, enrollmentId, secret) {\n      super(\"totp\" /* FactorId.TOTP */);\n      this.otp = otp;\n      this.enrollmentId = enrollmentId;\n      this.secret = secret;\n    }\n    /** @internal */\n    static _fromSecret(secret, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n    }\n    /** @internal */\n    static _fromEnrollmentId(enrollmentId, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n    }\n    /** @internal */\n    async _finalizeEnroll(auth, idToken, displayName) {\n      _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return finalizeEnrollTotpMfa(auth, {\n        idToken,\n        displayName,\n        totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n      });\n    }\n    /** @internal */\n    async _finalizeSignIn(auth, mfaPendingCredential) {\n      _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      const totpVerificationInfo = {\n        verificationCode: this.otp\n      };\n      return finalizeSignInTotpMfa(auth, {\n        mfaPendingCredential,\n        mfaEnrollmentId: this.enrollmentId,\n        totpVerificationInfo\n      });\n    }\n  }\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * Stores the shared secret key and other parameters to generate time-based OTPs.\n   * Implements methods to retrieve the shared secret key and generate a QR code URL.\n   * @public\n   */\n  class TotpSecret {\n    // The public members are declared outside the constructor so the docs can be generated.\n    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n      this.sessionInfo = sessionInfo;\n      this.auth = auth;\n      this.secretKey = secretKey;\n      this.hashingAlgorithm = hashingAlgorithm;\n      this.codeLength = codeLength;\n      this.codeIntervalSeconds = codeIntervalSeconds;\n      this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    /** @internal */\n    static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n      return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n    }\n    /** @internal */\n    _makeTotpVerificationInfo(otp) {\n      return {\n        sessionInfo: this.sessionInfo,\n        verificationCode: otp\n      };\n    }\n    /**\n     * Returns a QR code URL as described in\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n     *\n     * @param accountName the name of the account/app along with a user identifier.\n     * @param issuer issuer of the TOTP (likely the app name).\n     * @returns A QR code URL string.\n     */\n    generateQrCodeUrl(accountName, issuer) {\n      let useDefaults = false;\n      if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n        useDefaults = true;\n      }\n      if (useDefaults) {\n        if (_isEmptyString(accountName)) {\n          accountName = this.auth.currentUser?.email || 'unknownuser';\n        }\n        if (_isEmptyString(issuer)) {\n          issuer = this.auth.name;\n        }\n      }\n      return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n    }\n  }\n  /** @internal */\n  function _isEmptyString(input) {\n    return typeof input === 'undefined' || input?.length === 0;\n  }\n});","lineCount":8183,"map":[[7,2,7579,0,"Object"],[7,8,7579,0],[7,9,7579,0,"defineProperty"],[7,23,7579,0],[7,24,7579,0,"exports"],[7,31,7579,0],[8,4,7579,0,"enumerable"],[8,14,7579,0],[9,4,7579,0,"get"],[9,7,7579,0],[9,18,7579,0,"get"],[9,19,7579,0],[10,6,7579,0],[10,13,7579,9,"SAMLAuthProvider"],[10,29,7579,25],[11,4,7579,25],[12,2,7579,25],[13,2,7579,0,"Object"],[13,8,7579,0],[13,9,7579,0,"defineProperty"],[13,23,7579,0],[13,24,7579,0,"exports"],[13,31,7579,0],[14,4,7579,0,"enumerable"],[14,14,7579,0],[15,4,7579,0,"get"],[15,7,7579,0],[15,18,7579,0,"get"],[15,19,7579,0],[16,6,7579,0],[16,13,7579,32,"ActionCodeOperation"],[16,32,7579,51],[17,4,7579,51],[18,2,7579,51],[19,2,7579,0,"Object"],[19,8,7579,0],[19,9,7579,0,"defineProperty"],[19,23,7579,0],[19,24,7579,0,"exports"],[19,31,7579,0],[20,4,7579,0,"enumerable"],[20,14,7579,0],[21,4,7579,0,"get"],[21,7,7579,0],[21,18,7579,0,"get"],[21,19,7579,0],[22,6,7579,0],[22,13,7579,58,"useDeviceLanguage"],[22,30,7579,75],[23,4,7579,75],[24,2,7579,75],[25,2,7579,0,"Object"],[25,8,7579,0],[25,9,7579,0,"defineProperty"],[25,23,7579,0],[25,24,7579,0,"exports"],[25,31,7579,0],[26,4,7579,0,"enumerable"],[26,14,7579,0],[27,4,7579,0,"get"],[27,7,7579,0],[27,18,7579,0,"get"],[27,19,7579,0],[28,6,7579,0],[28,13,7579,82,"updateCurrentUser"],[28,30,7579,99],[29,4,7579,99],[30,2,7579,99],[31,2,7579,0,"Object"],[31,8,7579,0],[31,9,7579,0,"defineProperty"],[31,23,7579,0],[31,24,7579,0,"exports"],[31,31,7579,0],[32,4,7579,0,"enumerable"],[32,14,7579,0],[33,4,7579,0,"get"],[33,7,7579,0],[33,18,7579,0,"get"],[33,19,7579,0],[34,6,7579,0],[34,13,7579,106,"signOut"],[34,20,7579,113],[35,4,7579,113],[36,2,7579,113],[37,2,7579,0,"Object"],[37,8,7579,0],[37,9,7579,0,"defineProperty"],[37,23,7579,0],[37,24,7579,0,"exports"],[37,31,7579,0],[38,4,7579,0,"enumerable"],[38,14,7579,0],[39,4,7579,0,"get"],[39,7,7579,0],[39,18,7579,0,"get"],[39,19,7579,0],[40,6,7579,0],[40,13,7579,120,"revokeAccessToken"],[40,30,7579,137],[41,4,7579,137],[42,2,7579,137],[43,2,7579,0,"Object"],[43,8,7579,0],[43,9,7579,0,"defineProperty"],[43,23,7579,0],[43,24,7579,0,"exports"],[43,31,7579,0],[44,4,7579,0,"enumerable"],[44,14,7579,0],[45,4,7579,0,"get"],[45,7,7579,0],[45,18,7579,0,"get"],[45,19,7579,0],[46,6,7579,0],[46,13,7579,144,"FactorId"],[46,21,7579,152],[47,4,7579,152],[48,2,7579,152],[49,2,7579,0,"Object"],[49,8,7579,0],[49,9,7579,0,"defineProperty"],[49,23,7579,0],[49,24,7579,0,"exports"],[49,31,7579,0],[50,4,7579,0,"enumerable"],[50,14,7579,0],[51,4,7579,0,"get"],[51,7,7579,0],[51,18,7579,0,"get"],[51,19,7579,0],[52,6,7579,0],[52,13,7579,159,"deleteUser"],[52,23,7579,169],[53,4,7579,169],[54,2,7579,169],[55,2,7579,0,"Object"],[55,8,7579,0],[55,9,7579,0,"defineProperty"],[55,23,7579,0],[55,24,7579,0,"exports"],[55,31,7579,0],[56,4,7579,0,"enumerable"],[56,14,7579,0],[57,4,7579,0,"get"],[57,7,7579,0],[57,18,7579,0,"get"],[57,19,7579,0],[58,6,7579,0],[58,13,7579,176,"debugErrorMap"],[58,26,7579,189],[59,4,7579,189],[60,2,7579,189],[61,2,7579,0,"Object"],[61,8,7579,0],[61,9,7579,0,"defineProperty"],[61,23,7579,0],[61,24,7579,0,"exports"],[61,31,7579,0],[62,4,7579,0,"enumerable"],[62,14,7579,0],[63,4,7579,0,"get"],[63,7,7579,0],[63,18,7579,0,"get"],[63,19,7579,0],[64,6,7579,0],[64,13,7579,196,"prodErrorMap"],[64,25,7579,208],[65,4,7579,208],[66,2,7579,208],[67,2,7579,0,"Object"],[67,8,7579,0],[67,9,7579,0,"defineProperty"],[67,23,7579,0],[67,24,7579,0,"exports"],[67,31,7579,0],[68,4,7579,0,"enumerable"],[68,14,7579,0],[69,4,7579,0,"get"],[69,7,7579,0],[69,18,7579,0,"get"],[69,19,7579,0],[70,6,7579,0],[70,13,7579,215,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[70,55,7579,257],[71,4,7579,257],[72,2,7579,257],[73,2,7579,0,"Object"],[73,8,7579,0],[73,9,7579,0,"defineProperty"],[73,23,7579,0],[73,24,7579,0,"exports"],[73,31,7579,0],[74,4,7579,0,"enumerable"],[74,14,7579,0],[75,4,7579,0,"get"],[75,7,7579,0],[75,18,7579,0,"get"],[75,19,7579,0],[76,6,7579,0],[76,13,7579,264,"initializeAuth"],[76,27,7579,278],[77,4,7579,278],[78,2,7579,278],[79,2,7579,0,"Object"],[79,8,7579,0],[79,9,7579,0,"defineProperty"],[79,23,7579,0],[79,24,7579,0,"exports"],[79,31,7579,0],[80,4,7579,0,"enumerable"],[80,14,7579,0],[81,4,7579,0,"get"],[81,7,7579,0],[81,18,7579,0,"get"],[81,19,7579,0],[82,6,7579,0],[82,13,7579,285,"connectAuthEmulator"],[82,32,7579,304],[83,4,7579,304],[84,2,7579,304],[85,2,7579,0,"Object"],[85,8,7579,0],[85,9,7579,0,"defineProperty"],[85,23,7579,0],[85,24,7579,0,"exports"],[85,31,7579,0],[86,4,7579,0,"enumerable"],[86,14,7579,0],[87,4,7579,0,"get"],[87,7,7579,0],[87,18,7579,0,"get"],[87,19,7579,0],[88,6,7579,0],[88,13,7579,311,"AuthCredential"],[88,27,7579,325],[89,4,7579,325],[90,2,7579,325],[91,2,7579,0,"Object"],[91,8,7579,0],[91,9,7579,0,"defineProperty"],[91,23,7579,0],[91,24,7579,0,"exports"],[91,31,7579,0],[92,4,7579,0,"enumerable"],[92,14,7579,0],[93,4,7579,0,"get"],[93,7,7579,0],[93,18,7579,0,"get"],[93,19,7579,0],[94,6,7579,0],[94,13,7579,332,"EmailAuthCredential"],[94,32,7579,351],[95,4,7579,351],[96,2,7579,351],[97,2,7579,0,"Object"],[97,8,7579,0],[97,9,7579,0,"defineProperty"],[97,23,7579,0],[97,24,7579,0,"exports"],[97,31,7579,0],[98,4,7579,0,"enumerable"],[98,14,7579,0],[99,4,7579,0,"get"],[99,7,7579,0],[99,18,7579,0,"get"],[99,19,7579,0],[100,6,7579,0],[100,13,7579,358,"OperationType"],[100,26,7579,371],[101,4,7579,371],[102,2,7579,371],[103,2,7579,0,"Object"],[103,8,7579,0],[103,9,7579,0,"defineProperty"],[103,23,7579,0],[103,24,7579,0,"exports"],[103,31,7579,0],[104,4,7579,0,"enumerable"],[104,14,7579,0],[105,4,7579,0,"get"],[105,7,7579,0],[105,18,7579,0,"get"],[105,19,7579,0],[106,6,7579,0],[106,13,7579,378,"PhoneAuthProvider"],[106,30,7579,395],[107,4,7579,395],[108,2,7579,395],[109,2,7579,0,"Object"],[109,8,7579,0],[109,9,7579,0,"defineProperty"],[109,23,7579,0],[109,24,7579,0,"exports"],[109,31,7579,0],[110,4,7579,0,"enumerable"],[110,14,7579,0],[111,4,7579,0,"get"],[111,7,7579,0],[111,18,7579,0,"get"],[111,19,7579,0],[112,6,7579,0],[112,13,7579,402,"OAuthCredential"],[112,28,7579,417],[113,4,7579,417],[114,2,7579,417],[115,2,7579,0,"Object"],[115,8,7579,0],[115,9,7579,0,"defineProperty"],[115,23,7579,0],[115,24,7579,0,"exports"],[115,31,7579,0],[116,4,7579,0,"enumerable"],[116,14,7579,0],[117,4,7579,0,"get"],[117,7,7579,0],[117,18,7579,0,"get"],[117,19,7579,0],[118,6,7579,0],[118,13,7579,424,"RecaptchaVerifier"],[118,30,7579,441],[119,4,7579,441],[120,2,7579,441],[121,2,7579,0,"Object"],[121,8,7579,0],[121,9,7579,0,"defineProperty"],[121,23,7579,0],[121,24,7579,0,"exports"],[121,31,7579,0],[122,4,7579,0,"enumerable"],[122,14,7579,0],[123,4,7579,0,"get"],[123,7,7579,0],[123,18,7579,0,"get"],[123,19,7579,0],[124,6,7579,0],[124,13,7579,448,"SignInMethod"],[124,25,7579,460],[125,4,7579,460],[126,2,7579,460],[127,2,7579,0,"Object"],[127,8,7579,0],[127,9,7579,0,"defineProperty"],[127,23,7579,0],[127,24,7579,0,"exports"],[127,31,7579,0],[128,4,7579,0,"enumerable"],[128,14,7579,0],[129,4,7579,0,"get"],[129,7,7579,0],[129,18,7579,0,"get"],[129,19,7579,0],[130,6,7579,0],[130,13,7579,467,"TotpMultiFactorGenerator"],[130,37,7579,491],[131,4,7579,491],[132,2,7579,491],[133,2,7579,0,"Object"],[133,8,7579,0],[133,9,7579,0,"defineProperty"],[133,23,7579,0],[133,24,7579,0,"exports"],[133,31,7579,0],[134,4,7579,0,"enumerable"],[134,14,7579,0],[135,4,7579,0,"get"],[135,7,7579,0],[135,18,7579,0,"get"],[135,19,7579,0],[136,6,7579,0],[136,13,7579,498,"PhoneAuthCredential"],[136,32,7579,517],[137,4,7579,517],[138,2,7579,517],[139,2,7579,0,"Object"],[139,8,7579,0],[139,9,7579,0,"defineProperty"],[139,23,7579,0],[139,24,7579,0,"exports"],[139,31,7579,0],[140,4,7579,0,"enumerable"],[140,14,7579,0],[141,4,7579,0,"get"],[141,7,7579,0],[141,18,7579,0,"get"],[141,19,7579,0],[142,6,7579,0],[142,13,7579,524,"inMemoryPersistence"],[142,32,7579,543],[143,4,7579,543],[144,2,7579,543],[145,2,7579,0,"Object"],[145,8,7579,0],[145,9,7579,0,"defineProperty"],[145,23,7579,0],[145,24,7579,0,"exports"],[145,31,7579,0],[146,4,7579,0,"enumerable"],[146,14,7579,0],[147,4,7579,0,"get"],[147,7,7579,0],[147,18,7579,0,"get"],[147,19,7579,0],[148,6,7579,0],[148,13,7579,550,"EmailAuthProvider"],[148,30,7579,567],[149,4,7579,567],[150,2,7579,567],[151,2,7579,0,"Object"],[151,8,7579,0],[151,9,7579,0,"defineProperty"],[151,23,7579,0],[151,24,7579,0,"exports"],[151,31,7579,0],[152,4,7579,0,"enumerable"],[152,14,7579,0],[153,4,7579,0,"get"],[153,7,7579,0],[153,18,7579,0,"get"],[153,19,7579,0],[154,6,7579,0],[154,13,7579,574,"FacebookAuthProvider"],[154,33,7579,594],[155,4,7579,594],[156,2,7579,594],[157,2,7579,0,"Object"],[157,8,7579,0],[157,9,7579,0,"defineProperty"],[157,23,7579,0],[157,24,7579,0,"exports"],[157,31,7579,0],[158,4,7579,0,"enumerable"],[158,14,7579,0],[159,4,7579,0,"get"],[159,7,7579,0],[159,18,7579,0,"get"],[159,19,7579,0],[160,6,7579,0],[160,13,7579,601,"GoogleAuthProvider"],[160,31,7579,619],[161,4,7579,619],[162,2,7579,619],[163,2,7579,0,"Object"],[163,8,7579,0],[163,9,7579,0,"defineProperty"],[163,23,7579,0],[163,24,7579,0,"exports"],[163,31,7579,0],[164,4,7579,0,"enumerable"],[164,14,7579,0],[165,4,7579,0,"get"],[165,7,7579,0],[165,18,7579,0,"get"],[165,19,7579,0],[166,6,7579,0],[166,13,7579,626,"GithubAuthProvider"],[166,31,7579,644],[167,4,7579,644],[168,2,7579,644],[169,2,7579,0,"Object"],[169,8,7579,0],[169,9,7579,0,"defineProperty"],[169,23,7579,0],[169,24,7579,0,"exports"],[169,31,7579,0],[170,4,7579,0,"enumerable"],[170,14,7579,0],[171,4,7579,0,"get"],[171,7,7579,0],[171,18,7579,0,"get"],[171,19,7579,0],[172,6,7579,0],[172,13,7579,651,"OAuthProvider"],[172,26,7579,664],[173,4,7579,664],[174,2,7579,664],[175,2,7579,0,"Object"],[175,8,7579,0],[175,9,7579,0,"defineProperty"],[175,23,7579,0],[175,24,7579,0,"exports"],[175,31,7579,0],[176,4,7579,0,"enumerable"],[176,14,7579,0],[177,4,7579,0,"get"],[177,7,7579,0],[177,18,7579,0,"get"],[177,19,7579,0],[178,6,7579,0],[178,13,7579,671,"browserCookiePersistence"],[178,37,7579,695],[179,4,7579,695],[180,2,7579,695],[181,2,7579,0,"Object"],[181,8,7579,0],[181,9,7579,0,"defineProperty"],[181,23,7579,0],[181,24,7579,0,"exports"],[181,31,7579,0],[182,4,7579,0,"enumerable"],[182,14,7579,0],[183,4,7579,0,"get"],[183,7,7579,0],[183,18,7579,0,"get"],[183,19,7579,0],[184,6,7579,0],[184,13,7579,702,"TwitterAuthProvider"],[184,32,7579,721],[185,4,7579,721],[186,2,7579,721],[187,2,7579,0,"Object"],[187,8,7579,0],[187,9,7579,0,"defineProperty"],[187,23,7579,0],[187,24,7579,0,"exports"],[187,31,7579,0],[188,4,7579,0,"enumerable"],[188,14,7579,0],[189,4,7579,0,"get"],[189,7,7579,0],[189,18,7579,0,"get"],[189,19,7579,0],[190,6,7579,0],[190,13,7579,729,"signInAnonymously"],[190,30,7579,746],[191,4,7579,746],[192,2,7579,746],[193,2,7579,0,"Object"],[193,8,7579,0],[193,9,7579,0,"defineProperty"],[193,23,7579,0],[193,24,7579,0,"exports"],[193,31,7579,0],[194,4,7579,0,"enumerable"],[194,14,7579,0],[195,4,7579,0,"get"],[195,7,7579,0],[195,18,7579,0,"get"],[195,19,7579,0],[196,6,7579,0],[196,13,7579,754,"signInWithCredential"],[196,33,7579,774],[197,4,7579,774],[198,2,7579,774],[199,2,7579,0,"Object"],[199,8,7579,0],[199,9,7579,0,"defineProperty"],[199,23,7579,0],[199,24,7579,0,"exports"],[199,31,7579,0],[200,4,7579,0,"enumerable"],[200,14,7579,0],[201,4,7579,0,"get"],[201,7,7579,0],[201,18,7579,0,"get"],[201,19,7579,0],[202,6,7579,0],[202,13,7579,782,"linkWithCredential"],[202,31,7579,800],[203,4,7579,800],[204,2,7579,800],[205,2,7579,0,"Object"],[205,8,7579,0],[205,9,7579,0,"defineProperty"],[205,23,7579,0],[205,24,7579,0,"exports"],[205,31,7579,0],[206,4,7579,0,"enumerable"],[206,14,7579,0],[207,4,7579,0,"get"],[207,7,7579,0],[207,18,7579,0,"get"],[207,19,7579,0],[208,6,7579,0],[208,13,7579,808,"reauthenticateWithCredential"],[208,41,7579,836],[209,4,7579,836],[210,2,7579,836],[211,2,7579,0,"Object"],[211,8,7579,0],[211,9,7579,0,"defineProperty"],[211,23,7579,0],[211,24,7579,0,"exports"],[211,31,7579,0],[212,4,7579,0,"enumerable"],[212,14,7579,0],[213,4,7579,0,"get"],[213,7,7579,0],[213,18,7579,0,"get"],[213,19,7579,0],[214,6,7579,0],[214,13,7579,844,"signInWithCustomToken"],[214,34,7579,865],[215,4,7579,865],[216,2,7579,865],[217,2,7579,0,"Object"],[217,8,7579,0],[217,9,7579,0,"defineProperty"],[217,23,7579,0],[217,24,7579,0,"exports"],[217,31,7579,0],[218,4,7579,0,"enumerable"],[218,14,7579,0],[219,4,7579,0,"get"],[219,7,7579,0],[219,18,7579,0,"get"],[219,19,7579,0],[220,6,7579,0],[220,13,7579,873,"sendPasswordResetEmail"],[220,35,7579,895],[221,4,7579,895],[222,2,7579,895],[223,2,7579,0,"Object"],[223,8,7579,0],[223,9,7579,0,"defineProperty"],[223,23,7579,0],[223,24,7579,0,"exports"],[223,31,7579,0],[224,4,7579,0,"enumerable"],[224,14,7579,0],[225,4,7579,0,"get"],[225,7,7579,0],[225,18,7579,0,"get"],[225,19,7579,0],[226,6,7579,0],[226,13,7579,903,"confirmPasswordReset"],[226,33,7579,923],[227,4,7579,923],[228,2,7579,923],[229,2,7579,0,"Object"],[229,8,7579,0],[229,9,7579,0,"defineProperty"],[229,23,7579,0],[229,24,7579,0,"exports"],[229,31,7579,0],[230,4,7579,0,"enumerable"],[230,14,7579,0],[231,4,7579,0,"get"],[231,7,7579,0],[231,18,7579,0,"get"],[231,19,7579,0],[232,6,7579,0],[232,13,7579,931,"applyActionCode"],[232,28,7579,946],[233,4,7579,946],[234,2,7579,946],[235,2,7579,0,"Object"],[235,8,7579,0],[235,9,7579,0,"defineProperty"],[235,23,7579,0],[235,24,7579,0,"exports"],[235,31,7579,0],[236,4,7579,0,"enumerable"],[236,14,7579,0],[237,4,7579,0,"get"],[237,7,7579,0],[237,18,7579,0,"get"],[237,19,7579,0],[238,6,7579,0],[238,13,7579,954,"checkActionCode"],[238,28,7579,969],[239,4,7579,969],[240,2,7579,969],[241,2,7579,0,"Object"],[241,8,7579,0],[241,9,7579,0,"defineProperty"],[241,23,7579,0],[241,24,7579,0,"exports"],[241,31,7579,0],[242,4,7579,0,"enumerable"],[242,14,7579,0],[243,4,7579,0,"get"],[243,7,7579,0],[243,18,7579,0,"get"],[243,19,7579,0],[244,6,7579,0],[244,13,7579,977,"signInWithIdp"],[244,26,7579,990],[245,4,7579,990],[246,2,7579,990],[247,2,7579,0,"Object"],[247,8,7579,0],[247,9,7579,0,"defineProperty"],[247,23,7579,0],[247,24,7579,0,"exports"],[247,31,7579,0],[248,4,7579,0,"enumerable"],[248,14,7579,0],[249,4,7579,0,"get"],[249,7,7579,0],[249,18,7579,0,"get"],[249,19,7579,0],[250,6,7579,0],[250,13,7579,998,"_fail"],[250,18,7579,1003],[251,4,7579,1003],[252,2,7579,1003],[253,2,7579,0,"Object"],[253,8,7579,0],[253,9,7579,0,"defineProperty"],[253,23,7579,0],[253,24,7579,0,"exports"],[253,31,7579,0],[254,4,7579,0,"enumerable"],[254,14,7579,0],[255,4,7579,0,"get"],[255,7,7579,0],[255,18,7579,0,"get"],[255,19,7579,0],[256,6,7579,0],[256,13,7579,1011,"debugAssert"],[256,24,7579,1022],[257,4,7579,1022],[258,2,7579,1022],[259,2,7579,0,"Object"],[259,8,7579,0],[259,9,7579,0,"defineProperty"],[259,23,7579,0],[259,24,7579,0,"exports"],[259,31,7579,0],[260,4,7579,0,"enumerable"],[260,14,7579,0],[261,4,7579,0,"get"],[261,7,7579,0],[261,18,7579,0,"get"],[261,19,7579,0],[262,6,7579,0],[262,13,7579,1030,"_persistenceKeyName"],[262,32,7579,1049],[263,4,7579,1049],[264,2,7579,1049],[265,2,7579,0,"Object"],[265,8,7579,0],[265,9,7579,0,"defineProperty"],[265,23,7579,0],[265,24,7579,0,"exports"],[265,31,7579,0],[266,4,7579,0,"enumerable"],[266,14,7579,0],[267,4,7579,0,"get"],[267,7,7579,0],[267,18,7579,0,"get"],[267,19,7579,0],[268,6,7579,0],[268,13,7579,1057,"_serverAppCurrentUserOperationNotSupportedError"],[268,60,7579,1104],[269,4,7579,1104],[270,2,7579,1104],[271,2,7579,0,"Object"],[271,8,7579,0],[271,9,7579,0,"defineProperty"],[271,23,7579,0],[271,24,7579,0,"exports"],[271,31,7579,0],[272,4,7579,0,"enumerable"],[272,14,7579,0],[273,4,7579,0,"get"],[273,7,7579,0],[273,18,7579,0,"get"],[273,19,7579,0],[274,6,7579,0],[274,13,7579,1112,"_castAuth"],[274,22,7579,1121],[275,4,7579,1121],[276,2,7579,1121],[277,2,7579,0,"Object"],[277,8,7579,0],[277,9,7579,0,"defineProperty"],[277,23,7579,0],[277,24,7579,0,"exports"],[277,31,7579,0],[278,4,7579,0,"enumerable"],[278,14,7579,0],[279,4,7579,0,"get"],[279,7,7579,0],[279,18,7579,0,"get"],[279,19,7579,0],[280,6,7579,0],[280,13,7579,1129,"FederatedAuthProvider"],[280,34,7579,1150],[281,4,7579,1150],[282,2,7579,1150],[283,2,7579,0,"Object"],[283,8,7579,0],[283,9,7579,0,"defineProperty"],[283,23,7579,0],[283,24,7579,0,"exports"],[283,31,7579,0],[284,4,7579,0,"enumerable"],[284,14,7579,0],[285,4,7579,0,"get"],[285,7,7579,0],[285,18,7579,0,"get"],[285,19,7579,0],[286,6,7579,0],[286,13,7579,1158,"BaseOAuthProvider"],[286,30,7579,1175],[287,4,7579,1175],[288,2,7579,1175],[289,2,7579,0,"Object"],[289,8,7579,0],[289,9,7579,0,"defineProperty"],[289,23,7579,0],[289,24,7579,0,"exports"],[289,31,7579,0],[290,4,7579,0,"enumerable"],[290,14,7579,0],[291,4,7579,0,"get"],[291,7,7579,0],[291,18,7579,0,"get"],[291,19,7579,0],[292,6,7579,0],[292,13,7579,1183,"_emulatorUrl"],[292,25,7579,1195],[293,4,7579,1195],[294,2,7579,1195],[295,2,7579,0,"Object"],[295,8,7579,0],[295,9,7579,0,"defineProperty"],[295,23,7579,0],[295,24,7579,0,"exports"],[295,31,7579,0],[296,4,7579,0,"enumerable"],[296,14,7579,0],[297,4,7579,0,"get"],[297,7,7579,0],[297,18,7579,0,"get"],[297,19,7579,0],[298,6,7579,0],[298,13,7579,1203,"_performApiRequest"],[298,31,7579,1221],[299,4,7579,1221],[300,2,7579,1221],[301,2,7579,0,"Object"],[301,8,7579,0],[301,9,7579,0,"defineProperty"],[301,23,7579,0],[301,24,7579,0,"exports"],[301,31,7579,0],[302,4,7579,0,"enumerable"],[302,14,7579,0],[303,4,7579,0,"get"],[303,7,7579,0],[303,18,7579,0,"get"],[303,19,7579,0],[304,6,7579,0],[304,13,7579,1229,"_isIOS"],[304,19,7579,1235],[305,4,7579,1235],[306,2,7579,1235],[307,2,7579,0,"Object"],[307,8,7579,0],[307,9,7579,0,"defineProperty"],[307,23,7579,0],[307,24,7579,0,"exports"],[307,31,7579,0],[308,4,7579,0,"enumerable"],[308,14,7579,0],[309,4,7579,0,"get"],[309,7,7579,0],[309,18,7579,0,"get"],[309,19,7579,0],[310,6,7579,0],[310,13,7579,1243,"_isAndroid"],[310,23,7579,1253],[311,4,7579,1253],[312,2,7579,1253],[313,2,7579,0,"Object"],[313,8,7579,0],[313,9,7579,0,"defineProperty"],[313,23,7579,0],[313,24,7579,0,"exports"],[313,31,7579,0],[314,4,7579,0,"enumerable"],[314,14,7579,0],[315,4,7579,0,"get"],[315,7,7579,0],[315,18,7579,0,"get"],[315,19,7579,0],[316,6,7579,0],[316,13,7579,1261,"_isIOS7Or8"],[316,23,7579,1271],[317,4,7579,1271],[318,2,7579,1271],[319,2,7579,0,"Object"],[319,8,7579,0],[319,9,7579,0,"defineProperty"],[319,23,7579,0],[319,24,7579,0,"exports"],[319,31,7579,0],[320,4,7579,0,"enumerable"],[320,14,7579,0],[321,4,7579,0,"get"],[321,7,7579,0],[321,18,7579,0,"get"],[321,19,7579,0],[322,6,7579,0],[322,13,7579,1279,"_createError"],[322,25,7579,1291],[323,4,7579,1291],[324,2,7579,1291],[325,2,7579,0,"Object"],[325,8,7579,0],[325,9,7579,0,"defineProperty"],[325,23,7579,0],[325,24,7579,0,"exports"],[325,31,7579,0],[326,4,7579,0,"enumerable"],[326,14,7579,0],[327,4,7579,0,"get"],[327,7,7579,0],[327,18,7579,0,"get"],[327,19,7579,0],[328,6,7579,0],[328,13,7579,1299,"_isMobileBrowser"],[328,29,7579,1315],[329,4,7579,1315],[330,2,7579,1315],[331,2,7579,0,"Object"],[331,8,7579,0],[331,9,7579,0,"defineProperty"],[331,23,7579,0],[331,24,7579,0,"exports"],[331,31,7579,0],[332,4,7579,0,"enumerable"],[332,14,7579,0],[333,4,7579,0,"get"],[333,7,7579,0],[333,18,7579,0,"get"],[333,19,7579,0],[334,6,7579,0],[334,13,7579,1323,"_isIE10"],[334,20,7579,1330],[335,4,7579,1330],[336,2,7579,1330],[337,2,7579,0,"Object"],[337,8,7579,0],[337,9,7579,0,"defineProperty"],[337,23,7579,0],[337,24,7579,0,"exports"],[337,31,7579,0],[338,4,7579,0,"enumerable"],[338,14,7579,0],[339,4,7579,0,"get"],[339,7,7579,0],[339,18,7579,0,"get"],[339,19,7579,0],[340,6,7579,0],[340,13,7579,1338,"UserImpl"],[340,21,7579,1346],[341,4,7579,1346],[342,2,7579,1346],[343,2,7579,0,"Object"],[343,8,7579,0],[343,9,7579,0,"defineProperty"],[343,23,7579,0],[343,24,7579,0,"exports"],[343,31,7579,0],[344,4,7579,0,"enumerable"],[344,14,7579,0],[345,4,7579,0,"get"],[345,7,7579,0],[345,18,7579,0,"get"],[345,19,7579,0],[346,6,7579,0],[346,13,7579,1354,"AuthImpl"],[346,21,7579,1362],[347,4,7579,1362],[348,2,7579,1362],[349,2,7579,0,"Object"],[349,8,7579,0],[349,9,7579,0,"defineProperty"],[349,23,7579,0],[349,24,7579,0,"exports"],[349,31,7579,0],[350,4,7579,0,"enumerable"],[350,14,7579,0],[351,4,7579,0,"get"],[351,7,7579,0],[351,18,7579,0,"get"],[351,19,7579,0],[352,6,7579,0],[352,13,7579,1370,"_getClientVersion"],[352,30,7579,1387],[353,4,7579,1387],[354,2,7579,1387],[355,2,7579,0,"Object"],[355,8,7579,0],[355,9,7579,0,"defineProperty"],[355,23,7579,0],[355,24,7579,0,"exports"],[355,31,7579,0],[356,4,7579,0,"enumerable"],[356,14,7579,0],[357,4,7579,0,"get"],[357,7,7579,0],[357,18,7579,0,"get"],[357,19,7579,0],[358,6,7579,0],[358,13,7579,1395,"FetchProvider"],[358,26,7579,1408],[359,4,7579,1408],[360,2,7579,1408],[361,2,7579,0,"Object"],[361,8,7579,0],[361,9,7579,0,"defineProperty"],[361,23,7579,0],[361,24,7579,0,"exports"],[361,31,7579,0],[362,4,7579,0,"enumerable"],[362,14,7579,0],[363,4,7579,0,"get"],[363,7,7579,0],[363,18,7579,0,"get"],[363,19,7579,0],[364,6,7579,0],[364,13,7579,1416,"SAMLAuthCredential"],[364,31,7579,1434],[365,4,7579,1434],[366,2,7579,1434],[367,2,7579,0,"Object"],[367,8,7579,0],[367,9,7579,0,"defineProperty"],[367,23,7579,0],[367,24,7579,0,"exports"],[367,31,7579,0],[368,4,7579,0,"enumerable"],[368,14,7579,0],[369,4,7579,0,"get"],[369,7,7579,0],[369,18,7579,0,"get"],[369,19,7579,0],[370,6,7579,0],[370,13,7579,1442,"verifyPasswordResetCode"],[370,36,7579,1465],[371,4,7579,1465],[372,2,7579,1465],[373,2,7579,0,"Object"],[373,8,7579,0],[373,9,7579,0,"defineProperty"],[373,23,7579,0],[373,24,7579,0,"exports"],[373,31,7579,0],[374,4,7579,0,"enumerable"],[374,14,7579,0],[375,4,7579,0,"get"],[375,7,7579,0],[375,18,7579,0,"get"],[375,19,7579,0],[376,6,7579,0],[376,13,7579,1473,"createUserWithEmailAndPassword"],[376,43,7579,1503],[377,4,7579,1503],[378,2,7579,1503],[379,2,7579,0,"Object"],[379,8,7579,0],[379,9,7579,0,"defineProperty"],[379,23,7579,0],[379,24,7579,0,"exports"],[379,31,7579,0],[380,4,7579,0,"enumerable"],[380,14,7579,0],[381,4,7579,0,"get"],[381,7,7579,0],[381,18,7579,0,"get"],[381,19,7579,0],[382,6,7579,0],[382,13,7579,1511,"signInWithEmailAndPassword"],[382,39,7579,1537],[383,4,7579,1537],[384,2,7579,1537],[385,2,7579,0,"Object"],[385,8,7579,0],[385,9,7579,0,"defineProperty"],[385,23,7579,0],[385,24,7579,0,"exports"],[385,31,7579,0],[386,4,7579,0,"enumerable"],[386,14,7579,0],[387,4,7579,0,"get"],[387,7,7579,0],[387,18,7579,0,"get"],[387,19,7579,0],[388,6,7579,0],[388,13,7579,1545,"sendSignInLinkToEmail"],[388,34,7579,1566],[389,4,7579,1566],[390,2,7579,1566],[391,2,7579,0,"Object"],[391,8,7579,0],[391,9,7579,0,"defineProperty"],[391,23,7579,0],[391,24,7579,0,"exports"],[391,31,7579,0],[392,4,7579,0,"enumerable"],[392,14,7579,0],[393,4,7579,0,"get"],[393,7,7579,0],[393,18,7579,0,"get"],[393,19,7579,0],[394,6,7579,0],[394,13,7579,1574,"isSignInWithEmailLink"],[394,34,7579,1595],[395,4,7579,1595],[396,2,7579,1595],[397,2,7579,0,"Object"],[397,8,7579,0],[397,9,7579,0,"defineProperty"],[397,23,7579,0],[397,24,7579,0,"exports"],[397,31,7579,0],[398,4,7579,0,"enumerable"],[398,14,7579,0],[399,4,7579,0,"get"],[399,7,7579,0],[399,18,7579,0,"get"],[399,19,7579,0],[400,6,7579,0],[400,13,7579,1603,"signInWithEmailLink"],[400,32,7579,1622],[401,4,7579,1622],[402,2,7579,1622],[403,2,7579,0,"Object"],[403,8,7579,0],[403,9,7579,0,"defineProperty"],[403,23,7579,0],[403,24,7579,0,"exports"],[403,31,7579,0],[404,4,7579,0,"enumerable"],[404,14,7579,0],[405,4,7579,0,"get"],[405,7,7579,0],[405,18,7579,0,"get"],[405,19,7579,0],[406,6,7579,0],[406,13,7579,1630,"fetchSignInMethodsForEmail"],[406,39,7579,1656],[407,4,7579,1656],[408,2,7579,1656],[409,2,7579,0,"Object"],[409,8,7579,0],[409,9,7579,0,"defineProperty"],[409,23,7579,0],[409,24,7579,0,"exports"],[409,31,7579,0],[410,4,7579,0,"enumerable"],[410,14,7579,0],[411,4,7579,0,"get"],[411,7,7579,0],[411,18,7579,0,"get"],[411,19,7579,0],[412,6,7579,0],[412,13,7579,1664,"sendEmailVerification"],[412,34,7579,1685],[413,4,7579,1685],[414,2,7579,1685],[415,2,7579,0,"Object"],[415,8,7579,0],[415,9,7579,0,"defineProperty"],[415,23,7579,0],[415,24,7579,0,"exports"],[415,31,7579,0],[416,4,7579,0,"enumerable"],[416,14,7579,0],[417,4,7579,0,"get"],[417,7,7579,0],[417,18,7579,0,"get"],[417,19,7579,0],[418,6,7579,0],[418,13,7579,1693,"verifyBeforeUpdateEmail"],[418,36,7579,1716],[419,4,7579,1716],[420,2,7579,1716],[421,2,7579,0,"Object"],[421,8,7579,0],[421,9,7579,0,"defineProperty"],[421,23,7579,0],[421,24,7579,0,"exports"],[421,31,7579,0],[422,4,7579,0,"enumerable"],[422,14,7579,0],[423,4,7579,0,"get"],[423,7,7579,0],[423,18,7579,0,"get"],[423,19,7579,0],[424,6,7579,0],[424,13,7579,1724,"ActionCodeURL"],[424,26,7579,1737],[425,4,7579,1737],[426,2,7579,1737],[427,2,7579,0,"Object"],[427,8,7579,0],[427,9,7579,0,"defineProperty"],[427,23,7579,0],[427,24,7579,0,"exports"],[427,31,7579,0],[428,4,7579,0,"enumerable"],[428,14,7579,0],[429,4,7579,0,"get"],[429,7,7579,0],[429,18,7579,0,"get"],[429,19,7579,0],[430,6,7579,0],[430,13,7579,1745,"parseActionCodeURL"],[430,31,7579,1763],[431,4,7579,1763],[432,2,7579,1763],[433,2,7579,0,"Object"],[433,8,7579,0],[433,9,7579,0,"defineProperty"],[433,23,7579,0],[433,24,7579,0,"exports"],[433,31,7579,0],[434,4,7579,0,"enumerable"],[434,14,7579,0],[435,4,7579,0,"get"],[435,7,7579,0],[435,18,7579,0,"get"],[435,19,7579,0],[436,6,7579,0],[436,13,7579,1771,"updateProfile"],[436,26,7579,1784],[437,4,7579,1784],[438,2,7579,1784],[439,2,7579,0,"Object"],[439,8,7579,0],[439,9,7579,0,"defineProperty"],[439,23,7579,0],[439,24,7579,0,"exports"],[439,31,7579,0],[440,4,7579,0,"enumerable"],[440,14,7579,0],[441,4,7579,0,"get"],[441,7,7579,0],[441,18,7579,0,"get"],[441,19,7579,0],[442,6,7579,0],[442,13,7579,1792,"updateEmail"],[442,24,7579,1803],[443,4,7579,1803],[444,2,7579,1803],[445,2,7579,0,"Object"],[445,8,7579,0],[445,9,7579,0,"defineProperty"],[445,23,7579,0],[445,24,7579,0,"exports"],[445,31,7579,0],[446,4,7579,0,"enumerable"],[446,14,7579,0],[447,4,7579,0,"get"],[447,7,7579,0],[447,18,7579,0,"get"],[447,19,7579,0],[448,6,7579,0],[448,13,7579,1811,"updatePassword"],[448,27,7579,1825],[449,4,7579,1825],[450,2,7579,1825],[451,2,7579,0,"Object"],[451,8,7579,0],[451,9,7579,0,"defineProperty"],[451,23,7579,0],[451,24,7579,0,"exports"],[451,31,7579,0],[452,4,7579,0,"enumerable"],[452,14,7579,0],[453,4,7579,0,"get"],[453,7,7579,0],[453,18,7579,0,"get"],[453,19,7579,0],[454,6,7579,0],[454,13,7579,1833,"getIdToken"],[454,23,7579,1843],[455,4,7579,1843],[456,2,7579,1843],[457,2,7579,0,"Object"],[457,8,7579,0],[457,9,7579,0,"defineProperty"],[457,23,7579,0],[457,24,7579,0,"exports"],[457,31,7579,0],[458,4,7579,0,"enumerable"],[458,14,7579,0],[459,4,7579,0,"get"],[459,7,7579,0],[459,18,7579,0,"get"],[459,19,7579,0],[460,6,7579,0],[460,13,7579,1851,"getIdTokenResult"],[460,29,7579,1867],[461,4,7579,1867],[462,2,7579,1867],[463,2,7579,0,"Object"],[463,8,7579,0],[463,9,7579,0,"defineProperty"],[463,23,7579,0],[463,24,7579,0,"exports"],[463,31,7579,0],[464,4,7579,0,"enumerable"],[464,14,7579,0],[465,4,7579,0,"get"],[465,7,7579,0],[465,18,7579,0,"get"],[465,19,7579,0],[466,6,7579,0],[466,13,7579,1875,"unlink"],[466,19,7579,1881],[467,4,7579,1881],[468,2,7579,1881],[469,2,7579,0,"Object"],[469,8,7579,0],[469,9,7579,0,"defineProperty"],[469,23,7579,0],[469,24,7579,0,"exports"],[469,31,7579,0],[470,4,7579,0,"enumerable"],[470,14,7579,0],[471,4,7579,0,"get"],[471,7,7579,0],[471,18,7579,0,"get"],[471,19,7579,0],[472,6,7579,0],[472,13,7579,1889,"getAdditionalUserInfo"],[472,34,7579,1910],[473,4,7579,1910],[474,2,7579,1910],[475,2,7579,0,"Object"],[475,8,7579,0],[475,9,7579,0,"defineProperty"],[475,23,7579,0],[475,24,7579,0,"exports"],[475,31,7579,0],[476,4,7579,0,"enumerable"],[476,14,7579,0],[477,4,7579,0,"get"],[477,7,7579,0],[477,18,7579,0,"get"],[477,19,7579,0],[478,6,7579,0],[478,13,7579,1918,"reload"],[478,19,7579,1924],[479,4,7579,1924],[480,2,7579,1924],[481,2,7579,0,"Object"],[481,8,7579,0],[481,9,7579,0,"defineProperty"],[481,23,7579,0],[481,24,7579,0,"exports"],[481,31,7579,0],[482,4,7579,0,"enumerable"],[482,14,7579,0],[483,4,7579,0,"get"],[483,7,7579,0],[483,18,7579,0,"get"],[483,19,7579,0],[484,6,7579,0],[484,13,7579,1932,"getMultiFactorResolver"],[484,35,7579,1954],[485,4,7579,1954],[486,2,7579,1954],[487,2,7579,0,"Object"],[487,8,7579,0],[487,9,7579,0,"defineProperty"],[487,23,7579,0],[487,24,7579,0,"exports"],[487,31,7579,0],[488,4,7579,0,"enumerable"],[488,14,7579,0],[489,4,7579,0,"get"],[489,7,7579,0],[489,18,7579,0,"get"],[489,19,7579,0],[490,6,7579,0],[490,13,7579,1962,"multiFactor"],[490,24,7579,1973],[491,4,7579,1973],[492,2,7579,1973],[493,2,7579,0,"Object"],[493,8,7579,0],[493,9,7579,0,"defineProperty"],[493,23,7579,0],[493,24,7579,0,"exports"],[493,31,7579,0],[494,4,7579,0,"enumerable"],[494,14,7579,0],[495,4,7579,0,"get"],[495,7,7579,0],[495,18,7579,0,"get"],[495,19,7579,0],[496,6,7579,0],[496,13,7579,1981,"_getInstance"],[496,25,7579,1993],[497,4,7579,1993],[498,2,7579,1993],[499,2,7579,0,"Object"],[499,8,7579,0],[499,9,7579,0,"defineProperty"],[499,23,7579,0],[499,24,7579,0,"exports"],[499,31,7579,0],[500,4,7579,0,"enumerable"],[500,14,7579,0],[501,4,7579,0,"get"],[501,7,7579,0],[501,18,7579,0,"get"],[501,19,7579,0],[502,6,7579,0],[502,13,7579,2001,"_assert"],[502,20,7579,2008],[503,4,7579,2008],[504,2,7579,2008],[505,2,7579,0,"Object"],[505,8,7579,0],[505,9,7579,0,"defineProperty"],[505,23,7579,0],[505,24,7579,0,"exports"],[505,31,7579,0],[506,4,7579,0,"enumerable"],[506,14,7579,0],[507,4,7579,0,"get"],[507,7,7579,0],[507,18,7579,0,"get"],[507,19,7579,0],[508,6,7579,0],[508,13,7579,2016,"_signInWithCredential"],[508,34,7579,2037],[509,4,7579,2037],[510,2,7579,2037],[511,2,7579,0,"Object"],[511,8,7579,0],[511,9,7579,0,"defineProperty"],[511,23,7579,0],[511,24,7579,0,"exports"],[511,31,7579,0],[512,4,7579,0,"enumerable"],[512,14,7579,0],[513,4,7579,0,"get"],[513,7,7579,0],[513,18,7579,0,"get"],[513,19,7579,0],[514,6,7579,0],[514,13,7579,2045,"_reauthenticate"],[514,28,7579,2060],[515,4,7579,2060],[516,2,7579,2060],[517,2,7579,0,"Object"],[517,8,7579,0],[517,9,7579,0,"defineProperty"],[517,23,7579,0],[517,24,7579,0,"exports"],[517,31,7579,0],[518,4,7579,0,"enumerable"],[518,14,7579,0],[519,4,7579,0,"get"],[519,7,7579,0],[519,18,7579,0,"get"],[519,19,7579,0],[520,6,7579,0],[520,13,7579,2068,"_link"],[520,18,7579,2073],[521,4,7579,2073],[522,2,7579,2073],[523,2,7579,0,"Object"],[523,8,7579,0],[523,9,7579,0,"defineProperty"],[523,23,7579,0],[523,24,7579,0,"exports"],[523,31,7579,0],[524,4,7579,0,"enumerable"],[524,14,7579,0],[525,4,7579,0,"get"],[525,7,7579,0],[525,18,7579,0,"get"],[525,19,7579,0],[526,6,7579,0],[526,13,7579,2081,"browserLocalPersistence"],[526,36,7579,2104],[527,4,7579,2104],[528,2,7579,2104],[529,2,7579,0,"Object"],[529,8,7579,0],[529,9,7579,0,"defineProperty"],[529,23,7579,0],[529,24,7579,0,"exports"],[529,31,7579,0],[530,4,7579,0,"enumerable"],[530,14,7579,0],[531,4,7579,0,"get"],[531,7,7579,0],[531,18,7579,0,"get"],[531,19,7579,0],[532,6,7579,0],[532,13,7579,2111,"browserSessionPersistence"],[532,38,7579,2136],[533,4,7579,2136],[534,2,7579,2136],[535,2,7579,0,"Object"],[535,8,7579,0],[535,9,7579,0,"defineProperty"],[535,23,7579,0],[535,24,7579,0,"exports"],[535,31,7579,0],[536,4,7579,0,"enumerable"],[536,14,7579,0],[537,4,7579,0,"get"],[537,7,7579,0],[537,18,7579,0,"get"],[537,19,7579,0],[538,6,7579,0],[538,13,7579,2143,"signInWithPopup"],[538,28,7579,2158],[539,4,7579,2158],[540,2,7579,2158],[541,2,7579,0,"Object"],[541,8,7579,0],[541,9,7579,0,"defineProperty"],[541,23,7579,0],[541,24,7579,0,"exports"],[541,31,7579,0],[542,4,7579,0,"enumerable"],[542,14,7579,0],[543,4,7579,0,"get"],[543,7,7579,0],[543,18,7579,0,"get"],[543,19,7579,0],[544,6,7579,0],[544,13,7579,2165,"linkWithPopup"],[544,26,7579,2178],[545,4,7579,2178],[546,2,7579,2178],[547,2,7579,0,"Object"],[547,8,7579,0],[547,9,7579,0,"defineProperty"],[547,23,7579,0],[547,24,7579,0,"exports"],[547,31,7579,0],[548,4,7579,0,"enumerable"],[548,14,7579,0],[549,4,7579,0,"get"],[549,7,7579,0],[549,18,7579,0,"get"],[549,19,7579,0],[550,6,7579,0],[550,13,7579,2185,"reauthenticateWithPopup"],[550,36,7579,2208],[551,4,7579,2208],[552,2,7579,2208],[553,2,7579,0,"Object"],[553,8,7579,0],[553,9,7579,0,"defineProperty"],[553,23,7579,0],[553,24,7579,0,"exports"],[553,31,7579,0],[554,4,7579,0,"enumerable"],[554,14,7579,0],[555,4,7579,0,"get"],[555,7,7579,0],[555,18,7579,0,"get"],[555,19,7579,0],[556,6,7579,0],[556,13,7579,2215,"signInWithRedirect"],[556,31,7579,2233],[557,4,7579,2233],[558,2,7579,2233],[559,2,7579,0,"Object"],[559,8,7579,0],[559,9,7579,0,"defineProperty"],[559,23,7579,0],[559,24,7579,0,"exports"],[559,31,7579,0],[560,4,7579,0,"enumerable"],[560,14,7579,0],[561,4,7579,0,"get"],[561,7,7579,0],[561,18,7579,0,"get"],[561,19,7579,0],[562,6,7579,0],[562,13,7579,2240,"linkWithRedirect"],[562,29,7579,2256],[563,4,7579,2256],[564,2,7579,2256],[565,2,7579,0,"Object"],[565,8,7579,0],[565,9,7579,0,"defineProperty"],[565,23,7579,0],[565,24,7579,0,"exports"],[565,31,7579,0],[566,4,7579,0,"enumerable"],[566,14,7579,0],[567,4,7579,0,"get"],[567,7,7579,0],[567,18,7579,0,"get"],[567,19,7579,0],[568,6,7579,0],[568,13,7579,2263,"indexedDBLocalPersistence"],[568,38,7579,2288],[569,4,7579,2288],[570,2,7579,2288],[571,2,7579,0,"Object"],[571,8,7579,0],[571,9,7579,0,"defineProperty"],[571,23,7579,0],[571,24,7579,0,"exports"],[571,31,7579,0],[572,4,7579,0,"enumerable"],[572,14,7579,0],[573,4,7579,0,"get"],[573,7,7579,0],[573,18,7579,0,"get"],[573,19,7579,0],[574,6,7579,0],[574,13,7579,2295,"reauthenticateWithRedirect"],[574,39,7579,2321],[575,4,7579,2321],[576,2,7579,2321],[577,2,7579,0,"Object"],[577,8,7579,0],[577,9,7579,0,"defineProperty"],[577,23,7579,0],[577,24,7579,0,"exports"],[577,31,7579,0],[578,4,7579,0,"enumerable"],[578,14,7579,0],[579,4,7579,0,"get"],[579,7,7579,0],[579,18,7579,0,"get"],[579,19,7579,0],[580,6,7579,0],[580,13,7579,2328,"getRedirectResult"],[580,30,7579,2345],[581,4,7579,2345],[582,2,7579,2345],[583,2,7579,0,"Object"],[583,8,7579,0],[583,9,7579,0,"defineProperty"],[583,23,7579,0],[583,24,7579,0,"exports"],[583,31,7579,0],[584,4,7579,0,"enumerable"],[584,14,7579,0],[585,4,7579,0,"get"],[585,7,7579,0],[585,18,7579,0,"get"],[585,19,7579,0],[586,6,7579,0],[586,13,7579,2352,"linkWithPhoneNumber"],[586,32,7579,2371],[587,4,7579,2371],[588,2,7579,2371],[589,2,7579,0,"Object"],[589,8,7579,0],[589,9,7579,0,"defineProperty"],[589,23,7579,0],[589,24,7579,0,"exports"],[589,31,7579,0],[590,4,7579,0,"enumerable"],[590,14,7579,0],[591,4,7579,0,"get"],[591,7,7579,0],[591,18,7579,0,"get"],[591,19,7579,0],[592,6,7579,0],[592,13,7579,2378,"browserPopupRedirectResolver"],[592,41,7579,2406],[593,4,7579,2406],[594,2,7579,2406],[595,2,7579,0,"Object"],[595,8,7579,0],[595,9,7579,0,"defineProperty"],[595,23,7579,0],[595,24,7579,0,"exports"],[595,31,7579,0],[596,4,7579,0,"enumerable"],[596,14,7579,0],[597,4,7579,0,"get"],[597,7,7579,0],[597,18,7579,0,"get"],[597,19,7579,0],[598,6,7579,0],[598,13,7579,2413,"PhoneMultiFactorGenerator"],[598,38,7579,2438],[599,4,7579,2438],[600,2,7579,2438],[601,2,7579,0,"Object"],[601,8,7579,0],[601,9,7579,0,"defineProperty"],[601,23,7579,0],[601,24,7579,0,"exports"],[601,31,7579,0],[602,4,7579,0,"enumerable"],[602,14,7579,0],[603,4,7579,0,"get"],[603,7,7579,0],[603,18,7579,0,"get"],[603,19,7579,0],[604,6,7579,0],[604,13,7579,2445,"TotpSecret"],[604,23,7579,2455],[605,4,7579,2455],[606,2,7579,2455],[607,2,7579,0,"Object"],[607,8,7579,0],[607,9,7579,0,"defineProperty"],[607,23,7579,0],[607,24,7579,0,"exports"],[607,31,7579,0],[608,4,7579,0,"enumerable"],[608,14,7579,0],[609,4,7579,0,"get"],[609,7,7579,0],[609,18,7579,0,"get"],[609,19,7579,0],[610,6,7579,0],[610,13,7579,2462,"getAuth"],[610,20,7579,2469],[611,4,7579,2469],[612,2,7579,2469],[613,2,7579,0,"Object"],[613,8,7579,0],[613,9,7579,0,"defineProperty"],[613,23,7579,0],[613,24,7579,0,"exports"],[613,31,7579,0],[614,4,7579,0,"enumerable"],[614,14,7579,0],[615,4,7579,0,"get"],[615,7,7579,0],[615,18,7579,0,"get"],[615,19,7579,0],[616,6,7579,0],[616,13,7579,2476,"ProviderId"],[616,23,7579,2486],[617,4,7579,2486],[618,2,7579,2486],[619,2,7579,0,"Object"],[619,8,7579,0],[619,9,7579,0,"defineProperty"],[619,23,7579,0],[619,24,7579,0,"exports"],[619,31,7579,0],[620,4,7579,0,"enumerable"],[620,14,7579,0],[621,4,7579,0,"get"],[621,7,7579,0],[621,18,7579,0,"get"],[621,19,7579,0],[622,6,7579,0],[622,13,7579,2493,"reauthenticateWithPhoneNumber"],[622,42,7579,2522],[623,4,7579,2522],[624,2,7579,2522],[625,2,7579,0,"Object"],[625,8,7579,0],[625,9,7579,0,"defineProperty"],[625,23,7579,0],[625,24,7579,0,"exports"],[625,31,7579,0],[626,4,7579,0,"enumerable"],[626,14,7579,0],[627,4,7579,0,"get"],[627,7,7579,0],[627,18,7579,0,"get"],[627,19,7579,0],[628,6,7579,0],[628,13,7579,2529,"signInWithPhoneNumber"],[628,34,7579,2550],[629,4,7579,2550],[630,2,7579,2550],[631,2,7579,0,"Object"],[631,8,7579,0],[631,9,7579,0,"defineProperty"],[631,23,7579,0],[631,24,7579,0,"exports"],[631,31,7579,0],[632,4,7579,0,"enumerable"],[632,14,7579,0],[633,4,7579,0,"get"],[633,7,7579,0],[633,18,7579,0,"get"],[633,19,7579,0],[634,6,7579,0],[634,13,7579,2557,"setPersistence"],[634,27,7579,2571],[635,4,7579,2571],[636,2,7579,2571],[637,2,7579,0,"Object"],[637,8,7579,0],[637,9,7579,0,"defineProperty"],[637,23,7579,0],[637,24,7579,0,"exports"],[637,31,7579,0],[638,4,7579,0,"enumerable"],[638,14,7579,0],[639,4,7579,0,"get"],[639,7,7579,0],[639,18,7579,0,"get"],[639,19,7579,0],[640,6,7579,0],[640,13,7579,2578,"updatePhoneNumber"],[640,30,7579,2595],[641,4,7579,2595],[642,2,7579,2595],[643,2,7579,0,"Object"],[643,8,7579,0],[643,9,7579,0,"defineProperty"],[643,23,7579,0],[643,24,7579,0,"exports"],[643,31,7579,0],[644,4,7579,0,"enumerable"],[644,14,7579,0],[645,4,7579,0,"get"],[645,7,7579,0],[645,18,7579,0,"get"],[645,19,7579,0],[646,6,7579,0],[646,13,7579,2602,"initializeRecaptchaConfig"],[646,38,7579,2627],[647,4,7579,2627],[648,2,7579,2627],[649,2,7579,0,"Object"],[649,8,7579,0],[649,9,7579,0,"defineProperty"],[649,23,7579,0],[649,24,7579,0,"exports"],[649,31,7579,0],[650,4,7579,0,"enumerable"],[650,14,7579,0],[651,4,7579,0,"get"],[651,7,7579,0],[651,18,7579,0,"get"],[651,19,7579,0],[652,6,7579,0],[652,13,7579,2634,"validatePassword"],[652,29,7579,2650],[653,4,7579,2650],[654,2,7579,2650],[655,2,7579,0,"Object"],[655,8,7579,0],[655,9,7579,0,"defineProperty"],[655,23,7579,0],[655,24,7579,0,"exports"],[655,31,7579,0],[656,4,7579,0,"enumerable"],[656,14,7579,0],[657,4,7579,0,"get"],[657,7,7579,0],[657,18,7579,0,"get"],[657,19,7579,0],[658,6,7579,0],[658,13,7579,2657,"onIdTokenChanged"],[658,29,7579,2673],[659,4,7579,2673],[660,2,7579,2673],[661,2,7579,0,"Object"],[661,8,7579,0],[661,9,7579,0,"defineProperty"],[661,23,7579,0],[661,24,7579,0,"exports"],[661,31,7579,0],[662,4,7579,0,"enumerable"],[662,14,7579,0],[663,4,7579,0,"get"],[663,7,7579,0],[663,18,7579,0,"get"],[663,19,7579,0],[664,6,7579,0],[664,13,7579,2680,"beforeAuthStateChanged"],[664,35,7579,2702],[665,4,7579,2702],[666,2,7579,2702],[667,2,7579,0,"Object"],[667,8,7579,0],[667,9,7579,0,"defineProperty"],[667,23,7579,0],[667,24,7579,0,"exports"],[667,31,7579,0],[668,4,7579,0,"enumerable"],[668,14,7579,0],[669,4,7579,0,"get"],[669,7,7579,0],[669,18,7579,0,"get"],[669,19,7579,0],[670,6,7579,0],[670,13,7579,2709,"onAuthStateChanged"],[670,31,7579,2727],[671,4,7579,2727],[672,2,7579,2727],[673,2,1,0],[673,6,1,0,"_firebaseApp"],[673,18,1,0],[673,21,1,0,"require"],[673,28,1,0],[673,29,1,0,"_dependencyMap"],[673,43,1,0],[674,2,2,0],[674,6,2,0,"_firebaseUtil"],[674,19,2,0],[674,22,2,0,"require"],[674,29,2,0],[674,30,2,0,"_dependencyMap"],[674,44,2,0],[675,2,3,0],[675,6,3,0,"_firebaseComponent"],[675,24,3,0],[675,27,3,0,"require"],[675,34,3,0],[675,35,3,0,"_dependencyMap"],[675,49,3,0],[676,2,4,0],[676,6,4,0,"_firebaseLogger"],[676,21,4,0],[676,24,4,0,"require"],[676,31,4,0],[676,32,4,0,"_dependencyMap"],[676,46,4,0],[677,2,6,0],[678,0,7,0],[679,0,8,0],[680,0,9,0],[681,0,10,0],[682,0,11,0],[683,0,12,0],[684,0,13,0],[685,0,14,0],[686,0,15,0],[687,0,16,0],[688,0,17,0],[689,0,18,0],[690,0,19,0],[691,0,20,0],[692,0,21,0],[693,2,22,0],[694,0,23,0],[695,0,24,0],[696,0,25,0],[697,0,26,0],[698,2,27,0],[698,8,27,6,"FactorId"],[698,16,27,14],[698,19,27,17],[699,4,28,4],[700,4,29,4,"PHONE"],[700,9,29,9],[700,11,29,11],[700,18,29,18],[701,4,30,4,"TOTP"],[701,8,30,8],[701,10,30,10],[702,2,31,0],[702,3,31,1],[703,2,32,0],[704,0,33,0],[705,0,34,0],[706,0,35,0],[707,0,36,0],[708,2,37,0],[708,8,37,6,"ProviderId"],[708,18,37,16],[708,21,37,19],[709,4,38,4],[710,4,39,4,"FACEBOOK"],[710,12,39,12],[710,14,39,14],[710,28,39,28],[711,4,40,4],[712,4,41,4,"GITHUB"],[712,10,41,10],[712,12,41,12],[712,24,41,24],[713,4,42,4],[714,4,43,4,"GOOGLE"],[714,10,43,10],[714,12,43,12],[714,24,43,24],[715,4,44,4],[716,4,45,4,"PASSWORD"],[716,12,45,12],[716,14,45,14],[716,24,45,24],[717,4,46,4],[718,4,47,4,"PHONE"],[718,9,47,9],[718,11,47,11],[718,18,47,18],[719,4,48,4],[720,4,49,4,"TWITTER"],[720,11,49,11],[720,13,49,13],[721,2,50,0],[721,3,50,1],[722,2,51,0],[723,0,52,0],[724,0,53,0],[725,0,54,0],[726,0,55,0],[727,2,56,0],[727,8,56,6,"SignInMethod"],[727,20,56,18],[727,23,56,21],[728,4,57,4],[729,4,58,4,"EMAIL_LINK"],[729,14,58,14],[729,16,58,16],[729,27,58,27],[730,4,59,4],[731,4,60,4,"EMAIL_PASSWORD"],[731,18,60,18],[731,20,60,20],[731,30,60,30],[732,4,61,4],[733,4,62,4,"FACEBOOK"],[733,12,62,12],[733,14,62,14],[733,28,62,28],[734,4,63,4],[735,4,64,4,"GITHUB"],[735,10,64,10],[735,12,64,12],[735,24,64,24],[736,4,65,4],[737,4,66,4,"GOOGLE"],[737,10,66,10],[737,12,66,12],[737,24,66,24],[738,4,67,4],[739,4,68,4,"PHONE"],[739,9,68,9],[739,11,68,11],[739,18,68,18],[740,4,69,4],[741,4,70,4,"TWITTER"],[741,11,70,11],[741,13,70,13],[742,2,71,0],[742,3,71,1],[743,2,72,0],[744,0,73,0],[745,0,74,0],[746,0,75,0],[747,0,76,0],[748,2,77,0],[748,8,77,6,"OperationType"],[748,21,77,19],[748,24,77,22],[749,4,78,4],[750,4,79,4,"LINK"],[750,8,79,8],[750,10,79,10],[750,16,79,16],[751,4,80,4],[752,4,81,4,"REAUTHENTICATE"],[752,18,81,18],[752,20,81,20],[752,36,81,36],[753,4,82,4],[754,4,83,4,"SIGN_IN"],[754,11,83,11],[754,13,83,13],[755,2,84,0],[755,3,84,1],[756,2,85,0],[757,0,86,0],[758,0,87,0],[759,0,88,0],[760,0,89,0],[761,2,90,0],[761,8,90,6,"ActionCodeOperation"],[761,27,90,25],[761,30,90,28],[762,4,91,4],[763,4,92,4,"EMAIL_SIGNIN"],[763,16,92,16],[763,18,92,18],[763,32,92,32],[764,4,93,4],[765,4,94,4,"PASSWORD_RESET"],[765,18,94,18],[765,20,94,20],[765,36,94,36],[766,4,95,4],[767,4,96,4,"RECOVER_EMAIL"],[767,17,96,17],[767,19,96,19],[767,34,96,34],[768,4,97,4],[769,4,98,4,"REVERT_SECOND_FACTOR_ADDITION"],[769,33,98,33],[769,35,98,35],[769,66,98,66],[770,4,99,4],[771,4,100,4,"VERIFY_AND_CHANGE_EMAIL"],[771,27,100,27],[771,29,100,29],[771,54,100,54],[772,4,101,4],[773,4,102,4,"VERIFY_EMAIL"],[773,16,102,16],[773,18,102,18],[774,2,103,0],[774,3,103,1],[776,2,105,0],[777,0,106,0],[778,0,107,0],[779,0,108,0],[780,0,109,0],[781,0,110,0],[782,0,111,0],[783,0,112,0],[784,0,113,0],[785,0,114,0],[786,0,115,0],[787,0,116,0],[788,0,117,0],[789,0,118,0],[790,0,119,0],[791,0,120,0],[792,2,121,0],[792,11,121,9,"_debugErrorMap"],[792,25,121,23,"_debugErrorMap"],[792,26,121,23],[792,28,121,26],[793,4,122,4],[793,11,122,11],[794,6,123,8],[794,7,123,9],[794,35,123,37],[794,36,123,38],[794,79,123,81],[794,133,123,135],[795,6,124,8],[795,7,124,9],[795,23,124,25],[795,24,124,26],[795,61,124,63],[795,63,124,65],[796,6,125,8],[796,7,125,9],[796,27,125,29],[796,28,125,30],[796,69,125,71],[796,132,125,134],[796,135,126,12],[796,206,126,83],[796,209,127,12],[796,267,127,70],[797,6,128,8],[797,7,128,9],[797,26,128,28],[797,27,128,29],[797,67,128,69],[797,135,128,137],[797,138,129,12],[797,208,129,82],[797,211,130,12],[797,225,130,26],[798,6,131,8],[798,7,131,9],[798,29,131,31],[798,30,131,32],[798,73,131,75],[798,141,131,143],[798,144,132,12],[798,216,132,84],[798,219,133,12],[798,244,133,37],[799,6,134,8],[799,7,134,9],[799,21,134,23],[799,22,134,24],[799,57,134,59],[799,129,134,131],[799,132,135,12],[799,140,135,20],[800,6,136,8],[800,7,136,9],[800,26,136,28],[800,27,136,29],[800,67,136,69],[800,100,136,102],[801,6,137,8],[801,7,137,9],[801,25,137,27],[801,26,137,28],[801,65,137,67],[801,97,137,99],[802,6,138,8],[802,7,138,9],[802,34,138,36],[802,35,138,37],[802,83,138,85],[802,153,138,155],[803,6,139,8],[803,7,139,9],[803,30,139,32],[803,31,139,33],[803,73,139,75],[803,128,139,130],[804,6,140,8],[804,7,140,9],[804,30,140,32],[804,31,140,33],[804,84,140,86],[804,157,140,159],[804,160,141,12],[804,197,141,49],[805,6,142,8],[805,7,142,9],[805,46,142,48],[805,47,142,49],[805,100,142,102],[805,180,142,182],[805,183,143,12],[805,258,143,87],[805,261,144,12],[805,295,144,46],[806,6,145,8],[806,7,145,9],[806,35,145,37],[806,36,145,38],[806,85,145,87],[806,168,145,170],[806,171,146,12],[806,184,146,25],[807,6,147,8],[807,7,147,9],[807,40,147,42],[807,41,147,43],[807,95,147,97],[807,150,147,152],[808,6,148,8],[808,7,148,9],[808,29,148,31],[808,30,148,32],[808,65,148,67],[808,122,148,124],[809,6,149,8],[809,7,149,9],[809,31,149,33],[809,32,149,34],[809,77,149,79],[809,148,149,150],[809,151,150,12],[809,210,150,71],[809,213,151,12],[809,246,151,45],[810,6,152,8],[810,7,152,9],[810,28,152,30],[810,29,152,31],[810,68,152,70],[810,98,152,100],[811,6,153,8],[811,7,153,9],[811,32,153,34],[811,33,153,35],[811,77,153,79],[811,159,153,161],[812,6,154,8],[812,7,154,9],[812,23,154,25],[812,24,154,26],[812,61,154,63],[812,98,154,100],[813,6,155,8],[813,7,155,9],[813,31,155,33],[813,32,155,34],[813,77,155,79],[813,151,155,153],[813,154,156,12],[813,215,156,73],[814,6,157,8],[814,7,157,9],[814,23,157,25],[814,24,157,26],[814,61,157,63],[814,131,157,133],[815,6,158,8],[815,7,158,9],[815,27,158,29],[815,28,158,30],[815,63,158,65],[815,134,158,136],[815,137,159,12],[815,208,159,83],[815,211,160,12],[815,254,160,55],[816,6,161,8],[816,7,161,9],[816,27,161,29],[816,28,161,30],[816,69,161,71],[816,106,161,108],[817,6,162,8],[817,7,162,9],[817,34,162,36],[817,35,162,37],[817,70,162,72],[817,142,162,144],[817,145,163,12],[817,219,163,86],[817,222,164,12],[817,263,164,53],[818,6,165,8],[818,7,165,9],[818,29,165,31],[818,30,165,32],[818,73,165,75],[818,127,165,129],[819,6,166,8],[819,7,166,9],[819,38,166,40],[819,39,166,41],[819,91,166,93],[819,166,166,168],[819,169,167,12],[819,229,167,72],[819,232,168,12],[819,293,168,73],[819,296,169,12],[819,329,169,45],[820,6,170,8],[820,7,170,9],[820,29,170,31],[820,30,170,32],[820,73,170,75],[820,144,170,146],[821,6,171,8],[821,7,171,9],[821,36,171,38],[821,37,171,39],[821,87,171,89],[821,178,171,180],[822,6,172,8],[822,7,172,9],[822,22,172,24],[822,23,172,25],[822,59,172,61],[822,98,172,100],[823,6,173,8],[823,7,173,9],[823,32,173,34],[823,33,173,35],[823,79,173,81],[823,147,173,149],[824,6,174,8],[824,7,174,9],[824,24,174,26],[824,25,174,27],[824,63,174,65],[824,132,174,134],[825,6,175,8],[825,7,175,9],[825,26,175,28],[825,27,175,29],[825,67,175,69],[825,116,175,118],[826,6,176,8],[826,7,176,9],[826,27,176,29],[826,28,176,30],[826,69,176,71],[826,139,176,141],[827,6,177,8],[827,7,177,9],[827,32,177,34],[827,33,177,35],[827,79,177,81],[827,173,177,175],[827,176,178,12],[827,258,178,94],[828,6,179,8],[828,7,179,9],[828,37,179,39],[828,38,179,40],[828,80,179,82],[828,160,179,162],[829,6,180,8],[829,7,180,9],[829,31,180,33],[829,32,180,34],[829,77,180,79],[829,149,180,151],[829,152,181,12],[829,184,181,44],[830,6,182,8],[830,7,182,9],[830,32,182,34],[830,33,182,35],[830,79,182,81],[830,150,182,152],[830,153,183,12],[830,173,183,32],[831,6,184,8],[831,7,184,9],[831,28,184,30],[831,29,184,31],[831,66,184,68],[831,137,184,139],[831,140,185,12],[831,213,185,85],[832,6,186,8],[832,7,186,9],[832,28,186,30],[832,29,186,31],[832,68,186,70],[832,140,186,142],[832,143,187,12],[832,179,187,48],[833,6,188,8],[833,7,188,9],[833,23,188,25],[833,24,188,26],[833,63,188,65],[833,126,188,128],[834,6,189,8],[834,7,189,9],[834,33,189,35],[834,34,189,36],[834,76,189,78],[834,159,189,161],[835,6,190,8],[835,7,190,9],[835,29,190,31],[835,30,190,32],[835,73,190,75],[835,146,190,148],[835,149,191,12],[835,220,191,83],[835,223,192,12],[835,294,192,83],[835,297,193,12],[835,327,193,42],[836,6,194,8],[836,7,194,9],[836,28,194,30],[836,29,194,31],[836,71,194,73],[836,110,194,112],[837,6,195,8],[837,7,195,9],[837,32,195,34],[837,33,195,35],[837,79,195,81],[837,151,195,153],[837,154,196,12],[837,191,196,49],[838,6,197,8],[838,7,197,9],[838,23,197,25],[838,24,197,26],[838,61,197,63],[838,153,197,155],[838,156,198,12],[838,238,198,94],[839,6,199,8],[839,7,199,9],[839,32,199,34],[839,33,199,35],[839,76,199,78],[839,150,199,152],[840,6,200,8],[840,7,200,9],[840,26,200,28],[840,27,200,29],[840,67,200,69],[840,110,200,112],[841,6,201,8],[841,7,201,9],[841,22,201,24],[841,23,201,25],[841,59,201,61],[841,118,201,120],[842,6,202,8],[842,7,202,9],[842,33,202,35],[842,34,202,36],[842,85,202,87],[842,175,202,177],[843,6,203,8],[843,7,203,9],[843,36,203,38],[843,37,203,39],[843,79,203,81],[843,150,203,152],[843,153,204,12],[843,209,204,68],[844,6,205,8],[844,7,205,9],[844,31,205,33],[844,32,205,34],[844,77,205,79],[844,145,205,147],[844,148,206,12],[844,209,206,73],[845,6,207,8],[845,7,207,9],[845,34,207,36],[845,35,207,37],[845,70,207,72],[845,146,207,148],[846,6,208,8],[846,7,208,9],[846,29,208,31],[846,30,208,32],[846,73,208,75],[846,122,208,124],[847,6,209,8],[847,7,209,9],[847,29,209,31],[847,30,209,32],[847,73,209,75],[847,110,209,112],[848,6,210,8],[848,7,210,9],[848,30,210,32],[848,31,210,33],[848,75,210,77],[848,142,210,144],[849,6,211,8],[849,7,211,9],[849,33,211,35],[849,34,211,36],[849,81,211,83],[849,149,211,151],[849,152,212,12],[849,225,212,85],[849,228,213,12],[849,254,213,38],[850,6,214,8],[850,7,214,9],[850,25,214,27],[850,26,214,28],[850,65,214,67],[850,104,214,106],[851,6,215,8],[851,7,215,9],[851,34,215,36],[851,35,215,37],[851,74,215,76],[851,116,215,118],[852,6,216,8],[852,7,216,9],[852,37,216,39],[852,38,216,40],[852,80,216,82],[852,146,216,148],[853,6,217,8],[853,7,217,9],[853,29,217,31],[853,30,217,32],[853,73,217,75],[853,144,217,146],[854,6,218,8],[854,7,218,9],[854,32,218,34],[854,33,218,35],[854,76,218,78],[854,146,218,148],[855,6,219,8],[855,7,219,9],[855,20,219,22],[855,21,219,23],[855,60,219,62],[855,108,219,110],[856,6,220,8],[856,7,220,9],[856,36,220,38],[856,37,220,39],[856,78,220,80],[856,152,220,154],[857,6,221,8],[857,7,221,9],[857,35,221,37],[857,36,221,38],[857,71,221,73],[857,143,221,145],[858,6,222,8],[858,7,222,9],[858,49,222,51],[858,50,222,52],[858,90,222,92],[858,160,222,162],[858,163,223,12],[858,232,223,81],[858,235,224,12],[858,251,224,28],[859,6,225,8],[859,7,225,9],[859,31,225,33],[859,32,225,34],[859,77,225,79],[859,174,225,176],[860,6,226,8],[860,7,226,9],[860,22,226,24],[860,23,226,25],[860,59,226,61],[860,96,226,98],[861,6,227,8],[861,7,227,9],[861,25,227,27],[861,26,227,28],[861,65,227,67],[861,125,227,127],[862,6,228,8],[862,7,228,9],[862,18,228,20],[862,19,228,21],[862,51,228,53],[862,124,228,126],[862,127,229,12],[862,161,229,46],[863,6,230,8],[863,7,230,9],[863,30,230,32],[863,31,230,33],[863,75,230,77],[863,143,230,145],[863,146,231,12],[863,219,231,85],[863,222,232,12],[863,237,232,27],[864,6,233,8],[864,7,233,9],[864,52,233,54],[864,53,233,55],[864,99,233,101],[864,172,233,174],[864,175,234,12],[864,248,234,85],[864,251,235,12],[864,286,235,47],[865,6,236,8],[865,7,236,9],[865,22,236,24],[865,23,236,25],[865,59,236,61],[865,150,236,152],[866,6,237,8],[866,7,237,9],[866,29,237,31],[866,30,237,32],[866,73,237,75],[866,145,237,147],[867,6,238,8],[867,7,238,9],[867,32,238,34],[867,33,238,35],[867,79,238,81],[867,144,238,146],[868,6,239,8],[868,7,239,9],[868,23,239,25],[868,24,239,26],[868,61,239,63],[868,120,239,122],[869,6,240,8],[869,7,240,9],[869,35,240,37],[869,36,240,38],[869,85,240,87],[869,159,240,161],[870,6,241,8],[870,7,241,9],[870,35,241,37],[870,36,241,38],[870,85,241,87],[870,135,241,137],[871,6,242,8],[871,7,242,9],[871,28,242,30],[871,29,242,31],[871,71,242,73],[871,131,242,133],[872,6,243,8],[872,7,243,9],[872,37,243,39],[872,38,243,40],[872,91,243,93],[872,147,243,149],[873,6,244,8],[873,7,244,9],[873,45,244,47],[873,46,244,48],[873,97,244,99],[873,172,244,174],[874,6,245,8],[874,7,245,9],[874,27,245,29],[874,28,245,30],[874,69,245,71],[874,138,245,140],[875,6,246,8],[875,7,246,9],[875,16,246,18],[875,17,246,19],[875,47,246,49],[875,77,246,79],[876,6,247,8],[876,7,247,9],[876,27,247,29],[876,28,247,30],[876,64,247,66],[876,136,247,138],[877,6,248,8],[877,7,248,9],[877,26,248,28],[877,27,248,29],[877,77,248,79],[877,150,248,152],[877,153,249,12],[877,171,249,30],[878,6,250,8],[878,7,250,9],[878,34,250,36],[878,35,250,37],[878,77,250,79],[878,148,250,150],[878,151,251,12],[878,188,251,49],[879,6,252,8],[879,7,252,9],[879,33,252,35],[879,34,252,36],[879,81,252,83],[879,198,252,200],[880,6,253,8],[880,7,253,9],[880,37,253,39],[880,38,253,40],[880,84,253,86],[880,158,253,160],[881,6,254,8],[881,7,254,9],[881,37,254,39],[881,38,254,40],[881,89,254,91],[881,149,254,151],[882,6,255,8],[882,7,255,9],[882,25,255,27],[882,26,255,28],[882,65,255,67],[882,107,255,109],[883,6,256,8],[883,7,256,9],[883,23,256,25],[883,24,256,26],[883,61,256,63],[883,132,256,134],[884,6,257,8],[884,7,257,9],[884,23,257,25],[884,24,257,26],[884,59,257,61],[884,132,257,134],[884,135,258,12],[884,155,258,32],[885,6,259,8],[885,7,259,9],[885,22,259,24],[885,23,259,25],[885,59,259,61],[885,116,259,118],[886,6,260,8],[886,7,260,9],[886,22,260,24],[886,23,260,25],[886,59,260,61],[886,137,260,139],[887,6,261,8],[887,7,261,9],[887,24,261,26],[887,25,261,27],[887,63,261,65],[887,65,261,67],[888,6,262,8],[888,7,262,9],[888,22,262,24],[888,23,262,25],[888,59,262,61],[888,108,262,110],[889,6,263,8],[889,7,263,9],[889,32,263,34],[889,33,263,35],[889,79,263,81],[889,157,263,159],[890,6,264,8],[890,7,264,9],[890,28,264,30],[890,29,264,31],[890,71,264,73],[890,119,264,121],[890,122,265,12],[890,195,265,85],[890,198,266,12],[890,278,266,92],[890,281,267,12],[890,313,267,44],[891,6,268,8],[891,7,268,9],[891,32,268,34],[891,33,268,35],[891,79,268,81],[891,148,268,150],[892,6,269,8],[892,7,269,9],[892,32,269,34],[892,33,269,35],[892,79,269,81],[892,148,269,150],[893,6,270,8],[893,7,270,9],[893,33,270,35],[893,34,270,36],[893,81,270,83],[893,151,270,153],[894,6,271,8],[894,7,271,9],[894,30,271,32],[894,31,271,33],[894,75,271,77],[894,142,271,144],[895,6,272,8],[895,7,272,9],[895,28,272,30],[895,29,272,31],[895,71,272,73],[895,146,272,148],[896,6,273,8],[896,7,273,9],[896,34,273,36],[896,35,273,37],[896,83,273,85],[896,154,273,156],[897,6,274,8],[897,7,274,9],[897,25,274,27],[897,26,274,28],[897,65,274,67],[897,94,274,96],[898,6,275,8],[898,7,275,9],[898,34,275,36],[898,35,275,37],[898,83,275,85],[898,154,275,156],[899,6,276,8],[899,7,276,9],[899,51,276,53],[899,52,276,54],[899,117,276,119],[899,245,276,247],[900,6,277,8],[900,7,277,9],[900,44,277,46],[900,45,277,47],[900,103,277,105],[900,149,277,151],[901,6,278,8],[901,7,278,9],[901,36,278,38],[901,37,278,39],[901,87,278,89],[901,179,278,181],[901,182,279,12],[902,4,280,4],[902,5,280,5],[903,2,281,0],[904,2,282,0],[904,11,282,9,"_prodErrorMap"],[904,24,282,22,"_prodErrorMap"],[904,25,282,22],[904,27,282,25],[905,4,283,4],[906,4,284,4],[907,4,285,4],[908,4,286,4],[908,11,286,11],[909,6,287,8],[909,7,287,9],[909,46,287,48],[909,47,287,49],[909,100,287,102],[909,180,287,182],[909,183,288,12],[909,258,288,87],[909,261,289,12],[910,4,290,4],[910,5,290,5],[911,2,291,0],[912,2,292,0],[913,0,293,0],[914,0,294,0],[915,0,295,0],[916,0,296,0],[917,0,297,0],[918,0,298,0],[919,2,299,0],[919,8,299,6,"debugErrorMap"],[919,21,299,19],[919,24,299,22,"_debugErrorMap"],[919,38,299,36],[920,2,300,0],[921,0,301,0],[922,0,302,0],[923,0,303,0],[924,0,304,0],[925,0,305,0],[926,0,306,0],[927,2,307,0],[927,8,307,6,"prodErrorMap"],[927,20,307,18],[927,23,307,21,"_prodErrorMap"],[927,36,307,34],[928,2,308,0],[928,8,308,6,"_DEFAULT_AUTH_ERROR_FACTORY"],[928,35,308,33],[928,38,308,36],[928,42,308,40,"ErrorFactory"],[928,55,308,52],[928,56,308,52,"ErrorFactory"],[928,68,308,52],[928,69,308,53],[928,75,308,59],[928,77,308,61],[928,87,308,71],[928,89,308,73,"_prodErrorMap"],[928,102,308,86],[928,103,308,87],[928,104,308,88],[928,105,308,89],[929,2,309,0],[930,0,310,0],[931,0,311,0],[932,0,312,0],[933,0,313,0],[934,0,314,0],[935,0,315,0],[936,0,316,0],[937,0,317,0],[938,0,318,0],[939,0,319,0],[940,2,320,0],[940,8,320,6,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[940,50,320,48],[940,53,320,51],[941,4,321,4,"ADMIN_ONLY_OPERATION"],[941,24,321,24],[941,26,321,26],[941,59,321,59],[942,4,322,4,"ARGUMENT_ERROR"],[942,18,322,18],[942,20,322,20],[942,41,322,41],[943,4,323,4,"APP_NOT_AUTHORIZED"],[943,22,323,22],[943,24,323,24],[943,49,323,49],[944,4,324,4,"APP_NOT_INSTALLED"],[944,21,324,21],[944,23,324,23],[944,47,324,47],[945,4,325,4,"CAPTCHA_CHECK_FAILED"],[945,24,325,24],[945,26,325,26],[945,53,325,53],[946,4,326,4,"CODE_EXPIRED"],[946,16,326,16],[946,18,326,18],[946,37,326,37],[947,4,327,4,"CORDOVA_NOT_READY"],[947,21,327,21],[947,23,327,23],[947,47,327,47],[948,4,328,4,"CORS_UNSUPPORTED"],[948,20,328,20],[948,22,328,22],[948,45,328,45],[949,4,329,4,"CREDENTIAL_ALREADY_IN_USE"],[949,29,329,29],[949,31,329,31],[949,63,329,63],[950,4,330,4,"CREDENTIAL_MISMATCH"],[950,23,330,23],[950,25,330,25],[950,53,330,53],[951,4,331,4,"CREDENTIAL_TOO_OLD_LOGIN_AGAIN"],[951,34,331,34],[951,36,331,36],[951,64,331,64],[952,4,332,4,"DEPENDENT_SDK_INIT_BEFORE_AUTH"],[952,34,332,34],[952,36,332,36],[952,80,332,80],[953,4,333,4,"DYNAMIC_LINK_NOT_ACTIVATED"],[953,30,333,30],[953,32,333,32],[953,65,333,65],[954,4,334,4,"EMAIL_CHANGE_NEEDS_VERIFICATION"],[954,35,334,35],[954,37,334,37],[954,75,334,75],[955,4,335,4,"EMAIL_EXISTS"],[955,16,335,16],[955,18,335,18],[955,45,335,45],[956,4,336,4,"EMULATOR_CONFIG_FAILED"],[956,26,336,26],[956,28,336,28],[956,57,336,57],[957,4,337,4,"EXPIRED_OOB_CODE"],[957,20,337,20],[957,22,337,22],[957,48,337,48],[958,4,338,4,"EXPIRED_POPUP_REQUEST"],[958,25,338,25],[958,27,338,27],[958,57,338,57],[959,4,339,4,"INTERNAL_ERROR"],[959,18,339,18],[959,20,339,20],[959,41,339,41],[960,4,340,4,"INVALID_API_KEY"],[960,19,340,19],[960,21,340,21],[960,43,340,43],[961,4,341,4,"INVALID_APP_CREDENTIAL"],[961,26,341,26],[961,28,341,28],[961,57,341,57],[962,4,342,4,"INVALID_APP_ID"],[962,18,342,18],[962,20,342,20],[962,41,342,41],[963,4,343,4,"INVALID_AUTH"],[963,16,343,16],[963,18,343,18],[963,43,343,43],[964,4,344,4,"INVALID_AUTH_EVENT"],[964,22,344,22],[964,24,344,24],[964,49,344,49],[965,4,345,4,"INVALID_CERT_HASH"],[965,21,345,21],[965,23,345,23],[965,47,345,47],[966,4,346,4,"INVALID_CODE"],[966,16,346,16],[966,18,346,18],[966,50,346,50],[967,4,347,4,"INVALID_CONTINUE_URI"],[967,24,347,24],[967,26,347,26],[967,53,347,53],[968,4,348,4,"INVALID_CORDOVA_CONFIGURATION"],[968,33,348,33],[968,35,348,35],[968,71,348,71],[969,4,349,4,"INVALID_CUSTOM_TOKEN"],[969,24,349,24],[969,26,349,26],[969,53,349,53],[970,4,350,4,"INVALID_DYNAMIC_LINK_DOMAIN"],[970,31,350,31],[970,33,350,33],[970,67,350,67],[971,4,351,4,"INVALID_EMAIL"],[971,17,351,17],[971,19,351,19],[971,39,351,39],[972,4,352,4,"INVALID_EMULATOR_SCHEME"],[972,27,352,27],[972,29,352,29],[972,59,352,59],[973,4,353,4,"INVALID_IDP_RESPONSE"],[973,24,353,24],[973,26,353,26],[973,51,353,51],[974,4,354,4,"INVALID_LOGIN_CREDENTIALS"],[974,29,354,29],[974,31,354,31],[974,56,354,56],[975,4,355,4,"INVALID_MESSAGE_PAYLOAD"],[975,27,355,27],[975,29,355,29],[975,59,355,59],[976,4,356,4,"INVALID_MFA_SESSION"],[976,23,356,23],[976,25,356,25],[976,60,356,60],[977,4,357,4,"INVALID_OAUTH_CLIENT_ID"],[977,27,357,27],[977,29,357,29],[977,59,357,59],[978,4,358,4,"INVALID_OAUTH_PROVIDER"],[978,26,358,26],[978,28,358,28],[978,57,358,57],[979,4,359,4,"INVALID_OOB_CODE"],[979,20,359,20],[979,22,359,22],[979,48,359,48],[980,4,360,4,"INVALID_ORIGIN"],[980,18,360,18],[980,20,360,20],[980,46,360,46],[981,4,361,4,"INVALID_PASSWORD"],[981,20,361,20],[981,22,361,22],[981,43,361,43],[982,4,362,4,"INVALID_PERSISTENCE"],[982,23,362,23],[982,25,362,25],[982,56,362,56],[983,4,363,4,"INVALID_PHONE_NUMBER"],[983,24,363,24],[983,26,363,26],[983,53,363,53],[984,4,364,4,"INVALID_PROVIDER_ID"],[984,23,364,23],[984,25,364,25],[984,51,364,51],[985,4,365,4,"INVALID_RECIPIENT_EMAIL"],[985,27,365,27],[985,29,365,29],[985,59,365,59],[986,4,366,4,"INVALID_SENDER"],[986,18,366,18],[986,20,366,20],[986,41,366,41],[987,4,367,4,"INVALID_SESSION_INFO"],[987,24,367,24],[987,26,367,26],[987,56,367,56],[988,4,368,4,"INVALID_TENANT_ID"],[988,21,368,21],[988,23,368,23],[988,47,368,47],[989,4,369,4,"MFA_INFO_NOT_FOUND"],[989,22,369,22],[989,24,369,24],[989,58,369,58],[990,4,370,4,"MFA_REQUIRED"],[990,16,370,16],[990,18,370,18],[990,51,370,51],[991,4,371,4,"MISSING_ANDROID_PACKAGE_NAME"],[991,32,371,32],[991,34,371,34],[991,65,371,65],[992,4,372,4,"MISSING_APP_CREDENTIAL"],[992,26,372,26],[992,28,372,28],[992,57,372,57],[993,4,373,4,"MISSING_AUTH_DOMAIN"],[993,23,373,23],[993,25,373,25],[993,59,373,59],[994,4,374,4,"MISSING_CODE"],[994,16,374,16],[994,18,374,18],[994,50,374,50],[995,4,375,4,"MISSING_CONTINUE_URI"],[995,24,375,24],[995,26,375,26],[995,53,375,53],[996,4,376,4,"MISSING_IFRAME_START"],[996,24,376,24],[996,26,376,26],[996,53,376,53],[997,4,377,4,"MISSING_IOS_BUNDLE_ID"],[997,25,377,25],[997,27,377,27],[997,55,377,55],[998,4,378,4,"MISSING_OR_INVALID_NONCE"],[998,28,378,28],[998,30,378,30],[998,61,378,61],[999,4,379,4,"MISSING_MFA_INFO"],[999,20,379,20],[999,22,379,22],[999,54,379,54],[1000,4,380,4,"MISSING_MFA_SESSION"],[1000,23,380,23],[1000,25,380,25],[1000,60,380,60],[1001,4,381,4,"MISSING_PHONE_NUMBER"],[1001,24,381,24],[1001,26,381,26],[1001,53,381,53],[1002,4,382,4,"MISSING_SESSION_INFO"],[1002,24,382,24],[1002,26,382,26],[1002,56,382,56],[1003,4,383,4,"MODULE_DESTROYED"],[1003,20,383,20],[1003,22,383,22],[1003,40,383,40],[1004,4,384,4,"NEED_CONFIRMATION"],[1004,21,384,21],[1004,23,384,23],[1004,70,384,70],[1005,4,385,4,"NETWORK_REQUEST_FAILED"],[1005,26,385,26],[1005,28,385,28],[1005,57,385,57],[1006,4,386,4,"NULL_USER"],[1006,13,386,13],[1006,15,386,15],[1006,31,386,31],[1007,4,387,4,"NO_AUTH_EVENT"],[1007,17,387,17],[1007,19,387,19],[1007,39,387,39],[1008,4,388,4,"NO_SUCH_PROVIDER"],[1008,20,388,20],[1008,22,388,22],[1008,45,388,45],[1009,4,389,4,"OPERATION_NOT_ALLOWED"],[1009,25,389,25],[1009,27,389,27],[1009,55,389,55],[1010,4,390,4,"OPERATION_NOT_SUPPORTED"],[1010,27,390,27],[1010,29,390,29],[1010,79,390,79],[1011,4,391,4,"POPUP_BLOCKED"],[1011,17,391,17],[1011,19,391,19],[1011,39,391,39],[1012,4,392,4,"POPUP_CLOSED_BY_USER"],[1012,24,392,24],[1012,26,392,26],[1012,53,392,53],[1013,4,393,4,"PROVIDER_ALREADY_LINKED"],[1013,27,393,27],[1013,29,393,29],[1013,59,393,59],[1014,4,394,4,"QUOTA_EXCEEDED"],[1014,18,394,18],[1014,20,394,20],[1014,41,394,41],[1015,4,395,4,"REDIRECT_CANCELLED_BY_USER"],[1015,30,395,30],[1015,32,395,32],[1015,65,395,65],[1016,4,396,4,"REDIRECT_OPERATION_PENDING"],[1016,30,396,30],[1016,32,396,32],[1016,65,396,65],[1017,4,397,4,"REJECTED_CREDENTIAL"],[1017,23,397,23],[1017,25,397,25],[1017,51,397,51],[1018,4,398,4,"SECOND_FACTOR_ALREADY_ENROLLED"],[1018,34,398,34],[1018,36,398,36],[1018,71,398,71],[1019,4,399,4,"SECOND_FACTOR_LIMIT_EXCEEDED"],[1019,32,399,32],[1019,34,399,34],[1019,77,399,77],[1020,4,400,4,"TENANT_ID_MISMATCH"],[1020,22,400,22],[1020,24,400,24],[1020,49,400,49],[1021,4,401,4,"TIMEOUT"],[1021,11,401,11],[1021,13,401,13],[1021,27,401,27],[1022,4,402,4,"TOKEN_EXPIRED"],[1022,17,402,17],[1022,19,402,19],[1022,44,402,44],[1023,4,403,4,"TOO_MANY_ATTEMPTS_TRY_LATER"],[1023,31,403,31],[1023,33,403,33],[1023,57,403,57],[1024,4,404,4,"UNAUTHORIZED_DOMAIN"],[1024,23,404,23],[1024,25,404,25],[1024,57,404,57],[1025,4,405,4,"UNSUPPORTED_FIRST_FACTOR"],[1025,28,405,28],[1025,30,405,30],[1025,61,405,61],[1026,4,406,4,"UNSUPPORTED_PERSISTENCE"],[1026,27,406,27],[1026,29,406,29],[1026,64,406,64],[1027,4,407,4,"UNSUPPORTED_TENANT_OPERATION"],[1027,32,407,32],[1027,34,407,34],[1027,69,407,69],[1028,4,408,4,"UNVERIFIED_EMAIL"],[1028,20,408,20],[1028,22,408,22],[1028,45,408,45],[1029,4,409,4,"USER_CANCELLED"],[1029,18,409,18],[1029,20,409,20],[1029,41,409,41],[1030,4,410,4,"USER_DELETED"],[1030,16,410,16],[1030,18,410,18],[1030,39,410,39],[1031,4,411,4,"USER_DISABLED"],[1031,17,411,17],[1031,19,411,19],[1031,39,411,39],[1032,4,412,4,"USER_MISMATCH"],[1032,17,412,17],[1032,19,412,19],[1032,39,412,39],[1033,4,413,4,"USER_SIGNED_OUT"],[1033,19,413,19],[1033,21,413,21],[1033,43,413,43],[1034,4,414,4,"WEAK_PASSWORD"],[1034,17,414,17],[1034,19,414,19],[1034,39,414,39],[1035,4,415,4,"WEB_STORAGE_UNSUPPORTED"],[1035,27,415,27],[1035,29,415,29],[1035,59,415,59],[1036,4,416,4,"ALREADY_INITIALIZED"],[1036,23,416,23],[1036,25,416,25],[1036,51,416,51],[1037,4,417,4,"RECAPTCHA_NOT_ENABLED"],[1037,25,417,25],[1037,27,417,27],[1037,55,417,55],[1038,4,418,4,"MISSING_RECAPTCHA_TOKEN"],[1038,27,418,27],[1038,29,418,29],[1038,59,418,59],[1039,4,419,4,"INVALID_RECAPTCHA_TOKEN"],[1039,27,419,27],[1039,29,419,29],[1039,59,419,59],[1040,4,420,4,"INVALID_RECAPTCHA_ACTION"],[1040,28,420,28],[1040,30,420,30],[1040,61,420,61],[1041,4,421,4,"MISSING_CLIENT_TYPE"],[1041,23,421,23],[1041,25,421,25],[1041,51,421,51],[1042,4,422,4,"MISSING_RECAPTCHA_VERSION"],[1042,29,422,29],[1042,31,422,31],[1042,63,422,63],[1043,4,423,4,"INVALID_RECAPTCHA_VERSION"],[1043,29,423,29],[1043,31,423,31],[1043,63,423,63],[1044,4,424,4,"INVALID_REQ_TYPE"],[1044,20,424,20],[1044,22,424,22],[1044,45,424,45],[1045,4,425,4,"INVALID_HOSTING_LINK_DOMAIN"],[1045,31,425,31],[1045,33,425,33],[1046,2,426,0],[1046,3,426,1],[1048,2,428,0],[1049,0,429,0],[1050,0,430,0],[1051,0,431,0],[1052,0,432,0],[1053,0,433,0],[1054,0,434,0],[1055,0,435,0],[1056,0,436,0],[1057,0,437,0],[1058,0,438,0],[1059,0,439,0],[1060,0,440,0],[1061,0,441,0],[1062,0,442,0],[1063,0,443,0],[1064,2,444,0],[1064,8,444,6,"logClient"],[1064,17,444,15],[1064,20,444,18],[1064,24,444,22,"Logger"],[1064,39,444,28],[1064,40,444,28,"Logger"],[1064,46,444,28],[1064,47,444,29],[1064,63,444,45],[1064,64,444,46],[1065,2,445,0],[1065,11,445,9,"_logWarn"],[1065,19,445,17,"_logWarn"],[1065,20,445,18,"msg"],[1065,23,445,21],[1065,25,445,23],[1065,28,445,26,"args"],[1065,32,445,30],[1065,34,445,32],[1066,4,446,4],[1066,8,446,8,"logClient"],[1066,17,446,17],[1066,18,446,18,"logLevel"],[1066,26,446,26],[1066,30,446,30,"LogLevel"],[1066,45,446,38],[1066,46,446,38,"LogLevel"],[1066,54,446,38],[1066,55,446,39,"WARN"],[1066,59,446,43],[1066,61,446,45],[1067,6,447,8,"logClient"],[1067,15,447,17],[1067,16,447,18,"warn"],[1067,20,447,22],[1067,21,447,23],[1067,30,447,32,"SDK_VERSION"],[1067,42,447,43],[1067,43,447,43,"SDK_VERSION"],[1067,54,447,43],[1067,60,447,49,"msg"],[1067,63,447,52],[1067,65,447,54],[1067,67,447,56],[1067,70,447,59,"args"],[1067,74,447,63],[1067,75,447,64],[1068,4,448,4],[1069,2,449,0],[1070,2,450,0],[1070,11,450,9,"_logError"],[1070,20,450,18,"_logError"],[1070,21,450,19,"msg"],[1070,24,450,22],[1070,26,450,24],[1070,29,450,27,"args"],[1070,33,450,31],[1070,35,450,33],[1071,4,451,4],[1071,8,451,8,"logClient"],[1071,17,451,17],[1071,18,451,18,"logLevel"],[1071,26,451,26],[1071,30,451,30,"LogLevel"],[1071,45,451,38],[1071,46,451,38,"LogLevel"],[1071,54,451,38],[1071,55,451,39,"ERROR"],[1071,60,451,44],[1071,62,451,46],[1072,6,452,8,"logClient"],[1072,15,452,17],[1072,16,452,18,"error"],[1072,21,452,23],[1072,22,452,24],[1072,31,452,33,"SDK_VERSION"],[1072,43,452,44],[1072,44,452,44,"SDK_VERSION"],[1072,55,452,44],[1072,61,452,50,"msg"],[1072,64,452,53],[1072,66,452,55],[1072,68,452,57],[1072,71,452,60,"args"],[1072,75,452,64],[1072,76,452,65],[1073,4,453,4],[1074,2,454,0],[1076,2,456,0],[1077,0,457,0],[1078,0,458,0],[1079,0,459,0],[1080,0,460,0],[1081,0,461,0],[1082,0,462,0],[1083,0,463,0],[1084,0,464,0],[1085,0,465,0],[1086,0,466,0],[1087,0,467,0],[1088,0,468,0],[1089,0,469,0],[1090,0,470,0],[1091,0,471,0],[1092,2,472,0],[1092,11,472,9,"_fail"],[1092,16,472,14,"_fail"],[1092,17,472,15,"authOrCode"],[1092,27,472,25],[1092,29,472,27],[1092,32,472,30,"rest"],[1092,36,472,34],[1092,38,472,36],[1093,4,473,4],[1093,10,473,10,"createErrorInternal"],[1093,29,473,29],[1093,30,473,30,"authOrCode"],[1093,40,473,40],[1093,42,473,42],[1093,45,473,45,"rest"],[1093,49,473,49],[1093,50,473,50],[1094,2,474,0],[1095,2,475,0],[1095,11,475,9,"_createError"],[1095,23,475,21,"_createError"],[1095,24,475,22,"authOrCode"],[1095,34,475,32],[1095,36,475,34],[1095,39,475,37,"rest"],[1095,43,475,41],[1095,45,475,43],[1096,4,476,4],[1096,11,476,11,"createErrorInternal"],[1096,30,476,30],[1096,31,476,31,"authOrCode"],[1096,41,476,41],[1096,43,476,43],[1096,46,476,46,"rest"],[1096,50,476,50],[1096,51,476,51],[1097,2,477,0],[1098,2,478,0],[1098,11,478,9,"_errorWithCustomMessage"],[1098,34,478,32,"_errorWithCustomMessage"],[1098,35,478,33,"auth"],[1098,39,478,37],[1098,41,478,39,"code"],[1098,45,478,43],[1098,47,478,45,"message"],[1098,54,478,52],[1098,56,478,54],[1099,4,479,4],[1099,10,479,10,"errorMap"],[1099,18,479,18],[1099,21,479,21],[1100,6,480,8],[1100,9,480,11,"prodErrorMap"],[1100,21,480,23],[1100,22,480,24],[1100,23,480,25],[1101,6,481,8],[1101,7,481,9,"code"],[1101,11,481,13],[1101,14,481,16,"message"],[1102,4,482,4],[1102,5,482,5],[1103,4,483,4],[1103,10,483,10,"factory"],[1103,17,483,17],[1103,20,483,20],[1103,24,483,24,"ErrorFactory"],[1103,37,483,36],[1103,38,483,36,"ErrorFactory"],[1103,50,483,36],[1103,51,483,37],[1103,57,483,43],[1103,59,483,45],[1103,69,483,55],[1103,71,483,57,"errorMap"],[1103,79,483,65],[1103,80,483,66],[1104,4,484,4],[1104,11,484,11,"factory"],[1104,18,484,18],[1104,19,484,19,"create"],[1104,25,484,25],[1104,26,484,26,"code"],[1104,30,484,30],[1104,32,484,32],[1105,6,485,8,"appName"],[1105,13,485,15],[1105,15,485,17,"auth"],[1105,19,485,21],[1105,20,485,22,"name"],[1106,4,486,4],[1106,5,486,5],[1106,6,486,6],[1107,2,487,0],[1108,2,488,0],[1108,11,488,9,"_serverAppCurrentUserOperationNotSupportedError"],[1108,58,488,56,"_serverAppCurrentUserOperationNotSupportedError"],[1108,59,488,57,"auth"],[1108,63,488,61],[1108,65,488,63],[1109,4,489,4],[1109,11,489,11,"_errorWithCustomMessage"],[1109,34,489,34],[1109,35,489,35,"auth"],[1109,39,489,39],[1109,41,489,41],[1109,86,489,86],[1109,87,489,87],[1109,132,489,132],[1109,228,489,228],[1109,229,489,229],[1110,2,490,0],[1111,2,491,0],[1111,11,491,9,"createErrorInternal"],[1111,30,491,28,"createErrorInternal"],[1111,31,491,29,"authOrCode"],[1111,41,491,39],[1111,43,491,41],[1111,46,491,44,"rest"],[1111,50,491,48],[1111,52,491,50],[1112,4,492,4],[1112,8,492,8],[1112,15,492,15,"authOrCode"],[1112,25,492,25],[1112,30,492,30],[1112,38,492,38],[1112,40,492,40],[1113,6,493,8],[1113,12,493,14,"code"],[1113,16,493,18],[1113,19,493,21,"rest"],[1113,23,493,25],[1113,24,493,26],[1113,25,493,27],[1113,26,493,28],[1114,6,494,8],[1114,12,494,14,"fullParams"],[1114,22,494,24],[1114,25,494,27],[1114,26,494,28],[1114,29,494,31,"rest"],[1114,33,494,35],[1114,34,494,36,"slice"],[1114,39,494,41],[1114,40,494,42],[1114,41,494,43],[1114,42,494,44],[1114,43,494,45],[1115,6,495,8],[1115,10,495,12,"fullParams"],[1115,20,495,22],[1115,21,495,23],[1115,22,495,24],[1115,23,495,25],[1115,25,495,27],[1116,8,496,12,"fullParams"],[1116,18,496,22],[1116,19,496,23],[1116,20,496,24],[1116,21,496,25],[1116,22,496,26,"appName"],[1116,29,496,33],[1116,32,496,36,"authOrCode"],[1116,42,496,46],[1116,43,496,47,"name"],[1116,47,496,51],[1117,6,497,8],[1118,6,498,8],[1118,13,498,15,"authOrCode"],[1118,23,498,25],[1118,24,498,26,"_errorFactory"],[1118,37,498,39],[1118,38,498,40,"create"],[1118,44,498,46],[1118,45,498,47,"code"],[1118,49,498,51],[1118,51,498,53],[1118,54,498,56,"fullParams"],[1118,64,498,66],[1118,65,498,67],[1119,4,499,4],[1120,4,500,4],[1120,11,500,11,"_DEFAULT_AUTH_ERROR_FACTORY"],[1120,38,500,38],[1120,39,500,39,"create"],[1120,45,500,45],[1120,46,500,46,"authOrCode"],[1120,56,500,56],[1120,58,500,58],[1120,61,500,61,"rest"],[1120,65,500,65],[1120,66,500,66],[1121,2,501,0],[1122,2,502,0],[1122,11,502,9,"_assert"],[1122,18,502,16,"_assert"],[1122,19,502,17,"assertion"],[1122,28,502,26],[1122,30,502,28,"authOrCode"],[1122,40,502,38],[1122,42,502,40],[1122,45,502,43,"rest"],[1122,49,502,47],[1122,51,502,49],[1123,4,503,4],[1123,8,503,8],[1123,9,503,9,"assertion"],[1123,18,503,18],[1123,20,503,20],[1124,6,504,8],[1124,12,504,14,"createErrorInternal"],[1124,31,504,33],[1124,32,504,34,"authOrCode"],[1124,42,504,44],[1124,44,504,46],[1124,47,504,49,"rest"],[1124,51,504,53],[1124,52,504,54],[1125,4,505,4],[1126,2,506,0],[1127,2,507,0],[1128,0,508,0],[1129,0,509,0],[1130,0,510,0],[1131,0,511,0],[1132,0,512,0],[1133,2,513,0],[1133,11,513,9,"debugFail"],[1133,20,513,18,"debugFail"],[1133,21,513,19,"failure"],[1133,28,513,26],[1133,30,513,28],[1134,4,514,4],[1135,4,515,4],[1136,4,516,4],[1136,10,516,10,"message"],[1136,17,516,17],[1136,20,516,20],[1136,49,516,49],[1136,52,516,52,"failure"],[1136,59,516,59],[1137,4,517,4,"_logError"],[1137,13,517,13],[1137,14,517,14,"message"],[1137,21,517,21],[1137,22,517,22],[1138,4,518,4],[1139,4,519,4],[1140,4,520,4],[1141,4,521,4],[1141,10,521,10],[1141,14,521,14,"Error"],[1141,19,521,19],[1141,20,521,20,"message"],[1141,27,521,27],[1141,28,521,28],[1142,2,522,0],[1143,2,523,0],[1144,0,524,0],[1145,0,525,0],[1146,0,526,0],[1147,0,527,0],[1148,0,528,0],[1149,0,529,0],[1150,2,530,0],[1150,11,530,9,"debugAssert"],[1150,22,530,20,"debugAssert"],[1150,23,530,21,"assertion"],[1150,32,530,30],[1150,34,530,32,"message"],[1150,41,530,39],[1150,43,530,41],[1151,4,531,4],[1151,8,531,8],[1151,9,531,9,"assertion"],[1151,18,531,18],[1151,20,531,20],[1152,6,532,8,"debugFail"],[1152,15,532,17],[1152,16,532,18,"message"],[1152,23,532,25],[1152,24,532,26],[1153,4,533,4],[1154,2,534,0],[1156,2,536,0],[1157,0,537,0],[1158,0,538,0],[1159,0,539,0],[1160,0,540,0],[1161,0,541,0],[1162,0,542,0],[1163,0,543,0],[1164,0,544,0],[1165,0,545,0],[1166,0,546,0],[1167,0,547,0],[1168,0,548,0],[1169,0,549,0],[1170,0,550,0],[1171,0,551,0],[1172,2,552,0],[1172,11,552,9,"_getCurrentUrl"],[1172,25,552,23,"_getCurrentUrl"],[1172,26,552,23],[1172,28,552,26],[1173,4,553,4],[1173,11,553,12],[1173,18,553,19,"self"],[1173,22,553,23],[1173,27,553,28],[1173,38,553,39],[1173,42,553,43,"self"],[1173,46,553,47],[1173,47,553,48,"location"],[1173,55,553,56],[1173,57,553,58,"href"],[1173,61,553,62],[1173,65,553,67],[1173,67,553,69],[1174,2,554,0],[1175,2,555,0],[1175,11,555,9,"_isHttpOrHttps"],[1175,25,555,23,"_isHttpOrHttps"],[1175,26,555,23],[1175,28,555,26],[1176,4,556,4],[1176,11,556,11,"_getCurrentScheme"],[1176,28,556,28],[1176,29,556,29],[1176,30,556,30],[1176,35,556,35],[1176,42,556,42],[1176,46,556,46,"_getCurrentScheme"],[1176,63,556,63],[1176,64,556,64],[1176,65,556,65],[1176,70,556,70],[1176,78,556,78],[1177,2,557,0],[1178,2,558,0],[1178,11,558,9,"_getCurrentScheme"],[1178,28,558,26,"_getCurrentScheme"],[1178,29,558,26],[1178,31,558,29],[1179,4,559,4],[1179,11,559,12],[1179,18,559,19,"self"],[1179,22,559,23],[1179,27,559,28],[1179,38,559,39],[1179,42,559,43,"self"],[1179,46,559,47],[1179,47,559,48,"location"],[1179,55,559,56],[1179,57,559,58,"protocol"],[1179,65,559,66],[1179,69,559,71],[1179,73,559,75],[1180,2,560,0],[1182,2,562,0],[1183,0,563,0],[1184,0,564,0],[1185,0,565,0],[1186,0,566,0],[1187,0,567,0],[1188,0,568,0],[1189,0,569,0],[1190,0,570,0],[1191,0,571,0],[1192,0,572,0],[1193,0,573,0],[1194,0,574,0],[1195,0,575,0],[1196,0,576,0],[1197,0,577,0],[1198,2,578,0],[1199,0,579,0],[1200,0,580,0],[1201,2,581,0],[1201,11,581,9,"_isOnline"],[1201,20,581,18,"_isOnline"],[1201,21,581,18],[1201,23,581,21],[1202,4,582,4],[1202,8,582,8],[1202,15,582,15,"navigator"],[1202,24,582,24],[1202,29,582,29],[1202,40,582,40],[1202,44,583,8,"navigator"],[1202,53,583,17],[1202,57,584,8],[1202,65,584,16],[1202,69,584,20,"navigator"],[1202,78,584,29],[1202,82,585,8],[1202,89,585,15,"navigator"],[1202,98,585,24],[1202,99,585,25,"onLine"],[1202,105,585,31],[1202,110,585,36],[1202,119,585,45],[1203,4,586,8],[1204,4,587,8],[1205,4,588,8],[1206,4,589,8],[1207,4,590,8],[1208,4,591,9,"_isHttpOrHttps"],[1208,18,591,23],[1208,19,591,24],[1208,20,591,25],[1208,24,591,29],[1208,28,591,29,"isBrowserExtension"],[1208,41,591,47],[1208,42,591,47,"isBrowserExtension"],[1208,60,591,47],[1208,62,591,48],[1208,63,591,49],[1208,67,591,53],[1208,79,591,65],[1208,83,591,69,"navigator"],[1208,92,591,78],[1208,93,591,79],[1208,95,591,81],[1209,6,592,8],[1209,13,592,15,"navigator"],[1209,22,592,24],[1209,23,592,25,"onLine"],[1209,29,592,31],[1210,4,593,4],[1211,4,594,4],[1212,4,595,4],[1212,11,595,11],[1212,15,595,15],[1213,2,596,0],[1214,2,597,0],[1214,11,597,9,"_getUserLanguage"],[1214,27,597,25,"_getUserLanguage"],[1214,28,597,25],[1214,30,597,28],[1215,4,598,4],[1215,8,598,8],[1215,15,598,15,"navigator"],[1215,24,598,24],[1215,29,598,29],[1215,40,598,40],[1215,42,598,42],[1216,6,599,8],[1216,13,599,15],[1216,17,599,19],[1217,4,600,4],[1218,4,601,4],[1218,10,601,10,"navigatorLanguage"],[1218,27,601,27],[1218,30,601,30,"navigator"],[1218,39,601,39],[1219,4,602,4],[1220,6,603,4],[1221,6,604,5,"navigatorLanguage"],[1221,23,604,22],[1221,24,604,23,"languages"],[1221,33,604,32],[1221,37,604,36,"navigatorLanguage"],[1221,54,604,53],[1221,55,604,54,"languages"],[1221,64,604,63],[1221,65,604,64],[1221,66,604,65],[1221,67,604,66],[1222,6,605,8],[1223,6,606,8],[1224,6,607,8,"navigatorLanguage"],[1224,23,607,25],[1224,24,607,26,"language"],[1224,32,607,34],[1225,6,608,8],[1226,6,609,8],[1227,4,609,12],[1228,2,610,0],[1230,2,612,0],[1231,0,613,0],[1232,0,614,0],[1233,0,615,0],[1234,0,616,0],[1235,0,617,0],[1236,0,618,0],[1237,0,619,0],[1238,0,620,0],[1239,0,621,0],[1240,0,622,0],[1241,0,623,0],[1242,0,624,0],[1243,0,625,0],[1244,0,626,0],[1245,0,627,0],[1246,2,628,0],[1247,0,629,0],[1248,0,630,0],[1249,0,631,0],[1250,0,632,0],[1251,2,633,0],[1251,8,633,6,"Delay"],[1251,13,633,11],[1251,14,633,12],[1252,4,634,4,"constructor"],[1252,15,634,15,"constructor"],[1252,16,634,16,"shortDelay"],[1252,26,634,26],[1252,28,634,28,"longDelay"],[1252,37,634,37],[1252,39,634,39],[1253,6,635,8],[1253,10,635,12],[1253,11,635,13,"shortDelay"],[1253,21,635,23],[1253,24,635,26,"shortDelay"],[1253,34,635,36],[1254,6,636,8],[1254,10,636,12],[1254,11,636,13,"longDelay"],[1254,20,636,22],[1254,23,636,25,"longDelay"],[1254,32,636,34],[1255,6,637,8],[1256,6,638,8,"debugAssert"],[1256,17,638,19],[1256,18,638,20,"longDelay"],[1256,27,638,29],[1256,30,638,32,"shortDelay"],[1256,40,638,42],[1256,42,638,44],[1256,87,638,89],[1256,88,638,90],[1257,6,639,8],[1257,10,639,12],[1257,11,639,13,"isMobile"],[1257,19,639,21],[1257,22,639,24],[1257,26,639,24,"isMobileCordova"],[1257,39,639,39],[1257,40,639,39,"isMobileCordova"],[1257,55,639,39],[1257,57,639,40],[1257,58,639,41],[1257,62,639,45],[1257,66,639,45,"isReactNative"],[1257,79,639,58],[1257,80,639,58,"isReactNative"],[1257,93,639,58],[1257,95,639,59],[1257,96,639,60],[1258,4,640,4],[1259,4,641,4,"get"],[1259,7,641,7,"get"],[1259,8,641,7],[1259,10,641,10],[1260,6,642,8],[1260,10,642,12],[1260,11,642,13,"_isOnline"],[1260,20,642,22],[1260,21,642,23],[1260,22,642,24],[1260,24,642,26],[1261,8,643,12],[1262,8,644,12],[1262,15,644,19,"Math"],[1262,19,644,23],[1262,20,644,24,"min"],[1262,23,644,27],[1262,24,644,28],[1262,28,644,32],[1262,29,644,33],[1262,53,644,57],[1262,57,644,61],[1262,58,644,62,"shortDelay"],[1262,68,644,72],[1262,69,644,73],[1263,6,645,8],[1264,6,646,8],[1265,6,647,8],[1266,6,648,8],[1267,6,649,8],[1268,6,650,8],[1268,13,650,15],[1268,17,650,19],[1268,18,650,20,"isMobile"],[1268,26,650,28],[1268,29,650,31],[1268,33,650,35],[1268,34,650,36,"longDelay"],[1268,43,650,45],[1268,46,650,48],[1268,50,650,52],[1268,51,650,53,"shortDelay"],[1268,61,650,63],[1269,4,651,4],[1270,2,652,0],[1272,2,654,0],[1273,0,655,0],[1274,0,656,0],[1275,0,657,0],[1276,0,658,0],[1277,0,659,0],[1278,0,660,0],[1279,0,661,0],[1280,0,662,0],[1281,0,663,0],[1282,0,664,0],[1283,0,665,0],[1284,0,666,0],[1285,0,667,0],[1286,0,668,0],[1287,0,669,0],[1288,2,670,0],[1288,11,670,9,"_emulatorUrl"],[1288,23,670,21,"_emulatorUrl"],[1288,24,670,22,"config"],[1288,30,670,28],[1288,32,670,30,"path"],[1288,36,670,34],[1288,38,670,36],[1289,4,671,4,"debugAssert"],[1289,15,671,15],[1289,16,671,16,"config"],[1289,22,671,22],[1289,23,671,23,"emulator"],[1289,31,671,31],[1289,33,671,33],[1289,69,671,69],[1289,70,671,70],[1290,4,672,4],[1290,10,672,10],[1291,6,672,12,"url"],[1292,4,672,16],[1292,5,672,17],[1292,8,672,20,"config"],[1292,14,672,26],[1292,15,672,27,"emulator"],[1292,23,672,35],[1293,4,673,4],[1293,8,673,8],[1293,9,673,9,"path"],[1293,13,673,13],[1293,15,673,15],[1294,6,674,8],[1294,13,674,15,"url"],[1294,16,674,18],[1295,4,675,4],[1296,4,676,4],[1296,11,676,11],[1296,14,676,14,"url"],[1296,17,676,17],[1296,20,676,20,"path"],[1296,24,676,24],[1296,25,676,25,"startsWith"],[1296,35,676,35],[1296,36,676,36],[1296,39,676,39],[1296,40,676,40],[1296,43,676,43,"path"],[1296,47,676,47],[1296,48,676,48,"slice"],[1296,53,676,53],[1296,54,676,54],[1296,55,676,55],[1296,56,676,56],[1296,59,676,59,"path"],[1296,63,676,63],[1296,65,676,65],[1297,2,677,0],[1299,2,679,0],[1300,0,680,0],[1301,0,681,0],[1302,0,682,0],[1303,0,683,0],[1304,0,684,0],[1305,0,685,0],[1306,0,686,0],[1307,0,687,0],[1308,0,688,0],[1309,0,689,0],[1310,0,690,0],[1311,0,691,0],[1312,0,692,0],[1313,0,693,0],[1314,0,694,0],[1315,2,695,0],[1315,8,695,6,"FetchProvider"],[1315,21,695,19],[1315,22,695,20],[1316,4,696,4],[1316,11,696,11,"initialize"],[1316,21,696,21,"initialize"],[1316,22,696,22,"fetchImpl"],[1316,31,696,31],[1316,33,696,33,"headersImpl"],[1316,44,696,44],[1316,46,696,46,"responseImpl"],[1316,58,696,58],[1316,60,696,60],[1317,6,697,8],[1317,10,697,12],[1317,11,697,13,"fetchImpl"],[1317,20,697,22],[1317,23,697,25,"fetchImpl"],[1317,32,697,34],[1318,6,698,8],[1318,10,698,12,"headersImpl"],[1318,21,698,23],[1318,23,698,25],[1319,8,699,12],[1319,12,699,16],[1319,13,699,17,"headersImpl"],[1319,24,699,28],[1319,27,699,31,"headersImpl"],[1319,38,699,42],[1320,6,700,8],[1321,6,701,8],[1321,10,701,12,"responseImpl"],[1321,22,701,24],[1321,24,701,26],[1322,8,702,12],[1322,12,702,16],[1322,13,702,17,"responseImpl"],[1322,25,702,29],[1322,28,702,32,"responseImpl"],[1322,40,702,44],[1323,6,703,8],[1324,4,704,4],[1325,4,705,4],[1325,11,705,11,"fetch"],[1325,16,705,16,"fetch"],[1325,17,705,16],[1325,19,705,19],[1326,6,706,8],[1326,10,706,12],[1326,14,706,16],[1326,15,706,17,"fetchImpl"],[1326,24,706,26],[1326,26,706,28],[1327,8,707,12],[1327,15,707,19],[1327,19,707,23],[1327,20,707,24,"fetchImpl"],[1327,29,707,33],[1328,6,708,8],[1329,6,709,8],[1329,10,709,12],[1329,17,709,19,"self"],[1329,21,709,23],[1329,26,709,28],[1329,37,709,39],[1329,41,709,43],[1329,48,709,50],[1329,52,709,54,"self"],[1329,56,709,58],[1329,58,709,60],[1330,8,710,12],[1330,15,710,19,"self"],[1330,19,710,23],[1330,20,710,24,"fetch"],[1330,25,710,29],[1331,6,711,8],[1332,6,712,8],[1332,10,712,12],[1332,17,712,19,"globalThis"],[1332,27,712,29],[1332,32,712,34],[1332,43,712,45],[1332,47,712,49,"globalThis"],[1332,57,712,59],[1332,58,712,60,"fetch"],[1332,63,712,65],[1332,65,712,67],[1333,8,713,12],[1333,15,713,19,"globalThis"],[1333,25,713,29],[1333,26,713,30,"fetch"],[1333,31,713,35],[1334,6,714,8],[1335,6,715,8],[1335,10,715,12],[1335,17,715,19,"fetch"],[1335,22,715,24],[1335,27,715,29],[1335,38,715,40],[1335,40,715,42],[1336,8,716,12],[1336,15,716,19,"fetch"],[1336,20,716,24],[1337,6,717,8],[1338,6,718,8,"debugFail"],[1338,15,718,17],[1338,16,718,18],[1338,129,718,131],[1338,130,718,132],[1339,4,719,4],[1340,4,720,4],[1340,11,720,11,"headers"],[1340,18,720,18,"headers"],[1340,19,720,18],[1340,21,720,21],[1341,6,721,8],[1341,10,721,12],[1341,14,721,16],[1341,15,721,17,"headersImpl"],[1341,26,721,28],[1341,28,721,30],[1342,8,722,12],[1342,15,722,19],[1342,19,722,23],[1342,20,722,24,"headersImpl"],[1342,31,722,35],[1343,6,723,8],[1344,6,724,8],[1344,10,724,12],[1344,17,724,19,"self"],[1344,21,724,23],[1344,26,724,28],[1344,37,724,39],[1344,41,724,43],[1344,50,724,52],[1344,54,724,56,"self"],[1344,58,724,60],[1344,60,724,62],[1345,8,725,12],[1345,15,725,19,"self"],[1345,19,725,23],[1345,20,725,24,"Headers"],[1345,27,725,31],[1346,6,726,8],[1347,6,727,8],[1347,10,727,12],[1347,17,727,19,"globalThis"],[1347,27,727,29],[1347,32,727,34],[1347,43,727,45],[1347,47,727,49,"globalThis"],[1347,57,727,59],[1347,58,727,60,"Headers"],[1347,65,727,67],[1347,67,727,69],[1348,8,728,12],[1348,15,728,19,"globalThis"],[1348,25,728,29],[1348,26,728,30,"Headers"],[1348,33,728,37],[1349,6,729,8],[1350,6,730,8],[1350,10,730,12],[1350,17,730,19,"Headers"],[1350,24,730,26],[1350,29,730,31],[1350,40,730,42],[1350,42,730,44],[1351,8,731,12],[1351,15,731,19,"Headers"],[1351,22,731,26],[1352,6,732,8],[1353,6,733,8,"debugFail"],[1353,15,733,17],[1353,16,733,18],[1353,131,733,133],[1353,132,733,134],[1354,4,734,4],[1355,4,735,4],[1355,11,735,11,"response"],[1355,19,735,19,"response"],[1355,20,735,19],[1355,22,735,22],[1356,6,736,8],[1356,10,736,12],[1356,14,736,16],[1356,15,736,17,"responseImpl"],[1356,27,736,29],[1356,29,736,31],[1357,8,737,12],[1357,15,737,19],[1357,19,737,23],[1357,20,737,24,"responseImpl"],[1357,32,737,36],[1358,6,738,8],[1359,6,739,8],[1359,10,739,12],[1359,17,739,19,"self"],[1359,21,739,23],[1359,26,739,28],[1359,37,739,39],[1359,41,739,43],[1359,51,739,53],[1359,55,739,57,"self"],[1359,59,739,61],[1359,61,739,63],[1360,8,740,12],[1360,15,740,19,"self"],[1360,19,740,23],[1360,20,740,24,"Response"],[1360,28,740,32],[1361,6,741,8],[1362,6,742,8],[1362,10,742,12],[1362,17,742,19,"globalThis"],[1362,27,742,29],[1362,32,742,34],[1362,43,742,45],[1362,47,742,49,"globalThis"],[1362,57,742,59],[1362,58,742,60,"Response"],[1362,66,742,68],[1362,68,742,70],[1363,8,743,12],[1363,15,743,19,"globalThis"],[1363,25,743,29],[1363,26,743,30,"Response"],[1363,34,743,38],[1364,6,744,8],[1365,6,745,8],[1365,10,745,12],[1365,17,745,19,"Response"],[1365,25,745,27],[1365,30,745,32],[1365,41,745,43],[1365,43,745,45],[1366,8,746,12],[1366,15,746,19,"Response"],[1366,23,746,27],[1367,6,747,8],[1368,6,748,8,"debugFail"],[1368,15,748,17],[1368,16,748,18],[1368,132,748,134],[1368,133,748,135],[1369,4,749,4],[1370,2,750,0],[1372,2,752,0],[1373,0,753,0],[1374,0,754,0],[1375,0,755,0],[1376,0,756,0],[1377,0,757,0],[1378,0,758,0],[1379,0,759,0],[1380,0,760,0],[1381,0,761,0],[1382,0,762,0],[1383,0,763,0],[1384,0,764,0],[1385,0,765,0],[1386,0,766,0],[1387,0,767,0],[1388,2,768,0],[1389,0,769,0],[1390,0,770,0],[1391,2,771,0],[1391,8,771,6,"SERVER_ERROR_MAP"],[1391,24,771,22],[1391,27,771,25],[1392,4,772,4],[1393,4,773,4],[1393,5,773,5],[1393,26,773,26],[1393,27,773,27],[1393,67,773,67],[1393,90,773,90],[1393,91,773,91],[1395,4,774,4],[1396,4,775,4],[1396,5,775,5],[1396,27,775,27],[1396,28,775,28],[1396,69,775,69],[1396,85,775,85],[1396,86,775,86],[1398,4,776,4],[1399,4,777,4],[1399,5,777,5],[1399,25,777,25],[1399,26,777,26],[1399,65,777,65],[1399,80,777,80],[1399,81,777,81],[1401,4,778,4],[1402,4,779,4],[1402,5,779,5],[1402,27,779,27],[1402,28,779,28],[1402,69,779,69],[1402,85,779,85],[1402,86,779,86],[1404,4,780,4],[1405,4,781,4],[1405,5,781,5],[1405,23,781,23],[1405,24,781,24],[1405,61,781,61],[1405,77,781,77],[1405,78,781,78],[1407,4,782,4],[1408,4,783,4],[1408,5,783,5],[1408,23,783,23],[1408,24,783,24],[1408,61,783,61],[1408,79,783,79],[1408,80,783,80],[1410,4,784,4],[1411,4,785,4],[1412,4,786,4],[1412,5,786,5],[1412,32,786,32],[1412,33,786,33],[1412,79,786,79],[1412,99,786,99],[1412,100,786,100],[1414,4,787,4],[1415,4,788,4],[1415,5,788,5],[1415,19,788,19],[1415,20,788,20],[1415,53,788,53],[1415,75,788,75],[1415,76,788,76],[1416,4,789,4],[1416,5,789,5],[1416,30,789,30],[1416,31,789,31],[1416,75,789,75],[1416,98,789,98],[1416,99,789,99],[1418,4,790,4],[1419,4,791,4],[1419,5,791,5],[1419,27,791,27],[1419,28,791,28],[1419,69,791,69],[1419,89,791,89],[1419,90,791,90],[1420,4,792,4],[1420,5,792,5],[1420,28,792,28],[1420,29,792,29],[1420,71,792,71],[1420,91,792,91],[1420,92,792,92],[1421,4,793,4],[1421,5,793,5],[1421,39,793,39],[1421,40,793,40],[1421,93,793,93],[1421,120,793,120],[1421,121,793,121],[1423,4,794,4],[1424,4,795,4],[1424,5,795,5],[1424,23,795,23],[1424,24,795,24],[1424,61,795,61],[1424,77,795,77],[1424,78,795,78],[1426,4,796,4],[1427,4,797,4],[1427,5,797,5],[1427,22,797,22],[1427,23,797,23],[1427,59,797,59],[1427,75,797,75],[1427,76,797,76],[1428,4,798,4],[1428,5,798,5],[1428,34,798,34],[1428,35,798,35],[1428,83,798,83],[1428,102,798,102],[1428,103,798,103],[1429,4,799,4],[1429,5,799,5],[1429,23,799,23],[1429,24,799,24],[1429,61,799,61],[1429,82,799,82],[1429,83,799,83],[1430,4,800,4],[1430,5,800,5],[1430,23,800,23],[1430,24,800,24],[1430,61,800,61],[1430,82,800,82],[1430,83,800,83],[1432,4,801,4],[1433,4,802,4],[1433,5,802,5],[1433,23,802,23],[1433,24,802,24],[1433,61,802,61],[1433,77,802,77],[1433,78,802,78],[1435,4,803,4],[1436,4,804,4],[1436,5,804,5],[1436,37,804,37],[1436,38,804,38],[1436,89,804,89],[1436,112,804,112],[1436,113,804,113],[1437,4,805,4],[1437,5,805,5],[1437,23,805,23],[1437,24,805,24],[1437,61,805,61],[1437,81,805,81],[1437,82,805,82],[1438,4,806,4],[1438,5,806,5],[1438,20,806,20],[1438,21,806,21],[1438,55,806,55],[1438,75,806,75],[1438,76,806,76],[1439,4,807,4],[1439,5,807,5],[1439,21,807,21],[1439,22,807,22],[1439,57,807,57],[1439,77,807,77],[1439,78,807,78],[1441,4,808,4],[1442,4,809,4],[1442,5,809,5],[1442,34,809,34],[1442,35,809,35],[1442,83,809,83],[1442,102,809,102],[1442,103,809,103],[1443,4,810,4],[1443,5,810,5],[1443,42,810,42],[1443,43,810,43],[1443,99,810,99],[1443,136,810,136],[1443,137,810,137],[1445,4,811,4],[1446,4,812,4],[1446,5,812,5],[1446,19,812,19],[1446,20,812,20],[1446,53,812,53],[1446,80,812,80],[1446,81,812,81],[1447,4,813,4],[1447,5,813,5],[1447,27,813,27],[1447,28,813,28],[1447,69,813,69],[1447,94,813,94],[1447,95,813,95],[1448,4,814,4],[1448,5,814,5],[1448,30,814,30],[1448,31,814,31],[1448,75,814,75],[1448,95,814,95],[1448,96,814,96],[1449,4,815,4],[1449,5,815,5],[1449,27,815,27],[1449,28,815,28],[1449,69,815,69],[1449,94,815,94],[1449,95,815,95],[1450,4,816,4],[1450,5,816,5],[1450,22,816,22],[1450,23,816,23],[1450,59,816,59],[1450,73,816,73],[1450,74,816,74],[1452,4,817,4],[1453,4,818,4],[1454,4,819,4],[1455,4,820,4],[1455,5,820,5],[1455,35,820,35],[1455,36,820,36],[1455,85,820,85],[1455,111,820,111],[1455,112,820,112],[1456,4,821,4],[1456,5,821,5],[1456,26,821,26],[1456,27,821,27],[1456,67,821,67],[1456,94,821,94],[1456,95,821,95],[1458,4,822,4],[1459,4,823,4],[1459,5,823,5],[1459,30,823,30],[1459,31,823,31],[1459,75,823,75],[1459,100,823,100],[1459,101,823,101],[1461,4,824,4],[1462,4,825,4],[1462,5,825,5],[1462,27,825,27],[1462,28,825,28],[1462,69,825,69],[1462,97,825,97],[1462,98,825,98],[1464,4,826,4],[1465,4,827,4],[1465,5,827,5],[1465,37,827,37],[1465,38,827,38],[1465,89,827,89],[1465,119,827,119],[1465,120,827,120],[1466,4,828,4],[1466,5,828,5],[1466,31,828,31],[1466,32,828,32],[1466,77,828,77],[1466,106,828,106],[1466,107,828,107],[1467,4,829,4],[1467,5,829,5],[1467,32,829,32],[1467,33,829,33],[1467,79,829,79],[1467,106,829,106],[1467,107,829,107],[1468,4,830,4],[1468,5,830,5],[1468,37,830,37],[1468,38,830,38],[1468,89,830,89],[1468,119,830,119],[1468,120,830,120],[1469,4,831,4],[1469,5,831,5],[1469,27,831,27],[1469,28,831,28],[1469,69,831,69],[1469,99,831,99],[1469,100,831,100],[1470,4,832,4],[1470,5,832,5],[1470,35,832,35],[1470,36,832,36],[1470,85,832,85],[1470,123,832,123],[1470,124,832,124],[1472,4,833,4],[1473,4,834,4],[1473,5,834,5],[1473,39,834,39],[1473,40,834,40],[1473,93,834,93],[1473,109,834,109],[1473,110,834,110],[1475,4,835,4],[1476,4,836,4],[1476,5,836,5],[1476,28,836,28],[1476,29,836,29],[1476,71,836,71],[1476,94,836,94],[1476,95,836,95],[1477,4,837,4],[1477,5,837,5],[1477,30,837,30],[1477,31,837,31],[1477,75,837,75],[1477,100,837,100],[1477,101,837,101],[1478,4,838,4],[1478,5,838,5],[1478,30,838,30],[1478,31,838,31],[1478,75,838,75],[1478,100,838,100],[1478,101,838,101],[1479,4,839,4],[1479,5,839,5],[1479,31,839,31],[1479,32,839,32],[1479,77,839,77],[1479,103,839,103],[1479,104,839,104],[1480,4,840,4],[1480,5,840,5],[1480,26,840,26],[1480,27,840,27],[1480,67,840,67],[1480,88,840,88],[1480,89,840,89],[1481,4,841,4],[1481,5,841,5],[1481,32,841,32],[1481,33,841,33],[1481,79,841,79],[1481,106,841,106],[1481,107,841,107],[1482,4,842,4],[1482,5,842,5],[1482,32,842,32],[1482,33,842,33],[1482,79,842,79],[1482,106,842,106],[1482,107,842,107],[1483,4,843,4],[1483,5,843,5],[1483,23,843,23],[1483,24,843,24],[1483,61,843,61],[1483,79,843,79],[1483,80,843,80],[1484,2,844,0],[1484,3,844,1],[1486,2,846,0],[1487,0,847,0],[1488,0,848,0],[1489,0,849,0],[1490,0,850,0],[1491,0,851,0],[1492,0,852,0],[1493,0,853,0],[1494,0,854,0],[1495,0,855,0],[1496,0,856,0],[1497,0,857,0],[1498,0,858,0],[1499,0,859,0],[1500,0,860,0],[1501,0,861,0],[1502,2,862,0],[1502,8,862,6,"CookieAuthProxiedEndpoints"],[1502,34,862,32],[1502,37,862,35],[1502,38,863,4],[1502,74,863,40],[1502,75,863,41],[1502,117,864,4],[1502,151,864,38],[1502,152,864,39],[1502,192,865,4],[1502,220,865,32],[1502,221,865,33],[1502,254,866,4],[1502,287,866,37],[1502,288,866,38],[1502,326,867,4],[1502,362,867,40],[1502,363,867,41],[1502,405,868,4],[1502,416,868,15],[1502,417,868,16],[1502,438,869,1],[1503,2,870,0],[1503,8,870,6,"DEFAULT_API_TIMEOUT_MS"],[1503,30,870,28],[1503,33,870,31],[1503,37,870,35,"Delay"],[1503,42,870,40],[1503,43,870,41],[1503,48,870,46],[1503,50,870,48],[1503,55,870,53],[1503,56,870,54],[1504,2,871,0],[1504,11,871,9,"_addTidIfNecessary"],[1504,29,871,27,"_addTidIfNecessary"],[1504,30,871,28,"auth"],[1504,34,871,32],[1504,36,871,34,"request"],[1504,43,871,41],[1504,45,871,43],[1505,4,872,4],[1505,8,872,8,"auth"],[1505,12,872,12],[1505,13,872,13,"tenantId"],[1505,21,872,21],[1505,25,872,25],[1505,26,872,26,"request"],[1505,33,872,33],[1505,34,872,34,"tenantId"],[1505,42,872,42],[1505,44,872,44],[1506,6,873,8],[1506,13,873,15],[1507,8,874,12],[1507,11,874,15,"request"],[1507,18,874,22],[1508,8,875,12,"tenantId"],[1508,16,875,20],[1508,18,875,22,"auth"],[1508,22,875,26],[1508,23,875,27,"tenantId"],[1509,6,876,8],[1509,7,876,9],[1510,4,877,4],[1511,4,878,4],[1511,11,878,11,"request"],[1511,18,878,18],[1512,2,879,0],[1513,2,880,0],[1513,17,880,15,"_performApiRequest"],[1513,35,880,33,"_performApiRequest"],[1513,36,880,34,"auth"],[1513,40,880,38],[1513,42,880,40,"method"],[1513,48,880,46],[1513,50,880,48,"path"],[1513,54,880,52],[1513,56,880,54,"request"],[1513,63,880,61],[1513,65,880,63,"customErrorMap"],[1513,79,880,77],[1513,82,880,80],[1513,83,880,81],[1513,84,880,82],[1513,86,880,84],[1514,4,881,4],[1514,11,881,11,"_performFetchWithErrorHandling"],[1514,41,881,41],[1514,42,881,42,"auth"],[1514,46,881,46],[1514,48,881,48,"customErrorMap"],[1514,62,881,62],[1514,64,881,64],[1514,76,881,76],[1515,6,882,8],[1515,10,882,12,"body"],[1515,14,882,16],[1515,17,882,19],[1515,18,882,20],[1515,19,882,21],[1516,6,883,8],[1516,10,883,12,"params"],[1516,16,883,18],[1516,19,883,21],[1516,20,883,22],[1516,21,883,23],[1517,6,884,8],[1517,10,884,12,"request"],[1517,17,884,19],[1517,19,884,21],[1518,8,885,12],[1518,12,885,16,"method"],[1518,18,885,22],[1518,23,885,27],[1518,28,885,32],[1518,29,885,33],[1518,51,885,55],[1519,10,886,16,"params"],[1519,16,886,22],[1519,19,886,25,"request"],[1519,26,886,32],[1520,8,887,12],[1520,9,887,13],[1520,15,888,17],[1521,10,889,16,"body"],[1521,14,889,20],[1521,17,889,23],[1522,12,890,20,"body"],[1522,16,890,24],[1522,18,890,26,"JSON"],[1522,22,890,30],[1522,23,890,31,"stringify"],[1522,32,890,40],[1522,33,890,41,"request"],[1522,40,890,48],[1523,10,891,16],[1523,11,891,17],[1524,8,892,12],[1525,6,893,8],[1526,6,894,8],[1526,12,894,14,"query"],[1526,17,894,19],[1526,20,894,22],[1526,24,894,22,"querystring"],[1526,37,894,33],[1526,38,894,33,"querystring"],[1526,49,894,33],[1526,51,894,34],[1527,8,895,12,"key"],[1527,11,895,15],[1527,13,895,17,"auth"],[1527,17,895,21],[1527,18,895,22,"config"],[1527,24,895,28],[1527,25,895,29,"apiKey"],[1527,31,895,35],[1528,8,896,12],[1528,11,896,15,"params"],[1529,6,897,8],[1529,7,897,9],[1529,8,897,10],[1529,9,897,11,"slice"],[1529,14,897,16],[1529,15,897,17],[1529,16,897,18],[1529,17,897,19],[1530,6,898,8],[1530,12,898,14,"headers"],[1530,19,898,21],[1530,22,898,24],[1530,28,898,30,"auth"],[1530,32,898,34],[1530,33,898,35,"_getAdditionalHeaders"],[1530,54,898,56],[1530,55,898,57],[1530,56,898,58],[1531,6,899,8,"headers"],[1531,13,899,15],[1531,14,899,16],[1531,28,899,30],[1531,29,899,31],[1531,59,899,61],[1531,62,899,64],[1531,80,899,82],[1532,6,900,8],[1532,10,900,12,"auth"],[1532,14,900,16],[1532,15,900,17,"languageCode"],[1532,27,900,29],[1532,29,900,31],[1533,8,901,12,"headers"],[1533,15,901,19],[1533,16,901,20],[1533,35,901,39],[1533,36,901,40],[1533,71,901,75],[1533,74,901,78,"auth"],[1533,78,901,82],[1533,79,901,83,"languageCode"],[1533,91,901,95],[1534,6,902,8],[1535,6,903,8],[1535,12,903,14,"fetchArgs"],[1535,21,903,23],[1535,24,903,26],[1536,8,904,12,"method"],[1536,14,904,18],[1537,8,905,12,"headers"],[1537,15,905,19],[1538,8,906,12],[1538,11,906,15,"body"],[1539,6,907,8],[1539,7,907,9],[1540,6,908,8],[1541,0,909,0],[1542,0,910,0],[1543,0,911,0],[1544,6,912,8],[1544,10,912,12],[1544,11,912,13],[1544,15,912,13,"isCloudflareWorker"],[1544,28,912,31],[1544,29,912,31,"isCloudflareWorker"],[1544,47,912,31],[1544,49,912,32],[1544,50,912,33],[1544,52,912,35],[1545,8,913,12,"fetchArgs"],[1545,17,913,21],[1545,18,913,22,"referrerPolicy"],[1545,32,913,36],[1545,35,913,39],[1545,48,913,52],[1546,6,914,8],[1547,6,915,8],[1547,10,915,12,"auth"],[1547,14,915,16],[1547,15,915,17,"emulatorConfig"],[1547,29,915,31],[1547,33,915,35],[1547,37,915,35,"isCloudWorkstation"],[1547,50,915,53],[1547,51,915,53,"isCloudWorkstation"],[1547,69,915,53],[1547,71,915,54,"auth"],[1547,75,915,58],[1547,76,915,59,"emulatorConfig"],[1547,90,915,73],[1547,91,915,74,"host"],[1547,95,915,78],[1547,96,915,79],[1547,98,915,81],[1548,8,916,12,"fetchArgs"],[1548,17,916,21],[1548,18,916,22,"credentials"],[1548,29,916,33],[1548,32,916,36],[1548,41,916,45],[1549,6,917,8],[1550,6,918,8],[1550,13,918,15,"FetchProvider"],[1550,26,918,28],[1550,27,918,29,"fetch"],[1550,32,918,34],[1550,33,918,35],[1550,34,918,36],[1550,35,918,37],[1550,41,918,43,"_getFinalTarget"],[1550,56,918,58],[1550,57,918,59,"auth"],[1550,61,918,63],[1550,63,918,65,"auth"],[1550,67,918,69],[1550,68,918,70,"config"],[1550,74,918,76],[1550,75,918,77,"apiHost"],[1550,82,918,84],[1550,84,918,86,"path"],[1550,88,918,90],[1550,90,918,92,"query"],[1550,95,918,97],[1550,96,918,98],[1550,98,918,100,"fetchArgs"],[1550,107,918,109],[1550,108,918,110],[1551,4,919,4],[1551,5,919,5],[1551,6,919,6],[1552,2,920,0],[1553,2,921,0],[1553,17,921,15,"_performFetchWithErrorHandling"],[1553,47,921,45,"_performFetchWithErrorHandling"],[1553,48,921,46,"auth"],[1553,52,921,50],[1553,54,921,52,"customErrorMap"],[1553,68,921,66],[1553,70,921,68,"fetchFn"],[1553,77,921,75],[1553,79,921,77],[1554,4,922,4,"auth"],[1554,8,922,8],[1554,9,922,9,"_canInitEmulator"],[1554,25,922,25],[1554,28,922,28],[1554,33,922,33],[1555,4,923,4],[1555,10,923,10,"errorMap"],[1555,18,923,18],[1555,21,923,21],[1556,6,923,23],[1556,9,923,26,"SERVER_ERROR_MAP"],[1556,25,923,42],[1557,6,923,44],[1557,9,923,47,"customErrorMap"],[1558,4,923,62],[1558,5,923,63],[1559,4,924,4],[1559,8,924,8],[1560,6,925,8],[1560,12,925,14,"networkTimeout"],[1560,26,925,28],[1560,29,925,31],[1560,33,925,35,"NetworkTimeout"],[1560,47,925,49],[1560,48,925,50,"auth"],[1560,52,925,54],[1560,53,925,55],[1561,6,926,8],[1561,12,926,14,"response"],[1561,20,926,22],[1561,23,926,25],[1561,29,926,31,"Promise"],[1561,36,926,38],[1561,37,926,39,"race"],[1561,41,926,43],[1561,42,926,44],[1561,43,927,12,"fetchFn"],[1561,50,927,19],[1561,51,927,20],[1561,52,927,21],[1561,54,928,12,"networkTimeout"],[1561,68,928,26],[1561,69,928,27,"promise"],[1561,76,928,34],[1561,77,929,9],[1561,78,929,10],[1562,6,930,8],[1563,6,931,8],[1564,6,932,8,"networkTimeout"],[1564,20,932,22],[1564,21,932,23,"clearNetworkTimeout"],[1564,40,932,42],[1564,41,932,43],[1564,42,932,44],[1565,6,933,8],[1565,12,933,14,"json"],[1565,16,933,18],[1565,19,933,21],[1565,25,933,27,"response"],[1565,33,933,35],[1565,34,933,36,"json"],[1565,38,933,40],[1565,39,933,41],[1565,40,933,42],[1566,6,934,8],[1566,10,934,12],[1566,28,934,30],[1566,32,934,34,"json"],[1566,36,934,38],[1566,38,934,40],[1567,8,935,12],[1567,14,935,18,"_makeTaggedError"],[1567,30,935,34],[1567,31,935,35,"auth"],[1567,35,935,39],[1567,37,935,41],[1567,79,935,83],[1567,80,935,84],[1567,119,935,123,"json"],[1567,123,935,127],[1567,124,935,128],[1568,6,936,8],[1569,6,937,8],[1569,10,937,12,"response"],[1569,18,937,20],[1569,19,937,21,"ok"],[1569,21,937,23],[1569,25,937,27],[1569,27,937,29],[1569,41,937,43],[1569,45,937,47,"json"],[1569,49,937,51],[1569,50,937,52],[1569,52,937,54],[1570,8,938,12],[1570,15,938,19,"json"],[1570,19,938,23],[1571,6,939,8],[1571,7,939,9],[1571,13,940,13],[1572,8,941,12],[1572,14,941,18,"errorMessage"],[1572,26,941,30],[1572,29,941,33,"response"],[1572,37,941,41],[1572,38,941,42,"ok"],[1572,40,941,44],[1572,43,941,47,"json"],[1572,47,941,51],[1572,48,941,52,"errorMessage"],[1572,60,941,64],[1572,63,941,67,"json"],[1572,67,941,71],[1572,68,941,72,"error"],[1572,73,941,77],[1572,74,941,78,"message"],[1572,81,941,85],[1573,8,942,12],[1573,14,942,18],[1573,15,942,19,"serverErrorCode"],[1573,30,942,34],[1573,32,942,36,"serverErrorMessage"],[1573,50,942,54],[1573,51,942,55],[1573,54,942,58,"errorMessage"],[1573,66,942,70],[1573,67,942,71,"split"],[1573,72,942,76],[1573,73,942,77],[1573,78,942,82],[1573,79,942,83],[1574,8,943,12],[1574,12,943,16,"serverErrorCode"],[1574,27,943,31],[1574,32,943,36],[1574,66,943,70],[1574,67,943,71],[1574,119,943,123],[1575,10,944,16],[1575,16,944,22,"_makeTaggedError"],[1575,32,944,38],[1575,33,944,39,"auth"],[1575,37,944,43],[1575,39,944,45],[1575,66,944,72],[1575,67,944,73],[1575,114,944,120,"json"],[1575,118,944,124],[1575,119,944,125],[1576,8,945,12],[1576,9,945,13],[1576,15,946,17],[1576,19,946,21,"serverErrorCode"],[1576,34,946,36],[1576,39,946,41],[1576,53,946,55],[1576,54,946,56],[1576,86,946,88],[1577,10,947,16],[1577,16,947,22,"_makeTaggedError"],[1577,32,947,38],[1577,33,947,39,"auth"],[1577,37,947,43],[1577,39,947,45],[1577,61,947,67],[1577,62,947,68],[1577,96,947,102,"json"],[1577,100,947,106],[1577,101,947,107],[1578,8,948,12],[1578,9,948,13],[1578,15,949,17],[1578,19,949,21,"serverErrorCode"],[1578,34,949,36],[1578,39,949,41],[1578,54,949,56],[1578,55,949,57],[1578,88,949,90],[1579,10,950,16],[1579,16,950,22,"_makeTaggedError"],[1579,32,950,38],[1579,33,950,39,"auth"],[1579,37,950,43],[1579,39,950,45],[1579,54,950,60],[1579,55,950,61],[1579,90,950,96,"json"],[1579,94,950,100],[1579,95,950,101],[1580,8,951,12],[1581,8,952,12],[1581,14,952,18,"authError"],[1581,23,952,27],[1581,26,952,30,"errorMap"],[1581,34,952,38],[1581,35,952,39,"serverErrorCode"],[1581,50,952,54],[1581,51,952,55],[1581,55,953,16,"serverErrorCode"],[1581,70,953,31],[1581,71,954,21,"toLowerCase"],[1581,82,954,32],[1581,83,954,33],[1581,84,954,34],[1581,85,955,21,"replace"],[1581,92,955,28],[1581,93,955,29],[1581,102,955,38],[1581,104,955,40],[1581,107,955,43],[1581,108,955,44],[1582,8,956,12],[1582,12,956,16,"serverErrorMessage"],[1582,30,956,34],[1582,32,956,36],[1583,10,957,16],[1583,16,957,22,"_errorWithCustomMessage"],[1583,39,957,45],[1583,40,957,46,"auth"],[1583,44,957,50],[1583,46,957,52,"authError"],[1583,55,957,61],[1583,57,957,63,"serverErrorMessage"],[1583,75,957,81],[1583,76,957,82],[1584,8,958,12],[1584,9,958,13],[1584,15,959,17],[1585,10,960,16,"_fail"],[1585,15,960,21],[1585,16,960,22,"auth"],[1585,20,960,26],[1585,22,960,28,"authError"],[1585,31,960,37],[1585,32,960,38],[1586,8,961,12],[1587,6,962,8],[1588,4,963,4],[1588,5,963,5],[1588,6,964,4],[1588,13,964,11,"e"],[1588,14,964,12],[1588,16,964,14],[1589,6,965,8],[1589,10,965,12,"e"],[1589,11,965,13],[1589,23,965,25,"FirebaseError"],[1589,36,965,38],[1589,37,965,38,"FirebaseError"],[1589,50,965,38],[1589,52,965,40],[1590,8,966,12],[1590,14,966,18,"e"],[1590,15,966,19],[1591,6,967,8],[1592,6,968,8],[1593,6,969,8],[1594,6,970,8],[1595,6,971,8,"_fail"],[1595,11,971,13],[1595,12,971,14,"auth"],[1595,16,971,18],[1595,18,971,20],[1595,42,971,44],[1595,43,971,45],[1595,87,971,89],[1596,8,971,91],[1596,17,971,100],[1596,19,971,102,"String"],[1596,25,971,108],[1596,26,971,109,"e"],[1596,27,971,110],[1597,6,971,112],[1597,7,971,113],[1597,8,971,114],[1598,4,972,4],[1599,2,973,0],[1600,2,974,0],[1600,17,974,15,"_performSignInRequest"],[1600,38,974,36,"_performSignInRequest"],[1600,39,974,37,"auth"],[1600,43,974,41],[1600,45,974,43,"method"],[1600,51,974,49],[1600,53,974,51,"path"],[1600,57,974,55],[1600,59,974,57,"request"],[1600,66,974,64],[1600,68,974,66,"customErrorMap"],[1600,82,974,80],[1600,85,974,83],[1600,86,974,84],[1600,87,974,85],[1600,89,974,87],[1601,4,975,4],[1601,10,975,10,"serverResponse"],[1601,24,975,24],[1601,27,975,27],[1601,33,975,33,"_performApiRequest"],[1601,51,975,51],[1601,52,975,52,"auth"],[1601,56,975,56],[1601,58,975,58,"method"],[1601,64,975,64],[1601,66,975,66,"path"],[1601,70,975,70],[1601,72,975,72,"request"],[1601,79,975,79],[1601,81,975,81,"customErrorMap"],[1601,95,975,95],[1601,96,975,96],[1602,4,976,4],[1602,8,976,8],[1602,30,976,30],[1602,34,976,34,"serverResponse"],[1602,48,976,48],[1602,50,976,50],[1603,6,977,8,"_fail"],[1603,11,977,13],[1603,12,977,14,"auth"],[1603,16,977,18],[1603,18,977,20],[1603,46,977,48],[1603,47,977,49],[1603,81,977,83],[1604,8,978,12,"_serverResponse"],[1604,23,978,27],[1604,25,978,29,"serverResponse"],[1605,6,979,8],[1605,7,979,9],[1605,8,979,10],[1606,4,980,4],[1607,4,981,4],[1607,11,981,11,"serverResponse"],[1607,25,981,25],[1608,2,982,0],[1609,2,983,0],[1609,17,983,15,"_getFinalTarget"],[1609,32,983,30,"_getFinalTarget"],[1609,33,983,31,"auth"],[1609,37,983,35],[1609,39,983,37,"host"],[1609,43,983,41],[1609,45,983,43,"path"],[1609,49,983,47],[1609,51,983,49,"query"],[1609,56,983,54],[1609,58,983,56],[1610,4,984,4],[1610,10,984,10,"base"],[1610,14,984,14],[1610,17,984,17],[1610,20,984,20,"host"],[1610,24,984,24],[1610,27,984,27,"path"],[1610,31,984,31],[1610,35,984,35,"query"],[1610,40,984,40],[1610,42,984,42],[1611,4,985,4],[1611,10,985,10,"authInternal"],[1611,22,985,22],[1611,25,985,25,"auth"],[1611,29,985,29],[1612,4,986,4],[1612,10,986,10,"finalTarget"],[1612,21,986,21],[1612,24,986,24,"authInternal"],[1612,36,986,36],[1612,37,986,37,"config"],[1612,43,986,43],[1612,44,986,44,"emulator"],[1612,52,986,52],[1612,55,987,10,"_emulatorUrl"],[1612,67,987,22],[1612,68,987,23,"auth"],[1612,72,987,27],[1612,73,987,28,"config"],[1612,79,987,34],[1612,81,987,36,"base"],[1612,85,987,40],[1612,86,987,41],[1612,89,988,10],[1612,92,988,13,"auth"],[1612,96,988,17],[1612,97,988,18,"config"],[1612,103,988,24],[1612,104,988,25,"apiScheme"],[1612,113,988,34],[1612,119,988,40,"base"],[1612,123,988,44],[1612,125,988,46],[1613,4,989,4],[1614,4,990,4],[1615,4,991,4],[1616,4,992,4],[1616,8,992,8,"CookieAuthProxiedEndpoints"],[1616,34,992,34],[1616,35,992,35,"includes"],[1616,43,992,43],[1616,44,992,44,"path"],[1616,48,992,48],[1616,49,992,49],[1616,51,992,51],[1617,6,993,8],[1618,6,994,8],[1619,6,995,8],[1619,12,995,14,"authInternal"],[1619,24,995,26],[1619,25,995,27,"_persistenceManagerAvailable"],[1619,53,995,55],[1620,6,996,8],[1620,10,996,12,"authInternal"],[1620,22,996,24],[1620,23,996,25,"_getPersistenceType"],[1620,42,996,44],[1620,43,996,45],[1620,44,996,46],[1620,49,996,51],[1620,57,996,59],[1620,58,996,60],[1620,88,996,90],[1621,8,997,12],[1621,14,997,18,"cookiePersistence"],[1621,31,997,35],[1621,34,997,38,"authInternal"],[1621,46,997,50],[1621,47,997,51,"_getPersistence"],[1621,62,997,66],[1621,63,997,67],[1621,64,997,68],[1622,8,998,12],[1622,15,998,19,"cookiePersistence"],[1622,32,998,36],[1622,33,998,37,"_getFinalTarget"],[1622,48,998,52],[1622,49,998,53,"finalTarget"],[1622,60,998,64],[1622,61,998,65],[1622,62,998,66,"toString"],[1622,70,998,74],[1622,71,998,75],[1622,72,998,76],[1623,6,999,8],[1624,4,1000,4],[1625,4,1001,4],[1625,11,1001,11,"finalTarget"],[1625,22,1001,22],[1626,2,1002,0],[1627,2,1003,0],[1627,11,1003,9,"_parseEnforcementState"],[1627,33,1003,31,"_parseEnforcementState"],[1627,34,1003,32,"enforcementStateStr"],[1627,53,1003,51],[1627,55,1003,53],[1628,4,1004,4],[1628,12,1004,12,"enforcementStateStr"],[1628,31,1004,31],[1629,6,1005,8],[1629,11,1005,13],[1629,20,1005,22],[1630,8,1006,12],[1630,15,1006,19],[1630,24,1006,28],[1630,25,1006,29],[1631,6,1007,8],[1631,11,1007,13],[1631,18,1007,20],[1632,8,1008,12],[1632,15,1008,19],[1632,22,1008,26],[1632,23,1008,27],[1633,6,1009,8],[1633,11,1009,13],[1633,16,1009,18],[1634,8,1010,12],[1634,15,1010,19],[1634,20,1010,24],[1634,21,1010,25],[1635,6,1011,8],[1636,8,1012,12],[1636,15,1012,19],[1636,46,1012,50],[1636,47,1012,51],[1637,4,1013,4],[1638,2,1014,0],[1639,2,1015,0],[1639,8,1015,6,"NetworkTimeout"],[1639,22,1015,20],[1639,23,1015,21],[1640,4,1016,4,"clearNetworkTimeout"],[1640,23,1016,23,"clearNetworkTimeout"],[1640,24,1016,23],[1640,26,1016,26],[1641,6,1017,8,"clearTimeout"],[1641,18,1017,20],[1641,19,1017,21],[1641,23,1017,25],[1641,24,1017,26,"timer"],[1641,29,1017,31],[1641,30,1017,32],[1642,4,1018,4],[1643,4,1019,4,"constructor"],[1643,15,1019,15,"constructor"],[1643,16,1019,16,"auth"],[1643,20,1019,20],[1643,22,1019,22],[1644,6,1020,8],[1644,10,1020,12],[1644,11,1020,13,"auth"],[1644,15,1020,17],[1644,18,1020,20,"auth"],[1644,22,1020,24],[1645,6,1021,8],[1646,6,1022,8],[1647,6,1023,8],[1648,6,1024,8],[1648,10,1024,12],[1648,11,1024,13,"timer"],[1648,16,1024,18],[1648,19,1024,21],[1648,23,1024,25],[1649,6,1025,8],[1649,10,1025,12],[1649,11,1025,13,"promise"],[1649,18,1025,20],[1649,21,1025,23],[1649,25,1025,27,"Promise"],[1649,32,1025,34],[1649,33,1025,35],[1649,34,1025,36,"_"],[1649,35,1025,37],[1649,37,1025,39,"reject"],[1649,43,1025,45],[1649,48,1025,50],[1650,8,1026,12],[1650,12,1026,16],[1650,13,1026,17,"timer"],[1650,18,1026,22],[1650,21,1026,25,"setTimeout"],[1650,31,1026,35],[1650,32,1026,36],[1650,38,1026,42],[1651,10,1027,16],[1651,17,1027,23,"reject"],[1651,23,1027,29],[1651,24,1027,30,"_createError"],[1651,36,1027,42],[1651,37,1027,43],[1651,41,1027,47],[1651,42,1027,48,"auth"],[1651,46,1027,52],[1651,48,1027,54],[1651,72,1027,78],[1651,73,1027,79],[1651,115,1027,121],[1651,116,1027,122],[1651,117,1027,123],[1652,8,1028,12],[1652,9,1028,13],[1652,11,1028,15,"DEFAULT_API_TIMEOUT_MS"],[1652,33,1028,37],[1652,34,1028,38,"get"],[1652,37,1028,41],[1652,38,1028,42],[1652,39,1028,43],[1652,40,1028,44],[1653,6,1029,8],[1653,7,1029,9],[1653,8,1029,10],[1654,4,1030,4],[1655,2,1031,0],[1656,2,1032,0],[1656,11,1032,9,"_makeTaggedError"],[1656,27,1032,25,"_makeTaggedError"],[1656,28,1032,26,"auth"],[1656,32,1032,30],[1656,34,1032,32,"code"],[1656,38,1032,36],[1656,40,1032,38,"response"],[1656,48,1032,46],[1656,50,1032,48],[1657,4,1033,4],[1657,10,1033,10,"errorParams"],[1657,21,1033,21],[1657,24,1033,24],[1658,6,1034,8,"appName"],[1658,13,1034,15],[1658,15,1034,17,"auth"],[1658,19,1034,21],[1658,20,1034,22,"name"],[1659,4,1035,4],[1659,5,1035,5],[1660,4,1036,4],[1660,8,1036,8,"response"],[1660,16,1036,16],[1660,17,1036,17,"email"],[1660,22,1036,22],[1660,24,1036,24],[1661,6,1037,8,"errorParams"],[1661,17,1037,19],[1661,18,1037,20,"email"],[1661,23,1037,25],[1661,26,1037,28,"response"],[1661,34,1037,36],[1661,35,1037,37,"email"],[1661,40,1037,42],[1662,4,1038,4],[1663,4,1039,4],[1663,8,1039,8,"response"],[1663,16,1039,16],[1663,17,1039,17,"phoneNumber"],[1663,28,1039,28],[1663,30,1039,30],[1664,6,1040,8,"errorParams"],[1664,17,1040,19],[1664,18,1040,20,"phoneNumber"],[1664,29,1040,31],[1664,32,1040,34,"response"],[1664,40,1040,42],[1664,41,1040,43,"phoneNumber"],[1664,52,1040,54],[1665,4,1041,4],[1666,4,1042,4],[1666,10,1042,10,"error"],[1666,15,1042,15],[1666,18,1042,18,"_createError"],[1666,30,1042,30],[1666,31,1042,31,"auth"],[1666,35,1042,35],[1666,37,1042,37,"code"],[1666,41,1042,41],[1666,43,1042,43,"errorParams"],[1666,54,1042,54],[1666,55,1042,55],[1667,4,1043,4],[1668,4,1044,4,"error"],[1668,9,1044,9],[1668,10,1044,10,"customData"],[1668,20,1044,20],[1668,21,1044,21,"_tokenResponse"],[1668,35,1044,35],[1668,38,1044,38,"response"],[1668,46,1044,46],[1669,4,1045,4],[1669,11,1045,11,"error"],[1669,16,1045,16],[1670,2,1046,0],[1672,2,1048,0],[1673,0,1049,0],[1674,0,1050,0],[1675,0,1051,0],[1676,0,1052,0],[1677,0,1053,0],[1678,0,1054,0],[1679,0,1055,0],[1680,0,1056,0],[1681,0,1057,0],[1682,0,1058,0],[1683,0,1059,0],[1684,0,1060,0],[1685,0,1061,0],[1686,0,1062,0],[1687,0,1063,0],[1688,2,1064,0],[1688,11,1064,9,"isEnterprise"],[1688,23,1064,21,"isEnterprise"],[1688,24,1064,22,"grecaptcha"],[1688,34,1064,32],[1688,36,1064,34],[1689,4,1065,4],[1689,11,1065,12,"grecaptcha"],[1689,21,1065,22],[1689,26,1065,27,"undefined"],[1689,35,1065,36],[1689,39,1066,8,"grecaptcha"],[1689,49,1066,18],[1689,50,1066,19,"enterprise"],[1689,60,1066,29],[1689,65,1066,34,"undefined"],[1689,74,1066,43],[1690,2,1067,0],[1691,2,1068,0],[1691,8,1068,6,"RecaptchaConfig"],[1691,23,1068,21],[1691,24,1068,22],[1692,4,1069,4,"constructor"],[1692,15,1069,15,"constructor"],[1692,16,1069,16,"response"],[1692,24,1069,24],[1692,26,1069,26],[1693,6,1070,8],[1694,0,1071,0],[1695,0,1072,0],[1696,6,1073,8],[1696,10,1073,12],[1696,11,1073,13,"siteKey"],[1696,18,1073,20],[1696,21,1073,23],[1696,23,1073,25],[1697,6,1074,8],[1698,0,1075,0],[1699,0,1076,0],[1700,6,1077,8],[1700,10,1077,12],[1700,11,1077,13,"recaptchaEnforcementState"],[1700,36,1077,38],[1700,39,1077,41],[1700,41,1077,43],[1701,6,1078,8],[1701,10,1078,12,"response"],[1701,18,1078,20],[1701,19,1078,21,"recaptchaKey"],[1701,31,1078,33],[1701,36,1078,38,"undefined"],[1701,45,1078,47],[1701,47,1078,49],[1702,8,1079,12],[1702,14,1079,18],[1702,18,1079,22,"Error"],[1702,23,1079,27],[1702,24,1079,28],[1702,48,1079,52],[1702,49,1079,53],[1703,6,1080,8],[1704,6,1081,8],[1705,6,1082,8],[1705,10,1082,12],[1705,11,1082,13,"siteKey"],[1705,18,1082,20],[1705,21,1082,23,"response"],[1705,29,1082,31],[1705,30,1082,32,"recaptchaKey"],[1705,42,1082,44],[1705,43,1082,45,"split"],[1705,48,1082,50],[1705,49,1082,51],[1705,52,1082,54],[1705,53,1082,55],[1705,54,1082,56],[1705,55,1082,57],[1705,56,1082,58],[1706,6,1083,8],[1706,10,1083,12],[1706,11,1083,13,"recaptchaEnforcementState"],[1706,36,1083,38],[1706,39,1083,41,"response"],[1706,47,1083,49],[1706,48,1083,50,"recaptchaEnforcementState"],[1706,73,1083,75],[1707,4,1084,4],[1708,4,1085,4],[1709,0,1086,0],[1710,0,1087,0],[1711,0,1088,0],[1712,0,1089,0],[1713,0,1090,0],[1714,4,1091,4,"getProviderEnforcementState"],[1714,31,1091,31,"getProviderEnforcementState"],[1714,32,1091,32,"providerStr"],[1714,43,1091,43],[1714,45,1091,45],[1715,6,1092,8],[1715,10,1092,12],[1715,11,1092,13],[1715,15,1092,17],[1715,16,1092,18,"recaptchaEnforcementState"],[1715,41,1092,43],[1715,45,1093,12],[1715,49,1093,16],[1715,50,1093,17,"recaptchaEnforcementState"],[1715,75,1093,42],[1715,76,1093,43,"length"],[1715,82,1093,49],[1715,87,1093,54],[1715,88,1093,55],[1715,90,1093,57],[1716,8,1094,12],[1716,15,1094,19],[1716,19,1094,23],[1717,6,1095,8],[1718,6,1096,8],[1718,11,1096,13],[1718,17,1096,19,"recaptchaEnforcementState"],[1718,42,1096,44],[1718,46,1096,48],[1718,50,1096,52],[1718,51,1096,53,"recaptchaEnforcementState"],[1718,76,1096,78],[1718,78,1096,80],[1719,8,1097,12],[1719,12,1097,16,"recaptchaEnforcementState"],[1719,37,1097,41],[1719,38,1097,42,"provider"],[1719,46,1097,50],[1719,50,1098,16,"recaptchaEnforcementState"],[1719,75,1098,41],[1719,76,1098,42,"provider"],[1719,84,1098,50],[1719,89,1098,55,"providerStr"],[1719,100,1098,66],[1719,102,1098,68],[1720,10,1099,16],[1720,17,1099,23,"_parseEnforcementState"],[1720,39,1099,45],[1720,40,1099,46,"recaptchaEnforcementState"],[1720,65,1099,71],[1720,66,1099,72,"enforcementState"],[1720,82,1099,88],[1720,83,1099,89],[1721,8,1100,12],[1722,6,1101,8],[1723,6,1102,8],[1723,13,1102,15],[1723,17,1102,19],[1724,4,1103,4],[1725,4,1104,4],[1726,0,1105,0],[1727,0,1106,0],[1728,0,1107,0],[1729,0,1108,0],[1730,0,1109,0],[1731,4,1110,4,"isProviderEnabled"],[1731,21,1110,21,"isProviderEnabled"],[1731,22,1110,22,"providerStr"],[1731,33,1110,33],[1731,35,1110,35],[1732,6,1111,8],[1732,13,1111,16],[1732,17,1111,20],[1732,18,1111,21,"getProviderEnforcementState"],[1732,45,1111,48],[1732,46,1111,49,"providerStr"],[1732,57,1111,60],[1732,58,1111,61],[1732,63,1112,12],[1732,72,1112,21],[1732,73,1112,22],[1732,107,1113,12],[1732,111,1113,16],[1732,112,1113,17,"getProviderEnforcementState"],[1732,139,1113,44],[1732,140,1113,45,"providerStr"],[1732,151,1113,56],[1732,152,1113,57],[1732,157,1113,62],[1732,164,1113,69],[1732,165,1113,70],[1733,4,1114,4],[1734,4,1115,4],[1735,0,1116,0],[1736,0,1117,0],[1737,0,1118,0],[1738,0,1119,0],[1739,0,1120,0],[1740,4,1121,4,"isAnyProviderEnabled"],[1740,24,1121,24,"isAnyProviderEnabled"],[1740,25,1121,24],[1740,27,1121,27],[1741,6,1122,8],[1741,13,1122,16],[1741,17,1122,20],[1741,18,1122,21,"isProviderEnabled"],[1741,35,1122,38],[1741,36,1122,39],[1741,61,1122,64],[1741,62,1122,65],[1741,113,1122,116],[1741,114,1122,117],[1741,118,1123,12],[1741,122,1123,16],[1741,123,1123,17,"isProviderEnabled"],[1741,140,1123,34],[1741,141,1123,35],[1741,157,1123,51],[1741,158,1123,52],[1741,200,1123,94],[1741,201,1123,95],[1742,4,1124,4],[1743,2,1125,0],[1745,2,1127,0],[1746,0,1128,0],[1747,0,1129,0],[1748,0,1130,0],[1749,0,1131,0],[1750,0,1132,0],[1751,0,1133,0],[1752,0,1134,0],[1753,0,1135,0],[1754,0,1136,0],[1755,0,1137,0],[1756,0,1138,0],[1757,0,1139,0],[1758,0,1140,0],[1759,0,1141,0],[1760,0,1142,0],[1761,2,1143,0],[1761,17,1143,15,"getRecaptchaConfig"],[1761,35,1143,33,"getRecaptchaConfig"],[1761,36,1143,34,"auth"],[1761,40,1143,38],[1761,42,1143,40,"request"],[1761,49,1143,47],[1761,51,1143,49],[1762,4,1144,4],[1762,11,1144,11,"_performApiRequest"],[1762,29,1144,29],[1762,30,1144,30,"auth"],[1762,34,1144,34],[1762,36,1144,36],[1762,41,1144,41],[1762,42,1144,42],[1762,64,1144,64],[1762,85,1144,85],[1762,86,1144,86],[1762,123,1144,123,"_addTidIfNecessary"],[1762,141,1144,141],[1762,142,1144,142,"auth"],[1762,146,1144,146],[1762,148,1144,148,"request"],[1762,155,1144,155],[1762,156,1144,156],[1762,157,1144,157],[1763,2,1145,0],[1765,2,1147,0],[1766,0,1148,0],[1767,0,1149,0],[1768,0,1150,0],[1769,0,1151,0],[1770,0,1152,0],[1771,0,1153,0],[1772,0,1154,0],[1773,0,1155,0],[1774,0,1156,0],[1775,0,1157,0],[1776,0,1158,0],[1777,0,1159,0],[1778,0,1160,0],[1779,0,1161,0],[1780,0,1162,0],[1781,2,1163,0],[1781,17,1163,15,"deleteAccount"],[1781,30,1163,28,"deleteAccount"],[1781,31,1163,29,"auth"],[1781,35,1163,33],[1781,37,1163,35,"request"],[1781,44,1163,42],[1781,46,1163,44],[1782,4,1164,4],[1782,11,1164,11,"_performApiRequest"],[1782,29,1164,29],[1782,30,1164,30,"auth"],[1782,34,1164,34],[1782,36,1164,36],[1782,42,1164,42],[1782,43,1164,43],[1782,66,1164,66],[1782,87,1164,87],[1782,88,1164,88],[1782,119,1164,119,"request"],[1782,126,1164,126],[1782,127,1164,127],[1783,2,1165,0],[1784,2,1166,0],[1784,17,1166,15,"deleteLinkedAccounts"],[1784,37,1166,35,"deleteLinkedAccounts"],[1784,38,1166,36,"auth"],[1784,42,1166,40],[1784,44,1166,42,"request"],[1784,51,1166,49],[1784,53,1166,51],[1785,4,1167,4],[1785,11,1167,11,"_performApiRequest"],[1785,29,1167,29],[1785,30,1167,30,"auth"],[1785,34,1167,34],[1785,36,1167,36],[1785,42,1167,42],[1785,43,1167,43],[1785,66,1167,66],[1785,87,1167,87],[1785,88,1167,88],[1785,121,1167,121,"request"],[1785,128,1167,128],[1785,129,1167,129],[1786,2,1168,0],[1787,2,1169,0],[1787,17,1169,15,"getAccountInfo"],[1787,31,1169,29,"getAccountInfo"],[1787,32,1169,30,"auth"],[1787,36,1169,34],[1787,38,1169,36,"request"],[1787,45,1169,43],[1787,47,1169,45],[1788,4,1170,4],[1788,11,1170,11,"_performApiRequest"],[1788,29,1170,29],[1788,30,1170,30,"auth"],[1788,34,1170,34],[1788,36,1170,36],[1788,42,1170,42],[1788,43,1170,43],[1788,66,1170,66],[1788,87,1170,87],[1788,88,1170,88],[1788,121,1170,121,"request"],[1788,128,1170,128],[1788,129,1170,129],[1789,2,1171,0],[1791,2,1173,0],[1792,0,1174,0],[1793,0,1175,0],[1794,0,1176,0],[1795,0,1177,0],[1796,0,1178,0],[1797,0,1179,0],[1798,0,1180,0],[1799,0,1181,0],[1800,0,1182,0],[1801,0,1183,0],[1802,0,1184,0],[1803,0,1185,0],[1804,0,1186,0],[1805,0,1187,0],[1806,0,1188,0],[1807,2,1189,0],[1807,11,1189,9,"utcTimestampToDateString"],[1807,35,1189,33,"utcTimestampToDateString"],[1807,36,1189,34,"utcTimestamp"],[1807,48,1189,46],[1807,50,1189,48],[1808,4,1190,4],[1808,8,1190,8],[1808,9,1190,9,"utcTimestamp"],[1808,21,1190,21],[1808,23,1190,23],[1809,6,1191,8],[1809,13,1191,15,"undefined"],[1809,22,1191,24],[1810,4,1192,4],[1811,4,1193,4],[1811,8,1193,8],[1812,6,1194,8],[1813,6,1195,8],[1813,12,1195,14,"date"],[1813,16,1195,18],[1813,19,1195,21],[1813,23,1195,25,"Date"],[1813,27,1195,29],[1813,28,1195,30,"Number"],[1813,34,1195,36],[1813,35,1195,37,"utcTimestamp"],[1813,47,1195,49],[1813,48,1195,50],[1813,49,1195,51],[1814,6,1196,8],[1815,6,1197,8],[1815,10,1197,12],[1815,11,1197,13,"isNaN"],[1815,16,1197,18],[1815,17,1197,19,"date"],[1815,21,1197,23],[1815,22,1197,24,"getTime"],[1815,29,1197,31],[1815,30,1197,32],[1815,31,1197,33],[1815,32,1197,34],[1815,34,1197,36],[1816,8,1198,12],[1817,8,1199,12],[1817,15,1199,19,"date"],[1817,19,1199,23],[1817,20,1199,24,"toUTCString"],[1817,31,1199,35],[1817,32,1199,36],[1817,33,1199,37],[1818,6,1200,8],[1819,4,1201,4],[1819,5,1201,5],[1819,6,1202,4],[1819,13,1202,11,"e"],[1819,14,1202,12],[1819,16,1202,14],[1820,6,1203,8],[1821,4,1203,8],[1822,4,1205,4],[1822,11,1205,11,"undefined"],[1822,20,1205,20],[1823,2,1206,0],[1825,2,1208,0],[1826,0,1209,0],[1827,0,1210,0],[1828,0,1211,0],[1829,0,1212,0],[1830,0,1213,0],[1831,0,1214,0],[1832,0,1215,0],[1833,0,1216,0],[1834,0,1217,0],[1835,0,1218,0],[1836,0,1219,0],[1837,0,1220,0],[1838,0,1221,0],[1839,0,1222,0],[1840,0,1223,0],[1841,2,1224,0],[1842,0,1225,0],[1843,0,1226,0],[1844,0,1227,0],[1845,0,1228,0],[1846,0,1229,0],[1847,0,1230,0],[1848,0,1231,0],[1849,0,1232,0],[1850,0,1233,0],[1851,0,1234,0],[1852,0,1235,0],[1853,2,1236,0],[1853,11,1236,9,"getIdToken"],[1853,21,1236,19,"getIdToken"],[1853,22,1236,20,"user"],[1853,26,1236,24],[1853,28,1236,26,"forceRefresh"],[1853,40,1236,38],[1853,43,1236,41],[1853,48,1236,46],[1853,50,1236,48],[1854,4,1237,4],[1854,11,1237,11],[1854,15,1237,11,"getModularInstance"],[1854,28,1237,29],[1854,29,1237,29,"getModularInstance"],[1854,47,1237,29],[1854,49,1237,30,"user"],[1854,53,1237,34],[1854,54,1237,35],[1854,55,1237,36,"getIdToken"],[1854,65,1237,46],[1854,66,1237,47,"forceRefresh"],[1854,78,1237,59],[1854,79,1237,60],[1855,2,1238,0],[1856,2,1239,0],[1857,0,1240,0],[1858,0,1241,0],[1859,0,1242,0],[1860,0,1243,0],[1861,0,1244,0],[1862,0,1245,0],[1863,0,1246,0],[1864,0,1247,0],[1865,0,1248,0],[1866,0,1249,0],[1867,0,1250,0],[1868,2,1251,0],[1868,17,1251,15,"getIdTokenResult"],[1868,33,1251,31,"getIdTokenResult"],[1868,34,1251,32,"user"],[1868,38,1251,36],[1868,40,1251,38,"forceRefresh"],[1868,52,1251,50],[1868,55,1251,53],[1868,60,1251,58],[1868,62,1251,60],[1869,4,1252,4],[1869,10,1252,10,"userInternal"],[1869,22,1252,22],[1869,25,1252,25],[1869,29,1252,25,"getModularInstance"],[1869,42,1252,43],[1869,43,1252,43,"getModularInstance"],[1869,61,1252,43],[1869,63,1252,44,"user"],[1869,67,1252,48],[1869,68,1252,49],[1870,4,1253,4],[1870,10,1253,10,"token"],[1870,15,1253,15],[1870,18,1253,18],[1870,24,1253,24,"userInternal"],[1870,36,1253,36],[1870,37,1253,37,"getIdToken"],[1870,47,1253,47],[1870,48,1253,48,"forceRefresh"],[1870,60,1253,60],[1870,61,1253,61],[1871,4,1254,4],[1871,10,1254,10,"claims"],[1871,16,1254,16],[1871,19,1254,19,"_parseToken"],[1871,30,1254,30],[1871,31,1254,31,"token"],[1871,36,1254,36],[1871,37,1254,37],[1872,4,1255,4,"_assert"],[1872,11,1255,11],[1872,12,1255,12,"claims"],[1872,18,1255,18],[1872,22,1255,22,"claims"],[1872,28,1255,28],[1872,29,1255,29,"exp"],[1872,32,1255,32],[1872,36,1255,36,"claims"],[1872,42,1255,42],[1872,43,1255,43,"auth_time"],[1872,52,1255,52],[1872,56,1255,56,"claims"],[1872,62,1255,62],[1872,63,1255,63,"iat"],[1872,66,1255,66],[1872,68,1255,68,"userInternal"],[1872,80,1255,80],[1872,81,1255,81,"auth"],[1872,85,1255,85],[1872,87,1255,87],[1872,103,1255,103],[1872,104,1255,104],[1872,138,1255,138],[1872,139,1255,139],[1873,4,1256,4],[1873,10,1256,10,"firebase"],[1873,18,1256,18],[1873,21,1256,21],[1873,28,1256,28,"claims"],[1873,34,1256,34],[1873,35,1256,35,"firebase"],[1873,43,1256,43],[1873,48,1256,48],[1873,56,1256,56],[1873,59,1256,59,"claims"],[1873,65,1256,65],[1873,66,1256,66,"firebase"],[1873,74,1256,74],[1873,77,1256,77,"undefined"],[1873,86,1256,86],[1874,4,1257,4],[1874,10,1257,10,"signInProvider"],[1874,24,1257,24],[1874,27,1257,27,"firebase"],[1874,35,1257,35],[1874,38,1257,38],[1874,56,1257,56],[1874,57,1257,57],[1875,4,1258,4],[1875,11,1258,11],[1876,6,1259,8,"claims"],[1876,12,1259,14],[1877,6,1260,8,"token"],[1877,11,1260,13],[1878,6,1261,8,"authTime"],[1878,14,1261,16],[1878,16,1261,18,"utcTimestampToDateString"],[1878,40,1261,42],[1878,41,1261,43,"secondsStringToMilliseconds"],[1878,68,1261,70],[1878,69,1261,71,"claims"],[1878,75,1261,77],[1878,76,1261,78,"auth_time"],[1878,85,1261,87],[1878,86,1261,88],[1878,87,1261,89],[1879,6,1262,8,"issuedAtTime"],[1879,18,1262,20],[1879,20,1262,22,"utcTimestampToDateString"],[1879,44,1262,46],[1879,45,1262,47,"secondsStringToMilliseconds"],[1879,72,1262,74],[1879,73,1262,75,"claims"],[1879,79,1262,81],[1879,80,1262,82,"iat"],[1879,83,1262,85],[1879,84,1262,86],[1879,85,1262,87],[1880,6,1263,8,"expirationTime"],[1880,20,1263,22],[1880,22,1263,24,"utcTimestampToDateString"],[1880,46,1263,48],[1880,47,1263,49,"secondsStringToMilliseconds"],[1880,74,1263,76],[1880,75,1263,77,"claims"],[1880,81,1263,83],[1880,82,1263,84,"exp"],[1880,85,1263,87],[1880,86,1263,88],[1880,87,1263,89],[1881,6,1264,8,"signInProvider"],[1881,20,1264,22],[1881,22,1264,24,"signInProvider"],[1881,36,1264,38],[1881,40,1264,42],[1881,44,1264,46],[1882,6,1265,8,"signInSecondFactor"],[1882,24,1265,26],[1882,26,1265,28,"firebase"],[1882,34,1265,36],[1882,37,1265,39],[1882,60,1265,62],[1882,61,1265,63],[1882,65,1265,67],[1883,4,1266,4],[1883,5,1266,5],[1884,2,1267,0],[1885,2,1268,0],[1885,11,1268,9,"secondsStringToMilliseconds"],[1885,38,1268,36,"secondsStringToMilliseconds"],[1885,39,1268,37,"seconds"],[1885,46,1268,44],[1885,48,1268,46],[1886,4,1269,4],[1886,11,1269,11,"Number"],[1886,17,1269,17],[1886,18,1269,18,"seconds"],[1886,25,1269,25],[1886,26,1269,26],[1886,29,1269,29],[1886,33,1269,33],[1887,2,1270,0],[1888,2,1271,0],[1888,11,1271,9,"_parseToken"],[1888,22,1271,20,"_parseToken"],[1888,23,1271,21,"token"],[1888,28,1271,26],[1888,30,1271,28],[1889,4,1272,4],[1889,10,1272,10],[1889,11,1272,11,"algorithm"],[1889,20,1272,20],[1889,22,1272,22,"payload"],[1889,29,1272,29],[1889,31,1272,31,"signature"],[1889,40,1272,40],[1889,41,1272,41],[1889,44,1272,44,"token"],[1889,49,1272,49],[1889,50,1272,50,"split"],[1889,55,1272,55],[1889,56,1272,56],[1889,59,1272,59],[1889,60,1272,60],[1890,4,1273,4],[1890,8,1273,8,"algorithm"],[1890,17,1273,17],[1890,22,1273,22,"undefined"],[1890,31,1273,31],[1890,35,1274,8,"payload"],[1890,42,1274,15],[1890,47,1274,20,"undefined"],[1890,56,1274,29],[1890,60,1275,8,"signature"],[1890,69,1275,17],[1890,74,1275,22,"undefined"],[1890,83,1275,31],[1890,85,1275,33],[1891,6,1276,8,"_logError"],[1891,15,1276,17],[1891,16,1276,18],[1891,64,1276,66],[1891,65,1276,67],[1892,6,1277,8],[1892,13,1277,15],[1892,17,1277,19],[1893,4,1278,4],[1894,4,1279,4],[1894,8,1279,8],[1895,6,1280,8],[1895,12,1280,14,"decoded"],[1895,19,1280,21],[1895,22,1280,24],[1895,26,1280,24,"base64Decode"],[1895,39,1280,36],[1895,40,1280,36,"base64Decode"],[1895,52,1280,36],[1895,54,1280,37,"payload"],[1895,61,1280,44],[1895,62,1280,45],[1896,6,1281,8],[1896,10,1281,12],[1896,11,1281,13,"decoded"],[1896,18,1281,20],[1896,20,1281,22],[1897,8,1282,12,"_logError"],[1897,17,1282,21],[1897,18,1282,22],[1897,55,1282,59],[1897,56,1282,60],[1898,8,1283,12],[1898,15,1283,19],[1898,19,1283,23],[1899,6,1284,8],[1900,6,1285,8],[1900,13,1285,15,"JSON"],[1900,17,1285,19],[1900,18,1285,20,"parse"],[1900,23,1285,25],[1900,24,1285,26,"decoded"],[1900,31,1285,33],[1900,32,1285,34],[1901,4,1286,4],[1901,5,1286,5],[1901,6,1287,4],[1901,13,1287,11,"e"],[1901,14,1287,12],[1901,16,1287,14],[1902,6,1288,8,"_logError"],[1902,15,1288,17],[1902,16,1288,18],[1902,58,1288,60],[1902,60,1288,62,"e"],[1902,61,1288,63],[1902,63,1288,65,"toString"],[1902,71,1288,73],[1902,72,1288,74],[1902,73,1288,75],[1902,74,1288,76],[1903,6,1289,8],[1903,13,1289,15],[1903,17,1289,19],[1904,4,1290,4],[1905,2,1291,0],[1906,2,1292,0],[1907,0,1293,0],[1908,0,1294,0],[1909,2,1295,0],[1909,11,1295,9,"_tokenExpiresIn"],[1909,26,1295,24,"_tokenExpiresIn"],[1909,27,1295,25,"token"],[1909,32,1295,30],[1909,34,1295,32],[1910,4,1296,4],[1910,10,1296,10,"parsedToken"],[1910,21,1296,21],[1910,24,1296,24,"_parseToken"],[1910,35,1296,35],[1910,36,1296,36,"token"],[1910,41,1296,41],[1910,42,1296,42],[1911,4,1297,4,"_assert"],[1911,11,1297,11],[1911,12,1297,12,"parsedToken"],[1911,23,1297,23],[1911,25,1297,25],[1911,41,1297,41],[1911,42,1297,42],[1911,76,1297,76],[1911,77,1297,77],[1912,4,1298,4,"_assert"],[1912,11,1298,11],[1912,12,1298,12],[1912,19,1298,19,"parsedToken"],[1912,30,1298,30],[1912,31,1298,31,"exp"],[1912,34,1298,34],[1912,39,1298,39],[1912,50,1298,50],[1912,52,1298,52],[1912,68,1298,68],[1912,69,1298,69],[1912,103,1298,103],[1912,104,1298,104],[1913,4,1299,4,"_assert"],[1913,11,1299,11],[1913,12,1299,12],[1913,19,1299,19,"parsedToken"],[1913,30,1299,30],[1913,31,1299,31,"iat"],[1913,34,1299,34],[1913,39,1299,39],[1913,50,1299,50],[1913,52,1299,52],[1913,68,1299,68],[1913,69,1299,69],[1913,103,1299,103],[1913,104,1299,104],[1914,4,1300,4],[1914,11,1300,11,"Number"],[1914,17,1300,17],[1914,18,1300,18,"parsedToken"],[1914,29,1300,29],[1914,30,1300,30,"exp"],[1914,33,1300,33],[1914,34,1300,34],[1914,37,1300,37,"Number"],[1914,43,1300,43],[1914,44,1300,44,"parsedToken"],[1914,55,1300,55],[1914,56,1300,56,"iat"],[1914,59,1300,59],[1914,60,1300,60],[1915,2,1301,0],[1917,2,1303,0],[1918,0,1304,0],[1919,0,1305,0],[1920,0,1306,0],[1921,0,1307,0],[1922,0,1308,0],[1923,0,1309,0],[1924,0,1310,0],[1925,0,1311,0],[1926,0,1312,0],[1927,0,1313,0],[1928,0,1314,0],[1929,0,1315,0],[1930,0,1316,0],[1931,0,1317,0],[1932,0,1318,0],[1933,2,1319,0],[1933,17,1319,15,"_logoutIfInvalidated"],[1933,37,1319,35,"_logoutIfInvalidated"],[1933,38,1319,36,"user"],[1933,42,1319,40],[1933,44,1319,42,"promise"],[1933,51,1319,49],[1933,53,1319,51,"bypassAuthState"],[1933,68,1319,66],[1933,71,1319,69],[1933,76,1319,74],[1933,78,1319,76],[1934,4,1320,4],[1934,8,1320,8,"bypassAuthState"],[1934,23,1320,23],[1934,25,1320,25],[1935,6,1321,8],[1935,13,1321,15,"promise"],[1935,20,1321,22],[1936,4,1322,4],[1937,4,1323,4],[1937,8,1323,8],[1938,6,1324,8],[1938,13,1324,15],[1938,19,1324,21,"promise"],[1938,26,1324,28],[1939,4,1325,4],[1939,5,1325,5],[1939,6,1326,4],[1939,13,1326,11,"e"],[1939,14,1326,12],[1939,16,1326,14],[1940,6,1327,8],[1940,10,1327,12,"e"],[1940,11,1327,13],[1940,23,1327,25,"FirebaseError"],[1940,36,1327,38],[1940,37,1327,38,"FirebaseError"],[1940,50,1327,38],[1940,54,1327,42,"isUserInvalidated"],[1940,71,1327,59],[1940,72,1327,60,"e"],[1940,73,1327,61],[1940,74,1327,62],[1940,76,1327,64],[1941,8,1328,12],[1941,12,1328,16,"user"],[1941,16,1328,20],[1941,17,1328,21,"auth"],[1941,21,1328,25],[1941,22,1328,26,"currentUser"],[1941,33,1328,37],[1941,38,1328,42,"user"],[1941,42,1328,46],[1941,44,1328,48],[1942,10,1329,16],[1942,16,1329,22,"user"],[1942,20,1329,26],[1942,21,1329,27,"auth"],[1942,25,1329,31],[1942,26,1329,32,"signOut"],[1942,33,1329,39],[1942,34,1329,40],[1942,35,1329,41],[1943,8,1330,12],[1944,6,1331,8],[1945,6,1332,8],[1945,12,1332,14,"e"],[1945,13,1332,15],[1946,4,1333,4],[1947,2,1334,0],[1948,2,1335,0],[1948,11,1335,9,"isUserInvalidated"],[1948,28,1335,26,"isUserInvalidated"],[1948,29,1335,27],[1949,4,1335,29,"code"],[1950,2,1335,34],[1950,3,1335,35],[1950,5,1335,37],[1951,4,1336,4],[1951,11,1336,12,"code"],[1951,15,1336,16],[1951,20,1336,21],[1951,28,1336,29],[1951,43,1336,44],[1951,44,1336,45],[1951,79,1336,80],[1951,83,1337,8,"code"],[1951,87,1337,12],[1951,92,1337,17],[1951,100,1337,25],[1951,120,1337,45],[1951,121,1337,46],[1951,156,1337,81],[1952,2,1338,0],[1954,2,1340,0],[1955,0,1341,0],[1956,0,1342,0],[1957,0,1343,0],[1958,0,1344,0],[1959,0,1345,0],[1960,0,1346,0],[1961,0,1347,0],[1962,0,1348,0],[1963,0,1349,0],[1964,0,1350,0],[1965,0,1351,0],[1966,0,1352,0],[1967,0,1353,0],[1968,0,1354,0],[1969,0,1355,0],[1970,2,1356,0],[1970,8,1356,6,"ProactiveRefresh"],[1970,24,1356,22],[1970,25,1356,23],[1971,4,1357,4,"constructor"],[1971,15,1357,15,"constructor"],[1971,16,1357,16,"user"],[1971,20,1357,20],[1971,22,1357,22],[1972,6,1358,8],[1972,10,1358,12],[1972,11,1358,13,"user"],[1972,15,1358,17],[1972,18,1358,20,"user"],[1972,22,1358,24],[1973,6,1359,8],[1973,10,1359,12],[1973,11,1359,13,"isRunning"],[1973,20,1359,22],[1973,23,1359,25],[1973,28,1359,30],[1974,6,1360,8],[1975,6,1361,8],[1976,6,1362,8],[1977,6,1363,8],[1978,6,1364,8],[1978,10,1364,12],[1978,11,1364,13,"timerId"],[1978,18,1364,20],[1978,21,1364,23],[1978,25,1364,27],[1979,6,1365,8],[1979,10,1365,12],[1979,11,1365,13,"errorBackoff"],[1979,23,1365,25],[1979,26,1365,28],[1979,31,1365,33],[1979,32,1365,34],[1980,4,1366,4],[1981,4,1367,4,"_start"],[1981,10,1367,10,"_start"],[1981,11,1367,10],[1981,13,1367,13],[1982,6,1368,8],[1982,10,1368,12],[1982,14,1368,16],[1982,15,1368,17,"isRunning"],[1982,24,1368,26],[1982,26,1368,28],[1983,8,1369,12],[1984,6,1370,8],[1985,6,1371,8],[1985,10,1371,12],[1985,11,1371,13,"isRunning"],[1985,20,1371,22],[1985,23,1371,25],[1985,27,1371,29],[1986,6,1372,8],[1986,10,1372,12],[1986,11,1372,13,"schedule"],[1986,19,1372,21],[1986,20,1372,22],[1986,21,1372,23],[1987,4,1373,4],[1988,4,1374,4,"_stop"],[1988,9,1374,9,"_stop"],[1988,10,1374,9],[1988,12,1374,12],[1989,6,1375,8],[1989,10,1375,12],[1989,11,1375,13],[1989,15,1375,17],[1989,16,1375,18,"isRunning"],[1989,25,1375,27],[1989,27,1375,29],[1990,8,1376,12],[1991,6,1377,8],[1992,6,1378,8],[1992,10,1378,12],[1992,11,1378,13,"isRunning"],[1992,20,1378,22],[1992,23,1378,25],[1992,28,1378,30],[1993,6,1379,8],[1993,10,1379,12],[1993,14,1379,16],[1993,15,1379,17,"timerId"],[1993,22,1379,24],[1993,27,1379,29],[1993,31,1379,33],[1993,33,1379,35],[1994,8,1380,12,"clearTimeout"],[1994,20,1380,24],[1994,21,1380,25],[1994,25,1380,29],[1994,26,1380,30,"timerId"],[1994,33,1380,37],[1994,34,1380,38],[1995,6,1381,8],[1996,4,1382,4],[1997,4,1383,4,"getInterval"],[1997,15,1383,15,"getInterval"],[1997,16,1383,16,"wasError"],[1997,24,1383,24],[1997,26,1383,26],[1998,6,1384,8],[1998,10,1384,12,"wasError"],[1998,18,1384,20],[1998,20,1384,22],[1999,8,1385,12],[1999,14,1385,18,"interval"],[1999,22,1385,26],[1999,25,1385,29],[1999,29,1385,33],[1999,30,1385,34,"errorBackoff"],[1999,42,1385,46],[2000,8,1386,12],[2000,12,1386,16],[2000,13,1386,17,"errorBackoff"],[2000,25,1386,29],[2000,28,1386,32,"Math"],[2000,32,1386,36],[2000,33,1386,37,"min"],[2000,36,1386,40],[2000,37,1386,41],[2000,41,1386,45],[2000,42,1386,46,"errorBackoff"],[2000,54,1386,58],[2000,57,1386,61],[2000,58,1386,62],[2000,60,1386,64],[2000,66,1386,70],[2000,67,1386,71],[2000,99,1386,103],[2000,100,1386,104],[2001,8,1387,12],[2001,15,1387,19,"interval"],[2001,23,1387,27],[2002,6,1388,8],[2002,7,1388,9],[2002,13,1389,13],[2003,8,1390,12],[2004,8,1391,12],[2004,12,1391,16],[2004,13,1391,17,"errorBackoff"],[2004,25,1391,29],[2004,28,1391,32],[2004,33,1391,37],[2004,34,1391,38],[2005,8,1392,12],[2005,14,1392,18,"expTime"],[2005,21,1392,25],[2005,24,1392,28],[2005,28,1392,32],[2005,29,1392,33,"user"],[2005,33,1392,37],[2005,34,1392,38,"stsTokenManager"],[2005,49,1392,53],[2005,50,1392,54,"expirationTime"],[2005,64,1392,68],[2005,68,1392,72],[2005,69,1392,73],[2006,8,1393,12],[2006,14,1393,18,"interval"],[2006,22,1393,26],[2006,25,1393,29,"expTime"],[2006,32,1393,36],[2006,35,1393,39,"Date"],[2006,39,1393,43],[2006,40,1393,44,"now"],[2006,43,1393,47],[2006,44,1393,48],[2006,45,1393,49],[2006,48,1393,52],[2006,54,1393,58],[2006,55,1393,59],[2007,8,1394,12],[2007,15,1394,19,"Math"],[2007,19,1394,23],[2007,20,1394,24,"max"],[2007,23,1394,27],[2007,24,1394,28],[2007,25,1394,29],[2007,27,1394,31,"interval"],[2007,35,1394,39],[2007,36,1394,40],[2008,6,1395,8],[2009,4,1396,4],[2010,4,1397,4,"schedule"],[2010,12,1397,12,"schedule"],[2010,13,1397,13,"wasError"],[2010,21,1397,21],[2010,24,1397,24],[2010,29,1397,29],[2010,31,1397,31],[2011,6,1398,8],[2011,10,1398,12],[2011,11,1398,13],[2011,15,1398,17],[2011,16,1398,18,"isRunning"],[2011,25,1398,27],[2011,27,1398,29],[2012,8,1399,12],[2013,8,1400,12],[2014,6,1401,8],[2015,6,1402,8],[2015,12,1402,14,"interval"],[2015,20,1402,22],[2015,23,1402,25],[2015,27,1402,29],[2015,28,1402,30,"getInterval"],[2015,39,1402,41],[2015,40,1402,42,"wasError"],[2015,48,1402,50],[2015,49,1402,51],[2016,6,1403,8],[2016,10,1403,12],[2016,11,1403,13,"timerId"],[2016,18,1403,20],[2016,21,1403,23,"setTimeout"],[2016,31,1403,33],[2016,32,1403,34],[2016,44,1403,46],[2017,8,1404,12],[2017,14,1404,18],[2017,18,1404,22],[2017,19,1404,23,"iteration"],[2017,28,1404,32],[2017,29,1404,33],[2017,30,1404,34],[2018,6,1405,8],[2018,7,1405,9],[2018,9,1405,11,"interval"],[2018,17,1405,19],[2018,18,1405,20],[2019,4,1406,4],[2020,4,1407,4],[2020,10,1407,10,"iteration"],[2020,19,1407,19,"iteration"],[2020,20,1407,19],[2020,22,1407,22],[2021,6,1408,8],[2021,10,1408,12],[2022,8,1409,12],[2022,14,1409,18],[2022,18,1409,22],[2022,19,1409,23,"user"],[2022,23,1409,27],[2022,24,1409,28,"getIdToken"],[2022,34,1409,38],[2022,35,1409,39],[2022,39,1409,43],[2022,40,1409,44],[2023,6,1410,8],[2023,7,1410,9],[2023,8,1411,8],[2023,15,1411,15,"e"],[2023,16,1411,16],[2023,18,1411,18],[2024,8,1412,12],[2025,8,1413,12],[2025,12,1413,16,"e"],[2025,13,1413,17],[2025,15,1413,19,"code"],[2025,19,1413,23],[2025,24,1414,16],[2025,32,1414,24],[2025,56,1414,48],[2025,57,1414,49],[2025,101,1414,93],[2025,103,1414,95],[2026,10,1415,16],[2026,14,1415,20],[2026,15,1415,21,"schedule"],[2026,23,1415,29],[2026,24,1415,30],[2026,38,1415,45],[2026,42,1415,49],[2026,43,1415,50],[2027,8,1416,12],[2028,8,1417,12],[2029,6,1418,8],[2030,6,1419,8],[2030,10,1419,12],[2030,11,1419,13,"schedule"],[2030,19,1419,21],[2030,20,1419,22],[2030,21,1419,23],[2031,4,1420,4],[2032,2,1421,0],[2034,2,1423,0],[2035,0,1424,0],[2036,0,1425,0],[2037,0,1426,0],[2038,0,1427,0],[2039,0,1428,0],[2040,0,1429,0],[2041,0,1430,0],[2042,0,1431,0],[2043,0,1432,0],[2044,0,1433,0],[2045,0,1434,0],[2046,0,1435,0],[2047,0,1436,0],[2048,0,1437,0],[2049,0,1438,0],[2050,2,1439,0],[2050,8,1439,6,"UserMetadata"],[2050,20,1439,18],[2050,21,1439,19],[2051,4,1440,4,"constructor"],[2051,15,1440,15,"constructor"],[2051,16,1440,16,"createdAt"],[2051,25,1440,25],[2051,27,1440,27,"lastLoginAt"],[2051,38,1440,38],[2051,40,1440,40],[2052,6,1441,8],[2052,10,1441,12],[2052,11,1441,13,"createdAt"],[2052,20,1441,22],[2052,23,1441,25,"createdAt"],[2052,32,1441,34],[2053,6,1442,8],[2053,10,1442,12],[2053,11,1442,13,"lastLoginAt"],[2053,22,1442,24],[2053,25,1442,27,"lastLoginAt"],[2053,36,1442,38],[2054,6,1443,8],[2054,10,1443,12],[2054,11,1443,13,"_initializeTime"],[2054,26,1443,28],[2054,27,1443,29],[2054,28,1443,30],[2055,4,1444,4],[2056,4,1445,4,"_initializeTime"],[2056,19,1445,19,"_initializeTime"],[2056,20,1445,19],[2056,22,1445,22],[2057,6,1446,8],[2057,10,1446,12],[2057,11,1446,13,"lastSignInTime"],[2057,25,1446,27],[2057,28,1446,30,"utcTimestampToDateString"],[2057,52,1446,54],[2057,53,1446,55],[2057,57,1446,59],[2057,58,1446,60,"lastLoginAt"],[2057,69,1446,71],[2057,70,1446,72],[2058,6,1447,8],[2058,10,1447,12],[2058,11,1447,13,"creationTime"],[2058,23,1447,25],[2058,26,1447,28,"utcTimestampToDateString"],[2058,50,1447,52],[2058,51,1447,53],[2058,55,1447,57],[2058,56,1447,58,"createdAt"],[2058,65,1447,67],[2058,66,1447,68],[2059,4,1448,4],[2060,4,1449,4,"_copy"],[2060,9,1449,9,"_copy"],[2060,10,1449,10,"metadata"],[2060,18,1449,18],[2060,20,1449,20],[2061,6,1450,8],[2061,10,1450,12],[2061,11,1450,13,"createdAt"],[2061,20,1450,22],[2061,23,1450,25,"metadata"],[2061,31,1450,33],[2061,32,1450,34,"createdAt"],[2061,41,1450,43],[2062,6,1451,8],[2062,10,1451,12],[2062,11,1451,13,"lastLoginAt"],[2062,22,1451,24],[2062,25,1451,27,"metadata"],[2062,33,1451,35],[2062,34,1451,36,"lastLoginAt"],[2062,45,1451,47],[2063,6,1452,8],[2063,10,1452,12],[2063,11,1452,13,"_initializeTime"],[2063,26,1452,28],[2063,27,1452,29],[2063,28,1452,30],[2064,4,1453,4],[2065,4,1454,4,"toJSON"],[2065,10,1454,10,"toJSON"],[2065,11,1454,10],[2065,13,1454,13],[2066,6,1455,8],[2066,13,1455,15],[2067,8,1456,12,"createdAt"],[2067,17,1456,21],[2067,19,1456,23],[2067,23,1456,27],[2067,24,1456,28,"createdAt"],[2067,33,1456,37],[2068,8,1457,12,"lastLoginAt"],[2068,19,1457,23],[2068,21,1457,25],[2068,25,1457,29],[2068,26,1457,30,"lastLoginAt"],[2069,6,1458,8],[2069,7,1458,9],[2070,4,1459,4],[2071,2,1460,0],[2073,2,1462,0],[2074,0,1463,0],[2075,0,1464,0],[2076,0,1465,0],[2077,0,1466,0],[2078,0,1467,0],[2079,0,1468,0],[2080,0,1469,0],[2081,0,1470,0],[2082,0,1471,0],[2083,0,1472,0],[2084,0,1473,0],[2085,0,1474,0],[2086,0,1475,0],[2087,0,1476,0],[2088,0,1477,0],[2089,2,1478,0],[2089,17,1478,15,"_reloadWithoutSaving"],[2089,37,1478,35,"_reloadWithoutSaving"],[2089,38,1478,36,"user"],[2089,42,1478,40],[2089,44,1478,42],[2090,4,1479,4],[2090,10,1479,10,"auth"],[2090,14,1479,14],[2090,17,1479,17,"user"],[2090,21,1479,21],[2090,22,1479,22,"auth"],[2090,26,1479,26],[2091,4,1480,4],[2091,10,1480,10,"idToken"],[2091,17,1480,17],[2091,20,1480,20],[2091,26,1480,26,"user"],[2091,30,1480,30],[2091,31,1480,31,"getIdToken"],[2091,41,1480,41],[2091,42,1480,42],[2091,43,1480,43],[2092,4,1481,4],[2092,10,1481,10,"response"],[2092,18,1481,18],[2092,21,1481,21],[2092,27,1481,27,"_logoutIfInvalidated"],[2092,47,1481,47],[2092,48,1481,48,"user"],[2092,52,1481,52],[2092,54,1481,54,"getAccountInfo"],[2092,68,1481,68],[2092,69,1481,69,"auth"],[2092,73,1481,73],[2092,75,1481,75],[2093,6,1481,77,"idToken"],[2094,4,1481,85],[2094,5,1481,86],[2094,6,1481,87],[2094,7,1481,88],[2095,4,1482,4,"_assert"],[2095,11,1482,11],[2095,12,1482,12,"response"],[2095,20,1482,20],[2095,22,1482,22,"users"],[2095,27,1482,27],[2095,28,1482,28,"length"],[2095,34,1482,34],[2095,36,1482,36,"auth"],[2095,40,1482,40],[2095,42,1482,42],[2095,58,1482,58],[2095,59,1482,59],[2095,93,1482,93],[2095,94,1482,94],[2096,4,1483,4],[2096,10,1483,10,"coreAccount"],[2096,21,1483,21],[2096,24,1483,24,"response"],[2096,32,1483,32],[2096,33,1483,33,"users"],[2096,38,1483,38],[2096,39,1483,39],[2096,40,1483,40],[2096,41,1483,41],[2097,4,1484,4,"user"],[2097,8,1484,8],[2097,9,1484,9,"_notifyReloadListener"],[2097,30,1484,30],[2097,31,1484,31,"coreAccount"],[2097,42,1484,42],[2097,43,1484,43],[2098,4,1485,4],[2098,10,1485,10,"newProviderData"],[2098,25,1485,25],[2098,28,1485,28,"coreAccount"],[2098,39,1485,39],[2098,40,1485,40,"providerUserInfo"],[2098,56,1485,56],[2098,58,1485,58,"length"],[2098,64,1485,64],[2098,67,1486,10,"extractProviderData"],[2098,86,1486,29],[2098,87,1486,30,"coreAccount"],[2098,98,1486,41],[2098,99,1486,42,"providerUserInfo"],[2098,115,1486,58],[2098,116,1486,59],[2098,119,1487,10],[2098,121,1487,12],[2099,4,1488,4],[2099,10,1488,10,"providerData"],[2099,22,1488,22],[2099,25,1488,25,"mergeProviderData"],[2099,42,1488,42],[2099,43,1488,43,"user"],[2099,47,1488,47],[2099,48,1488,48,"providerData"],[2099,60,1488,60],[2099,62,1488,62,"newProviderData"],[2099,77,1488,77],[2099,78,1488,78],[2100,4,1489,4],[2101,4,1490,4],[2102,4,1491,4],[2103,4,1492,4],[2104,4,1493,4],[2105,4,1494,4],[2105,10,1494,10,"oldIsAnonymous"],[2105,24,1494,24],[2105,27,1494,27,"user"],[2105,31,1494,31],[2105,32,1494,32,"isAnonymous"],[2105,43,1494,43],[2106,4,1495,4],[2106,10,1495,10,"newIsAnonymous"],[2106,24,1495,24],[2106,27,1495,27],[2106,29,1495,29,"user"],[2106,33,1495,33],[2106,34,1495,34,"email"],[2106,39,1495,39],[2106,43,1495,43,"coreAccount"],[2106,54,1495,54],[2106,55,1495,55,"passwordHash"],[2106,67,1495,67],[2106,68,1495,68],[2106,72,1495,72],[2106,73,1495,73,"providerData"],[2106,85,1495,85],[2106,87,1495,87,"length"],[2106,93,1495,93],[2107,4,1496,4],[2107,10,1496,10,"isAnonymous"],[2107,21,1496,21],[2107,24,1496,24],[2107,25,1496,25,"oldIsAnonymous"],[2107,39,1496,39],[2107,42,1496,42],[2107,47,1496,47],[2107,50,1496,50,"newIsAnonymous"],[2107,64,1496,64],[2108,4,1497,4],[2108,10,1497,10,"updates"],[2108,17,1497,17],[2108,20,1497,20],[2109,6,1498,8,"uid"],[2109,9,1498,11],[2109,11,1498,13,"coreAccount"],[2109,22,1498,24],[2109,23,1498,25,"localId"],[2109,30,1498,32],[2110,6,1499,8,"displayName"],[2110,17,1499,19],[2110,19,1499,21,"coreAccount"],[2110,30,1499,32],[2110,31,1499,33,"displayName"],[2110,42,1499,44],[2110,46,1499,48],[2110,50,1499,52],[2111,6,1500,8,"photoURL"],[2111,14,1500,16],[2111,16,1500,18,"coreAccount"],[2111,27,1500,29],[2111,28,1500,30,"photoUrl"],[2111,36,1500,38],[2111,40,1500,42],[2111,44,1500,46],[2112,6,1501,8,"email"],[2112,11,1501,13],[2112,13,1501,15,"coreAccount"],[2112,24,1501,26],[2112,25,1501,27,"email"],[2112,30,1501,32],[2112,34,1501,36],[2112,38,1501,40],[2113,6,1502,8,"emailVerified"],[2113,19,1502,21],[2113,21,1502,23,"coreAccount"],[2113,32,1502,34],[2113,33,1502,35,"emailVerified"],[2113,46,1502,48],[2113,50,1502,52],[2113,55,1502,57],[2114,6,1503,8,"phoneNumber"],[2114,17,1503,19],[2114,19,1503,21,"coreAccount"],[2114,30,1503,32],[2114,31,1503,33,"phoneNumber"],[2114,42,1503,44],[2114,46,1503,48],[2114,50,1503,52],[2115,6,1504,8,"tenantId"],[2115,14,1504,16],[2115,16,1504,18,"coreAccount"],[2115,27,1504,29],[2115,28,1504,30,"tenantId"],[2115,36,1504,38],[2115,40,1504,42],[2115,44,1504,46],[2116,6,1505,8,"providerData"],[2116,18,1505,20],[2117,6,1506,8,"metadata"],[2117,14,1506,16],[2117,16,1506,18],[2117,20,1506,22,"UserMetadata"],[2117,32,1506,34],[2117,33,1506,35,"coreAccount"],[2117,44,1506,46],[2117,45,1506,47,"createdAt"],[2117,54,1506,56],[2117,56,1506,58,"coreAccount"],[2117,67,1506,69],[2117,68,1506,70,"lastLoginAt"],[2117,79,1506,81],[2117,80,1506,82],[2118,6,1507,8,"isAnonymous"],[2119,4,1508,4],[2119,5,1508,5],[2120,4,1509,4,"Object"],[2120,10,1509,10],[2120,11,1509,11,"assign"],[2120,17,1509,17],[2120,18,1509,18,"user"],[2120,22,1509,22],[2120,24,1509,24,"updates"],[2120,31,1509,31],[2120,32,1509,32],[2121,2,1510,0],[2122,2,1511,0],[2123,0,1512,0],[2124,0,1513,0],[2125,0,1514,0],[2126,0,1515,0],[2127,0,1516,0],[2128,0,1517,0],[2129,2,1518,0],[2129,17,1518,15,"reload"],[2129,23,1518,21,"reload"],[2129,24,1518,22,"user"],[2129,28,1518,26],[2129,30,1518,28],[2130,4,1519,4],[2130,10,1519,10,"userInternal"],[2130,22,1519,22],[2130,25,1519,25],[2130,29,1519,25,"getModularInstance"],[2130,42,1519,43],[2130,43,1519,43,"getModularInstance"],[2130,61,1519,43],[2130,63,1519,44,"user"],[2130,67,1519,48],[2130,68,1519,49],[2131,4,1520,4],[2131,10,1520,10,"_reloadWithoutSaving"],[2131,30,1520,30],[2131,31,1520,31,"userInternal"],[2131,43,1520,43],[2131,44,1520,44],[2132,4,1521,4],[2133,4,1522,4],[2134,4,1523,4],[2135,4,1524,4],[2135,10,1524,10,"userInternal"],[2135,22,1524,22],[2135,23,1524,23,"auth"],[2135,27,1524,27],[2135,28,1524,28,"_persistUserIfCurrent"],[2135,49,1524,49],[2135,50,1524,50,"userInternal"],[2135,62,1524,62],[2135,63,1524,63],[2136,4,1525,4,"userInternal"],[2136,16,1525,16],[2136,17,1525,17,"auth"],[2136,21,1525,21],[2136,22,1525,22,"_notifyListenersIfCurrent"],[2136,47,1525,47],[2136,48,1525,48,"userInternal"],[2136,60,1525,60],[2136,61,1525,61],[2137,2,1526,0],[2138,2,1527,0],[2138,11,1527,9,"mergeProviderData"],[2138,28,1527,26,"mergeProviderData"],[2138,29,1527,27,"original"],[2138,37,1527,35],[2138,39,1527,37,"newData"],[2138,46,1527,44],[2138,48,1527,46],[2139,4,1528,4],[2139,10,1528,10,"deduped"],[2139,17,1528,17],[2139,20,1528,20,"original"],[2139,28,1528,28],[2139,29,1528,29,"filter"],[2139,35,1528,35],[2139,36,1528,36,"o"],[2139,37,1528,37],[2139,41,1528,41],[2139,42,1528,42,"newData"],[2139,49,1528,49],[2139,50,1528,50,"some"],[2139,54,1528,54],[2139,55,1528,55,"n"],[2139,56,1528,56],[2139,60,1528,60,"n"],[2139,61,1528,61],[2139,62,1528,62,"providerId"],[2139,72,1528,72],[2139,77,1528,77,"o"],[2139,78,1528,78],[2139,79,1528,79,"providerId"],[2139,89,1528,89],[2139,90,1528,90],[2139,91,1528,91],[2140,4,1529,4],[2140,11,1529,11],[2140,12,1529,12],[2140,15,1529,15,"deduped"],[2140,22,1529,22],[2140,24,1529,24],[2140,27,1529,27,"newData"],[2140,34,1529,34],[2140,35,1529,35],[2141,2,1530,0],[2142,2,1531,0],[2142,11,1531,9,"extractProviderData"],[2142,30,1531,28,"extractProviderData"],[2142,31,1531,29,"providers"],[2142,40,1531,38],[2142,42,1531,40],[2143,4,1532,4],[2143,11,1532,11,"providers"],[2143,20,1532,20],[2143,21,1532,21,"map"],[2143,24,1532,24],[2143,25,1532,25],[2143,26,1532,26],[2144,6,1532,28,"providerId"],[2144,16,1532,38],[2145,6,1532,40],[2145,9,1532,43,"provider"],[2146,4,1532,52],[2146,5,1532,53],[2146,10,1532,58],[2147,6,1533,8],[2147,13,1533,15],[2148,8,1534,12,"providerId"],[2148,18,1534,22],[2149,8,1535,12,"uid"],[2149,11,1535,15],[2149,13,1535,17,"provider"],[2149,21,1535,25],[2149,22,1535,26,"rawId"],[2149,27,1535,31],[2149,31,1535,35],[2149,33,1535,37],[2150,8,1536,12,"displayName"],[2150,19,1536,23],[2150,21,1536,25,"provider"],[2150,29,1536,33],[2150,30,1536,34,"displayName"],[2150,41,1536,45],[2150,45,1536,49],[2150,49,1536,53],[2151,8,1537,12,"email"],[2151,13,1537,17],[2151,15,1537,19,"provider"],[2151,23,1537,27],[2151,24,1537,28,"email"],[2151,29,1537,33],[2151,33,1537,37],[2151,37,1537,41],[2152,8,1538,12,"phoneNumber"],[2152,19,1538,23],[2152,21,1538,25,"provider"],[2152,29,1538,33],[2152,30,1538,34,"phoneNumber"],[2152,41,1538,45],[2152,45,1538,49],[2152,49,1538,53],[2153,8,1539,12,"photoURL"],[2153,16,1539,20],[2153,18,1539,22,"provider"],[2153,26,1539,30],[2153,27,1539,31,"photoUrl"],[2153,35,1539,39],[2153,39,1539,43],[2154,6,1540,8],[2154,7,1540,9],[2155,4,1541,4],[2155,5,1541,5],[2155,6,1541,6],[2156,2,1542,0],[2158,2,1544,0],[2159,0,1545,0],[2160,0,1546,0],[2161,0,1547,0],[2162,0,1548,0],[2163,0,1549,0],[2164,0,1550,0],[2165,0,1551,0],[2166,0,1552,0],[2167,0,1553,0],[2168,0,1554,0],[2169,0,1555,0],[2170,0,1556,0],[2171,0,1557,0],[2172,0,1558,0],[2173,0,1559,0],[2174,2,1560,0],[2174,17,1560,15,"requestStsToken"],[2174,32,1560,30,"requestStsToken"],[2174,33,1560,31,"auth"],[2174,37,1560,35],[2174,39,1560,37,"refreshToken"],[2174,51,1560,49],[2174,53,1560,51],[2175,4,1561,4],[2175,10,1561,10,"response"],[2175,18,1561,18],[2175,21,1561,21],[2175,27,1561,27,"_performFetchWithErrorHandling"],[2175,57,1561,57],[2175,58,1561,58,"auth"],[2175,62,1561,62],[2175,64,1561,64],[2175,65,1561,65],[2175,66,1561,66],[2175,68,1561,68],[2175,80,1561,80],[2176,6,1562,8],[2176,12,1562,14,"body"],[2176,16,1562,18],[2176,19,1562,21],[2176,23,1562,21,"querystring"],[2176,36,1562,32],[2176,37,1562,32,"querystring"],[2176,48,1562,32],[2176,50,1562,33],[2177,8,1563,12],[2177,20,1563,24],[2177,22,1563,26],[2177,37,1563,41],[2178,8,1564,12],[2178,23,1564,27],[2178,25,1564,29,"refreshToken"],[2179,6,1565,8],[2179,7,1565,9],[2179,8,1565,10],[2179,9,1565,11,"slice"],[2179,14,1565,16],[2179,15,1565,17],[2179,16,1565,18],[2179,17,1565,19],[2180,6,1566,8],[2180,12,1566,14],[2181,8,1566,16,"tokenApiHost"],[2181,20,1566,28],[2182,8,1566,30,"apiKey"],[2183,6,1566,37],[2183,7,1566,38],[2183,10,1566,41,"auth"],[2183,14,1566,45],[2183,15,1566,46,"config"],[2183,21,1566,52],[2184,6,1567,8],[2184,12,1567,14,"url"],[2184,15,1567,17],[2184,18,1567,20],[2184,24,1567,26,"_getFinalTarget"],[2184,39,1567,41],[2184,40,1567,42,"auth"],[2184,44,1567,46],[2184,46,1567,48,"tokenApiHost"],[2184,58,1567,60],[2184,60,1567,62],[2184,71,1567,73],[2184,72,1567,74],[2184,94,1567,96],[2184,101,1567,103,"apiKey"],[2184,107,1567,109],[2184,109,1567,111],[2184,110,1567,112],[2185,6,1568,8],[2185,12,1568,14,"headers"],[2185,19,1568,21],[2185,22,1568,24],[2185,28,1568,30,"auth"],[2185,32,1568,34],[2185,33,1568,35,"_getAdditionalHeaders"],[2185,54,1568,56],[2185,55,1568,57],[2185,56,1568,58],[2186,6,1569,8,"headers"],[2186,13,1569,15],[2186,14,1569,16],[2186,28,1569,30],[2186,29,1569,31],[2186,59,1569,61],[2186,62,1569,64],[2186,97,1569,99],[2187,6,1570,8],[2187,12,1570,14,"options"],[2187,19,1570,21],[2187,22,1570,24],[2188,8,1571,12,"method"],[2188,14,1571,18],[2188,16,1571,20],[2188,22,1571,26],[2188,23,1571,27],[2189,8,1572,12,"headers"],[2189,15,1572,19],[2190,8,1573,12,"body"],[2191,6,1574,8],[2191,7,1574,9],[2192,6,1575,8],[2192,10,1575,12,"auth"],[2192,14,1575,16],[2192,15,1575,17,"emulatorConfig"],[2192,29,1575,31],[2192,33,1576,12],[2192,37,1576,12,"isCloudWorkstation"],[2192,50,1576,30],[2192,51,1576,30,"isCloudWorkstation"],[2192,69,1576,30],[2192,71,1576,31,"auth"],[2192,75,1576,35],[2192,76,1576,36,"emulatorConfig"],[2192,90,1576,50],[2192,91,1576,51,"host"],[2192,95,1576,55],[2192,96,1576,56],[2192,98,1576,58],[2193,8,1577,12,"options"],[2193,15,1577,19],[2193,16,1577,20,"credentials"],[2193,27,1577,31],[2193,30,1577,34],[2193,39,1577,43],[2194,6,1578,8],[2195,6,1579,8],[2195,13,1579,15,"FetchProvider"],[2195,26,1579,28],[2195,27,1579,29,"fetch"],[2195,32,1579,34],[2195,33,1579,35],[2195,34,1579,36],[2195,35,1579,37,"url"],[2195,38,1579,40],[2195,40,1579,42,"options"],[2195,47,1579,49],[2195,48,1579,50],[2196,4,1580,4],[2196,5,1580,5],[2196,6,1580,6],[2197,4,1581,4],[2198,4,1582,4],[2198,11,1582,11],[2199,6,1583,8,"accessToken"],[2199,17,1583,19],[2199,19,1583,21,"response"],[2199,27,1583,29],[2199,28,1583,30,"access_token"],[2199,40,1583,42],[2200,6,1584,8,"expiresIn"],[2200,15,1584,17],[2200,17,1584,19,"response"],[2200,25,1584,27],[2200,26,1584,28,"expires_in"],[2200,36,1584,38],[2201,6,1585,8,"refreshToken"],[2201,18,1585,20],[2201,20,1585,22,"response"],[2201,28,1585,30],[2201,29,1585,31,"refresh_token"],[2202,4,1586,4],[2202,5,1586,5],[2203,2,1587,0],[2204,2,1588,0],[2204,17,1588,15,"revokeToken"],[2204,28,1588,26,"revokeToken"],[2204,29,1588,27,"auth"],[2204,33,1588,31],[2204,35,1588,33,"request"],[2204,42,1588,40],[2204,44,1588,42],[2205,4,1589,4],[2205,11,1589,11,"_performApiRequest"],[2205,29,1589,29],[2205,30,1589,30,"auth"],[2205,34,1589,34],[2205,36,1589,36],[2205,42,1589,42],[2205,43,1589,43],[2205,66,1589,66],[2205,92,1589,92],[2205,93,1589,93],[2205,122,1589,122,"_addTidIfNecessary"],[2205,140,1589,140],[2205,141,1589,141,"auth"],[2205,145,1589,145],[2205,147,1589,147,"request"],[2205,154,1589,154],[2205,155,1589,155],[2205,156,1589,156],[2206,2,1590,0],[2208,2,1592,0],[2209,0,1593,0],[2210,0,1594,0],[2211,0,1595,0],[2212,0,1596,0],[2213,0,1597,0],[2214,0,1598,0],[2215,0,1599,0],[2216,0,1600,0],[2217,0,1601,0],[2218,0,1602,0],[2219,0,1603,0],[2220,0,1604,0],[2221,0,1605,0],[2222,0,1606,0],[2223,0,1607,0],[2224,2,1608,0],[2225,0,1609,0],[2226,0,1610,0],[2227,0,1611,0],[2228,0,1612,0],[2229,0,1613,0],[2230,2,1614,0],[2230,8,1614,6,"StsTokenManager"],[2230,23,1614,21],[2230,24,1614,22],[2231,4,1615,4,"constructor"],[2231,15,1615,15,"constructor"],[2231,16,1615,15],[2231,18,1615,18],[2232,6,1616,8],[2232,10,1616,12],[2232,11,1616,13,"refreshToken"],[2232,23,1616,25],[2232,26,1616,28],[2232,30,1616,32],[2233,6,1617,8],[2233,10,1617,12],[2233,11,1617,13,"accessToken"],[2233,22,1617,24],[2233,25,1617,27],[2233,29,1617,31],[2234,6,1618,8],[2234,10,1618,12],[2234,11,1618,13,"expirationTime"],[2234,25,1618,27],[2234,28,1618,30],[2234,32,1618,34],[2235,4,1619,4],[2236,4,1620,4],[2236,8,1620,8,"isExpired"],[2236,17,1620,17,"isExpired"],[2236,18,1620,17],[2236,20,1620,20],[2237,6,1621,8],[2237,13,1621,16],[2237,14,1621,17],[2237,18,1621,21],[2237,19,1621,22,"expirationTime"],[2237,33,1621,36],[2237,37,1622,12,"Date"],[2237,41,1622,16],[2237,42,1622,17,"now"],[2237,45,1622,20],[2237,46,1622,21],[2237,47,1622,22],[2237,50,1622,25],[2237,54,1622,29],[2237,55,1622,30,"expirationTime"],[2237,69,1622,44],[2237,72,1622,47],[2237,77,1622,52],[2237,78,1622,53],[2238,4,1623,4],[2239,4,1624,4,"updateFromServerResponse"],[2239,28,1624,28,"updateFromServerResponse"],[2239,29,1624,29,"response"],[2239,37,1624,37],[2239,39,1624,39],[2240,6,1625,8,"_assert"],[2240,13,1625,15],[2240,14,1625,16,"response"],[2240,22,1625,24],[2240,23,1625,25,"idToken"],[2240,30,1625,32],[2240,32,1625,34],[2240,48,1625,50],[2240,49,1625,51],[2240,83,1625,85],[2240,84,1625,86],[2241,6,1626,8,"_assert"],[2241,13,1626,15],[2241,14,1626,16],[2241,21,1626,23,"response"],[2241,29,1626,31],[2241,30,1626,32,"idToken"],[2241,37,1626,39],[2241,42,1626,44],[2241,53,1626,55],[2241,55,1626,57],[2241,71,1626,73],[2241,72,1626,74],[2241,106,1626,108],[2241,107,1626,109],[2242,6,1627,8,"_assert"],[2242,13,1627,15],[2242,14,1627,16],[2242,21,1627,23,"response"],[2242,29,1627,31],[2242,30,1627,32,"refreshToken"],[2242,42,1627,44],[2242,47,1627,49],[2242,58,1627,60],[2242,60,1627,62],[2242,76,1627,78],[2242,77,1627,79],[2242,111,1627,113],[2242,112,1627,114],[2243,6,1628,8],[2243,12,1628,14,"expiresIn"],[2243,21,1628,23],[2243,24,1628,26],[2243,35,1628,37],[2243,39,1628,41,"response"],[2243,47,1628,49],[2243,51,1628,53],[2243,58,1628,60,"response"],[2243,66,1628,68],[2243,67,1628,69,"expiresIn"],[2243,76,1628,78],[2243,81,1628,83],[2243,92,1628,94],[2243,95,1629,14,"Number"],[2243,101,1629,20],[2243,102,1629,21,"response"],[2243,110,1629,29],[2243,111,1629,30,"expiresIn"],[2243,120,1629,39],[2243,121,1629,40],[2243,124,1630,14,"_tokenExpiresIn"],[2243,139,1630,29],[2243,140,1630,30,"response"],[2243,148,1630,38],[2243,149,1630,39,"idToken"],[2243,156,1630,46],[2243,157,1630,47],[2244,6,1631,8],[2244,10,1631,12],[2244,11,1631,13,"updateTokensAndExpiration"],[2244,36,1631,38],[2244,37,1631,39,"response"],[2244,45,1631,47],[2244,46,1631,48,"idToken"],[2244,53,1631,55],[2244,55,1631,57,"response"],[2244,63,1631,65],[2244,64,1631,66,"refreshToken"],[2244,76,1631,78],[2244,78,1631,80,"expiresIn"],[2244,87,1631,89],[2244,88,1631,90],[2245,4,1632,4],[2246,4,1633,4,"updateFromIdToken"],[2246,21,1633,21,"updateFromIdToken"],[2246,22,1633,22,"idToken"],[2246,29,1633,29],[2246,31,1633,31],[2247,6,1634,8,"_assert"],[2247,13,1634,15],[2247,14,1634,16,"idToken"],[2247,21,1634,23],[2247,22,1634,24,"length"],[2247,28,1634,30],[2247,33,1634,35],[2247,34,1634,36],[2247,36,1634,38],[2247,52,1634,54],[2247,53,1634,55],[2247,87,1634,89],[2247,88,1634,90],[2248,6,1635,8],[2248,12,1635,14,"expiresIn"],[2248,21,1635,23],[2248,24,1635,26,"_tokenExpiresIn"],[2248,39,1635,41],[2248,40,1635,42,"idToken"],[2248,47,1635,49],[2248,48,1635,50],[2249,6,1636,8],[2249,10,1636,12],[2249,11,1636,13,"updateTokensAndExpiration"],[2249,36,1636,38],[2249,37,1636,39,"idToken"],[2249,44,1636,46],[2249,46,1636,48],[2249,50,1636,52],[2249,52,1636,54,"expiresIn"],[2249,61,1636,63],[2249,62,1636,64],[2250,4,1637,4],[2251,4,1638,4],[2251,10,1638,10,"getToken"],[2251,18,1638,18,"getToken"],[2251,19,1638,19,"auth"],[2251,23,1638,23],[2251,25,1638,25,"forceRefresh"],[2251,37,1638,37],[2251,40,1638,40],[2251,45,1638,45],[2251,47,1638,47],[2252,6,1639,8],[2252,10,1639,12],[2252,11,1639,13,"forceRefresh"],[2252,23,1639,25],[2252,27,1639,29],[2252,31,1639,33],[2252,32,1639,34,"accessToken"],[2252,43,1639,45],[2252,47,1639,49],[2252,48,1639,50],[2252,52,1639,54],[2252,53,1639,55,"isExpired"],[2252,62,1639,64],[2252,64,1639,66],[2253,8,1640,12],[2253,15,1640,19],[2253,19,1640,23],[2253,20,1640,24,"accessToken"],[2253,31,1640,35],[2254,6,1641,8],[2255,6,1642,8,"_assert"],[2255,13,1642,15],[2255,14,1642,16],[2255,18,1642,20],[2255,19,1642,21,"refreshToken"],[2255,31,1642,33],[2255,33,1642,35,"auth"],[2255,37,1642,39],[2255,39,1642,41],[2255,59,1642,61],[2255,60,1642,62],[2255,93,1642,95],[2255,94,1642,96],[2256,6,1643,8],[2256,10,1643,12],[2256,14,1643,16],[2256,15,1643,17,"refreshToken"],[2256,27,1643,29],[2256,29,1643,31],[2257,8,1644,12],[2257,14,1644,18],[2257,18,1644,22],[2257,19,1644,23,"refresh"],[2257,26,1644,30],[2257,27,1644,31,"auth"],[2257,31,1644,35],[2257,33,1644,37],[2257,37,1644,41],[2257,38,1644,42,"refreshToken"],[2257,50,1644,54],[2257,51,1644,55],[2258,8,1645,12],[2258,15,1645,19],[2258,19,1645,23],[2258,20,1645,24,"accessToken"],[2258,31,1645,35],[2259,6,1646,8],[2260,6,1647,8],[2260,13,1647,15],[2260,17,1647,19],[2261,4,1648,4],[2262,4,1649,4,"clearRefreshToken"],[2262,21,1649,21,"clearRefreshToken"],[2262,22,1649,21],[2262,24,1649,24],[2263,6,1650,8],[2263,10,1650,12],[2263,11,1650,13,"refreshToken"],[2263,23,1650,25],[2263,26,1650,28],[2263,30,1650,32],[2264,4,1651,4],[2265,4,1652,4],[2265,10,1652,10,"refresh"],[2265,17,1652,17,"refresh"],[2265,18,1652,18,"auth"],[2265,22,1652,22],[2265,24,1652,24,"oldToken"],[2265,32,1652,32],[2265,34,1652,34],[2266,6,1653,8],[2266,12,1653,14],[2267,8,1653,16,"accessToken"],[2267,19,1653,27],[2268,8,1653,29,"refreshToken"],[2268,20,1653,41],[2269,8,1653,43,"expiresIn"],[2270,6,1653,53],[2270,7,1653,54],[2270,10,1653,57],[2270,16,1653,63,"requestStsToken"],[2270,31,1653,78],[2270,32,1653,79,"auth"],[2270,36,1653,83],[2270,38,1653,85,"oldToken"],[2270,46,1653,93],[2270,47,1653,94],[2271,6,1654,8],[2271,10,1654,12],[2271,11,1654,13,"updateTokensAndExpiration"],[2271,36,1654,38],[2271,37,1654,39,"accessToken"],[2271,48,1654,50],[2271,50,1654,52,"refreshToken"],[2271,62,1654,64],[2271,64,1654,66,"Number"],[2271,70,1654,72],[2271,71,1654,73,"expiresIn"],[2271,80,1654,82],[2271,81,1654,83],[2271,82,1654,84],[2272,4,1655,4],[2273,4,1656,4,"updateTokensAndExpiration"],[2273,29,1656,29,"updateTokensAndExpiration"],[2273,30,1656,30,"accessToken"],[2273,41,1656,41],[2273,43,1656,43,"refreshToken"],[2273,55,1656,55],[2273,57,1656,57,"expiresInSec"],[2273,69,1656,69],[2273,71,1656,71],[2274,6,1657,8],[2274,10,1657,12],[2274,11,1657,13,"refreshToken"],[2274,23,1657,25],[2274,26,1657,28,"refreshToken"],[2274,38,1657,40],[2274,42,1657,44],[2274,46,1657,48],[2275,6,1658,8],[2275,10,1658,12],[2275,11,1658,13,"accessToken"],[2275,22,1658,24],[2275,25,1658,27,"accessToken"],[2275,36,1658,38],[2275,40,1658,42],[2275,44,1658,46],[2276,6,1659,8],[2276,10,1659,12],[2276,11,1659,13,"expirationTime"],[2276,25,1659,27],[2276,28,1659,30,"Date"],[2276,32,1659,34],[2276,33,1659,35,"now"],[2276,36,1659,38],[2276,37,1659,39],[2276,38,1659,40],[2276,41,1659,43,"expiresInSec"],[2276,53,1659,55],[2276,56,1659,58],[2276,60,1659,62],[2277,4,1660,4],[2278,4,1661,4],[2278,11,1661,11,"fromJSON"],[2278,19,1661,19,"fromJSON"],[2278,20,1661,20,"appName"],[2278,27,1661,27],[2278,29,1661,29,"object"],[2278,35,1661,35],[2278,37,1661,37],[2279,6,1662,8],[2279,12,1662,14],[2280,8,1662,16,"refreshToken"],[2280,20,1662,28],[2281,8,1662,30,"accessToken"],[2281,19,1662,41],[2282,8,1662,43,"expirationTime"],[2283,6,1662,58],[2283,7,1662,59],[2283,10,1662,62,"object"],[2283,16,1662,68],[2284,6,1663,8],[2284,12,1663,14,"manager"],[2284,19,1663,21],[2284,22,1663,24],[2284,26,1663,28,"StsTokenManager"],[2284,41,1663,43],[2284,42,1663,44],[2284,43,1663,45],[2285,6,1664,8],[2285,10,1664,12,"refreshToken"],[2285,22,1664,24],[2285,24,1664,26],[2286,8,1665,12,"_assert"],[2286,15,1665,19],[2286,16,1665,20],[2286,23,1665,27,"refreshToken"],[2286,35,1665,39],[2286,40,1665,44],[2286,48,1665,52],[2286,50,1665,54],[2286,66,1665,70],[2286,67,1665,71],[2286,103,1665,107],[2287,10,1666,16,"appName"],[2288,8,1667,12],[2288,9,1667,13],[2288,10,1667,14],[2289,8,1668,12,"manager"],[2289,15,1668,19],[2289,16,1668,20,"refreshToken"],[2289,28,1668,32],[2289,31,1668,35,"refreshToken"],[2289,43,1668,47],[2290,6,1669,8],[2291,6,1670,8],[2291,10,1670,12,"accessToken"],[2291,21,1670,23],[2291,23,1670,25],[2292,8,1671,12,"_assert"],[2292,15,1671,19],[2292,16,1671,20],[2292,23,1671,27,"accessToken"],[2292,34,1671,38],[2292,39,1671,43],[2292,47,1671,51],[2292,49,1671,53],[2292,65,1671,69],[2292,66,1671,70],[2292,102,1671,106],[2293,10,1672,16,"appName"],[2294,8,1673,12],[2294,9,1673,13],[2294,10,1673,14],[2295,8,1674,12,"manager"],[2295,15,1674,19],[2295,16,1674,20,"accessToken"],[2295,27,1674,31],[2295,30,1674,34,"accessToken"],[2295,41,1674,45],[2296,6,1675,8],[2297,6,1676,8],[2297,10,1676,12,"expirationTime"],[2297,24,1676,26],[2297,26,1676,28],[2298,8,1677,12,"_assert"],[2298,15,1677,19],[2298,16,1677,20],[2298,23,1677,27,"expirationTime"],[2298,37,1677,41],[2298,42,1677,46],[2298,50,1677,54],[2298,52,1677,56],[2298,68,1677,72],[2298,69,1677,73],[2298,105,1677,109],[2299,10,1678,16,"appName"],[2300,8,1679,12],[2300,9,1679,13],[2300,10,1679,14],[2301,8,1680,12,"manager"],[2301,15,1680,19],[2301,16,1680,20,"expirationTime"],[2301,30,1680,34],[2301,33,1680,37,"expirationTime"],[2301,47,1680,51],[2302,6,1681,8],[2303,6,1682,8],[2303,13,1682,15,"manager"],[2303,20,1682,22],[2304,4,1683,4],[2305,4,1684,4,"toJSON"],[2305,10,1684,10,"toJSON"],[2305,11,1684,10],[2305,13,1684,13],[2306,6,1685,8],[2306,13,1685,15],[2307,8,1686,12,"refreshToken"],[2307,20,1686,24],[2307,22,1686,26],[2307,26,1686,30],[2307,27,1686,31,"refreshToken"],[2307,39,1686,43],[2308,8,1687,12,"accessToken"],[2308,19,1687,23],[2308,21,1687,25],[2308,25,1687,29],[2308,26,1687,30,"accessToken"],[2308,37,1687,41],[2309,8,1688,12,"expirationTime"],[2309,22,1688,26],[2309,24,1688,28],[2309,28,1688,32],[2309,29,1688,33,"expirationTime"],[2310,6,1689,8],[2310,7,1689,9],[2311,4,1690,4],[2312,4,1691,4,"_assign"],[2312,11,1691,11,"_assign"],[2312,12,1691,12,"stsTokenManager"],[2312,27,1691,27],[2312,29,1691,29],[2313,6,1692,8],[2313,10,1692,12],[2313,11,1692,13,"accessToken"],[2313,22,1692,24],[2313,25,1692,27,"stsTokenManager"],[2313,40,1692,42],[2313,41,1692,43,"accessToken"],[2313,52,1692,54],[2314,6,1693,8],[2314,10,1693,12],[2314,11,1693,13,"refreshToken"],[2314,23,1693,25],[2314,26,1693,28,"stsTokenManager"],[2314,41,1693,43],[2314,42,1693,44,"refreshToken"],[2314,54,1693,56],[2315,6,1694,8],[2315,10,1694,12],[2315,11,1694,13,"expirationTime"],[2315,25,1694,27],[2315,28,1694,30,"stsTokenManager"],[2315,43,1694,45],[2315,44,1694,46,"expirationTime"],[2315,58,1694,60],[2316,4,1695,4],[2317,4,1696,4,"_clone"],[2317,10,1696,10,"_clone"],[2317,11,1696,10],[2317,13,1696,13],[2318,6,1697,8],[2318,13,1697,15,"Object"],[2318,19,1697,21],[2318,20,1697,22,"assign"],[2318,26,1697,28],[2318,27,1697,29],[2318,31,1697,33,"StsTokenManager"],[2318,46,1697,48],[2318,47,1697,49],[2318,48,1697,50],[2318,50,1697,52],[2318,54,1697,56],[2318,55,1697,57,"toJSON"],[2318,61,1697,63],[2318,62,1697,64],[2318,63,1697,65],[2318,64,1697,66],[2319,4,1698,4],[2320,4,1699,4,"_performRefresh"],[2320,19,1699,19,"_performRefresh"],[2320,20,1699,19],[2320,22,1699,22],[2321,6,1700,8],[2321,13,1700,15,"debugFail"],[2321,22,1700,24],[2321,23,1700,25],[2321,40,1700,42],[2321,41,1700,43],[2322,4,1701,4],[2323,2,1702,0],[2325,2,1704,0],[2326,0,1705,0],[2327,0,1706,0],[2328,0,1707,0],[2329,0,1708,0],[2330,0,1709,0],[2331,0,1710,0],[2332,0,1711,0],[2333,0,1712,0],[2334,0,1713,0],[2335,0,1714,0],[2336,0,1715,0],[2337,0,1716,0],[2338,0,1717,0],[2339,0,1718,0],[2340,0,1719,0],[2341,2,1720,0],[2341,11,1720,9,"assertStringOrUndefined"],[2341,34,1720,32,"assertStringOrUndefined"],[2341,35,1720,33,"assertion"],[2341,44,1720,42],[2341,46,1720,44,"appName"],[2341,53,1720,51],[2341,55,1720,53],[2342,4,1721,4,"_assert"],[2342,11,1721,11],[2342,12,1721,12],[2342,19,1721,19,"assertion"],[2342,28,1721,28],[2342,33,1721,33],[2342,41,1721,41],[2342,45,1721,45],[2342,52,1721,52,"assertion"],[2342,61,1721,61],[2342,66,1721,66],[2342,77,1721,77],[2342,79,1721,79],[2342,95,1721,95],[2342,96,1721,96],[2342,132,1721,132],[2343,6,1721,134,"appName"],[2344,4,1721,142],[2344,5,1721,143],[2344,6,1721,144],[2345,2,1722,0],[2346,2,1723,0],[2346,8,1723,6,"UserImpl"],[2346,16,1723,14],[2346,17,1723,15],[2347,4,1724,4,"constructor"],[2347,15,1724,15,"constructor"],[2347,16,1724,16],[2348,6,1724,18,"uid"],[2348,9,1724,21],[2349,6,1724,23,"auth"],[2349,10,1724,27],[2350,6,1724,29,"stsTokenManager"],[2350,21,1724,44],[2351,6,1724,46],[2351,9,1724,49,"opt"],[2352,4,1724,53],[2352,5,1724,54],[2352,7,1724,56],[2353,6,1725,8],[2354,6,1726,8],[2354,10,1726,12],[2354,11,1726,13,"providerId"],[2354,21,1726,23],[2354,24,1726,26],[2354,34,1726,36],[2354,35,1726,37],[2355,6,1727,8],[2355,10,1727,12],[2355,11,1727,13,"proactiveRefresh"],[2355,27,1727,29],[2355,30,1727,32],[2355,34,1727,36,"ProactiveRefresh"],[2355,50,1727,52],[2355,51,1727,53],[2355,55,1727,57],[2355,56,1727,58],[2356,6,1728,8],[2356,10,1728,12],[2356,11,1728,13,"reloadUserInfo"],[2356,25,1728,27],[2356,28,1728,30],[2356,32,1728,34],[2357,6,1729,8],[2357,10,1729,12],[2357,11,1729,13,"reloadListener"],[2357,25,1729,27],[2357,28,1729,30],[2357,32,1729,34],[2358,6,1730,8],[2358,10,1730,12],[2358,11,1730,13,"uid"],[2358,14,1730,16],[2358,17,1730,19,"uid"],[2358,20,1730,22],[2359,6,1731,8],[2359,10,1731,12],[2359,11,1731,13,"auth"],[2359,15,1731,17],[2359,18,1731,20,"auth"],[2359,22,1731,24],[2360,6,1732,8],[2360,10,1732,12],[2360,11,1732,13,"stsTokenManager"],[2360,26,1732,28],[2360,29,1732,31,"stsTokenManager"],[2360,44,1732,46],[2361,6,1733,8],[2361,10,1733,12],[2361,11,1733,13,"accessToken"],[2361,22,1733,24],[2361,25,1733,27,"stsTokenManager"],[2361,40,1733,42],[2361,41,1733,43,"accessToken"],[2361,52,1733,54],[2362,6,1734,8],[2362,10,1734,12],[2362,11,1734,13,"displayName"],[2362,22,1734,24],[2362,25,1734,27,"opt"],[2362,28,1734,30],[2362,29,1734,31,"displayName"],[2362,40,1734,42],[2362,44,1734,46],[2362,48,1734,50],[2363,6,1735,8],[2363,10,1735,12],[2363,11,1735,13,"email"],[2363,16,1735,18],[2363,19,1735,21,"opt"],[2363,22,1735,24],[2363,23,1735,25,"email"],[2363,28,1735,30],[2363,32,1735,34],[2363,36,1735,38],[2364,6,1736,8],[2364,10,1736,12],[2364,11,1736,13,"emailVerified"],[2364,24,1736,26],[2364,27,1736,29,"opt"],[2364,30,1736,32],[2364,31,1736,33,"emailVerified"],[2364,44,1736,46],[2364,48,1736,50],[2364,53,1736,55],[2365,6,1737,8],[2365,10,1737,12],[2365,11,1737,13,"phoneNumber"],[2365,22,1737,24],[2365,25,1737,27,"opt"],[2365,28,1737,30],[2365,29,1737,31,"phoneNumber"],[2365,40,1737,42],[2365,44,1737,46],[2365,48,1737,50],[2366,6,1738,8],[2366,10,1738,12],[2366,11,1738,13,"photoURL"],[2366,19,1738,21],[2366,22,1738,24,"opt"],[2366,25,1738,27],[2366,26,1738,28,"photoURL"],[2366,34,1738,36],[2366,38,1738,40],[2366,42,1738,44],[2367,6,1739,8],[2367,10,1739,12],[2367,11,1739,13,"isAnonymous"],[2367,22,1739,24],[2367,25,1739,27,"opt"],[2367,28,1739,30],[2367,29,1739,31,"isAnonymous"],[2367,40,1739,42],[2367,44,1739,46],[2367,49,1739,51],[2368,6,1740,8],[2368,10,1740,12],[2368,11,1740,13,"tenantId"],[2368,19,1740,21],[2368,22,1740,24,"opt"],[2368,25,1740,27],[2368,26,1740,28,"tenantId"],[2368,34,1740,36],[2368,38,1740,40],[2368,42,1740,44],[2369,6,1741,8],[2369,10,1741,12],[2369,11,1741,13,"providerData"],[2369,23,1741,25],[2369,26,1741,28,"opt"],[2369,29,1741,31],[2369,30,1741,32,"providerData"],[2369,42,1741,44],[2369,45,1741,47],[2369,46,1741,48],[2369,49,1741,51,"opt"],[2369,52,1741,54],[2369,53,1741,55,"providerData"],[2369,65,1741,67],[2369,66,1741,68],[2369,69,1741,71],[2369,71,1741,73],[2370,6,1742,8],[2370,10,1742,12],[2370,11,1742,13,"metadata"],[2370,19,1742,21],[2370,22,1742,24],[2370,26,1742,28,"UserMetadata"],[2370,38,1742,40],[2370,39,1742,41,"opt"],[2370,42,1742,44],[2370,43,1742,45,"createdAt"],[2370,52,1742,54],[2370,56,1742,58,"undefined"],[2370,65,1742,67],[2370,67,1742,69,"opt"],[2370,70,1742,72],[2370,71,1742,73,"lastLoginAt"],[2370,82,1742,84],[2370,86,1742,88,"undefined"],[2370,95,1742,97],[2370,96,1742,98],[2371,4,1743,4],[2372,4,1744,4],[2372,10,1744,10,"getIdToken"],[2372,20,1744,20,"getIdToken"],[2372,21,1744,21,"forceRefresh"],[2372,33,1744,33],[2372,35,1744,35],[2373,6,1745,8],[2373,12,1745,14,"accessToken"],[2373,23,1745,25],[2373,26,1745,28],[2373,32,1745,34,"_logoutIfInvalidated"],[2373,52,1745,54],[2373,53,1745,55],[2373,57,1745,59],[2373,59,1745,61],[2373,63,1745,65],[2373,64,1745,66,"stsTokenManager"],[2373,79,1745,81],[2373,80,1745,82,"getToken"],[2373,88,1745,90],[2373,89,1745,91],[2373,93,1745,95],[2373,94,1745,96,"auth"],[2373,98,1745,100],[2373,100,1745,102,"forceRefresh"],[2373,112,1745,114],[2373,113,1745,115],[2373,114,1745,116],[2374,6,1746,8,"_assert"],[2374,13,1746,15],[2374,14,1746,16,"accessToken"],[2374,25,1746,27],[2374,27,1746,29],[2374,31,1746,33],[2374,32,1746,34,"auth"],[2374,36,1746,38],[2374,38,1746,40],[2374,54,1746,56],[2374,55,1746,57],[2374,89,1746,91],[2374,90,1746,92],[2375,6,1747,8],[2375,10,1747,12],[2375,14,1747,16],[2375,15,1747,17,"accessToken"],[2375,26,1747,28],[2375,31,1747,33,"accessToken"],[2375,42,1747,44],[2375,44,1747,46],[2376,8,1748,12],[2376,12,1748,16],[2376,13,1748,17,"accessToken"],[2376,24,1748,28],[2376,27,1748,31,"accessToken"],[2376,38,1748,42],[2377,8,1749,12],[2377,14,1749,18],[2377,18,1749,22],[2377,19,1749,23,"auth"],[2377,23,1749,27],[2377,24,1749,28,"_persistUserIfCurrent"],[2377,45,1749,49],[2377,46,1749,50],[2377,50,1749,54],[2377,51,1749,55],[2378,8,1750,12],[2378,12,1750,16],[2378,13,1750,17,"auth"],[2378,17,1750,21],[2378,18,1750,22,"_notifyListenersIfCurrent"],[2378,43,1750,47],[2378,44,1750,48],[2378,48,1750,52],[2378,49,1750,53],[2379,6,1751,8],[2380,6,1752,8],[2380,13,1752,15,"accessToken"],[2380,24,1752,26],[2381,4,1753,4],[2382,4,1754,4,"getIdTokenResult"],[2382,20,1754,20,"getIdTokenResult"],[2382,21,1754,21,"forceRefresh"],[2382,33,1754,33],[2382,35,1754,35],[2383,6,1755,8],[2383,13,1755,15,"getIdTokenResult"],[2383,29,1755,31],[2383,30,1755,32],[2383,34,1755,36],[2383,36,1755,38,"forceRefresh"],[2383,48,1755,50],[2383,49,1755,51],[2384,4,1756,4],[2385,4,1757,4,"reload"],[2385,10,1757,10,"reload"],[2385,11,1757,10],[2385,13,1757,13],[2386,6,1758,8],[2386,13,1758,15,"reload"],[2386,19,1758,21],[2386,20,1758,22],[2386,24,1758,26],[2386,25,1758,27],[2387,4,1759,4],[2388,4,1760,4,"_assign"],[2388,11,1760,11,"_assign"],[2388,12,1760,12,"user"],[2388,16,1760,16],[2388,18,1760,18],[2389,6,1761,8],[2389,10,1761,12],[2389,14,1761,16],[2389,19,1761,21,"user"],[2389,23,1761,25],[2389,25,1761,27],[2390,8,1762,12],[2391,6,1763,8],[2392,6,1764,8,"_assert"],[2392,13,1764,15],[2392,14,1764,16],[2392,18,1764,20],[2392,19,1764,21,"uid"],[2392,22,1764,24],[2392,27,1764,29,"user"],[2392,31,1764,33],[2392,32,1764,34,"uid"],[2392,35,1764,37],[2392,37,1764,39],[2392,41,1764,43],[2392,42,1764,44,"auth"],[2392,46,1764,48],[2392,48,1764,50],[2392,64,1764,66],[2392,65,1764,67],[2392,99,1764,101],[2392,100,1764,102],[2393,6,1765,8],[2393,10,1765,12],[2393,11,1765,13,"displayName"],[2393,22,1765,24],[2393,25,1765,27,"user"],[2393,29,1765,31],[2393,30,1765,32,"displayName"],[2393,41,1765,43],[2394,6,1766,8],[2394,10,1766,12],[2394,11,1766,13,"photoURL"],[2394,19,1766,21],[2394,22,1766,24,"user"],[2394,26,1766,28],[2394,27,1766,29,"photoURL"],[2394,35,1766,37],[2395,6,1767,8],[2395,10,1767,12],[2395,11,1767,13,"email"],[2395,16,1767,18],[2395,19,1767,21,"user"],[2395,23,1767,25],[2395,24,1767,26,"email"],[2395,29,1767,31],[2396,6,1768,8],[2396,10,1768,12],[2396,11,1768,13,"emailVerified"],[2396,24,1768,26],[2396,27,1768,29,"user"],[2396,31,1768,33],[2396,32,1768,34,"emailVerified"],[2396,45,1768,47],[2397,6,1769,8],[2397,10,1769,12],[2397,11,1769,13,"phoneNumber"],[2397,22,1769,24],[2397,25,1769,27,"user"],[2397,29,1769,31],[2397,30,1769,32,"phoneNumber"],[2397,41,1769,43],[2398,6,1770,8],[2398,10,1770,12],[2398,11,1770,13,"isAnonymous"],[2398,22,1770,24],[2398,25,1770,27,"user"],[2398,29,1770,31],[2398,30,1770,32,"isAnonymous"],[2398,41,1770,43],[2399,6,1771,8],[2399,10,1771,12],[2399,11,1771,13,"tenantId"],[2399,19,1771,21],[2399,22,1771,24,"user"],[2399,26,1771,28],[2399,27,1771,29,"tenantId"],[2399,35,1771,37],[2400,6,1772,8],[2400,10,1772,12],[2400,11,1772,13,"providerData"],[2400,23,1772,25],[2400,26,1772,28,"user"],[2400,30,1772,32],[2400,31,1772,33,"providerData"],[2400,43,1772,45],[2400,44,1772,46,"map"],[2400,47,1772,49],[2400,48,1772,50,"userInfo"],[2400,56,1772,58],[2400,61,1772,63],[2401,8,1772,65],[2401,11,1772,68,"userInfo"],[2402,6,1772,77],[2402,7,1772,78],[2402,8,1772,79],[2402,9,1772,80],[2403,6,1773,8],[2403,10,1773,12],[2403,11,1773,13,"metadata"],[2403,19,1773,21],[2403,20,1773,22,"_copy"],[2403,25,1773,27],[2403,26,1773,28,"user"],[2403,30,1773,32],[2403,31,1773,33,"metadata"],[2403,39,1773,41],[2403,40,1773,42],[2404,6,1774,8],[2404,10,1774,12],[2404,11,1774,13,"stsTokenManager"],[2404,26,1774,28],[2404,27,1774,29,"_assign"],[2404,34,1774,36],[2404,35,1774,37,"user"],[2404,39,1774,41],[2404,40,1774,42,"stsTokenManager"],[2404,55,1774,57],[2404,56,1774,58],[2405,4,1775,4],[2406,4,1776,4,"_clone"],[2406,10,1776,10,"_clone"],[2406,11,1776,11,"auth"],[2406,15,1776,15],[2406,17,1776,17],[2407,6,1777,8],[2407,12,1777,14,"newUser"],[2407,19,1777,21],[2407,22,1777,24],[2407,26,1777,28,"UserImpl"],[2407,34,1777,36],[2407,35,1777,37],[2408,8,1778,12],[2408,11,1778,15],[2408,15,1778,19],[2409,8,1779,12,"auth"],[2409,12,1779,16],[2410,8,1780,12,"stsTokenManager"],[2410,23,1780,27],[2410,25,1780,29],[2410,29,1780,33],[2410,30,1780,34,"stsTokenManager"],[2410,45,1780,49],[2410,46,1780,50,"_clone"],[2410,52,1780,56],[2410,53,1780,57],[2411,6,1781,8],[2411,7,1781,9],[2411,8,1781,10],[2412,6,1782,8,"newUser"],[2412,13,1782,15],[2412,14,1782,16,"metadata"],[2412,22,1782,24],[2412,23,1782,25,"_copy"],[2412,28,1782,30],[2412,29,1782,31],[2412,33,1782,35],[2412,34,1782,36,"metadata"],[2412,42,1782,44],[2412,43,1782,45],[2413,6,1783,8],[2413,13,1783,15,"newUser"],[2413,20,1783,22],[2414,4,1784,4],[2415,4,1785,4,"_onReload"],[2415,13,1785,13,"_onReload"],[2415,14,1785,14,"callback"],[2415,22,1785,22],[2415,24,1785,24],[2416,6,1786,8],[2417,6,1787,8,"_assert"],[2417,13,1787,15],[2417,14,1787,16],[2417,15,1787,17],[2417,19,1787,21],[2417,20,1787,22,"reloadListener"],[2417,34,1787,36],[2417,36,1787,38],[2417,40,1787,42],[2417,41,1787,43,"auth"],[2417,45,1787,47],[2417,47,1787,49],[2417,63,1787,65],[2417,64,1787,66],[2417,98,1787,100],[2417,99,1787,101],[2418,6,1788,8],[2418,10,1788,12],[2418,11,1788,13,"reloadListener"],[2418,25,1788,27],[2418,28,1788,30,"callback"],[2418,36,1788,38],[2419,6,1789,8],[2419,10,1789,12],[2419,14,1789,16],[2419,15,1789,17,"reloadUserInfo"],[2419,29,1789,31],[2419,31,1789,33],[2420,8,1790,12],[2420,12,1790,16],[2420,13,1790,17,"_notifyReloadListener"],[2420,34,1790,38],[2420,35,1790,39],[2420,39,1790,43],[2420,40,1790,44,"reloadUserInfo"],[2420,54,1790,58],[2420,55,1790,59],[2421,8,1791,12],[2421,12,1791,16],[2421,13,1791,17,"reloadUserInfo"],[2421,27,1791,31],[2421,30,1791,34],[2421,34,1791,38],[2422,6,1792,8],[2423,4,1793,4],[2424,4,1794,4,"_notifyReloadListener"],[2424,25,1794,25,"_notifyReloadListener"],[2424,26,1794,26,"userInfo"],[2424,34,1794,34],[2424,36,1794,36],[2425,6,1795,8],[2425,10,1795,12],[2425,14,1795,16],[2425,15,1795,17,"reloadListener"],[2425,29,1795,31],[2425,31,1795,33],[2426,8,1796,12],[2426,12,1796,16],[2426,13,1796,17,"reloadListener"],[2426,27,1796,31],[2426,28,1796,32,"userInfo"],[2426,36,1796,40],[2426,37,1796,41],[2427,6,1797,8],[2427,7,1797,9],[2427,13,1798,13],[2428,8,1799,12],[2429,8,1800,12],[2429,12,1800,16],[2429,13,1800,17,"reloadUserInfo"],[2429,27,1800,31],[2429,30,1800,34,"userInfo"],[2429,38,1800,42],[2430,6,1801,8],[2431,4,1802,4],[2432,4,1803,4,"_startProactiveRefresh"],[2432,26,1803,26,"_startProactiveRefresh"],[2432,27,1803,26],[2432,29,1803,29],[2433,6,1804,8],[2433,10,1804,12],[2433,11,1804,13,"proactiveRefresh"],[2433,27,1804,29],[2433,28,1804,30,"_start"],[2433,34,1804,36],[2433,35,1804,37],[2433,36,1804,38],[2434,4,1805,4],[2435,4,1806,4,"_stopProactiveRefresh"],[2435,25,1806,25,"_stopProactiveRefresh"],[2435,26,1806,25],[2435,28,1806,28],[2436,6,1807,8],[2436,10,1807,12],[2436,11,1807,13,"proactiveRefresh"],[2436,27,1807,29],[2436,28,1807,30,"_stop"],[2436,33,1807,35],[2436,34,1807,36],[2436,35,1807,37],[2437,4,1808,4],[2438,4,1809,4],[2438,10,1809,10,"_updateTokensIfNecessary"],[2438,34,1809,34,"_updateTokensIfNecessary"],[2438,35,1809,35,"response"],[2438,43,1809,43],[2438,45,1809,45,"reload"],[2438,51,1809,51],[2438,54,1809,54],[2438,59,1809,59],[2438,61,1809,61],[2439,6,1810,8],[2439,10,1810,12,"tokensRefreshed"],[2439,25,1810,27],[2439,28,1810,30],[2439,33,1810,35],[2440,6,1811,8],[2440,10,1811,12,"response"],[2440,18,1811,20],[2440,19,1811,21,"idToken"],[2440,26,1811,28],[2440,30,1812,12,"response"],[2440,38,1812,20],[2440,39,1812,21,"idToken"],[2440,46,1812,28],[2440,51,1812,33],[2440,55,1812,37],[2440,56,1812,38,"stsTokenManager"],[2440,71,1812,53],[2440,72,1812,54,"accessToken"],[2440,83,1812,65],[2440,85,1812,67],[2441,8,1813,12],[2441,12,1813,16],[2441,13,1813,17,"stsTokenManager"],[2441,28,1813,32],[2441,29,1813,33,"updateFromServerResponse"],[2441,53,1813,57],[2441,54,1813,58,"response"],[2441,62,1813,66],[2441,63,1813,67],[2442,8,1814,12,"tokensRefreshed"],[2442,23,1814,27],[2442,26,1814,30],[2442,30,1814,34],[2443,6,1815,8],[2444,6,1816,8],[2444,10,1816,12,"reload"],[2444,16,1816,18],[2444,18,1816,20],[2445,8,1817,12],[2445,14,1817,18,"_reloadWithoutSaving"],[2445,34,1817,38],[2445,35,1817,39],[2445,39,1817,43],[2445,40,1817,44],[2446,6,1818,8],[2447,6,1819,8],[2447,12,1819,14],[2447,16,1819,18],[2447,17,1819,19,"auth"],[2447,21,1819,23],[2447,22,1819,24,"_persistUserIfCurrent"],[2447,43,1819,45],[2447,44,1819,46],[2447,48,1819,50],[2447,49,1819,51],[2448,6,1820,8],[2448,10,1820,12,"tokensRefreshed"],[2448,25,1820,27],[2448,27,1820,29],[2449,8,1821,12],[2449,12,1821,16],[2449,13,1821,17,"auth"],[2449,17,1821,21],[2449,18,1821,22,"_notifyListenersIfCurrent"],[2449,43,1821,47],[2449,44,1821,48],[2449,48,1821,52],[2449,49,1821,53],[2450,6,1822,8],[2451,4,1823,4],[2452,4,1824,4],[2452,10,1824,10,"delete"],[2452,16,1824,16,"delete"],[2452,17,1824,16],[2452,19,1824,19],[2453,6,1825,8],[2453,10,1825,12],[2453,14,1825,12,"_isFirebaseServerApp"],[2453,26,1825,32],[2453,27,1825,32,"_isFirebaseServerApp"],[2453,47,1825,32],[2453,49,1825,33],[2453,53,1825,37],[2453,54,1825,38,"auth"],[2453,58,1825,42],[2453,59,1825,43,"app"],[2453,62,1825,46],[2453,63,1825,47],[2453,65,1825,49],[2454,8,1826,12],[2454,15,1826,19,"Promise"],[2454,22,1826,26],[2454,23,1826,27,"reject"],[2454,29,1826,33],[2454,30,1826,34,"_serverAppCurrentUserOperationNotSupportedError"],[2454,77,1826,81],[2454,78,1826,82],[2454,82,1826,86],[2454,83,1826,87,"auth"],[2454,87,1826,91],[2454,88,1826,92],[2454,89,1826,93],[2455,6,1827,8],[2456,6,1828,8],[2456,12,1828,14,"idToken"],[2456,19,1828,21],[2456,22,1828,24],[2456,28,1828,30],[2456,32,1828,34],[2456,33,1828,35,"getIdToken"],[2456,43,1828,45],[2456,44,1828,46],[2456,45,1828,47],[2457,6,1829,8],[2457,12,1829,14,"_logoutIfInvalidated"],[2457,32,1829,34],[2457,33,1829,35],[2457,37,1829,39],[2457,39,1829,41,"deleteAccount"],[2457,52,1829,54],[2457,53,1829,55],[2457,57,1829,59],[2457,58,1829,60,"auth"],[2457,62,1829,64],[2457,64,1829,66],[2458,8,1829,68,"idToken"],[2459,6,1829,76],[2459,7,1829,77],[2459,8,1829,78],[2459,9,1829,79],[2460,6,1830,8],[2460,10,1830,12],[2460,11,1830,13,"stsTokenManager"],[2460,26,1830,28],[2460,27,1830,29,"clearRefreshToken"],[2460,44,1830,46],[2460,45,1830,47],[2460,46,1830,48],[2461,6,1831,8],[2462,6,1832,8],[2463,6,1833,8],[2463,13,1833,15],[2463,17,1833,19],[2463,18,1833,20,"auth"],[2463,22,1833,24],[2463,23,1833,25,"signOut"],[2463,30,1833,32],[2463,31,1833,33],[2463,32,1833,34],[2464,4,1834,4],[2465,4,1835,4,"toJSON"],[2465,10,1835,10,"toJSON"],[2465,11,1835,10],[2465,13,1835,13],[2466,6,1836,8],[2466,13,1836,15],[2467,8,1837,12,"uid"],[2467,11,1837,15],[2467,13,1837,17],[2467,17,1837,21],[2467,18,1837,22,"uid"],[2467,21,1837,25],[2468,8,1838,12,"email"],[2468,13,1838,17],[2468,15,1838,19],[2468,19,1838,23],[2468,20,1838,24,"email"],[2468,25,1838,29],[2468,29,1838,33,"undefined"],[2468,38,1838,42],[2469,8,1839,12,"emailVerified"],[2469,21,1839,25],[2469,23,1839,27],[2469,27,1839,31],[2469,28,1839,32,"emailVerified"],[2469,41,1839,45],[2470,8,1840,12,"displayName"],[2470,19,1840,23],[2470,21,1840,25],[2470,25,1840,29],[2470,26,1840,30,"displayName"],[2470,37,1840,41],[2470,41,1840,45,"undefined"],[2470,50,1840,54],[2471,8,1841,12,"isAnonymous"],[2471,19,1841,23],[2471,21,1841,25],[2471,25,1841,29],[2471,26,1841,30,"isAnonymous"],[2471,37,1841,41],[2472,8,1842,12,"photoURL"],[2472,16,1842,20],[2472,18,1842,22],[2472,22,1842,26],[2472,23,1842,27,"photoURL"],[2472,31,1842,35],[2472,35,1842,39,"undefined"],[2472,44,1842,48],[2473,8,1843,12,"phoneNumber"],[2473,19,1843,23],[2473,21,1843,25],[2473,25,1843,29],[2473,26,1843,30,"phoneNumber"],[2473,37,1843,41],[2473,41,1843,45,"undefined"],[2473,50,1843,54],[2474,8,1844,12,"tenantId"],[2474,16,1844,20],[2474,18,1844,22],[2474,22,1844,26],[2474,23,1844,27,"tenantId"],[2474,31,1844,35],[2474,35,1844,39,"undefined"],[2474,44,1844,48],[2475,8,1845,12,"providerData"],[2475,20,1845,24],[2475,22,1845,26],[2475,26,1845,30],[2475,27,1845,31,"providerData"],[2475,39,1845,43],[2475,40,1845,44,"map"],[2475,43,1845,47],[2475,44,1845,48,"userInfo"],[2475,52,1845,56],[2475,57,1845,61],[2476,10,1845,63],[2476,13,1845,66,"userInfo"],[2477,8,1845,75],[2477,9,1845,76],[2477,10,1845,77],[2477,11,1845,78],[2478,8,1846,12,"stsTokenManager"],[2478,23,1846,27],[2478,25,1846,29],[2478,29,1846,33],[2478,30,1846,34,"stsTokenManager"],[2478,45,1846,49],[2478,46,1846,50,"toJSON"],[2478,52,1846,56],[2478,53,1846,57],[2478,54,1846,58],[2479,8,1847,12],[2480,8,1848,12],[2481,8,1849,12,"_redirectEventId"],[2481,24,1849,28],[2481,26,1849,30],[2481,30,1849,34],[2481,31,1849,35,"_redirectEventId"],[2481,47,1849,51],[2482,8,1850,12],[2482,11,1850,15],[2482,15,1850,19],[2482,16,1850,20,"metadata"],[2482,24,1850,28],[2482,25,1850,29,"toJSON"],[2482,31,1850,35],[2482,32,1850,36],[2482,33,1850,37],[2483,8,1851,12],[2484,8,1852,12,"apiKey"],[2484,14,1852,18],[2484,16,1852,20],[2484,20,1852,24],[2484,21,1852,25,"auth"],[2484,25,1852,29],[2484,26,1852,30,"config"],[2484,32,1852,36],[2484,33,1852,37,"apiKey"],[2484,39,1852,43],[2485,8,1853,12,"appName"],[2485,15,1853,19],[2485,17,1853,21],[2485,21,1853,25],[2485,22,1853,26,"auth"],[2485,26,1853,30],[2485,27,1853,31,"name"],[2486,8,1854,12],[2487,8,1855,12],[2488,6,1856,8],[2488,7,1856,9],[2489,4,1857,4],[2490,4,1858,4],[2490,8,1858,8,"refreshToken"],[2490,20,1858,20,"refreshToken"],[2490,21,1858,20],[2490,23,1858,23],[2491,6,1859,8],[2491,13,1859,15],[2491,17,1859,19],[2491,18,1859,20,"stsTokenManager"],[2491,33,1859,35],[2491,34,1859,36,"refreshToken"],[2491,46,1859,48],[2491,50,1859,52],[2491,52,1859,54],[2492,4,1860,4],[2493,4,1861,4],[2493,11,1861,11,"_fromJSON"],[2493,20,1861,20,"_fromJSON"],[2493,21,1861,21,"auth"],[2493,25,1861,25],[2493,27,1861,27,"object"],[2493,33,1861,33],[2493,35,1861,35],[2494,6,1862,8],[2494,12,1862,14,"displayName"],[2494,23,1862,25],[2494,26,1862,28,"object"],[2494,32,1862,34],[2494,33,1862,35,"displayName"],[2494,44,1862,46],[2494,48,1862,50,"undefined"],[2494,57,1862,59],[2495,6,1863,8],[2495,12,1863,14,"email"],[2495,17,1863,19],[2495,20,1863,22,"object"],[2495,26,1863,28],[2495,27,1863,29,"email"],[2495,32,1863,34],[2495,36,1863,38,"undefined"],[2495,45,1863,47],[2496,6,1864,8],[2496,12,1864,14,"phoneNumber"],[2496,23,1864,25],[2496,26,1864,28,"object"],[2496,32,1864,34],[2496,33,1864,35,"phoneNumber"],[2496,44,1864,46],[2496,48,1864,50,"undefined"],[2496,57,1864,59],[2497,6,1865,8],[2497,12,1865,14,"photoURL"],[2497,20,1865,22],[2497,23,1865,25,"object"],[2497,29,1865,31],[2497,30,1865,32,"photoURL"],[2497,38,1865,40],[2497,42,1865,44,"undefined"],[2497,51,1865,53],[2498,6,1866,8],[2498,12,1866,14,"tenantId"],[2498,20,1866,22],[2498,23,1866,25,"object"],[2498,29,1866,31],[2498,30,1866,32,"tenantId"],[2498,38,1866,40],[2498,42,1866,44,"undefined"],[2498,51,1866,53],[2499,6,1867,8],[2499,12,1867,14,"_redirectEventId"],[2499,28,1867,30],[2499,31,1867,33,"object"],[2499,37,1867,39],[2499,38,1867,40,"_redirectEventId"],[2499,54,1867,56],[2499,58,1867,60,"undefined"],[2499,67,1867,69],[2500,6,1868,8],[2500,12,1868,14,"createdAt"],[2500,21,1868,23],[2500,24,1868,26,"object"],[2500,30,1868,32],[2500,31,1868,33,"createdAt"],[2500,40,1868,42],[2500,44,1868,46,"undefined"],[2500,53,1868,55],[2501,6,1869,8],[2501,12,1869,14,"lastLoginAt"],[2501,23,1869,25],[2501,26,1869,28,"object"],[2501,32,1869,34],[2501,33,1869,35,"lastLoginAt"],[2501,44,1869,46],[2501,48,1869,50,"undefined"],[2501,57,1869,59],[2502,6,1870,8],[2502,12,1870,14],[2503,8,1870,16,"uid"],[2503,11,1870,19],[2504,8,1870,21,"emailVerified"],[2504,21,1870,34],[2505,8,1870,36,"isAnonymous"],[2505,19,1870,47],[2506,8,1870,49,"providerData"],[2506,20,1870,61],[2507,8,1870,63,"stsTokenManager"],[2507,23,1870,78],[2507,25,1870,80,"plainObjectTokenManager"],[2508,6,1870,104],[2508,7,1870,105],[2508,10,1870,108,"object"],[2508,16,1870,114],[2509,6,1871,8,"_assert"],[2509,13,1871,15],[2509,14,1871,16,"uid"],[2509,17,1871,19],[2509,21,1871,23,"plainObjectTokenManager"],[2509,44,1871,46],[2509,46,1871,48,"auth"],[2509,50,1871,52],[2509,52,1871,54],[2509,68,1871,70],[2509,69,1871,71],[2509,103,1871,105],[2509,104,1871,106],[2510,6,1872,8],[2510,12,1872,14,"stsTokenManager"],[2510,27,1872,29],[2510,30,1872,32,"StsTokenManager"],[2510,45,1872,47],[2510,46,1872,48,"fromJSON"],[2510,54,1872,56],[2510,55,1872,57],[2510,59,1872,61],[2510,60,1872,62,"name"],[2510,64,1872,66],[2510,66,1872,68,"plainObjectTokenManager"],[2510,89,1872,91],[2510,90,1872,92],[2511,6,1873,8,"_assert"],[2511,13,1873,15],[2511,14,1873,16],[2511,21,1873,23,"uid"],[2511,24,1873,26],[2511,29,1873,31],[2511,37,1873,39],[2511,39,1873,41,"auth"],[2511,43,1873,45],[2511,45,1873,47],[2511,61,1873,63],[2511,62,1873,64],[2511,96,1873,98],[2511,97,1873,99],[2512,6,1874,8,"assertStringOrUndefined"],[2512,29,1874,31],[2512,30,1874,32,"displayName"],[2512,41,1874,43],[2512,43,1874,45,"auth"],[2512,47,1874,49],[2512,48,1874,50,"name"],[2512,52,1874,54],[2512,53,1874,55],[2513,6,1875,8,"assertStringOrUndefined"],[2513,29,1875,31],[2513,30,1875,32,"email"],[2513,35,1875,37],[2513,37,1875,39,"auth"],[2513,41,1875,43],[2513,42,1875,44,"name"],[2513,46,1875,48],[2513,47,1875,49],[2514,6,1876,8,"_assert"],[2514,13,1876,15],[2514,14,1876,16],[2514,21,1876,23,"emailVerified"],[2514,34,1876,36],[2514,39,1876,41],[2514,48,1876,50],[2514,50,1876,52,"auth"],[2514,54,1876,56],[2514,56,1876,58],[2514,72,1876,74],[2514,73,1876,75],[2514,107,1876,109],[2514,108,1876,110],[2515,6,1877,8,"_assert"],[2515,13,1877,15],[2515,14,1877,16],[2515,21,1877,23,"isAnonymous"],[2515,32,1877,34],[2515,37,1877,39],[2515,46,1877,48],[2515,48,1877,50,"auth"],[2515,52,1877,54],[2515,54,1877,56],[2515,70,1877,72],[2515,71,1877,73],[2515,105,1877,107],[2515,106,1877,108],[2516,6,1878,8,"assertStringOrUndefined"],[2516,29,1878,31],[2516,30,1878,32,"phoneNumber"],[2516,41,1878,43],[2516,43,1878,45,"auth"],[2516,47,1878,49],[2516,48,1878,50,"name"],[2516,52,1878,54],[2516,53,1878,55],[2517,6,1879,8,"assertStringOrUndefined"],[2517,29,1879,31],[2517,30,1879,32,"photoURL"],[2517,38,1879,40],[2517,40,1879,42,"auth"],[2517,44,1879,46],[2517,45,1879,47,"name"],[2517,49,1879,51],[2517,50,1879,52],[2518,6,1880,8,"assertStringOrUndefined"],[2518,29,1880,31],[2518,30,1880,32,"tenantId"],[2518,38,1880,40],[2518,40,1880,42,"auth"],[2518,44,1880,46],[2518,45,1880,47,"name"],[2518,49,1880,51],[2518,50,1880,52],[2519,6,1881,8,"assertStringOrUndefined"],[2519,29,1881,31],[2519,30,1881,32,"_redirectEventId"],[2519,46,1881,48],[2519,48,1881,50,"auth"],[2519,52,1881,54],[2519,53,1881,55,"name"],[2519,57,1881,59],[2519,58,1881,60],[2520,6,1882,8,"assertStringOrUndefined"],[2520,29,1882,31],[2520,30,1882,32,"createdAt"],[2520,39,1882,41],[2520,41,1882,43,"auth"],[2520,45,1882,47],[2520,46,1882,48,"name"],[2520,50,1882,52],[2520,51,1882,53],[2521,6,1883,8,"assertStringOrUndefined"],[2521,29,1883,31],[2521,30,1883,32,"lastLoginAt"],[2521,41,1883,43],[2521,43,1883,45,"auth"],[2521,47,1883,49],[2521,48,1883,50,"name"],[2521,52,1883,54],[2521,53,1883,55],[2522,6,1884,8],[2522,12,1884,14,"user"],[2522,16,1884,18],[2522,19,1884,21],[2522,23,1884,25,"UserImpl"],[2522,31,1884,33],[2522,32,1884,34],[2523,8,1885,12,"uid"],[2523,11,1885,15],[2524,8,1886,12,"auth"],[2524,12,1886,16],[2525,8,1887,12,"email"],[2525,13,1887,17],[2526,8,1888,12,"emailVerified"],[2526,21,1888,25],[2527,8,1889,12,"displayName"],[2527,19,1889,23],[2528,8,1890,12,"isAnonymous"],[2528,19,1890,23],[2529,8,1891,12,"photoURL"],[2529,16,1891,20],[2530,8,1892,12,"phoneNumber"],[2530,19,1892,23],[2531,8,1893,12,"tenantId"],[2531,16,1893,20],[2532,8,1894,12,"stsTokenManager"],[2532,23,1894,27],[2533,8,1895,12,"createdAt"],[2533,17,1895,21],[2534,8,1896,12,"lastLoginAt"],[2535,6,1897,8],[2535,7,1897,9],[2535,8,1897,10],[2536,6,1898,8],[2536,10,1898,12,"providerData"],[2536,22,1898,24],[2536,26,1898,28,"Array"],[2536,31,1898,33],[2536,32,1898,34,"isArray"],[2536,39,1898,41],[2536,40,1898,42,"providerData"],[2536,52,1898,54],[2536,53,1898,55],[2536,55,1898,57],[2537,8,1899,12,"user"],[2537,12,1899,16],[2537,13,1899,17,"providerData"],[2537,25,1899,29],[2537,28,1899,32,"providerData"],[2537,40,1899,44],[2537,41,1899,45,"map"],[2537,44,1899,48],[2537,45,1899,49,"userInfo"],[2537,53,1899,57],[2537,58,1899,62],[2538,10,1899,64],[2538,13,1899,67,"userInfo"],[2539,8,1899,76],[2539,9,1899,77],[2539,10,1899,78],[2539,11,1899,79],[2540,6,1900,8],[2541,6,1901,8],[2541,10,1901,12,"_redirectEventId"],[2541,26,1901,28],[2541,28,1901,30],[2542,8,1902,12,"user"],[2542,12,1902,16],[2542,13,1902,17,"_redirectEventId"],[2542,29,1902,33],[2542,32,1902,36,"_redirectEventId"],[2542,48,1902,52],[2543,6,1903,8],[2544,6,1904,8],[2544,13,1904,15,"user"],[2544,17,1904,19],[2545,4,1905,4],[2546,4,1906,4],[2547,0,1907,0],[2548,0,1908,0],[2549,0,1909,0],[2550,0,1910,0],[2551,4,1911,4],[2551,17,1911,17,"_fromIdTokenResponse"],[2551,37,1911,37,"_fromIdTokenResponse"],[2551,38,1911,38,"auth"],[2551,42,1911,42],[2551,44,1911,44,"idTokenResponse"],[2551,59,1911,59],[2551,61,1911,61,"isAnonymous"],[2551,72,1911,72],[2551,75,1911,75],[2551,80,1911,80],[2551,82,1911,82],[2552,6,1912,8],[2552,12,1912,14,"stsTokenManager"],[2552,27,1912,29],[2552,30,1912,32],[2552,34,1912,36,"StsTokenManager"],[2552,49,1912,51],[2552,50,1912,52],[2552,51,1912,53],[2553,6,1913,8,"stsTokenManager"],[2553,21,1913,23],[2553,22,1913,24,"updateFromServerResponse"],[2553,46,1913,48],[2553,47,1913,49,"idTokenResponse"],[2553,62,1913,64],[2553,63,1913,65],[2554,6,1914,8],[2555,6,1915,8],[2555,12,1915,14,"user"],[2555,16,1915,18],[2555,19,1915,21],[2555,23,1915,25,"UserImpl"],[2555,31,1915,33],[2555,32,1915,34],[2556,8,1916,12,"uid"],[2556,11,1916,15],[2556,13,1916,17,"idTokenResponse"],[2556,28,1916,32],[2556,29,1916,33,"localId"],[2556,36,1916,40],[2557,8,1917,12,"auth"],[2557,12,1917,16],[2558,8,1918,12,"stsTokenManager"],[2558,23,1918,27],[2559,8,1919,12,"isAnonymous"],[2560,6,1920,8],[2560,7,1920,9],[2560,8,1920,10],[2561,6,1921,8],[2562,6,1922,8],[2562,12,1922,14,"_reloadWithoutSaving"],[2562,32,1922,34],[2562,33,1922,35,"user"],[2562,37,1922,39],[2562,38,1922,40],[2563,6,1923,8],[2563,13,1923,15,"user"],[2563,17,1923,19],[2564,4,1924,4],[2565,4,1925,4],[2566,0,1926,0],[2567,0,1927,0],[2568,0,1928,0],[2569,0,1929,0],[2570,4,1930,4],[2570,17,1930,17,"_fromGetAccountInfoResponse"],[2570,44,1930,44,"_fromGetAccountInfoResponse"],[2570,45,1930,45,"auth"],[2570,49,1930,49],[2570,51,1930,51,"response"],[2570,59,1930,59],[2570,61,1930,61,"idToken"],[2570,68,1930,68],[2570,70,1930,70],[2571,6,1931,8],[2571,12,1931,14,"coreAccount"],[2571,23,1931,25],[2571,26,1931,28,"response"],[2571,34,1931,36],[2571,35,1931,37,"users"],[2571,40,1931,42],[2571,41,1931,43],[2571,42,1931,44],[2571,43,1931,45],[2572,6,1932,8,"_assert"],[2572,13,1932,15],[2572,14,1932,16,"coreAccount"],[2572,25,1932,27],[2572,26,1932,28,"localId"],[2572,33,1932,35],[2572,38,1932,40,"undefined"],[2572,47,1932,49],[2572,49,1932,51],[2572,65,1932,67],[2572,66,1932,68],[2572,100,1932,102],[2572,101,1932,103],[2573,6,1933,8],[2573,12,1933,14,"providerData"],[2573,24,1933,26],[2573,27,1933,29,"coreAccount"],[2573,38,1933,40],[2573,39,1933,41,"providerUserInfo"],[2573,55,1933,57],[2573,60,1933,62,"undefined"],[2573,69,1933,71],[2573,72,1934,14,"extractProviderData"],[2573,91,1934,33],[2573,92,1934,34,"coreAccount"],[2573,103,1934,45],[2573,104,1934,46,"providerUserInfo"],[2573,120,1934,62],[2573,121,1934,63],[2573,124,1935,14],[2573,126,1935,16],[2574,6,1936,8],[2574,12,1936,14,"isAnonymous"],[2574,23,1936,25],[2574,26,1936,28],[2574,28,1936,30,"coreAccount"],[2574,39,1936,41],[2574,40,1936,42,"email"],[2574,45,1936,47],[2574,49,1936,51,"coreAccount"],[2574,60,1936,62],[2574,61,1936,63,"passwordHash"],[2574,73,1936,75],[2574,74,1936,76],[2574,78,1936,80],[2574,79,1936,81,"providerData"],[2574,91,1936,93],[2574,93,1936,95,"length"],[2574,99,1936,101],[2575,6,1937,8],[2575,12,1937,14,"stsTokenManager"],[2575,27,1937,29],[2575,30,1937,32],[2575,34,1937,36,"StsTokenManager"],[2575,49,1937,51],[2575,50,1937,52],[2575,51,1937,53],[2576,6,1938,8,"stsTokenManager"],[2576,21,1938,23],[2576,22,1938,24,"updateFromIdToken"],[2576,39,1938,41],[2576,40,1938,42,"idToken"],[2576,47,1938,49],[2576,48,1938,50],[2577,6,1939,8],[2578,6,1940,8],[2578,12,1940,14,"user"],[2578,16,1940,18],[2578,19,1940,21],[2578,23,1940,25,"UserImpl"],[2578,31,1940,33],[2578,32,1940,34],[2579,8,1941,12,"uid"],[2579,11,1941,15],[2579,13,1941,17,"coreAccount"],[2579,24,1941,28],[2579,25,1941,29,"localId"],[2579,32,1941,36],[2580,8,1942,12,"auth"],[2580,12,1942,16],[2581,8,1943,12,"stsTokenManager"],[2581,23,1943,27],[2582,8,1944,12,"isAnonymous"],[2583,6,1945,8],[2583,7,1945,9],[2583,8,1945,10],[2584,6,1946,8],[2585,6,1947,8],[2585,12,1947,14,"updates"],[2585,19,1947,21],[2585,22,1947,24],[2586,8,1948,12,"uid"],[2586,11,1948,15],[2586,13,1948,17,"coreAccount"],[2586,24,1948,28],[2586,25,1948,29,"localId"],[2586,32,1948,36],[2587,8,1949,12,"displayName"],[2587,19,1949,23],[2587,21,1949,25,"coreAccount"],[2587,32,1949,36],[2587,33,1949,37,"displayName"],[2587,44,1949,48],[2587,48,1949,52],[2587,52,1949,56],[2588,8,1950,12,"photoURL"],[2588,16,1950,20],[2588,18,1950,22,"coreAccount"],[2588,29,1950,33],[2588,30,1950,34,"photoUrl"],[2588,38,1950,42],[2588,42,1950,46],[2588,46,1950,50],[2589,8,1951,12,"email"],[2589,13,1951,17],[2589,15,1951,19,"coreAccount"],[2589,26,1951,30],[2589,27,1951,31,"email"],[2589,32,1951,36],[2589,36,1951,40],[2589,40,1951,44],[2590,8,1952,12,"emailVerified"],[2590,21,1952,25],[2590,23,1952,27,"coreAccount"],[2590,34,1952,38],[2590,35,1952,39,"emailVerified"],[2590,48,1952,52],[2590,52,1952,56],[2590,57,1952,61],[2591,8,1953,12,"phoneNumber"],[2591,19,1953,23],[2591,21,1953,25,"coreAccount"],[2591,32,1953,36],[2591,33,1953,37,"phoneNumber"],[2591,44,1953,48],[2591,48,1953,52],[2591,52,1953,56],[2592,8,1954,12,"tenantId"],[2592,16,1954,20],[2592,18,1954,22,"coreAccount"],[2592,29,1954,33],[2592,30,1954,34,"tenantId"],[2592,38,1954,42],[2592,42,1954,46],[2592,46,1954,50],[2593,8,1955,12,"providerData"],[2593,20,1955,24],[2594,8,1956,12,"metadata"],[2594,16,1956,20],[2594,18,1956,22],[2594,22,1956,26,"UserMetadata"],[2594,34,1956,38],[2594,35,1956,39,"coreAccount"],[2594,46,1956,50],[2594,47,1956,51,"createdAt"],[2594,56,1956,60],[2594,58,1956,62,"coreAccount"],[2594,69,1956,73],[2594,70,1956,74,"lastLoginAt"],[2594,81,1956,85],[2594,82,1956,86],[2595,8,1957,12,"isAnonymous"],[2595,19,1957,23],[2595,21,1957,25],[2595,23,1957,27,"coreAccount"],[2595,34,1957,38],[2595,35,1957,39,"email"],[2595,40,1957,44],[2595,44,1957,48,"coreAccount"],[2595,55,1957,59],[2595,56,1957,60,"passwordHash"],[2595,68,1957,72],[2595,69,1957,73],[2595,73,1958,16],[2595,74,1958,17,"providerData"],[2595,86,1958,29],[2595,88,1958,31,"length"],[2596,6,1959,8],[2596,7,1959,9],[2597,6,1960,8,"Object"],[2597,12,1960,14],[2597,13,1960,15,"assign"],[2597,19,1960,21],[2597,20,1960,22,"user"],[2597,24,1960,26],[2597,26,1960,28,"updates"],[2597,33,1960,35],[2597,34,1960,36],[2598,6,1961,8],[2598,13,1961,15,"user"],[2598,17,1961,19],[2599,4,1962,4],[2600,2,1963,0],[2602,2,1965,0],[2603,0,1966,0],[2604,0,1967,0],[2605,0,1968,0],[2606,0,1969,0],[2607,0,1970,0],[2608,0,1971,0],[2609,0,1972,0],[2610,0,1973,0],[2611,0,1974,0],[2612,0,1975,0],[2613,0,1976,0],[2614,0,1977,0],[2615,0,1978,0],[2616,0,1979,0],[2617,0,1980,0],[2618,2,1981,0],[2618,8,1981,6,"instanceCache"],[2618,21,1981,19],[2618,24,1981,22],[2618,28,1981,26,"Map"],[2618,31,1981,29],[2618,32,1981,30],[2618,33,1981,31],[2619,2,1982,0],[2619,11,1982,9,"_getInstance"],[2619,23,1982,21,"_getInstance"],[2619,24,1982,22,"cls"],[2619,27,1982,25],[2619,29,1982,27],[2620,4,1983,4,"debugAssert"],[2620,15,1983,15],[2620,16,1983,16,"cls"],[2620,19,1983,19],[2620,31,1983,31,"Function"],[2620,39,1983,39],[2620,41,1983,41],[2620,70,1983,70],[2620,71,1983,71],[2621,4,1984,4],[2621,8,1984,8,"instance"],[2621,16,1984,16],[2621,19,1984,19,"instanceCache"],[2621,32,1984,32],[2621,33,1984,33,"get"],[2621,36,1984,36],[2621,37,1984,37,"cls"],[2621,40,1984,40],[2621,41,1984,41],[2622,4,1985,4],[2622,8,1985,8,"instance"],[2622,16,1985,16],[2622,18,1985,18],[2623,6,1986,8,"debugAssert"],[2623,17,1986,19],[2623,18,1986,20,"instance"],[2623,26,1986,28],[2623,38,1986,40,"cls"],[2623,41,1986,43],[2623,43,1986,45],[2623,91,1986,93],[2623,92,1986,94],[2624,6,1987,8],[2624,13,1987,15,"instance"],[2624,21,1987,23],[2625,4,1988,4],[2626,4,1989,4,"instance"],[2626,12,1989,12],[2626,15,1989,15],[2626,19,1989,19,"cls"],[2626,22,1989,22],[2626,23,1989,23],[2626,24,1989,24],[2627,4,1990,4,"instanceCache"],[2627,17,1990,17],[2627,18,1990,18,"set"],[2627,21,1990,21],[2627,22,1990,22,"cls"],[2627,25,1990,25],[2627,27,1990,27,"instance"],[2627,35,1990,35],[2627,36,1990,36],[2628,4,1991,4],[2628,11,1991,11,"instance"],[2628,19,1991,19],[2629,2,1992,0],[2631,2,1994,0],[2632,0,1995,0],[2633,0,1996,0],[2634,0,1997,0],[2635,0,1998,0],[2636,0,1999,0],[2637,0,2000,0],[2638,0,2001,0],[2639,0,2002,0],[2640,0,2003,0],[2641,0,2004,0],[2642,0,2005,0],[2643,0,2006,0],[2644,0,2007,0],[2645,0,2008,0],[2646,0,2009,0],[2647,2,2010,0],[2647,8,2010,6,"InMemoryPersistence"],[2647,27,2010,25],[2647,28,2010,26],[2648,4,2011,4,"constructor"],[2648,15,2011,15,"constructor"],[2648,16,2011,15],[2648,18,2011,18],[2649,6,2012,8],[2649,10,2012,12],[2649,11,2012,13,"type"],[2649,15,2012,17],[2649,18,2012,20],[2649,24,2012,26],[2649,25,2012,27],[2650,6,2013,8],[2650,10,2013,12],[2650,11,2013,13,"storage"],[2650,18,2013,20],[2650,21,2013,23],[2650,22,2013,24],[2650,23,2013,25],[2651,4,2014,4],[2652,4,2015,4],[2652,10,2015,10,"_isAvailable"],[2652,22,2015,22,"_isAvailable"],[2652,23,2015,22],[2652,25,2015,25],[2653,6,2016,8],[2653,13,2016,15],[2653,17,2016,19],[2654,4,2017,4],[2655,4,2018,4],[2655,10,2018,10,"_set"],[2655,14,2018,14,"_set"],[2655,15,2018,15,"key"],[2655,18,2018,18],[2655,20,2018,20,"value"],[2655,25,2018,25],[2655,27,2018,27],[2656,6,2019,8],[2656,10,2019,12],[2656,11,2019,13,"storage"],[2656,18,2019,20],[2656,19,2019,21,"key"],[2656,22,2019,24],[2656,23,2019,25],[2656,26,2019,28,"value"],[2656,31,2019,33],[2657,4,2020,4],[2658,4,2021,4],[2658,10,2021,10,"_get"],[2658,14,2021,14,"_get"],[2658,15,2021,15,"key"],[2658,18,2021,18],[2658,20,2021,20],[2659,6,2022,8],[2659,12,2022,14,"value"],[2659,17,2022,19],[2659,20,2022,22],[2659,24,2022,26],[2659,25,2022,27,"storage"],[2659,32,2022,34],[2659,33,2022,35,"key"],[2659,36,2022,38],[2659,37,2022,39],[2660,6,2023,8],[2660,13,2023,15,"value"],[2660,18,2023,20],[2660,23,2023,25,"undefined"],[2660,32,2023,34],[2660,35,2023,37],[2660,39,2023,41],[2660,42,2023,44,"value"],[2660,47,2023,49],[2661,4,2024,4],[2662,4,2025,4],[2662,10,2025,10,"_remove"],[2662,17,2025,17,"_remove"],[2662,18,2025,18,"key"],[2662,21,2025,21],[2662,23,2025,23],[2663,6,2026,8],[2663,13,2026,15],[2663,17,2026,19],[2663,18,2026,20,"storage"],[2663,25,2026,27],[2663,26,2026,28,"key"],[2663,29,2026,31],[2663,30,2026,32],[2664,4,2027,4],[2665,4,2028,4,"_addListener"],[2665,16,2028,16,"_addListener"],[2665,17,2028,17,"_key"],[2665,21,2028,21],[2665,23,2028,23,"_listener"],[2665,32,2028,32],[2665,34,2028,34],[2666,6,2029,8],[2667,6,2030,8],[2668,4,2031,4],[2669,4,2032,4,"_removeListener"],[2669,19,2032,19,"_removeListener"],[2669,20,2032,20,"_key"],[2669,24,2032,24],[2669,26,2032,26,"_listener"],[2669,35,2032,35],[2669,37,2032,37],[2670,6,2033,8],[2671,6,2034,8],[2672,4,2035,4],[2673,2,2036,0],[2674,2,2037,0,"InMemoryPersistence"],[2674,21,2037,19],[2674,22,2037,20,"type"],[2674,26,2037,24],[2674,29,2037,27],[2674,35,2037,33],[2675,2,2038,0],[2676,0,2039,0],[2677,0,2040,0],[2678,0,2041,0],[2679,0,2042,0],[2680,2,2043,0],[2680,8,2043,6,"inMemoryPersistence"],[2680,27,2043,25],[2680,30,2043,28,"InMemoryPersistence"],[2680,49,2043,47],[2682,2,2045,0],[2683,0,2046,0],[2684,0,2047,0],[2685,0,2048,0],[2686,0,2049,0],[2687,0,2050,0],[2688,0,2051,0],[2689,0,2052,0],[2690,0,2053,0],[2691,0,2054,0],[2692,0,2055,0],[2693,0,2056,0],[2694,0,2057,0],[2695,0,2058,0],[2696,0,2059,0],[2697,0,2060,0],[2698,2,2061,0],[2698,11,2061,9,"_persistenceKeyName"],[2698,30,2061,28,"_persistenceKeyName"],[2698,31,2061,29,"key"],[2698,34,2061,32],[2698,36,2061,34,"apiKey"],[2698,42,2061,40],[2698,44,2061,42,"appName"],[2698,51,2061,49],[2698,53,2061,51],[2699,4,2062,4],[2699,11,2062,11],[2699,14,2062,14],[2699,24,2062,24],[2699,25,2062,25],[2699,56,2062,56,"key"],[2699,59,2062,59],[2699,63,2062,63,"apiKey"],[2699,69,2062,69],[2699,73,2062,73,"appName"],[2699,80,2062,80],[2699,82,2062,82],[2700,2,2063,0],[2701,2,2064,0],[2701,8,2064,6,"PersistenceUserManager"],[2701,30,2064,28],[2701,31,2064,29],[2702,4,2065,4,"constructor"],[2702,15,2065,15,"constructor"],[2702,16,2065,16,"persistence"],[2702,27,2065,27],[2702,29,2065,29,"auth"],[2702,33,2065,33],[2702,35,2065,35,"userKey"],[2702,42,2065,42],[2702,44,2065,44],[2703,6,2066,8],[2703,10,2066,12],[2703,11,2066,13,"persistence"],[2703,22,2066,24],[2703,25,2066,27,"persistence"],[2703,36,2066,38],[2704,6,2067,8],[2704,10,2067,12],[2704,11,2067,13,"auth"],[2704,15,2067,17],[2704,18,2067,20,"auth"],[2704,22,2067,24],[2705,6,2068,8],[2705,10,2068,12],[2705,11,2068,13,"userKey"],[2705,18,2068,20],[2705,21,2068,23,"userKey"],[2705,28,2068,30],[2706,6,2069,8],[2706,12,2069,14],[2707,8,2069,16,"config"],[2707,14,2069,22],[2708,8,2069,24,"name"],[2709,6,2069,29],[2709,7,2069,30],[2709,10,2069,33],[2709,14,2069,37],[2709,15,2069,38,"auth"],[2709,19,2069,42],[2710,6,2070,8],[2710,10,2070,12],[2710,11,2070,13,"fullUserKey"],[2710,22,2070,24],[2710,25,2070,27,"_persistenceKeyName"],[2710,44,2070,46],[2710,45,2070,47],[2710,49,2070,51],[2710,50,2070,52,"userKey"],[2710,57,2070,59],[2710,59,2070,61,"config"],[2710,65,2070,67],[2710,66,2070,68,"apiKey"],[2710,72,2070,74],[2710,74,2070,76,"name"],[2710,78,2070,80],[2710,79,2070,81],[2711,6,2071,8],[2711,10,2071,12],[2711,11,2071,13,"fullPersistenceKey"],[2711,29,2071,31],[2711,32,2071,34,"_persistenceKeyName"],[2711,51,2071,53],[2711,52,2071,54],[2711,65,2071,67],[2711,66,2071,68],[2711,98,2071,100,"config"],[2711,104,2071,106],[2711,105,2071,107,"apiKey"],[2711,111,2071,113],[2711,113,2071,115,"name"],[2711,117,2071,119],[2711,118,2071,120],[2712,6,2072,8],[2712,10,2072,12],[2712,11,2072,13,"boundEventHandler"],[2712,28,2072,30],[2712,31,2072,33,"auth"],[2712,35,2072,37],[2712,36,2072,38,"_onStorageEvent"],[2712,51,2072,53],[2712,52,2072,54,"bind"],[2712,56,2072,58],[2712,57,2072,59,"auth"],[2712,61,2072,63],[2712,62,2072,64],[2713,6,2073,8],[2713,10,2073,12],[2713,11,2073,13,"persistence"],[2713,22,2073,24],[2713,23,2073,25,"_addListener"],[2713,35,2073,37],[2713,36,2073,38],[2713,40,2073,42],[2713,41,2073,43,"fullUserKey"],[2713,52,2073,54],[2713,54,2073,56],[2713,58,2073,60],[2713,59,2073,61,"boundEventHandler"],[2713,76,2073,78],[2713,77,2073,79],[2714,4,2074,4],[2715,4,2075,4,"setCurrentUser"],[2715,18,2075,18,"setCurrentUser"],[2715,19,2075,19,"user"],[2715,23,2075,23],[2715,25,2075,25],[2716,6,2076,8],[2716,13,2076,15],[2716,17,2076,19],[2716,18,2076,20,"persistence"],[2716,29,2076,31],[2716,30,2076,32,"_set"],[2716,34,2076,36],[2716,35,2076,37],[2716,39,2076,41],[2716,40,2076,42,"fullUserKey"],[2716,51,2076,53],[2716,53,2076,55,"user"],[2716,57,2076,59],[2716,58,2076,60,"toJSON"],[2716,64,2076,66],[2716,65,2076,67],[2716,66,2076,68],[2716,67,2076,69],[2717,4,2077,4],[2718,4,2078,4],[2718,10,2078,10,"getCurrentUser"],[2718,24,2078,24,"getCurrentUser"],[2718,25,2078,24],[2718,27,2078,27],[2719,6,2079,8],[2719,12,2079,14,"blob"],[2719,16,2079,18],[2719,19,2079,21],[2719,25,2079,27],[2719,29,2079,31],[2719,30,2079,32,"persistence"],[2719,41,2079,43],[2719,42,2079,44,"_get"],[2719,46,2079,48],[2719,47,2079,49],[2719,51,2079,53],[2719,52,2079,54,"fullUserKey"],[2719,63,2079,65],[2719,64,2079,66],[2720,6,2080,8],[2720,10,2080,12],[2720,11,2080,13,"blob"],[2720,15,2080,17],[2720,17,2080,19],[2721,8,2081,12],[2721,15,2081,19],[2721,19,2081,23],[2722,6,2082,8],[2723,6,2083,8],[2723,10,2083,12],[2723,17,2083,19,"blob"],[2723,21,2083,23],[2723,26,2083,28],[2723,34,2083,36],[2723,36,2083,38],[2724,8,2084,12],[2724,14,2084,18,"response"],[2724,22,2084,26],[2724,25,2084,29],[2724,31,2084,35,"getAccountInfo"],[2724,45,2084,49],[2724,46,2084,50],[2724,50,2084,54],[2724,51,2084,55,"auth"],[2724,55,2084,59],[2724,57,2084,61],[2725,10,2084,63,"idToken"],[2725,17,2084,70],[2725,19,2084,72,"blob"],[2726,8,2084,77],[2726,9,2084,78],[2726,10,2084,79],[2726,11,2084,80,"catch"],[2726,16,2084,85],[2726,17,2084,86],[2726,23,2084,92,"undefined"],[2726,32,2084,101],[2726,33,2084,102],[2727,8,2085,12],[2727,12,2085,16],[2727,13,2085,17,"response"],[2727,21,2085,25],[2727,23,2085,27],[2728,10,2086,16],[2728,17,2086,23],[2728,21,2086,27],[2729,8,2087,12],[2730,8,2088,12],[2730,15,2088,19,"UserImpl"],[2730,23,2088,27],[2730,24,2088,28,"_fromGetAccountInfoResponse"],[2730,51,2088,55],[2730,52,2088,56],[2730,56,2088,60],[2730,57,2088,61,"auth"],[2730,61,2088,65],[2730,63,2088,67,"response"],[2730,71,2088,75],[2730,73,2088,77,"blob"],[2730,77,2088,81],[2730,78,2088,82],[2731,6,2089,8],[2732,6,2090,8],[2732,13,2090,15,"UserImpl"],[2732,21,2090,23],[2732,22,2090,24,"_fromJSON"],[2732,31,2090,33],[2732,32,2090,34],[2732,36,2090,38],[2732,37,2090,39,"auth"],[2732,41,2090,43],[2732,43,2090,45,"blob"],[2732,47,2090,49],[2732,48,2090,50],[2733,4,2091,4],[2734,4,2092,4,"removeCurrentUser"],[2734,21,2092,21,"removeCurrentUser"],[2734,22,2092,21],[2734,24,2092,24],[2735,6,2093,8],[2735,13,2093,15],[2735,17,2093,19],[2735,18,2093,20,"persistence"],[2735,29,2093,31],[2735,30,2093,32,"_remove"],[2735,37,2093,39],[2735,38,2093,40],[2735,42,2093,44],[2735,43,2093,45,"fullUserKey"],[2735,54,2093,56],[2735,55,2093,57],[2736,4,2094,4],[2737,4,2095,4,"savePersistenceForRedirect"],[2737,30,2095,30,"savePersistenceForRedirect"],[2737,31,2095,30],[2737,33,2095,33],[2738,6,2096,8],[2738,13,2096,15],[2738,17,2096,19],[2738,18,2096,20,"persistence"],[2738,29,2096,31],[2738,30,2096,32,"_set"],[2738,34,2096,36],[2738,35,2096,37],[2738,39,2096,41],[2738,40,2096,42,"fullPersistenceKey"],[2738,58,2096,60],[2738,60,2096,62],[2738,64,2096,66],[2738,65,2096,67,"persistence"],[2738,76,2096,78],[2738,77,2096,79,"type"],[2738,81,2096,83],[2738,82,2096,84],[2739,4,2097,4],[2740,4,2098,4],[2740,10,2098,10,"setPersistence"],[2740,24,2098,24,"setPersistence"],[2740,25,2098,25,"newPersistence"],[2740,39,2098,39],[2740,41,2098,41],[2741,6,2099,8],[2741,10,2099,12],[2741,14,2099,16],[2741,15,2099,17,"persistence"],[2741,26,2099,28],[2741,31,2099,33,"newPersistence"],[2741,45,2099,47],[2741,47,2099,49],[2742,8,2100,12],[2743,6,2101,8],[2744,6,2102,8],[2744,12,2102,14,"currentUser"],[2744,23,2102,25],[2744,26,2102,28],[2744,32,2102,34],[2744,36,2102,38],[2744,37,2102,39,"getCurrentUser"],[2744,51,2102,53],[2744,52,2102,54],[2744,53,2102,55],[2745,6,2103,8],[2745,12,2103,14],[2745,16,2103,18],[2745,17,2103,19,"removeCurrentUser"],[2745,34,2103,36],[2745,35,2103,37],[2745,36,2103,38],[2746,6,2104,8],[2746,10,2104,12],[2746,11,2104,13,"persistence"],[2746,22,2104,24],[2746,25,2104,27,"newPersistence"],[2746,39,2104,41],[2747,6,2105,8],[2747,10,2105,12,"currentUser"],[2747,21,2105,23],[2747,23,2105,25],[2748,8,2106,12],[2748,15,2106,19],[2748,19,2106,23],[2748,20,2106,24,"setCurrentUser"],[2748,34,2106,38],[2748,35,2106,39,"currentUser"],[2748,46,2106,50],[2748,47,2106,51],[2749,6,2107,8],[2750,4,2108,4],[2751,4,2109,4,"delete"],[2751,10,2109,10,"delete"],[2751,11,2109,10],[2751,13,2109,13],[2752,6,2110,8],[2752,10,2110,12],[2752,11,2110,13,"persistence"],[2752,22,2110,24],[2752,23,2110,25,"_removeListener"],[2752,38,2110,40],[2752,39,2110,41],[2752,43,2110,45],[2752,44,2110,46,"fullUserKey"],[2752,55,2110,57],[2752,57,2110,59],[2752,61,2110,63],[2752,62,2110,64,"boundEventHandler"],[2752,79,2110,81],[2752,80,2110,82],[2753,4,2111,4],[2754,4,2112,4],[2754,17,2112,17,"create"],[2754,23,2112,23,"create"],[2754,24,2112,24,"auth"],[2754,28,2112,28],[2754,30,2112,30,"persistenceHierarchy"],[2754,50,2112,50],[2754,52,2112,52,"userKey"],[2754,59,2112,59],[2754,62,2112,62],[2754,72,2112,72],[2754,73,2112,73],[2754,98,2112,98],[2755,6,2113,8],[2755,10,2113,12],[2755,11,2113,13,"persistenceHierarchy"],[2755,31,2113,33],[2755,32,2113,34,"length"],[2755,38,2113,40],[2755,40,2113,42],[2756,8,2114,12],[2756,15,2114,19],[2756,19,2114,23,"PersistenceUserManager"],[2756,41,2114,45],[2756,42,2114,46,"_getInstance"],[2756,54,2114,58],[2756,55,2114,59,"inMemoryPersistence"],[2756,74,2114,78],[2756,75,2114,79],[2756,77,2114,81,"auth"],[2756,81,2114,85],[2756,83,2114,87,"userKey"],[2756,90,2114,94],[2756,91,2114,95],[2757,6,2115,8],[2758,6,2116,8],[2759,6,2117,8],[2759,12,2117,14,"availablePersistences"],[2759,33,2117,35],[2759,36,2117,38],[2759,37,2117,39],[2759,43,2117,45,"Promise"],[2759,50,2117,52],[2759,51,2117,53,"all"],[2759,54,2117,56],[2759,55,2117,57,"persistenceHierarchy"],[2759,75,2117,77],[2759,76,2117,78,"map"],[2759,79,2117,81],[2759,80,2117,82],[2759,86,2117,89,"persistence"],[2759,97,2117,100],[2759,101,2117,105],[2760,8,2118,12],[2760,12,2118,16],[2760,18,2118,22,"persistence"],[2760,29,2118,33],[2760,30,2118,34,"_isAvailable"],[2760,42,2118,46],[2760,43,2118,47],[2760,44,2118,48],[2760,46,2118,50],[2761,10,2119,16],[2761,17,2119,23,"persistence"],[2761,28,2119,34],[2762,8,2120,12],[2763,8,2121,12],[2763,15,2121,19,"undefined"],[2763,24,2121,28],[2764,6,2122,8],[2764,7,2122,9],[2764,8,2122,10],[2764,9,2122,11],[2764,11,2122,13,"filter"],[2764,17,2122,19],[2764,18,2122,20,"persistence"],[2764,29,2122,31],[2764,33,2122,35,"persistence"],[2764,44,2122,46],[2764,45,2122,47],[2765,6,2123,8],[2766,6,2124,8],[2766,10,2124,12,"selectedPersistence"],[2766,29,2124,31],[2766,32,2124,34,"availablePersistences"],[2766,53,2124,55],[2766,54,2124,56],[2766,55,2124,57],[2766,56,2124,58],[2766,60,2125,12,"_getInstance"],[2766,72,2125,24],[2766,73,2125,25,"inMemoryPersistence"],[2766,92,2125,44],[2766,93,2125,45],[2767,6,2126,8],[2767,12,2126,14,"key"],[2767,15,2126,17],[2767,18,2126,20,"_persistenceKeyName"],[2767,37,2126,39],[2767,38,2126,40,"userKey"],[2767,45,2126,47],[2767,47,2126,49,"auth"],[2767,51,2126,53],[2767,52,2126,54,"config"],[2767,58,2126,60],[2767,59,2126,61,"apiKey"],[2767,65,2126,67],[2767,67,2126,69,"auth"],[2767,71,2126,73],[2767,72,2126,74,"name"],[2767,76,2126,78],[2767,77,2126,79],[2768,6,2127,8],[2769,6,2128,8],[2770,6,2129,8],[2770,10,2129,12,"userToMigrate"],[2770,23,2129,25],[2770,26,2129,28],[2770,30,2129,32],[2771,6,2130,8],[2772,6,2131,8],[2773,6,2132,8],[2774,6,2133,8],[2774,11,2133,13],[2774,17,2133,19,"persistence"],[2774,28,2133,30],[2774,32,2133,34,"persistenceHierarchy"],[2774,52,2133,54],[2774,54,2133,56],[2775,8,2134,12],[2775,12,2134,16],[2776,10,2135,16],[2776,16,2135,22,"blob"],[2776,20,2135,26],[2776,23,2135,29],[2776,29,2135,35,"persistence"],[2776,40,2135,46],[2776,41,2135,47,"_get"],[2776,45,2135,51],[2776,46,2135,52,"key"],[2776,49,2135,55],[2776,50,2135,56],[2777,10,2136,16],[2777,14,2136,20,"blob"],[2777,18,2136,24],[2777,20,2136,26],[2778,12,2137,20],[2778,16,2137,24,"user"],[2778,20,2137,28],[2779,12,2138,20],[2779,16,2138,24],[2779,23,2138,31,"blob"],[2779,27,2138,35],[2779,32,2138,40],[2779,40,2138,48],[2779,42,2138,50],[2780,14,2139,24],[2780,20,2139,30,"response"],[2780,28,2139,38],[2780,31,2139,41],[2780,37,2139,47,"getAccountInfo"],[2780,51,2139,61],[2780,52,2139,62,"auth"],[2780,56,2139,66],[2780,58,2139,68],[2781,16,2140,28,"idToken"],[2781,23,2140,35],[2781,25,2140,37,"blob"],[2782,14,2141,24],[2782,15,2141,25],[2782,16,2141,26],[2782,17,2141,27,"catch"],[2782,22,2141,32],[2782,23,2141,33],[2782,29,2141,39,"undefined"],[2782,38,2141,48],[2782,39,2141,49],[2783,14,2142,24],[2783,18,2142,28],[2783,19,2142,29,"response"],[2783,27,2142,37],[2783,29,2142,39],[2784,16,2143,28],[2785,14,2144,24],[2786,14,2145,24,"user"],[2786,18,2145,28],[2786,21,2145,31],[2786,27,2145,37,"UserImpl"],[2786,35,2145,45],[2786,36,2145,46,"_fromGetAccountInfoResponse"],[2786,63,2145,73],[2786,64,2145,74,"auth"],[2786,68,2145,78],[2786,70,2145,80,"response"],[2786,78,2145,88],[2786,80,2145,90,"blob"],[2786,84,2145,94],[2786,85,2145,95],[2787,12,2146,20],[2787,13,2146,21],[2787,19,2147,25],[2788,14,2148,24,"user"],[2788,18,2148,28],[2788,21,2148,31,"UserImpl"],[2788,29,2148,39],[2788,30,2148,40,"_fromJSON"],[2788,39,2148,49],[2788,40,2148,50,"auth"],[2788,44,2148,54],[2788,46,2148,56,"blob"],[2788,50,2148,60],[2788,51,2148,61],[2788,52,2148,62],[2788,53,2148,63],[2789,12,2149,20],[2790,12,2150,20],[2790,16,2150,24,"persistence"],[2790,27,2150,35],[2790,32,2150,40,"selectedPersistence"],[2790,51,2150,59],[2790,53,2150,61],[2791,14,2151,24,"userToMigrate"],[2791,27,2151,37],[2791,30,2151,40,"user"],[2791,34,2151,44],[2792,12,2152,20],[2793,12,2153,20,"selectedPersistence"],[2793,31,2153,39],[2793,34,2153,42,"persistence"],[2793,45,2153,53],[2794,12,2154,20],[2795,10,2155,16],[2796,8,2156,12],[2796,9,2156,13],[2796,10,2157,12],[2796,16,2157,18],[2796,17,2157,20],[2797,6,2158,8],[2798,6,2159,8],[2799,6,2160,8],[2800,6,2161,8],[2800,12,2161,14,"migrationHierarchy"],[2800,30,2161,32],[2800,33,2161,35,"availablePersistences"],[2800,54,2161,56],[2800,55,2161,57,"filter"],[2800,61,2161,63],[2800,62,2161,64,"p"],[2800,63,2161,65],[2800,67,2161,69,"p"],[2800,68,2161,70],[2800,69,2161,71,"_shouldAllowMigration"],[2800,90,2161,92],[2800,91,2161,93],[2801,6,2162,8],[2802,6,2163,8],[2802,10,2163,12],[2802,11,2163,13,"selectedPersistence"],[2802,30,2163,32],[2802,31,2163,33,"_shouldAllowMigration"],[2802,52,2163,54],[2802,56,2164,12],[2802,57,2164,13,"migrationHierarchy"],[2802,75,2164,31],[2802,76,2164,32,"length"],[2802,82,2164,38],[2802,84,2164,40],[2803,8,2165,12],[2803,15,2165,19],[2803,19,2165,23,"PersistenceUserManager"],[2803,41,2165,45],[2803,42,2165,46,"selectedPersistence"],[2803,61,2165,65],[2803,63,2165,67,"auth"],[2803,67,2165,71],[2803,69,2165,73,"userKey"],[2803,76,2165,80],[2803,77,2165,81],[2804,6,2166,8],[2805,6,2167,8,"selectedPersistence"],[2805,25,2167,27],[2805,28,2167,30,"migrationHierarchy"],[2805,46,2167,48],[2805,47,2167,49],[2805,48,2167,50],[2805,49,2167,51],[2806,6,2168,8],[2806,10,2168,12,"userToMigrate"],[2806,23,2168,25],[2806,25,2168,27],[2807,8,2169,12],[2808,8,2170,12],[2809,8,2171,12],[2809,14,2171,18,"selectedPersistence"],[2809,33,2171,37],[2809,34,2171,38,"_set"],[2809,38,2171,42],[2809,39,2171,43,"key"],[2809,42,2171,46],[2809,44,2171,48,"userToMigrate"],[2809,57,2171,61],[2809,58,2171,62,"toJSON"],[2809,64,2171,68],[2809,65,2171,69],[2809,66,2171,70],[2809,67,2171,71],[2810,6,2172,8],[2811,6,2173,8],[2812,6,2174,8],[2813,6,2175,8],[2813,12,2175,14,"Promise"],[2813,19,2175,21],[2813,20,2175,22,"all"],[2813,23,2175,25],[2813,24,2175,26,"persistenceHierarchy"],[2813,44,2175,46],[2813,45,2175,47,"map"],[2813,48,2175,50],[2813,49,2175,51],[2813,55,2175,58,"persistence"],[2813,66,2175,69],[2813,70,2175,74],[2814,8,2176,12],[2814,12,2176,16,"persistence"],[2814,23,2176,27],[2814,28,2176,32,"selectedPersistence"],[2814,47,2176,51],[2814,49,2176,53],[2815,10,2177,16],[2815,14,2177,20],[2816,12,2178,20],[2816,18,2178,26,"persistence"],[2816,29,2178,37],[2816,30,2178,38,"_remove"],[2816,37,2178,45],[2816,38,2178,46,"key"],[2816,41,2178,49],[2816,42,2178,50],[2817,10,2179,16],[2817,11,2179,17],[2817,12,2180,16],[2817,18,2180,22],[2817,19,2180,24],[2818,8,2181,12],[2819,6,2182,8],[2819,7,2182,9],[2819,8,2182,10],[2819,9,2182,11],[2820,6,2183,8],[2820,13,2183,15],[2820,17,2183,19,"PersistenceUserManager"],[2820,39,2183,41],[2820,40,2183,42,"selectedPersistence"],[2820,59,2183,61],[2820,61,2183,63,"auth"],[2820,65,2183,67],[2820,67,2183,69,"userKey"],[2820,74,2183,76],[2820,75,2183,77],[2821,4,2184,4],[2822,2,2185,0],[2824,2,2187,0],[2825,0,2188,0],[2826,0,2189,0],[2827,0,2190,0],[2828,0,2191,0],[2829,0,2192,0],[2830,0,2193,0],[2831,0,2194,0],[2832,0,2195,0],[2833,0,2196,0],[2834,0,2197,0],[2835,0,2198,0],[2836,0,2199,0],[2837,0,2200,0],[2838,0,2201,0],[2839,0,2202,0],[2840,2,2203,0],[2841,0,2204,0],[2842,0,2205,0],[2843,2,2206,0],[2843,11,2206,9,"_getBrowserName"],[2843,26,2206,24,"_getBrowserName"],[2843,27,2206,25,"userAgent"],[2843,36,2206,34],[2843,38,2206,36],[2844,4,2207,4],[2844,10,2207,10,"ua"],[2844,12,2207,12],[2844,15,2207,15,"userAgent"],[2844,24,2207,24],[2844,25,2207,25,"toLowerCase"],[2844,36,2207,36],[2844,37,2207,37],[2844,38,2207,38],[2845,4,2208,4],[2845,8,2208,8,"ua"],[2845,10,2208,10],[2845,11,2208,11,"includes"],[2845,19,2208,19],[2845,20,2208,20],[2845,28,2208,28],[2845,29,2208,29],[2845,33,2208,33,"ua"],[2845,35,2208,35],[2845,36,2208,36,"includes"],[2845,44,2208,44],[2845,45,2208,45],[2845,51,2208,51],[2845,52,2208,52],[2845,56,2208,56,"ua"],[2845,58,2208,58],[2845,59,2208,59,"includes"],[2845,67,2208,67],[2845,68,2208,68],[2845,76,2208,76],[2845,77,2208,77],[2845,79,2208,79],[2846,6,2209,8],[2846,13,2209,15],[2846,20,2209,22],[2846,21,2209,23],[2847,4,2210,4],[2847,5,2210,5],[2847,11,2211,9],[2847,15,2211,13,"_isIEMobile"],[2847,26,2211,24],[2847,27,2211,25,"ua"],[2847,29,2211,27],[2847,30,2211,28],[2847,32,2211,30],[2848,6,2212,8],[2849,6,2213,8],[2849,13,2213,15],[2849,23,2213,25],[2849,24,2213,26],[2850,4,2214,4],[2850,5,2214,5],[2850,11,2215,9],[2850,15,2215,13,"ua"],[2850,17,2215,15],[2850,18,2215,16,"includes"],[2850,26,2215,24],[2850,27,2215,25],[2850,33,2215,31],[2850,34,2215,32],[2850,38,2215,36,"ua"],[2850,40,2215,38],[2850,41,2215,39,"includes"],[2850,49,2215,47],[2850,50,2215,48],[2850,60,2215,58],[2850,61,2215,59],[2850,63,2215,61],[2851,6,2216,8],[2851,13,2216,15],[2851,17,2216,19],[2851,18,2216,20],[2852,4,2217,4],[2852,5,2217,5],[2852,11,2218,9],[2852,15,2218,13,"ua"],[2852,17,2218,15],[2852,18,2218,16,"includes"],[2852,26,2218,24],[2852,27,2218,25],[2852,34,2218,32],[2852,35,2218,33],[2852,37,2218,35],[2853,6,2219,8],[2853,13,2219,15],[2853,19,2219,21],[2853,20,2219,22],[2854,4,2220,4],[2854,5,2220,5],[2854,11,2221,9],[2854,15,2221,13,"_isFirefox"],[2854,25,2221,23],[2854,26,2221,24,"ua"],[2854,28,2221,26],[2854,29,2221,27],[2854,31,2221,29],[2855,6,2222,8],[2855,13,2222,15],[2855,22,2222,24],[2855,23,2222,25],[2856,4,2223,4],[2856,5,2223,5],[2856,11,2224,9],[2856,15,2224,13,"ua"],[2856,17,2224,15],[2856,18,2224,16,"includes"],[2856,26,2224,24],[2856,27,2224,25],[2856,34,2224,32],[2856,35,2224,33],[2856,37,2224,35],[2857,6,2225,8],[2857,13,2225,15],[2857,19,2225,21],[2857,20,2225,22],[2858,4,2226,4],[2858,5,2226,5],[2858,11,2227,9],[2858,15,2227,13,"_isBlackBerry"],[2858,28,2227,26],[2858,29,2227,27,"ua"],[2858,31,2227,29],[2858,32,2227,30],[2858,34,2227,32],[2859,6,2228,8],[2860,6,2229,8],[2860,13,2229,15],[2860,25,2229,27],[2860,26,2229,28],[2861,4,2230,4],[2861,5,2230,5],[2861,11,2231,9],[2861,15,2231,13,"_isWebOS"],[2861,23,2231,21],[2861,24,2231,22,"ua"],[2861,26,2231,24],[2861,27,2231,25],[2861,29,2231,27],[2862,6,2232,8],[2863,6,2233,8],[2863,13,2233,15],[2863,20,2233,22],[2863,21,2233,23],[2864,4,2234,4],[2864,5,2234,5],[2864,11,2235,9],[2864,15,2235,13,"_isSafari"],[2864,24,2235,22],[2864,25,2235,23,"ua"],[2864,27,2235,25],[2864,28,2235,26],[2864,30,2235,28],[2865,6,2236,8],[2865,13,2236,15],[2865,21,2236,23],[2865,22,2236,24],[2866,4,2237,4],[2866,5,2237,5],[2866,11,2238,9],[2866,15,2238,13],[2866,16,2238,14,"ua"],[2866,18,2238,16],[2866,19,2238,17,"includes"],[2866,27,2238,25],[2866,28,2238,26],[2866,37,2238,35],[2866,38,2238,36],[2866,42,2238,40,"_isChromeIOS"],[2866,54,2238,52],[2866,55,2238,53,"ua"],[2866,57,2238,55],[2866,58,2238,56],[2866,63,2239,8],[2866,64,2239,9,"ua"],[2866,66,2239,11],[2866,67,2239,12,"includes"],[2866,75,2239,20],[2866,76,2239,21],[2866,83,2239,28],[2866,84,2239,29],[2866,86,2239,31],[2867,6,2240,8],[2867,13,2240,15],[2867,21,2240,23],[2867,22,2240,24],[2868,4,2241,4],[2868,5,2241,5],[2868,11,2242,9],[2868,15,2242,13,"_isAndroid"],[2868,25,2242,23],[2868,26,2242,24,"ua"],[2868,28,2242,26],[2868,29,2242,27],[2868,31,2242,29],[2869,6,2243,8],[2870,6,2244,8],[2870,13,2244,15],[2870,22,2244,24],[2870,23,2244,25],[2871,4,2245,4],[2871,5,2245,5],[2871,11,2246,9],[2872,6,2247,8],[2873,6,2248,8],[2873,12,2248,14,"re"],[2873,14,2248,16],[2873,17,2248,19],[2873,50,2248,52],[2874,6,2249,8],[2874,12,2249,14,"matches"],[2874,19,2249,21],[2874,22,2249,24,"userAgent"],[2874,31,2249,33],[2874,32,2249,34,"match"],[2874,37,2249,39],[2874,38,2249,40,"re"],[2874,40,2249,42],[2874,41,2249,43],[2875,6,2250,8],[2875,10,2250,12,"matches"],[2875,17,2250,19],[2875,19,2250,21,"length"],[2875,25,2250,27],[2875,30,2250,32],[2875,31,2250,33],[2875,33,2250,35],[2876,8,2251,12],[2876,15,2251,19,"matches"],[2876,22,2251,26],[2876,23,2251,27],[2876,24,2251,28],[2876,25,2251,29],[2877,6,2252,8],[2878,4,2253,4],[2879,4,2254,4],[2879,11,2254,11],[2879,18,2254,18],[2879,19,2254,19],[2880,2,2255,0],[2881,2,2256,0],[2881,11,2256,9,"_isFirefox"],[2881,21,2256,19,"_isFirefox"],[2881,22,2256,20,"ua"],[2881,24,2256,22],[2881,27,2256,25],[2881,31,2256,25,"getUA"],[2881,44,2256,30],[2881,45,2256,30,"getUA"],[2881,50,2256,30],[2881,52,2256,31],[2881,53,2256,32],[2881,55,2256,34],[2882,4,2257,4],[2882,11,2257,11],[2882,23,2257,23],[2882,24,2257,24,"test"],[2882,28,2257,28],[2882,29,2257,29,"ua"],[2882,31,2257,31],[2882,32,2257,32],[2883,2,2258,0],[2884,2,2259,0],[2884,11,2259,9,"_isSafari"],[2884,20,2259,18,"_isSafari"],[2884,21,2259,19,"userAgent"],[2884,30,2259,28],[2884,33,2259,31],[2884,37,2259,31,"getUA"],[2884,50,2259,36],[2884,51,2259,36,"getUA"],[2884,56,2259,36],[2884,58,2259,37],[2884,59,2259,38],[2884,61,2259,40],[2885,4,2260,4],[2885,10,2260,10,"ua"],[2885,12,2260,12],[2885,15,2260,15,"userAgent"],[2885,24,2260,24],[2885,25,2260,25,"toLowerCase"],[2885,36,2260,36],[2885,37,2260,37],[2885,38,2260,38],[2886,4,2261,4],[2886,11,2261,12,"ua"],[2886,13,2261,14],[2886,14,2261,15,"includes"],[2886,22,2261,23],[2886,23,2261,24],[2886,32,2261,33],[2886,33,2261,34],[2886,37,2262,8],[2886,38,2262,9,"ua"],[2886,40,2262,11],[2886,41,2262,12,"includes"],[2886,49,2262,20],[2886,50,2262,21],[2886,59,2262,30],[2886,60,2262,31],[2886,64,2263,8],[2886,65,2263,9,"ua"],[2886,67,2263,11],[2886,68,2263,12,"includes"],[2886,76,2263,20],[2886,77,2263,21],[2886,85,2263,29],[2886,86,2263,30],[2886,90,2264,8],[2886,91,2264,9,"ua"],[2886,93,2264,11],[2886,94,2264,12,"includes"],[2886,102,2264,20],[2886,103,2264,21],[2886,112,2264,30],[2886,113,2264,31],[2887,2,2265,0],[2888,2,2266,0],[2888,11,2266,9,"_isChromeIOS"],[2888,23,2266,21,"_isChromeIOS"],[2888,24,2266,22,"ua"],[2888,26,2266,24],[2888,29,2266,27],[2888,33,2266,27,"getUA"],[2888,46,2266,32],[2888,47,2266,32,"getUA"],[2888,52,2266,32],[2888,54,2266,33],[2888,55,2266,34],[2888,57,2266,36],[2889,4,2267,4],[2889,11,2267,11],[2889,21,2267,21],[2889,22,2267,22,"test"],[2889,26,2267,26],[2889,27,2267,27,"ua"],[2889,29,2267,29],[2889,30,2267,30],[2890,2,2268,0],[2891,2,2269,0],[2891,11,2269,9,"_isIEMobile"],[2891,22,2269,20,"_isIEMobile"],[2891,23,2269,21,"ua"],[2891,25,2269,23],[2891,28,2269,26],[2891,32,2269,26,"getUA"],[2891,45,2269,31],[2891,46,2269,31,"getUA"],[2891,51,2269,31],[2891,53,2269,32],[2891,54,2269,33],[2891,56,2269,35],[2892,4,2270,4],[2892,11,2270,11],[2892,22,2270,22],[2892,23,2270,23,"test"],[2892,27,2270,27],[2892,28,2270,28,"ua"],[2892,30,2270,30],[2892,31,2270,31],[2893,2,2271,0],[2894,2,2272,0],[2894,11,2272,9,"_isAndroid"],[2894,21,2272,19,"_isAndroid"],[2894,22,2272,20,"ua"],[2894,24,2272,22],[2894,27,2272,25],[2894,31,2272,25,"getUA"],[2894,44,2272,30],[2894,45,2272,30,"getUA"],[2894,50,2272,30],[2894,52,2272,31],[2894,53,2272,32],[2894,55,2272,34],[2895,4,2273,4],[2895,11,2273,11],[2895,21,2273,21],[2895,22,2273,22,"test"],[2895,26,2273,26],[2895,27,2273,27,"ua"],[2895,29,2273,29],[2895,30,2273,30],[2896,2,2274,0],[2897,2,2275,0],[2897,11,2275,9,"_isBlackBerry"],[2897,24,2275,22,"_isBlackBerry"],[2897,25,2275,23,"ua"],[2897,27,2275,25],[2897,30,2275,28],[2897,34,2275,28,"getUA"],[2897,47,2275,33],[2897,48,2275,33,"getUA"],[2897,53,2275,33],[2897,55,2275,34],[2897,56,2275,35],[2897,58,2275,37],[2898,4,2276,4],[2898,11,2276,11],[2898,24,2276,24],[2898,25,2276,25,"test"],[2898,29,2276,29],[2898,30,2276,30,"ua"],[2898,32,2276,32],[2898,33,2276,33],[2899,2,2277,0],[2900,2,2278,0],[2900,11,2278,9,"_isWebOS"],[2900,19,2278,17,"_isWebOS"],[2900,20,2278,18,"ua"],[2900,22,2278,20],[2900,25,2278,23],[2900,29,2278,23,"getUA"],[2900,42,2278,28],[2900,43,2278,28,"getUA"],[2900,48,2278,28],[2900,50,2278,29],[2900,51,2278,30],[2900,53,2278,32],[2901,4,2279,4],[2901,11,2279,11],[2901,19,2279,19],[2901,20,2279,20,"test"],[2901,24,2279,24],[2901,25,2279,25,"ua"],[2901,27,2279,27],[2901,28,2279,28],[2902,2,2280,0],[2903,2,2281,0],[2903,11,2281,9,"_isIOS"],[2903,17,2281,15,"_isIOS"],[2903,18,2281,16,"ua"],[2903,20,2281,18],[2903,23,2281,21],[2903,27,2281,21,"getUA"],[2903,40,2281,26],[2903,41,2281,26,"getUA"],[2903,46,2281,26],[2903,48,2281,27],[2903,49,2281,28],[2903,51,2281,30],[2904,4,2282,4],[2904,11,2282,12],[2904,30,2282,31],[2904,31,2282,32,"test"],[2904,35,2282,36],[2904,36,2282,37,"ua"],[2904,38,2282,39],[2904,39,2282,40],[2904,43,2283,9],[2904,55,2283,21],[2904,56,2283,22,"test"],[2904,60,2283,26],[2904,61,2283,27,"ua"],[2904,63,2283,29],[2904,64,2283,30],[2904,68,2283,34],[2904,77,2283,43],[2904,78,2283,44,"test"],[2904,82,2283,48],[2904,83,2283,49,"ua"],[2904,85,2283,51],[2904,86,2283,53],[2905,2,2284,0],[2906,2,2285,0],[2906,11,2285,9,"_isIOS7Or8"],[2906,21,2285,19,"_isIOS7Or8"],[2906,22,2285,20,"ua"],[2906,24,2285,22],[2906,27,2285,25],[2906,31,2285,25,"getUA"],[2906,44,2285,30],[2906,45,2285,30,"getUA"],[2906,50,2285,30],[2906,52,2285,31],[2906,53,2285,32],[2906,55,2285,34],[2907,4,2286,4],[2907,11,2286,12],[2907,41,2286,42],[2907,42,2286,43,"test"],[2907,46,2286,47],[2907,47,2286,48,"ua"],[2907,49,2286,50],[2907,50,2286,51],[2907,54,2287,8],[2907,84,2287,38],[2907,85,2287,39,"test"],[2907,89,2287,43],[2907,90,2287,44,"ua"],[2907,92,2287,46],[2907,93,2287,47],[2908,2,2288,0],[2909,2,2289,0],[2909,11,2289,9,"_isIE10"],[2909,18,2289,16,"_isIE10"],[2909,19,2289,16],[2909,21,2289,19],[2910,4,2290,4],[2910,11,2290,11],[2910,15,2290,11,"isIE"],[2910,28,2290,15],[2910,29,2290,15,"isIE"],[2910,33,2290,15],[2910,35,2290,16],[2910,36,2290,17],[2910,40,2290,21,"document"],[2910,48,2290,29],[2910,49,2290,30,"documentMode"],[2910,61,2290,42],[2910,66,2290,47],[2910,68,2290,49],[2911,2,2291,0],[2912,2,2292,0],[2912,11,2292,9,"_isMobileBrowser"],[2912,27,2292,25,"_isMobileBrowser"],[2912,28,2292,26,"ua"],[2912,30,2292,28],[2912,33,2292,31],[2912,37,2292,31,"getUA"],[2912,50,2292,36],[2912,51,2292,36,"getUA"],[2912,56,2292,36],[2912,58,2292,37],[2912,59,2292,38],[2912,61,2292,40],[2913,4,2293,4],[2914,4,2294,4],[2914,11,2294,12,"_isIOS"],[2914,17,2294,18],[2914,18,2294,19,"ua"],[2914,20,2294,21],[2914,21,2294,22],[2914,25,2295,8,"_isAndroid"],[2914,35,2295,18],[2914,36,2295,19,"ua"],[2914,38,2295,21],[2914,39,2295,22],[2914,43,2296,8,"_isWebOS"],[2914,51,2296,16],[2914,52,2296,17,"ua"],[2914,54,2296,19],[2914,55,2296,20],[2914,59,2297,8,"_isBlackBerry"],[2914,72,2297,21],[2914,73,2297,22,"ua"],[2914,75,2297,24],[2914,76,2297,25],[2914,80,2298,8],[2914,96,2298,24],[2914,97,2298,25,"test"],[2914,101,2298,29],[2914,102,2298,30,"ua"],[2914,104,2298,32],[2914,105,2298,33],[2914,109,2299,8,"_isIEMobile"],[2914,120,2299,19],[2914,121,2299,20,"ua"],[2914,123,2299,22],[2914,124,2299,23],[2915,2,2300,0],[2917,2,2302,0],[2918,0,2303,0],[2919,0,2304,0],[2920,0,2305,0],[2921,0,2306,0],[2922,0,2307,0],[2923,0,2308,0],[2924,0,2309,0],[2925,0,2310,0],[2926,0,2311,0],[2927,0,2312,0],[2928,0,2313,0],[2929,0,2314,0],[2930,0,2315,0],[2931,0,2316,0],[2932,0,2317,0],[2933,2,2318,0],[2934,0,2319,0],[2935,0,2320,0],[2936,2,2321,0],[2936,11,2321,9,"_getClientVersion"],[2936,28,2321,26,"_getClientVersion"],[2936,29,2321,27,"clientPlatform"],[2936,43,2321,41],[2936,45,2321,43,"frameworks"],[2936,55,2321,53],[2936,58,2321,56],[2936,60,2321,58],[2936,62,2321,60],[2937,4,2322,4],[2937,8,2322,8,"reportedPlatform"],[2937,24,2322,24],[2938,4,2323,4],[2938,12,2323,12,"clientPlatform"],[2938,26,2323,26],[2939,6,2324,8],[2939,11,2324,13],[2939,20,2324,22],[2939,21,2324,23],[2940,8,2325,12],[2941,8,2326,12,"reportedPlatform"],[2941,24,2326,28],[2941,27,2326,31,"_getBrowserName"],[2941,42,2326,46],[2941,43,2326,47],[2941,47,2326,47,"getUA"],[2941,60,2326,52],[2941,61,2326,52,"getUA"],[2941,66,2326,52],[2941,68,2326,53],[2941,69,2326,54],[2941,70,2326,55],[2942,8,2327,12],[2943,6,2328,8],[2943,11,2328,13],[2943,19,2328,21],[2943,20,2328,22],[2944,8,2329,12],[2945,8,2330,12],[2946,8,2331,12],[2947,8,2332,12,"reportedPlatform"],[2947,24,2332,28],[2947,27,2332,31],[2947,30,2332,34,"_getBrowserName"],[2947,45,2332,49],[2947,46,2332,50],[2947,50,2332,50,"getUA"],[2947,63,2332,55],[2947,64,2332,55,"getUA"],[2947,69,2332,55],[2947,71,2332,56],[2947,72,2332,57],[2947,73,2332,58],[2947,77,2332,62,"clientPlatform"],[2947,91,2332,76],[2947,93,2332,78],[2948,8,2333,12],[2949,6,2334,8],[2950,8,2335,12,"reportedPlatform"],[2950,24,2335,28],[2950,27,2335,31,"clientPlatform"],[2950,41,2335,45],[2951,4,2336,4],[2952,4,2337,4],[2952,10,2337,10,"reportedFrameworks"],[2952,28,2337,28],[2952,31,2337,31,"frameworks"],[2952,41,2337,41],[2952,42,2337,42,"length"],[2952,48,2337,48],[2952,51,2338,10,"frameworks"],[2952,61,2338,20],[2952,62,2338,21,"join"],[2952,66,2338,25],[2952,67,2338,26],[2952,70,2338,29],[2952,71,2338,30],[2952,74,2339,10],[2952,92,2339,28],[2952,93,2339,29],[2952,94,2339,30],[2953,4,2340,4],[2953,11,2340,11],[2953,14,2340,14,"reportedPlatform"],[2953,30,2340,30],[2953,34,2340,34],[2953,42,2340,42],[2953,43,2340,43],[2953,78,2340,78,"SDK_VERSION"],[2953,90,2340,89],[2953,91,2340,89,"SDK_VERSION"],[2953,102,2340,89],[2953,106,2340,93,"reportedFrameworks"],[2953,124,2340,111],[2953,126,2340,113],[2954,2,2341,0],[2956,2,2343,0],[2957,0,2344,0],[2958,0,2345,0],[2959,0,2346,0],[2960,0,2347,0],[2961,0,2348,0],[2962,0,2349,0],[2963,0,2350,0],[2964,0,2351,0],[2965,0,2352,0],[2966,0,2353,0],[2967,0,2354,0],[2968,0,2355,0],[2969,0,2356,0],[2970,0,2357,0],[2971,0,2358,0],[2972,2,2359,0],[2972,8,2359,6,"AuthMiddlewareQueue"],[2972,27,2359,25],[2972,28,2359,26],[2973,4,2360,4,"constructor"],[2973,15,2360,15,"constructor"],[2973,16,2360,16,"auth"],[2973,20,2360,20],[2973,22,2360,22],[2974,6,2361,8],[2974,10,2361,12],[2974,11,2361,13,"auth"],[2974,15,2361,17],[2974,18,2361,20,"auth"],[2974,22,2361,24],[2975,6,2362,8],[2975,10,2362,12],[2975,11,2362,13,"queue"],[2975,16,2362,18],[2975,19,2362,21],[2975,21,2362,23],[2976,4,2363,4],[2977,4,2364,4,"pushCallback"],[2977,16,2364,16,"pushCallback"],[2977,17,2364,17,"callback"],[2977,25,2364,25],[2977,27,2364,27,"onAbort"],[2977,34,2364,34],[2977,36,2364,36],[2978,6,2365,8],[2979,6,2366,8],[2980,6,2367,8],[2980,12,2367,14,"wrappedCallback"],[2980,27,2367,29],[2980,30,2367,33,"user"],[2980,34,2367,37],[2980,38,2367,42],[2980,42,2367,46,"Promise"],[2980,49,2367,53],[2980,50,2367,54],[2980,51,2367,55,"resolve"],[2980,58,2367,62],[2980,60,2367,64,"reject"],[2980,66,2367,70],[2980,71,2367,75],[2981,8,2368,12],[2981,12,2368,16],[2982,10,2369,16],[2982,16,2369,22,"result"],[2982,22,2369,28],[2982,25,2369,31,"callback"],[2982,33,2369,39],[2982,34,2369,40,"user"],[2982,38,2369,44],[2982,39,2369,45],[2983,10,2370,16],[2984,10,2371,16],[2985,10,2372,16,"resolve"],[2985,17,2372,23],[2985,18,2372,24,"result"],[2985,24,2372,30],[2985,25,2372,31],[2986,8,2373,12],[2986,9,2373,13],[2986,10,2374,12],[2986,17,2374,19,"e"],[2986,18,2374,20],[2986,20,2374,22],[2987,10,2375,16],[2988,10,2376,16,"reject"],[2988,16,2376,22],[2988,17,2376,23,"e"],[2988,18,2376,24],[2988,19,2376,25],[2989,8,2377,12],[2990,6,2378,8],[2990,7,2378,9],[2990,8,2378,10],[2991,6,2379,8],[2992,6,2380,8,"wrappedCallback"],[2992,21,2380,23],[2992,22,2380,24,"onAbort"],[2992,29,2380,31],[2992,32,2380,34,"onAbort"],[2992,39,2380,41],[2993,6,2381,8],[2993,10,2381,12],[2993,11,2381,13,"queue"],[2993,16,2381,18],[2993,17,2381,19,"push"],[2993,21,2381,23],[2993,22,2381,24,"wrappedCallback"],[2993,37,2381,39],[2993,38,2381,40],[2994,6,2382,8],[2994,12,2382,14,"index"],[2994,17,2382,19],[2994,20,2382,22],[2994,24,2382,26],[2994,25,2382,27,"queue"],[2994,30,2382,32],[2994,31,2382,33,"length"],[2994,37,2382,39],[2994,40,2382,42],[2994,41,2382,43],[2995,6,2383,8],[2995,13,2383,15],[2995,19,2383,21],[2996,8,2384,12],[2997,8,2385,12],[2998,8,2386,12],[2998,12,2386,16],[2998,13,2386,17,"queue"],[2998,18,2386,22],[2998,19,2386,23,"index"],[2998,24,2386,28],[2998,25,2386,29],[2998,28,2386,32],[2998,34,2386,38,"Promise"],[2998,41,2386,45],[2998,42,2386,46,"resolve"],[2998,49,2386,53],[2998,50,2386,54],[2998,51,2386,55],[2999,6,2387,8],[2999,7,2387,9],[3000,4,2388,4],[3001,4,2389,4],[3001,10,2389,10,"runMiddleware"],[3001,23,2389,23,"runMiddleware"],[3001,24,2389,24,"nextUser"],[3001,32,2389,32],[3001,34,2389,34],[3002,6,2390,8],[3002,10,2390,12],[3002,14,2390,16],[3002,15,2390,17,"auth"],[3002,19,2390,21],[3002,20,2390,22,"currentUser"],[3002,31,2390,33],[3002,36,2390,38,"nextUser"],[3002,44,2390,46],[3002,46,2390,48],[3003,8,2391,12],[3004,6,2392,8],[3005,6,2393,8],[3006,6,2394,8],[3007,6,2395,8],[3007,12,2395,14,"onAbortStack"],[3007,24,2395,26],[3007,27,2395,29],[3007,29,2395,31],[3008,6,2396,8],[3008,10,2396,12],[3009,8,2397,12],[3009,13,2397,17],[3009,19,2397,23,"beforeStateCallback"],[3009,38,2397,42],[3009,42,2397,46],[3009,46,2397,50],[3009,47,2397,51,"queue"],[3009,52,2397,56],[3009,54,2397,58],[3010,10,2398,16],[3010,16,2398,22,"beforeStateCallback"],[3010,35,2398,41],[3010,36,2398,42,"nextUser"],[3010,44,2398,50],[3010,45,2398,51],[3011,10,2399,16],[3012,10,2400,16],[3012,14,2400,20,"beforeStateCallback"],[3012,33,2400,39],[3012,34,2400,40,"onAbort"],[3012,41,2400,47],[3012,43,2400,49],[3013,12,2401,20,"onAbortStack"],[3013,24,2401,32],[3013,25,2401,33,"push"],[3013,29,2401,37],[3013,30,2401,38,"beforeStateCallback"],[3013,49,2401,57],[3013,50,2401,58,"onAbort"],[3013,57,2401,65],[3013,58,2401,66],[3014,10,2402,16],[3015,8,2403,12],[3016,6,2404,8],[3016,7,2404,9],[3016,8,2405,8],[3016,15,2405,15,"e"],[3016,16,2405,16],[3016,18,2405,18],[3017,8,2406,12],[3018,8,2407,12],[3019,8,2408,12,"onAbortStack"],[3019,20,2408,24],[3019,21,2408,25,"reverse"],[3019,28,2408,32],[3019,29,2408,33],[3019,30,2408,34],[3020,8,2409,12],[3020,13,2409,17],[3020,19,2409,23,"onAbort"],[3020,26,2409,30],[3020,30,2409,34,"onAbortStack"],[3020,42,2409,46],[3020,44,2409,48],[3021,10,2410,16],[3021,14,2410,20],[3022,12,2411,20,"onAbort"],[3022,19,2411,27],[3022,20,2411,28],[3022,21,2411,29],[3023,10,2412,16],[3023,11,2412,17],[3023,12,2413,16],[3023,19,2413,23,"_"],[3023,20,2413,24],[3023,22,2413,26],[3024,12,2414,20],[3025,10,2414,20],[3026,8,2416,12],[3027,8,2417,12],[3027,14,2417,18],[3027,18,2417,22],[3027,19,2417,23,"auth"],[3027,23,2417,27],[3027,24,2417,28,"_errorFactory"],[3027,37,2417,41],[3027,38,2417,42,"create"],[3027,44,2417,48],[3027,45,2417,49],[3027,60,2417,64],[3027,61,2417,65],[3027,96,2417,100],[3028,10,2418,16,"originalMessage"],[3028,25,2418,31],[3028,27,2418,33,"e"],[3028,28,2418,34],[3028,30,2418,36,"message"],[3029,8,2419,12],[3029,9,2419,13],[3029,10,2419,14],[3030,6,2420,8],[3031,4,2421,4],[3032,2,2422,0],[3034,2,2424,0],[3035,0,2425,0],[3036,0,2426,0],[3037,0,2427,0],[3038,0,2428,0],[3039,0,2429,0],[3040,0,2430,0],[3041,0,2431,0],[3042,0,2432,0],[3043,0,2433,0],[3044,0,2434,0],[3045,0,2435,0],[3046,0,2436,0],[3047,0,2437,0],[3048,0,2438,0],[3049,0,2439,0],[3050,2,2440,0],[3051,0,2441,0],[3052,0,2442,0],[3053,0,2443,0],[3054,0,2444,0],[3055,0,2445,0],[3056,0,2446,0],[3057,2,2447,0],[3057,17,2447,15,"_getPasswordPolicy"],[3057,35,2447,33,"_getPasswordPolicy"],[3057,36,2447,34,"auth"],[3057,40,2447,38],[3057,42,2447,40,"request"],[3057,49,2447,47],[3057,52,2447,50],[3057,53,2447,51],[3057,54,2447,52],[3057,56,2447,54],[3058,4,2448,4],[3058,11,2448,11,"_performApiRequest"],[3058,29,2448,29],[3058,30,2448,30,"auth"],[3058,34,2448,34],[3058,36,2448,36],[3058,41,2448,41],[3058,42,2448,42],[3058,64,2448,64],[3058,84,2448,84],[3058,85,2448,85],[3058,121,2448,121,"_addTidIfNecessary"],[3058,139,2448,139],[3058,140,2448,140,"auth"],[3058,144,2448,144],[3058,146,2448,146,"request"],[3058,153,2448,153],[3058,154,2448,154],[3058,155,2448,155],[3059,2,2449,0],[3061,2,2451,0],[3062,0,2452,0],[3063,0,2453,0],[3064,0,2454,0],[3065,0,2455,0],[3066,0,2456,0],[3067,0,2457,0],[3068,0,2458,0],[3069,0,2459,0],[3070,0,2460,0],[3071,0,2461,0],[3072,0,2462,0],[3073,0,2463,0],[3074,0,2464,0],[3075,0,2465,0],[3076,0,2466,0],[3077,2,2467,0],[3078,2,2468,0],[3078,8,2468,6,"MINIMUM_MIN_PASSWORD_LENGTH"],[3078,35,2468,33],[3078,38,2468,36],[3078,39,2468,37],[3079,2,2469,0],[3080,0,2470,0],[3081,0,2471,0],[3082,0,2472,0],[3083,0,2473,0],[3084,2,2474,0],[3084,8,2474,6,"PasswordPolicyImpl"],[3084,26,2474,24],[3084,27,2474,25],[3085,4,2475,4,"constructor"],[3085,15,2475,15,"constructor"],[3085,16,2475,16,"response"],[3085,24,2475,24],[3085,26,2475,26],[3086,6,2476,8],[3087,6,2477,8],[3087,12,2477,14,"responseOptions"],[3087,27,2477,29],[3087,30,2477,32,"response"],[3087,38,2477,40],[3087,39,2477,41,"customStrengthOptions"],[3087,60,2477,62],[3088,6,2478,8],[3088,10,2478,12],[3088,11,2478,13,"customStrengthOptions"],[3088,32,2478,34],[3088,35,2478,37],[3088,36,2478,38],[3088,37,2478,39],[3089,6,2479,8],[3090,6,2480,8],[3090,10,2480,12],[3090,11,2480,13,"customStrengthOptions"],[3090,32,2480,34],[3090,33,2480,35,"minPasswordLength"],[3090,50,2480,52],[3090,53,2481,12,"responseOptions"],[3090,68,2481,27],[3090,69,2481,28,"minPasswordLength"],[3090,86,2481,45],[3090,90,2481,49,"MINIMUM_MIN_PASSWORD_LENGTH"],[3090,117,2481,76],[3091,6,2482,8],[3091,10,2482,12,"responseOptions"],[3091,25,2482,27],[3091,26,2482,28,"maxPasswordLength"],[3091,43,2482,45],[3091,45,2482,47],[3092,8,2483,12],[3092,12,2483,16],[3092,13,2483,17,"customStrengthOptions"],[3092,34,2483,38],[3092,35,2483,39,"maxPasswordLength"],[3092,52,2483,56],[3092,55,2484,16,"responseOptions"],[3092,70,2484,31],[3092,71,2484,32,"maxPasswordLength"],[3092,88,2484,49],[3093,6,2485,8],[3094,6,2486,8],[3094,10,2486,12,"responseOptions"],[3094,25,2486,27],[3094,26,2486,28,"containsLowercaseCharacter"],[3094,52,2486,54],[3094,57,2486,59,"undefined"],[3094,66,2486,68],[3094,68,2486,70],[3095,8,2487,12],[3095,12,2487,16],[3095,13,2487,17,"customStrengthOptions"],[3095,34,2487,38],[3095,35,2487,39,"containsLowercaseLetter"],[3095,58,2487,62],[3095,61,2488,16,"responseOptions"],[3095,76,2488,31],[3095,77,2488,32,"containsLowercaseCharacter"],[3095,103,2488,58],[3096,6,2489,8],[3097,6,2490,8],[3097,10,2490,12,"responseOptions"],[3097,25,2490,27],[3097,26,2490,28,"containsUppercaseCharacter"],[3097,52,2490,54],[3097,57,2490,59,"undefined"],[3097,66,2490,68],[3097,68,2490,70],[3098,8,2491,12],[3098,12,2491,16],[3098,13,2491,17,"customStrengthOptions"],[3098,34,2491,38],[3098,35,2491,39,"containsUppercaseLetter"],[3098,58,2491,62],[3098,61,2492,16,"responseOptions"],[3098,76,2492,31],[3098,77,2492,32,"containsUppercaseCharacter"],[3098,103,2492,58],[3099,6,2493,8],[3100,6,2494,8],[3100,10,2494,12,"responseOptions"],[3100,25,2494,27],[3100,26,2494,28,"containsNumericCharacter"],[3100,50,2494,52],[3100,55,2494,57,"undefined"],[3100,64,2494,66],[3100,66,2494,68],[3101,8,2495,12],[3101,12,2495,16],[3101,13,2495,17,"customStrengthOptions"],[3101,34,2495,38],[3101,35,2495,39,"containsNumericCharacter"],[3101,59,2495,63],[3101,62,2496,16,"responseOptions"],[3101,77,2496,31],[3101,78,2496,32,"containsNumericCharacter"],[3101,102,2496,56],[3102,6,2497,8],[3103,6,2498,8],[3103,10,2498,12,"responseOptions"],[3103,25,2498,27],[3103,26,2498,28,"containsNonAlphanumericCharacter"],[3103,58,2498,60],[3103,63,2498,65,"undefined"],[3103,72,2498,74],[3103,74,2498,76],[3104,8,2499,12],[3104,12,2499,16],[3104,13,2499,17,"customStrengthOptions"],[3104,34,2499,38],[3104,35,2499,39,"containsNonAlphanumericCharacter"],[3104,67,2499,71],[3104,70,2500,16,"responseOptions"],[3104,85,2500,31],[3104,86,2500,32,"containsNonAlphanumericCharacter"],[3104,118,2500,64],[3105,6,2501,8],[3106,6,2502,8],[3106,10,2502,12],[3106,11,2502,13,"enforcementState"],[3106,27,2502,29],[3106,30,2502,32,"response"],[3106,38,2502,40],[3106,39,2502,41,"enforcementState"],[3106,55,2502,57],[3107,6,2503,8],[3107,10,2503,12],[3107,14,2503,16],[3107,15,2503,17,"enforcementState"],[3107,31,2503,33],[3107,36,2503,38],[3107,67,2503,69],[3107,69,2503,71],[3108,8,2504,12],[3108,12,2504,16],[3108,13,2504,17,"enforcementState"],[3108,29,2504,33],[3108,32,2504,36],[3108,37,2504,41],[3109,6,2505,8],[3110,6,2506,8],[3111,6,2507,8],[3111,10,2507,12],[3111,11,2507,13,"allowedNonAlphanumericCharacters"],[3111,43,2507,45],[3111,46,2508,12,"response"],[3111,54,2508,20],[3111,55,2508,21,"allowedNonAlphanumericCharacters"],[3111,87,2508,53],[3111,89,2508,55,"join"],[3111,93,2508,59],[3111,94,2508,60],[3111,96,2508,62],[3111,97,2508,63],[3111,101,2508,67],[3111,103,2508,69],[3112,6,2509,8],[3112,10,2509,12],[3112,11,2509,13,"forceUpgradeOnSignin"],[3112,31,2509,33],[3112,34,2509,36,"response"],[3112,42,2509,44],[3112,43,2509,45,"forceUpgradeOnSignin"],[3112,63,2509,65],[3112,67,2509,69],[3112,72,2509,74],[3113,6,2510,8],[3113,10,2510,12],[3113,11,2510,13,"schemaVersion"],[3113,24,2510,26],[3113,27,2510,29,"response"],[3113,35,2510,37],[3113,36,2510,38,"schemaVersion"],[3113,49,2510,51],[3114,4,2511,4],[3115,4,2512,4,"validatePassword"],[3115,20,2512,20,"validatePassword"],[3115,21,2512,21,"password"],[3115,29,2512,29],[3115,31,2512,31],[3116,6,2513,8],[3116,12,2513,14,"status"],[3116,18,2513,20],[3116,21,2513,23],[3117,8,2514,12,"isValid"],[3117,15,2514,19],[3117,17,2514,21],[3117,21,2514,25],[3118,8,2515,12,"passwordPolicy"],[3118,22,2515,26],[3118,24,2515,28],[3119,6,2516,8],[3119,7,2516,9],[3120,6,2517,8],[3121,6,2518,8],[3121,10,2518,12],[3121,11,2518,13,"validatePasswordLengthOptions"],[3121,40,2518,42],[3121,41,2518,43,"password"],[3121,49,2518,51],[3121,51,2518,53,"status"],[3121,57,2518,59],[3121,58,2518,60],[3122,6,2519,8],[3122,10,2519,12],[3122,11,2519,13,"validatePasswordCharacterOptions"],[3122,43,2519,45],[3122,44,2519,46,"password"],[3122,52,2519,54],[3122,54,2519,56,"status"],[3122,60,2519,62],[3122,61,2519,63],[3123,6,2520,8],[3124,6,2521,8,"status"],[3124,12,2521,14],[3124,13,2521,15,"isValid"],[3124,20,2521,22],[3124,25,2521,27,"status"],[3124,31,2521,33],[3124,32,2521,34,"isValid"],[3124,39,2521,41],[3124,42,2521,44,"status"],[3124,48,2521,50],[3124,49,2521,51,"meetsMinPasswordLength"],[3124,71,2521,73],[3124,75,2521,77],[3124,79,2521,81],[3124,80,2521,82],[3125,6,2522,8,"status"],[3125,12,2522,14],[3125,13,2522,15,"isValid"],[3125,20,2522,22],[3125,25,2522,27,"status"],[3125,31,2522,33],[3125,32,2522,34,"isValid"],[3125,39,2522,41],[3125,42,2522,44,"status"],[3125,48,2522,50],[3125,49,2522,51,"meetsMaxPasswordLength"],[3125,71,2522,73],[3125,75,2522,77],[3125,79,2522,81],[3125,80,2522,82],[3126,6,2523,8,"status"],[3126,12,2523,14],[3126,13,2523,15,"isValid"],[3126,20,2523,22],[3126,25,2523,27,"status"],[3126,31,2523,33],[3126,32,2523,34,"isValid"],[3126,39,2523,41],[3126,42,2523,44,"status"],[3126,48,2523,50],[3126,49,2523,51,"containsLowercaseLetter"],[3126,72,2523,74],[3126,76,2523,78],[3126,80,2523,82],[3126,81,2523,83],[3127,6,2524,8,"status"],[3127,12,2524,14],[3127,13,2524,15,"isValid"],[3127,20,2524,22],[3127,25,2524,27,"status"],[3127,31,2524,33],[3127,32,2524,34,"isValid"],[3127,39,2524,41],[3127,42,2524,44,"status"],[3127,48,2524,50],[3127,49,2524,51,"containsUppercaseLetter"],[3127,72,2524,74],[3127,76,2524,78],[3127,80,2524,82],[3127,81,2524,83],[3128,6,2525,8,"status"],[3128,12,2525,14],[3128,13,2525,15,"isValid"],[3128,20,2525,22],[3128,25,2525,27,"status"],[3128,31,2525,33],[3128,32,2525,34,"isValid"],[3128,39,2525,41],[3128,42,2525,44,"status"],[3128,48,2525,50],[3128,49,2525,51,"containsNumericCharacter"],[3128,73,2525,75],[3128,77,2525,79],[3128,81,2525,83],[3128,82,2525,84],[3129,6,2526,8,"status"],[3129,12,2526,14],[3129,13,2526,15,"isValid"],[3129,20,2526,22],[3129,25,2526,27,"status"],[3129,31,2526,33],[3129,32,2526,34,"isValid"],[3129,39,2526,41],[3129,42,2526,44,"status"],[3129,48,2526,50],[3129,49,2526,51,"containsNonAlphanumericCharacter"],[3129,81,2526,83],[3129,85,2526,87],[3129,89,2526,91],[3129,90,2526,92],[3130,6,2527,8],[3130,13,2527,15,"status"],[3130,19,2527,21],[3131,4,2528,4],[3132,4,2529,4],[3133,0,2530,0],[3134,0,2531,0],[3135,0,2532,0],[3136,0,2533,0],[3137,0,2534,0],[3138,4,2535,4,"validatePasswordLengthOptions"],[3138,33,2535,33,"validatePasswordLengthOptions"],[3138,34,2535,34,"password"],[3138,42,2535,42],[3138,44,2535,44,"status"],[3138,50,2535,50],[3138,52,2535,52],[3139,6,2536,8],[3139,12,2536,14,"minPasswordLength"],[3139,29,2536,31],[3139,32,2536,34],[3139,36,2536,38],[3139,37,2536,39,"customStrengthOptions"],[3139,58,2536,60],[3139,59,2536,61,"minPasswordLength"],[3139,76,2536,78],[3140,6,2537,8],[3140,12,2537,14,"maxPasswordLength"],[3140,29,2537,31],[3140,32,2537,34],[3140,36,2537,38],[3140,37,2537,39,"customStrengthOptions"],[3140,58,2537,60],[3140,59,2537,61,"maxPasswordLength"],[3140,76,2537,78],[3141,6,2538,8],[3141,10,2538,12,"minPasswordLength"],[3141,27,2538,29],[3141,29,2538,31],[3142,8,2539,12,"status"],[3142,14,2539,18],[3142,15,2539,19,"meetsMinPasswordLength"],[3142,37,2539,41],[3142,40,2539,44,"password"],[3142,48,2539,52],[3142,49,2539,53,"length"],[3142,55,2539,59],[3142,59,2539,63,"minPasswordLength"],[3142,76,2539,80],[3143,6,2540,8],[3144,6,2541,8],[3144,10,2541,12,"maxPasswordLength"],[3144,27,2541,29],[3144,29,2541,31],[3145,8,2542,12,"status"],[3145,14,2542,18],[3145,15,2542,19,"meetsMaxPasswordLength"],[3145,37,2542,41],[3145,40,2542,44,"password"],[3145,48,2542,52],[3145,49,2542,53,"length"],[3145,55,2542,59],[3145,59,2542,63,"maxPasswordLength"],[3145,76,2542,80],[3146,6,2543,8],[3147,4,2544,4],[3148,4,2545,4],[3149,0,2546,0],[3150,0,2547,0],[3151,0,2548,0],[3152,0,2549,0],[3153,0,2550,0],[3154,4,2551,4,"validatePasswordCharacterOptions"],[3154,36,2551,36,"validatePasswordCharacterOptions"],[3154,37,2551,37,"password"],[3154,45,2551,45],[3154,47,2551,47,"status"],[3154,53,2551,53],[3154,55,2551,55],[3155,6,2552,8],[3156,6,2553,8],[3156,10,2553,12],[3156,11,2553,13,"updatePasswordCharacterOptionsStatuses"],[3156,49,2553,51],[3156,50,2553,52,"status"],[3156,56,2553,58],[3156,58,2554,8],[3156,91,2554,42],[3156,96,2554,47],[3156,98,2555,8],[3156,131,2555,42],[3156,136,2555,47],[3156,138,2556,8],[3156,169,2556,40],[3156,174,2556,45],[3156,176,2557,8],[3156,215,2557,48],[3156,220,2557,53],[3156,221,2557,54],[3157,6,2558,8],[3157,10,2558,12,"passwordChar"],[3157,22,2558,24],[3158,6,2559,8],[3158,11,2559,13],[3158,15,2559,17,"i"],[3158,16,2559,18],[3158,19,2559,21],[3158,20,2559,22],[3158,22,2559,24,"i"],[3158,23,2559,25],[3158,26,2559,28,"password"],[3158,34,2559,36],[3158,35,2559,37,"length"],[3158,41,2559,43],[3158,43,2559,45,"i"],[3158,44,2559,46],[3158,46,2559,48],[3158,48,2559,50],[3159,8,2560,12,"passwordChar"],[3159,20,2560,24],[3159,23,2560,27,"password"],[3159,31,2560,35],[3159,32,2560,36,"charAt"],[3159,38,2560,42],[3159,39,2560,43,"i"],[3159,40,2560,44],[3159,41,2560,45],[3160,8,2561,12],[3160,12,2561,16],[3160,13,2561,17,"updatePasswordCharacterOptionsStatuses"],[3160,51,2561,55],[3160,52,2561,56,"status"],[3160,58,2561,62],[3160,60,2562,12],[3160,93,2562,46,"passwordChar"],[3160,105,2562,58],[3160,109,2562,62],[3160,112,2562,65],[3160,116,2563,16,"passwordChar"],[3160,128,2563,28],[3160,132,2563,32],[3160,135,2563,35],[3160,137,2564,12],[3160,170,2564,46,"passwordChar"],[3160,182,2564,58],[3160,186,2564,62],[3160,189,2564,65],[3160,193,2565,16,"passwordChar"],[3160,205,2565,28],[3160,209,2565,32],[3160,212,2565,35],[3160,214,2566,12],[3160,245,2566,44,"passwordChar"],[3160,257,2566,56],[3160,261,2566,60],[3160,264,2566,63],[3160,268,2567,16,"passwordChar"],[3160,280,2567,28],[3160,284,2567,32],[3160,287,2567,35],[3160,289,2568,12],[3160,328,2568,52],[3160,332,2568,56],[3160,333,2568,57,"allowedNonAlphanumericCharacters"],[3160,365,2568,89],[3160,366,2568,90,"includes"],[3160,374,2568,98],[3160,375,2568,99,"passwordChar"],[3160,387,2568,111],[3160,388,2568,112],[3160,389,2568,113],[3161,6,2569,8],[3162,4,2570,4],[3163,4,2571,4],[3164,0,2572,0],[3165,0,2573,0],[3166,0,2574,0],[3167,0,2575,0],[3168,0,2576,0],[3169,0,2577,0],[3170,0,2578,0],[3171,0,2579,0],[3172,0,2580,0],[3173,0,2581,0],[3174,4,2582,4,"updatePasswordCharacterOptionsStatuses"],[3174,42,2582,42,"updatePasswordCharacterOptionsStatuses"],[3174,43,2582,43,"status"],[3174,49,2582,49],[3174,51,2582,51,"containsLowercaseCharacter"],[3174,77,2582,77],[3174,79,2582,79,"containsUppercaseCharacter"],[3174,105,2582,105],[3174,107,2582,107,"containsNumericCharacter"],[3174,131,2582,131],[3174,133,2582,133,"containsNonAlphanumericCharacter"],[3174,165,2582,165],[3174,167,2582,167],[3175,6,2583,8],[3175,10,2583,12],[3175,14,2583,16],[3175,15,2583,17,"customStrengthOptions"],[3175,36,2583,38],[3175,37,2583,39,"containsLowercaseLetter"],[3175,60,2583,62],[3175,62,2583,64],[3176,8,2584,12,"status"],[3176,14,2584,18],[3176,15,2584,19,"containsLowercaseLetter"],[3176,38,2584,42],[3176,43,2584,47,"status"],[3176,49,2584,53],[3176,50,2584,54,"containsLowercaseLetter"],[3176,73,2584,77],[3176,76,2584,80,"containsLowercaseCharacter"],[3176,102,2584,106],[3176,103,2584,107],[3177,6,2585,8],[3178,6,2586,8],[3178,10,2586,12],[3178,14,2586,16],[3178,15,2586,17,"customStrengthOptions"],[3178,36,2586,38],[3178,37,2586,39,"containsUppercaseLetter"],[3178,60,2586,62],[3178,62,2586,64],[3179,8,2587,12,"status"],[3179,14,2587,18],[3179,15,2587,19,"containsUppercaseLetter"],[3179,38,2587,42],[3179,43,2587,47,"status"],[3179,49,2587,53],[3179,50,2587,54,"containsUppercaseLetter"],[3179,73,2587,77],[3179,76,2587,80,"containsUppercaseCharacter"],[3179,102,2587,106],[3179,103,2587,107],[3180,6,2588,8],[3181,6,2589,8],[3181,10,2589,12],[3181,14,2589,16],[3181,15,2589,17,"customStrengthOptions"],[3181,36,2589,38],[3181,37,2589,39,"containsNumericCharacter"],[3181,61,2589,63],[3181,63,2589,65],[3182,8,2590,12,"status"],[3182,14,2590,18],[3182,15,2590,19,"containsNumericCharacter"],[3182,39,2590,43],[3182,44,2590,48,"status"],[3182,50,2590,54],[3182,51,2590,55,"containsNumericCharacter"],[3182,75,2590,79],[3182,78,2590,82,"containsNumericCharacter"],[3182,102,2590,106],[3182,103,2590,107],[3183,6,2591,8],[3184,6,2592,8],[3184,10,2592,12],[3184,14,2592,16],[3184,15,2592,17,"customStrengthOptions"],[3184,36,2592,38],[3184,37,2592,39,"containsNonAlphanumericCharacter"],[3184,69,2592,71],[3184,71,2592,73],[3185,8,2593,12,"status"],[3185,14,2593,18],[3185,15,2593,19,"containsNonAlphanumericCharacter"],[3185,47,2593,51],[3185,52,2593,56,"status"],[3185,58,2593,62],[3185,59,2593,63,"containsNonAlphanumericCharacter"],[3185,91,2593,95],[3185,94,2593,98,"containsNonAlphanumericCharacter"],[3185,126,2593,130],[3185,127,2593,131],[3186,6,2594,8],[3187,4,2595,4],[3188,2,2596,0],[3190,2,2598,0],[3191,0,2599,0],[3192,0,2600,0],[3193,0,2601,0],[3194,0,2602,0],[3195,0,2603,0],[3196,0,2604,0],[3197,0,2605,0],[3198,0,2606,0],[3199,0,2607,0],[3200,0,2608,0],[3201,0,2609,0],[3202,0,2610,0],[3203,0,2611,0],[3204,0,2612,0],[3205,0,2613,0],[3206,2,2614,0],[3206,8,2614,6,"AuthImpl"],[3206,16,2614,14],[3206,17,2614,15],[3207,4,2615,4,"constructor"],[3207,15,2615,15,"constructor"],[3207,16,2615,16,"app"],[3207,19,2615,19],[3207,21,2615,21,"heartbeatServiceProvider"],[3207,45,2615,45],[3207,47,2615,47,"appCheckServiceProvider"],[3207,70,2615,70],[3207,72,2615,72,"config"],[3207,78,2615,78],[3207,80,2615,80],[3208,6,2616,8],[3208,10,2616,12],[3208,11,2616,13,"app"],[3208,14,2616,16],[3208,17,2616,19,"app"],[3208,20,2616,22],[3209,6,2617,8],[3209,10,2617,12],[3209,11,2617,13,"heartbeatServiceProvider"],[3209,35,2617,37],[3209,38,2617,40,"heartbeatServiceProvider"],[3209,62,2617,64],[3210,6,2618,8],[3210,10,2618,12],[3210,11,2618,13,"appCheckServiceProvider"],[3210,34,2618,36],[3210,37,2618,39,"appCheckServiceProvider"],[3210,60,2618,62],[3211,6,2619,8],[3211,10,2619,12],[3211,11,2619,13,"config"],[3211,17,2619,19],[3211,20,2619,22,"config"],[3211,26,2619,28],[3212,6,2620,8],[3212,10,2620,12],[3212,11,2620,13,"currentUser"],[3212,22,2620,24],[3212,25,2620,27],[3212,29,2620,31],[3213,6,2621,8],[3213,10,2621,12],[3213,11,2621,13,"emulatorConfig"],[3213,25,2621,27],[3213,28,2621,30],[3213,32,2621,34],[3214,6,2622,8],[3214,10,2622,12],[3214,11,2622,13,"operations"],[3214,21,2622,23],[3214,24,2622,26,"Promise"],[3214,31,2622,33],[3214,32,2622,34,"resolve"],[3214,39,2622,41],[3214,40,2622,42],[3214,41,2622,43],[3215,6,2623,8],[3215,10,2623,12],[3215,11,2623,13,"authStateSubscription"],[3215,32,2623,34],[3215,35,2623,37],[3215,39,2623,41,"Subscription"],[3215,51,2623,53],[3215,52,2623,54],[3215,56,2623,58],[3215,57,2623,59],[3216,6,2624,8],[3216,10,2624,12],[3216,11,2624,13,"idTokenSubscription"],[3216,30,2624,32],[3216,33,2624,35],[3216,37,2624,39,"Subscription"],[3216,49,2624,51],[3216,50,2624,52],[3216,54,2624,56],[3216,55,2624,57],[3217,6,2625,8],[3217,10,2625,12],[3217,11,2625,13,"beforeStateQueue"],[3217,27,2625,29],[3217,30,2625,32],[3217,34,2625,36,"AuthMiddlewareQueue"],[3217,53,2625,55],[3217,54,2625,56],[3217,58,2625,60],[3217,59,2625,61],[3218,6,2626,8],[3218,10,2626,12],[3218,11,2626,13,"redirectUser"],[3218,23,2626,25],[3218,26,2626,28],[3218,30,2626,32],[3219,6,2627,8],[3219,10,2627,12],[3219,11,2627,13,"isProactiveRefreshEnabled"],[3219,36,2627,38],[3219,39,2627,41],[3219,44,2627,46],[3220,6,2628,8],[3220,10,2628,12],[3220,11,2628,13,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[3220,50,2628,52],[3220,53,2628,55],[3220,54,2628,56],[3221,6,2629,8],[3222,6,2630,8],[3223,6,2631,8],[3223,10,2631,12],[3223,11,2631,13,"_canInitEmulator"],[3223,27,2631,29],[3223,30,2631,32],[3223,34,2631,36],[3224,6,2632,8],[3224,10,2632,12],[3224,11,2632,13,"_isInitialized"],[3224,25,2632,27],[3224,28,2632,30],[3224,33,2632,35],[3225,6,2633,8],[3225,10,2633,12],[3225,11,2633,13,"_deleted"],[3225,19,2633,21],[3225,22,2633,24],[3225,27,2633,29],[3226,6,2634,8],[3226,10,2634,12],[3226,11,2634,13,"_initializationPromise"],[3226,33,2634,35],[3226,36,2634,38],[3226,40,2634,42],[3227,6,2635,8],[3227,10,2635,12],[3227,11,2635,13,"_popupRedirectResolver"],[3227,33,2635,35],[3227,36,2635,38],[3227,40,2635,42],[3228,6,2636,8],[3228,10,2636,12],[3228,11,2636,13,"_errorFactory"],[3228,24,2636,26],[3228,27,2636,29,"_DEFAULT_AUTH_ERROR_FACTORY"],[3228,54,2636,56],[3229,6,2637,8],[3229,10,2637,12],[3229,11,2637,13,"_agentRecaptchaConfig"],[3229,32,2637,34],[3229,35,2637,37],[3229,39,2637,41],[3230,6,2638,8],[3230,10,2638,12],[3230,11,2638,13,"_tenantRecaptchaConfigs"],[3230,34,2638,36],[3230,37,2638,39],[3230,38,2638,40],[3230,39,2638,41],[3231,6,2639,8],[3231,10,2639,12],[3231,11,2639,13,"_projectPasswordPolicy"],[3231,33,2639,35],[3231,36,2639,38],[3231,40,2639,42],[3232,6,2640,8],[3232,10,2640,12],[3232,11,2640,13,"_tenantPasswordPolicies"],[3232,34,2640,36],[3232,37,2640,39],[3232,38,2640,40],[3232,39,2640,41],[3233,6,2641,8],[3233,10,2641,12],[3233,11,2641,13,"_resolvePersistenceManagerAvailable"],[3233,46,2641,48],[3233,49,2641,51,"undefined"],[3233,58,2641,60],[3234,6,2642,8],[3235,6,2643,8],[3236,6,2644,8],[3237,6,2645,8],[3237,10,2645,12],[3237,11,2645,13,"lastNotifiedUid"],[3237,26,2645,28],[3237,29,2645,31,"undefined"],[3237,38,2645,40],[3238,6,2646,8],[3238,10,2646,12],[3238,11,2646,13,"languageCode"],[3238,23,2646,25],[3238,26,2646,28],[3238,30,2646,32],[3239,6,2647,8],[3239,10,2647,12],[3239,11,2647,13,"tenantId"],[3239,19,2647,21],[3239,22,2647,24],[3239,26,2647,28],[3240,6,2648,8],[3240,10,2648,12],[3240,11,2648,13,"settings"],[3240,19,2648,21],[3240,22,2648,24],[3241,8,2648,26,"appVerificationDisabledForTesting"],[3241,41,2648,59],[3241,43,2648,61],[3242,6,2648,67],[3242,7,2648,68],[3243,6,2649,8],[3243,10,2649,12],[3243,11,2649,13,"frameworks"],[3243,21,2649,23],[3243,24,2649,26],[3243,26,2649,28],[3244,6,2650,8],[3244,10,2650,12],[3244,11,2650,13,"name"],[3244,15,2650,17],[3244,18,2650,20,"app"],[3244,21,2650,23],[3244,22,2650,24,"name"],[3244,26,2650,28],[3245,6,2651,8],[3245,10,2651,12],[3245,11,2651,13,"clientVersion"],[3245,24,2651,26],[3245,27,2651,29,"config"],[3245,33,2651,35],[3245,34,2651,36,"sdkClientVersion"],[3245,50,2651,52],[3246,6,2652,8],[3247,6,2653,8],[3248,6,2654,8],[3248,10,2654,12],[3248,11,2654,13,"_persistenceManagerAvailable"],[3248,39,2654,41],[3248,42,2654,44],[3248,46,2654,48,"Promise"],[3248,53,2654,55],[3248,54,2654,56,"resolve"],[3248,61,2654,63],[3248,65,2654,68],[3248,69,2654,72],[3248,70,2654,73,"_resolvePersistenceManagerAvailable"],[3248,105,2654,108],[3248,108,2654,111,"resolve"],[3248,115,2654,119],[3248,116,2654,120],[3249,4,2655,4],[3250,4,2656,4,"_initializeWithPersistence"],[3250,30,2656,30,"_initializeWithPersistence"],[3250,31,2656,31,"persistenceHierarchy"],[3250,51,2656,51],[3250,53,2656,53,"popupRedirectResolver"],[3250,74,2656,74],[3250,76,2656,76],[3251,6,2657,8],[3251,10,2657,12,"popupRedirectResolver"],[3251,31,2657,33],[3251,33,2657,35],[3252,8,2658,12],[3252,12,2658,16],[3252,13,2658,17,"_popupRedirectResolver"],[3252,35,2658,39],[3252,38,2658,42,"_getInstance"],[3252,50,2658,54],[3252,51,2658,55,"popupRedirectResolver"],[3252,72,2658,76],[3252,73,2658,77],[3253,6,2659,8],[3254,6,2660,8],[3255,6,2661,8],[3256,6,2662,8],[3256,10,2662,12],[3256,11,2662,13,"_initializationPromise"],[3256,33,2662,35],[3256,36,2662,38],[3256,40,2662,42],[3256,41,2662,43,"queue"],[3256,46,2662,48],[3256,47,2662,49],[3256,59,2662,61],[3257,8,2663,12],[3257,12,2663,16],[3257,16,2663,20],[3257,17,2663,21,"_deleted"],[3257,25,2663,29],[3257,27,2663,31],[3258,10,2664,16],[3259,8,2665,12],[3260,8,2666,12],[3260,12,2666,16],[3260,13,2666,17,"persistenceManager"],[3260,31,2666,35],[3260,34,2666,38],[3260,40,2666,44,"PersistenceUserManager"],[3260,62,2666,66],[3260,63,2666,67,"create"],[3260,69,2666,73],[3260,70,2666,74],[3260,74,2666,78],[3260,76,2666,80,"persistenceHierarchy"],[3260,96,2666,100],[3260,97,2666,101],[3261,8,2667,12],[3261,12,2667,16],[3261,13,2667,17,"_resolvePersistenceManagerAvailable"],[3261,48,2667,52],[3261,51,2667,55],[3261,52,2667,56],[3262,8,2668,12],[3262,12,2668,16],[3262,16,2668,20],[3262,17,2668,21,"_deleted"],[3262,25,2668,29],[3262,27,2668,31],[3263,10,2669,16],[3264,8,2670,12],[3265,8,2671,12],[3266,8,2672,12],[3267,8,2673,12],[3267,12,2673,16],[3267,16,2673,20],[3267,17,2673,21,"_popupRedirectResolver"],[3267,39,2673,43],[3267,41,2673,45,"_shouldInitProactively"],[3267,63,2673,67],[3267,65,2673,69],[3268,10,2674,16],[3269,10,2675,16],[3269,14,2675,20],[3270,12,2676,20],[3270,18,2676,26],[3270,22,2676,30],[3270,23,2676,31,"_popupRedirectResolver"],[3270,45,2676,53],[3270,46,2676,54,"_initialize"],[3270,57,2676,65],[3270,58,2676,66],[3270,62,2676,70],[3270,63,2676,71],[3271,10,2677,16],[3271,11,2677,17],[3271,12,2678,16],[3271,19,2678,23,"e"],[3271,20,2678,24],[3271,22,2678,26],[3272,12,2679,20],[3273,10,2679,20],[3274,8,2681,12],[3275,8,2682,12],[3275,14,2682,18],[3275,18,2682,22],[3275,19,2682,23,"initializeCurrentUser"],[3275,40,2682,44],[3275,41,2682,45,"popupRedirectResolver"],[3275,62,2682,66],[3275,63,2682,67],[3276,8,2683,12],[3276,12,2683,16],[3276,13,2683,17,"lastNotifiedUid"],[3276,28,2683,32],[3276,31,2683,35],[3276,35,2683,39],[3276,36,2683,40,"currentUser"],[3276,47,2683,51],[3276,49,2683,53,"uid"],[3276,52,2683,56],[3276,56,2683,60],[3276,60,2683,64],[3277,8,2684,12],[3277,12,2684,16],[3277,16,2684,20],[3277,17,2684,21,"_deleted"],[3277,25,2684,29],[3277,27,2684,31],[3278,10,2685,16],[3279,8,2686,12],[3280,8,2687,12],[3280,12,2687,16],[3280,13,2687,17,"_isInitialized"],[3280,27,2687,31],[3280,30,2687,34],[3280,34,2687,38],[3281,6,2688,8],[3281,7,2688,9],[3281,8,2688,10],[3282,6,2689,8],[3282,13,2689,15],[3282,17,2689,19],[3282,18,2689,20,"_initializationPromise"],[3282,40,2689,42],[3283,4,2690,4],[3284,4,2691,4],[3285,0,2692,0],[3286,0,2693,0],[3287,4,2694,4],[3287,10,2694,10,"_onStorageEvent"],[3287,25,2694,25,"_onStorageEvent"],[3287,26,2694,25],[3287,28,2694,28],[3288,6,2695,8],[3288,10,2695,12],[3288,14,2695,16],[3288,15,2695,17,"_deleted"],[3288,23,2695,25],[3288,25,2695,27],[3289,8,2696,12],[3290,6,2697,8],[3291,6,2698,8],[3291,12,2698,14,"user"],[3291,16,2698,18],[3291,19,2698,21],[3291,25,2698,27],[3291,29,2698,31],[3291,30,2698,32,"assertedPersistence"],[3291,49,2698,51],[3291,50,2698,52,"getCurrentUser"],[3291,64,2698,66],[3291,65,2698,67],[3291,66,2698,68],[3292,6,2699,8],[3292,10,2699,12],[3292,11,2699,13],[3292,15,2699,17],[3292,16,2699,18,"currentUser"],[3292,27,2699,29],[3292,31,2699,33],[3292,32,2699,34,"user"],[3292,36,2699,38],[3292,38,2699,40],[3293,8,2700,12],[3294,8,2701,12],[3295,6,2702,8],[3296,6,2703,8],[3297,6,2704,8],[3297,10,2704,12],[3297,14,2704,16],[3297,15,2704,17,"currentUser"],[3297,26,2704,28],[3297,30,2704,32,"user"],[3297,34,2704,36],[3297,38,2704,40],[3297,42,2704,44],[3297,43,2704,45,"currentUser"],[3297,54,2704,56],[3297,55,2704,57,"uid"],[3297,58,2704,60],[3297,63,2704,65,"user"],[3297,67,2704,69],[3297,68,2704,70,"uid"],[3297,71,2704,73],[3297,73,2704,75],[3298,8,2705,12],[3299,8,2706,12],[3299,12,2706,16],[3299,13,2706,17,"_currentUser"],[3299,25,2706,29],[3299,26,2706,30,"_assign"],[3299,33,2706,37],[3299,34,2706,38,"user"],[3299,38,2706,42],[3299,39,2706,43],[3300,8,2707,12],[3301,8,2708,12],[3302,8,2709,12],[3302,14,2709,18],[3302,18,2709,22],[3302,19,2709,23,"currentUser"],[3302,30,2709,34],[3302,31,2709,35,"getIdToken"],[3302,41,2709,45],[3302,42,2709,46],[3302,43,2709,47],[3303,8,2710,12],[3304,6,2711,8],[3305,6,2712,8],[3306,6,2713,8],[3307,6,2714,8],[3307,12,2714,14],[3307,16,2714,18],[3307,17,2714,19,"_updateCurrentUser"],[3307,35,2714,37],[3307,36,2714,38,"user"],[3307,40,2714,42],[3307,42,2714,44],[3307,72,2714,75],[3307,76,2714,79],[3307,77,2714,80],[3308,4,2715,4],[3309,4,2716,4],[3309,10,2716,10,"initializeCurrentUserFromIdToken"],[3309,42,2716,42,"initializeCurrentUserFromIdToken"],[3309,43,2716,43,"idToken"],[3309,50,2716,50],[3309,52,2716,52],[3310,6,2717,8],[3310,10,2717,12],[3311,8,2718,12],[3311,14,2718,18,"response"],[3311,22,2718,26],[3311,25,2718,29],[3311,31,2718,35,"getAccountInfo"],[3311,45,2718,49],[3311,46,2718,50],[3311,50,2718,54],[3311,52,2718,56],[3312,10,2718,58,"idToken"],[3313,8,2718,66],[3313,9,2718,67],[3313,10,2718,68],[3314,8,2719,12],[3314,14,2719,18,"user"],[3314,18,2719,22],[3314,21,2719,25],[3314,27,2719,31,"UserImpl"],[3314,35,2719,39],[3314,36,2719,40,"_fromGetAccountInfoResponse"],[3314,63,2719,67],[3314,64,2719,68],[3314,68,2719,72],[3314,70,2719,74,"response"],[3314,78,2719,82],[3314,80,2719,84,"idToken"],[3314,87,2719,91],[3314,88,2719,92],[3315,8,2720,12],[3315,14,2720,18],[3315,18,2720,22],[3315,19,2720,23,"directlySetCurrentUser"],[3315,41,2720,45],[3315,42,2720,46,"user"],[3315,46,2720,50],[3315,47,2720,51],[3316,6,2721,8],[3316,7,2721,9],[3316,8,2722,8],[3316,15,2722,15,"err"],[3316,18,2722,18],[3316,20,2722,20],[3317,8,2723,12,"console"],[3317,15,2723,19],[3317,16,2723,20,"warn"],[3317,20,2723,24],[3317,21,2723,25],[3317,89,2723,93],[3317,91,2723,95,"err"],[3317,94,2723,98],[3317,95,2723,99],[3318,8,2724,12],[3318,14,2724,18],[3318,18,2724,22],[3318,19,2724,23,"directlySetCurrentUser"],[3318,41,2724,45],[3318,42,2724,46],[3318,46,2724,50],[3318,47,2724,51],[3319,6,2725,8],[3320,4,2726,4],[3321,4,2727,4],[3321,10,2727,10,"initializeCurrentUser"],[3321,31,2727,31,"initializeCurrentUser"],[3321,32,2727,32,"popupRedirectResolver"],[3321,53,2727,53],[3321,55,2727,55],[3322,6,2728,8],[3322,10,2728,12],[3322,14,2728,12,"_isFirebaseServerApp"],[3322,26,2728,32],[3322,27,2728,32,"_isFirebaseServerApp"],[3322,47,2728,32],[3322,49,2728,33],[3322,53,2728,37],[3322,54,2728,38,"app"],[3322,57,2728,41],[3322,58,2728,42],[3322,60,2728,44],[3323,8,2729,12],[3323,14,2729,18,"idToken"],[3323,21,2729,25],[3323,24,2729,28],[3323,28,2729,32],[3323,29,2729,33,"app"],[3323,32,2729,36],[3323,33,2729,37,"settings"],[3323,41,2729,45],[3323,42,2729,46,"authIdToken"],[3323,53,2729,57],[3324,8,2730,12],[3324,12,2730,16,"idToken"],[3324,19,2730,23],[3324,21,2730,25],[3325,10,2731,16],[3326,10,2732,16],[3327,10,2733,16],[3327,17,2733,23],[3327,21,2733,27,"Promise"],[3327,28,2733,34],[3327,29,2733,35,"resolve"],[3327,36,2733,42],[3327,40,2733,46],[3328,12,2734,20,"setTimeout"],[3328,22,2734,30],[3328,23,2734,31],[3328,29,2734,37],[3328,33,2734,41],[3328,34,2734,42,"initializeCurrentUserFromIdToken"],[3328,66,2734,74],[3328,67,2734,75,"idToken"],[3328,74,2734,82],[3328,75,2734,83],[3328,76,2734,84,"then"],[3328,80,2734,88],[3328,81,2734,89,"resolve"],[3328,88,2734,96],[3328,90,2734,98,"resolve"],[3328,97,2734,105],[3328,98,2734,106],[3328,99,2734,107],[3329,10,2735,16],[3329,11,2735,17],[3329,12,2735,18],[3330,8,2736,12],[3330,9,2736,13],[3330,15,2737,17],[3331,10,2738,16],[3331,17,2738,23],[3331,21,2738,27],[3331,22,2738,28,"directlySetCurrentUser"],[3331,44,2738,50],[3331,45,2738,51],[3331,49,2738,55],[3331,50,2738,56],[3332,8,2739,12],[3333,6,2740,8],[3334,6,2741,8],[3335,6,2742,8],[3335,12,2742,14,"previouslyStoredUser"],[3335,32,2742,34],[3335,35,2742,38],[3335,41,2742,44],[3335,45,2742,48],[3335,46,2742,49,"assertedPersistence"],[3335,65,2742,68],[3335,66,2742,69,"getCurrentUser"],[3335,80,2742,83],[3335,81,2742,84],[3335,82,2742,86],[3336,6,2743,8],[3336,10,2743,12,"futureCurrentUser"],[3336,27,2743,29],[3336,30,2743,32,"previouslyStoredUser"],[3336,50,2743,52],[3337,6,2744,8],[3337,10,2744,12,"needsTocheckMiddleware"],[3337,32,2744,34],[3337,35,2744,37],[3337,40,2744,42],[3338,6,2745,8],[3338,10,2745,12,"popupRedirectResolver"],[3338,31,2745,33],[3338,35,2745,37],[3338,39,2745,41],[3338,40,2745,42,"config"],[3338,46,2745,48],[3338,47,2745,49,"authDomain"],[3338,57,2745,59],[3338,59,2745,61],[3339,8,2746,12],[3339,14,2746,18],[3339,18,2746,22],[3339,19,2746,23,"getOrInitRedirectPersistenceManager"],[3339,54,2746,58],[3339,55,2746,59],[3339,56,2746,60],[3340,8,2747,12],[3340,14,2747,18,"redirectUserEventId"],[3340,33,2747,37],[3340,36,2747,40],[3340,40,2747,44],[3340,41,2747,45,"redirectUser"],[3340,53,2747,57],[3340,55,2747,59,"_redirectEventId"],[3340,71,2747,75],[3341,8,2748,12],[3341,14,2748,18,"storedUserEventId"],[3341,31,2748,35],[3341,34,2748,38,"futureCurrentUser"],[3341,51,2748,55],[3341,53,2748,57,"_redirectEventId"],[3341,69,2748,73],[3342,8,2749,12],[3342,14,2749,18,"result"],[3342,20,2749,24],[3342,23,2749,27],[3342,29,2749,33],[3342,33,2749,37],[3342,34,2749,38,"tryRedirectSignIn"],[3342,51,2749,55],[3342,52,2749,56,"popupRedirectResolver"],[3342,73,2749,77],[3342,74,2749,78],[3343,8,2750,12],[3344,8,2751,12],[3345,8,2752,12],[3346,8,2753,12],[3347,8,2754,12],[3347,12,2754,16],[3347,13,2754,17],[3347,14,2754,18,"redirectUserEventId"],[3347,33,2754,37],[3347,37,2754,41,"redirectUserEventId"],[3347,56,2754,60],[3347,61,2754,65,"storedUserEventId"],[3347,78,2754,82],[3347,83,2755,16,"result"],[3347,89,2755,22],[3347,91,2755,24,"user"],[3347,95,2755,28],[3347,97,2755,30],[3348,10,2756,16,"futureCurrentUser"],[3348,27,2756,33],[3348,30,2756,36,"result"],[3348,36,2756,42],[3348,37,2756,43,"user"],[3348,41,2756,47],[3349,10,2757,16,"needsTocheckMiddleware"],[3349,32,2757,38],[3349,35,2757,41],[3349,39,2757,45],[3350,8,2758,12],[3351,6,2759,8],[3352,6,2760,8],[3353,6,2761,8],[3353,10,2761,12],[3353,11,2761,13,"futureCurrentUser"],[3353,28,2761,30],[3353,30,2761,32],[3354,8,2762,12],[3354,15,2762,19],[3354,19,2762,23],[3354,20,2762,24,"directlySetCurrentUser"],[3354,42,2762,46],[3354,43,2762,47],[3354,47,2762,51],[3354,48,2762,52],[3355,6,2763,8],[3356,6,2764,8],[3356,10,2764,12],[3356,11,2764,13,"futureCurrentUser"],[3356,28,2764,30],[3356,29,2764,31,"_redirectEventId"],[3356,45,2764,47],[3356,47,2764,49],[3357,8,2765,12],[3358,8,2766,12],[3359,8,2767,12],[3359,12,2767,16,"needsTocheckMiddleware"],[3359,34,2767,38],[3359,36,2767,40],[3360,10,2768,16],[3360,14,2768,20],[3361,12,2769,20],[3361,18,2769,26],[3361,22,2769,30],[3361,23,2769,31,"beforeStateQueue"],[3361,39,2769,47],[3361,40,2769,48,"runMiddleware"],[3361,53,2769,61],[3361,54,2769,62,"futureCurrentUser"],[3361,71,2769,79],[3361,72,2769,80],[3362,10,2770,16],[3362,11,2770,17],[3362,12,2771,16],[3362,19,2771,23,"e"],[3362,20,2771,24],[3362,22,2771,26],[3363,12,2772,20,"futureCurrentUser"],[3363,29,2772,37],[3363,32,2772,40,"previouslyStoredUser"],[3363,52,2772,60],[3364,12,2773,20],[3365,12,2774,20],[3366,12,2775,20],[3366,16,2775,24],[3366,17,2775,25,"_popupRedirectResolver"],[3366,39,2775,47],[3366,40,2775,48,"_overrideRedirectResult"],[3366,63,2775,71],[3366,64,2775,72],[3366,68,2775,76],[3366,70,2775,78],[3366,76,2775,84,"Promise"],[3366,83,2775,91],[3366,84,2775,92,"reject"],[3366,90,2775,98],[3366,91,2775,99,"e"],[3366,92,2775,100],[3366,93,2775,101],[3366,94,2775,102],[3367,10,2776,16],[3368,8,2777,12],[3369,8,2778,12],[3369,12,2778,16,"futureCurrentUser"],[3369,29,2778,33],[3369,31,2778,35],[3370,10,2779,16],[3370,17,2779,23],[3370,21,2779,27],[3370,22,2779,28,"reloadAndSetCurrentUserOrClear"],[3370,52,2779,58],[3370,53,2779,59,"futureCurrentUser"],[3370,70,2779,76],[3370,71,2779,77],[3371,8,2780,12],[3371,9,2780,13],[3371,15,2781,17],[3372,10,2782,16],[3372,17,2782,23],[3372,21,2782,27],[3372,22,2782,28,"directlySetCurrentUser"],[3372,44,2782,50],[3372,45,2782,51],[3372,49,2782,55],[3372,50,2782,56],[3373,8,2783,12],[3374,6,2784,8],[3375,6,2785,8,"_assert"],[3375,13,2785,15],[3375,14,2785,16],[3375,18,2785,20],[3375,19,2785,21,"_popupRedirectResolver"],[3375,41,2785,43],[3375,43,2785,45],[3375,47,2785,49],[3375,49,2785,51],[3375,65,2785,67],[3375,66,2785,68],[3375,100,2785,102],[3375,101,2785,103],[3376,6,2786,8],[3376,12,2786,14],[3376,16,2786,18],[3376,17,2786,19,"getOrInitRedirectPersistenceManager"],[3376,52,2786,54],[3376,53,2786,55],[3376,54,2786,56],[3377,6,2787,8],[3378,6,2788,8],[3379,6,2789,8],[3380,6,2790,8],[3380,10,2790,12],[3380,14,2790,16],[3380,15,2790,17,"redirectUser"],[3380,27,2790,29],[3380,31,2791,12],[3380,35,2791,16],[3380,36,2791,17,"redirectUser"],[3380,48,2791,29],[3380,49,2791,30,"_redirectEventId"],[3380,65,2791,46],[3380,70,2791,51,"futureCurrentUser"],[3380,87,2791,68],[3380,88,2791,69,"_redirectEventId"],[3380,104,2791,85],[3380,106,2791,87],[3381,8,2792,12],[3381,15,2792,19],[3381,19,2792,23],[3381,20,2792,24,"directlySetCurrentUser"],[3381,42,2792,46],[3381,43,2792,47,"futureCurrentUser"],[3381,60,2792,64],[3381,61,2792,65],[3382,6,2793,8],[3383,6,2794,8],[3383,13,2794,15],[3383,17,2794,19],[3383,18,2794,20,"reloadAndSetCurrentUserOrClear"],[3383,48,2794,50],[3383,49,2794,51,"futureCurrentUser"],[3383,66,2794,68],[3383,67,2794,69],[3384,4,2795,4],[3385,4,2796,4],[3385,10,2796,10,"tryRedirectSignIn"],[3385,27,2796,27,"tryRedirectSignIn"],[3385,28,2796,28,"redirectResolver"],[3385,44,2796,44],[3385,46,2796,46],[3386,6,2797,8],[3387,6,2798,8],[3388,6,2799,8],[3389,6,2800,8],[3390,6,2801,8],[3391,6,2802,8],[3392,6,2803,8],[3393,6,2804,8],[3394,6,2805,8],[3395,6,2806,8],[3396,6,2807,8],[3397,6,2808,8],[3398,6,2809,8],[3399,6,2810,8],[3400,6,2811,8],[3401,6,2812,8],[3401,10,2812,12,"result"],[3401,16,2812,18],[3401,19,2812,21],[3401,23,2812,25],[3402,6,2813,8],[3402,10,2813,12],[3403,8,2814,12],[3404,8,2815,12],[3405,8,2816,12,"result"],[3405,14,2816,18],[3405,17,2816,21],[3405,23,2816,27],[3405,27,2816,31],[3405,28,2816,32,"_popupRedirectResolver"],[3405,50,2816,54],[3405,51,2816,55,"_completeRedirectFn"],[3405,70,2816,74],[3405,71,2816,75],[3405,75,2816,79],[3405,77,2816,81,"redirectResolver"],[3405,93,2816,97],[3405,95,2816,99],[3405,99,2816,103],[3405,100,2816,104],[3406,6,2817,8],[3406,7,2817,9],[3406,8,2818,8],[3406,15,2818,15,"e"],[3406,16,2818,16],[3406,18,2818,18],[3407,8,2819,12],[3408,8,2820,12],[3409,8,2821,12],[3409,14,2821,18],[3409,18,2821,22],[3409,19,2821,23,"_setRedirectUser"],[3409,35,2821,39],[3409,36,2821,40],[3409,40,2821,44],[3409,41,2821,45],[3410,6,2822,8],[3411,6,2823,8],[3411,13,2823,15,"result"],[3411,19,2823,21],[3412,4,2824,4],[3413,4,2825,4],[3413,10,2825,10,"reloadAndSetCurrentUserOrClear"],[3413,40,2825,40,"reloadAndSetCurrentUserOrClear"],[3413,41,2825,41,"user"],[3413,45,2825,45],[3413,47,2825,47],[3414,6,2826,8],[3414,10,2826,12],[3415,8,2827,12],[3415,14,2827,18,"_reloadWithoutSaving"],[3415,34,2827,38],[3415,35,2827,39,"user"],[3415,39,2827,43],[3415,40,2827,44],[3416,6,2828,8],[3416,7,2828,9],[3416,8,2829,8],[3416,15,2829,15,"e"],[3416,16,2829,16],[3416,18,2829,18],[3417,8,2830,12],[3417,12,2830,16,"e"],[3417,13,2830,17],[3417,15,2830,19,"code"],[3417,19,2830,23],[3417,24,2831,16],[3417,32,2831,24],[3417,56,2831,48],[3417,57,2831,49],[3417,101,2831,93],[3417,103,2831,95],[3418,10,2832,16],[3419,10,2833,16],[3420,10,2834,16],[3420,17,2834,23],[3420,21,2834,27],[3420,22,2834,28,"directlySetCurrentUser"],[3420,44,2834,50],[3420,45,2834,51],[3420,49,2834,55],[3420,50,2834,56],[3421,8,2835,12],[3422,6,2836,8],[3423,6,2837,8],[3423,13,2837,15],[3423,17,2837,19],[3423,18,2837,20,"directlySetCurrentUser"],[3423,40,2837,42],[3423,41,2837,43,"user"],[3423,45,2837,47],[3423,46,2837,48],[3424,4,2838,4],[3425,4,2839,4,"useDeviceLanguage"],[3425,21,2839,21,"useDeviceLanguage"],[3425,22,2839,21],[3425,24,2839,24],[3426,6,2840,8],[3426,10,2840,12],[3426,11,2840,13,"languageCode"],[3426,23,2840,25],[3426,26,2840,28,"_getUserLanguage"],[3426,42,2840,44],[3426,43,2840,45],[3426,44,2840,46],[3427,4,2841,4],[3428,4,2842,4],[3428,10,2842,10,"_delete"],[3428,17,2842,17,"_delete"],[3428,18,2842,17],[3428,20,2842,20],[3429,6,2843,8],[3429,10,2843,12],[3429,11,2843,13,"_deleted"],[3429,19,2843,21],[3429,22,2843,24],[3429,26,2843,28],[3430,4,2844,4],[3431,4,2845,4],[3431,10,2845,10,"updateCurrentUser"],[3431,27,2845,27,"updateCurrentUser"],[3431,28,2845,28,"userExtern"],[3431,38,2845,38],[3431,40,2845,40],[3432,6,2846,8],[3432,10,2846,12],[3432,14,2846,12,"_isFirebaseServerApp"],[3432,26,2846,32],[3432,27,2846,32,"_isFirebaseServerApp"],[3432,47,2846,32],[3432,49,2846,33],[3432,53,2846,37],[3432,54,2846,38,"app"],[3432,57,2846,41],[3432,58,2846,42],[3432,60,2846,44],[3433,8,2847,12],[3433,15,2847,19,"Promise"],[3433,22,2847,26],[3433,23,2847,27,"reject"],[3433,29,2847,33],[3433,30,2847,34,"_serverAppCurrentUserOperationNotSupportedError"],[3433,77,2847,81],[3433,78,2847,82],[3433,82,2847,86],[3433,83,2847,87],[3433,84,2847,88],[3434,6,2848,8],[3435,6,2849,8],[3436,6,2850,8],[3437,6,2851,8],[3437,12,2851,14,"user"],[3437,16,2851,18],[3437,19,2851,21,"userExtern"],[3437,29,2851,31],[3437,32,2852,14],[3437,36,2852,14,"getModularInstance"],[3437,49,2852,32],[3437,50,2852,32,"getModularInstance"],[3437,68,2852,32],[3437,70,2852,33,"userExtern"],[3437,80,2852,43],[3437,81,2852,44],[3437,84,2853,14],[3437,88,2853,18],[3438,6,2854,8],[3438,10,2854,12,"user"],[3438,14,2854,16],[3438,16,2854,18],[3439,8,2855,12,"_assert"],[3439,15,2855,19],[3439,16,2855,20,"user"],[3439,20,2855,24],[3439,21,2855,25,"auth"],[3439,25,2855,29],[3439,26,2855,30,"config"],[3439,32,2855,36],[3439,33,2855,37,"apiKey"],[3439,39,2855,43],[3439,44,2855,48],[3439,48,2855,52],[3439,49,2855,53,"config"],[3439,55,2855,59],[3439,56,2855,60,"apiKey"],[3439,62,2855,66],[3439,64,2855,68],[3439,68,2855,72],[3439,70,2855,74],[3439,90,2855,94],[3439,91,2855,95],[3439,123,2855,127],[3439,124,2855,128],[3440,6,2856,8],[3441,6,2857,8],[3441,13,2857,15],[3441,17,2857,19],[3441,18,2857,20,"_updateCurrentUser"],[3441,36,2857,38],[3441,37,2857,39,"user"],[3441,41,2857,43],[3441,45,2857,47,"user"],[3441,49,2857,51],[3441,50,2857,52,"_clone"],[3441,56,2857,58],[3441,57,2857,59],[3441,61,2857,63],[3441,62,2857,64],[3441,63,2857,65],[3442,4,2858,4],[3443,4,2859,4],[3443,10,2859,10,"_updateCurrentUser"],[3443,28,2859,28,"_updateCurrentUser"],[3443,29,2859,29,"user"],[3443,33,2859,33],[3443,35,2859,35,"skipBeforeStateCallbacks"],[3443,59,2859,59],[3443,62,2859,62],[3443,67,2859,67],[3443,69,2859,69],[3444,6,2860,8],[3444,10,2860,12],[3444,14,2860,16],[3444,15,2860,17,"_deleted"],[3444,23,2860,25],[3444,25,2860,27],[3445,8,2861,12],[3446,6,2862,8],[3447,6,2863,8],[3447,10,2863,12,"user"],[3447,14,2863,16],[3447,16,2863,18],[3448,8,2864,12,"_assert"],[3448,15,2864,19],[3448,16,2864,20],[3448,20,2864,24],[3448,21,2864,25,"tenantId"],[3448,29,2864,33],[3448,34,2864,38,"user"],[3448,38,2864,42],[3448,39,2864,43,"tenantId"],[3448,47,2864,51],[3448,49,2864,53],[3448,53,2864,57],[3448,55,2864,59],[3448,75,2864,79],[3448,76,2864,80],[3448,114,2864,118],[3448,115,2864,119],[3449,6,2865,8],[3450,6,2866,8],[3450,10,2866,12],[3450,11,2866,13,"skipBeforeStateCallbacks"],[3450,35,2866,37],[3450,37,2866,39],[3451,8,2867,12],[3451,14,2867,18],[3451,18,2867,22],[3451,19,2867,23,"beforeStateQueue"],[3451,35,2867,39],[3451,36,2867,40,"runMiddleware"],[3451,49,2867,53],[3451,50,2867,54,"user"],[3451,54,2867,58],[3451,55,2867,59],[3452,6,2868,8],[3453,6,2869,8],[3453,13,2869,15],[3453,17,2869,19],[3453,18,2869,20,"queue"],[3453,23,2869,25],[3453,24,2869,26],[3453,36,2869,38],[3454,8,2870,12],[3454,14,2870,18],[3454,18,2870,22],[3454,19,2870,23,"directlySetCurrentUser"],[3454,41,2870,45],[3454,42,2870,46,"user"],[3454,46,2870,50],[3454,47,2870,51],[3455,8,2871,12],[3455,12,2871,16],[3455,13,2871,17,"notifyAuthListeners"],[3455,32,2871,36],[3455,33,2871,37],[3455,34,2871,38],[3456,6,2872,8],[3456,7,2872,9],[3456,8,2872,10],[3457,4,2873,4],[3458,4,2874,4],[3458,10,2874,10,"signOut"],[3458,17,2874,17,"signOut"],[3458,18,2874,17],[3458,20,2874,20],[3459,6,2875,8],[3459,10,2875,12],[3459,14,2875,12,"_isFirebaseServerApp"],[3459,26,2875,32],[3459,27,2875,32,"_isFirebaseServerApp"],[3459,47,2875,32],[3459,49,2875,33],[3459,53,2875,37],[3459,54,2875,38,"app"],[3459,57,2875,41],[3459,58,2875,42],[3459,60,2875,44],[3460,8,2876,12],[3460,15,2876,19,"Promise"],[3460,22,2876,26],[3460,23,2876,27,"reject"],[3460,29,2876,33],[3460,30,2876,34,"_serverAppCurrentUserOperationNotSupportedError"],[3460,77,2876,81],[3460,78,2876,82],[3460,82,2876,86],[3460,83,2876,87],[3460,84,2876,88],[3461,6,2877,8],[3462,6,2878,8],[3463,6,2879,8],[3463,12,2879,14],[3463,16,2879,18],[3463,17,2879,19,"beforeStateQueue"],[3463,33,2879,35],[3463,34,2879,36,"runMiddleware"],[3463,47,2879,49],[3463,48,2879,50],[3463,52,2879,54],[3463,53,2879,55],[3464,6,2880,8],[3465,6,2881,8],[3465,10,2881,12],[3465,14,2881,16],[3465,15,2881,17,"redirectPersistenceManager"],[3465,41,2881,43],[3465,45,2881,47],[3465,49,2881,51],[3465,50,2881,52,"_popupRedirectResolver"],[3465,72,2881,74],[3465,74,2881,76],[3466,8,2882,12],[3466,14,2882,18],[3466,18,2882,22],[3466,19,2882,23,"_setRedirectUser"],[3466,35,2882,39],[3466,36,2882,40],[3466,40,2882,44],[3466,41,2882,45],[3467,6,2883,8],[3468,6,2884,8],[3469,6,2885,8],[3470,6,2886,8],[3470,13,2886,15],[3470,17,2886,19],[3470,18,2886,20,"_updateCurrentUser"],[3470,36,2886,38],[3470,37,2886,39],[3470,41,2886,43],[3470,43,2886,45],[3470,73,2886,76],[3470,77,2886,80],[3470,78,2886,81],[3471,4,2887,4],[3472,4,2888,4,"setPersistence"],[3472,18,2888,18,"setPersistence"],[3472,19,2888,19,"persistence"],[3472,30,2888,30],[3472,32,2888,32],[3473,6,2889,8],[3473,10,2889,12],[3473,14,2889,12,"_isFirebaseServerApp"],[3473,26,2889,32],[3473,27,2889,32,"_isFirebaseServerApp"],[3473,47,2889,32],[3473,49,2889,33],[3473,53,2889,37],[3473,54,2889,38,"app"],[3473,57,2889,41],[3473,58,2889,42],[3473,60,2889,44],[3474,8,2890,12],[3474,15,2890,19,"Promise"],[3474,22,2890,26],[3474,23,2890,27,"reject"],[3474,29,2890,33],[3474,30,2890,34,"_serverAppCurrentUserOperationNotSupportedError"],[3474,77,2890,81],[3474,78,2890,82],[3474,82,2890,86],[3474,83,2890,87],[3474,84,2890,88],[3475,6,2891,8],[3476,6,2892,8],[3476,13,2892,15],[3476,17,2892,19],[3476,18,2892,20,"queue"],[3476,23,2892,25],[3476,24,2892,26],[3476,36,2892,38],[3477,8,2893,12],[3477,14,2893,18],[3477,18,2893,22],[3477,19,2893,23,"assertedPersistence"],[3477,38,2893,42],[3477,39,2893,43,"setPersistence"],[3477,53,2893,57],[3477,54,2893,58,"_getInstance"],[3477,66,2893,70],[3477,67,2893,71,"persistence"],[3477,78,2893,82],[3477,79,2893,83],[3477,80,2893,84],[3478,6,2894,8],[3478,7,2894,9],[3478,8,2894,10],[3479,4,2895,4],[3480,4,2896,4,"_getRecaptchaConfig"],[3480,23,2896,23,"_getRecaptchaConfig"],[3480,24,2896,23],[3480,26,2896,26],[3481,6,2897,8],[3481,10,2897,12],[3481,14,2897,16],[3481,15,2897,17,"tenantId"],[3481,23,2897,25],[3481,27,2897,29],[3481,31,2897,33],[3481,33,2897,35],[3482,8,2898,12],[3482,15,2898,19],[3482,19,2898,23],[3482,20,2898,24,"_agentRecaptchaConfig"],[3482,41,2898,45],[3483,6,2899,8],[3483,7,2899,9],[3483,13,2900,13],[3484,8,2901,12],[3484,15,2901,19],[3484,19,2901,23],[3484,20,2901,24,"_tenantRecaptchaConfigs"],[3484,43,2901,47],[3484,44,2901,48],[3484,48,2901,52],[3484,49,2901,53,"tenantId"],[3484,57,2901,61],[3484,58,2901,62],[3485,6,2902,8],[3486,4,2903,4],[3487,4,2904,4],[3487,10,2904,10,"validatePassword"],[3487,26,2904,26,"validatePassword"],[3487,27,2904,27,"password"],[3487,35,2904,35],[3487,37,2904,37],[3488,6,2905,8],[3488,10,2905,12],[3488,11,2905,13],[3488,15,2905,17],[3488,16,2905,18,"_getPasswordPolicyInternal"],[3488,42,2905,44],[3488,43,2905,45],[3488,44,2905,46],[3488,46,2905,48],[3489,8,2906,12],[3489,14,2906,18],[3489,18,2906,22],[3489,19,2906,23,"_updatePasswordPolicy"],[3489,40,2906,44],[3489,41,2906,45],[3489,42,2906,46],[3490,6,2907,8],[3491,6,2908,8],[3492,6,2909,8],[3492,12,2909,14,"passwordPolicy"],[3492,26,2909,28],[3492,29,2909,31],[3492,33,2909,35],[3492,34,2909,36,"_getPasswordPolicyInternal"],[3492,60,2909,62],[3492,61,2909,63],[3492,62,2909,64],[3493,6,2910,8],[3494,6,2911,8],[3495,6,2912,8],[3495,10,2912,12,"passwordPolicy"],[3495,24,2912,26],[3495,25,2912,27,"schemaVersion"],[3495,38,2912,40],[3495,43,2913,12],[3495,47,2913,16],[3495,48,2913,17,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[3495,87,2913,56],[3495,89,2913,58],[3496,8,2914,12],[3496,15,2914,19,"Promise"],[3496,22,2914,26],[3496,23,2914,27,"reject"],[3496,29,2914,33],[3496,30,2914,34],[3496,34,2914,38],[3496,35,2914,39,"_errorFactory"],[3496,48,2914,52],[3496,49,2914,53,"create"],[3496,55,2914,59],[3496,56,2914,60],[3496,100,2914,104],[3496,101,2914,105],[3496,165,2914,169],[3496,166,2914,170],[3496,167,2914,171],[3496,168,2914,172],[3496,169,2914,173],[3497,6,2915,8],[3498,6,2916,8],[3498,13,2916,15,"passwordPolicy"],[3498,27,2916,29],[3498,28,2916,30,"validatePassword"],[3498,44,2916,46],[3498,45,2916,47,"password"],[3498,53,2916,55],[3498,54,2916,56],[3499,4,2917,4],[3500,4,2918,4,"_getPasswordPolicyInternal"],[3500,30,2918,30,"_getPasswordPolicyInternal"],[3500,31,2918,30],[3500,33,2918,33],[3501,6,2919,8],[3501,10,2919,12],[3501,14,2919,16],[3501,15,2919,17,"tenantId"],[3501,23,2919,25],[3501,28,2919,30],[3501,32,2919,34],[3501,34,2919,36],[3502,8,2920,12],[3502,15,2920,19],[3502,19,2920,23],[3502,20,2920,24,"_projectPasswordPolicy"],[3502,42,2920,46],[3503,6,2921,8],[3503,7,2921,9],[3503,13,2922,13],[3504,8,2923,12],[3504,15,2923,19],[3504,19,2923,23],[3504,20,2923,24,"_tenantPasswordPolicies"],[3504,43,2923,47],[3504,44,2923,48],[3504,48,2923,52],[3504,49,2923,53,"tenantId"],[3504,57,2923,61],[3504,58,2923,62],[3505,6,2924,8],[3506,4,2925,4],[3507,4,2926,4],[3507,10,2926,10,"_updatePasswordPolicy"],[3507,31,2926,31,"_updatePasswordPolicy"],[3507,32,2926,31],[3507,34,2926,34],[3508,6,2927,8],[3508,12,2927,14,"response"],[3508,20,2927,22],[3508,23,2927,25],[3508,29,2927,31,"_getPasswordPolicy"],[3508,47,2927,49],[3508,48,2927,50],[3508,52,2927,54],[3508,53,2927,55],[3509,6,2928,8],[3509,12,2928,14,"passwordPolicy"],[3509,26,2928,28],[3509,29,2928,31],[3509,33,2928,35,"PasswordPolicyImpl"],[3509,51,2928,53],[3509,52,2928,54,"response"],[3509,60,2928,62],[3509,61,2928,63],[3510,6,2929,8],[3510,10,2929,12],[3510,14,2929,16],[3510,15,2929,17,"tenantId"],[3510,23,2929,25],[3510,28,2929,30],[3510,32,2929,34],[3510,34,2929,36],[3511,8,2930,12],[3511,12,2930,16],[3511,13,2930,17,"_projectPasswordPolicy"],[3511,35,2930,39],[3511,38,2930,42,"passwordPolicy"],[3511,52,2930,56],[3512,6,2931,8],[3512,7,2931,9],[3512,13,2932,13],[3513,8,2933,12],[3513,12,2933,16],[3513,13,2933,17,"_tenantPasswordPolicies"],[3513,36,2933,40],[3513,37,2933,41],[3513,41,2933,45],[3513,42,2933,46,"tenantId"],[3513,50,2933,54],[3513,51,2933,55],[3513,54,2933,58,"passwordPolicy"],[3513,68,2933,72],[3514,6,2934,8],[3515,4,2935,4],[3516,4,2936,4,"_getPersistenceType"],[3516,23,2936,23,"_getPersistenceType"],[3516,24,2936,23],[3516,26,2936,26],[3517,6,2937,8],[3517,13,2937,15],[3517,17,2937,19],[3517,18,2937,20,"assertedPersistence"],[3517,37,2937,39],[3517,38,2937,40,"persistence"],[3517,49,2937,51],[3517,50,2937,52,"type"],[3517,54,2937,56],[3518,4,2938,4],[3519,4,2939,4,"_getPersistence"],[3519,19,2939,19,"_getPersistence"],[3519,20,2939,19],[3519,22,2939,22],[3520,6,2940,8],[3520,13,2940,15],[3520,17,2940,19],[3520,18,2940,20,"assertedPersistence"],[3520,37,2940,39],[3520,38,2940,40,"persistence"],[3520,49,2940,51],[3521,4,2941,4],[3522,4,2942,4,"_updateErrorMap"],[3522,19,2942,19,"_updateErrorMap"],[3522,20,2942,20,"errorMap"],[3522,28,2942,28],[3522,30,2942,30],[3523,6,2943,8],[3523,10,2943,12],[3523,11,2943,13,"_errorFactory"],[3523,24,2943,26],[3523,27,2943,29],[3523,31,2943,33,"ErrorFactory"],[3523,44,2943,45],[3523,45,2943,45,"ErrorFactory"],[3523,57,2943,45],[3523,58,2943,46],[3523,64,2943,52],[3523,66,2943,54],[3523,76,2943,64],[3523,78,2943,66,"errorMap"],[3523,86,2943,74],[3523,87,2943,75],[3523,88,2943,76],[3523,89,2943,77],[3524,4,2944,4],[3525,4,2945,4,"onAuthStateChanged"],[3525,22,2945,22,"onAuthStateChanged"],[3525,23,2945,23,"nextOrObserver"],[3525,37,2945,37],[3525,39,2945,39,"error"],[3525,44,2945,44],[3525,46,2945,46,"completed"],[3525,55,2945,55],[3525,57,2945,57],[3526,6,2946,8],[3526,13,2946,15],[3526,17,2946,19],[3526,18,2946,20,"registerStateListener"],[3526,39,2946,41],[3526,40,2946,42],[3526,44,2946,46],[3526,45,2946,47,"authStateSubscription"],[3526,66,2946,68],[3526,68,2946,70,"nextOrObserver"],[3526,82,2946,84],[3526,84,2946,86,"error"],[3526,89,2946,91],[3526,91,2946,93,"completed"],[3526,100,2946,102],[3526,101,2946,103],[3527,4,2947,4],[3528,4,2948,4,"beforeAuthStateChanged"],[3528,26,2948,26,"beforeAuthStateChanged"],[3528,27,2948,27,"callback"],[3528,35,2948,35],[3528,37,2948,37,"onAbort"],[3528,44,2948,44],[3528,46,2948,46],[3529,6,2949,8],[3529,13,2949,15],[3529,17,2949,19],[3529,18,2949,20,"beforeStateQueue"],[3529,34,2949,36],[3529,35,2949,37,"pushCallback"],[3529,47,2949,49],[3529,48,2949,50,"callback"],[3529,56,2949,58],[3529,58,2949,60,"onAbort"],[3529,65,2949,67],[3529,66,2949,68],[3530,4,2950,4],[3531,4,2951,4,"onIdTokenChanged"],[3531,20,2951,20,"onIdTokenChanged"],[3531,21,2951,21,"nextOrObserver"],[3531,35,2951,35],[3531,37,2951,37,"error"],[3531,42,2951,42],[3531,44,2951,44,"completed"],[3531,53,2951,53],[3531,55,2951,55],[3532,6,2952,8],[3532,13,2952,15],[3532,17,2952,19],[3532,18,2952,20,"registerStateListener"],[3532,39,2952,41],[3532,40,2952,42],[3532,44,2952,46],[3532,45,2952,47,"idTokenSubscription"],[3532,64,2952,66],[3532,66,2952,68,"nextOrObserver"],[3532,80,2952,82],[3532,82,2952,84,"error"],[3532,87,2952,89],[3532,89,2952,91,"completed"],[3532,98,2952,100],[3532,99,2952,101],[3533,4,2953,4],[3534,4,2954,4,"authStateReady"],[3534,18,2954,18,"authStateReady"],[3534,19,2954,18],[3534,21,2954,21],[3535,6,2955,8],[3535,13,2955,15],[3535,17,2955,19,"Promise"],[3535,24,2955,26],[3535,25,2955,27],[3535,26,2955,28,"resolve"],[3535,33,2955,35],[3535,35,2955,37,"reject"],[3535,41,2955,43],[3535,46,2955,48],[3536,8,2956,12],[3536,12,2956,16],[3536,16,2956,20],[3536,17,2956,21,"currentUser"],[3536,28,2956,32],[3536,30,2956,34],[3537,10,2957,16,"resolve"],[3537,17,2957,23],[3537,18,2957,24],[3537,19,2957,25],[3538,8,2958,12],[3538,9,2958,13],[3538,15,2959,17],[3539,10,2960,16],[3539,16,2960,22,"unsubscribe"],[3539,27,2960,33],[3539,30,2960,36],[3539,34,2960,40],[3539,35,2960,41,"onAuthStateChanged"],[3539,53,2960,59],[3539,54,2960,60],[3539,60,2960,66],[3540,12,2961,20,"unsubscribe"],[3540,23,2961,31],[3540,24,2961,32],[3540,25,2961,33],[3541,12,2962,20,"resolve"],[3541,19,2962,27],[3541,20,2962,28],[3541,21,2962,29],[3542,10,2963,16],[3542,11,2963,17],[3542,13,2963,19,"reject"],[3542,19,2963,25],[3542,20,2963,26],[3543,8,2964,12],[3544,6,2965,8],[3544,7,2965,9],[3544,8,2965,10],[3545,4,2966,4],[3546,4,2967,4],[3547,0,2968,0],[3548,0,2969,0],[3549,4,2970,4],[3549,10,2970,10,"revokeAccessToken"],[3549,27,2970,27,"revokeAccessToken"],[3549,28,2970,28,"token"],[3549,33,2970,33],[3549,35,2970,35],[3550,6,2971,8],[3550,10,2971,12],[3550,14,2971,16],[3550,15,2971,17,"currentUser"],[3550,26,2971,28],[3550,28,2971,30],[3551,8,2972,12],[3551,14,2972,18,"idToken"],[3551,21,2972,25],[3551,24,2972,28],[3551,30,2972,34],[3551,34,2972,38],[3551,35,2972,39,"currentUser"],[3551,46,2972,50],[3551,47,2972,51,"getIdToken"],[3551,57,2972,61],[3551,58,2972,62],[3551,59,2972,63],[3552,8,2973,12],[3553,8,2974,12],[3553,14,2974,18,"request"],[3553,21,2974,25],[3553,24,2974,28],[3554,10,2975,16,"providerId"],[3554,20,2975,26],[3554,22,2975,28],[3554,33,2975,39],[3555,10,2976,16,"tokenType"],[3555,19,2976,25],[3555,21,2976,27],[3555,35,2976,41],[3555,36,2976,42],[3556,10,2977,16,"token"],[3556,15,2977,21],[3557,10,2978,16,"idToken"],[3558,8,2979,12],[3558,9,2979,13],[3559,8,2980,12],[3559,12,2980,16],[3559,16,2980,20],[3559,17,2980,21,"tenantId"],[3559,25,2980,29],[3559,29,2980,33],[3559,33,2980,37],[3559,35,2980,39],[3560,10,2981,16,"request"],[3560,17,2981,23],[3560,18,2981,24,"tenantId"],[3560,26,2981,32],[3560,29,2981,35],[3560,33,2981,39],[3560,34,2981,40,"tenantId"],[3560,42,2981,48],[3561,8,2982,12],[3562,8,2983,12],[3562,14,2983,18,"revokeToken"],[3562,25,2983,29],[3562,26,2983,30],[3562,30,2983,34],[3562,32,2983,36,"request"],[3562,39,2983,43],[3562,40,2983,44],[3563,6,2984,8],[3564,4,2985,4],[3565,4,2986,4,"toJSON"],[3565,10,2986,10,"toJSON"],[3565,11,2986,10],[3565,13,2986,13],[3566,6,2987,8],[3566,13,2987,15],[3567,8,2988,12,"apiKey"],[3567,14,2988,18],[3567,16,2988,20],[3567,20,2988,24],[3567,21,2988,25,"config"],[3567,27,2988,31],[3567,28,2988,32,"apiKey"],[3567,34,2988,38],[3568,8,2989,12,"authDomain"],[3568,18,2989,22],[3568,20,2989,24],[3568,24,2989,28],[3568,25,2989,29,"config"],[3568,31,2989,35],[3568,32,2989,36,"authDomain"],[3568,42,2989,46],[3569,8,2990,12,"appName"],[3569,15,2990,19],[3569,17,2990,21],[3569,21,2990,25],[3569,22,2990,26,"name"],[3569,26,2990,30],[3570,8,2991,12,"currentUser"],[3570,19,2991,23],[3570,21,2991,25],[3570,25,2991,29],[3570,26,2991,30,"_currentUser"],[3570,38,2991,42],[3570,40,2991,44,"toJSON"],[3570,46,2991,50],[3570,47,2991,51],[3571,6,2992,8],[3571,7,2992,9],[3572,4,2993,4],[3573,4,2994,4],[3573,10,2994,10,"_setRedirectUser"],[3573,26,2994,26,"_setRedirectUser"],[3573,27,2994,27,"user"],[3573,31,2994,31],[3573,33,2994,33,"popupRedirectResolver"],[3573,54,2994,54],[3573,56,2994,56],[3574,6,2995,8],[3574,12,2995,14,"redirectManager"],[3574,27,2995,29],[3574,30,2995,32],[3574,36,2995,38],[3574,40,2995,42],[3574,41,2995,43,"getOrInitRedirectPersistenceManager"],[3574,76,2995,78],[3574,77,2995,79,"popupRedirectResolver"],[3574,98,2995,100],[3574,99,2995,101],[3575,6,2996,8],[3575,13,2996,15,"user"],[3575,17,2996,19],[3575,22,2996,24],[3575,26,2996,28],[3575,29,2997,14,"redirectManager"],[3575,44,2997,29],[3575,45,2997,30,"removeCurrentUser"],[3575,62,2997,47],[3575,63,2997,48],[3575,64,2997,49],[3575,67,2998,14,"redirectManager"],[3575,82,2998,29],[3575,83,2998,30,"setCurrentUser"],[3575,97,2998,44],[3575,98,2998,45,"user"],[3575,102,2998,49],[3575,103,2998,50],[3576,4,2999,4],[3577,4,3000,4],[3577,10,3000,10,"getOrInitRedirectPersistenceManager"],[3577,45,3000,45,"getOrInitRedirectPersistenceManager"],[3577,46,3000,46,"popupRedirectResolver"],[3577,67,3000,67],[3577,69,3000,69],[3578,6,3001,8],[3578,10,3001,12],[3578,11,3001,13],[3578,15,3001,17],[3578,16,3001,18,"redirectPersistenceManager"],[3578,42,3001,44],[3578,44,3001,46],[3579,8,3002,12],[3579,14,3002,18,"resolver"],[3579,22,3002,26],[3579,25,3002,30,"popupRedirectResolver"],[3579,46,3002,51],[3579,50,3002,55,"_getInstance"],[3579,62,3002,67],[3579,63,3002,68,"popupRedirectResolver"],[3579,84,3002,89],[3579,85,3002,90],[3579,89,3003,16],[3579,93,3003,20],[3579,94,3003,21,"_popupRedirectResolver"],[3579,116,3003,43],[3580,8,3004,12,"_assert"],[3580,15,3004,19],[3580,16,3004,20,"resolver"],[3580,24,3004,28],[3580,26,3004,30],[3580,30,3004,34],[3580,32,3004,36],[3580,48,3004,52],[3580,49,3004,53],[3580,83,3004,87],[3580,84,3004,88],[3581,8,3005,12],[3581,12,3005,16],[3581,13,3005,17,"redirectPersistenceManager"],[3581,39,3005,43],[3581,42,3005,46],[3581,48,3005,52,"PersistenceUserManager"],[3581,70,3005,74],[3581,71,3005,75,"create"],[3581,77,3005,81],[3581,78,3005,82],[3581,82,3005,86],[3581,84,3005,88],[3581,85,3005,89,"_getInstance"],[3581,97,3005,101],[3581,98,3005,102,"resolver"],[3581,106,3005,110],[3581,107,3005,111,"_redirectPersistence"],[3581,127,3005,131],[3581,128,3005,132],[3581,129,3005,133],[3581,131,3005,135],[3581,145,3005,149],[3581,146,3005,150],[3581,173,3005,177],[3581,174,3005,178],[3582,8,3006,12],[3582,12,3006,16],[3582,13,3006,17,"redirectUser"],[3582,25,3006,29],[3582,28,3007,16],[3582,34,3007,22],[3582,38,3007,26],[3582,39,3007,27,"redirectPersistenceManager"],[3582,65,3007,53],[3582,66,3007,54,"getCurrentUser"],[3582,80,3007,68],[3582,81,3007,69],[3582,82,3007,70],[3583,6,3008,8],[3584,6,3009,8],[3584,13,3009,15],[3584,17,3009,19],[3584,18,3009,20,"redirectPersistenceManager"],[3584,44,3009,46],[3585,4,3010,4],[3586,4,3011,4],[3586,10,3011,10,"_redirectUserForId"],[3586,28,3011,28,"_redirectUserForId"],[3586,29,3011,29,"id"],[3586,31,3011,31],[3586,33,3011,33],[3587,6,3012,8],[3588,6,3013,8],[3589,6,3014,8],[3589,10,3014,12],[3589,14,3014,16],[3589,15,3014,17,"_isInitialized"],[3589,29,3014,31],[3589,31,3014,33],[3590,8,3015,12],[3590,14,3015,18],[3590,18,3015,22],[3590,19,3015,23,"queue"],[3590,24,3015,28],[3590,25,3015,29],[3590,37,3015,41],[3590,38,3015,43],[3590,39,3015,44],[3590,40,3015,45],[3591,6,3016,8],[3592,6,3017,8],[3592,10,3017,12],[3592,14,3017,16],[3592,15,3017,17,"_currentUser"],[3592,27,3017,29],[3592,29,3017,31,"_redirectEventId"],[3592,45,3017,47],[3592,50,3017,52,"id"],[3592,52,3017,54],[3592,54,3017,56],[3593,8,3018,12],[3593,15,3018,19],[3593,19,3018,23],[3593,20,3018,24,"_currentUser"],[3593,32,3018,36],[3594,6,3019,8],[3595,6,3020,8],[3595,10,3020,12],[3595,14,3020,16],[3595,15,3020,17,"redirectUser"],[3595,27,3020,29],[3595,29,3020,31,"_redirectEventId"],[3595,45,3020,47],[3595,50,3020,52,"id"],[3595,52,3020,54],[3595,54,3020,56],[3596,8,3021,12],[3596,15,3021,19],[3596,19,3021,23],[3596,20,3021,24,"redirectUser"],[3596,32,3021,36],[3597,6,3022,8],[3598,6,3023,8],[3598,13,3023,15],[3598,17,3023,19],[3599,4,3024,4],[3600,4,3025,4],[3600,10,3025,10,"_persistUserIfCurrent"],[3600,31,3025,31,"_persistUserIfCurrent"],[3600,32,3025,32,"user"],[3600,36,3025,36],[3600,38,3025,38],[3601,6,3026,8],[3601,10,3026,12,"user"],[3601,14,3026,16],[3601,19,3026,21],[3601,23,3026,25],[3601,24,3026,26,"currentUser"],[3601,35,3026,37],[3601,37,3026,39],[3602,8,3027,12],[3602,15,3027,19],[3602,19,3027,23],[3602,20,3027,24,"queue"],[3602,25,3027,29],[3602,26,3027,30],[3602,38,3027,42],[3602,42,3027,46],[3602,43,3027,47,"directlySetCurrentUser"],[3602,65,3027,69],[3602,66,3027,70,"user"],[3602,70,3027,74],[3602,71,3027,75],[3602,72,3027,76],[3603,6,3028,8],[3604,4,3029,4],[3605,4,3030,4],[3606,4,3031,4,"_notifyListenersIfCurrent"],[3606,29,3031,29,"_notifyListenersIfCurrent"],[3606,30,3031,30,"user"],[3606,34,3031,34],[3606,36,3031,36],[3607,6,3032,8],[3607,10,3032,12,"user"],[3607,14,3032,16],[3607,19,3032,21],[3607,23,3032,25],[3607,24,3032,26,"currentUser"],[3607,35,3032,37],[3607,37,3032,39],[3608,8,3033,12],[3608,12,3033,16],[3608,13,3033,17,"notifyAuthListeners"],[3608,32,3033,36],[3608,33,3033,37],[3608,34,3033,38],[3609,6,3034,8],[3610,4,3035,4],[3611,4,3036,4,"_key"],[3611,8,3036,8,"_key"],[3611,9,3036,8],[3611,11,3036,11],[3612,6,3037,8],[3612,13,3037,15],[3612,16,3037,18],[3612,20,3037,22],[3612,21,3037,23,"config"],[3612,27,3037,29],[3612,28,3037,30,"authDomain"],[3612,38,3037,40],[3612,42,3037,44],[3612,46,3037,48],[3612,47,3037,49,"config"],[3612,53,3037,55],[3612,54,3037,56,"apiKey"],[3612,60,3037,62],[3612,64,3037,66],[3612,68,3037,70],[3612,69,3037,71,"name"],[3612,73,3037,75],[3612,75,3037,77],[3613,4,3038,4],[3614,4,3039,4,"_startProactiveRefresh"],[3614,26,3039,26,"_startProactiveRefresh"],[3614,27,3039,26],[3614,29,3039,29],[3615,6,3040,8],[3615,10,3040,12],[3615,11,3040,13,"isProactiveRefreshEnabled"],[3615,36,3040,38],[3615,39,3040,41],[3615,43,3040,45],[3616,6,3041,8],[3616,10,3041,12],[3616,14,3041,16],[3616,15,3041,17,"currentUser"],[3616,26,3041,28],[3616,28,3041,30],[3617,8,3042,12],[3617,12,3042,16],[3617,13,3042,17,"_currentUser"],[3617,25,3042,29],[3617,26,3042,30,"_startProactiveRefresh"],[3617,48,3042,52],[3617,49,3042,53],[3617,50,3042,54],[3618,6,3043,8],[3619,4,3044,4],[3620,4,3045,4,"_stopProactiveRefresh"],[3620,25,3045,25,"_stopProactiveRefresh"],[3620,26,3045,25],[3620,28,3045,28],[3621,6,3046,8],[3621,10,3046,12],[3621,11,3046,13,"isProactiveRefreshEnabled"],[3621,36,3046,38],[3621,39,3046,41],[3621,44,3046,46],[3622,6,3047,8],[3622,10,3047,12],[3622,14,3047,16],[3622,15,3047,17,"currentUser"],[3622,26,3047,28],[3622,28,3047,30],[3623,8,3048,12],[3623,12,3048,16],[3623,13,3048,17,"_currentUser"],[3623,25,3048,29],[3623,26,3048,30,"_stopProactiveRefresh"],[3623,47,3048,51],[3623,48,3048,52],[3623,49,3048,53],[3624,6,3049,8],[3625,4,3050,4],[3626,4,3051,4],[3627,4,3052,4],[3627,8,3052,8,"_currentUser"],[3627,20,3052,20,"_currentUser"],[3627,21,3052,20],[3627,23,3052,23],[3628,6,3053,8],[3628,13,3053,15],[3628,17,3053,19],[3628,18,3053,20,"currentUser"],[3628,29,3053,31],[3629,4,3054,4],[3630,4,3055,4,"notifyAuthListeners"],[3630,23,3055,23,"notifyAuthListeners"],[3630,24,3055,23],[3630,26,3055,26],[3631,6,3056,8],[3631,10,3056,12],[3631,11,3056,13],[3631,15,3056,17],[3631,16,3056,18,"_isInitialized"],[3631,30,3056,32],[3631,32,3056,34],[3632,8,3057,12],[3633,6,3058,8],[3634,6,3059,8],[3634,10,3059,12],[3634,11,3059,13,"idTokenSubscription"],[3634,30,3059,32],[3634,31,3059,33,"next"],[3634,35,3059,37],[3634,36,3059,38],[3634,40,3059,42],[3634,41,3059,43,"currentUser"],[3634,52,3059,54],[3634,53,3059,55],[3635,6,3060,8],[3635,12,3060,14,"currentUid"],[3635,22,3060,24],[3635,25,3060,27],[3635,29,3060,31],[3635,30,3060,32,"currentUser"],[3635,41,3060,43],[3635,43,3060,45,"uid"],[3635,46,3060,48],[3635,50,3060,52],[3635,54,3060,56],[3636,6,3061,8],[3636,10,3061,12],[3636,14,3061,16],[3636,15,3061,17,"lastNotifiedUid"],[3636,30,3061,32],[3636,35,3061,37,"currentUid"],[3636,45,3061,47],[3636,47,3061,49],[3637,8,3062,12],[3637,12,3062,16],[3637,13,3062,17,"lastNotifiedUid"],[3637,28,3062,32],[3637,31,3062,35,"currentUid"],[3637,41,3062,45],[3638,8,3063,12],[3638,12,3063,16],[3638,13,3063,17,"authStateSubscription"],[3638,34,3063,38],[3638,35,3063,39,"next"],[3638,39,3063,43],[3638,40,3063,44],[3638,44,3063,48],[3638,45,3063,49,"currentUser"],[3638,56,3063,60],[3638,57,3063,61],[3639,6,3064,8],[3640,4,3065,4],[3641,4,3066,4,"registerStateListener"],[3641,25,3066,25,"registerStateListener"],[3641,26,3066,26,"subscription"],[3641,38,3066,38],[3641,40,3066,40,"nextOrObserver"],[3641,54,3066,54],[3641,56,3066,56,"error"],[3641,61,3066,61],[3641,63,3066,63,"completed"],[3641,72,3066,72],[3641,74,3066,74],[3642,6,3067,8],[3642,10,3067,12],[3642,14,3067,16],[3642,15,3067,17,"_deleted"],[3642,23,3067,25],[3642,25,3067,27],[3643,8,3068,12],[3643,15,3068,19],[3643,21,3068,25],[3643,22,3068,27],[3643,23,3068,28],[3644,6,3069,8],[3645,6,3070,8],[3645,12,3070,14,"cb"],[3645,14,3070,16],[3645,17,3070,19],[3645,24,3070,26,"nextOrObserver"],[3645,38,3070,40],[3645,43,3070,45],[3645,53,3070,55],[3645,56,3071,14,"nextOrObserver"],[3645,70,3071,28],[3645,73,3072,14,"nextOrObserver"],[3645,87,3072,28],[3645,88,3072,29,"next"],[3645,92,3072,33],[3645,93,3072,34,"bind"],[3645,97,3072,38],[3645,98,3072,39,"nextOrObserver"],[3645,112,3072,53],[3645,113,3072,54],[3646,6,3073,8],[3646,10,3073,12,"isUnsubscribed"],[3646,24,3073,26],[3646,27,3073,29],[3646,32,3073,34],[3647,6,3074,8],[3647,12,3074,14,"promise"],[3647,19,3074,21],[3647,22,3074,24],[3647,26,3074,28],[3647,27,3074,29,"_isInitialized"],[3647,41,3074,43],[3647,44,3075,14,"Promise"],[3647,51,3075,21],[3647,52,3075,22,"resolve"],[3647,59,3075,29],[3647,60,3075,30],[3647,61,3075,31],[3647,64,3076,14],[3647,68,3076,18],[3647,69,3076,19,"_initializationPromise"],[3647,91,3076,41],[3648,6,3077,8,"_assert"],[3648,13,3077,15],[3648,14,3077,16,"promise"],[3648,21,3077,23],[3648,23,3077,25],[3648,27,3077,29],[3648,29,3077,31],[3648,45,3077,47],[3648,46,3077,48],[3648,80,3077,82],[3648,81,3077,83],[3649,6,3078,8],[3650,6,3079,8],[3651,6,3080,8,"promise"],[3651,13,3080,15],[3651,14,3080,16,"then"],[3651,18,3080,20],[3651,19,3080,21],[3651,25,3080,27],[3652,8,3081,12],[3652,12,3081,16,"isUnsubscribed"],[3652,26,3081,30],[3652,28,3081,32],[3653,10,3082,16],[3654,8,3083,12],[3655,8,3084,12,"cb"],[3655,10,3084,14],[3655,11,3084,15],[3655,15,3084,19],[3655,16,3084,20,"currentUser"],[3655,27,3084,31],[3655,28,3084,32],[3656,6,3085,8],[3656,7,3085,9],[3656,8,3085,10],[3657,6,3086,8],[3657,10,3086,12],[3657,17,3086,19,"nextOrObserver"],[3657,31,3086,33],[3657,36,3086,38],[3657,46,3086,48],[3657,48,3086,50],[3658,8,3087,12],[3658,14,3087,18,"unsubscribe"],[3658,25,3087,29],[3658,28,3087,32,"subscription"],[3658,40,3087,44],[3658,41,3087,45,"addObserver"],[3658,52,3087,56],[3658,53,3087,57,"nextOrObserver"],[3658,67,3087,71],[3658,69,3087,73,"error"],[3658,74,3087,78],[3658,76,3087,80,"completed"],[3658,85,3087,89],[3658,86,3087,90],[3659,8,3088,12],[3659,15,3088,19],[3659,21,3088,25],[3660,10,3089,16,"isUnsubscribed"],[3660,24,3089,30],[3660,27,3089,33],[3660,31,3089,37],[3661,10,3090,16,"unsubscribe"],[3661,21,3090,27],[3661,22,3090,28],[3661,23,3090,29],[3662,8,3091,12],[3662,9,3091,13],[3663,6,3092,8],[3663,7,3092,9],[3663,13,3093,13],[3664,8,3094,12],[3664,14,3094,18,"unsubscribe"],[3664,25,3094,29],[3664,28,3094,32,"subscription"],[3664,40,3094,44],[3664,41,3094,45,"addObserver"],[3664,52,3094,56],[3664,53,3094,57,"nextOrObserver"],[3664,67,3094,71],[3664,68,3094,72],[3665,8,3095,12],[3665,15,3095,19],[3665,21,3095,25],[3666,10,3096,16,"isUnsubscribed"],[3666,24,3096,30],[3666,27,3096,33],[3666,31,3096,37],[3667,10,3097,16,"unsubscribe"],[3667,21,3097,27],[3667,22,3097,28],[3667,23,3097,29],[3668,8,3098,12],[3668,9,3098,13],[3669,6,3099,8],[3670,4,3100,4],[3671,4,3101,4],[3672,0,3102,0],[3673,0,3103,0],[3674,0,3104,0],[3675,0,3105,0],[3676,4,3106,4],[3676,10,3106,10,"directlySetCurrentUser"],[3676,32,3106,32,"directlySetCurrentUser"],[3676,33,3106,33,"user"],[3676,37,3106,37],[3676,39,3106,39],[3677,6,3107,8],[3677,10,3107,12],[3677,14,3107,16],[3677,15,3107,17,"currentUser"],[3677,26,3107,28],[3677,30,3107,32],[3677,34,3107,36],[3677,35,3107,37,"currentUser"],[3677,46,3107,48],[3677,51,3107,53,"user"],[3677,55,3107,57],[3677,57,3107,59],[3678,8,3108,12],[3678,12,3108,16],[3678,13,3108,17,"_currentUser"],[3678,25,3108,29],[3678,26,3108,30,"_stopProactiveRefresh"],[3678,47,3108,51],[3678,48,3108,52],[3678,49,3108,53],[3679,6,3109,8],[3680,6,3110,8],[3680,10,3110,12,"user"],[3680,14,3110,16],[3680,18,3110,20],[3680,22,3110,24],[3680,23,3110,25,"isProactiveRefreshEnabled"],[3680,48,3110,50],[3680,50,3110,52],[3681,8,3111,12,"user"],[3681,12,3111,16],[3681,13,3111,17,"_startProactiveRefresh"],[3681,35,3111,39],[3681,36,3111,40],[3681,37,3111,41],[3682,6,3112,8],[3683,6,3113,8],[3683,10,3113,12],[3683,11,3113,13,"currentUser"],[3683,22,3113,24],[3683,25,3113,27,"user"],[3683,29,3113,31],[3684,6,3114,8],[3684,10,3114,12,"user"],[3684,14,3114,16],[3684,16,3114,18],[3685,8,3115,12],[3685,14,3115,18],[3685,18,3115,22],[3685,19,3115,23,"assertedPersistence"],[3685,38,3115,42],[3685,39,3115,43,"setCurrentUser"],[3685,53,3115,57],[3685,54,3115,58,"user"],[3685,58,3115,62],[3685,59,3115,63],[3686,6,3116,8],[3686,7,3116,9],[3686,13,3117,13],[3687,8,3118,12],[3687,14,3118,18],[3687,18,3118,22],[3687,19,3118,23,"assertedPersistence"],[3687,38,3118,42],[3687,39,3118,43,"removeCurrentUser"],[3687,56,3118,60],[3687,57,3118,61],[3687,58,3118,62],[3688,6,3119,8],[3689,4,3120,4],[3690,4,3121,4,"queue"],[3690,9,3121,9,"queue"],[3690,10,3121,10,"action"],[3690,16,3121,16],[3690,18,3121,18],[3691,6,3122,8],[3692,6,3123,8],[3693,6,3124,8],[3693,10,3124,12],[3693,11,3124,13,"operations"],[3693,21,3124,23],[3693,24,3124,26],[3693,28,3124,30],[3693,29,3124,31,"operations"],[3693,39,3124,41],[3693,40,3124,42,"then"],[3693,44,3124,46],[3693,45,3124,47,"action"],[3693,51,3124,53],[3693,53,3124,55,"action"],[3693,59,3124,61],[3693,60,3124,62],[3694,6,3125,8],[3694,13,3125,15],[3694,17,3125,19],[3694,18,3125,20,"operations"],[3694,28,3125,30],[3695,4,3126,4],[3696,4,3127,4],[3696,8,3127,8,"assertedPersistence"],[3696,27,3127,27,"assertedPersistence"],[3696,28,3127,27],[3696,30,3127,30],[3697,6,3128,8,"_assert"],[3697,13,3128,15],[3697,14,3128,16],[3697,18,3128,20],[3697,19,3128,21,"persistenceManager"],[3697,37,3128,39],[3697,39,3128,41],[3697,43,3128,45],[3697,45,3128,47],[3697,61,3128,63],[3697,62,3128,64],[3697,96,3128,98],[3697,97,3128,99],[3698,6,3129,8],[3698,13,3129,15],[3698,17,3129,19],[3698,18,3129,20,"persistenceManager"],[3698,36,3129,38],[3699,4,3130,4],[3700,4,3131,4,"_logFramework"],[3700,17,3131,17,"_logFramework"],[3700,18,3131,18,"framework"],[3700,27,3131,27],[3700,29,3131,29],[3701,6,3132,8],[3701,10,3132,12],[3701,11,3132,13,"framework"],[3701,20,3132,22],[3701,24,3132,26],[3701,28,3132,30],[3701,29,3132,31,"frameworks"],[3701,39,3132,41],[3701,40,3132,42,"includes"],[3701,48,3132,50],[3701,49,3132,51,"framework"],[3701,58,3132,60],[3701,59,3132,61],[3701,61,3132,63],[3702,8,3133,12],[3703,6,3134,8],[3704,6,3135,8],[3704,10,3135,12],[3704,11,3135,13,"frameworks"],[3704,21,3135,23],[3704,22,3135,24,"push"],[3704,26,3135,28],[3704,27,3135,29,"framework"],[3704,36,3135,38],[3704,37,3135,39],[3705,6,3136,8],[3706,6,3137,8],[3707,6,3138,8],[3707,10,3138,12],[3707,11,3138,13,"frameworks"],[3707,21,3138,23],[3707,22,3138,24,"sort"],[3707,26,3138,28],[3707,27,3138,29],[3707,28,3138,30],[3708,6,3139,8],[3708,10,3139,12],[3708,11,3139,13,"clientVersion"],[3708,24,3139,26],[3708,27,3139,29,"_getClientVersion"],[3708,44,3139,46],[3708,45,3139,47],[3708,49,3139,51],[3708,50,3139,52,"config"],[3708,56,3139,58],[3708,57,3139,59,"clientPlatform"],[3708,71,3139,73],[3708,73,3139,75],[3708,77,3139,79],[3708,78,3139,80,"_getFrameworks"],[3708,92,3139,94],[3708,93,3139,95],[3708,94,3139,96],[3708,95,3139,97],[3709,4,3140,4],[3710,4,3141,4,"_getFrameworks"],[3710,18,3141,18,"_getFrameworks"],[3710,19,3141,18],[3710,21,3141,21],[3711,6,3142,8],[3711,13,3142,15],[3711,17,3142,19],[3711,18,3142,20,"frameworks"],[3711,28,3142,30],[3712,4,3143,4],[3713,4,3144,4],[3713,10,3144,10,"_getAdditionalHeaders"],[3713,31,3144,31,"_getAdditionalHeaders"],[3713,32,3144,31],[3713,34,3144,34],[3714,6,3145,8],[3715,6,3146,8],[3715,12,3146,14,"headers"],[3715,19,3146,21],[3715,22,3146,24],[3716,8,3147,12],[3716,9,3147,13],[3716,27,3147,31],[3716,28,3147,32],[3716,64,3147,68],[3716,68,3147,72],[3716,69,3147,73,"clientVersion"],[3717,6,3148,8],[3717,7,3148,9],[3718,6,3149,8],[3718,10,3149,12],[3718,14,3149,16],[3718,15,3149,17,"app"],[3718,18,3149,20],[3718,19,3149,21,"options"],[3718,26,3149,28],[3718,27,3149,29,"appId"],[3718,32,3149,34],[3718,34,3149,36],[3719,8,3150,12,"headers"],[3719,15,3150,19],[3719,16,3150,20],[3719,34,3150,38],[3719,35,3150,39],[3719,69,3150,73],[3719,72,3150,76],[3719,76,3150,80],[3719,77,3150,81,"app"],[3719,80,3150,84],[3719,81,3150,85,"options"],[3719,88,3150,92],[3719,89,3150,93,"appId"],[3719,94,3150,98],[3720,6,3151,8],[3721,6,3152,8],[3722,6,3153,8],[3722,12,3153,14,"heartbeatsHeader"],[3722,28,3153,30],[3722,31,3153,33],[3722,37,3153,39],[3722,41,3153,43],[3722,42,3153,44,"heartbeatServiceProvider"],[3722,66,3153,68],[3722,67,3154,13,"getImmediate"],[3722,79,3154,25],[3722,80,3154,26],[3723,8,3155,12,"optional"],[3723,16,3155,20],[3723,18,3155,22],[3724,6,3156,8],[3724,7,3156,9],[3724,8,3156,10],[3724,10,3157,14,"getHeartbeatsHeader"],[3724,29,3157,33],[3724,30,3157,34],[3724,31,3157,35],[3725,6,3158,8],[3725,10,3158,12,"heartbeatsHeader"],[3725,26,3158,28],[3725,28,3158,30],[3726,8,3159,12,"headers"],[3726,15,3159,19],[3726,16,3159,20],[3726,35,3159,39],[3726,36,3159,40],[3726,71,3159,75],[3726,74,3159,78,"heartbeatsHeader"],[3726,90,3159,94],[3727,6,3160,8],[3728,6,3161,8],[3729,6,3162,8],[3729,12,3162,14,"appCheckToken"],[3729,25,3162,27],[3729,28,3162,30],[3729,34,3162,36],[3729,38,3162,40],[3729,39,3162,41,"_getAppCheckToken"],[3729,56,3162,58],[3729,57,3162,59],[3729,58,3162,60],[3730,6,3163,8],[3730,10,3163,12,"appCheckToken"],[3730,23,3163,25],[3730,25,3163,27],[3731,8,3164,12,"headers"],[3731,15,3164,19],[3731,16,3164,20],[3731,37,3164,41],[3731,38,3164,42],[3731,76,3164,80],[3731,79,3164,83,"appCheckToken"],[3731,92,3164,96],[3732,6,3165,8],[3733,6,3166,8],[3733,13,3166,15,"headers"],[3733,20,3166,22],[3734,4,3167,4],[3735,4,3168,4],[3735,10,3168,10,"_getAppCheckToken"],[3735,27,3168,27,"_getAppCheckToken"],[3735,28,3168,27],[3735,30,3168,30],[3736,6,3169,8],[3736,10,3169,12],[3736,14,3169,12,"_isFirebaseServerApp"],[3736,26,3169,32],[3736,27,3169,32,"_isFirebaseServerApp"],[3736,47,3169,32],[3736,49,3169,33],[3736,53,3169,37],[3736,54,3169,38,"app"],[3736,57,3169,41],[3736,58,3169,42],[3736,62,3169,46],[3736,66,3169,50],[3736,67,3169,51,"app"],[3736,70,3169,54],[3736,71,3169,55,"settings"],[3736,79,3169,63],[3736,80,3169,64,"appCheckToken"],[3736,93,3169,77],[3736,95,3169,79],[3737,8,3170,12],[3737,15,3170,19],[3737,19,3170,23],[3737,20,3170,24,"app"],[3737,23,3170,27],[3737,24,3170,28,"settings"],[3737,32,3170,36],[3737,33,3170,37,"appCheckToken"],[3737,46,3170,50],[3738,6,3171,8],[3739,6,3172,8],[3739,12,3172,14,"appCheckTokenResult"],[3739,31,3172,33],[3739,34,3172,36],[3739,40,3172,42],[3739,44,3172,46],[3739,45,3172,47,"appCheckServiceProvider"],[3739,68,3172,70],[3739,69,3173,13,"getImmediate"],[3739,81,3173,25],[3739,82,3173,26],[3740,8,3173,28,"optional"],[3740,16,3173,36],[3740,18,3173,38],[3741,6,3173,43],[3741,7,3173,44],[3741,8,3173,45],[3741,10,3174,14,"getToken"],[3741,18,3174,22],[3741,19,3174,23],[3741,20,3174,24],[3742,6,3175,8],[3742,10,3175,12,"appCheckTokenResult"],[3742,29,3175,31],[3742,31,3175,33,"error"],[3742,36,3175,38],[3742,38,3175,40],[3743,8,3176,12],[3744,8,3177,12],[3745,8,3178,12],[3746,8,3179,12],[3747,8,3180,12,"_logWarn"],[3747,16,3180,20],[3747,17,3180,21],[3747,60,3180,64,"appCheckTokenResult"],[3747,79,3180,83],[3747,80,3180,84,"error"],[3747,85,3180,89],[3747,87,3180,91],[3747,88,3180,92],[3748,6,3181,8],[3749,6,3182,8],[3749,13,3182,15,"appCheckTokenResult"],[3749,32,3182,34],[3749,34,3182,36,"token"],[3749,39,3182,41],[3750,4,3183,4],[3751,2,3184,0],[3752,2,3185,0],[3753,0,3186,0],[3754,0,3187,0],[3755,0,3188,0],[3756,0,3189,0],[3757,0,3190,0],[3758,2,3191,0],[3758,11,3191,9,"_castAuth"],[3758,20,3191,18,"_castAuth"],[3758,21,3191,19,"auth"],[3758,25,3191,23],[3758,27,3191,25],[3759,4,3192,4],[3759,11,3192,11],[3759,15,3192,11,"getModularInstance"],[3759,28,3192,29],[3759,29,3192,29,"getModularInstance"],[3759,47,3192,29],[3759,49,3192,30,"auth"],[3759,53,3192,34],[3759,54,3192,35],[3760,2,3193,0],[3761,2,3194,0],[3762,2,3195,0],[3762,8,3195,6,"Subscription"],[3762,20,3195,18],[3762,21,3195,19],[3763,4,3196,4,"constructor"],[3763,15,3196,15,"constructor"],[3763,16,3196,16,"auth"],[3763,20,3196,20],[3763,22,3196,22],[3764,6,3197,8],[3764,10,3197,12],[3764,11,3197,13,"auth"],[3764,15,3197,17],[3764,18,3197,20,"auth"],[3764,22,3197,24],[3765,6,3198,8],[3765,10,3198,12],[3765,11,3198,13,"observer"],[3765,19,3198,21],[3765,22,3198,24],[3765,26,3198,28],[3766,6,3199,8],[3766,10,3199,12],[3766,11,3199,13,"addObserver"],[3766,22,3199,24],[3766,25,3199,27],[3766,29,3199,27,"createSubscribe"],[3766,42,3199,42],[3766,43,3199,42,"createSubscribe"],[3766,58,3199,42],[3766,60,3199,43,"observer"],[3766,68,3199,51],[3766,72,3199,56],[3766,76,3199,60],[3766,77,3199,61,"observer"],[3766,85,3199,69],[3766,88,3199,72,"observer"],[3766,96,3199,81],[3766,97,3199,82],[3767,4,3200,4],[3768,4,3201,4],[3768,8,3201,8,"next"],[3768,12,3201,12,"next"],[3768,13,3201,12],[3768,15,3201,15],[3769,6,3202,8,"_assert"],[3769,13,3202,15],[3769,14,3202,16],[3769,18,3202,20],[3769,19,3202,21,"observer"],[3769,27,3202,29],[3769,29,3202,31],[3769,33,3202,35],[3769,34,3202,36,"auth"],[3769,38,3202,40],[3769,40,3202,42],[3769,56,3202,58],[3769,57,3202,59],[3769,91,3202,93],[3769,92,3202,94],[3770,6,3203,8],[3770,13,3203,15],[3770,17,3203,19],[3770,18,3203,20,"observer"],[3770,26,3203,28],[3770,27,3203,29,"next"],[3770,31,3203,33],[3770,32,3203,34,"bind"],[3770,36,3203,38],[3770,37,3203,39],[3770,41,3203,43],[3770,42,3203,44,"observer"],[3770,50,3203,52],[3770,51,3203,53],[3771,4,3204,4],[3772,2,3205,0],[3774,2,3207,0],[3775,0,3208,0],[3776,0,3209,0],[3777,0,3210,0],[3778,0,3211,0],[3779,0,3212,0],[3780,0,3213,0],[3781,0,3214,0],[3782,0,3215,0],[3783,0,3216,0],[3784,0,3217,0],[3785,0,3218,0],[3786,0,3219,0],[3787,0,3220,0],[3788,0,3221,0],[3789,0,3222,0],[3790,2,3223,0],[3790,6,3223,4,"externalJSProvider"],[3790,24,3223,22],[3790,27,3223,25],[3791,4,3224,4],[3791,10,3224,10,"loadJS"],[3791,16,3224,16,"loadJS"],[3791,17,3224,16],[3791,19,3224,19],[3792,6,3225,8],[3792,12,3225,14],[3792,16,3225,18,"Error"],[3792,21,3225,23],[3792,22,3225,24],[3792,55,3225,57],[3792,56,3225,58],[3793,4,3226,4],[3793,5,3226,5],[3794,4,3227,4,"recaptchaV2Script"],[3794,21,3227,21],[3794,23,3227,23],[3794,25,3227,25],[3795,4,3228,4,"recaptchaEnterpriseScript"],[3795,29,3228,29],[3795,31,3228,31],[3795,33,3228,33],[3796,4,3229,4,"gapiScript"],[3796,14,3229,14],[3796,16,3229,16],[3797,2,3230,0],[3797,3,3230,1],[3798,2,3231,0],[3798,11,3231,9,"_loadJS"],[3798,18,3231,16,"_loadJS"],[3798,19,3231,17,"url"],[3798,22,3231,20],[3798,24,3231,22],[3799,4,3232,4],[3799,11,3232,11,"externalJSProvider"],[3799,29,3232,29],[3799,30,3232,30,"loadJS"],[3799,36,3232,36],[3799,37,3232,37,"url"],[3799,40,3232,40],[3799,41,3232,41],[3800,2,3233,0],[3801,2,3234,0],[3801,11,3234,9,"_recaptchaEnterpriseScriptUrl"],[3801,40,3234,38,"_recaptchaEnterpriseScriptUrl"],[3801,41,3234,38],[3801,43,3234,41],[3802,4,3235,4],[3802,11,3235,11,"externalJSProvider"],[3802,29,3235,29],[3802,30,3235,30,"recaptchaEnterpriseScript"],[3802,55,3235,55],[3803,2,3236,0],[3805,2,3238,0],[3806,0,3239,0],[3807,0,3240,0],[3808,0,3241,0],[3809,0,3242,0],[3810,0,3243,0],[3811,0,3244,0],[3812,0,3245,0],[3813,0,3246,0],[3814,0,3247,0],[3815,0,3248,0],[3816,0,3249,0],[3817,0,3250,0],[3818,0,3251,0],[3819,0,3252,0],[3820,0,3253,0],[3821,2,3254,0],[3821,8,3254,6,"MockGreCAPTCHATopLevel"],[3821,30,3254,28],[3821,31,3254,29],[3822,4,3255,4,"constructor"],[3822,15,3255,15,"constructor"],[3822,16,3255,15],[3822,18,3255,18],[3823,6,3256,8],[3823,10,3256,12],[3823,11,3256,13,"enterprise"],[3823,21,3256,23],[3823,24,3256,26],[3823,28,3256,30,"MockGreCAPTCHA"],[3823,42,3256,44],[3823,43,3256,45],[3823,44,3256,46],[3824,4,3257,4],[3825,4,3258,4,"ready"],[3825,9,3258,9,"ready"],[3825,10,3258,10,"callback"],[3825,18,3258,18],[3825,20,3258,20],[3826,6,3259,8,"callback"],[3826,14,3259,16],[3826,15,3259,17],[3826,16,3259,18],[3827,4,3260,4],[3828,4,3261,4,"execute"],[3828,11,3261,11,"execute"],[3829,4,3262,4],[3830,4,3263,4,"_siteKey"],[3830,12,3263,12],[3830,14,3263,14,"_options"],[3830,22,3263,22],[3830,24,3263,24],[3831,6,3264,8],[3831,13,3264,15,"Promise"],[3831,20,3264,22],[3831,21,3264,23,"resolve"],[3831,28,3264,30],[3831,29,3264,31],[3831,36,3264,38],[3831,37,3264,39],[3832,4,3265,4],[3833,4,3266,4,"render"],[3833,10,3266,10,"render"],[3834,4,3267,4],[3835,4,3268,4,"_container"],[3835,14,3268,14],[3835,16,3268,16,"_parameters"],[3835,27,3268,27],[3835,29,3268,29],[3836,6,3269,8],[3836,13,3269,15],[3836,15,3269,17],[3837,4,3270,4],[3838,2,3271,0],[3839,2,3272,0],[3839,8,3272,6,"MockGreCAPTCHA"],[3839,22,3272,20],[3839,23,3272,21],[3840,4,3273,4,"ready"],[3840,9,3273,9,"ready"],[3840,10,3273,10,"callback"],[3840,18,3273,18],[3840,20,3273,20],[3841,6,3274,8,"callback"],[3841,14,3274,16],[3841,15,3274,17],[3841,16,3274,18],[3842,4,3275,4],[3843,4,3276,4,"execute"],[3843,11,3276,11,"execute"],[3844,4,3277,4],[3845,4,3278,4,"_siteKey"],[3845,12,3278,12],[3845,14,3278,14,"_options"],[3845,22,3278,22],[3845,24,3278,24],[3846,6,3279,8],[3846,13,3279,15,"Promise"],[3846,20,3279,22],[3846,21,3279,23,"resolve"],[3846,28,3279,30],[3846,29,3279,31],[3846,36,3279,38],[3846,37,3279,39],[3847,4,3280,4],[3848,4,3281,4,"render"],[3848,10,3281,10,"render"],[3849,4,3282,4],[3850,4,3283,4,"_container"],[3850,14,3283,14],[3850,16,3283,16,"_parameters"],[3850,27,3283,27],[3850,29,3283,29],[3851,6,3284,8],[3851,13,3284,15],[3851,15,3284,17],[3852,4,3285,4],[3853,2,3286,0],[3855,2,3288,0],[3856,2,3289,0],[3856,8,3289,6,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3856,42,3289,40],[3856,45,3289,43],[3856,67,3289,65],[3857,2,3290,0],[3857,8,3290,6,"FAKE_TOKEN"],[3857,18,3290,16],[3857,21,3290,19],[3857,35,3290,33],[3858,2,3291,0],[3858,8,3291,6,"RecaptchaEnterpriseVerifier"],[3858,35,3291,33],[3858,36,3291,34],[3859,4,3292,4],[3860,0,3293,0],[3861,0,3294,0],[3862,0,3295,0],[3863,0,3296,0],[3864,4,3297,4,"constructor"],[3864,15,3297,15,"constructor"],[3864,16,3297,16,"authExtern"],[3864,26,3297,26],[3864,28,3297,28],[3865,6,3298,8],[3866,0,3299,0],[3867,0,3300,0],[3868,6,3301,8],[3868,10,3301,12],[3868,11,3301,13,"type"],[3868,15,3301,17],[3868,18,3301,20,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3868,52,3301,54],[3869,6,3302,8],[3869,10,3302,12],[3869,11,3302,13,"auth"],[3869,15,3302,17],[3869,18,3302,20,"_castAuth"],[3869,27,3302,29],[3869,28,3302,30,"authExtern"],[3869,38,3302,40],[3869,39,3302,41],[3870,4,3303,4],[3871,4,3304,4],[3872,0,3305,0],[3873,0,3306,0],[3874,0,3307,0],[3875,0,3308,0],[3876,4,3309,4],[3876,10,3309,10,"verify"],[3876,16,3309,16,"verify"],[3876,17,3309,17,"action"],[3876,23,3309,23],[3876,26,3309,26],[3876,34,3309,34],[3876,36,3309,36,"forceRefresh"],[3876,48,3309,48],[3876,51,3309,51],[3876,56,3309,56],[3876,58,3309,58],[3877,6,3310,8],[3877,21,3310,23,"retrieveSiteKey"],[3877,36,3310,38,"retrieveSiteKey"],[3877,37,3310,39,"auth"],[3877,41,3310,43],[3877,43,3310,45],[3878,8,3311,12],[3878,12,3311,16],[3878,13,3311,17,"forceRefresh"],[3878,25,3311,29],[3878,27,3311,31],[3879,10,3312,16],[3879,14,3312,20,"auth"],[3879,18,3312,24],[3879,19,3312,25,"tenantId"],[3879,27,3312,33],[3879,31,3312,37],[3879,35,3312,41],[3879,39,3312,45,"auth"],[3879,43,3312,49],[3879,44,3312,50,"_agentRecaptchaConfig"],[3879,65,3312,71],[3879,69,3312,75],[3879,73,3312,79],[3879,75,3312,81],[3880,12,3313,20],[3880,19,3313,27,"auth"],[3880,23,3313,31],[3880,24,3313,32,"_agentRecaptchaConfig"],[3880,45,3313,53],[3880,46,3313,54,"siteKey"],[3880,53,3313,61],[3881,10,3314,16],[3882,10,3315,16],[3882,14,3315,20,"auth"],[3882,18,3315,24],[3882,19,3315,25,"tenantId"],[3882,27,3315,33],[3882,31,3315,37],[3882,35,3315,41],[3882,39,3316,20,"auth"],[3882,43,3316,24],[3882,44,3316,25,"_tenantRecaptchaConfigs"],[3882,67,3316,48],[3882,68,3316,49,"auth"],[3882,72,3316,53],[3882,73,3316,54,"tenantId"],[3882,81,3316,62],[3882,82,3316,63],[3882,87,3316,68,"undefined"],[3882,96,3316,77],[3882,98,3316,79],[3883,12,3317,20],[3883,19,3317,27,"auth"],[3883,23,3317,31],[3883,24,3317,32,"_tenantRecaptchaConfigs"],[3883,47,3317,55],[3883,48,3317,56,"auth"],[3883,52,3317,60],[3883,53,3317,61,"tenantId"],[3883,61,3317,69],[3883,62,3317,70],[3883,63,3317,71,"siteKey"],[3883,70,3317,78],[3884,10,3318,16],[3885,8,3319,12],[3886,8,3320,12],[3886,15,3320,19],[3886,19,3320,23,"Promise"],[3886,26,3320,30],[3886,27,3320,31],[3886,34,3320,38,"resolve"],[3886,41,3320,45],[3886,43,3320,47,"reject"],[3886,49,3320,53],[3886,54,3320,58],[3887,10,3321,16,"getRecaptchaConfig"],[3887,28,3321,34],[3887,29,3321,35,"auth"],[3887,33,3321,39],[3887,35,3321,41],[3888,12,3322,20,"clientType"],[3888,22,3322,30],[3888,24,3322,32],[3888,41,3322,49],[3888,42,3322,50],[3889,12,3323,20,"version"],[3889,19,3323,27],[3889,21,3323,29],[3889,43,3323,51],[3889,44,3323,52],[3890,10,3324,16],[3890,11,3324,17],[3890,12,3324,18],[3890,13,3325,21,"then"],[3890,17,3325,25],[3890,18,3325,26,"response"],[3890,26,3325,34],[3890,30,3325,38],[3891,12,3326,20],[3891,16,3326,24,"response"],[3891,24,3326,32],[3891,25,3326,33,"recaptchaKey"],[3891,37,3326,45],[3891,42,3326,50,"undefined"],[3891,51,3326,59],[3891,53,3326,61],[3892,14,3327,24,"reject"],[3892,20,3327,30],[3892,21,3327,31],[3892,25,3327,35,"Error"],[3892,30,3327,40],[3892,31,3327,41],[3892,72,3327,82],[3892,73,3327,83],[3892,74,3327,84],[3893,12,3328,20],[3893,13,3328,21],[3893,19,3329,25],[3894,14,3330,24],[3894,20,3330,30,"config"],[3894,26,3330,36],[3894,29,3330,39],[3894,33,3330,43,"RecaptchaConfig"],[3894,48,3330,58],[3894,49,3330,59,"response"],[3894,57,3330,67],[3894,58,3330,68],[3895,14,3331,24],[3895,18,3331,28,"auth"],[3895,22,3331,32],[3895,23,3331,33,"tenantId"],[3895,31,3331,41],[3895,35,3331,45],[3895,39,3331,49],[3895,41,3331,51],[3896,16,3332,28,"auth"],[3896,20,3332,32],[3896,21,3332,33,"_agentRecaptchaConfig"],[3896,42,3332,54],[3896,45,3332,57,"config"],[3896,51,3332,63],[3897,14,3333,24],[3897,15,3333,25],[3897,21,3334,29],[3898,16,3335,28,"auth"],[3898,20,3335,32],[3898,21,3335,33,"_tenantRecaptchaConfigs"],[3898,44,3335,56],[3898,45,3335,57,"auth"],[3898,49,3335,61],[3898,50,3335,62,"tenantId"],[3898,58,3335,70],[3898,59,3335,71],[3898,62,3335,74,"config"],[3898,68,3335,80],[3899,14,3336,24],[3900,14,3337,24],[3900,21,3337,31,"resolve"],[3900,28,3337,38],[3900,29,3337,39,"config"],[3900,35,3337,45],[3900,36,3337,46,"siteKey"],[3900,43,3337,53],[3900,44,3337,54],[3901,12,3338,20],[3902,10,3339,16],[3902,11,3339,17],[3902,12,3339,18],[3902,13,3340,21,"catch"],[3902,18,3340,26],[3902,19,3340,27,"error"],[3902,24,3340,32],[3902,28,3340,36],[3903,12,3341,20,"reject"],[3903,18,3341,26],[3903,19,3341,27,"error"],[3903,24,3341,32],[3903,25,3341,33],[3904,10,3342,16],[3904,11,3342,17],[3904,12,3342,18],[3905,8,3343,12],[3905,9,3343,13],[3905,10,3343,14],[3906,6,3344,8],[3907,6,3345,8],[3907,15,3345,17,"retrieveRecaptchaToken"],[3907,37,3345,39,"retrieveRecaptchaToken"],[3907,38,3345,40,"siteKey"],[3907,45,3345,47],[3907,47,3345,49,"resolve"],[3907,54,3345,56],[3907,56,3345,58,"reject"],[3907,62,3345,64],[3907,64,3345,66],[3908,8,3346,12],[3908,14,3346,18,"grecaptcha"],[3908,24,3346,28],[3908,27,3346,31,"window"],[3908,33,3346,37],[3908,34,3346,38,"grecaptcha"],[3908,44,3346,48],[3909,8,3347,12],[3909,12,3347,16,"isEnterprise"],[3909,24,3347,28],[3909,25,3347,29,"grecaptcha"],[3909,35,3347,39],[3909,36,3347,40],[3909,38,3347,42],[3910,10,3348,16,"grecaptcha"],[3910,20,3348,26],[3910,21,3348,27,"enterprise"],[3910,31,3348,37],[3910,32,3348,38,"ready"],[3910,37,3348,43],[3910,38,3348,44],[3910,44,3348,50],[3911,12,3349,20,"grecaptcha"],[3911,22,3349,30],[3911,23,3349,31,"enterprise"],[3911,33,3349,41],[3911,34,3350,25,"execute"],[3911,41,3350,32],[3911,42,3350,33,"siteKey"],[3911,49,3350,40],[3911,51,3350,42],[3912,14,3350,44,"action"],[3913,12,3350,51],[3913,13,3350,52],[3913,14,3350,53],[3913,15,3351,25,"then"],[3913,19,3351,29],[3913,20,3351,30,"token"],[3913,25,3351,35],[3913,29,3351,39],[3914,14,3352,24,"resolve"],[3914,21,3352,31],[3914,22,3352,32,"token"],[3914,27,3352,37],[3914,28,3352,38],[3915,12,3353,20],[3915,13,3353,21],[3915,14,3353,22],[3915,15,3354,25,"catch"],[3915,20,3354,30],[3915,21,3354,31],[3915,27,3354,37],[3916,14,3355,24,"resolve"],[3916,21,3355,31],[3916,22,3355,32,"FAKE_TOKEN"],[3916,32,3355,42],[3916,33,3355,43],[3917,12,3356,20],[3917,13,3356,21],[3917,14,3356,22],[3918,10,3357,16],[3918,11,3357,17],[3918,12,3357,18],[3919,8,3358,12],[3919,9,3358,13],[3919,15,3359,17],[3920,10,3360,16,"reject"],[3920,16,3360,22],[3920,17,3360,23,"Error"],[3920,22,3360,28],[3920,23,3360,29],[3920,63,3360,69],[3920,64,3360,70],[3920,65,3360,71],[3921,8,3361,12],[3922,6,3362,8],[3923,6,3363,8],[3924,6,3364,8],[3924,10,3364,12],[3924,14,3364,16],[3924,15,3364,17,"auth"],[3924,19,3364,21],[3924,20,3364,22,"settings"],[3924,28,3364,30],[3924,29,3364,31,"appVerificationDisabledForTesting"],[3924,62,3364,64],[3924,64,3364,66],[3925,8,3365,12],[3925,14,3365,18,"mockRecaptcha"],[3925,27,3365,31],[3925,30,3365,34],[3925,34,3365,38,"MockGreCAPTCHATopLevel"],[3925,56,3365,60],[3925,57,3365,61],[3925,58,3365,62],[3926,8,3366,12],[3926,15,3366,19,"mockRecaptcha"],[3926,28,3366,32],[3926,29,3366,33,"execute"],[3926,36,3366,40],[3926,37,3366,41],[3926,46,3366,50],[3926,48,3366,52],[3927,10,3366,54,"action"],[3927,16,3366,60],[3927,18,3366,62],[3928,8,3366,71],[3928,9,3366,72],[3928,10,3366,73],[3929,6,3367,8],[3930,6,3368,8],[3930,13,3368,15],[3930,17,3368,19,"Promise"],[3930,24,3368,26],[3930,25,3368,27],[3930,26,3368,28,"resolve"],[3930,33,3368,35],[3930,35,3368,37,"reject"],[3930,41,3368,43],[3930,46,3368,48],[3931,8,3369,12,"retrieveSiteKey"],[3931,23,3369,27],[3931,24,3369,28],[3931,28,3369,32],[3931,29,3369,33,"auth"],[3931,33,3369,37],[3931,34,3369,38],[3931,35,3370,17,"then"],[3931,39,3370,21],[3931,40,3370,22,"siteKey"],[3931,47,3370,29],[3931,51,3370,33],[3932,10,3371,16],[3932,14,3371,20],[3932,15,3371,21,"forceRefresh"],[3932,27,3371,33],[3932,31,3371,37,"isEnterprise"],[3932,43,3371,49],[3932,44,3371,50,"window"],[3932,50,3371,56],[3932,51,3371,57,"grecaptcha"],[3932,61,3371,67],[3932,62,3371,68],[3932,64,3371,70],[3933,12,3372,20,"retrieveRecaptchaToken"],[3933,34,3372,42],[3933,35,3372,43,"siteKey"],[3933,42,3372,50],[3933,44,3372,52,"resolve"],[3933,51,3372,59],[3933,53,3372,61,"reject"],[3933,59,3372,67],[3933,60,3372,68],[3934,10,3373,16],[3934,11,3373,17],[3934,17,3374,21],[3935,12,3375,20],[3935,22,3375,55],[3936,14,3376,24,"reject"],[3936,20,3376,30],[3936,21,3376,31],[3936,25,3376,35,"Error"],[3936,30,3376,40],[3936,31,3376,41],[3936,79,3376,89],[3936,80,3376,90],[3936,81,3376,91],[3937,14,3377,24],[3938,12,3378,20],[3939,12,3379,20],[3939,16,3379,24,"url"],[3939,19,3379,27],[3939,22,3379,30,"_recaptchaEnterpriseScriptUrl"],[3939,51,3379,59],[3939,52,3379,60],[3939,53,3379,61],[3940,12,3380,20],[3940,16,3380,24,"url"],[3940,19,3380,27],[3940,20,3380,28,"length"],[3940,26,3380,34],[3940,31,3380,39],[3940,32,3380,40],[3940,34,3380,42],[3941,14,3381,24,"url"],[3941,17,3381,27],[3941,21,3381,31,"siteKey"],[3941,28,3381,38],[3942,12,3382,20],[3943,12,3383,20,"_loadJS"],[3943,19,3383,27],[3943,20,3383,28,"url"],[3943,23,3383,31],[3943,24,3383,32],[3943,25,3384,25,"then"],[3943,29,3384,29],[3943,30,3384,30],[3943,36,3384,36],[3944,14,3385,24,"retrieveRecaptchaToken"],[3944,36,3385,46],[3944,37,3385,47,"siteKey"],[3944,44,3385,54],[3944,46,3385,56,"resolve"],[3944,53,3385,63],[3944,55,3385,65,"reject"],[3944,61,3385,71],[3944,62,3385,72],[3945,12,3386,20],[3945,13,3386,21],[3945,14,3386,22],[3945,15,3387,25,"catch"],[3945,20,3387,30],[3945,21,3387,31,"error"],[3945,26,3387,36],[3945,30,3387,40],[3946,14,3388,24,"reject"],[3946,20,3388,30],[3946,21,3388,31,"error"],[3946,26,3388,36],[3946,27,3388,37],[3947,12,3389,20],[3947,13,3389,21],[3947,14,3389,22],[3948,10,3390,16],[3949,8,3391,12],[3949,9,3391,13],[3949,10,3391,14],[3949,11,3392,17,"catch"],[3949,16,3392,22],[3949,17,3392,23,"error"],[3949,22,3392,28],[3949,26,3392,32],[3950,10,3393,16,"reject"],[3950,16,3393,22],[3950,17,3393,23,"error"],[3950,22,3393,28],[3950,23,3393,29],[3951,8,3394,12],[3951,9,3394,13],[3951,10,3394,14],[3952,6,3395,8],[3952,7,3395,9],[3952,8,3395,10],[3953,4,3396,4],[3954,2,3397,0],[3955,2,3398,0],[3955,17,3398,15,"injectRecaptchaFields"],[3955,38,3398,36,"injectRecaptchaFields"],[3955,39,3398,37,"auth"],[3955,43,3398,41],[3955,45,3398,43,"request"],[3955,52,3398,50],[3955,54,3398,52,"action"],[3955,60,3398,58],[3955,62,3398,60,"isCaptchaResp"],[3955,75,3398,73],[3955,78,3398,76],[3955,83,3398,81],[3955,85,3398,83,"isFakeToken"],[3955,96,3398,94],[3955,99,3398,97],[3955,104,3398,102],[3955,106,3398,104],[3956,4,3399,4],[3956,10,3399,10,"verifier"],[3956,18,3399,18],[3956,21,3399,21],[3956,25,3399,25,"RecaptchaEnterpriseVerifier"],[3956,52,3399,52],[3956,53,3399,53,"auth"],[3956,57,3399,57],[3956,58,3399,58],[3957,4,3400,4],[3957,8,3400,8,"captchaResponse"],[3957,23,3400,23],[3958,4,3401,4],[3958,8,3401,8,"isFakeToken"],[3958,19,3401,19],[3958,21,3401,21],[3959,6,3402,8,"captchaResponse"],[3959,21,3402,23],[3959,24,3402,26,"FAKE_TOKEN"],[3959,34,3402,36],[3960,4,3403,4],[3960,5,3403,5],[3960,11,3404,9],[3961,6,3405,8],[3961,10,3405,12],[3962,8,3406,12,"captchaResponse"],[3962,23,3406,27],[3962,26,3406,30],[3962,32,3406,36,"verifier"],[3962,40,3406,44],[3962,41,3406,45,"verify"],[3962,47,3406,51],[3962,48,3406,52,"action"],[3962,54,3406,58],[3962,55,3406,59],[3963,6,3407,8],[3963,7,3407,9],[3963,8,3408,8],[3963,15,3408,15,"error"],[3963,20,3408,20],[3963,22,3408,22],[3964,8,3409,12,"captchaResponse"],[3964,23,3409,27],[3964,26,3409,30],[3964,32,3409,36,"verifier"],[3964,40,3409,44],[3964,41,3409,45,"verify"],[3964,47,3409,51],[3964,48,3409,52,"action"],[3964,54,3409,58],[3964,56,3409,60],[3964,60,3409,64],[3964,61,3409,65],[3965,6,3410,8],[3966,4,3411,4],[3967,4,3412,4],[3967,10,3412,10,"newRequest"],[3967,20,3412,20],[3967,23,3412,23],[3968,6,3412,25],[3968,9,3412,28,"request"],[3969,4,3412,36],[3969,5,3412,37],[3970,4,3413,4],[3970,8,3413,8,"action"],[3970,14,3413,14],[3970,19,3413,19],[3970,37,3413,37],[3970,38,3413,38],[3970,86,3414,8,"action"],[3970,92,3414,14],[3970,97,3414,19],[3970,111,3414,33],[3970,112,3414,34],[3970,154,3414,76],[3971,6,3415,8],[3971,10,3415,12],[3971,31,3415,33],[3971,35,3415,37,"newRequest"],[3971,45,3415,47],[3971,47,3415,49],[3972,8,3416,12],[3972,14,3416,18,"phoneNumber"],[3972,25,3416,29],[3972,28,3416,32,"newRequest"],[3972,38,3416,42],[3972,39,3416,43,"phoneEnrollmentInfo"],[3972,58,3416,62],[3972,59,3416,63,"phoneNumber"],[3972,70,3416,74],[3973,8,3417,12],[3973,14,3417,18,"recaptchaToken"],[3973,28,3417,32],[3973,31,3417,35,"newRequest"],[3973,41,3417,45],[3973,42,3417,46,"phoneEnrollmentInfo"],[3973,61,3417,65],[3973,62,3417,66,"recaptchaToken"],[3973,76,3417,80],[3974,8,3418,12,"Object"],[3974,14,3418,18],[3974,15,3418,19,"assign"],[3974,21,3418,25],[3974,22,3418,26,"newRequest"],[3974,32,3418,36],[3974,34,3418,38],[3975,10,3419,16],[3975,31,3419,37],[3975,33,3419,39],[3976,12,3420,20,"phoneNumber"],[3976,23,3420,31],[3977,12,3421,20,"recaptchaToken"],[3977,26,3421,34],[3978,12,3422,20,"captchaResponse"],[3978,27,3422,35],[3979,12,3423,20],[3979,24,3423,32],[3979,26,3423,34],[3979,43,3423,51],[3979,44,3423,52],[3980,12,3424,20],[3980,30,3424,38],[3980,32,3424,40],[3980,54,3424,62],[3980,55,3424,63],[3981,10,3425,16],[3982,8,3426,12],[3982,9,3426,13],[3982,10,3426,14],[3983,6,3427,8],[3983,7,3427,9],[3983,13,3428,13],[3983,17,3428,17],[3983,34,3428,34],[3983,38,3428,38,"newRequest"],[3983,48,3428,48],[3983,50,3428,50],[3984,8,3429,12],[3984,14,3429,18,"recaptchaToken"],[3984,28,3429,32],[3984,31,3429,35,"newRequest"],[3984,41,3429,45],[3984,42,3429,46,"phoneSignInInfo"],[3984,57,3429,61],[3984,58,3429,62,"recaptchaToken"],[3984,72,3429,76],[3985,8,3430,12,"Object"],[3985,14,3430,18],[3985,15,3430,19,"assign"],[3985,21,3430,25],[3985,22,3430,26,"newRequest"],[3985,32,3430,36],[3985,34,3430,38],[3986,10,3431,16],[3986,27,3431,33],[3986,29,3431,35],[3987,12,3432,20,"recaptchaToken"],[3987,26,3432,34],[3988,12,3433,20,"captchaResponse"],[3988,27,3433,35],[3989,12,3434,20],[3989,24,3434,32],[3989,26,3434,34],[3989,43,3434,51],[3989,44,3434,52],[3990,12,3435,20],[3990,30,3435,38],[3990,32,3435,40],[3990,54,3435,62],[3990,55,3435,63],[3991,10,3436,16],[3992,8,3437,12],[3992,9,3437,13],[3992,10,3437,14],[3993,6,3438,8],[3994,6,3439,8],[3994,13,3439,15,"newRequest"],[3994,23,3439,25],[3995,4,3440,4],[3996,4,3441,4],[3996,8,3441,8],[3996,9,3441,9,"isCaptchaResp"],[3996,22,3441,22],[3996,24,3441,24],[3997,6,3442,8,"Object"],[3997,12,3442,14],[3997,13,3442,15,"assign"],[3997,19,3442,21],[3997,20,3442,22,"newRequest"],[3997,30,3442,32],[3997,32,3442,34],[3998,8,3442,36,"captchaResponse"],[3999,6,3442,52],[3999,7,3442,53],[3999,8,3442,54],[4000,4,3443,4],[4000,5,3443,5],[4000,11,3444,9],[4001,6,3445,8,"Object"],[4001,12,3445,14],[4001,13,3445,15,"assign"],[4001,19,3445,21],[4001,20,3445,22,"newRequest"],[4001,30,3445,32],[4001,32,3445,34],[4002,8,3445,36],[4002,21,3445,49],[4002,23,3445,51,"captchaResponse"],[4003,6,3445,67],[4003,7,3445,68],[4003,8,3445,69],[4004,4,3446,4],[4005,4,3447,4,"Object"],[4005,10,3447,10],[4005,11,3447,11,"assign"],[4005,17,3447,17],[4005,18,3447,18,"newRequest"],[4005,28,3447,28],[4005,30,3447,30],[4006,6,3447,32],[4006,18,3447,44],[4006,20,3447,46],[4006,37,3447,63],[4006,38,3447,64],[4007,4,3447,94],[4007,5,3447,95],[4007,6,3447,96],[4008,4,3448,4,"Object"],[4008,10,3448,10],[4008,11,3448,11,"assign"],[4008,17,3448,17],[4008,18,3448,18,"newRequest"],[4008,28,3448,28],[4008,30,3448,30],[4009,6,3449,8],[4009,24,3449,26],[4009,26,3449,28],[4009,48,3449,50],[4009,49,3449,51],[4010,4,3450,4],[4010,5,3450,5],[4010,6,3450,6],[4011,4,3451,4],[4011,11,3451,11,"newRequest"],[4011,21,3451,21],[4012,2,3452,0],[4013,2,3453,0],[4013,17,3453,15,"handleRecaptchaFlow"],[4013,36,3453,34,"handleRecaptchaFlow"],[4013,37,3453,35,"authInstance"],[4013,49,3453,47],[4013,51,3453,49,"request"],[4013,58,3453,56],[4013,60,3453,58,"actionName"],[4013,70,3453,68],[4013,72,3453,70,"actionMethod"],[4013,84,3453,82],[4013,86,3453,84,"recaptchaAuthProvider"],[4013,107,3453,105],[4013,109,3453,107],[4014,4,3454,4],[4014,8,3454,8,"recaptchaAuthProvider"],[4014,29,3454,29],[4014,34,3454,34],[4014,59,3454,59],[4014,60,3454,60],[4014,113,3454,113],[4015,6,3455,8],[4015,10,3455,12,"authInstance"],[4015,22,3455,24],[4015,23,3456,13,"_getRecaptchaConfig"],[4015,42,3456,32],[4015,43,3456,33],[4015,44,3456,34],[4015,46,3457,14,"isProviderEnabled"],[4015,63,3457,31],[4015,64,3457,32],[4015,89,3457,57],[4015,90,3457,58],[4015,141,3457,109],[4015,142,3457,110],[4015,144,3457,112],[4016,8,3458,12],[4016,14,3458,18,"requestWithRecaptcha"],[4016,34,3458,38],[4016,37,3458,41],[4016,43,3458,47,"injectRecaptchaFields"],[4016,64,3458,68],[4016,65,3458,69,"authInstance"],[4016,77,3458,81],[4016,79,3458,83,"request"],[4016,86,3458,90],[4016,88,3458,92,"actionName"],[4016,98,3458,102],[4016,100,3458,104,"actionName"],[4016,110,3458,114],[4016,115,3458,119],[4016,127,3458,131],[4016,128,3458,132],[4016,166,3458,170],[4016,167,3458,171],[4017,8,3459,12],[4017,15,3459,19,"actionMethod"],[4017,27,3459,31],[4017,28,3459,32,"authInstance"],[4017,40,3459,44],[4017,42,3459,46,"requestWithRecaptcha"],[4017,62,3459,66],[4017,63,3459,67],[4018,6,3460,8],[4018,7,3460,9],[4018,13,3461,13],[4019,8,3462,12],[4019,15,3462,19,"actionMethod"],[4019,27,3462,31],[4019,28,3462,32,"authInstance"],[4019,40,3462,44],[4019,42,3462,46,"request"],[4019,49,3462,53],[4019,50,3462,54],[4019,51,3462,55,"catch"],[4019,56,3462,60],[4019,57,3462,61],[4019,63,3462,68,"error"],[4019,68,3462,73],[4019,72,3462,78],[4020,10,3463,16],[4020,14,3463,20,"error"],[4020,19,3463,25],[4020,20,3463,26,"code"],[4020,24,3463,30],[4020,29,3463,35],[4020,37,3463,43],[4020,62,3463,68],[4020,63,3463,69],[4020,108,3463,114],[4020,110,3463,116],[4021,12,3464,20,"console"],[4021,19,3464,27],[4021,20,3464,28,"log"],[4021,23,3464,31],[4021,24,3464,32],[4021,27,3464,35,"actionName"],[4021,37,3464,45],[4021,163,3464,171],[4021,164,3464,172],[4022,12,3465,20],[4022,18,3465,26,"requestWithRecaptcha"],[4022,38,3465,46],[4022,41,3465,49],[4022,47,3465,55,"injectRecaptchaFields"],[4022,68,3465,76],[4022,69,3465,77,"authInstance"],[4022,81,3465,89],[4022,83,3465,91,"request"],[4022,90,3465,98],[4022,92,3465,100,"actionName"],[4022,102,3465,110],[4022,104,3465,112,"actionName"],[4022,114,3465,122],[4022,119,3465,127],[4022,131,3465,139],[4022,132,3465,140],[4022,170,3465,178],[4022,171,3465,179],[4023,12,3466,20],[4023,19,3466,27,"actionMethod"],[4023,31,3466,39],[4023,32,3466,40,"authInstance"],[4023,44,3466,52],[4023,46,3466,54,"requestWithRecaptcha"],[4023,66,3466,74],[4023,67,3466,75],[4024,10,3467,16],[4024,11,3467,17],[4024,17,3468,21],[4025,12,3469,20],[4025,19,3469,27,"Promise"],[4025,26,3469,34],[4025,27,3469,35,"reject"],[4025,33,3469,41],[4025,34,3469,42,"error"],[4025,39,3469,47],[4025,40,3469,48],[4026,10,3470,16],[4027,8,3471,12],[4027,9,3471,13],[4027,10,3471,14],[4028,6,3472,8],[4029,4,3473,4],[4029,5,3473,5],[4029,11,3474,9],[4029,15,3474,13,"recaptchaAuthProvider"],[4029,36,3474,34],[4029,41,3474,39],[4029,57,3474,55],[4029,58,3474,56],[4029,102,3474,100],[4030,6,3475,8],[4030,10,3475,12,"authInstance"],[4030,22,3475,24],[4030,23,3476,13,"_getRecaptchaConfig"],[4030,42,3476,32],[4030,43,3476,33],[4030,44,3476,34],[4030,46,3477,14,"isProviderEnabled"],[4030,63,3477,31],[4030,64,3477,32],[4030,80,3477,48],[4030,81,3477,49],[4030,123,3477,91],[4030,124,3477,92],[4030,126,3477,94],[4031,8,3478,12],[4031,14,3478,18,"requestWithRecaptcha"],[4031,34,3478,38],[4031,37,3478,41],[4031,43,3478,47,"injectRecaptchaFields"],[4031,64,3478,68],[4031,65,3478,69,"authInstance"],[4031,77,3478,81],[4031,79,3478,83,"request"],[4031,86,3478,90],[4031,88,3478,92,"actionName"],[4031,98,3478,102],[4031,99,3478,103],[4032,8,3479,12],[4032,15,3479,19,"actionMethod"],[4032,27,3479,31],[4032,28,3479,32,"authInstance"],[4032,40,3479,44],[4032,42,3479,46,"requestWithRecaptcha"],[4032,62,3479,66],[4032,63,3479,67],[4032,64,3479,68,"catch"],[4032,69,3479,73],[4032,70,3479,74],[4032,76,3479,81,"error"],[4032,81,3479,86],[4032,85,3479,91],[4033,10,3480,16],[4033,14,3480,20,"authInstance"],[4033,26,3480,32],[4033,27,3481,21,"_getRecaptchaConfig"],[4033,46,3481,40],[4033,47,3481,41],[4033,48,3481,42],[4033,50,3482,22,"getProviderEnforcementState"],[4033,77,3482,49],[4033,78,3482,50],[4033,94,3482,66],[4033,95,3482,67],[4033,137,3482,109],[4033,138,3482,110],[4033,143,3482,115],[4033,150,3482,122],[4033,151,3482,123],[4033,181,3482,153],[4034,12,3483,20],[4035,12,3484,20],[4035,16,3484,24,"error"],[4035,21,3484,29],[4035,22,3484,30,"code"],[4035,26,3484,34],[4035,31,3484,39],[4035,39,3484,47],[4035,64,3484,72],[4035,65,3484,73],[4035,110,3484,118],[4035,114,3485,24,"error"],[4035,119,3485,29],[4035,120,3485,30,"code"],[4035,124,3485,34],[4035,129,3485,39],[4035,137,3485,47],[4035,161,3485,71],[4035,162,3485,72],[4035,206,3485,116],[4035,208,3485,118],[4036,14,3486,24,"console"],[4036,21,3486,31],[4036,22,3486,32,"log"],[4036,25,3486,35],[4036,26,3486,36],[4036,136,3486,146,"actionName"],[4036,146,3486,156],[4036,154,3486,164],[4036,155,3486,165],[4037,14,3487,24],[4038,14,3488,24],[4039,14,3489,24],[4040,14,3490,24],[4040,20,3490,30,"requestWithRecaptchaFields"],[4040,46,3490,56],[4040,49,3490,59],[4040,55,3490,65,"injectRecaptchaFields"],[4040,76,3490,86],[4040,77,3490,87,"authInstance"],[4040,89,3490,99],[4040,91,3490,101,"request"],[4040,98,3490,108],[4040,100,3490,110,"actionName"],[4040,110,3490,120],[4040,112,3490,122],[4040,117,3490,127],[4041,14,3490,129],[4042,14,3491,24],[4042,18,3491,28],[4042,19,3491,29],[4043,14,3492,24],[4043,15,3492,25],[4044,14,3493,24],[4045,14,3494,24],[4045,21,3494,31,"actionMethod"],[4045,33,3494,43],[4045,34,3494,44,"authInstance"],[4045,46,3494,56],[4045,48,3494,58,"requestWithRecaptchaFields"],[4045,74,3494,84],[4045,75,3494,85],[4046,12,3495,20],[4047,10,3496,16],[4048,10,3497,16],[4049,10,3498,16],[4049,17,3498,23,"Promise"],[4049,24,3498,30],[4049,25,3498,31,"reject"],[4049,31,3498,37],[4049,32,3498,38,"error"],[4049,37,3498,43],[4049,38,3498,44],[4050,8,3499,12],[4050,9,3499,13],[4050,10,3499,14],[4051,6,3500,8],[4051,7,3500,9],[4051,13,3501,13],[4052,8,3502,12],[4053,8,3503,12],[4053,14,3503,18,"requestWithRecaptchaFields"],[4053,40,3503,44],[4053,43,3503,47],[4053,49,3503,53,"injectRecaptchaFields"],[4053,70,3503,74],[4053,71,3503,75,"authInstance"],[4053,83,3503,87],[4053,85,3503,89,"request"],[4053,92,3503,96],[4053,94,3503,98,"actionName"],[4053,104,3503,108],[4053,106,3503,110],[4053,111,3503,115],[4054,8,3503,117],[4055,8,3504,12],[4055,12,3504,16],[4055,13,3504,17],[4056,8,3505,12],[4056,9,3505,13],[4057,8,3506,12],[4058,8,3507,12],[4058,15,3507,19,"actionMethod"],[4058,27,3507,31],[4058,28,3507,32,"authInstance"],[4058,40,3507,44],[4058,42,3507,46,"requestWithRecaptchaFields"],[4058,68,3507,72],[4058,69,3507,73],[4059,6,3508,8],[4060,4,3509,4],[4060,5,3509,5],[4060,11,3510,9],[4061,6,3511,8],[4061,13,3511,15,"Promise"],[4061,20,3511,22],[4061,21,3511,23,"reject"],[4061,27,3511,29],[4061,28,3511,30,"recaptchaAuthProvider"],[4061,49,3511,51],[4061,52,3511,54],[4061,81,3511,83],[4061,82,3511,84],[4062,4,3512,4],[4063,2,3513,0],[4064,2,3514,0],[4064,17,3514,15,"_initializeRecaptchaConfig"],[4064,43,3514,41,"_initializeRecaptchaConfig"],[4064,44,3514,42,"auth"],[4064,48,3514,46],[4064,50,3514,48],[4065,4,3515,4],[4065,10,3515,10,"authInternal"],[4065,22,3515,22],[4065,25,3515,25,"_castAuth"],[4065,34,3515,34],[4065,35,3515,35,"auth"],[4065,39,3515,39],[4065,40,3515,40],[4066,4,3516,4],[4066,10,3516,10,"response"],[4066,18,3516,18],[4066,21,3516,21],[4066,27,3516,27,"getRecaptchaConfig"],[4066,45,3516,45],[4066,46,3516,46,"authInternal"],[4066,58,3516,58],[4066,60,3516,60],[4067,6,3517,8,"clientType"],[4067,16,3517,18],[4067,18,3517,20],[4067,35,3517,37],[4067,36,3517,38],[4068,6,3518,8,"version"],[4068,13,3518,15],[4068,15,3518,17],[4068,37,3518,39],[4068,38,3518,40],[4069,4,3519,4],[4069,5,3519,5],[4069,6,3519,6],[4070,4,3520,4],[4070,10,3520,10,"config"],[4070,16,3520,16],[4070,19,3520,19],[4070,23,3520,23,"RecaptchaConfig"],[4070,38,3520,38],[4070,39,3520,39,"response"],[4070,47,3520,47],[4070,48,3520,48],[4071,4,3521,4],[4071,8,3521,8,"authInternal"],[4071,20,3521,20],[4071,21,3521,21,"tenantId"],[4071,29,3521,29],[4071,33,3521,33],[4071,37,3521,37],[4071,39,3521,39],[4072,6,3522,8,"authInternal"],[4072,18,3522,20],[4072,19,3522,21,"_agentRecaptchaConfig"],[4072,40,3522,42],[4072,43,3522,45,"config"],[4072,49,3522,51],[4073,4,3523,4],[4073,5,3523,5],[4073,11,3524,9],[4074,6,3525,8,"authInternal"],[4074,18,3525,20],[4074,19,3525,21,"_tenantRecaptchaConfigs"],[4074,42,3525,44],[4074,43,3525,45,"authInternal"],[4074,55,3525,57],[4074,56,3525,58,"tenantId"],[4074,64,3525,66],[4074,65,3525,67],[4074,68,3525,70,"config"],[4074,74,3525,76],[4075,4,3526,4],[4076,4,3527,4],[4076,8,3527,8,"config"],[4076,14,3527,14],[4076,15,3527,15,"isAnyProviderEnabled"],[4076,35,3527,35],[4076,36,3527,36],[4076,37,3527,37],[4076,39,3527,39],[4077,6,3528,8],[4077,12,3528,14,"verifier"],[4077,20,3528,22],[4077,23,3528,25],[4077,27,3528,29,"RecaptchaEnterpriseVerifier"],[4077,54,3528,56],[4077,55,3528,57,"authInternal"],[4077,67,3528,69],[4077,68,3528,70],[4078,6,3529,8],[4078,11,3529,13,"verifier"],[4078,19,3529,21],[4078,20,3529,22,"verify"],[4078,26,3529,28],[4078,27,3529,29],[4078,28,3529,30],[4079,4,3530,4],[4080,2,3531,0],[4082,2,3533,0],[4083,0,3534,0],[4084,0,3535,0],[4085,0,3536,0],[4086,0,3537,0],[4087,0,3538,0],[4088,0,3539,0],[4089,0,3540,0],[4090,0,3541,0],[4091,0,3542,0],[4092,0,3543,0],[4093,0,3544,0],[4094,0,3545,0],[4095,0,3546,0],[4096,0,3547,0],[4097,0,3548,0],[4098,2,3549,0],[4099,0,3550,0],[4100,0,3551,0],[4101,0,3552,0],[4102,0,3553,0],[4103,0,3554,0],[4104,0,3555,0],[4105,0,3556,0],[4106,0,3557,0],[4107,0,3558,0],[4108,0,3559,0],[4109,0,3560,0],[4110,0,3561,0],[4111,0,3562,0],[4112,0,3563,0],[4113,0,3564,0],[4114,0,3565,0],[4115,0,3566,0],[4116,0,3567,0],[4117,0,3568,0],[4118,0,3569,0],[4119,0,3570,0],[4120,0,3571,0],[4121,0,3572,0],[4122,0,3573,0],[4123,2,3574,0],[4123,11,3574,9,"initializeAuth"],[4123,25,3574,23,"initializeAuth"],[4123,26,3574,24,"app"],[4123,29,3574,27],[4123,31,3574,29,"deps"],[4123,35,3574,33],[4123,37,3574,35],[4124,4,3575,4],[4124,10,3575,10,"provider"],[4124,18,3575,18],[4124,21,3575,21],[4124,25,3575,21,"_getProvider"],[4124,37,3575,33],[4124,38,3575,33,"_getProvider"],[4124,50,3575,33],[4124,52,3575,34,"app"],[4124,55,3575,37],[4124,57,3575,39],[4124,63,3575,45],[4124,64,3575,46],[4125,4,3576,4],[4125,8,3576,8,"provider"],[4125,16,3576,16],[4125,17,3576,17,"isInitialized"],[4125,30,3576,30],[4125,31,3576,31],[4125,32,3576,32],[4125,34,3576,34],[4126,6,3577,8],[4126,12,3577,14,"auth"],[4126,16,3577,18],[4126,19,3577,21,"provider"],[4126,27,3577,29],[4126,28,3577,30,"getImmediate"],[4126,40,3577,42],[4126,41,3577,43],[4126,42,3577,44],[4127,6,3578,8],[4127,12,3578,14,"initialOptions"],[4127,26,3578,28],[4127,29,3578,31,"provider"],[4127,37,3578,39],[4127,38,3578,40,"getOptions"],[4127,48,3578,50],[4127,49,3578,51],[4127,50,3578,52],[4128,6,3579,8],[4128,10,3579,12],[4128,14,3579,12,"deepEqual"],[4128,27,3579,21],[4128,28,3579,21,"deepEqual"],[4128,37,3579,21],[4128,39,3579,22,"initialOptions"],[4128,53,3579,36],[4128,55,3579,38,"deps"],[4128,59,3579,42],[4128,63,3579,46],[4128,64,3579,47],[4128,65,3579,48],[4128,66,3579,49],[4128,68,3579,51],[4129,8,3580,12],[4129,15,3580,19,"auth"],[4129,19,3580,23],[4130,6,3581,8],[4130,7,3581,9],[4130,13,3582,13],[4131,8,3583,12,"_fail"],[4131,13,3583,17],[4131,14,3583,18,"auth"],[4131,18,3583,22],[4131,20,3583,24],[4131,41,3583,45],[4131,42,3583,46],[4131,81,3583,85],[4131,82,3583,86],[4132,6,3584,8],[4133,4,3585,4],[4134,4,3586,4],[4134,10,3586,10,"auth"],[4134,14,3586,14],[4134,17,3586,17,"provider"],[4134,25,3586,25],[4134,26,3586,26,"initialize"],[4134,36,3586,36],[4134,37,3586,37],[4135,6,3586,39,"options"],[4135,13,3586,46],[4135,15,3586,48,"deps"],[4136,4,3586,53],[4136,5,3586,54],[4136,6,3586,55],[4137,4,3587,4],[4137,11,3587,11,"auth"],[4137,15,3587,15],[4138,2,3588,0],[4139,2,3589,0],[4139,11,3589,9,"_initializeAuthInstance"],[4139,34,3589,32,"_initializeAuthInstance"],[4139,35,3589,33,"auth"],[4139,39,3589,37],[4139,41,3589,39,"deps"],[4139,45,3589,43],[4139,47,3589,45],[4140,4,3590,4],[4140,10,3590,10,"persistence"],[4140,21,3590,21],[4140,24,3590,24,"deps"],[4140,28,3590,28],[4140,30,3590,30,"persistence"],[4140,41,3590,41],[4140,45,3590,45],[4140,47,3590,47],[4141,4,3591,4],[4141,10,3591,10,"hierarchy"],[4141,19,3591,19],[4141,22,3591,22],[4141,23,3591,23,"Array"],[4141,28,3591,28],[4141,29,3591,29,"isArray"],[4141,36,3591,36],[4141,37,3591,37,"persistence"],[4141,48,3591,48],[4141,49,3591,49],[4141,52,3591,52,"persistence"],[4141,63,3591,63],[4141,66,3591,66],[4141,67,3591,67,"persistence"],[4141,78,3591,78],[4141,79,3591,79],[4141,81,3591,81,"map"],[4141,84,3591,84],[4141,85,3591,85,"_getInstance"],[4141,97,3591,97],[4141,98,3591,98],[4142,4,3592,4],[4142,8,3592,8,"deps"],[4142,12,3592,12],[4142,14,3592,14,"errorMap"],[4142,22,3592,22],[4142,24,3592,24],[4143,6,3593,8,"auth"],[4143,10,3593,12],[4143,11,3593,13,"_updateErrorMap"],[4143,26,3593,28],[4143,27,3593,29,"deps"],[4143,31,3593,33],[4143,32,3593,34,"errorMap"],[4143,40,3593,42],[4143,41,3593,43],[4144,4,3594,4],[4145,4,3595,4],[4146,4,3596,4],[4147,4,3597,4],[4148,4,3598,4,"auth"],[4148,8,3598,8],[4148,9,3598,9,"_initializeWithPersistence"],[4148,35,3598,35],[4148,36,3598,36,"hierarchy"],[4148,45,3598,45],[4148,47,3598,47,"deps"],[4148,51,3598,51],[4148,53,3598,53,"popupRedirectResolver"],[4148,74,3598,74],[4148,75,3598,75],[4149,2,3599,0],[4151,2,3601,0],[4152,0,3602,0],[4153,0,3603,0],[4154,0,3604,0],[4155,0,3605,0],[4156,0,3606,0],[4157,0,3607,0],[4158,0,3608,0],[4159,0,3609,0],[4160,0,3610,0],[4161,0,3611,0],[4162,0,3612,0],[4163,0,3613,0],[4164,0,3614,0],[4165,0,3615,0],[4166,0,3616,0],[4167,0,3617,0],[4168,0,3618,0],[4169,0,3619,0],[4170,0,3620,0],[4171,0,3621,0],[4172,0,3622,0],[4173,2,3623,0],[4173,11,3623,9,"connectAuthEmulator"],[4173,30,3623,28,"connectAuthEmulator"],[4173,31,3623,29,"auth"],[4173,35,3623,33],[4173,37,3623,35,"url"],[4173,40,3623,38],[4173,42,3623,40,"options"],[4173,49,3623,47],[4173,51,3623,49],[4174,4,3624,4],[4174,10,3624,10,"authInternal"],[4174,22,3624,22],[4174,25,3624,25,"_castAuth"],[4174,34,3624,34],[4174,35,3624,35,"auth"],[4174,39,3624,39],[4174,40,3624,40],[4175,4,3625,4,"_assert"],[4175,11,3625,11],[4175,12,3625,12],[4175,26,3625,26],[4175,27,3625,27,"test"],[4175,31,3625,31],[4175,32,3625,32,"url"],[4175,35,3625,35],[4175,36,3625,36],[4175,38,3625,38,"authInternal"],[4175,50,3625,50],[4175,52,3625,52],[4175,77,3625,77],[4175,78,3625,78],[4175,121,3625,121],[4175,122,3625,122],[4176,4,3626,4],[4176,10,3626,10,"disableWarnings"],[4176,25,3626,25],[4176,28,3626,28],[4176,29,3626,29],[4176,30,3626,30,"options"],[4176,37,3626,37],[4176,39,3626,39,"disableWarnings"],[4176,54,3626,54],[4177,4,3627,4],[4177,10,3627,10,"protocol"],[4177,18,3627,18],[4177,21,3627,21,"extractProtocol"],[4177,36,3627,36],[4177,37,3627,37,"url"],[4177,40,3627,40],[4177,41,3627,41],[4178,4,3628,4],[4178,10,3628,10],[4179,6,3628,12,"host"],[4179,10,3628,16],[4180,6,3628,18,"port"],[4181,4,3628,23],[4181,5,3628,24],[4181,8,3628,27,"extractHostAndPort"],[4181,26,3628,45],[4181,27,3628,46,"url"],[4181,30,3628,49],[4181,31,3628,50],[4182,4,3629,4],[4182,10,3629,10,"portStr"],[4182,17,3629,17],[4182,20,3629,20,"port"],[4182,24,3629,24],[4182,29,3629,29],[4182,33,3629,33],[4182,36,3629,36],[4182,38,3629,38],[4182,41,3629,41],[4182,45,3629,45,"port"],[4182,49,3629,49],[4182,51,3629,51],[4183,4,3630,4],[4184,4,3631,4],[4184,10,3631,10,"emulator"],[4184,18,3631,18],[4184,21,3631,21],[4185,6,3631,23,"url"],[4185,9,3631,26],[4185,11,3631,28],[4185,14,3631,31,"protocol"],[4185,22,3631,39],[4185,27,3631,44,"host"],[4185,31,3631,48],[4185,34,3631,51,"portStr"],[4185,41,3631,58],[4186,4,3631,62],[4186,5,3631,63],[4187,4,3632,4],[4187,10,3632,10,"emulatorConfig"],[4187,24,3632,24],[4187,27,3632,27,"Object"],[4187,33,3632,33],[4187,34,3632,34,"freeze"],[4187,40,3632,40],[4187,41,3632,41],[4188,6,3633,8,"host"],[4188,10,3633,12],[4189,6,3634,8,"port"],[4189,10,3634,12],[4190,6,3635,8,"protocol"],[4190,14,3635,16],[4190,16,3635,18,"protocol"],[4190,24,3635,26],[4190,25,3635,27,"replace"],[4190,32,3635,34],[4190,33,3635,35],[4190,36,3635,38],[4190,38,3635,40],[4190,40,3635,42],[4190,41,3635,43],[4191,6,3636,8,"options"],[4191,13,3636,15],[4191,15,3636,17,"Object"],[4191,21,3636,23],[4191,22,3636,24,"freeze"],[4191,28,3636,30],[4191,29,3636,31],[4192,8,3636,33,"disableWarnings"],[4193,6,3636,49],[4193,7,3636,50],[4194,4,3637,4],[4194,5,3637,5],[4194,6,3637,6],[4195,4,3638,4],[4196,4,3639,4],[4196,8,3639,8],[4196,9,3639,9,"authInternal"],[4196,21,3639,21],[4196,22,3639,22,"_canInitEmulator"],[4196,38,3639,38],[4196,40,3639,40],[4197,6,3640,8],[4198,6,3641,8],[4199,6,3642,8,"_assert"],[4199,13,3642,15],[4199,14,3642,16,"authInternal"],[4199,26,3642,28],[4199,27,3642,29,"config"],[4199,33,3642,35],[4199,34,3642,36,"emulator"],[4199,42,3642,44],[4199,46,3642,48,"authInternal"],[4199,58,3642,60],[4199,59,3642,61,"emulatorConfig"],[4199,73,3642,75],[4199,75,3642,77,"authInternal"],[4199,87,3642,89],[4199,89,3642,91],[4199,113,3642,115],[4199,114,3642,116],[4199,156,3642,158],[4199,157,3642,159],[4200,6,3643,8],[4201,6,3644,8],[4202,6,3645,8,"_assert"],[4202,13,3645,15],[4202,14,3645,16],[4202,18,3645,16,"deepEqual"],[4202,31,3645,25],[4202,32,3645,25,"deepEqual"],[4202,41,3645,25],[4202,43,3645,26,"emulator"],[4202,51,3645,34],[4202,53,3645,36,"authInternal"],[4202,65,3645,48],[4202,66,3645,49,"config"],[4202,72,3645,55],[4202,73,3645,56,"emulator"],[4202,81,3645,64],[4202,82,3645,65],[4202,86,3646,12],[4202,90,3646,12,"deepEqual"],[4202,103,3646,21],[4202,104,3646,21,"deepEqual"],[4202,113,3646,21],[4202,115,3646,22,"emulatorConfig"],[4202,129,3646,36],[4202,131,3646,38,"authInternal"],[4202,143,3646,50],[4202,144,3646,51,"emulatorConfig"],[4202,158,3646,65],[4202,159,3646,66],[4202,161,3646,68,"authInternal"],[4202,173,3646,80],[4202,175,3646,82],[4202,199,3646,106],[4202,200,3646,107],[4202,242,3646,149],[4202,243,3646,150],[4203,6,3647,8],[4204,6,3648,8],[4205,6,3649,8],[4206,4,3650,4],[4207,4,3651,4,"authInternal"],[4207,16,3651,16],[4207,17,3651,17,"config"],[4207,23,3651,23],[4207,24,3651,24,"emulator"],[4207,32,3651,32],[4207,35,3651,35,"emulator"],[4207,43,3651,43],[4208,4,3652,4,"authInternal"],[4208,16,3652,16],[4208,17,3652,17,"emulatorConfig"],[4208,31,3652,31],[4208,34,3652,34,"emulatorConfig"],[4208,48,3652,48],[4209,4,3653,4,"authInternal"],[4209,16,3653,16],[4209,17,3653,17,"settings"],[4209,25,3653,25],[4209,26,3653,26,"appVerificationDisabledForTesting"],[4209,59,3653,59],[4209,62,3653,62],[4209,66,3653,66],[4210,4,3654,4],[4211,4,3655,4],[4211,8,3655,8],[4211,12,3655,8,"isCloudWorkstation"],[4211,25,3655,26],[4211,26,3655,26,"isCloudWorkstation"],[4211,44,3655,26],[4211,46,3655,27,"host"],[4211,50,3655,31],[4211,51,3655,32],[4211,53,3655,34],[4212,6,3656,8],[4212,11,3656,13],[4212,15,3656,13,"pingServer"],[4212,28,3656,23],[4212,29,3656,23,"pingServer"],[4212,39,3656,23],[4212,41,3656,24],[4212,44,3656,27,"protocol"],[4212,52,3656,35],[4212,57,3656,40,"host"],[4212,61,3656,44],[4212,64,3656,47,"portStr"],[4212,71,3656,54],[4212,73,3656,56],[4212,74,3656,57],[4213,6,3657,8],[4213,10,3657,8,"updateEmulatorBanner"],[4213,23,3657,28],[4213,24,3657,28,"updateEmulatorBanner"],[4213,44,3657,28],[4213,46,3657,29],[4213,52,3657,35],[4213,54,3657,37],[4213,58,3657,41],[4213,59,3657,42],[4214,4,3658,4],[4214,5,3658,5],[4214,11,3659,9],[4214,15,3659,13],[4214,16,3659,14,"disableWarnings"],[4214,31,3659,29],[4214,33,3659,31],[4215,6,3660,8,"emitEmulatorWarning"],[4215,25,3660,27],[4215,26,3660,28],[4215,27,3660,29],[4216,4,3661,4],[4217,2,3662,0],[4218,2,3663,0],[4218,11,3663,9,"extractProtocol"],[4218,26,3663,24,"extractProtocol"],[4218,27,3663,25,"url"],[4218,30,3663,28],[4218,32,3663,30],[4219,4,3664,4],[4219,10,3664,10,"protocolEnd"],[4219,21,3664,21],[4219,24,3664,24,"url"],[4219,27,3664,27],[4219,28,3664,28,"indexOf"],[4219,35,3664,35],[4219,36,3664,36],[4219,39,3664,39],[4219,40,3664,40],[4220,4,3665,4],[4220,11,3665,11,"protocolEnd"],[4220,22,3665,22],[4220,25,3665,25],[4220,26,3665,26],[4220,29,3665,29],[4220,31,3665,31],[4220,34,3665,34,"url"],[4220,37,3665,37],[4220,38,3665,38,"substr"],[4220,44,3665,44],[4220,45,3665,45],[4220,46,3665,46],[4220,48,3665,48,"protocolEnd"],[4220,59,3665,59],[4220,62,3665,62],[4220,63,3665,63],[4220,64,3665,64],[4221,2,3666,0],[4222,2,3667,0],[4222,11,3667,9,"extractHostAndPort"],[4222,29,3667,27,"extractHostAndPort"],[4222,30,3667,28,"url"],[4222,33,3667,31],[4222,35,3667,33],[4223,4,3668,4],[4223,10,3668,10,"protocol"],[4223,18,3668,18],[4223,21,3668,21,"extractProtocol"],[4223,36,3668,36],[4223,37,3668,37,"url"],[4223,40,3668,40],[4223,41,3668,41],[4224,4,3669,4],[4224,10,3669,10,"authority"],[4224,19,3669,19],[4224,22,3669,22],[4224,40,3669,40],[4224,41,3669,41,"exec"],[4224,45,3669,45],[4224,46,3669,46,"url"],[4224,49,3669,49],[4224,50,3669,50,"substr"],[4224,56,3669,56],[4224,57,3669,57,"protocol"],[4224,65,3669,65],[4224,66,3669,66,"length"],[4224,72,3669,72],[4224,73,3669,73],[4224,74,3669,74],[4224,75,3669,75],[4224,76,3669,76],[4225,4,3670,4],[4225,8,3670,8],[4225,9,3670,9,"authority"],[4225,18,3670,18],[4225,20,3670,20],[4226,6,3671,8],[4226,13,3671,15],[4227,8,3671,17,"host"],[4227,12,3671,21],[4227,14,3671,23],[4227,16,3671,25],[4228,8,3671,27,"port"],[4228,12,3671,31],[4228,14,3671,33],[4229,6,3671,38],[4229,7,3671,39],[4230,4,3672,4],[4231,4,3673,4],[4231,10,3673,10,"hostAndPort"],[4231,21,3673,21],[4231,24,3673,24,"authority"],[4231,33,3673,33],[4231,34,3673,34],[4231,35,3673,35],[4231,36,3673,36],[4231,37,3673,37,"split"],[4231,42,3673,42],[4231,43,3673,43],[4231,46,3673,46],[4231,47,3673,47],[4231,48,3673,48,"pop"],[4231,51,3673,51],[4231,52,3673,52],[4231,53,3673,53],[4231,57,3673,57],[4231,59,3673,59],[4231,60,3673,60],[4231,61,3673,61],[4232,4,3674,4],[4232,10,3674,10,"bracketedIPv6"],[4232,23,3674,23],[4232,26,3674,26],[4232,46,3674,46],[4232,47,3674,47,"exec"],[4232,51,3674,51],[4232,52,3674,52,"hostAndPort"],[4232,63,3674,63],[4232,64,3674,64],[4233,4,3675,4],[4233,8,3675,8,"bracketedIPv6"],[4233,21,3675,21],[4233,23,3675,23],[4234,6,3676,8],[4234,12,3676,14,"host"],[4234,16,3676,18],[4234,19,3676,21,"bracketedIPv6"],[4234,32,3676,34],[4234,33,3676,35],[4234,34,3676,36],[4234,35,3676,37],[4235,6,3677,8],[4235,13,3677,15],[4236,8,3677,17,"host"],[4236,12,3677,21],[4237,8,3677,23,"port"],[4237,12,3677,27],[4237,14,3677,29,"parsePort"],[4237,23,3677,38],[4237,24,3677,39,"hostAndPort"],[4237,35,3677,50],[4237,36,3677,51,"substr"],[4237,42,3677,57],[4237,43,3677,58,"host"],[4237,47,3677,62],[4237,48,3677,63,"length"],[4237,54,3677,69],[4237,57,3677,72],[4237,58,3677,73],[4237,59,3677,74],[4238,6,3677,76],[4238,7,3677,77],[4239,4,3678,4],[4239,5,3678,5],[4239,11,3679,9],[4240,6,3680,8],[4240,12,3680,14],[4240,13,3680,15,"host"],[4240,17,3680,19],[4240,19,3680,21,"port"],[4240,23,3680,25],[4240,24,3680,26],[4240,27,3680,29,"hostAndPort"],[4240,38,3680,40],[4240,39,3680,41,"split"],[4240,44,3680,46],[4240,45,3680,47],[4240,48,3680,50],[4240,49,3680,51],[4241,6,3681,8],[4241,13,3681,15],[4242,8,3681,17,"host"],[4242,12,3681,21],[4243,8,3681,23,"port"],[4243,12,3681,27],[4243,14,3681,29,"parsePort"],[4243,23,3681,38],[4243,24,3681,39,"port"],[4243,28,3681,43],[4244,6,3681,45],[4244,7,3681,46],[4245,4,3682,4],[4246,2,3683,0],[4247,2,3684,0],[4247,11,3684,9,"parsePort"],[4247,20,3684,18,"parsePort"],[4247,21,3684,19,"portStr"],[4247,28,3684,26],[4247,30,3684,28],[4248,4,3685,4],[4248,8,3685,8],[4248,9,3685,9,"portStr"],[4248,16,3685,16],[4248,18,3685,18],[4249,6,3686,8],[4249,13,3686,15],[4249,17,3686,19],[4250,4,3687,4],[4251,4,3688,4],[4251,10,3688,10,"port"],[4251,14,3688,14],[4251,17,3688,17,"Number"],[4251,23,3688,23],[4251,24,3688,24,"portStr"],[4251,31,3688,31],[4251,32,3688,32],[4252,4,3689,4],[4252,8,3689,8,"isNaN"],[4252,13,3689,13],[4252,14,3689,14,"port"],[4252,18,3689,18],[4252,19,3689,19],[4252,21,3689,21],[4253,6,3690,8],[4253,13,3690,15],[4253,17,3690,19],[4254,4,3691,4],[4255,4,3692,4],[4255,11,3692,11,"port"],[4255,15,3692,15],[4256,2,3693,0],[4257,2,3694,0],[4257,11,3694,9,"emitEmulatorWarning"],[4257,30,3694,28,"emitEmulatorWarning"],[4257,31,3694,28],[4257,33,3694,31],[4258,4,3695,4],[4258,13,3695,13,"attachBanner"],[4258,25,3695,25,"attachBanner"],[4258,26,3695,25],[4258,28,3695,28],[4259,6,3696,8],[4259,12,3696,14,"el"],[4259,14,3696,16],[4259,17,3696,19,"document"],[4259,25,3696,27],[4259,26,3696,28,"createElement"],[4259,39,3696,41],[4259,40,3696,42],[4259,43,3696,45],[4259,44,3696,46],[4260,6,3697,8],[4260,12,3697,14,"sty"],[4260,15,3697,17],[4260,18,3697,20,"el"],[4260,20,3697,22],[4260,21,3697,23,"style"],[4260,26,3697,28],[4261,6,3698,8,"el"],[4261,8,3698,10],[4261,9,3698,11,"innerText"],[4261,18,3698,20],[4261,21,3699,12],[4261,88,3699,79],[4262,6,3700,8,"sty"],[4262,9,3700,11],[4262,10,3700,12,"position"],[4262,18,3700,20],[4262,21,3700,23],[4262,28,3700,30],[4263,6,3701,8,"sty"],[4263,9,3701,11],[4263,10,3701,12,"width"],[4263,15,3701,17],[4263,18,3701,20],[4263,24,3701,26],[4264,6,3702,8,"sty"],[4264,9,3702,11],[4264,10,3702,12,"backgroundColor"],[4264,25,3702,27],[4264,28,3702,30],[4264,37,3702,39],[4265,6,3703,8,"sty"],[4265,9,3703,11],[4265,10,3703,12,"border"],[4265,16,3703,18],[4265,19,3703,21],[4265,39,3703,41],[4266,6,3704,8,"sty"],[4266,9,3704,11],[4266,10,3704,12,"color"],[4266,15,3704,17],[4266,18,3704,20],[4266,27,3704,29],[4267,6,3705,8,"sty"],[4267,9,3705,11],[4267,10,3705,12,"bottom"],[4267,16,3705,18],[4267,19,3705,21],[4267,24,3705,26],[4268,6,3706,8,"sty"],[4268,9,3706,11],[4268,10,3706,12,"left"],[4268,14,3706,16],[4268,17,3706,19],[4268,22,3706,24],[4269,6,3707,8,"sty"],[4269,9,3707,11],[4269,10,3707,12,"margin"],[4269,16,3707,18],[4269,19,3707,21],[4269,24,3707,26],[4270,6,3708,8,"sty"],[4270,9,3708,11],[4270,10,3708,12,"zIndex"],[4270,16,3708,18],[4270,19,3708,21],[4270,26,3708,28],[4271,6,3709,8,"sty"],[4271,9,3709,11],[4271,10,3709,12,"textAlign"],[4271,19,3709,21],[4271,22,3709,24],[4271,30,3709,32],[4272,6,3710,8,"el"],[4272,8,3710,10],[4272,9,3710,11,"classList"],[4272,18,3710,20],[4272,19,3710,21,"add"],[4272,22,3710,24],[4272,23,3710,25],[4272,50,3710,52],[4272,51,3710,53],[4273,6,3711,8,"document"],[4273,14,3711,16],[4273,15,3711,17,"body"],[4273,19,3711,21],[4273,20,3711,22,"appendChild"],[4273,31,3711,33],[4273,32,3711,34,"el"],[4273,34,3711,36],[4273,35,3711,37],[4274,4,3712,4],[4275,4,3713,4],[4275,8,3713,8],[4275,15,3713,15,"console"],[4275,22,3713,22],[4275,27,3713,27],[4275,38,3713,38],[4275,42,3713,42],[4275,49,3713,49,"console"],[4275,56,3713,56],[4275,57,3713,57,"info"],[4275,61,3713,61],[4275,66,3713,66],[4275,76,3713,76],[4275,78,3713,78],[4276,6,3714,8,"console"],[4276,13,3714,15],[4276,14,3714,16,"info"],[4276,18,3714,20],[4276,19,3714,21],[4276,62,3714,64],[4276,65,3715,12],[4276,126,3715,73],[4276,129,3716,12],[4276,155,3716,38],[4276,156,3716,39],[4277,4,3717,4],[4278,4,3718,4],[4278,8,3718,8],[4278,17,3718,41],[4278,24,3718,48,"document"],[4278,32,3718,56],[4278,37,3718,61],[4278,48,3718,72],[4278,50,3718,74],[4279,6,3719,8],[4279,10,3719,12,"document"],[4279,18,3719,20],[4279,19,3719,21,"readyState"],[4279,29,3719,31],[4279,34,3719,36],[4279,43,3719,45],[4279,45,3719,47],[4280,8,3720,12,"window"],[4280,14,3720,18],[4280,15,3720,19,"addEventListener"],[4280,31,3720,35],[4280,32,3720,36],[4280,50,3720,54],[4280,52,3720,56,"attachBanner"],[4280,64,3720,68],[4280,65,3720,69],[4281,6,3721,8],[4281,7,3721,9],[4281,13,3722,13],[4282,8,3723,12,"attachBanner"],[4282,20,3723,24],[4282,21,3723,25],[4282,22,3723,26],[4283,6,3724,8],[4284,4,3725,4],[4285,2,3726,0],[4287,2,3728,0],[4288,0,3729,0],[4289,0,3730,0],[4290,0,3731,0],[4291,0,3732,0],[4292,0,3733,0],[4293,0,3734,0],[4294,0,3735,0],[4295,0,3736,0],[4296,0,3737,0],[4297,0,3738,0],[4298,0,3739,0],[4299,0,3740,0],[4300,0,3741,0],[4301,0,3742,0],[4302,0,3743,0],[4303,2,3744,0],[4304,0,3745,0],[4305,0,3746,0],[4306,0,3747,0],[4307,0,3748,0],[4308,0,3749,0],[4309,0,3750,0],[4310,0,3751,0],[4311,2,3752,0],[4311,8,3752,6,"AuthCredential"],[4311,22,3752,20],[4311,23,3752,21],[4312,4,3753,4],[4313,4,3754,4,"constructor"],[4313,15,3754,15,"constructor"],[4314,4,3755,4],[4315,0,3756,0],[4316,0,3757,0],[4317,0,3758,0],[4318,0,3759,0],[4319,0,3760,0],[4320,4,3761,4,"providerId"],[4320,14,3761,14],[4321,4,3762,4],[4322,0,3763,0],[4323,0,3764,0],[4324,0,3765,0],[4325,0,3766,0],[4326,0,3767,0],[4327,0,3768,0],[4328,0,3769,0],[4329,4,3770,4,"signInMethod"],[4329,16,3770,16],[4329,18,3770,18],[4330,6,3771,8],[4330,10,3771,12],[4330,11,3771,13,"providerId"],[4330,21,3771,23],[4330,24,3771,26,"providerId"],[4330,34,3771,36],[4331,6,3772,8],[4331,10,3772,12],[4331,11,3772,13,"signInMethod"],[4331,23,3772,25],[4331,26,3772,28,"signInMethod"],[4331,38,3772,40],[4332,4,3773,4],[4333,4,3774,4],[4334,0,3775,0],[4335,0,3776,0],[4336,0,3777,0],[4337,0,3778,0],[4338,4,3779,4,"toJSON"],[4338,10,3779,10,"toJSON"],[4338,11,3779,10],[4338,13,3779,13],[4339,6,3780,8],[4339,13,3780,15,"debugFail"],[4339,22,3780,24],[4339,23,3780,25],[4339,40,3780,42],[4339,41,3780,43],[4340,4,3781,4],[4341,4,3782,4],[4342,4,3783,4,"_getIdTokenResponse"],[4342,23,3783,23,"_getIdTokenResponse"],[4342,24,3783,24,"_auth"],[4342,29,3783,29],[4342,31,3783,31],[4343,6,3784,8],[4343,13,3784,15,"debugFail"],[4343,22,3784,24],[4343,23,3784,25],[4343,40,3784,42],[4343,41,3784,43],[4344,4,3785,4],[4345,4,3786,4],[4346,4,3787,4,"_linkToIdToken"],[4346,18,3787,18,"_linkToIdToken"],[4346,19,3787,19,"_auth"],[4346,24,3787,24],[4346,26,3787,26,"_idToken"],[4346,34,3787,34],[4346,36,3787,36],[4347,6,3788,8],[4347,13,3788,15,"debugFail"],[4347,22,3788,24],[4347,23,3788,25],[4347,40,3788,42],[4347,41,3788,43],[4348,4,3789,4],[4349,4,3790,4],[4350,4,3791,4,"_getReauthenticationResolver"],[4350,32,3791,32,"_getReauthenticationResolver"],[4350,33,3791,33,"_auth"],[4350,38,3791,38],[4350,40,3791,40],[4351,6,3792,8],[4351,13,3792,15,"debugFail"],[4351,22,3792,24],[4351,23,3792,25],[4351,40,3792,42],[4351,41,3792,43],[4352,4,3793,4],[4353,2,3794,0],[4355,2,3796,0],[4356,0,3797,0],[4357,0,3798,0],[4358,0,3799,0],[4359,0,3800,0],[4360,0,3801,0],[4361,0,3802,0],[4362,0,3803,0],[4363,0,3804,0],[4364,0,3805,0],[4365,0,3806,0],[4366,0,3807,0],[4367,0,3808,0],[4368,0,3809,0],[4369,0,3810,0],[4370,0,3811,0],[4371,2,3812,0],[4371,17,3812,15,"resetPassword"],[4371,30,3812,28,"resetPassword"],[4371,31,3812,29,"auth"],[4371,35,3812,33],[4371,37,3812,35,"request"],[4371,44,3812,42],[4371,46,3812,44],[4372,4,3813,4],[4372,11,3813,11,"_performApiRequest"],[4372,29,3813,29],[4372,30,3813,30,"auth"],[4372,34,3813,34],[4372,36,3813,36],[4372,42,3813,42],[4372,43,3813,43],[4372,66,3813,66],[4372,94,3813,94],[4372,95,3813,95],[4372,126,3813,126,"_addTidIfNecessary"],[4372,144,3813,144],[4372,145,3813,145,"auth"],[4372,149,3813,149],[4372,151,3813,151,"request"],[4372,158,3813,158],[4372,159,3813,159],[4372,160,3813,160],[4373,2,3814,0],[4374,2,3815,0],[4374,17,3815,15,"updateEmailPassword"],[4374,36,3815,34,"updateEmailPassword"],[4374,37,3815,35,"auth"],[4374,41,3815,39],[4374,43,3815,41,"request"],[4374,50,3815,48],[4374,52,3815,50],[4375,4,3816,4],[4375,11,3816,11,"_performApiRequest"],[4375,29,3816,29],[4375,30,3816,30,"auth"],[4375,34,3816,34],[4375,36,3816,36],[4375,42,3816,42],[4375,43,3816,43],[4375,66,3816,66],[4375,87,3816,87],[4375,88,3816,88],[4375,121,3816,121,"request"],[4375,128,3816,128],[4375,129,3816,129],[4376,2,3817,0],[4377,2,3818,0],[4378,2,3819,0],[4379,2,3820,0],[4379,17,3820,15,"linkEmailPassword"],[4379,34,3820,32,"linkEmailPassword"],[4379,35,3820,33,"auth"],[4379,39,3820,37],[4379,41,3820,39,"request"],[4379,48,3820,46],[4379,50,3820,48],[4380,4,3821,4],[4380,11,3821,11,"_performApiRequest"],[4380,29,3821,29],[4380,30,3821,30,"auth"],[4380,34,3821,34],[4380,36,3821,36],[4380,42,3821,42],[4380,43,3821,43],[4380,66,3821,66],[4380,87,3821,87],[4380,88,3821,88],[4380,112,3821,112,"request"],[4380,119,3821,119],[4380,120,3821,120],[4381,2,3822,0],[4382,2,3823,0],[4382,17,3823,15,"applyActionCode$1"],[4382,34,3823,32,"applyActionCode$1"],[4382,35,3823,33,"auth"],[4382,39,3823,37],[4382,41,3823,39,"request"],[4382,48,3823,46],[4382,50,3823,48],[4383,4,3824,4],[4383,11,3824,11,"_performApiRequest"],[4383,29,3824,29],[4383,30,3824,30,"auth"],[4383,34,3824,34],[4383,36,3824,36],[4383,42,3824,42],[4383,43,3824,43],[4383,66,3824,66],[4383,87,3824,87],[4383,88,3824,88],[4383,121,3824,121,"_addTidIfNecessary"],[4383,139,3824,139],[4383,140,3824,140,"auth"],[4383,144,3824,144],[4383,146,3824,146,"request"],[4383,153,3824,153],[4383,154,3824,154],[4383,155,3824,155],[4384,2,3825,0],[4386,2,3827,0],[4387,0,3828,0],[4388,0,3829,0],[4389,0,3830,0],[4390,0,3831,0],[4391,0,3832,0],[4392,0,3833,0],[4393,0,3834,0],[4394,0,3835,0],[4395,0,3836,0],[4396,0,3837,0],[4397,0,3838,0],[4398,0,3839,0],[4399,0,3840,0],[4400,0,3841,0],[4401,0,3842,0],[4402,2,3843,0],[4402,17,3843,15,"signInWithPassword"],[4402,35,3843,33,"signInWithPassword"],[4402,36,3843,34,"auth"],[4402,40,3843,38],[4402,42,3843,40,"request"],[4402,49,3843,47],[4402,51,3843,49],[4403,4,3844,4],[4403,11,3844,11,"_performSignInRequest"],[4403,32,3844,32],[4403,33,3844,33,"auth"],[4403,37,3844,37],[4403,39,3844,39],[4403,45,3844,45],[4403,46,3844,46],[4403,69,3844,69],[4403,102,3844,102],[4403,103,3844,103],[4403,141,3844,141,"_addTidIfNecessary"],[4403,159,3844,159],[4403,160,3844,160,"auth"],[4403,164,3844,164],[4403,166,3844,166,"request"],[4403,173,3844,173],[4403,174,3844,174],[4403,175,3844,175],[4404,2,3845,0],[4405,2,3846,0],[4405,17,3846,15,"sendOobCode"],[4405,28,3846,26,"sendOobCode"],[4405,29,3846,27,"auth"],[4405,33,3846,31],[4405,35,3846,33,"request"],[4405,42,3846,40],[4405,44,3846,42],[4406,4,3847,4],[4406,11,3847,11,"_performApiRequest"],[4406,29,3847,29],[4406,30,3847,30,"auth"],[4406,34,3847,34],[4406,36,3847,36],[4406,42,3847,42],[4406,43,3847,43],[4406,66,3847,66],[4406,92,3847,92],[4406,93,3847,93],[4406,123,3847,123,"_addTidIfNecessary"],[4406,141,3847,141],[4406,142,3847,142,"auth"],[4406,146,3847,146],[4406,148,3847,148,"request"],[4406,155,3847,155],[4406,156,3847,156],[4406,157,3847,157],[4407,2,3848,0],[4408,2,3849,0],[4408,17,3849,15,"sendEmailVerification$1"],[4408,40,3849,38,"sendEmailVerification$1"],[4408,41,3849,39,"auth"],[4408,45,3849,43],[4408,47,3849,45,"request"],[4408,54,3849,52],[4408,56,3849,54],[4409,4,3850,4],[4409,11,3850,11,"sendOobCode"],[4409,22,3850,22],[4409,23,3850,23,"auth"],[4409,27,3850,27],[4409,29,3850,29,"request"],[4409,36,3850,36],[4409,37,3850,37],[4410,2,3851,0],[4411,2,3852,0],[4411,17,3852,15,"sendPasswordResetEmail$1"],[4411,41,3852,39,"sendPasswordResetEmail$1"],[4411,42,3852,40,"auth"],[4411,46,3852,44],[4411,48,3852,46,"request"],[4411,55,3852,53],[4411,57,3852,55],[4412,4,3853,4],[4412,11,3853,11,"sendOobCode"],[4412,22,3853,22],[4412,23,3853,23,"auth"],[4412,27,3853,27],[4412,29,3853,29,"request"],[4412,36,3853,36],[4412,37,3853,37],[4413,2,3854,0],[4414,2,3855,0],[4414,17,3855,15,"sendSignInLinkToEmail$1"],[4414,40,3855,38,"sendSignInLinkToEmail$1"],[4414,41,3855,39,"auth"],[4414,45,3855,43],[4414,47,3855,45,"request"],[4414,54,3855,52],[4414,56,3855,54],[4415,4,3856,4],[4415,11,3856,11,"sendOobCode"],[4415,22,3856,22],[4415,23,3856,23,"auth"],[4415,27,3856,27],[4415,29,3856,29,"request"],[4415,36,3856,36],[4415,37,3856,37],[4416,2,3857,0],[4417,2,3858,0],[4417,17,3858,15,"verifyAndChangeEmail"],[4417,37,3858,35,"verifyAndChangeEmail"],[4417,38,3858,36,"auth"],[4417,42,3858,40],[4417,44,3858,42,"request"],[4417,51,3858,49],[4417,53,3858,51],[4418,4,3859,4],[4418,11,3859,11,"sendOobCode"],[4418,22,3859,22],[4418,23,3859,23,"auth"],[4418,27,3859,27],[4418,29,3859,29,"request"],[4418,36,3859,36],[4418,37,3859,37],[4419,2,3860,0],[4421,2,3862,0],[4422,0,3863,0],[4423,0,3864,0],[4424,0,3865,0],[4425,0,3866,0],[4426,0,3867,0],[4427,0,3868,0],[4428,0,3869,0],[4429,0,3870,0],[4430,0,3871,0],[4431,0,3872,0],[4432,0,3873,0],[4433,0,3874,0],[4434,0,3875,0],[4435,0,3876,0],[4436,0,3877,0],[4437,2,3878,0],[4437,17,3878,15,"signInWithEmailLink$1"],[4437,38,3878,36,"signInWithEmailLink$1"],[4437,39,3878,37,"auth"],[4437,43,3878,41],[4437,45,3878,43,"request"],[4437,52,3878,50],[4437,54,3878,52],[4438,4,3879,4],[4438,11,3879,11,"_performSignInRequest"],[4438,32,3879,32],[4438,33,3879,33,"auth"],[4438,37,3879,37],[4438,39,3879,39],[4438,45,3879,45],[4438,46,3879,46],[4438,69,3879,69],[4438,103,3879,103],[4438,104,3879,104],[4438,144,3879,144,"_addTidIfNecessary"],[4438,162,3879,162],[4438,163,3879,163,"auth"],[4438,167,3879,167],[4438,169,3879,169,"request"],[4438,176,3879,176],[4438,177,3879,177],[4438,178,3879,178],[4439,2,3880,0],[4440,2,3881,0],[4440,17,3881,15,"signInWithEmailLinkForLinking"],[4440,46,3881,44,"signInWithEmailLinkForLinking"],[4440,47,3881,45,"auth"],[4440,51,3881,49],[4440,53,3881,51,"request"],[4440,60,3881,58],[4440,62,3881,60],[4441,4,3882,4],[4441,11,3882,11,"_performSignInRequest"],[4441,32,3882,32],[4441,33,3882,33,"auth"],[4441,37,3882,37],[4441,39,3882,39],[4441,45,3882,45],[4441,46,3882,46],[4441,69,3882,69],[4441,103,3882,103],[4441,104,3882,104],[4441,144,3882,144,"_addTidIfNecessary"],[4441,162,3882,162],[4441,163,3882,163,"auth"],[4441,167,3882,167],[4441,169,3882,169,"request"],[4441,176,3882,176],[4441,177,3882,177],[4441,178,3882,178],[4442,2,3883,0],[4444,2,3885,0],[4445,0,3886,0],[4446,0,3887,0],[4447,0,3888,0],[4448,0,3889,0],[4449,0,3890,0],[4450,0,3891,0],[4451,0,3892,0],[4452,0,3893,0],[4453,0,3894,0],[4454,0,3895,0],[4455,0,3896,0],[4456,0,3897,0],[4457,0,3898,0],[4458,0,3899,0],[4459,0,3900,0],[4460,2,3901,0],[4461,0,3902,0],[4462,0,3903,0],[4463,0,3904,0],[4464,0,3905,0],[4465,0,3906,0],[4466,0,3907,0],[4467,0,3908,0],[4468,0,3909,0],[4469,0,3910,0],[4470,2,3911,0],[4470,8,3911,6,"EmailAuthCredential"],[4470,27,3911,25],[4470,36,3911,34,"AuthCredential"],[4470,50,3911,48],[4470,51,3911,49],[4471,4,3912,4],[4472,4,3913,4,"constructor"],[4472,15,3913,15,"constructor"],[4472,16,3914,4],[4473,4,3915,4,"_email"],[4473,10,3915,10],[4473,12,3916,4],[4474,4,3917,4,"_password"],[4474,13,3917,13],[4474,15,3917,15,"signInMethod"],[4474,27,3917,27],[4474,29,3918,4],[4475,4,3919,4,"_tenantId"],[4475,13,3919,13],[4475,16,3919,16],[4475,20,3919,20],[4475,22,3919,22],[4476,6,3920,8],[4476,11,3920,13],[4476,12,3920,14],[4476,22,3920,24],[4476,23,3920,25],[4476,50,3920,52,"signInMethod"],[4476,62,3920,64],[4476,63,3920,65],[4477,6,3921,8],[4477,10,3921,12],[4477,11,3921,13,"_email"],[4477,17,3921,19],[4477,20,3921,22,"_email"],[4477,26,3921,28],[4478,6,3922,8],[4478,10,3922,12],[4478,11,3922,13,"_password"],[4478,20,3922,22],[4478,23,3922,25,"_password"],[4478,32,3922,34],[4479,6,3923,8],[4479,10,3923,12],[4479,11,3923,13,"_tenantId"],[4479,20,3923,22],[4479,23,3923,25,"_tenantId"],[4479,32,3923,34],[4480,4,3924,4],[4481,4,3925,4],[4482,4,3926,4],[4482,11,3926,11,"_fromEmailAndPassword"],[4482,32,3926,32,"_fromEmailAndPassword"],[4482,33,3926,33,"email"],[4482,38,3926,38],[4482,40,3926,40,"password"],[4482,48,3926,48],[4482,50,3926,50],[4483,6,3927,8],[4483,13,3927,15],[4483,17,3927,19,"EmailAuthCredential"],[4483,36,3927,38],[4483,37,3927,39,"email"],[4483,42,3927,44],[4483,44,3927,46,"password"],[4483,52,3927,54],[4483,54,3927,56],[4483,64,3927,66],[4483,65,3927,67],[4483,98,3927,100],[4483,99,3927,101],[4484,4,3928,4],[4485,4,3929,4],[4486,4,3930,4],[4486,11,3930,11,"_fromEmailAndCode"],[4486,28,3930,28,"_fromEmailAndCode"],[4486,29,3930,29,"email"],[4486,34,3930,34],[4486,36,3930,36,"oobCode"],[4486,43,3930,43],[4486,45,3930,45,"tenantId"],[4486,53,3930,53],[4486,56,3930,56],[4486,60,3930,60],[4486,62,3930,62],[4487,6,3931,8],[4487,13,3931,15],[4487,17,3931,19,"EmailAuthCredential"],[4487,36,3931,38],[4487,37,3931,39,"email"],[4487,42,3931,44],[4487,44,3931,46,"oobCode"],[4487,51,3931,53],[4487,53,3931,55],[4487,64,3931,66],[4487,65,3931,67],[4487,96,3931,98,"tenantId"],[4487,104,3931,106],[4487,105,3931,107],[4488,4,3932,4],[4489,4,3933,4],[4490,4,3934,4,"toJSON"],[4490,10,3934,10,"toJSON"],[4490,11,3934,10],[4490,13,3934,13],[4491,6,3935,8],[4491,13,3935,15],[4492,8,3936,12,"email"],[4492,13,3936,17],[4492,15,3936,19],[4492,19,3936,23],[4492,20,3936,24,"_email"],[4492,26,3936,30],[4493,8,3937,12,"password"],[4493,16,3937,20],[4493,18,3937,22],[4493,22,3937,26],[4493,23,3937,27,"_password"],[4493,32,3937,36],[4494,8,3938,12,"signInMethod"],[4494,20,3938,24],[4494,22,3938,26],[4494,26,3938,30],[4494,27,3938,31,"signInMethod"],[4494,39,3938,43],[4495,8,3939,12,"tenantId"],[4495,16,3939,20],[4495,18,3939,22],[4495,22,3939,26],[4495,23,3939,27,"_tenantId"],[4496,6,3940,8],[4496,7,3940,9],[4497,4,3941,4],[4498,4,3942,4],[4499,0,3943,0],[4500,0,3944,0],[4501,0,3945,0],[4502,0,3946,0],[4503,0,3947,0],[4504,0,3948,0],[4505,0,3949,0],[4506,4,3950,4],[4506,11,3950,11,"fromJSON"],[4506,19,3950,19,"fromJSON"],[4506,20,3950,20,"json"],[4506,24,3950,24],[4506,26,3950,26],[4507,6,3951,8],[4507,12,3951,14,"obj"],[4507,15,3951,17],[4507,18,3951,20],[4507,25,3951,27,"json"],[4507,29,3951,31],[4507,34,3951,36],[4507,42,3951,44],[4507,45,3951,47,"JSON"],[4507,49,3951,51],[4507,50,3951,52,"parse"],[4507,55,3951,57],[4507,56,3951,58,"json"],[4507,60,3951,62],[4507,61,3951,63],[4507,64,3951,66,"json"],[4507,68,3951,70],[4508,6,3952,8],[4508,10,3952,12,"obj"],[4508,13,3952,15],[4508,15,3952,17,"email"],[4508,20,3952,22],[4508,24,3952,26,"obj"],[4508,27,3952,29],[4508,29,3952,31,"password"],[4508,37,3952,39],[4508,39,3952,41],[4509,8,3953,12],[4509,12,3953,16,"obj"],[4509,15,3953,19],[4509,16,3953,20,"signInMethod"],[4509,28,3953,32],[4509,33,3953,37],[4509,43,3953,47],[4509,44,3953,48],[4509,79,3953,83],[4510,10,3954,16],[4510,17,3954,23],[4510,21,3954,27],[4510,22,3954,28,"_fromEmailAndPassword"],[4510,43,3954,49],[4510,44,3954,50,"obj"],[4510,47,3954,53],[4510,48,3954,54,"email"],[4510,53,3954,59],[4510,55,3954,61,"obj"],[4510,58,3954,64],[4510,59,3954,65,"password"],[4510,67,3954,73],[4510,68,3954,74],[4511,8,3955,12],[4511,9,3955,13],[4511,15,3956,17],[4511,19,3956,21,"obj"],[4511,22,3956,24],[4511,23,3956,25,"signInMethod"],[4511,35,3956,37],[4511,40,3956,42],[4511,51,3956,53],[4511,52,3956,54],[4511,83,3956,85],[4512,10,3957,16],[4512,17,3957,23],[4512,21,3957,27],[4512,22,3957,28,"_fromEmailAndCode"],[4512,39,3957,45],[4512,40,3957,46,"obj"],[4512,43,3957,49],[4512,44,3957,50,"email"],[4512,49,3957,55],[4512,51,3957,57,"obj"],[4512,54,3957,60],[4512,55,3957,61,"password"],[4512,63,3957,69],[4512,65,3957,71,"obj"],[4512,68,3957,74],[4512,69,3957,75,"tenantId"],[4512,77,3957,83],[4512,78,3957,84],[4513,8,3958,12],[4514,6,3959,8],[4515,6,3960,8],[4515,13,3960,15],[4515,17,3960,19],[4516,4,3961,4],[4517,4,3962,4],[4518,4,3963,4],[4518,10,3963,10,"_getIdTokenResponse"],[4518,29,3963,29,"_getIdTokenResponse"],[4518,30,3963,30,"auth"],[4518,34,3963,34],[4518,36,3963,36],[4519,6,3964,8],[4519,14,3964,16],[4519,18,3964,20],[4519,19,3964,21,"signInMethod"],[4519,31,3964,33],[4520,8,3965,12],[4520,13,3965,17],[4520,23,3965,27],[4520,24,3965,28],[4521,10,3966,16],[4521,16,3966,22,"request"],[4521,23,3966,29],[4521,26,3966,32],[4522,12,3967,20,"returnSecureToken"],[4522,29,3967,37],[4522,31,3967,39],[4522,35,3967,43],[4523,12,3968,20,"email"],[4523,17,3968,25],[4523,19,3968,27],[4523,23,3968,31],[4523,24,3968,32,"_email"],[4523,30,3968,38],[4524,12,3969,20,"password"],[4524,20,3969,28],[4524,22,3969,30],[4524,26,3969,34],[4524,27,3969,35,"_password"],[4524,36,3969,44],[4525,12,3970,20,"clientType"],[4525,22,3970,30],[4525,24,3970,32],[4525,41,3970,49],[4525,42,3970,50],[4526,10,3971,16],[4526,11,3971,17],[4527,10,3972,16],[4527,17,3972,23,"handleRecaptchaFlow"],[4527,36,3972,42],[4527,37,3972,43,"auth"],[4527,41,3972,47],[4527,43,3972,49,"request"],[4527,50,3972,56],[4527,52,3972,58],[4527,72,3972,78],[4527,73,3972,79],[4527,122,3972,128,"signInWithPassword"],[4527,140,3972,146],[4527,142,3972,148],[4527,167,3972,173],[4527,168,3972,174],[4527,219,3972,225],[4527,220,3972,226],[4528,8,3973,12],[4528,13,3973,17],[4528,24,3973,28],[4528,25,3973,29],[4529,10,3974,16],[4529,17,3974,23,"signInWithEmailLink$1"],[4529,38,3974,44],[4529,39,3974,45,"auth"],[4529,43,3974,49],[4529,45,3974,51],[4530,12,3975,20,"email"],[4530,17,3975,25],[4530,19,3975,27],[4530,23,3975,31],[4530,24,3975,32,"_email"],[4530,30,3975,38],[4531,12,3976,20,"oobCode"],[4531,19,3976,27],[4531,21,3976,29],[4531,25,3976,33],[4531,26,3976,34,"_password"],[4532,10,3977,16],[4532,11,3977,17],[4532,12,3977,18],[4533,8,3978,12],[4534,10,3979,16,"_fail"],[4534,15,3979,21],[4534,16,3979,22,"auth"],[4534,20,3979,26],[4534,22,3979,28],[4534,38,3979,44],[4534,39,3979,45],[4534,73,3979,79],[4534,74,3979,80],[4535,6,3980,8],[4536,4,3981,4],[4537,4,3982,4],[4538,4,3983,4],[4538,10,3983,10,"_linkToIdToken"],[4538,24,3983,24,"_linkToIdToken"],[4538,25,3983,25,"auth"],[4538,29,3983,29],[4538,31,3983,31,"idToken"],[4538,38,3983,38],[4538,40,3983,40],[4539,6,3984,8],[4539,14,3984,16],[4539,18,3984,20],[4539,19,3984,21,"signInMethod"],[4539,31,3984,33],[4540,8,3985,12],[4540,13,3985,17],[4540,23,3985,27],[4540,24,3985,28],[4541,10,3986,16],[4541,16,3986,22,"request"],[4541,23,3986,29],[4541,26,3986,32],[4542,12,3987,20,"idToken"],[4542,19,3987,27],[4543,12,3988,20,"returnSecureToken"],[4543,29,3988,37],[4543,31,3988,39],[4543,35,3988,43],[4544,12,3989,20,"email"],[4544,17,3989,25],[4544,19,3989,27],[4544,23,3989,31],[4544,24,3989,32,"_email"],[4544,30,3989,38],[4545,12,3990,20,"password"],[4545,20,3990,28],[4545,22,3990,30],[4545,26,3990,34],[4545,27,3990,35,"_password"],[4545,36,3990,44],[4546,12,3991,20,"clientType"],[4546,22,3991,30],[4546,24,3991,32],[4546,41,3991,49],[4546,42,3991,50],[4547,10,3992,16],[4547,11,3992,17],[4548,10,3993,16],[4548,17,3993,23,"handleRecaptchaFlow"],[4548,36,3993,42],[4548,37,3993,43,"auth"],[4548,41,3993,47],[4548,43,3993,49,"request"],[4548,50,3993,56],[4548,52,3993,58],[4548,68,3993,74],[4548,69,3993,75],[4548,113,3993,119,"linkEmailPassword"],[4548,130,3993,136],[4548,132,3993,138],[4548,157,3993,163],[4548,158,3993,164],[4548,209,3993,215],[4548,210,3993,216],[4549,8,3994,12],[4549,13,3994,17],[4549,24,3994,28],[4549,25,3994,29],[4550,10,3995,16],[4550,17,3995,23,"signInWithEmailLinkForLinking"],[4550,46,3995,52],[4550,47,3995,53,"auth"],[4550,51,3995,57],[4550,53,3995,59],[4551,12,3996,20,"idToken"],[4551,19,3996,27],[4552,12,3997,20,"email"],[4552,17,3997,25],[4552,19,3997,27],[4552,23,3997,31],[4552,24,3997,32,"_email"],[4552,30,3997,38],[4553,12,3998,20,"oobCode"],[4553,19,3998,27],[4553,21,3998,29],[4553,25,3998,33],[4553,26,3998,34,"_password"],[4554,10,3999,16],[4554,11,3999,17],[4554,12,3999,18],[4555,8,4000,12],[4556,10,4001,16,"_fail"],[4556,15,4001,21],[4556,16,4001,22,"auth"],[4556,20,4001,26],[4556,22,4001,28],[4556,38,4001,44],[4556,39,4001,45],[4556,73,4001,79],[4556,74,4001,80],[4557,6,4002,8],[4558,4,4003,4],[4559,4,4004,4],[4560,4,4005,4,"_getReauthenticationResolver"],[4560,32,4005,32,"_getReauthenticationResolver"],[4560,33,4005,33,"auth"],[4560,37,4005,37],[4560,39,4005,39],[4561,6,4006,8],[4561,13,4006,15],[4561,17,4006,19],[4561,18,4006,20,"_getIdTokenResponse"],[4561,37,4006,39],[4561,38,4006,40,"auth"],[4561,42,4006,44],[4561,43,4006,45],[4562,4,4007,4],[4563,2,4008,0],[4565,2,4010,0],[4566,0,4011,0],[4567,0,4012,0],[4568,0,4013,0],[4569,0,4014,0],[4570,0,4015,0],[4571,0,4016,0],[4572,0,4017,0],[4573,0,4018,0],[4574,0,4019,0],[4575,0,4020,0],[4576,0,4021,0],[4577,0,4022,0],[4578,0,4023,0],[4579,0,4024,0],[4580,0,4025,0],[4581,2,4026,0],[4581,17,4026,15,"signInWithIdp"],[4581,30,4026,28,"signInWithIdp"],[4581,31,4026,29,"auth"],[4581,35,4026,33],[4581,37,4026,35,"request"],[4581,44,4026,42],[4581,46,4026,44],[4582,4,4027,4],[4582,11,4027,11,"_performSignInRequest"],[4582,32,4027,32],[4582,33,4027,33,"auth"],[4582,37,4027,37],[4582,39,4027,39],[4582,45,4027,45],[4582,46,4027,46],[4582,69,4027,69],[4582,97,4027,97],[4582,98,4027,98],[4582,131,4027,131,"_addTidIfNecessary"],[4582,149,4027,149],[4582,150,4027,150,"auth"],[4582,154,4027,154],[4582,156,4027,156,"request"],[4582,163,4027,163],[4582,164,4027,164],[4582,165,4027,165],[4583,2,4028,0],[4585,2,4030,0],[4586,0,4031,0],[4587,0,4032,0],[4588,0,4033,0],[4589,0,4034,0],[4590,0,4035,0],[4591,0,4036,0],[4592,0,4037,0],[4593,0,4038,0],[4594,0,4039,0],[4595,0,4040,0],[4596,0,4041,0],[4597,0,4042,0],[4598,0,4043,0],[4599,0,4044,0],[4600,0,4045,0],[4601,2,4046,0],[4601,8,4046,6,"IDP_REQUEST_URI$1"],[4601,25,4046,23],[4601,28,4046,26],[4601,46,4046,44],[4602,2,4047,0],[4603,0,4048,0],[4604,0,4049,0],[4605,0,4050,0],[4606,0,4051,0],[4607,0,4052,0],[4608,0,4053,0],[4609,0,4054,0],[4610,2,4055,0],[4610,8,4055,6,"OAuthCredential"],[4610,23,4055,21],[4610,32,4055,30,"AuthCredential"],[4610,46,4055,44],[4610,47,4055,45],[4611,4,4056,4,"constructor"],[4611,15,4056,15,"constructor"],[4611,16,4056,15],[4611,18,4056,18],[4612,6,4057,8],[4612,11,4057,13],[4612,12,4057,14],[4612,15,4057,17,"arguments"],[4612,24,4057,26],[4612,25,4057,27],[4613,6,4058,8],[4613,10,4058,12],[4613,11,4058,13,"pendingToken"],[4613,23,4058,25],[4613,26,4058,28],[4613,30,4058,32],[4614,4,4059,4],[4615,4,4060,4],[4616,4,4061,4],[4616,11,4061,11,"_fromParams"],[4616,22,4061,22,"_fromParams"],[4616,23,4061,23,"params"],[4616,29,4061,29],[4616,31,4061,31],[4617,6,4062,8],[4617,12,4062,14,"cred"],[4617,16,4062,18],[4617,19,4062,21],[4617,23,4062,25,"OAuthCredential"],[4617,38,4062,40],[4617,39,4062,41,"params"],[4617,45,4062,47],[4617,46,4062,48,"providerId"],[4617,56,4062,58],[4617,58,4062,60,"params"],[4617,64,4062,66],[4617,65,4062,67,"signInMethod"],[4617,77,4062,79],[4617,78,4062,80],[4618,6,4063,8],[4618,10,4063,12,"params"],[4618,16,4063,18],[4618,17,4063,19,"idToken"],[4618,24,4063,26],[4618,28,4063,30,"params"],[4618,34,4063,36],[4618,35,4063,37,"accessToken"],[4618,46,4063,48],[4618,48,4063,50],[4619,8,4064,12],[4620,8,4065,12],[4620,12,4065,16,"params"],[4620,18,4065,22],[4620,19,4065,23,"idToken"],[4620,26,4065,30],[4620,28,4065,32],[4621,10,4066,16,"cred"],[4621,14,4066,20],[4621,15,4066,21,"idToken"],[4621,22,4066,28],[4621,25,4066,31,"params"],[4621,31,4066,37],[4621,32,4066,38,"idToken"],[4621,39,4066,45],[4622,8,4067,12],[4623,8,4068,12],[4623,12,4068,16,"params"],[4623,18,4068,22],[4623,19,4068,23,"accessToken"],[4623,30,4068,34],[4623,32,4068,36],[4624,10,4069,16,"cred"],[4624,14,4069,20],[4624,15,4069,21,"accessToken"],[4624,26,4069,32],[4624,29,4069,35,"params"],[4624,35,4069,41],[4624,36,4069,42,"accessToken"],[4624,47,4069,53],[4625,8,4070,12],[4626,8,4071,12],[4627,8,4072,12],[4627,12,4072,16,"params"],[4627,18,4072,22],[4627,19,4072,23,"nonce"],[4627,24,4072,28],[4627,28,4072,32],[4627,29,4072,33,"params"],[4627,35,4072,39],[4627,36,4072,40,"pendingToken"],[4627,48,4072,52],[4627,50,4072,54],[4628,10,4073,16,"cred"],[4628,14,4073,20],[4628,15,4073,21,"nonce"],[4628,20,4073,26],[4628,23,4073,29,"params"],[4628,29,4073,35],[4628,30,4073,36,"nonce"],[4628,35,4073,41],[4629,8,4074,12],[4630,8,4075,12],[4630,12,4075,16,"params"],[4630,18,4075,22],[4630,19,4075,23,"pendingToken"],[4630,31,4075,35],[4630,33,4075,37],[4631,10,4076,16,"cred"],[4631,14,4076,20],[4631,15,4076,21,"pendingToken"],[4631,27,4076,33],[4631,30,4076,36,"params"],[4631,36,4076,42],[4631,37,4076,43,"pendingToken"],[4631,49,4076,55],[4632,8,4077,12],[4633,6,4078,8],[4633,7,4078,9],[4633,13,4079,13],[4633,17,4079,17,"params"],[4633,23,4079,23],[4633,24,4079,24,"oauthToken"],[4633,34,4079,34],[4633,38,4079,38,"params"],[4633,44,4079,44],[4633,45,4079,45,"oauthTokenSecret"],[4633,61,4079,61],[4633,63,4079,63],[4634,8,4080,12],[4635,8,4081,12,"cred"],[4635,12,4081,16],[4635,13,4081,17,"accessToken"],[4635,24,4081,28],[4635,27,4081,31,"params"],[4635,33,4081,37],[4635,34,4081,38,"oauthToken"],[4635,44,4081,48],[4636,8,4082,12,"cred"],[4636,12,4082,16],[4636,13,4082,17,"secret"],[4636,19,4082,23],[4636,22,4082,26,"params"],[4636,28,4082,32],[4636,29,4082,33,"oauthTokenSecret"],[4636,45,4082,49],[4637,6,4083,8],[4637,7,4083,9],[4637,13,4084,13],[4638,8,4085,12,"_fail"],[4638,13,4085,17],[4638,14,4085,18],[4638,30,4085,34],[4638,31,4085,35],[4638,65,4085,69],[4638,66,4085,70],[4639,6,4086,8],[4640,6,4087,8],[4640,13,4087,15,"cred"],[4640,17,4087,19],[4641,4,4088,4],[4642,4,4089,4],[4643,4,4090,4,"toJSON"],[4643,10,4090,10,"toJSON"],[4643,11,4090,10],[4643,13,4090,13],[4644,6,4091,8],[4644,13,4091,15],[4645,8,4092,12,"idToken"],[4645,15,4092,19],[4645,17,4092,21],[4645,21,4092,25],[4645,22,4092,26,"idToken"],[4645,29,4092,33],[4646,8,4093,12,"accessToken"],[4646,19,4093,23],[4646,21,4093,25],[4646,25,4093,29],[4646,26,4093,30,"accessToken"],[4646,37,4093,41],[4647,8,4094,12,"secret"],[4647,14,4094,18],[4647,16,4094,20],[4647,20,4094,24],[4647,21,4094,25,"secret"],[4647,27,4094,31],[4648,8,4095,12,"nonce"],[4648,13,4095,17],[4648,15,4095,19],[4648,19,4095,23],[4648,20,4095,24,"nonce"],[4648,25,4095,29],[4649,8,4096,12,"pendingToken"],[4649,20,4096,24],[4649,22,4096,26],[4649,26,4096,30],[4649,27,4096,31,"pendingToken"],[4649,39,4096,43],[4650,8,4097,12,"providerId"],[4650,18,4097,22],[4650,20,4097,24],[4650,24,4097,28],[4650,25,4097,29,"providerId"],[4650,35,4097,39],[4651,8,4098,12,"signInMethod"],[4651,20,4098,24],[4651,22,4098,26],[4651,26,4098,30],[4651,27,4098,31,"signInMethod"],[4652,6,4099,8],[4652,7,4099,9],[4653,4,4100,4],[4654,4,4101,4],[4655,0,4102,0],[4656,0,4103,0],[4657,0,4104,0],[4658,0,4105,0],[4659,0,4106,0],[4660,0,4107,0],[4661,0,4108,0],[4662,0,4109,0],[4663,4,4110,4],[4663,11,4110,11,"fromJSON"],[4663,19,4110,19,"fromJSON"],[4663,20,4110,20,"json"],[4663,24,4110,24],[4663,26,4110,26],[4664,6,4111,8],[4664,12,4111,14,"obj"],[4664,15,4111,17],[4664,18,4111,20],[4664,25,4111,27,"json"],[4664,29,4111,31],[4664,34,4111,36],[4664,42,4111,44],[4664,45,4111,47,"JSON"],[4664,49,4111,51],[4664,50,4111,52,"parse"],[4664,55,4111,57],[4664,56,4111,58,"json"],[4664,60,4111,62],[4664,61,4111,63],[4664,64,4111,66,"json"],[4664,68,4111,70],[4665,6,4112,8],[4665,12,4112,14],[4666,8,4112,16,"providerId"],[4666,18,4112,26],[4667,8,4112,28,"signInMethod"],[4667,20,4112,40],[4668,8,4112,42],[4668,11,4112,45,"rest"],[4669,6,4112,50],[4669,7,4112,51],[4669,10,4112,54,"obj"],[4669,13,4112,57],[4670,6,4113,8],[4670,10,4113,12],[4670,11,4113,13,"providerId"],[4670,21,4113,23],[4670,25,4113,27],[4670,26,4113,28,"signInMethod"],[4670,38,4113,40],[4670,40,4113,42],[4671,8,4114,12],[4671,15,4114,19],[4671,19,4114,23],[4672,6,4115,8],[4673,6,4116,8],[4673,12,4116,14,"cred"],[4673,16,4116,18],[4673,19,4116,21],[4673,23,4116,25,"OAuthCredential"],[4673,38,4116,40],[4673,39,4116,41,"providerId"],[4673,49,4116,51],[4673,51,4116,53,"signInMethod"],[4673,63,4116,65],[4673,64,4116,66],[4674,6,4117,8,"cred"],[4674,10,4117,12],[4674,11,4117,13,"idToken"],[4674,18,4117,20],[4674,21,4117,23,"rest"],[4674,25,4117,27],[4674,26,4117,28,"idToken"],[4674,33,4117,35],[4674,37,4117,39,"undefined"],[4674,46,4117,48],[4675,6,4118,8,"cred"],[4675,10,4118,12],[4675,11,4118,13,"accessToken"],[4675,22,4118,24],[4675,25,4118,27,"rest"],[4675,29,4118,31],[4675,30,4118,32,"accessToken"],[4675,41,4118,43],[4675,45,4118,47,"undefined"],[4675,54,4118,56],[4676,6,4119,8,"cred"],[4676,10,4119,12],[4676,11,4119,13,"secret"],[4676,17,4119,19],[4676,20,4119,22,"rest"],[4676,24,4119,26],[4676,25,4119,27,"secret"],[4676,31,4119,33],[4677,6,4120,8,"cred"],[4677,10,4120,12],[4677,11,4120,13,"nonce"],[4677,16,4120,18],[4677,19,4120,21,"rest"],[4677,23,4120,25],[4677,24,4120,26,"nonce"],[4677,29,4120,31],[4678,6,4121,8,"cred"],[4678,10,4121,12],[4678,11,4121,13,"pendingToken"],[4678,23,4121,25],[4678,26,4121,28,"rest"],[4678,30,4121,32],[4678,31,4121,33,"pendingToken"],[4678,43,4121,45],[4678,47,4121,49],[4678,51,4121,53],[4679,6,4122,8],[4679,13,4122,15,"cred"],[4679,17,4122,19],[4680,4,4123,4],[4681,4,4124,4],[4682,4,4125,4,"_getIdTokenResponse"],[4682,23,4125,23,"_getIdTokenResponse"],[4682,24,4125,24,"auth"],[4682,28,4125,28],[4682,30,4125,30],[4683,6,4126,8],[4683,12,4126,14,"request"],[4683,19,4126,21],[4683,22,4126,24],[4683,26,4126,28],[4683,27,4126,29,"buildRequest"],[4683,39,4126,41],[4683,40,4126,42],[4683,41,4126,43],[4684,6,4127,8],[4684,13,4127,15,"signInWithIdp"],[4684,26,4127,28],[4684,27,4127,29,"auth"],[4684,31,4127,33],[4684,33,4127,35,"request"],[4684,40,4127,42],[4684,41,4127,43],[4685,4,4128,4],[4686,4,4129,4],[4687,4,4130,4,"_linkToIdToken"],[4687,18,4130,18,"_linkToIdToken"],[4687,19,4130,19,"auth"],[4687,23,4130,23],[4687,25,4130,25,"idToken"],[4687,32,4130,32],[4687,34,4130,34],[4688,6,4131,8],[4688,12,4131,14,"request"],[4688,19,4131,21],[4688,22,4131,24],[4688,26,4131,28],[4688,27,4131,29,"buildRequest"],[4688,39,4131,41],[4688,40,4131,42],[4688,41,4131,43],[4689,6,4132,8,"request"],[4689,13,4132,15],[4689,14,4132,16,"idToken"],[4689,21,4132,23],[4689,24,4132,26,"idToken"],[4689,31,4132,33],[4690,6,4133,8],[4690,13,4133,15,"signInWithIdp"],[4690,26,4133,28],[4690,27,4133,29,"auth"],[4690,31,4133,33],[4690,33,4133,35,"request"],[4690,40,4133,42],[4690,41,4133,43],[4691,4,4134,4],[4692,4,4135,4],[4693,4,4136,4,"_getReauthenticationResolver"],[4693,32,4136,32,"_getReauthenticationResolver"],[4693,33,4136,33,"auth"],[4693,37,4136,37],[4693,39,4136,39],[4694,6,4137,8],[4694,12,4137,14,"request"],[4694,19,4137,21],[4694,22,4137,24],[4694,26,4137,28],[4694,27,4137,29,"buildRequest"],[4694,39,4137,41],[4694,40,4137,42],[4694,41,4137,43],[4695,6,4138,8,"request"],[4695,13,4138,15],[4695,14,4138,16,"autoCreate"],[4695,24,4138,26],[4695,27,4138,29],[4695,32,4138,34],[4696,6,4139,8],[4696,13,4139,15,"signInWithIdp"],[4696,26,4139,28],[4696,27,4139,29,"auth"],[4696,31,4139,33],[4696,33,4139,35,"request"],[4696,40,4139,42],[4696,41,4139,43],[4697,4,4140,4],[4698,4,4141,4,"buildRequest"],[4698,16,4141,16,"buildRequest"],[4698,17,4141,16],[4698,19,4141,19],[4699,6,4142,8],[4699,12,4142,14,"request"],[4699,19,4142,21],[4699,22,4142,24],[4700,8,4143,12,"requestUri"],[4700,18,4143,22],[4700,20,4143,24,"IDP_REQUEST_URI$1"],[4700,37,4143,41],[4701,8,4144,12,"returnSecureToken"],[4701,25,4144,29],[4701,27,4144,31],[4702,6,4145,8],[4702,7,4145,9],[4703,6,4146,8],[4703,10,4146,12],[4703,14,4146,16],[4703,15,4146,17,"pendingToken"],[4703,27,4146,29],[4703,29,4146,31],[4704,8,4147,12,"request"],[4704,15,4147,19],[4704,16,4147,20,"pendingToken"],[4704,28,4147,32],[4704,31,4147,35],[4704,35,4147,39],[4704,36,4147,40,"pendingToken"],[4704,48,4147,52],[4705,6,4148,8],[4705,7,4148,9],[4705,13,4149,13],[4706,8,4150,12],[4706,14,4150,18,"postBody"],[4706,22,4150,26],[4706,25,4150,29],[4706,26,4150,30],[4706,27,4150,31],[4707,8,4151,12],[4707,12,4151,16],[4707,16,4151,20],[4707,17,4151,21,"idToken"],[4707,24,4151,28],[4707,26,4151,30],[4708,10,4152,16,"postBody"],[4708,18,4152,24],[4708,19,4152,25],[4708,29,4152,35],[4708,30,4152,36],[4708,33,4152,39],[4708,37,4152,43],[4708,38,4152,44,"idToken"],[4708,45,4152,51],[4709,8,4153,12],[4710,8,4154,12],[4710,12,4154,16],[4710,16,4154,20],[4710,17,4154,21,"accessToken"],[4710,28,4154,32],[4710,30,4154,34],[4711,10,4155,16,"postBody"],[4711,18,4155,24],[4711,19,4155,25],[4711,33,4155,39],[4711,34,4155,40],[4711,37,4155,43],[4711,41,4155,47],[4711,42,4155,48,"accessToken"],[4711,53,4155,59],[4712,8,4156,12],[4713,8,4157,12],[4713,12,4157,16],[4713,16,4157,20],[4713,17,4157,21,"secret"],[4713,23,4157,27],[4713,25,4157,29],[4714,10,4158,16,"postBody"],[4714,18,4158,24],[4714,19,4158,25],[4714,39,4158,45],[4714,40,4158,46],[4714,43,4158,49],[4714,47,4158,53],[4714,48,4158,54,"secret"],[4714,54,4158,60],[4715,8,4159,12],[4716,8,4160,12,"postBody"],[4716,16,4160,20],[4716,17,4160,21],[4716,29,4160,33],[4716,30,4160,34],[4716,33,4160,37],[4716,37,4160,41],[4716,38,4160,42,"providerId"],[4716,48,4160,52],[4717,8,4161,12],[4717,12,4161,16],[4717,16,4161,20],[4717,17,4161,21,"nonce"],[4717,22,4161,26],[4717,26,4161,30],[4717,27,4161,31],[4717,31,4161,35],[4717,32,4161,36,"pendingToken"],[4717,44,4161,48],[4717,46,4161,50],[4718,10,4162,16,"postBody"],[4718,18,4162,24],[4718,19,4162,25],[4718,26,4162,32],[4718,27,4162,33],[4718,30,4162,36],[4718,34,4162,40],[4718,35,4162,41,"nonce"],[4718,40,4162,46],[4719,8,4163,12],[4720,8,4164,12,"request"],[4720,15,4164,19],[4720,16,4164,20,"postBody"],[4720,24,4164,28],[4720,27,4164,31],[4720,31,4164,31,"querystring"],[4720,44,4164,42],[4720,45,4164,42,"querystring"],[4720,56,4164,42],[4720,58,4164,43,"postBody"],[4720,66,4164,51],[4720,67,4164,52],[4721,6,4165,8],[4722,6,4166,8],[4722,13,4166,15,"request"],[4722,20,4166,22],[4723,4,4167,4],[4724,2,4168,0],[4726,2,4170,0],[4727,0,4171,0],[4728,0,4172,0],[4729,0,4173,0],[4730,0,4174,0],[4731,0,4175,0],[4732,0,4176,0],[4733,0,4177,0],[4734,0,4178,0],[4735,0,4179,0],[4736,0,4180,0],[4737,0,4181,0],[4738,0,4182,0],[4739,0,4183,0],[4740,0,4184,0],[4741,0,4185,0],[4742,2,4186,0],[4742,17,4186,15,"signInWithPhoneNumber$1"],[4742,40,4186,38,"signInWithPhoneNumber$1"],[4742,41,4186,39,"auth"],[4742,45,4186,43],[4742,47,4186,45,"request"],[4742,54,4186,52],[4742,56,4186,54],[4743,4,4187,4],[4743,11,4187,11,"_performSignInRequest"],[4743,32,4187,32],[4743,33,4187,33,"auth"],[4743,37,4187,37],[4743,39,4187,39],[4743,45,4187,45],[4743,46,4187,46],[4743,69,4187,69],[4743,105,4187,105],[4743,106,4187,106],[4743,148,4187,148,"_addTidIfNecessary"],[4743,166,4187,166],[4743,167,4187,167,"auth"],[4743,171,4187,171],[4743,173,4187,173,"request"],[4743,180,4187,180],[4743,181,4187,181],[4743,182,4187,182],[4744,2,4188,0],[4745,2,4189,0],[4745,17,4189,15,"linkWithPhoneNumber$1"],[4745,38,4189,36,"linkWithPhoneNumber$1"],[4745,39,4189,37,"auth"],[4745,43,4189,41],[4745,45,4189,43,"request"],[4745,52,4189,50],[4745,54,4189,52],[4746,4,4190,4],[4746,10,4190,10,"response"],[4746,18,4190,18],[4746,21,4190,21],[4746,27,4190,27,"_performSignInRequest"],[4746,48,4190,48],[4746,49,4190,49,"auth"],[4746,53,4190,53],[4746,55,4190,55],[4746,61,4190,61],[4746,62,4190,62],[4746,85,4190,85],[4746,121,4190,121],[4746,122,4190,122],[4746,164,4190,164,"_addTidIfNecessary"],[4746,182,4190,182],[4746,183,4190,183,"auth"],[4746,187,4190,187],[4746,189,4190,189,"request"],[4746,196,4190,196],[4746,197,4190,197],[4746,198,4190,198],[4747,4,4191,4],[4747,8,4191,8,"response"],[4747,16,4191,16],[4747,17,4191,17,"temporaryProof"],[4747,31,4191,31],[4747,33,4191,33],[4748,6,4192,8],[4748,12,4192,14,"_makeTaggedError"],[4748,28,4192,30],[4748,29,4192,31,"auth"],[4748,33,4192,35],[4748,35,4192,37],[4748,77,4192,79],[4748,78,4192,80],[4748,117,4192,119,"response"],[4748,125,4192,127],[4748,126,4192,128],[4749,4,4193,4],[4750,4,4194,4],[4750,11,4194,11,"response"],[4750,19,4194,19],[4751,2,4195,0],[4752,2,4196,0],[4752,8,4196,6,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4752,51,4196,49],[4752,54,4196,52],[4753,4,4197,4],[4753,5,4197,5],[4753,21,4197,21],[4753,22,4197,22],[4753,57,4197,57],[4753,73,4197,73],[4753,74,4197,74],[4754,2,4198,0],[4754,3,4198,1],[4755,2,4199,0],[4755,17,4199,15,"verifyPhoneNumberForExisting"],[4755,45,4199,43,"verifyPhoneNumberForExisting"],[4755,46,4199,44,"auth"],[4755,50,4199,48],[4755,52,4199,50,"request"],[4755,59,4199,57],[4755,61,4199,59],[4756,4,4200,4],[4756,10,4200,10,"apiRequest"],[4756,20,4200,20],[4756,23,4200,23],[4757,6,4201,8],[4757,9,4201,11,"request"],[4757,16,4201,18],[4758,6,4202,8,"operation"],[4758,15,4202,17],[4758,17,4202,19],[4759,4,4203,4],[4759,5,4203,5],[4760,4,4204,4],[4760,11,4204,11,"_performSignInRequest"],[4760,32,4204,32],[4760,33,4204,33,"auth"],[4760,37,4204,37],[4760,39,4204,39],[4760,45,4204,45],[4760,46,4204,46],[4760,69,4204,69],[4760,105,4204,105],[4760,106,4204,106],[4760,148,4204,148,"_addTidIfNecessary"],[4760,166,4204,166],[4760,167,4204,167,"auth"],[4760,171,4204,171],[4760,173,4204,173,"apiRequest"],[4760,183,4204,183],[4760,184,4204,184],[4760,186,4204,186,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4760,229,4204,229],[4760,230,4204,230],[4761,2,4205,0],[4763,2,4207,0],[4764,0,4208,0],[4765,0,4209,0],[4766,0,4210,0],[4767,0,4211,0],[4768,0,4212,0],[4769,0,4213,0],[4770,0,4214,0],[4771,0,4215,0],[4772,0,4216,0],[4773,0,4217,0],[4774,0,4218,0],[4775,0,4219,0],[4776,0,4220,0],[4777,0,4221,0],[4778,0,4222,0],[4779,2,4223,0],[4780,0,4224,0],[4781,0,4225,0],[4782,0,4226,0],[4783,0,4227,0],[4784,2,4228,0],[4784,8,4228,6,"PhoneAuthCredential"],[4784,27,4228,25],[4784,36,4228,34,"AuthCredential"],[4784,50,4228,48],[4784,51,4228,49],[4785,4,4229,4,"constructor"],[4785,15,4229,15,"constructor"],[4785,16,4229,16,"params"],[4785,22,4229,22],[4785,24,4229,24],[4786,6,4230,8],[4786,11,4230,13],[4786,12,4230,14],[4786,19,4230,21],[4786,20,4230,22],[4786,44,4230,46],[4786,51,4230,53],[4786,52,4230,54],[4786,76,4230,78],[4786,77,4230,79],[4787,6,4231,8],[4787,10,4231,12],[4787,11,4231,13,"params"],[4787,17,4231,19],[4787,20,4231,22,"params"],[4787,26,4231,28],[4788,4,4232,4],[4789,4,4233,4],[4790,4,4234,4],[4790,11,4234,11,"_fromVerification"],[4790,28,4234,28,"_fromVerification"],[4790,29,4234,29,"verificationId"],[4790,43,4234,43],[4790,45,4234,45,"verificationCode"],[4790,61,4234,61],[4790,63,4234,63],[4791,6,4235,8],[4791,13,4235,15],[4791,17,4235,19,"PhoneAuthCredential"],[4791,36,4235,38],[4791,37,4235,39],[4792,8,4235,41,"verificationId"],[4792,22,4235,55],[4793,8,4235,57,"verificationCode"],[4794,6,4235,74],[4794,7,4235,75],[4794,8,4235,76],[4795,4,4236,4],[4796,4,4237,4],[4797,4,4238,4],[4797,11,4238,11,"_fromTokenResponse"],[4797,29,4238,29,"_fromTokenResponse"],[4797,30,4238,30,"phoneNumber"],[4797,41,4238,41],[4797,43,4238,43,"temporaryProof"],[4797,57,4238,57],[4797,59,4238,59],[4798,6,4239,8],[4798,13,4239,15],[4798,17,4239,19,"PhoneAuthCredential"],[4798,36,4239,38],[4798,37,4239,39],[4799,8,4239,41,"phoneNumber"],[4799,19,4239,52],[4800,8,4239,54,"temporaryProof"],[4801,6,4239,69],[4801,7,4239,70],[4801,8,4239,71],[4802,4,4240,4],[4803,4,4241,4],[4804,4,4242,4,"_getIdTokenResponse"],[4804,23,4242,23,"_getIdTokenResponse"],[4804,24,4242,24,"auth"],[4804,28,4242,28],[4804,30,4242,30],[4805,6,4243,8],[4805,13,4243,15,"signInWithPhoneNumber$1"],[4805,36,4243,38],[4805,37,4243,39,"auth"],[4805,41,4243,43],[4805,43,4243,45],[4805,47,4243,49],[4805,48,4243,50,"_makeVerificationRequest"],[4805,72,4243,74],[4805,73,4243,75],[4805,74,4243,76],[4805,75,4243,77],[4806,4,4244,4],[4807,4,4245,4],[4808,4,4246,4,"_linkToIdToken"],[4808,18,4246,18,"_linkToIdToken"],[4808,19,4246,19,"auth"],[4808,23,4246,23],[4808,25,4246,25,"idToken"],[4808,32,4246,32],[4808,34,4246,34],[4809,6,4247,8],[4809,13,4247,15,"linkWithPhoneNumber$1"],[4809,34,4247,36],[4809,35,4247,37,"auth"],[4809,39,4247,41],[4809,41,4247,43],[4810,8,4248,12,"idToken"],[4810,15,4248,19],[4811,8,4249,12],[4811,11,4249,15],[4811,15,4249,19],[4811,16,4249,20,"_makeVerificationRequest"],[4811,40,4249,44],[4811,41,4249,45],[4812,6,4250,8],[4812,7,4250,9],[4812,8,4250,10],[4813,4,4251,4],[4814,4,4252,4],[4815,4,4253,4,"_getReauthenticationResolver"],[4815,32,4253,32,"_getReauthenticationResolver"],[4815,33,4253,33,"auth"],[4815,37,4253,37],[4815,39,4253,39],[4816,6,4254,8],[4816,13,4254,15,"verifyPhoneNumberForExisting"],[4816,41,4254,43],[4816,42,4254,44,"auth"],[4816,46,4254,48],[4816,48,4254,50],[4816,52,4254,54],[4816,53,4254,55,"_makeVerificationRequest"],[4816,77,4254,79],[4816,78,4254,80],[4816,79,4254,81],[4816,80,4254,82],[4817,4,4255,4],[4818,4,4256,4],[4819,4,4257,4,"_makeVerificationRequest"],[4819,28,4257,28,"_makeVerificationRequest"],[4819,29,4257,28],[4819,31,4257,31],[4820,6,4258,8],[4820,12,4258,14],[4821,8,4258,16,"temporaryProof"],[4821,22,4258,30],[4822,8,4258,32,"phoneNumber"],[4822,19,4258,43],[4823,8,4258,45,"verificationId"],[4823,22,4258,59],[4824,8,4258,61,"verificationCode"],[4825,6,4258,78],[4825,7,4258,79],[4825,10,4258,82],[4825,14,4258,86],[4825,15,4258,87,"params"],[4825,21,4258,93],[4826,6,4259,8],[4826,10,4259,12,"temporaryProof"],[4826,24,4259,26],[4826,28,4259,30,"phoneNumber"],[4826,39,4259,41],[4826,41,4259,43],[4827,8,4260,12],[4827,15,4260,19],[4828,10,4260,21,"temporaryProof"],[4828,24,4260,35],[4829,10,4260,37,"phoneNumber"],[4830,8,4260,49],[4830,9,4260,50],[4831,6,4261,8],[4832,6,4262,8],[4832,13,4262,15],[4833,8,4263,12,"sessionInfo"],[4833,19,4263,23],[4833,21,4263,25,"verificationId"],[4833,35,4263,39],[4834,8,4264,12,"code"],[4834,12,4264,16],[4834,14,4264,18,"verificationCode"],[4835,6,4265,8],[4835,7,4265,9],[4836,4,4266,4],[4837,4,4267,4],[4838,4,4268,4,"toJSON"],[4838,10,4268,10,"toJSON"],[4838,11,4268,10],[4838,13,4268,13],[4839,6,4269,8],[4839,12,4269,14,"obj"],[4839,15,4269,17],[4839,18,4269,20],[4840,8,4270,12,"providerId"],[4840,18,4270,22],[4840,20,4270,24],[4840,24,4270,28],[4840,25,4270,29,"providerId"],[4841,6,4271,8],[4841,7,4271,9],[4842,6,4272,8],[4842,10,4272,12],[4842,14,4272,16],[4842,15,4272,17,"params"],[4842,21,4272,23],[4842,22,4272,24,"phoneNumber"],[4842,33,4272,35],[4842,35,4272,37],[4843,8,4273,12,"obj"],[4843,11,4273,15],[4843,12,4273,16,"phoneNumber"],[4843,23,4273,27],[4843,26,4273,30],[4843,30,4273,34],[4843,31,4273,35,"params"],[4843,37,4273,41],[4843,38,4273,42,"phoneNumber"],[4843,49,4273,53],[4844,6,4274,8],[4845,6,4275,8],[4845,10,4275,12],[4845,14,4275,16],[4845,15,4275,17,"params"],[4845,21,4275,23],[4845,22,4275,24,"temporaryProof"],[4845,36,4275,38],[4845,38,4275,40],[4846,8,4276,12,"obj"],[4846,11,4276,15],[4846,12,4276,16,"temporaryProof"],[4846,26,4276,30],[4846,29,4276,33],[4846,33,4276,37],[4846,34,4276,38,"params"],[4846,40,4276,44],[4846,41,4276,45,"temporaryProof"],[4846,55,4276,59],[4847,6,4277,8],[4848,6,4278,8],[4848,10,4278,12],[4848,14,4278,16],[4848,15,4278,17,"params"],[4848,21,4278,23],[4848,22,4278,24,"verificationCode"],[4848,38,4278,40],[4848,40,4278,42],[4849,8,4279,12,"obj"],[4849,11,4279,15],[4849,12,4279,16,"verificationCode"],[4849,28,4279,32],[4849,31,4279,35],[4849,35,4279,39],[4849,36,4279,40,"params"],[4849,42,4279,46],[4849,43,4279,47,"verificationCode"],[4849,59,4279,63],[4850,6,4280,8],[4851,6,4281,8],[4851,10,4281,12],[4851,14,4281,16],[4851,15,4281,17,"params"],[4851,21,4281,23],[4851,22,4281,24,"verificationId"],[4851,36,4281,38],[4851,38,4281,40],[4852,8,4282,12,"obj"],[4852,11,4282,15],[4852,12,4282,16,"verificationId"],[4852,26,4282,30],[4852,29,4282,33],[4852,33,4282,37],[4852,34,4282,38,"params"],[4852,40,4282,44],[4852,41,4282,45,"verificationId"],[4852,55,4282,59],[4853,6,4283,8],[4854,6,4284,8],[4854,13,4284,15,"obj"],[4854,16,4284,18],[4855,4,4285,4],[4856,4,4286,4],[4857,4,4287,4],[4857,11,4287,11,"fromJSON"],[4857,19,4287,19,"fromJSON"],[4857,20,4287,20,"json"],[4857,24,4287,24],[4857,26,4287,26],[4858,6,4288,8],[4858,10,4288,12],[4858,17,4288,19,"json"],[4858,21,4288,23],[4858,26,4288,28],[4858,34,4288,36],[4858,36,4288,38],[4859,8,4289,12,"json"],[4859,12,4289,16],[4859,15,4289,19,"JSON"],[4859,19,4289,23],[4859,20,4289,24,"parse"],[4859,25,4289,29],[4859,26,4289,30,"json"],[4859,30,4289,34],[4859,31,4289,35],[4860,6,4290,8],[4861,6,4291,8],[4861,12,4291,14],[4862,8,4291,16,"verificationId"],[4862,22,4291,30],[4863,8,4291,32,"verificationCode"],[4863,24,4291,48],[4864,8,4291,50,"phoneNumber"],[4864,19,4291,61],[4865,8,4291,63,"temporaryProof"],[4866,6,4291,78],[4866,7,4291,79],[4866,10,4291,82,"json"],[4866,14,4291,86],[4867,6,4292,8],[4867,10,4292,12],[4867,11,4292,13,"verificationCode"],[4867,27,4292,29],[4867,31,4293,12],[4867,32,4293,13,"verificationId"],[4867,46,4293,27],[4867,50,4294,12],[4867,51,4294,13,"phoneNumber"],[4867,62,4294,24],[4867,66,4295,12],[4867,67,4295,13,"temporaryProof"],[4867,81,4295,27],[4867,83,4295,29],[4868,8,4296,12],[4868,15,4296,19],[4868,19,4296,23],[4869,6,4297,8],[4870,6,4298,8],[4870,13,4298,15],[4870,17,4298,19,"PhoneAuthCredential"],[4870,36,4298,38],[4870,37,4298,39],[4871,8,4299,12,"verificationId"],[4871,22,4299,26],[4872,8,4300,12,"verificationCode"],[4872,24,4300,28],[4873,8,4301,12,"phoneNumber"],[4873,19,4301,23],[4874,8,4302,12,"temporaryProof"],[4875,6,4303,8],[4875,7,4303,9],[4875,8,4303,10],[4876,4,4304,4],[4877,2,4305,0],[4879,2,4307,0],[4880,0,4308,0],[4881,0,4309,0],[4882,0,4310,0],[4883,0,4311,0],[4884,0,4312,0],[4885,0,4313,0],[4886,0,4314,0],[4887,0,4315,0],[4888,0,4316,0],[4889,0,4317,0],[4890,0,4318,0],[4891,0,4319,0],[4892,0,4320,0],[4893,0,4321,0],[4894,0,4322,0],[4895,2,4323,0],[4896,0,4324,0],[4897,0,4325,0],[4898,0,4326,0],[4899,0,4327,0],[4900,2,4328,0],[4900,11,4328,9,"parseMode"],[4900,20,4328,18,"parseMode"],[4900,21,4328,19,"mode"],[4900,25,4328,23],[4900,27,4328,25],[4901,4,4329,4],[4901,12,4329,12,"mode"],[4901,16,4329,16],[4902,6,4330,8],[4902,11,4330,13],[4902,25,4330,27],[4903,8,4331,12],[4903,15,4331,19],[4903,30,4331,34],[4903,31,4331,35],[4904,6,4332,8],[4904,11,4332,13],[4904,26,4332,28],[4905,8,4333,12],[4905,15,4333,19],[4905,31,4333,35],[4905,32,4333,36],[4906,6,4334,8],[4906,11,4334,13],[4906,19,4334,21],[4907,8,4335,12],[4907,15,4335,19],[4907,29,4335,33],[4907,30,4335,34],[4908,6,4336,8],[4908,11,4336,13],[4908,24,4336,26],[4909,8,4337,12],[4909,15,4337,19],[4909,29,4337,33],[4909,30,4337,34],[4910,6,4338,8],[4910,11,4338,13],[4910,33,4338,35],[4911,8,4339,12],[4911,15,4339,19],[4911,40,4339,44],[4911,41,4339,45],[4912,6,4340,8],[4912,11,4340,13],[4912,39,4340,41],[4913,8,4341,12],[4913,15,4341,19],[4913,46,4341,50],[4913,47,4341,51],[4914,6,4342,8],[4915,8,4343,12],[4915,15,4343,19],[4915,19,4343,23],[4916,4,4344,4],[4917,2,4345,0],[4918,2,4346,0],[4919,0,4347,0],[4920,0,4348,0],[4921,0,4349,0],[4922,0,4350,0],[4923,2,4351,0],[4923,11,4351,9,"parseDeepLink"],[4923,24,4351,22,"parseDeepLink"],[4923,25,4351,23,"url"],[4923,28,4351,26],[4923,30,4351,28],[4924,4,4352,4],[4924,10,4352,10,"link"],[4924,14,4352,14],[4924,17,4352,17],[4924,21,4352,17,"querystringDecode"],[4924,34,4352,34],[4924,35,4352,34,"querystringDecode"],[4924,52,4352,34],[4924,54,4352,35],[4924,58,4352,35,"extractQuerystring"],[4924,71,4352,53],[4924,72,4352,53,"extractQuerystring"],[4924,90,4352,53],[4924,92,4352,54,"url"],[4924,95,4352,57],[4924,96,4352,58],[4924,97,4352,59],[4924,98,4352,60],[4924,104,4352,66],[4924,105,4352,67],[4925,4,4353,4],[4926,4,4354,4],[4926,10,4354,10,"doubleDeepLink"],[4926,24,4354,24],[4926,27,4354,27,"link"],[4926,31,4354,31],[4926,34,4355,10],[4926,38,4355,10,"querystringDecode"],[4926,51,4355,27],[4926,52,4355,27,"querystringDecode"],[4926,69,4355,27],[4926,71,4355,28],[4926,75,4355,28,"extractQuerystring"],[4926,88,4355,46],[4926,89,4355,46,"extractQuerystring"],[4926,107,4355,46],[4926,109,4355,47,"link"],[4926,113,4355,51],[4926,114,4355,52],[4926,115,4355,53],[4926,116,4355,54],[4926,130,4355,68],[4926,131,4355,69],[4926,134,4356,10],[4926,138,4356,14],[4927,4,4357,4],[4928,4,4358,4],[4928,10,4358,10,"iOSDeepLink"],[4928,21,4358,21],[4928,24,4358,24],[4928,28,4358,24,"querystringDecode"],[4928,41,4358,41],[4928,42,4358,41,"querystringDecode"],[4928,59,4358,41],[4928,61,4358,42],[4928,65,4358,42,"extractQuerystring"],[4928,78,4358,60],[4928,79,4358,60,"extractQuerystring"],[4928,97,4358,60],[4928,99,4358,61,"url"],[4928,102,4358,64],[4928,103,4358,65],[4928,104,4358,66],[4928,105,4358,67],[4928,119,4358,81],[4928,120,4358,82],[4929,4,4359,4],[4929,10,4359,10,"iOSDoubleDeepLink"],[4929,27,4359,27],[4929,30,4359,30,"iOSDeepLink"],[4929,41,4359,41],[4929,44,4360,10],[4929,48,4360,10,"querystringDecode"],[4929,61,4360,27],[4929,62,4360,27,"querystringDecode"],[4929,79,4360,27],[4929,81,4360,28],[4929,85,4360,28,"extractQuerystring"],[4929,98,4360,46],[4929,99,4360,46,"extractQuerystring"],[4929,117,4360,46],[4929,119,4360,47,"iOSDeepLink"],[4929,130,4360,58],[4929,131,4360,59],[4929,132,4360,60],[4929,133,4360,61],[4929,139,4360,67],[4929,140,4360,68],[4929,143,4361,10],[4929,147,4361,14],[4930,4,4362,4],[4930,11,4362,11,"iOSDoubleDeepLink"],[4930,28,4362,28],[4930,32,4362,32,"iOSDeepLink"],[4930,43,4362,43],[4930,47,4362,47,"doubleDeepLink"],[4930,61,4362,61],[4930,65,4362,65,"link"],[4930,69,4362,69],[4930,73,4362,73,"url"],[4930,76,4362,76],[4931,2,4363,0],[4932,2,4364,0],[4933,0,4365,0],[4934,0,4366,0],[4935,0,4367,0],[4936,0,4368,0],[4937,0,4369,0],[4938,2,4370,0],[4938,8,4370,6,"ActionCodeURL"],[4938,21,4370,19],[4938,22,4370,20],[4939,4,4371,4],[4940,0,4372,0],[4941,0,4373,0],[4942,0,4374,0],[4943,0,4375,0],[4944,0,4376,0],[4945,4,4377,4,"constructor"],[4945,15,4377,15,"constructor"],[4945,16,4377,16,"actionLink"],[4945,26,4377,26],[4945,28,4377,28],[4946,6,4378,8],[4946,12,4378,14,"searchParams"],[4946,24,4378,26],[4946,27,4378,29],[4946,31,4378,29,"querystringDecode"],[4946,44,4378,46],[4946,45,4378,46,"querystringDecode"],[4946,62,4378,46],[4946,64,4378,47],[4946,68,4378,47,"extractQuerystring"],[4946,81,4378,65],[4946,82,4378,65,"extractQuerystring"],[4946,100,4378,65],[4946,102,4378,66,"actionLink"],[4946,112,4378,76],[4946,113,4378,77],[4946,114,4378,78],[4947,6,4379,8],[4947,12,4379,14,"apiKey"],[4947,18,4379,20],[4947,21,4379,23,"searchParams"],[4947,33,4379,35],[4947,34,4379,36],[4947,42,4379,44],[4947,43,4379,45],[4947,68,4379,70],[4947,72,4379,74],[4947,76,4379,78],[4948,6,4380,8],[4948,12,4380,14,"code"],[4948,16,4380,18],[4948,19,4380,21,"searchParams"],[4948,31,4380,33],[4948,32,4380,34],[4948,41,4380,43],[4948,42,4380,44],[4948,64,4380,66],[4948,68,4380,70],[4948,72,4380,74],[4949,6,4381,8],[4949,12,4381,14,"operation"],[4949,21,4381,23],[4949,24,4381,26,"parseMode"],[4949,33,4381,35],[4949,34,4381,36,"searchParams"],[4949,46,4381,48],[4949,47,4381,49],[4949,53,4381,55],[4949,54,4381,56],[4949,76,4381,78],[4949,80,4381,82],[4949,84,4381,86],[4949,85,4381,87],[4950,6,4382,8],[4951,6,4383,8,"_assert"],[4951,13,4383,15],[4951,14,4383,16,"apiKey"],[4951,20,4383,22],[4951,24,4383,26,"code"],[4951,28,4383,30],[4951,32,4383,34,"operation"],[4951,41,4383,43],[4951,43,4383,45],[4951,59,4383,61],[4951,60,4383,62],[4951,94,4383,96],[4951,95,4383,97],[4952,6,4384,8],[4952,10,4384,12],[4952,11,4384,13,"apiKey"],[4952,17,4384,19],[4952,20,4384,22,"apiKey"],[4952,26,4384,28],[4953,6,4385,8],[4953,10,4385,12],[4953,11,4385,13,"operation"],[4953,20,4385,22],[4953,23,4385,25,"operation"],[4953,32,4385,34],[4954,6,4386,8],[4954,10,4386,12],[4954,11,4386,13,"code"],[4954,15,4386,17],[4954,18,4386,20,"code"],[4954,22,4386,24],[4955,6,4387,8],[4955,10,4387,12],[4955,11,4387,13,"continueUrl"],[4955,22,4387,24],[4955,25,4387,27,"searchParams"],[4955,37,4387,39],[4955,38,4387,40],[4955,51,4387,53],[4955,52,4387,54],[4955,82,4387,84],[4955,86,4387,88],[4955,90,4387,92],[4956,6,4388,8],[4956,10,4388,12],[4956,11,4388,13,"languageCode"],[4956,23,4388,25],[4956,26,4388,28,"searchParams"],[4956,38,4388,40],[4956,39,4388,41],[4956,45,4388,47],[4956,46,4388,48],[4956,77,4388,79],[4956,81,4388,83],[4956,85,4388,87],[4957,6,4389,8],[4957,10,4389,12],[4957,11,4389,13,"tenantId"],[4957,19,4389,21],[4957,22,4389,24,"searchParams"],[4957,34,4389,36],[4957,35,4389,37],[4957,45,4389,47],[4957,46,4389,48],[4957,73,4389,75],[4957,77,4389,79],[4957,81,4389,83],[4958,4,4390,4],[4959,4,4391,4],[4960,0,4392,0],[4961,0,4393,0],[4962,0,4394,0],[4963,0,4395,0],[4964,0,4396,0],[4965,0,4397,0],[4966,0,4398,0],[4967,0,4399,0],[4968,4,4400,4],[4968,11,4400,11,"parseLink"],[4968,20,4400,20,"parseLink"],[4968,21,4400,21,"link"],[4968,25,4400,25],[4968,27,4400,27],[4969,6,4401,8],[4969,12,4401,14,"actionLink"],[4969,22,4401,24],[4969,25,4401,27,"parseDeepLink"],[4969,38,4401,40],[4969,39,4401,41,"link"],[4969,43,4401,45],[4969,44,4401,46],[4970,6,4402,8],[4970,10,4402,12],[4971,8,4403,12],[4971,15,4403,19],[4971,19,4403,23,"ActionCodeURL"],[4971,32,4403,36],[4971,33,4403,37,"actionLink"],[4971,43,4403,47],[4971,44,4403,48],[4972,6,4404,8],[4972,7,4404,9],[4972,8,4405,8],[4972,14,4405,14],[4973,8,4406,12],[4973,15,4406,19],[4973,19,4406,23],[4974,6,4407,8],[4975,4,4408,4],[4976,2,4409,0],[4977,2,4410,0],[4978,0,4411,0],[4979,0,4412,0],[4980,0,4413,0],[4981,0,4414,0],[4982,0,4415,0],[4983,2,4416,0],[4983,11,4416,9,"parseActionCodeURL"],[4983,29,4416,27,"parseActionCodeURL"],[4983,30,4416,28,"link"],[4983,34,4416,32],[4983,36,4416,34],[4984,4,4417,4],[4984,11,4417,11,"ActionCodeURL"],[4984,24,4417,24],[4984,25,4417,25,"parseLink"],[4984,34,4417,34],[4984,35,4417,35,"link"],[4984,39,4417,39],[4984,40,4417,40],[4985,2,4418,0],[4987,2,4420,0],[4988,0,4421,0],[4989,0,4422,0],[4990,0,4423,0],[4991,0,4424,0],[4992,0,4425,0],[4993,0,4426,0],[4994,0,4427,0],[4995,0,4428,0],[4996,0,4429,0],[4997,0,4430,0],[4998,0,4431,0],[4999,0,4432,0],[5000,0,4433,0],[5001,0,4434,0],[5002,0,4435,0],[5003,2,4436,0],[5004,0,4437,0],[5005,0,4438,0],[5006,0,4439,0],[5007,0,4440,0],[5008,2,4441,0],[5008,8,4441,6,"EmailAuthProvider"],[5008,25,4441,23],[5008,26,4441,24],[5009,4,4442,4,"constructor"],[5009,15,4442,15,"constructor"],[5009,16,4442,15],[5009,18,4442,18],[5010,6,4443,8],[5011,0,4444,0],[5012,0,4445,0],[5013,6,4446,8],[5013,10,4446,12],[5013,11,4446,13,"providerId"],[5013,21,4446,23],[5013,24,4446,26,"EmailAuthProvider"],[5013,41,4446,43],[5013,42,4446,44,"PROVIDER_ID"],[5013,53,4446,55],[5014,4,4447,4],[5015,4,4448,4],[5016,0,4449,0],[5017,0,4450,0],[5018,0,4451,0],[5019,0,4452,0],[5020,0,4453,0],[5021,0,4454,0],[5022,0,4455,0],[5023,0,4456,0],[5024,0,4457,0],[5025,0,4458,0],[5026,0,4459,0],[5027,0,4460,0],[5028,0,4461,0],[5029,0,4462,0],[5030,0,4463,0],[5031,0,4464,0],[5032,0,4465,0],[5033,4,4466,4],[5033,11,4466,11,"credential"],[5033,21,4466,21,"credential"],[5033,22,4466,22,"email"],[5033,27,4466,27],[5033,29,4466,29,"password"],[5033,37,4466,37],[5033,39,4466,39],[5034,6,4467,8],[5034,13,4467,15,"EmailAuthCredential"],[5034,32,4467,34],[5034,33,4467,35,"_fromEmailAndPassword"],[5034,54,4467,56],[5034,55,4467,57,"email"],[5034,60,4467,62],[5034,62,4467,64,"password"],[5034,70,4467,72],[5034,71,4467,73],[5035,4,4468,4],[5036,4,4469,4],[5037,0,4470,0],[5038,0,4471,0],[5039,0,4472,0],[5040,0,4473,0],[5041,0,4474,0],[5042,0,4475,0],[5043,0,4476,0],[5044,0,4477,0],[5045,0,4478,0],[5046,0,4479,0],[5047,0,4480,0],[5048,0,4481,0],[5049,0,4482,0],[5050,0,4483,0],[5051,0,4484,0],[5052,0,4485,0],[5053,0,4486,0],[5054,0,4487,0],[5055,0,4488,0],[5056,0,4489,0],[5057,0,4490,0],[5058,4,4491,4],[5058,11,4491,11,"credentialWithLink"],[5058,29,4491,29,"credentialWithLink"],[5058,30,4491,30,"email"],[5058,35,4491,35],[5058,37,4491,37,"emailLink"],[5058,46,4491,46],[5058,48,4491,48],[5059,6,4492,8],[5059,12,4492,14,"actionCodeUrl"],[5059,25,4492,27],[5059,28,4492,30,"ActionCodeURL"],[5059,41,4492,43],[5059,42,4492,44,"parseLink"],[5059,51,4492,53],[5059,52,4492,54,"emailLink"],[5059,61,4492,63],[5059,62,4492,64],[5060,6,4493,8,"_assert"],[5060,13,4493,15],[5060,14,4493,16,"actionCodeUrl"],[5060,27,4493,29],[5060,29,4493,31],[5060,45,4493,47],[5060,46,4493,48],[5060,80,4493,82],[5060,81,4493,83],[5061,6,4494,8],[5061,13,4494,15,"EmailAuthCredential"],[5061,32,4494,34],[5061,33,4494,35,"_fromEmailAndCode"],[5061,50,4494,52],[5061,51,4494,53,"email"],[5061,56,4494,58],[5061,58,4494,60,"actionCodeUrl"],[5061,71,4494,73],[5061,72,4494,74,"code"],[5061,76,4494,78],[5061,78,4494,80,"actionCodeUrl"],[5061,91,4494,93],[5061,92,4494,94,"tenantId"],[5061,100,4494,102],[5061,101,4494,103],[5062,4,4495,4],[5063,2,4496,0],[5064,2,4497,0],[5065,0,4498,0],[5066,0,4499,0],[5067,2,4500,0,"EmailAuthProvider"],[5067,19,4500,17],[5067,20,4500,18,"PROVIDER_ID"],[5067,31,4500,29],[5067,34,4500,32],[5067,44,4500,42],[5067,45,4500,43],[5068,2,4501,0],[5069,0,4502,0],[5070,0,4503,0],[5071,2,4504,0,"EmailAuthProvider"],[5071,19,4504,17],[5071,20,4504,18,"EMAIL_PASSWORD_SIGN_IN_METHOD"],[5071,49,4504,47],[5071,52,4504,50],[5071,62,4504,60],[5071,63,4504,61],[5072,2,4505,0],[5073,0,4506,0],[5074,0,4507,0],[5075,2,4508,0,"EmailAuthProvider"],[5075,19,4508,17],[5075,20,4508,18,"EMAIL_LINK_SIGN_IN_METHOD"],[5075,45,4508,43],[5075,48,4508,46],[5075,59,4508,57],[5075,60,4508,58],[5077,2,4510,0],[5078,0,4511,0],[5079,0,4512,0],[5080,0,4513,0],[5081,0,4514,0],[5082,0,4515,0],[5083,0,4516,0],[5084,0,4517,0],[5085,0,4518,0],[5086,0,4519,0],[5087,0,4520,0],[5088,0,4521,0],[5089,0,4522,0],[5090,0,4523,0],[5091,0,4524,0],[5092,0,4525,0],[5093,2,4526,0],[5094,0,4527,0],[5095,0,4528,0],[5096,0,4529,0],[5097,0,4530,0],[5098,0,4531,0],[5099,0,4532,0],[5100,2,4533,0],[5100,8,4533,6,"FederatedAuthProvider"],[5100,29,4533,27],[5100,30,4533,28],[5101,4,4534,4],[5102,0,4535,0],[5103,0,4536,0],[5104,0,4537,0],[5105,0,4538,0],[5106,4,4539,4,"constructor"],[5106,15,4539,15,"constructor"],[5106,16,4539,16,"providerId"],[5106,26,4539,26],[5106,28,4539,28],[5107,6,4540,8],[5107,10,4540,12],[5107,11,4540,13,"providerId"],[5107,21,4540,23],[5107,24,4540,26,"providerId"],[5107,34,4540,36],[5108,6,4541,8],[5109,6,4542,8],[5109,10,4542,12],[5109,11,4542,13,"defaultLanguageCode"],[5109,30,4542,32],[5109,33,4542,35],[5109,37,4542,39],[5110,6,4543,8],[5111,6,4544,8],[5111,10,4544,12],[5111,11,4544,13,"customParameters"],[5111,27,4544,29],[5111,30,4544,32],[5111,31,4544,33],[5111,32,4544,34],[5112,4,4545,4],[5113,4,4546,4],[5114,0,4547,0],[5115,0,4548,0],[5116,0,4549,0],[5117,0,4550,0],[5118,4,4551,4,"setDefaultLanguage"],[5118,22,4551,22,"setDefaultLanguage"],[5118,23,4551,23,"languageCode"],[5118,35,4551,35],[5118,37,4551,37],[5119,6,4552,8],[5119,10,4552,12],[5119,11,4552,13,"defaultLanguageCode"],[5119,30,4552,32],[5119,33,4552,35,"languageCode"],[5119,45,4552,47],[5120,4,4553,4],[5121,4,4554,4],[5122,0,4555,0],[5123,0,4556,0],[5124,0,4557,0],[5125,0,4558,0],[5126,0,4559,0],[5127,0,4560,0],[5128,0,4561,0],[5129,0,4562,0],[5130,0,4563,0],[5131,4,4564,4,"setCustomParameters"],[5131,23,4564,23,"setCustomParameters"],[5131,24,4564,24,"customOAuthParameters"],[5131,45,4564,45],[5131,47,4564,47],[5132,6,4565,8],[5132,10,4565,12],[5132,11,4565,13,"customParameters"],[5132,27,4565,29],[5132,30,4565,32,"customOAuthParameters"],[5132,51,4565,53],[5133,6,4566,8],[5133,13,4566,15],[5133,17,4566,19],[5134,4,4567,4],[5135,4,4568,4],[5136,0,4569,0],[5137,0,4570,0],[5138,4,4571,4,"getCustomParameters"],[5138,23,4571,23,"getCustomParameters"],[5138,24,4571,23],[5138,26,4571,26],[5139,6,4572,8],[5139,13,4572,15],[5139,17,4572,19],[5139,18,4572,20,"customParameters"],[5139,34,4572,36],[5140,4,4573,4],[5141,2,4574,0],[5143,2,4576,0],[5144,0,4577,0],[5145,0,4578,0],[5146,0,4579,0],[5147,0,4580,0],[5148,0,4581,0],[5149,0,4582,0],[5150,0,4583,0],[5151,0,4584,0],[5152,0,4585,0],[5153,0,4586,0],[5154,0,4587,0],[5155,0,4588,0],[5156,0,4589,0],[5157,0,4590,0],[5158,0,4591,0],[5159,2,4592,0],[5160,0,4593,0],[5161,0,4594,0],[5162,0,4595,0],[5163,0,4596,0],[5164,0,4597,0],[5165,2,4598,0],[5165,8,4598,6,"BaseOAuthProvider"],[5165,25,4598,23],[5165,34,4598,32,"FederatedAuthProvider"],[5165,55,4598,53],[5165,56,4598,54],[5166,4,4599,4,"constructor"],[5166,15,4599,15,"constructor"],[5166,16,4599,15],[5166,18,4599,18],[5167,6,4600,8],[5167,11,4600,13],[5167,12,4600,14],[5167,15,4600,17,"arguments"],[5167,24,4600,26],[5167,25,4600,27],[5168,6,4601,8],[5169,6,4602,8],[5169,10,4602,12],[5169,11,4602,13,"scopes"],[5169,17,4602,19],[5169,20,4602,22],[5169,22,4602,24],[5170,4,4603,4],[5171,4,4604,4],[5172,0,4605,0],[5173,0,4606,0],[5174,0,4607,0],[5175,0,4608,0],[5176,4,4609,4,"addScope"],[5176,12,4609,12,"addScope"],[5176,13,4609,13,"scope"],[5176,18,4609,18],[5176,20,4609,20],[5177,6,4610,8],[5178,6,4611,8],[5178,10,4611,12],[5178,11,4611,13],[5178,15,4611,17],[5178,16,4611,18,"scopes"],[5178,22,4611,24],[5178,23,4611,25,"includes"],[5178,31,4611,33],[5178,32,4611,34,"scope"],[5178,37,4611,39],[5178,38,4611,40],[5178,40,4611,42],[5179,8,4612,12],[5179,12,4612,16],[5179,13,4612,17,"scopes"],[5179,19,4612,23],[5179,20,4612,24,"push"],[5179,24,4612,28],[5179,25,4612,29,"scope"],[5179,30,4612,34],[5179,31,4612,35],[5180,6,4613,8],[5181,6,4614,8],[5181,13,4614,15],[5181,17,4614,19],[5182,4,4615,4],[5183,4,4616,4],[5184,0,4617,0],[5185,0,4618,0],[5186,4,4619,4,"getScopes"],[5186,13,4619,13,"getScopes"],[5186,14,4619,13],[5186,16,4619,16],[5187,6,4620,8],[5187,13,4620,15],[5187,14,4620,16],[5187,17,4620,19],[5187,21,4620,23],[5187,22,4620,24,"scopes"],[5187,28,4620,30],[5187,29,4620,31],[5188,4,4621,4],[5189,2,4622,0],[5190,2,4623,0],[5191,0,4624,0],[5192,0,4625,0],[5193,0,4626,0],[5194,0,4627,0],[5195,0,4628,0],[5196,0,4629,0],[5197,0,4630,0],[5198,0,4631,0],[5199,0,4632,0],[5200,0,4633,0],[5201,0,4634,0],[5202,0,4635,0],[5203,0,4636,0],[5204,0,4637,0],[5205,0,4638,0],[5206,0,4639,0],[5207,0,4640,0],[5208,0,4641,0],[5209,0,4642,0],[5210,0,4643,0],[5211,0,4644,0],[5212,0,4645,0],[5213,0,4646,0],[5214,0,4647,0],[5215,0,4648,0],[5216,0,4649,0],[5217,0,4650,0],[5218,0,4651,0],[5219,0,4652,0],[5220,0,4653,0],[5221,0,4654,0],[5222,0,4655,0],[5223,0,4656,0],[5224,0,4657,0],[5225,0,4658,0],[5226,0,4659,0],[5227,0,4660,0],[5228,0,4661,0],[5229,0,4662,0],[5230,2,4663,0],[5230,8,4663,6,"OAuthProvider"],[5230,21,4663,19],[5230,30,4663,28,"BaseOAuthProvider"],[5230,47,4663,45],[5230,48,4663,46],[5231,4,4664,4],[5232,0,4665,0],[5233,0,4666,0],[5234,0,4667,0],[5235,4,4668,4],[5235,11,4668,11,"credentialFromJSON"],[5235,29,4668,29,"credentialFromJSON"],[5235,30,4668,30,"json"],[5235,34,4668,34],[5235,36,4668,36],[5236,6,4669,8],[5236,12,4669,14,"obj"],[5236,15,4669,17],[5236,18,4669,20],[5236,25,4669,27,"json"],[5236,29,4669,31],[5236,34,4669,36],[5236,42,4669,44],[5236,45,4669,47,"JSON"],[5236,49,4669,51],[5236,50,4669,52,"parse"],[5236,55,4669,57],[5236,56,4669,58,"json"],[5236,60,4669,62],[5236,61,4669,63],[5236,64,4669,66,"json"],[5236,68,4669,70],[5237,6,4670,8,"_assert"],[5237,13,4670,15],[5237,14,4670,16],[5237,26,4670,28],[5237,30,4670,32,"obj"],[5237,33,4670,35],[5237,37,4670,39],[5237,51,4670,53],[5237,55,4670,57,"obj"],[5237,58,4670,60],[5237,60,4670,62],[5237,76,4670,78],[5237,77,4670,79],[5237,111,4670,113],[5237,112,4670,114],[5238,6,4671,8],[5238,13,4671,15,"OAuthCredential"],[5238,28,4671,30],[5238,29,4671,31,"_fromParams"],[5238,40,4671,42],[5238,41,4671,43,"obj"],[5238,44,4671,46],[5238,45,4671,47],[5239,4,4672,4],[5240,4,4673,4],[5241,0,4674,0],[5242,0,4675,0],[5243,0,4676,0],[5244,0,4677,0],[5245,0,4678,0],[5246,0,4679,0],[5247,0,4680,0],[5248,0,4681,0],[5249,0,4682,0],[5250,0,4683,0],[5251,0,4684,0],[5252,0,4685,0],[5253,0,4686,0],[5254,0,4687,0],[5255,0,4688,0],[5256,0,4689,0],[5257,0,4690,0],[5258,0,4691,0],[5259,0,4692,0],[5260,0,4693,0],[5261,4,4694,4,"credential"],[5261,14,4694,14,"credential"],[5261,15,4694,15,"params"],[5261,21,4694,21],[5261,23,4694,23],[5262,6,4695,8],[5262,13,4695,15],[5262,17,4695,19],[5262,18,4695,20,"_credential"],[5262,29,4695,31],[5262,30,4695,32],[5263,8,4695,34],[5263,11,4695,37,"params"],[5263,17,4695,43],[5264,8,4695,45,"nonce"],[5264,13,4695,50],[5264,15,4695,52,"params"],[5264,21,4695,58],[5264,22,4695,59,"rawNonce"],[5265,6,4695,68],[5265,7,4695,69],[5265,8,4695,70],[5266,4,4696,4],[5267,4,4697,4],[5268,4,4698,4,"_credential"],[5268,15,4698,15,"_credential"],[5268,16,4698,16,"params"],[5268,22,4698,22],[5268,24,4698,24],[5269,6,4699,8,"_assert"],[5269,13,4699,15],[5269,14,4699,16,"params"],[5269,20,4699,22],[5269,21,4699,23,"idToken"],[5269,28,4699,30],[5269,32,4699,34,"params"],[5269,38,4699,40],[5269,39,4699,41,"accessToken"],[5269,50,4699,52],[5269,52,4699,54],[5269,68,4699,70],[5269,69,4699,71],[5269,103,4699,105],[5269,104,4699,106],[5270,6,4700,8],[5271,6,4701,8],[5271,13,4701,15,"OAuthCredential"],[5271,28,4701,30],[5271,29,4701,31,"_fromParams"],[5271,40,4701,42],[5271,41,4701,43],[5272,8,4702,12],[5272,11,4702,15,"params"],[5272,17,4702,21],[5273,8,4703,12,"providerId"],[5273,18,4703,22],[5273,20,4703,24],[5273,24,4703,28],[5273,25,4703,29,"providerId"],[5273,35,4703,39],[5274,8,4704,12,"signInMethod"],[5274,20,4704,24],[5274,22,4704,26],[5274,26,4704,30],[5274,27,4704,31,"providerId"],[5275,6,4705,8],[5275,7,4705,9],[5275,8,4705,10],[5276,4,4706,4],[5277,4,4707,4],[5278,0,4708,0],[5279,0,4709,0],[5280,0,4710,0],[5281,0,4711,0],[5282,4,4712,4],[5282,11,4712,11,"credentialFromResult"],[5282,31,4712,31,"credentialFromResult"],[5282,32,4712,32,"userCredential"],[5282,46,4712,46],[5282,48,4712,48],[5283,6,4713,8],[5283,13,4713,15,"OAuthProvider"],[5283,26,4713,28],[5283,27,4713,29,"oauthCredentialFromTaggedObject"],[5283,58,4713,60],[5283,59,4713,61,"userCredential"],[5283,73,4713,75],[5283,74,4713,76],[5284,4,4714,4],[5285,4,4715,4],[5286,0,4716,0],[5287,0,4717,0],[5288,0,4718,0],[5289,0,4719,0],[5290,0,4720,0],[5291,4,4721,4],[5291,11,4721,11,"credentialFromError"],[5291,30,4721,30,"credentialFromError"],[5291,31,4721,31,"error"],[5291,36,4721,36],[5291,38,4721,38],[5292,6,4722,8],[5292,13,4722,15,"OAuthProvider"],[5292,26,4722,28],[5292,27,4722,29,"oauthCredentialFromTaggedObject"],[5292,58,4722,60],[5292,59,4722,62,"error"],[5292,64,4722,67],[5292,65,4722,68,"customData"],[5292,75,4722,78],[5292,79,4722,82],[5292,80,4722,83],[5292,81,4722,85],[5292,82,4722,86],[5293,4,4723,4],[5294,4,4724,4],[5294,11,4724,11,"oauthCredentialFromTaggedObject"],[5294,42,4724,42,"oauthCredentialFromTaggedObject"],[5294,43,4724,43],[5295,6,4724,45,"_tokenResponse"],[5295,20,4724,59],[5295,22,4724,61,"tokenResponse"],[5296,4,4724,75],[5296,5,4724,76],[5296,7,4724,78],[5297,6,4725,8],[5297,10,4725,12],[5297,11,4725,13,"tokenResponse"],[5297,24,4725,26],[5297,26,4725,28],[5298,8,4726,12],[5298,15,4726,19],[5298,19,4726,23],[5299,6,4727,8],[5300,6,4728,8],[5300,12,4728,14],[5301,8,4728,16,"oauthIdToken"],[5301,20,4728,28],[5302,8,4728,30,"oauthAccessToken"],[5302,24,4728,46],[5303,8,4728,48,"oauthTokenSecret"],[5303,24,4728,64],[5304,8,4728,66,"pendingToken"],[5304,20,4728,78],[5305,8,4728,80,"nonce"],[5305,13,4728,85],[5306,8,4728,87,"providerId"],[5307,6,4728,98],[5307,7,4728,99],[5307,10,4728,102,"tokenResponse"],[5307,23,4728,115],[5308,6,4729,8],[5308,10,4729,12],[5308,11,4729,13,"oauthAccessToken"],[5308,27,4729,29],[5308,31,4730,12],[5308,32,4730,13,"oauthTokenSecret"],[5308,48,4730,29],[5308,52,4731,12],[5308,53,4731,13,"oauthIdToken"],[5308,65,4731,25],[5308,69,4732,12],[5308,70,4732,13,"pendingToken"],[5308,82,4732,25],[5308,84,4732,27],[5309,8,4733,12],[5309,15,4733,19],[5309,19,4733,23],[5310,6,4734,8],[5311,6,4735,8],[5311,10,4735,12],[5311,11,4735,13,"providerId"],[5311,21,4735,23],[5311,23,4735,25],[5312,8,4736,12],[5312,15,4736,19],[5312,19,4736,23],[5313,6,4737,8],[5314,6,4738,8],[5314,10,4738,12],[5315,8,4739,12],[5315,15,4739,19],[5315,19,4739,23,"OAuthProvider"],[5315,32,4739,36],[5315,33,4739,37,"providerId"],[5315,43,4739,47],[5315,44,4739,48],[5315,45,4739,49,"_credential"],[5315,56,4739,60],[5315,57,4739,61],[5316,10,4740,16,"idToken"],[5316,17,4740,23],[5316,19,4740,25,"oauthIdToken"],[5316,31,4740,37],[5317,10,4741,16,"accessToken"],[5317,21,4741,27],[5317,23,4741,29,"oauthAccessToken"],[5317,39,4741,45],[5318,10,4742,16,"nonce"],[5318,15,4742,21],[5319,10,4743,16,"pendingToken"],[5320,8,4744,12],[5320,9,4744,13],[5320,10,4744,14],[5321,6,4745,8],[5321,7,4745,9],[5321,8,4746,8],[5321,15,4746,15,"e"],[5321,16,4746,16],[5321,18,4746,18],[5322,8,4747,12],[5322,15,4747,19],[5322,19,4747,23],[5323,6,4748,8],[5324,4,4749,4],[5325,2,4750,0],[5327,2,4752,0],[5328,0,4753,0],[5329,0,4754,0],[5330,0,4755,0],[5331,0,4756,0],[5332,0,4757,0],[5333,0,4758,0],[5334,0,4759,0],[5335,0,4760,0],[5336,0,4761,0],[5337,0,4762,0],[5338,0,4763,0],[5339,0,4764,0],[5340,0,4765,0],[5341,0,4766,0],[5342,0,4767,0],[5343,2,4768,0],[5344,0,4769,0],[5345,0,4770,0],[5346,0,4771,0],[5347,0,4772,0],[5348,0,4773,0],[5349,0,4774,0],[5350,0,4775,0],[5351,0,4776,0],[5352,0,4777,0],[5353,0,4778,0],[5354,0,4779,0],[5355,0,4780,0],[5356,0,4781,0],[5357,0,4782,0],[5358,0,4783,0],[5359,0,4784,0],[5360,0,4785,0],[5361,0,4786,0],[5362,0,4787,0],[5363,0,4788,0],[5364,0,4789,0],[5365,0,4790,0],[5366,0,4791,0],[5367,0,4792,0],[5368,0,4793,0],[5369,0,4794,0],[5370,0,4795,0],[5371,0,4796,0],[5372,0,4797,0],[5373,0,4798,0],[5374,0,4799,0],[5375,0,4800,0],[5376,0,4801,0],[5377,0,4802,0],[5378,0,4803,0],[5379,0,4804,0],[5380,0,4805,0],[5381,0,4806,0],[5382,2,4807,0],[5382,8,4807,6,"FacebookAuthProvider"],[5382,28,4807,26],[5382,37,4807,35,"BaseOAuthProvider"],[5382,54,4807,52],[5382,55,4807,53],[5383,4,4808,4,"constructor"],[5383,15,4808,15,"constructor"],[5383,16,4808,15],[5383,18,4808,18],[5384,6,4809,8],[5384,11,4809,13],[5384,12,4809,14],[5384,26,4809,28],[5384,27,4809,29],[5384,52,4809,54],[5384,53,4809,55],[5385,4,4810,4],[5386,4,4811,4],[5387,0,4812,0],[5388,0,4813,0],[5389,0,4814,0],[5390,0,4815,0],[5391,0,4816,0],[5392,0,4817,0],[5393,0,4818,0],[5394,0,4819,0],[5395,0,4820,0],[5396,0,4821,0],[5397,0,4822,0],[5398,4,4823,4],[5398,11,4823,11,"credential"],[5398,21,4823,21,"credential"],[5398,22,4823,22,"accessToken"],[5398,33,4823,33],[5398,35,4823,35],[5399,6,4824,8],[5399,13,4824,15,"OAuthCredential"],[5399,28,4824,30],[5399,29,4824,31,"_fromParams"],[5399,40,4824,42],[5399,41,4824,43],[5400,8,4825,12,"providerId"],[5400,18,4825,22],[5400,20,4825,24,"FacebookAuthProvider"],[5400,40,4825,44],[5400,41,4825,45,"PROVIDER_ID"],[5400,52,4825,56],[5401,8,4826,12,"signInMethod"],[5401,20,4826,24],[5401,22,4826,26,"FacebookAuthProvider"],[5401,42,4826,46],[5401,43,4826,47,"FACEBOOK_SIGN_IN_METHOD"],[5401,66,4826,70],[5402,8,4827,12,"accessToken"],[5403,6,4828,8],[5403,7,4828,9],[5403,8,4828,10],[5404,4,4829,4],[5405,4,4830,4],[5406,0,4831,0],[5407,0,4832,0],[5408,0,4833,0],[5409,0,4834,0],[5410,4,4835,4],[5410,11,4835,11,"credentialFromResult"],[5410,31,4835,31,"credentialFromResult"],[5410,32,4835,32,"userCredential"],[5410,46,4835,46],[5410,48,4835,48],[5411,6,4836,8],[5411,13,4836,15,"FacebookAuthProvider"],[5411,33,4836,35],[5411,34,4836,36,"credentialFromTaggedObject"],[5411,60,4836,62],[5411,61,4836,63,"userCredential"],[5411,75,4836,77],[5411,76,4836,78],[5412,4,4837,4],[5413,4,4838,4],[5414,0,4839,0],[5415,0,4840,0],[5416,0,4841,0],[5417,0,4842,0],[5418,0,4843,0],[5419,4,4844,4],[5419,11,4844,11,"credentialFromError"],[5419,30,4844,30,"credentialFromError"],[5419,31,4844,31,"error"],[5419,36,4844,36],[5419,38,4844,38],[5420,6,4845,8],[5420,13,4845,15,"FacebookAuthProvider"],[5420,33,4845,35],[5420,34,4845,36,"credentialFromTaggedObject"],[5420,60,4845,62],[5420,61,4845,64,"error"],[5420,66,4845,69],[5420,67,4845,70,"customData"],[5420,77,4845,80],[5420,81,4845,84],[5420,82,4845,85],[5420,83,4845,87],[5420,84,4845,88],[5421,4,4846,4],[5422,4,4847,4],[5422,11,4847,11,"credentialFromTaggedObject"],[5422,37,4847,37,"credentialFromTaggedObject"],[5422,38,4847,38],[5423,6,4847,40,"_tokenResponse"],[5423,20,4847,54],[5423,22,4847,56,"tokenResponse"],[5424,4,4847,70],[5424,5,4847,71],[5424,7,4847,73],[5425,6,4848,8],[5425,10,4848,12],[5425,11,4848,13,"tokenResponse"],[5425,24,4848,26],[5425,28,4848,30],[5425,30,4848,32],[5425,48,4848,50],[5425,52,4848,54,"tokenResponse"],[5425,65,4848,67],[5425,66,4848,68],[5425,68,4848,70],[5426,8,4849,12],[5426,15,4849,19],[5426,19,4849,23],[5427,6,4850,8],[5428,6,4851,8],[5428,10,4851,12],[5428,11,4851,13,"tokenResponse"],[5428,24,4851,26],[5428,25,4851,27,"oauthAccessToken"],[5428,41,4851,43],[5428,43,4851,45],[5429,8,4852,12],[5429,15,4852,19],[5429,19,4852,23],[5430,6,4853,8],[5431,6,4854,8],[5431,10,4854,12],[5432,8,4855,12],[5432,15,4855,19,"FacebookAuthProvider"],[5432,35,4855,39],[5432,36,4855,40,"credential"],[5432,46,4855,50],[5432,47,4855,51,"tokenResponse"],[5432,60,4855,64],[5432,61,4855,65,"oauthAccessToken"],[5432,77,4855,81],[5432,78,4855,82],[5433,6,4856,8],[5433,7,4856,9],[5433,8,4857,8],[5433,14,4857,14],[5434,8,4858,12],[5434,15,4858,19],[5434,19,4858,23],[5435,6,4859,8],[5436,4,4860,4],[5437,2,4861,0],[5438,2,4862,0],[5439,2,4863,0,"FacebookAuthProvider"],[5439,22,4863,20],[5439,23,4863,21,"FACEBOOK_SIGN_IN_METHOD"],[5439,46,4863,44],[5439,49,4863,47],[5439,63,4863,61],[5439,64,4863,62],[5440,2,4864,0],[5441,2,4865,0,"FacebookAuthProvider"],[5441,22,4865,20],[5441,23,4865,21,"PROVIDER_ID"],[5441,34,4865,32],[5441,37,4865,35],[5441,51,4865,49],[5441,52,4865,50],[5443,2,4867,0],[5444,0,4868,0],[5445,0,4869,0],[5446,0,4870,0],[5447,0,4871,0],[5448,0,4872,0],[5449,0,4873,0],[5450,0,4874,0],[5451,0,4875,0],[5452,0,4876,0],[5453,0,4877,0],[5454,0,4878,0],[5455,0,4879,0],[5456,0,4880,0],[5457,0,4881,0],[5458,0,4882,0],[5459,2,4883,0],[5460,0,4884,0],[5461,0,4885,0],[5462,0,4886,0],[5463,0,4887,0],[5464,0,4888,0],[5465,0,4889,0],[5466,0,4890,0],[5467,0,4891,0],[5468,0,4892,0],[5469,0,4893,0],[5470,0,4894,0],[5471,0,4895,0],[5472,0,4896,0],[5473,0,4897,0],[5474,0,4898,0],[5475,0,4899,0],[5476,0,4900,0],[5477,0,4901,0],[5478,0,4902,0],[5479,0,4903,0],[5480,0,4904,0],[5481,0,4905,0],[5482,0,4906,0],[5483,0,4907,0],[5484,0,4908,0],[5485,0,4909,0],[5486,0,4910,0],[5487,0,4911,0],[5488,0,4912,0],[5489,0,4913,0],[5490,0,4914,0],[5491,0,4915,0],[5492,0,4916,0],[5493,0,4917,0],[5494,0,4918,0],[5495,0,4919,0],[5496,0,4920,0],[5497,0,4921,0],[5498,0,4922,0],[5499,0,4923,0],[5500,2,4924,0],[5500,8,4924,6,"GoogleAuthProvider"],[5500,26,4924,24],[5500,35,4924,33,"BaseOAuthProvider"],[5500,52,4924,50],[5500,53,4924,51],[5501,4,4925,4,"constructor"],[5501,15,4925,15,"constructor"],[5501,16,4925,15],[5501,18,4925,18],[5502,6,4926,8],[5502,11,4926,13],[5502,12,4926,14],[5502,24,4926,26],[5502,25,4926,27],[5502,48,4926,50],[5502,49,4926,51],[5503,6,4927,8],[5503,10,4927,12],[5503,11,4927,13,"addScope"],[5503,19,4927,21],[5503,20,4927,22],[5503,29,4927,31],[5503,30,4927,32],[5504,4,4928,4],[5505,4,4929,4],[5506,0,4930,0],[5507,0,4931,0],[5508,0,4932,0],[5509,0,4933,0],[5510,0,4934,0],[5511,0,4935,0],[5512,0,4936,0],[5513,0,4937,0],[5514,0,4938,0],[5515,0,4939,0],[5516,0,4940,0],[5517,0,4941,0],[5518,4,4942,4],[5518,11,4942,11,"credential"],[5518,21,4942,21,"credential"],[5518,22,4942,22,"idToken"],[5518,29,4942,29],[5518,31,4942,31,"accessToken"],[5518,42,4942,42],[5518,44,4942,44],[5519,6,4943,8],[5519,13,4943,15,"OAuthCredential"],[5519,28,4943,30],[5519,29,4943,31,"_fromParams"],[5519,40,4943,42],[5519,41,4943,43],[5520,8,4944,12,"providerId"],[5520,18,4944,22],[5520,20,4944,24,"GoogleAuthProvider"],[5520,38,4944,42],[5520,39,4944,43,"PROVIDER_ID"],[5520,50,4944,54],[5521,8,4945,12,"signInMethod"],[5521,20,4945,24],[5521,22,4945,26,"GoogleAuthProvider"],[5521,40,4945,44],[5521,41,4945,45,"GOOGLE_SIGN_IN_METHOD"],[5521,62,4945,66],[5522,8,4946,12,"idToken"],[5522,15,4946,19],[5523,8,4947,12,"accessToken"],[5524,6,4948,8],[5524,7,4948,9],[5524,8,4948,10],[5525,4,4949,4],[5526,4,4950,4],[5527,0,4951,0],[5528,0,4952,0],[5529,0,4953,0],[5530,0,4954,0],[5531,4,4955,4],[5531,11,4955,11,"credentialFromResult"],[5531,31,4955,31,"credentialFromResult"],[5531,32,4955,32,"userCredential"],[5531,46,4955,46],[5531,48,4955,48],[5532,6,4956,8],[5532,13,4956,15,"GoogleAuthProvider"],[5532,31,4956,33],[5532,32,4956,34,"credentialFromTaggedObject"],[5532,58,4956,60],[5532,59,4956,61,"userCredential"],[5532,73,4956,75],[5532,74,4956,76],[5533,4,4957,4],[5534,4,4958,4],[5535,0,4959,0],[5536,0,4960,0],[5537,0,4961,0],[5538,0,4962,0],[5539,0,4963,0],[5540,4,4964,4],[5540,11,4964,11,"credentialFromError"],[5540,30,4964,30,"credentialFromError"],[5540,31,4964,31,"error"],[5540,36,4964,36],[5540,38,4964,38],[5541,6,4965,8],[5541,13,4965,15,"GoogleAuthProvider"],[5541,31,4965,33],[5541,32,4965,34,"credentialFromTaggedObject"],[5541,58,4965,60],[5541,59,4965,62,"error"],[5541,64,4965,67],[5541,65,4965,68,"customData"],[5541,75,4965,78],[5541,79,4965,82],[5541,80,4965,83],[5541,81,4965,85],[5541,82,4965,86],[5542,4,4966,4],[5543,4,4967,4],[5543,11,4967,11,"credentialFromTaggedObject"],[5543,37,4967,37,"credentialFromTaggedObject"],[5543,38,4967,38],[5544,6,4967,40,"_tokenResponse"],[5544,20,4967,54],[5544,22,4967,56,"tokenResponse"],[5545,4,4967,70],[5545,5,4967,71],[5545,7,4967,73],[5546,6,4968,8],[5546,10,4968,12],[5546,11,4968,13,"tokenResponse"],[5546,24,4968,26],[5546,26,4968,28],[5547,8,4969,12],[5547,15,4969,19],[5547,19,4969,23],[5548,6,4970,8],[5549,6,4971,8],[5549,12,4971,14],[5550,8,4971,16,"oauthIdToken"],[5550,20,4971,28],[5551,8,4971,30,"oauthAccessToken"],[5552,6,4971,47],[5552,7,4971,48],[5552,10,4971,51,"tokenResponse"],[5552,23,4971,64],[5553,6,4972,8],[5553,10,4972,12],[5553,11,4972,13,"oauthIdToken"],[5553,23,4972,25],[5553,27,4972,29],[5553,28,4972,30,"oauthAccessToken"],[5553,44,4972,46],[5553,46,4972,48],[5554,8,4973,12],[5555,8,4974,12],[5555,15,4974,19],[5555,19,4974,23],[5556,6,4975,8],[5557,6,4976,8],[5557,10,4976,12],[5558,8,4977,12],[5558,15,4977,19,"GoogleAuthProvider"],[5558,33,4977,37],[5558,34,4977,38,"credential"],[5558,44,4977,48],[5558,45,4977,49,"oauthIdToken"],[5558,57,4977,61],[5558,59,4977,63,"oauthAccessToken"],[5558,75,4977,79],[5558,76,4977,80],[5559,6,4978,8],[5559,7,4978,9],[5559,8,4979,8],[5559,14,4979,14],[5560,8,4980,12],[5560,15,4980,19],[5560,19,4980,23],[5561,6,4981,8],[5562,4,4982,4],[5563,2,4983,0],[5564,2,4984,0],[5565,2,4985,0,"GoogleAuthProvider"],[5565,20,4985,18],[5565,21,4985,19,"GOOGLE_SIGN_IN_METHOD"],[5565,42,4985,40],[5565,45,4985,43],[5565,57,4985,55],[5565,58,4985,56],[5566,2,4986,0],[5567,2,4987,0,"GoogleAuthProvider"],[5567,20,4987,18],[5567,21,4987,19,"PROVIDER_ID"],[5567,32,4987,30],[5567,35,4987,33],[5567,47,4987,45],[5567,48,4987,46],[5569,2,4989,0],[5570,0,4990,0],[5571,0,4991,0],[5572,0,4992,0],[5573,0,4993,0],[5574,0,4994,0],[5575,0,4995,0],[5576,0,4996,0],[5577,0,4997,0],[5578,0,4998,0],[5579,0,4999,0],[5580,0,5000,0],[5581,0,5001,0],[5582,0,5002,0],[5583,0,5003,0],[5584,0,5004,0],[5585,2,5005,0],[5586,0,5006,0],[5587,0,5007,0],[5588,0,5008,0],[5589,0,5009,0],[5590,0,5010,0],[5591,0,5011,0],[5592,0,5012,0],[5593,0,5013,0],[5594,0,5014,0],[5595,0,5015,0],[5596,0,5016,0],[5597,0,5017,0],[5598,0,5018,0],[5599,0,5019,0],[5600,0,5020,0],[5601,0,5021,0],[5602,0,5022,0],[5603,0,5023,0],[5604,0,5024,0],[5605,0,5025,0],[5606,0,5026,0],[5607,0,5027,0],[5608,0,5028,0],[5609,0,5029,0],[5610,0,5030,0],[5611,0,5031,0],[5612,0,5032,0],[5613,0,5033,0],[5614,0,5034,0],[5615,0,5035,0],[5616,0,5036,0],[5617,0,5037,0],[5618,0,5038,0],[5619,0,5039,0],[5620,0,5040,0],[5621,0,5041,0],[5622,0,5042,0],[5623,0,5043,0],[5624,0,5044,0],[5625,0,5045,0],[5626,0,5046,0],[5627,2,5047,0],[5627,8,5047,6,"GithubAuthProvider"],[5627,26,5047,24],[5627,35,5047,33,"BaseOAuthProvider"],[5627,52,5047,50],[5627,53,5047,51],[5628,4,5048,4,"constructor"],[5628,15,5048,15,"constructor"],[5628,16,5048,15],[5628,18,5048,18],[5629,6,5049,8],[5629,11,5049,13],[5629,12,5049,14],[5629,24,5049,26],[5629,25,5049,27],[5629,48,5049,50],[5629,49,5049,51],[5630,4,5050,4],[5631,4,5051,4],[5632,0,5052,0],[5633,0,5053,0],[5634,0,5054,0],[5635,0,5055,0],[5636,4,5056,4],[5636,11,5056,11,"credential"],[5636,21,5056,21,"credential"],[5636,22,5056,22,"accessToken"],[5636,33,5056,33],[5636,35,5056,35],[5637,6,5057,8],[5637,13,5057,15,"OAuthCredential"],[5637,28,5057,30],[5637,29,5057,31,"_fromParams"],[5637,40,5057,42],[5637,41,5057,43],[5638,8,5058,12,"providerId"],[5638,18,5058,22],[5638,20,5058,24,"GithubAuthProvider"],[5638,38,5058,42],[5638,39,5058,43,"PROVIDER_ID"],[5638,50,5058,54],[5639,8,5059,12,"signInMethod"],[5639,20,5059,24],[5639,22,5059,26,"GithubAuthProvider"],[5639,40,5059,44],[5639,41,5059,45,"GITHUB_SIGN_IN_METHOD"],[5639,62,5059,66],[5640,8,5060,12,"accessToken"],[5641,6,5061,8],[5641,7,5061,9],[5641,8,5061,10],[5642,4,5062,4],[5643,4,5063,4],[5644,0,5064,0],[5645,0,5065,0],[5646,0,5066,0],[5647,0,5067,0],[5648,4,5068,4],[5648,11,5068,11,"credentialFromResult"],[5648,31,5068,31,"credentialFromResult"],[5648,32,5068,32,"userCredential"],[5648,46,5068,46],[5648,48,5068,48],[5649,6,5069,8],[5649,13,5069,15,"GithubAuthProvider"],[5649,31,5069,33],[5649,32,5069,34,"credentialFromTaggedObject"],[5649,58,5069,60],[5649,59,5069,61,"userCredential"],[5649,73,5069,75],[5649,74,5069,76],[5650,4,5070,4],[5651,4,5071,4],[5652,0,5072,0],[5653,0,5073,0],[5654,0,5074,0],[5655,0,5075,0],[5656,0,5076,0],[5657,4,5077,4],[5657,11,5077,11,"credentialFromError"],[5657,30,5077,30,"credentialFromError"],[5657,31,5077,31,"error"],[5657,36,5077,36],[5657,38,5077,38],[5658,6,5078,8],[5658,13,5078,15,"GithubAuthProvider"],[5658,31,5078,33],[5658,32,5078,34,"credentialFromTaggedObject"],[5658,58,5078,60],[5658,59,5078,62,"error"],[5658,64,5078,67],[5658,65,5078,68,"customData"],[5658,75,5078,78],[5658,79,5078,82],[5658,80,5078,83],[5658,81,5078,85],[5658,82,5078,86],[5659,4,5079,4],[5660,4,5080,4],[5660,11,5080,11,"credentialFromTaggedObject"],[5660,37,5080,37,"credentialFromTaggedObject"],[5660,38,5080,38],[5661,6,5080,40,"_tokenResponse"],[5661,20,5080,54],[5661,22,5080,56,"tokenResponse"],[5662,4,5080,70],[5662,5,5080,71],[5662,7,5080,73],[5663,6,5081,8],[5663,10,5081,12],[5663,11,5081,13,"tokenResponse"],[5663,24,5081,26],[5663,28,5081,30],[5663,30,5081,32],[5663,48,5081,50],[5663,52,5081,54,"tokenResponse"],[5663,65,5081,67],[5663,66,5081,68],[5663,68,5081,70],[5664,8,5082,12],[5664,15,5082,19],[5664,19,5082,23],[5665,6,5083,8],[5666,6,5084,8],[5666,10,5084,12],[5666,11,5084,13,"tokenResponse"],[5666,24,5084,26],[5666,25,5084,27,"oauthAccessToken"],[5666,41,5084,43],[5666,43,5084,45],[5667,8,5085,12],[5667,15,5085,19],[5667,19,5085,23],[5668,6,5086,8],[5669,6,5087,8],[5669,10,5087,12],[5670,8,5088,12],[5670,15,5088,19,"GithubAuthProvider"],[5670,33,5088,37],[5670,34,5088,38,"credential"],[5670,44,5088,48],[5670,45,5088,49,"tokenResponse"],[5670,58,5088,62],[5670,59,5088,63,"oauthAccessToken"],[5670,75,5088,79],[5670,76,5088,80],[5671,6,5089,8],[5671,7,5089,9],[5671,8,5090,8],[5671,14,5090,14],[5672,8,5091,12],[5672,15,5091,19],[5672,19,5091,23],[5673,6,5092,8],[5674,4,5093,4],[5675,2,5094,0],[5676,2,5095,0],[5677,2,5096,0,"GithubAuthProvider"],[5677,20,5096,18],[5677,21,5096,19,"GITHUB_SIGN_IN_METHOD"],[5677,42,5096,40],[5677,45,5096,43],[5677,57,5096,55],[5677,58,5096,56],[5678,2,5097,0],[5679,2,5098,0,"GithubAuthProvider"],[5679,20,5098,18],[5679,21,5098,19,"PROVIDER_ID"],[5679,32,5098,30],[5679,35,5098,33],[5679,47,5098,45],[5679,48,5098,46],[5681,2,5100,0],[5682,0,5101,0],[5683,0,5102,0],[5684,0,5103,0],[5685,0,5104,0],[5686,0,5105,0],[5687,0,5106,0],[5688,0,5107,0],[5689,0,5108,0],[5690,0,5109,0],[5691,0,5110,0],[5692,0,5111,0],[5693,0,5112,0],[5694,0,5113,0],[5695,0,5114,0],[5696,0,5115,0],[5697,2,5116,0],[5697,8,5116,6,"IDP_REQUEST_URI"],[5697,23,5116,21],[5697,26,5116,24],[5697,44,5116,42],[5698,2,5117,0],[5699,0,5118,0],[5700,0,5119,0],[5701,2,5120,0],[5701,8,5120,6,"SAMLAuthCredential"],[5701,26,5120,24],[5701,35,5120,33,"AuthCredential"],[5701,49,5120,47],[5701,50,5120,48],[5702,4,5121,4],[5703,4,5122,4,"constructor"],[5703,15,5122,15,"constructor"],[5703,16,5122,16,"providerId"],[5703,26,5122,26],[5703,28,5122,28,"pendingToken"],[5703,40,5122,40],[5703,42,5122,42],[5704,6,5123,8],[5704,11,5123,13],[5704,12,5123,14,"providerId"],[5704,22,5123,24],[5704,24,5123,26,"providerId"],[5704,34,5123,36],[5704,35,5123,37],[5705,6,5124,8],[5705,10,5124,12],[5705,11,5124,13,"pendingToken"],[5705,23,5124,25],[5705,26,5124,28,"pendingToken"],[5705,38,5124,40],[5706,4,5125,4],[5707,4,5126,4],[5708,4,5127,4,"_getIdTokenResponse"],[5708,23,5127,23,"_getIdTokenResponse"],[5708,24,5127,24,"auth"],[5708,28,5127,28],[5708,30,5127,30],[5709,6,5128,8],[5709,12,5128,14,"request"],[5709,19,5128,21],[5709,22,5128,24],[5709,26,5128,28],[5709,27,5128,29,"buildRequest"],[5709,39,5128,41],[5709,40,5128,42],[5709,41,5128,43],[5710,6,5129,8],[5710,13,5129,15,"signInWithIdp"],[5710,26,5129,28],[5710,27,5129,29,"auth"],[5710,31,5129,33],[5710,33,5129,35,"request"],[5710,40,5129,42],[5710,41,5129,43],[5711,4,5130,4],[5712,4,5131,4],[5713,4,5132,4,"_linkToIdToken"],[5713,18,5132,18,"_linkToIdToken"],[5713,19,5132,19,"auth"],[5713,23,5132,23],[5713,25,5132,25,"idToken"],[5713,32,5132,32],[5713,34,5132,34],[5714,6,5133,8],[5714,12,5133,14,"request"],[5714,19,5133,21],[5714,22,5133,24],[5714,26,5133,28],[5714,27,5133,29,"buildRequest"],[5714,39,5133,41],[5714,40,5133,42],[5714,41,5133,43],[5715,6,5134,8,"request"],[5715,13,5134,15],[5715,14,5134,16,"idToken"],[5715,21,5134,23],[5715,24,5134,26,"idToken"],[5715,31,5134,33],[5716,6,5135,8],[5716,13,5135,15,"signInWithIdp"],[5716,26,5135,28],[5716,27,5135,29,"auth"],[5716,31,5135,33],[5716,33,5135,35,"request"],[5716,40,5135,42],[5716,41,5135,43],[5717,4,5136,4],[5718,4,5137,4],[5719,4,5138,4,"_getReauthenticationResolver"],[5719,32,5138,32,"_getReauthenticationResolver"],[5719,33,5138,33,"auth"],[5719,37,5138,37],[5719,39,5138,39],[5720,6,5139,8],[5720,12,5139,14,"request"],[5720,19,5139,21],[5720,22,5139,24],[5720,26,5139,28],[5720,27,5139,29,"buildRequest"],[5720,39,5139,41],[5720,40,5139,42],[5720,41,5139,43],[5721,6,5140,8,"request"],[5721,13,5140,15],[5721,14,5140,16,"autoCreate"],[5721,24,5140,26],[5721,27,5140,29],[5721,32,5140,34],[5722,6,5141,8],[5722,13,5141,15,"signInWithIdp"],[5722,26,5141,28],[5722,27,5141,29,"auth"],[5722,31,5141,33],[5722,33,5141,35,"request"],[5722,40,5141,42],[5722,41,5141,43],[5723,4,5142,4],[5724,4,5143,4],[5725,4,5144,4,"toJSON"],[5725,10,5144,10,"toJSON"],[5725,11,5144,10],[5725,13,5144,13],[5726,6,5145,8],[5726,13,5145,15],[5727,8,5146,12,"signInMethod"],[5727,20,5146,24],[5727,22,5146,26],[5727,26,5146,30],[5727,27,5146,31,"signInMethod"],[5727,39,5146,43],[5728,8,5147,12,"providerId"],[5728,18,5147,22],[5728,20,5147,24],[5728,24,5147,28],[5728,25,5147,29,"providerId"],[5728,35,5147,39],[5729,8,5148,12,"pendingToken"],[5729,20,5148,24],[5729,22,5148,26],[5729,26,5148,30],[5729,27,5148,31,"pendingToken"],[5730,6,5149,8],[5730,7,5149,9],[5731,4,5150,4],[5732,4,5151,4],[5733,0,5152,0],[5734,0,5153,0],[5735,0,5154,0],[5736,0,5155,0],[5737,0,5156,0],[5738,0,5157,0],[5739,0,5158,0],[5740,0,5159,0],[5741,4,5160,4],[5741,11,5160,11,"fromJSON"],[5741,19,5160,19,"fromJSON"],[5741,20,5160,20,"json"],[5741,24,5160,24],[5741,26,5160,26],[5742,6,5161,8],[5742,12,5161,14,"obj"],[5742,15,5161,17],[5742,18,5161,20],[5742,25,5161,27,"json"],[5742,29,5161,31],[5742,34,5161,36],[5742,42,5161,44],[5742,45,5161,47,"JSON"],[5742,49,5161,51],[5742,50,5161,52,"parse"],[5742,55,5161,57],[5742,56,5161,58,"json"],[5742,60,5161,62],[5742,61,5161,63],[5742,64,5161,66,"json"],[5742,68,5161,70],[5743,6,5162,8],[5743,12,5162,14],[5744,8,5162,16,"providerId"],[5744,18,5162,26],[5745,8,5162,28,"signInMethod"],[5745,20,5162,40],[5746,8,5162,42,"pendingToken"],[5747,6,5162,55],[5747,7,5162,56],[5747,10,5162,59,"obj"],[5747,13,5162,62],[5748,6,5163,8],[5748,10,5163,12],[5748,11,5163,13,"providerId"],[5748,21,5163,23],[5748,25,5164,12],[5748,26,5164,13,"signInMethod"],[5748,38,5164,25],[5748,42,5165,12],[5748,43,5165,13,"pendingToken"],[5748,55,5165,25],[5748,59,5166,12,"providerId"],[5748,69,5166,22],[5748,74,5166,27,"signInMethod"],[5748,86,5166,39],[5748,88,5166,41],[5749,8,5167,12],[5749,15,5167,19],[5749,19,5167,23],[5750,6,5168,8],[5751,6,5169,8],[5751,13,5169,15],[5751,17,5169,19,"SAMLAuthCredential"],[5751,35,5169,37],[5751,36,5169,38,"providerId"],[5751,46,5169,48],[5751,48,5169,50,"pendingToken"],[5751,60,5169,62],[5751,61,5169,63],[5752,4,5170,4],[5753,4,5171,4],[5754,0,5172,0],[5755,0,5173,0],[5756,0,5174,0],[5757,0,5175,0],[5758,4,5176,4],[5758,11,5176,11,"_create"],[5758,18,5176,18,"_create"],[5758,19,5176,19,"providerId"],[5758,29,5176,29],[5758,31,5176,31,"pendingToken"],[5758,43,5176,43],[5758,45,5176,45],[5759,6,5177,8],[5759,13,5177,15],[5759,17,5177,19,"SAMLAuthCredential"],[5759,35,5177,37],[5759,36,5177,38,"providerId"],[5759,46,5177,48],[5759,48,5177,50,"pendingToken"],[5759,60,5177,62],[5759,61,5177,63],[5760,4,5178,4],[5761,4,5179,4,"buildRequest"],[5761,16,5179,16,"buildRequest"],[5761,17,5179,16],[5761,19,5179,19],[5762,6,5180,8],[5762,13,5180,15],[5763,8,5181,12,"requestUri"],[5763,18,5181,22],[5763,20,5181,24,"IDP_REQUEST_URI"],[5763,35,5181,39],[5764,8,5182,12,"returnSecureToken"],[5764,25,5182,29],[5764,27,5182,31],[5764,31,5182,35],[5765,8,5183,12,"pendingToken"],[5765,20,5183,24],[5765,22,5183,26],[5765,26,5183,30],[5765,27,5183,31,"pendingToken"],[5766,6,5184,8],[5766,7,5184,9],[5767,4,5185,4],[5768,2,5186,0],[5770,2,5188,0],[5771,0,5189,0],[5772,0,5190,0],[5773,0,5191,0],[5774,0,5192,0],[5775,0,5193,0],[5776,0,5194,0],[5777,0,5195,0],[5778,0,5196,0],[5779,0,5197,0],[5780,0,5198,0],[5781,0,5199,0],[5782,0,5200,0],[5783,0,5201,0],[5784,0,5202,0],[5785,0,5203,0],[5786,2,5204,0],[5786,8,5204,6,"SAML_PROVIDER_PREFIX"],[5786,28,5204,26],[5786,31,5204,29],[5786,38,5204,36],[5787,2,5205,0],[5788,0,5206,0],[5789,0,5207,0],[5790,0,5208,0],[5791,0,5209,0],[5792,2,5210,0],[5792,8,5210,6,"SAMLAuthProvider"],[5792,24,5210,22],[5792,33,5210,31,"FederatedAuthProvider"],[5792,54,5210,52],[5792,55,5210,53],[5793,4,5211,4],[5794,0,5212,0],[5795,0,5213,0],[5796,0,5214,0],[5797,4,5215,4,"constructor"],[5797,15,5215,15,"constructor"],[5797,16,5215,16,"providerId"],[5797,26,5215,26],[5797,28,5215,28],[5798,6,5216,8,"_assert"],[5798,13,5216,15],[5798,14,5216,16,"providerId"],[5798,24,5216,26],[5798,25,5216,27,"startsWith"],[5798,35,5216,37],[5798,36,5216,38,"SAML_PROVIDER_PREFIX"],[5798,56,5216,58],[5798,57,5216,59],[5798,59,5216,61],[5798,75,5216,77],[5798,76,5216,78],[5798,110,5216,112],[5798,111,5216,113],[5799,6,5217,8],[5799,11,5217,13],[5799,12,5217,14,"providerId"],[5799,22,5217,24],[5799,23,5217,25],[5800,4,5218,4],[5801,4,5219,4],[5802,0,5220,0],[5803,0,5221,0],[5804,0,5222,0],[5805,0,5223,0],[5806,0,5224,0],[5807,0,5225,0],[5808,0,5226,0],[5809,0,5227,0],[5810,0,5228,0],[5811,0,5229,0],[5812,0,5230,0],[5813,0,5231,0],[5814,0,5232,0],[5815,0,5233,0],[5816,0,5234,0],[5817,4,5235,4],[5817,11,5235,11,"credentialFromResult"],[5817,31,5235,31,"credentialFromResult"],[5817,32,5235,32,"userCredential"],[5817,46,5235,46],[5817,48,5235,48],[5818,6,5236,8],[5818,13,5236,15,"SAMLAuthProvider"],[5818,29,5236,31],[5818,30,5236,32,"samlCredentialFromTaggedObject"],[5818,60,5236,62],[5818,61,5236,63,"userCredential"],[5818,75,5236,77],[5818,76,5236,78],[5819,4,5237,4],[5820,4,5238,4],[5821,0,5239,0],[5822,0,5240,0],[5823,0,5241,0],[5824,0,5242,0],[5825,0,5243,0],[5826,4,5244,4],[5826,11,5244,11,"credentialFromError"],[5826,30,5244,30,"credentialFromError"],[5826,31,5244,31,"error"],[5826,36,5244,36],[5826,38,5244,38],[5827,6,5245,8],[5827,13,5245,15,"SAMLAuthProvider"],[5827,29,5245,31],[5827,30,5245,32,"samlCredentialFromTaggedObject"],[5827,60,5245,62],[5827,61,5245,64,"error"],[5827,66,5245,69],[5827,67,5245,70,"customData"],[5827,77,5245,80],[5827,81,5245,84],[5827,82,5245,85],[5827,83,5245,87],[5827,84,5245,88],[5828,4,5246,4],[5829,4,5247,4],[5830,0,5248,0],[5831,0,5249,0],[5832,0,5250,0],[5833,4,5251,4],[5833,11,5251,11,"credentialFromJSON"],[5833,29,5251,29,"credentialFromJSON"],[5833,30,5251,30,"json"],[5833,34,5251,34],[5833,36,5251,36],[5834,6,5252,8],[5834,12,5252,14,"credential"],[5834,22,5252,24],[5834,25,5252,27,"SAMLAuthCredential"],[5834,43,5252,45],[5834,44,5252,46,"fromJSON"],[5834,52,5252,54],[5834,53,5252,55,"json"],[5834,57,5252,59],[5834,58,5252,60],[5835,6,5253,8,"_assert"],[5835,13,5253,15],[5835,14,5253,16,"credential"],[5835,24,5253,26],[5835,26,5253,28],[5835,42,5253,44],[5835,43,5253,45],[5835,77,5253,79],[5835,78,5253,80],[5836,6,5254,8],[5836,13,5254,15,"credential"],[5836,23,5254,25],[5837,4,5255,4],[5838,4,5256,4],[5838,11,5256,11,"samlCredentialFromTaggedObject"],[5838,41,5256,41,"samlCredentialFromTaggedObject"],[5838,42,5256,42],[5839,6,5256,44,"_tokenResponse"],[5839,20,5256,58],[5839,22,5256,60,"tokenResponse"],[5840,4,5256,74],[5840,5,5256,75],[5840,7,5256,77],[5841,6,5257,8],[5841,10,5257,12],[5841,11,5257,13,"tokenResponse"],[5841,24,5257,26],[5841,26,5257,28],[5842,8,5258,12],[5842,15,5258,19],[5842,19,5258,23],[5843,6,5259,8],[5844,6,5260,8],[5844,12,5260,14],[5845,8,5260,16,"pendingToken"],[5845,20,5260,28],[5846,8,5260,30,"providerId"],[5847,6,5260,41],[5847,7,5260,42],[5847,10,5260,45,"tokenResponse"],[5847,23,5260,58],[5848,6,5261,8],[5848,10,5261,12],[5848,11,5261,13,"pendingToken"],[5848,23,5261,25],[5848,27,5261,29],[5848,28,5261,30,"providerId"],[5848,38,5261,40],[5848,40,5261,42],[5849,8,5262,12],[5849,15,5262,19],[5849,19,5262,23],[5850,6,5263,8],[5851,6,5264,8],[5851,10,5264,12],[5852,8,5265,12],[5852,15,5265,19,"SAMLAuthCredential"],[5852,33,5265,37],[5852,34,5265,38,"_create"],[5852,41,5265,45],[5852,42,5265,46,"providerId"],[5852,52,5265,56],[5852,54,5265,58,"pendingToken"],[5852,66,5265,70],[5852,67,5265,71],[5853,6,5266,8],[5853,7,5266,9],[5853,8,5267,8],[5853,15,5267,15,"e"],[5853,16,5267,16],[5853,18,5267,18],[5854,8,5268,12],[5854,15,5268,19],[5854,19,5268,23],[5855,6,5269,8],[5856,4,5270,4],[5857,2,5271,0],[5859,2,5273,0],[5860,0,5274,0],[5861,0,5275,0],[5862,0,5276,0],[5863,0,5277,0],[5864,0,5278,0],[5865,0,5279,0],[5866,0,5280,0],[5867,0,5281,0],[5868,0,5282,0],[5869,0,5283,0],[5870,0,5284,0],[5871,0,5285,0],[5872,0,5286,0],[5873,0,5287,0],[5874,0,5288,0],[5875,2,5289,0],[5876,0,5290,0],[5877,0,5291,0],[5878,0,5292,0],[5879,0,5293,0],[5880,0,5294,0],[5881,0,5295,0],[5882,0,5296,0],[5883,0,5297,0],[5884,0,5298,0],[5885,0,5299,0],[5886,0,5300,0],[5887,0,5301,0],[5888,0,5302,0],[5889,0,5303,0],[5890,0,5304,0],[5891,0,5305,0],[5892,0,5306,0],[5893,0,5307,0],[5894,0,5308,0],[5895,0,5309,0],[5896,0,5310,0],[5897,0,5311,0],[5898,0,5312,0],[5899,0,5313,0],[5900,0,5314,0],[5901,0,5315,0],[5902,0,5316,0],[5903,0,5317,0],[5904,0,5318,0],[5905,0,5319,0],[5906,0,5320,0],[5907,0,5321,0],[5908,0,5322,0],[5909,0,5323,0],[5910,0,5324,0],[5911,0,5325,0],[5912,0,5326,0],[5913,0,5327,0],[5914,2,5328,0],[5914,8,5328,6,"TwitterAuthProvider"],[5914,27,5328,25],[5914,36,5328,34,"BaseOAuthProvider"],[5914,53,5328,51],[5914,54,5328,52],[5915,4,5329,4,"constructor"],[5915,15,5329,15,"constructor"],[5915,16,5329,15],[5915,18,5329,18],[5916,6,5330,8],[5916,11,5330,13],[5916,12,5330,14],[5916,25,5330,27],[5916,26,5330,28],[5916,50,5330,52],[5916,51,5330,53],[5917,4,5331,4],[5918,4,5332,4],[5919,0,5333,0],[5920,0,5334,0],[5921,0,5335,0],[5922,0,5336,0],[5923,0,5337,0],[5924,4,5338,4],[5924,11,5338,11,"credential"],[5924,21,5338,21,"credential"],[5924,22,5338,22,"token"],[5924,27,5338,27],[5924,29,5338,29,"secret"],[5924,35,5338,35],[5924,37,5338,37],[5925,6,5339,8],[5925,13,5339,15,"OAuthCredential"],[5925,28,5339,30],[5925,29,5339,31,"_fromParams"],[5925,40,5339,42],[5925,41,5339,43],[5926,8,5340,12,"providerId"],[5926,18,5340,22],[5926,20,5340,24,"TwitterAuthProvider"],[5926,39,5340,43],[5926,40,5340,44,"PROVIDER_ID"],[5926,51,5340,55],[5927,8,5341,12,"signInMethod"],[5927,20,5341,24],[5927,22,5341,26,"TwitterAuthProvider"],[5927,41,5341,45],[5927,42,5341,46,"TWITTER_SIGN_IN_METHOD"],[5927,64,5341,68],[5928,8,5342,12,"oauthToken"],[5928,18,5342,22],[5928,20,5342,24,"token"],[5928,25,5342,29],[5929,8,5343,12,"oauthTokenSecret"],[5929,24,5343,28],[5929,26,5343,30,"secret"],[5930,6,5344,8],[5930,7,5344,9],[5930,8,5344,10],[5931,4,5345,4],[5932,4,5346,4],[5933,0,5347,0],[5934,0,5348,0],[5935,0,5349,0],[5936,0,5350,0],[5937,4,5351,4],[5937,11,5351,11,"credentialFromResult"],[5937,31,5351,31,"credentialFromResult"],[5937,32,5351,32,"userCredential"],[5937,46,5351,46],[5937,48,5351,48],[5938,6,5352,8],[5938,13,5352,15,"TwitterAuthProvider"],[5938,32,5352,34],[5938,33,5352,35,"credentialFromTaggedObject"],[5938,59,5352,61],[5938,60,5352,62,"userCredential"],[5938,74,5352,76],[5938,75,5352,77],[5939,4,5353,4],[5940,4,5354,4],[5941,0,5355,0],[5942,0,5356,0],[5943,0,5357,0],[5944,0,5358,0],[5945,0,5359,0],[5946,4,5360,4],[5946,11,5360,11,"credentialFromError"],[5946,30,5360,30,"credentialFromError"],[5946,31,5360,31,"error"],[5946,36,5360,36],[5946,38,5360,38],[5947,6,5361,8],[5947,13,5361,15,"TwitterAuthProvider"],[5947,32,5361,34],[5947,33,5361,35,"credentialFromTaggedObject"],[5947,59,5361,61],[5947,60,5361,63,"error"],[5947,65,5361,68],[5947,66,5361,69,"customData"],[5947,76,5361,79],[5947,80,5361,83],[5947,81,5361,84],[5947,82,5361,86],[5947,83,5361,87],[5948,4,5362,4],[5949,4,5363,4],[5949,11,5363,11,"credentialFromTaggedObject"],[5949,37,5363,37,"credentialFromTaggedObject"],[5949,38,5363,38],[5950,6,5363,40,"_tokenResponse"],[5950,20,5363,54],[5950,22,5363,56,"tokenResponse"],[5951,4,5363,70],[5951,5,5363,71],[5951,7,5363,73],[5952,6,5364,8],[5952,10,5364,12],[5952,11,5364,13,"tokenResponse"],[5952,24,5364,26],[5952,26,5364,28],[5953,8,5365,12],[5953,15,5365,19],[5953,19,5365,23],[5954,6,5366,8],[5955,6,5367,8],[5955,12,5367,14],[5956,8,5367,16,"oauthAccessToken"],[5956,24,5367,32],[5957,8,5367,34,"oauthTokenSecret"],[5958,6,5367,51],[5958,7,5367,52],[5958,10,5367,55,"tokenResponse"],[5958,23,5367,68],[5959,6,5368,8],[5959,10,5368,12],[5959,11,5368,13,"oauthAccessToken"],[5959,27,5368,29],[5959,31,5368,33],[5959,32,5368,34,"oauthTokenSecret"],[5959,48,5368,50],[5959,50,5368,52],[5960,8,5369,12],[5960,15,5369,19],[5960,19,5369,23],[5961,6,5370,8],[5962,6,5371,8],[5962,10,5371,12],[5963,8,5372,12],[5963,15,5372,19,"TwitterAuthProvider"],[5963,34,5372,38],[5963,35,5372,39,"credential"],[5963,45,5372,49],[5963,46,5372,50,"oauthAccessToken"],[5963,62,5372,66],[5963,64,5372,68,"oauthTokenSecret"],[5963,80,5372,84],[5963,81,5372,85],[5964,6,5373,8],[5964,7,5373,9],[5964,8,5374,8],[5964,14,5374,14],[5965,8,5375,12],[5965,15,5375,19],[5965,19,5375,23],[5966,6,5376,8],[5967,4,5377,4],[5968,2,5378,0],[5969,2,5379,0],[5970,2,5380,0,"TwitterAuthProvider"],[5970,21,5380,19],[5970,22,5380,20,"TWITTER_SIGN_IN_METHOD"],[5970,44,5380,42],[5970,47,5380,45],[5970,60,5380,58],[5970,61,5380,59],[5971,2,5381,0],[5972,2,5382,0,"TwitterAuthProvider"],[5972,21,5382,19],[5972,22,5382,20,"PROVIDER_ID"],[5972,33,5382,31],[5972,36,5382,34],[5972,49,5382,47],[5972,50,5382,48],[5974,2,5384,0],[5975,0,5385,0],[5976,0,5386,0],[5977,0,5387,0],[5978,0,5388,0],[5979,0,5389,0],[5980,0,5390,0],[5981,0,5391,0],[5982,0,5392,0],[5983,0,5393,0],[5984,0,5394,0],[5985,0,5395,0],[5986,0,5396,0],[5987,0,5397,0],[5988,0,5398,0],[5989,0,5399,0],[5990,2,5400,0],[5990,17,5400,15,"signUp"],[5990,23,5400,21,"signUp"],[5990,24,5400,22,"auth"],[5990,28,5400,26],[5990,30,5400,28,"request"],[5990,37,5400,35],[5990,39,5400,37],[5991,4,5401,4],[5991,11,5401,11,"_performSignInRequest"],[5991,32,5401,32],[5991,33,5401,33,"auth"],[5991,37,5401,37],[5991,39,5401,39],[5991,45,5401,45],[5991,46,5401,46],[5991,69,5401,69],[5991,90,5401,90],[5991,91,5401,91],[5991,115,5401,115,"_addTidIfNecessary"],[5991,133,5401,133],[5991,134,5401,134,"auth"],[5991,138,5401,138],[5991,140,5401,140,"request"],[5991,147,5401,147],[5991,148,5401,148],[5991,149,5401,149],[5992,2,5402,0],[5994,2,5404,0],[5995,0,5405,0],[5996,0,5406,0],[5997,0,5407,0],[5998,0,5408,0],[5999,0,5409,0],[6000,0,5410,0],[6001,0,5411,0],[6002,0,5412,0],[6003,0,5413,0],[6004,0,5414,0],[6005,0,5415,0],[6006,0,5416,0],[6007,0,5417,0],[6008,0,5418,0],[6009,0,5419,0],[6010,2,5420,0],[6010,8,5420,6,"UserCredentialImpl"],[6010,26,5420,24],[6010,27,5420,25],[6011,4,5421,4,"constructor"],[6011,15,5421,15,"constructor"],[6011,16,5421,16,"params"],[6011,22,5421,22],[6011,24,5421,24],[6012,6,5422,8],[6012,10,5422,12],[6012,11,5422,13,"user"],[6012,15,5422,17],[6012,18,5422,20,"params"],[6012,24,5422,26],[6012,25,5422,27,"user"],[6012,29,5422,31],[6013,6,5423,8],[6013,10,5423,12],[6013,11,5423,13,"providerId"],[6013,21,5423,23],[6013,24,5423,26,"params"],[6013,30,5423,32],[6013,31,5423,33,"providerId"],[6013,41,5423,43],[6014,6,5424,8],[6014,10,5424,12],[6014,11,5424,13,"_tokenResponse"],[6014,25,5424,27],[6014,28,5424,30,"params"],[6014,34,5424,36],[6014,35,5424,37,"_tokenResponse"],[6014,49,5424,51],[6015,6,5425,8],[6015,10,5425,12],[6015,11,5425,13,"operationType"],[6015,24,5425,26],[6015,27,5425,29,"params"],[6015,33,5425,35],[6015,34,5425,36,"operationType"],[6015,47,5425,49],[6016,4,5426,4],[6017,4,5427,4],[6017,17,5427,17,"_fromIdTokenResponse"],[6017,37,5427,37,"_fromIdTokenResponse"],[6017,38,5427,38,"auth"],[6017,42,5427,42],[6017,44,5427,44,"operationType"],[6017,57,5427,57],[6017,59,5427,59,"idTokenResponse"],[6017,74,5427,74],[6017,76,5427,76,"isAnonymous"],[6017,87,5427,87],[6017,90,5427,90],[6017,95,5427,95],[6017,97,5427,97],[6018,6,5428,8],[6018,12,5428,14,"user"],[6018,16,5428,18],[6018,19,5428,21],[6018,25,5428,27,"UserImpl"],[6018,33,5428,35],[6018,34,5428,36,"_fromIdTokenResponse"],[6018,54,5428,56],[6018,55,5428,57,"auth"],[6018,59,5428,61],[6018,61,5428,63,"idTokenResponse"],[6018,76,5428,78],[6018,78,5428,80,"isAnonymous"],[6018,89,5428,91],[6018,90,5428,92],[6019,6,5429,8],[6019,12,5429,14,"providerId"],[6019,22,5429,24],[6019,25,5429,27,"providerIdForResponse"],[6019,46,5429,48],[6019,47,5429,49,"idTokenResponse"],[6019,62,5429,64],[6019,63,5429,65],[6020,6,5430,8],[6020,12,5430,14,"userCred"],[6020,20,5430,22],[6020,23,5430,25],[6020,27,5430,29,"UserCredentialImpl"],[6020,45,5430,47],[6020,46,5430,48],[6021,8,5431,12,"user"],[6021,12,5431,16],[6022,8,5432,12,"providerId"],[6022,18,5432,22],[6023,8,5433,12,"_tokenResponse"],[6023,22,5433,26],[6023,24,5433,28,"idTokenResponse"],[6023,39,5433,43],[6024,8,5434,12,"operationType"],[6025,6,5435,8],[6025,7,5435,9],[6025,8,5435,10],[6026,6,5436,8],[6026,13,5436,15,"userCred"],[6026,21,5436,23],[6027,4,5437,4],[6028,4,5438,4],[6028,17,5438,17,"_forOperation"],[6028,30,5438,30,"_forOperation"],[6028,31,5438,31,"user"],[6028,35,5438,35],[6028,37,5438,37,"operationType"],[6028,50,5438,50],[6028,52,5438,52,"response"],[6028,60,5438,60],[6028,62,5438,62],[6029,6,5439,8],[6029,12,5439,14,"user"],[6029,16,5439,18],[6029,17,5439,19,"_updateTokensIfNecessary"],[6029,41,5439,43],[6029,42,5439,44,"response"],[6029,50,5439,52],[6029,52,5439,54],[6029,64,5439,67],[6029,68,5439,71],[6029,69,5439,72],[6030,6,5440,8],[6030,12,5440,14,"providerId"],[6030,22,5440,24],[6030,25,5440,27,"providerIdForResponse"],[6030,46,5440,48],[6030,47,5440,49,"response"],[6030,55,5440,57],[6030,56,5440,58],[6031,6,5441,8],[6031,13,5441,15],[6031,17,5441,19,"UserCredentialImpl"],[6031,35,5441,37],[6031,36,5441,38],[6032,8,5442,12,"user"],[6032,12,5442,16],[6033,8,5443,12,"providerId"],[6033,18,5443,22],[6034,8,5444,12,"_tokenResponse"],[6034,22,5444,26],[6034,24,5444,28,"response"],[6034,32,5444,36],[6035,8,5445,12,"operationType"],[6036,6,5446,8],[6036,7,5446,9],[6036,8,5446,10],[6037,4,5447,4],[6038,2,5448,0],[6039,2,5449,0],[6039,11,5449,9,"providerIdForResponse"],[6039,32,5449,30,"providerIdForResponse"],[6039,33,5449,31,"response"],[6039,41,5449,39],[6039,43,5449,41],[6040,4,5450,4],[6040,8,5450,8,"response"],[6040,16,5450,16],[6040,17,5450,17,"providerId"],[6040,27,5450,27],[6040,29,5450,29],[6041,6,5451,8],[6041,13,5451,15,"response"],[6041,21,5451,23],[6041,22,5451,24,"providerId"],[6041,32,5451,34],[6042,4,5452,4],[6043,4,5453,4],[6043,8,5453,8],[6043,21,5453,21],[6043,25,5453,25,"response"],[6043,33,5453,33],[6043,35,5453,35],[6044,6,5454,8],[6044,13,5454,15],[6044,20,5454,22],[6044,21,5454,23],[6045,4,5455,4],[6046,4,5456,4],[6046,11,5456,11],[6046,15,5456,15],[6047,2,5457,0],[6049,2,5459,0],[6050,0,5460,0],[6051,0,5461,0],[6052,0,5462,0],[6053,0,5463,0],[6054,0,5464,0],[6055,0,5465,0],[6056,0,5466,0],[6057,0,5467,0],[6058,0,5468,0],[6059,0,5469,0],[6060,0,5470,0],[6061,0,5471,0],[6062,0,5472,0],[6063,0,5473,0],[6064,0,5474,0],[6065,2,5475,0],[6066,0,5476,0],[6067,0,5477,0],[6068,0,5478,0],[6069,0,5479,0],[6070,0,5480,0],[6071,0,5481,0],[6072,0,5482,0],[6073,0,5483,0],[6074,0,5484,0],[6075,0,5485,0],[6076,0,5486,0],[6077,0,5487,0],[6078,0,5488,0],[6079,2,5489,0],[6079,17,5489,15,"signInAnonymously"],[6079,34,5489,32,"signInAnonymously"],[6079,35,5489,33,"auth"],[6079,39,5489,37],[6079,41,5489,39],[6080,4,5490,4],[6080,8,5490,8],[6080,12,5490,8,"_isFirebaseServerApp"],[6080,24,5490,28],[6080,25,5490,28,"_isFirebaseServerApp"],[6080,45,5490,28],[6080,47,5490,29,"auth"],[6080,51,5490,33],[6080,52,5490,34,"app"],[6080,55,5490,37],[6080,56,5490,38],[6080,58,5490,40],[6081,6,5491,8],[6081,13,5491,15,"Promise"],[6081,20,5491,22],[6081,21,5491,23,"reject"],[6081,27,5491,29],[6081,28,5491,30,"_serverAppCurrentUserOperationNotSupportedError"],[6081,75,5491,77],[6081,76,5491,78,"auth"],[6081,80,5491,82],[6081,81,5491,83],[6081,82,5491,84],[6082,4,5492,4],[6083,4,5493,4],[6083,10,5493,10,"authInternal"],[6083,22,5493,22],[6083,25,5493,25,"_castAuth"],[6083,34,5493,34],[6083,35,5493,35,"auth"],[6083,39,5493,39],[6083,40,5493,40],[6084,4,5494,4],[6084,10,5494,10,"authInternal"],[6084,22,5494,22],[6084,23,5494,23,"_initializationPromise"],[6084,45,5494,45],[6085,4,5495,4],[6085,8,5495,8,"authInternal"],[6085,20,5495,20],[6085,21,5495,21,"currentUser"],[6085,32,5495,32],[6085,34,5495,34,"isAnonymous"],[6085,45,5495,45],[6085,47,5495,47],[6086,6,5496,8],[6087,6,5497,8],[6087,13,5497,15],[6087,17,5497,19,"UserCredentialImpl"],[6087,35,5497,37],[6087,36,5497,38],[6088,8,5498,12,"user"],[6088,12,5498,16],[6088,14,5498,18,"authInternal"],[6088,26,5498,30],[6088,27,5498,31,"currentUser"],[6088,38,5498,42],[6089,8,5499,12,"providerId"],[6089,18,5499,22],[6089,20,5499,24],[6089,24,5499,28],[6090,8,5500,12,"operationType"],[6090,21,5500,25],[6090,23,5500,27],[6090,31,5500,35],[6090,32,5500,36],[6091,6,5501,8],[6091,7,5501,9],[6091,8,5501,10],[6092,4,5502,4],[6093,4,5503,4],[6093,10,5503,10,"response"],[6093,18,5503,18],[6093,21,5503,21],[6093,27,5503,27,"signUp"],[6093,33,5503,33],[6093,34,5503,34,"authInternal"],[6093,46,5503,46],[6093,48,5503,48],[6094,6,5504,8,"returnSecureToken"],[6094,23,5504,25],[6094,25,5504,27],[6095,4,5505,4],[6095,5,5505,5],[6095,6,5505,6],[6096,4,5506,4],[6096,10,5506,10,"userCredential"],[6096,24,5506,24],[6096,27,5506,27],[6096,33,5506,33,"UserCredentialImpl"],[6096,51,5506,51],[6096,52,5506,52,"_fromIdTokenResponse"],[6096,72,5506,72],[6096,73,5506,73,"authInternal"],[6096,85,5506,85],[6096,87,5506,87],[6096,95,5506,95],[6096,96,5506,96],[6096,125,5506,125,"response"],[6096,133,5506,133],[6096,135,5506,135],[6096,139,5506,139],[6096,140,5506,140],[6097,4,5507,4],[6097,10,5507,10,"authInternal"],[6097,22,5507,22],[6097,23,5507,23,"_updateCurrentUser"],[6097,41,5507,41],[6097,42,5507,42,"userCredential"],[6097,56,5507,56],[6097,57,5507,57,"user"],[6097,61,5507,61],[6097,62,5507,62],[6098,4,5508,4],[6098,11,5508,11,"userCredential"],[6098,25,5508,25],[6099,2,5509,0],[6101,2,5511,0],[6102,0,5512,0],[6103,0,5513,0],[6104,0,5514,0],[6105,0,5515,0],[6106,0,5516,0],[6107,0,5517,0],[6108,0,5518,0],[6109,0,5519,0],[6110,0,5520,0],[6111,0,5521,0],[6112,0,5522,0],[6113,0,5523,0],[6114,0,5524,0],[6115,0,5525,0],[6116,0,5526,0],[6117,2,5527,0],[6117,8,5527,6,"MultiFactorError"],[6117,24,5527,22],[6117,33,5527,31,"FirebaseError"],[6117,46,5527,44],[6117,47,5527,44,"FirebaseError"],[6117,60,5527,44],[6117,61,5527,45],[6118,4,5528,4,"constructor"],[6118,15,5528,15,"constructor"],[6118,16,5528,16,"auth"],[6118,20,5528,20],[6118,22,5528,22,"error"],[6118,27,5528,27],[6118,29,5528,29,"operationType"],[6118,42,5528,42],[6118,44,5528,44,"user"],[6118,48,5528,48],[6118,50,5528,50],[6119,6,5529,8],[6119,11,5529,13],[6119,12,5529,14,"error"],[6119,17,5529,19],[6119,18,5529,20,"code"],[6119,22,5529,24],[6119,24,5529,26,"error"],[6119,29,5529,31],[6119,30,5529,32,"message"],[6119,37,5529,39],[6119,38,5529,40],[6120,6,5530,8],[6120,10,5530,12],[6120,11,5530,13,"operationType"],[6120,24,5530,26],[6120,27,5530,29,"operationType"],[6120,40,5530,42],[6121,6,5531,8],[6121,10,5531,12],[6121,11,5531,13,"user"],[6121,15,5531,17],[6121,18,5531,20,"user"],[6121,22,5531,24],[6122,6,5532,8],[6123,6,5533,8,"Object"],[6123,12,5533,14],[6123,13,5533,15,"setPrototypeOf"],[6123,27,5533,29],[6123,28,5533,30],[6123,32,5533,34],[6123,34,5533,36,"MultiFactorError"],[6123,50,5533,52],[6123,51,5533,53,"prototype"],[6123,60,5533,62],[6123,61,5533,63],[6124,6,5534,8],[6124,10,5534,12],[6124,11,5534,13,"customData"],[6124,21,5534,23],[6124,24,5534,26],[6125,8,5535,12,"appName"],[6125,15,5535,19],[6125,17,5535,21,"auth"],[6125,21,5535,25],[6125,22,5535,26,"name"],[6125,26,5535,30],[6126,8,5536,12,"tenantId"],[6126,16,5536,20],[6126,18,5536,22,"auth"],[6126,22,5536,26],[6126,23,5536,27,"tenantId"],[6126,31,5536,35],[6126,35,5536,39,"undefined"],[6126,44,5536,48],[6127,8,5537,12,"_serverResponse"],[6127,23,5537,27],[6127,25,5537,29,"error"],[6127,30,5537,34],[6127,31,5537,35,"customData"],[6127,41,5537,45],[6127,42,5537,46,"_serverResponse"],[6127,57,5537,61],[6128,8,5538,12,"operationType"],[6129,6,5539,8],[6129,7,5539,9],[6130,4,5540,4],[6131,4,5541,4],[6131,11,5541,11,"_fromErrorAndOperation"],[6131,33,5541,33,"_fromErrorAndOperation"],[6131,34,5541,34,"auth"],[6131,38,5541,38],[6131,40,5541,40,"error"],[6131,45,5541,45],[6131,47,5541,47,"operationType"],[6131,60,5541,60],[6131,62,5541,62,"user"],[6131,66,5541,66],[6131,68,5541,68],[6132,6,5542,8],[6132,13,5542,15],[6132,17,5542,19,"MultiFactorError"],[6132,33,5542,35],[6132,34,5542,36,"auth"],[6132,38,5542,40],[6132,40,5542,42,"error"],[6132,45,5542,47],[6132,47,5542,49,"operationType"],[6132,60,5542,62],[6132,62,5542,64,"user"],[6132,66,5542,68],[6132,67,5542,69],[6133,4,5543,4],[6134,2,5544,0],[6135,2,5545,0],[6135,11,5545,9,"_processCredentialSavingMfaContextIfNecessary"],[6135,56,5545,54,"_processCredentialSavingMfaContextIfNecessary"],[6135,57,5545,55,"auth"],[6135,61,5545,59],[6135,63,5545,61,"operationType"],[6135,76,5545,74],[6135,78,5545,76,"credential"],[6135,88,5545,86],[6135,90,5545,88,"user"],[6135,94,5545,92],[6135,96,5545,94],[6136,4,5546,4],[6136,10,5546,10,"idTokenProvider"],[6136,25,5546,25],[6136,28,5546,28,"operationType"],[6136,41,5546,41],[6136,46,5546,46],[6136,62,5546,62],[6136,63,5546,63],[6136,100,5547,10,"credential"],[6136,110,5547,20],[6136,111,5547,21,"_getReauthenticationResolver"],[6136,139,5547,49],[6136,140,5547,50,"auth"],[6136,144,5547,54],[6136,145,5547,55],[6136,148,5548,10,"credential"],[6136,158,5548,20],[6136,159,5548,21,"_getIdTokenResponse"],[6136,178,5548,40],[6136,179,5548,41,"auth"],[6136,183,5548,45],[6136,184,5548,46],[6137,4,5549,4],[6137,11,5549,11,"idTokenProvider"],[6137,26,5549,26],[6137,27,5549,27,"catch"],[6137,32,5549,32],[6137,33,5549,33,"error"],[6137,38,5549,38],[6137,42,5549,42],[6138,6,5550,8],[6138,10,5550,12,"error"],[6138,15,5550,17],[6138,16,5550,18,"code"],[6138,20,5550,22],[6138,25,5550,27],[6138,33,5550,35],[6138,61,5550,63],[6138,62,5550,64],[6138,96,5550,98],[6138,98,5550,100],[6139,8,5551,12],[6139,14,5551,18,"MultiFactorError"],[6139,30,5551,34],[6139,31,5551,35,"_fromErrorAndOperation"],[6139,53,5551,57],[6139,54,5551,58,"auth"],[6139,58,5551,62],[6139,60,5551,64,"error"],[6139,65,5551,69],[6139,67,5551,71,"operationType"],[6139,80,5551,84],[6139,82,5551,86,"user"],[6139,86,5551,90],[6139,87,5551,91],[6140,6,5552,8],[6141,6,5553,8],[6141,12,5553,14,"error"],[6141,17,5553,19],[6142,4,5554,4],[6142,5,5554,5],[6142,6,5554,6],[6143,2,5555,0],[6145,2,5557,0],[6146,0,5558,0],[6147,0,5559,0],[6148,0,5560,0],[6149,0,5561,0],[6150,0,5562,0],[6151,0,5563,0],[6152,0,5564,0],[6153,0,5565,0],[6154,0,5566,0],[6155,0,5567,0],[6156,0,5568,0],[6157,0,5569,0],[6158,0,5570,0],[6159,0,5571,0],[6160,0,5572,0],[6161,2,5573,0],[6162,0,5574,0],[6163,0,5575,0],[6164,2,5576,0],[6164,11,5576,9,"providerDataAsNames"],[6164,30,5576,28,"providerDataAsNames"],[6164,31,5576,29,"providerData"],[6164,43,5576,41],[6164,45,5576,43],[6165,4,5577,4],[6165,11,5577,11],[6165,15,5577,15,"Set"],[6165,18,5577,18],[6165,19,5577,19,"providerData"],[6165,31,5577,31],[6165,32,5578,9,"map"],[6165,35,5578,12],[6165,36,5578,13],[6165,37,5578,14],[6166,6,5578,16,"providerId"],[6167,4,5578,27],[6167,5,5578,28],[6167,10,5578,33,"providerId"],[6167,20,5578,43],[6167,21,5578,44],[6167,22,5579,9,"filter"],[6167,28,5579,15],[6167,29,5579,16,"pid"],[6167,32,5579,19],[6167,36,5579,23],[6167,37,5579,24],[6167,38,5579,25,"pid"],[6167,41,5579,28],[6167,42,5579,29],[6167,43,5579,30],[6168,2,5580,0],[6170,2,5582,0],[6171,0,5583,0],[6172,0,5584,0],[6173,0,5585,0],[6174,0,5586,0],[6175,0,5587,0],[6176,0,5588,0],[6177,0,5589,0],[6178,0,5590,0],[6179,0,5591,0],[6180,0,5592,0],[6181,0,5593,0],[6182,0,5594,0],[6183,0,5595,0],[6184,0,5596,0],[6185,0,5597,0],[6186,2,5598,0],[6187,0,5599,0],[6188,0,5600,0],[6189,0,5601,0],[6190,0,5602,0],[6191,0,5603,0],[6192,0,5604,0],[6193,0,5605,0],[6194,2,5606,0],[6194,17,5606,15,"unlink"],[6194,23,5606,21,"unlink"],[6194,24,5606,22,"user"],[6194,28,5606,26],[6194,30,5606,28,"providerId"],[6194,40,5606,38],[6194,42,5606,40],[6195,4,5607,4],[6195,10,5607,10,"userInternal"],[6195,22,5607,22],[6195,25,5607,25],[6195,29,5607,25,"getModularInstance"],[6195,42,5607,43],[6195,43,5607,43,"getModularInstance"],[6195,61,5607,43],[6195,63,5607,44,"user"],[6195,67,5607,48],[6195,68,5607,49],[6196,4,5608,4],[6196,10,5608,10,"_assertLinkedStatus"],[6196,29,5608,29],[6196,30,5608,30],[6196,34,5608,34],[6196,36,5608,36,"userInternal"],[6196,48,5608,48],[6196,50,5608,50,"providerId"],[6196,60,5608,60],[6196,61,5608,61],[6197,4,5609,4],[6197,10,5609,10],[6198,6,5609,12,"providerUserInfo"],[6199,4,5609,29],[6199,5,5609,30],[6199,8,5609,33],[6199,14,5609,39,"deleteLinkedAccounts"],[6199,34,5609,59],[6199,35,5609,60,"userInternal"],[6199,47,5609,72],[6199,48,5609,73,"auth"],[6199,52,5609,77],[6199,54,5609,79],[6200,6,5610,8,"idToken"],[6200,13,5610,15],[6200,15,5610,17],[6200,21,5610,23,"userInternal"],[6200,33,5610,35],[6200,34,5610,36,"getIdToken"],[6200,44,5610,46],[6200,45,5610,47],[6200,46,5610,48],[6201,6,5611,8,"deleteProvider"],[6201,20,5611,22],[6201,22,5611,24],[6201,23,5611,25,"providerId"],[6201,33,5611,35],[6202,4,5612,4],[6202,5,5612,5],[6202,6,5612,6],[6203,4,5613,4],[6203,10,5613,10,"providersLeft"],[6203,23,5613,23],[6203,26,5613,26,"providerDataAsNames"],[6203,45,5613,45],[6203,46,5613,46,"providerUserInfo"],[6203,62,5613,62],[6203,66,5613,66],[6203,68,5613,68],[6203,69,5613,69],[6204,4,5614,4,"userInternal"],[6204,16,5614,16],[6204,17,5614,17,"providerData"],[6204,29,5614,29],[6204,32,5614,32,"userInternal"],[6204,44,5614,44],[6204,45,5614,45,"providerData"],[6204,57,5614,57],[6204,58,5614,58,"filter"],[6204,64,5614,64],[6204,65,5614,65,"pd"],[6204,67,5614,67],[6204,71,5614,71,"providersLeft"],[6204,84,5614,84],[6204,85,5614,85,"has"],[6204,88,5614,88],[6204,89,5614,89,"pd"],[6204,91,5614,91],[6204,92,5614,92,"providerId"],[6204,102,5614,102],[6204,103,5614,103],[6204,104,5614,104],[6205,4,5615,4],[6205,8,5615,8],[6205,9,5615,9,"providersLeft"],[6205,22,5615,22],[6205,23,5615,23,"has"],[6205,26,5615,26],[6205,27,5615,27],[6205,34,5615,34],[6205,35,5615,35],[6205,57,5615,57],[6205,58,5615,58],[6205,60,5615,60],[6206,6,5616,8,"userInternal"],[6206,18,5616,20],[6206,19,5616,21,"phoneNumber"],[6206,30,5616,32],[6206,33,5616,35],[6206,37,5616,39],[6207,4,5617,4],[6208,4,5618,4],[6208,10,5618,10,"userInternal"],[6208,22,5618,22],[6208,23,5618,23,"auth"],[6208,27,5618,27],[6208,28,5618,28,"_persistUserIfCurrent"],[6208,49,5618,49],[6208,50,5618,50,"userInternal"],[6208,62,5618,62],[6208,63,5618,63],[6209,4,5619,4],[6209,11,5619,11,"userInternal"],[6209,23,5619,23],[6210,2,5620,0],[6211,2,5621,0],[6211,17,5621,15,"_link"],[6211,22,5621,20,"_link"],[6211,23,5621,21,"user"],[6211,27,5621,25],[6211,29,5621,27,"credential"],[6211,39,5621,37],[6211,41,5621,39,"bypassAuthState"],[6211,56,5621,54],[6211,59,5621,57],[6211,64,5621,62],[6211,66,5621,64],[6212,4,5622,4],[6212,10,5622,10,"response"],[6212,18,5622,18],[6212,21,5622,21],[6212,27,5622,27,"_logoutIfInvalidated"],[6212,47,5622,47],[6212,48,5622,48,"user"],[6212,52,5622,52],[6212,54,5622,54,"credential"],[6212,64,5622,64],[6212,65,5622,65,"_linkToIdToken"],[6212,79,5622,79],[6212,80,5622,80,"user"],[6212,84,5622,84],[6212,85,5622,85,"auth"],[6212,89,5622,89],[6212,91,5622,91],[6212,97,5622,97,"user"],[6212,101,5622,101],[6212,102,5622,102,"getIdToken"],[6212,112,5622,112],[6212,113,5622,113],[6212,114,5622,114],[6212,115,5622,115],[6212,117,5622,117,"bypassAuthState"],[6212,132,5622,132],[6212,133,5622,133],[6213,4,5623,4],[6213,11,5623,11,"UserCredentialImpl"],[6213,29,5623,29],[6213,30,5623,30,"_forOperation"],[6213,43,5623,43],[6213,44,5623,44,"user"],[6213,48,5623,48],[6213,50,5623,50],[6213,56,5623,56],[6213,57,5623,57],[6213,83,5623,83,"response"],[6213,91,5623,91],[6213,92,5623,92],[6214,2,5624,0],[6215,2,5625,0],[6215,17,5625,15,"_assertLinkedStatus"],[6215,36,5625,34,"_assertLinkedStatus"],[6215,37,5625,35,"expected"],[6215,45,5625,43],[6215,47,5625,45,"user"],[6215,51,5625,49],[6215,53,5625,51,"provider"],[6215,61,5625,59],[6215,63,5625,61],[6216,4,5626,4],[6216,10,5626,10,"_reloadWithoutSaving"],[6216,30,5626,30],[6216,31,5626,31,"user"],[6216,35,5626,35],[6216,36,5626,36],[6217,4,5627,4],[6217,10,5627,10,"providerIds"],[6217,21,5627,21],[6217,24,5627,24,"providerDataAsNames"],[6217,43,5627,43],[6217,44,5627,44,"user"],[6217,48,5627,48],[6217,49,5627,49,"providerData"],[6217,61,5627,61],[6217,62,5627,62],[6218,4,5628,4],[6218,10,5628,10,"code"],[6218,14,5628,14],[6218,17,5628,17,"expected"],[6218,25,5628,25],[6218,30,5628,30],[6218,35,5628,35],[6218,38,5629,10],[6218,63,5629,35],[6218,64,5629,36],[6218,110,5630,10],[6218,128,5630,28],[6218,129,5630,29],[6219,4,5631,4,"_assert"],[6219,11,5631,11],[6219,12,5631,12,"providerIds"],[6219,23,5631,23],[6219,24,5631,24,"has"],[6219,27,5631,27],[6219,28,5631,28,"provider"],[6219,36,5631,36],[6219,37,5631,37],[6219,42,5631,42,"expected"],[6219,50,5631,50],[6219,52,5631,52,"user"],[6219,56,5631,56],[6219,57,5631,57,"auth"],[6219,61,5631,61],[6219,63,5631,63,"code"],[6219,67,5631,67],[6219,68,5631,68],[6220,2,5632,0],[6222,2,5634,0],[6223,0,5635,0],[6224,0,5636,0],[6225,0,5637,0],[6226,0,5638,0],[6227,0,5639,0],[6228,0,5640,0],[6229,0,5641,0],[6230,0,5642,0],[6231,0,5643,0],[6232,0,5644,0],[6233,0,5645,0],[6234,0,5646,0],[6235,0,5647,0],[6236,0,5648,0],[6237,0,5649,0],[6238,2,5650,0],[6238,17,5650,15,"_reauthenticate"],[6238,32,5650,30,"_reauthenticate"],[6238,33,5650,31,"user"],[6238,37,5650,35],[6238,39,5650,37,"credential"],[6238,49,5650,47],[6238,51,5650,49,"bypassAuthState"],[6238,66,5650,64],[6238,69,5650,67],[6238,74,5650,72],[6238,76,5650,74],[6239,4,5651,4],[6239,10,5651,10],[6240,6,5651,12,"auth"],[6241,4,5651,17],[6241,5,5651,18],[6241,8,5651,21,"user"],[6241,12,5651,25],[6242,4,5652,4],[6242,8,5652,8],[6242,12,5652,8,"_isFirebaseServerApp"],[6242,24,5652,28],[6242,25,5652,28,"_isFirebaseServerApp"],[6242,45,5652,28],[6242,47,5652,29,"auth"],[6242,51,5652,33],[6242,52,5652,34,"app"],[6242,55,5652,37],[6242,56,5652,38],[6242,58,5652,40],[6243,6,5653,8],[6243,13,5653,15,"Promise"],[6243,20,5653,22],[6243,21,5653,23,"reject"],[6243,27,5653,29],[6243,28,5653,30,"_serverAppCurrentUserOperationNotSupportedError"],[6243,75,5653,77],[6243,76,5653,78,"auth"],[6243,80,5653,82],[6243,81,5653,83],[6243,82,5653,84],[6244,4,5654,4],[6245,4,5655,4],[6245,10,5655,10,"operationType"],[6245,23,5655,23],[6245,26,5655,26],[6245,42,5655,42],[6245,43,5655,43],[6246,4,5656,4],[6246,8,5656,8],[6247,6,5657,8],[6247,12,5657,14,"response"],[6247,20,5657,22],[6247,23,5657,25],[6247,29,5657,31,"_logoutIfInvalidated"],[6247,49,5657,51],[6247,50,5657,52,"user"],[6247,54,5657,56],[6247,56,5657,58,"_processCredentialSavingMfaContextIfNecessary"],[6247,101,5657,103],[6247,102,5657,104,"auth"],[6247,106,5657,108],[6247,108,5657,110,"operationType"],[6247,121,5657,123],[6247,123,5657,125,"credential"],[6247,133,5657,135],[6247,135,5657,137,"user"],[6247,139,5657,141],[6247,140,5657,142],[6247,142,5657,144,"bypassAuthState"],[6247,157,5657,159],[6247,158,5657,160],[6248,6,5658,8,"_assert"],[6248,13,5658,15],[6248,14,5658,16,"response"],[6248,22,5658,24],[6248,23,5658,25,"idToken"],[6248,30,5658,32],[6248,32,5658,34,"auth"],[6248,36,5658,38],[6248,38,5658,40],[6248,54,5658,56],[6248,55,5658,57],[6248,89,5658,91],[6248,90,5658,92],[6249,6,5659,8],[6249,12,5659,14,"parsed"],[6249,18,5659,20],[6249,21,5659,23,"_parseToken"],[6249,32,5659,34],[6249,33,5659,35,"response"],[6249,41,5659,43],[6249,42,5659,44,"idToken"],[6249,49,5659,51],[6249,50,5659,52],[6250,6,5660,8,"_assert"],[6250,13,5660,15],[6250,14,5660,16,"parsed"],[6250,20,5660,22],[6250,22,5660,24,"auth"],[6250,26,5660,28],[6250,28,5660,30],[6250,44,5660,46],[6250,45,5660,47],[6250,79,5660,81],[6250,80,5660,82],[6251,6,5661,8],[6251,12,5661,14],[6252,8,5661,16,"sub"],[6252,11,5661,19],[6252,13,5661,21,"localId"],[6253,6,5661,29],[6253,7,5661,30],[6253,10,5661,33,"parsed"],[6253,16,5661,39],[6254,6,5662,8,"_assert"],[6254,13,5662,15],[6254,14,5662,16,"user"],[6254,18,5662,20],[6254,19,5662,21,"uid"],[6254,22,5662,24],[6254,27,5662,29,"localId"],[6254,34,5662,36],[6254,36,5662,38,"auth"],[6254,40,5662,42],[6254,42,5662,44],[6254,57,5662,59],[6254,58,5662,60],[6254,91,5662,93],[6254,92,5662,94],[6255,6,5663,8],[6255,13,5663,15,"UserCredentialImpl"],[6255,31,5663,33],[6255,32,5663,34,"_forOperation"],[6255,45,5663,47],[6255,46,5663,48,"user"],[6255,50,5663,52],[6255,52,5663,54,"operationType"],[6255,65,5663,67],[6255,67,5663,69,"response"],[6255,75,5663,77],[6255,76,5663,78],[6256,4,5664,4],[6256,5,5664,5],[6256,6,5665,4],[6256,13,5665,11,"e"],[6256,14,5665,12],[6256,16,5665,14],[6257,6,5666,8],[6258,6,5667,8],[6258,10,5667,12,"e"],[6258,11,5667,13],[6258,13,5667,15,"code"],[6258,17,5667,19],[6258,22,5667,24],[6258,30,5667,32],[6258,46,5667,48],[6258,47,5667,49],[6258,81,5667,83],[6258,83,5667,85],[6259,8,5668,12,"_fail"],[6259,13,5668,17],[6259,14,5668,18,"auth"],[6259,18,5668,22],[6259,20,5668,24],[6259,35,5668,39],[6259,36,5668,40],[6259,69,5668,73],[6259,70,5668,74],[6260,6,5669,8],[6261,6,5670,8],[6261,12,5670,14,"e"],[6261,13,5670,15],[6262,4,5671,4],[6263,2,5672,0],[6265,2,5674,0],[6266,0,5675,0],[6267,0,5676,0],[6268,0,5677,0],[6269,0,5678,0],[6270,0,5679,0],[6271,0,5680,0],[6272,0,5681,0],[6273,0,5682,0],[6274,0,5683,0],[6275,0,5684,0],[6276,0,5685,0],[6277,0,5686,0],[6278,0,5687,0],[6279,0,5688,0],[6280,0,5689,0],[6281,2,5690,0],[6281,17,5690,15,"_signInWithCredential"],[6281,38,5690,36,"_signInWithCredential"],[6281,39,5690,37,"auth"],[6281,43,5690,41],[6281,45,5690,43,"credential"],[6281,55,5690,53],[6281,57,5690,55,"bypassAuthState"],[6281,72,5690,70],[6281,75,5690,73],[6281,80,5690,78],[6281,82,5690,80],[6282,4,5691,4],[6282,8,5691,8],[6282,12,5691,8,"_isFirebaseServerApp"],[6282,24,5691,28],[6282,25,5691,28,"_isFirebaseServerApp"],[6282,45,5691,28],[6282,47,5691,29,"auth"],[6282,51,5691,33],[6282,52,5691,34,"app"],[6282,55,5691,37],[6282,56,5691,38],[6282,58,5691,40],[6283,6,5692,8],[6283,13,5692,15,"Promise"],[6283,20,5692,22],[6283,21,5692,23,"reject"],[6283,27,5692,29],[6283,28,5692,30,"_serverAppCurrentUserOperationNotSupportedError"],[6283,75,5692,77],[6283,76,5692,78,"auth"],[6283,80,5692,82],[6283,81,5692,83],[6283,82,5692,84],[6284,4,5693,4],[6285,4,5694,4],[6285,10,5694,10,"operationType"],[6285,23,5694,23],[6285,26,5694,26],[6285,34,5694,34],[6285,35,5694,35],[6286,4,5695,4],[6286,10,5695,10,"response"],[6286,18,5695,18],[6286,21,5695,21],[6286,27,5695,27,"_processCredentialSavingMfaContextIfNecessary"],[6286,72,5695,72],[6286,73,5695,73,"auth"],[6286,77,5695,77],[6286,79,5695,79,"operationType"],[6286,92,5695,92],[6286,94,5695,94,"credential"],[6286,104,5695,104],[6286,105,5695,105],[6287,4,5696,4],[6287,10,5696,10,"userCredential"],[6287,24,5696,24],[6287,27,5696,27],[6287,33,5696,33,"UserCredentialImpl"],[6287,51,5696,51],[6287,52,5696,52,"_fromIdTokenResponse"],[6287,72,5696,72],[6287,73,5696,73,"auth"],[6287,77,5696,77],[6287,79,5696,79,"operationType"],[6287,92,5696,92],[6287,94,5696,94,"response"],[6287,102,5696,102],[6287,103,5696,103],[6288,4,5697,4],[6288,8,5697,8],[6288,9,5697,9,"bypassAuthState"],[6288,24,5697,24],[6288,26,5697,26],[6289,6,5698,8],[6289,12,5698,14,"auth"],[6289,16,5698,18],[6289,17,5698,19,"_updateCurrentUser"],[6289,35,5698,37],[6289,36,5698,38,"userCredential"],[6289,50,5698,52],[6289,51,5698,53,"user"],[6289,55,5698,57],[6289,56,5698,58],[6290,4,5699,4],[6291,4,5700,4],[6291,11,5700,11,"userCredential"],[6291,25,5700,25],[6292,2,5701,0],[6293,2,5702,0],[6294,0,5703,0],[6295,0,5704,0],[6296,0,5705,0],[6297,0,5706,0],[6298,0,5707,0],[6299,0,5708,0],[6300,0,5709,0],[6301,0,5710,0],[6302,0,5711,0],[6303,0,5712,0],[6304,0,5713,0],[6305,0,5714,0],[6306,0,5715,0],[6307,2,5716,0],[6307,17,5716,15,"signInWithCredential"],[6307,37,5716,35,"signInWithCredential"],[6307,38,5716,36,"auth"],[6307,42,5716,40],[6307,44,5716,42,"credential"],[6307,54,5716,52],[6307,56,5716,54],[6308,4,5717,4],[6308,11,5717,11,"_signInWithCredential"],[6308,32,5717,32],[6308,33,5717,33,"_castAuth"],[6308,42,5717,42],[6308,43,5717,43,"auth"],[6308,47,5717,47],[6308,48,5717,48],[6308,50,5717,50,"credential"],[6308,60,5717,60],[6308,61,5717,61],[6309,2,5718,0],[6310,2,5719,0],[6311,0,5720,0],[6312,0,5721,0],[6313,0,5722,0],[6314,0,5723,0],[6315,0,5724,0],[6316,0,5725,0],[6317,0,5726,0],[6318,0,5727,0],[6319,0,5728,0],[6320,0,5729,0],[6321,2,5730,0],[6321,17,5730,15,"linkWithCredential"],[6321,35,5730,33,"linkWithCredential"],[6321,36,5730,34,"user"],[6321,40,5730,38],[6321,42,5730,40,"credential"],[6321,52,5730,50],[6321,54,5730,52],[6322,4,5731,4],[6322,10,5731,10,"userInternal"],[6322,22,5731,22],[6322,25,5731,25],[6322,29,5731,25,"getModularInstance"],[6322,42,5731,43],[6322,43,5731,43,"getModularInstance"],[6322,61,5731,43],[6322,63,5731,44,"user"],[6322,67,5731,48],[6322,68,5731,49],[6323,4,5732,4],[6323,10,5732,10,"_assertLinkedStatus"],[6323,29,5732,29],[6323,30,5732,30],[6323,35,5732,35],[6323,37,5732,37,"userInternal"],[6323,49,5732,49],[6323,51,5732,51,"credential"],[6323,61,5732,61],[6323,62,5732,62,"providerId"],[6323,72,5732,72],[6323,73,5732,73],[6324,4,5733,4],[6324,11,5733,11,"_link"],[6324,16,5733,16],[6324,17,5733,17,"userInternal"],[6324,29,5733,29],[6324,31,5733,31,"credential"],[6324,41,5733,41],[6324,42,5733,42],[6325,2,5734,0],[6326,2,5735,0],[6327,0,5736,0],[6328,0,5737,0],[6329,0,5738,0],[6330,0,5739,0],[6331,0,5740,0],[6332,0,5741,0],[6333,0,5742,0],[6334,0,5743,0],[6335,0,5744,0],[6336,0,5745,0],[6337,0,5746,0],[6338,0,5747,0],[6339,0,5748,0],[6340,0,5749,0],[6341,0,5750,0],[6342,2,5751,0],[6342,17,5751,15,"reauthenticateWithCredential"],[6342,45,5751,43,"reauthenticateWithCredential"],[6342,46,5751,44,"user"],[6342,50,5751,48],[6342,52,5751,50,"credential"],[6342,62,5751,60],[6342,64,5751,62],[6343,4,5752,4],[6343,11,5752,11,"_reauthenticate"],[6343,26,5752,26],[6343,27,5752,27],[6343,31,5752,27,"getModularInstance"],[6343,44,5752,45],[6343,45,5752,45,"getModularInstance"],[6343,63,5752,45],[6343,65,5752,46,"user"],[6343,69,5752,50],[6343,70,5752,51],[6343,72,5752,53,"credential"],[6343,82,5752,63],[6343,83,5752,64],[6344,2,5753,0],[6346,2,5755,0],[6347,0,5756,0],[6348,0,5757,0],[6349,0,5758,0],[6350,0,5759,0],[6351,0,5760,0],[6352,0,5761,0],[6353,0,5762,0],[6354,0,5763,0],[6355,0,5764,0],[6356,0,5765,0],[6357,0,5766,0],[6358,0,5767,0],[6359,0,5768,0],[6360,0,5769,0],[6361,0,5770,0],[6362,2,5771,0],[6362,17,5771,15,"signInWithCustomToken$1"],[6362,40,5771,38,"signInWithCustomToken$1"],[6362,41,5771,39,"auth"],[6362,45,5771,43],[6362,47,5771,45,"request"],[6362,54,5771,52],[6362,56,5771,54],[6363,4,5772,4],[6363,11,5772,11,"_performSignInRequest"],[6363,32,5772,32],[6363,33,5772,33,"auth"],[6363,37,5772,37],[6363,39,5772,39],[6363,45,5772,45],[6363,46,5772,46],[6363,69,5772,69],[6363,105,5772,105],[6363,106,5772,106],[6363,148,5772,148,"_addTidIfNecessary"],[6363,166,5772,166],[6363,167,5772,167,"auth"],[6363,171,5772,171],[6363,173,5772,173,"request"],[6363,180,5772,180],[6363,181,5772,181],[6363,182,5772,182],[6364,2,5773,0],[6366,2,5775,0],[6367,0,5776,0],[6368,0,5777,0],[6369,0,5778,0],[6370,0,5779,0],[6371,0,5780,0],[6372,0,5781,0],[6373,0,5782,0],[6374,0,5783,0],[6375,0,5784,0],[6376,0,5785,0],[6377,0,5786,0],[6378,0,5787,0],[6379,0,5788,0],[6380,0,5789,0],[6381,0,5790,0],[6382,2,5791,0],[6383,0,5792,0],[6384,0,5793,0],[6385,0,5794,0],[6386,0,5795,0],[6387,0,5796,0],[6388,0,5797,0],[6389,0,5798,0],[6390,0,5799,0],[6391,0,5800,0],[6392,0,5801,0],[6393,0,5802,0],[6394,0,5803,0],[6395,0,5804,0],[6396,0,5805,0],[6397,0,5806,0],[6398,0,5807,0],[6399,0,5808,0],[6400,0,5809,0],[6401,2,5810,0],[6401,17,5810,15,"signInWithCustomToken"],[6401,38,5810,36,"signInWithCustomToken"],[6401,39,5810,37,"auth"],[6401,43,5810,41],[6401,45,5810,43,"customToken"],[6401,56,5810,54],[6401,58,5810,56],[6402,4,5811,4],[6402,8,5811,8],[6402,12,5811,8,"_isFirebaseServerApp"],[6402,24,5811,28],[6402,25,5811,28,"_isFirebaseServerApp"],[6402,45,5811,28],[6402,47,5811,29,"auth"],[6402,51,5811,33],[6402,52,5811,34,"app"],[6402,55,5811,37],[6402,56,5811,38],[6402,58,5811,40],[6403,6,5812,8],[6403,13,5812,15,"Promise"],[6403,20,5812,22],[6403,21,5812,23,"reject"],[6403,27,5812,29],[6403,28,5812,30,"_serverAppCurrentUserOperationNotSupportedError"],[6403,75,5812,77],[6403,76,5812,78,"auth"],[6403,80,5812,82],[6403,81,5812,83],[6403,82,5812,84],[6404,4,5813,4],[6405,4,5814,4],[6405,10,5814,10,"authInternal"],[6405,22,5814,22],[6405,25,5814,25,"_castAuth"],[6405,34,5814,34],[6405,35,5814,35,"auth"],[6405,39,5814,39],[6405,40,5814,40],[6406,4,5815,4],[6406,10,5815,10,"response"],[6406,18,5815,18],[6406,21,5815,21],[6406,27,5815,27,"signInWithCustomToken$1"],[6406,50,5815,50],[6406,51,5815,51,"authInternal"],[6406,63,5815,63],[6406,65,5815,65],[6407,6,5816,8,"token"],[6407,11,5816,13],[6407,13,5816,15,"customToken"],[6407,24,5816,26],[6408,6,5817,8,"returnSecureToken"],[6408,23,5817,25],[6408,25,5817,27],[6409,4,5818,4],[6409,5,5818,5],[6409,6,5818,6],[6410,4,5819,4],[6410,10,5819,10,"cred"],[6410,14,5819,14],[6410,17,5819,17],[6410,23,5819,23,"UserCredentialImpl"],[6410,41,5819,41],[6410,42,5819,42,"_fromIdTokenResponse"],[6410,62,5819,62],[6410,63,5819,63,"authInternal"],[6410,75,5819,75],[6410,77,5819,77],[6410,85,5819,85],[6410,86,5819,86],[6410,115,5819,115,"response"],[6410,123,5819,123],[6410,124,5819,124],[6411,4,5820,4],[6411,10,5820,10,"authInternal"],[6411,22,5820,22],[6411,23,5820,23,"_updateCurrentUser"],[6411,41,5820,41],[6411,42,5820,42,"cred"],[6411,46,5820,46],[6411,47,5820,47,"user"],[6411,51,5820,51],[6411,52,5820,52],[6412,4,5821,4],[6412,11,5821,11,"cred"],[6412,15,5821,15],[6413,2,5822,0],[6415,2,5824,0],[6416,0,5825,0],[6417,0,5826,0],[6418,0,5827,0],[6419,0,5828,0],[6420,0,5829,0],[6421,0,5830,0],[6422,0,5831,0],[6423,0,5832,0],[6424,0,5833,0],[6425,0,5834,0],[6426,0,5835,0],[6427,0,5836,0],[6428,0,5837,0],[6429,0,5838,0],[6430,0,5839,0],[6431,2,5840,0],[6431,8,5840,6,"MultiFactorInfoImpl"],[6431,27,5840,25],[6431,28,5840,26],[6432,4,5841,4,"constructor"],[6432,15,5841,15,"constructor"],[6432,16,5841,16,"factorId"],[6432,24,5841,24],[6432,26,5841,26,"response"],[6432,34,5841,34],[6432,36,5841,36],[6433,6,5842,8],[6433,10,5842,12],[6433,11,5842,13,"factorId"],[6433,19,5842,21],[6433,22,5842,24,"factorId"],[6433,30,5842,32],[6434,6,5843,8],[6434,10,5843,12],[6434,11,5843,13,"uid"],[6434,14,5843,16],[6434,17,5843,19,"response"],[6434,25,5843,27],[6434,26,5843,28,"mfaEnrollmentId"],[6434,41,5843,43],[6435,6,5844,8],[6435,10,5844,12],[6435,11,5844,13,"enrollmentTime"],[6435,25,5844,27],[6435,28,5844,30],[6435,32,5844,34,"Date"],[6435,36,5844,38],[6435,37,5844,39,"response"],[6435,45,5844,47],[6435,46,5844,48,"enrolledAt"],[6435,56,5844,58],[6435,57,5844,59],[6435,58,5844,60,"toUTCString"],[6435,69,5844,71],[6435,70,5844,72],[6435,71,5844,73],[6436,6,5845,8],[6436,10,5845,12],[6436,11,5845,13,"displayName"],[6436,22,5845,24],[6436,25,5845,27,"response"],[6436,33,5845,35],[6436,34,5845,36,"displayName"],[6436,45,5845,47],[6437,4,5846,4],[6438,4,5847,4],[6438,11,5847,11,"_fromServerResponse"],[6438,30,5847,30,"_fromServerResponse"],[6438,31,5847,31,"auth"],[6438,35,5847,35],[6438,37,5847,37,"enrollment"],[6438,47,5847,47],[6438,49,5847,49],[6439,6,5848,8],[6439,10,5848,12],[6439,21,5848,23],[6439,25,5848,27,"enrollment"],[6439,35,5848,37],[6439,37,5848,39],[6440,8,5849,12],[6440,15,5849,19,"PhoneMultiFactorInfoImpl"],[6440,39,5849,43],[6440,40,5849,44,"_fromServerResponse"],[6440,59,5849,63],[6440,60,5849,64,"auth"],[6440,64,5849,68],[6440,66,5849,70,"enrollment"],[6440,76,5849,80],[6440,77,5849,81],[6441,6,5850,8],[6441,7,5850,9],[6441,13,5851,13],[6441,17,5851,17],[6441,27,5851,27],[6441,31,5851,31,"enrollment"],[6441,41,5851,41],[6441,43,5851,43],[6442,8,5852,12],[6442,15,5852,19,"TotpMultiFactorInfoImpl"],[6442,38,5852,42],[6442,39,5852,43,"_fromServerResponse"],[6442,58,5852,62],[6442,59,5852,63,"auth"],[6442,63,5852,67],[6442,65,5852,69,"enrollment"],[6442,75,5852,79],[6442,76,5852,80],[6443,6,5853,8],[6444,6,5854,8],[6444,13,5854,15,"_fail"],[6444,18,5854,20],[6444,19,5854,21,"auth"],[6444,23,5854,25],[6444,25,5854,27],[6444,41,5854,43],[6444,42,5854,44],[6444,76,5854,78],[6444,77,5854,79],[6445,4,5855,4],[6446,2,5856,0],[6447,2,5857,0],[6447,8,5857,6,"PhoneMultiFactorInfoImpl"],[6447,32,5857,30],[6447,41,5857,39,"MultiFactorInfoImpl"],[6447,60,5857,58],[6447,61,5857,59],[6448,4,5858,4,"constructor"],[6448,15,5858,15,"constructor"],[6448,16,5858,16,"response"],[6448,24,5858,24],[6448,26,5858,26],[6449,6,5859,8],[6449,11,5859,13],[6449,12,5859,14],[6449,19,5859,21],[6449,20,5859,22],[6449,42,5859,44,"response"],[6449,50,5859,52],[6449,51,5859,53],[6450,6,5860,8],[6450,10,5860,12],[6450,11,5860,13,"phoneNumber"],[6450,22,5860,24],[6450,25,5860,27,"response"],[6450,33,5860,35],[6450,34,5860,36,"phoneInfo"],[6450,43,5860,45],[6451,4,5861,4],[6452,4,5862,4],[6452,11,5862,11,"_fromServerResponse"],[6452,30,5862,30,"_fromServerResponse"],[6452,31,5862,31,"_auth"],[6452,36,5862,36],[6452,38,5862,38,"enrollment"],[6452,48,5862,48],[6452,50,5862,50],[6453,6,5863,8],[6453,13,5863,15],[6453,17,5863,19,"PhoneMultiFactorInfoImpl"],[6453,41,5863,43],[6453,42,5863,44,"enrollment"],[6453,52,5863,54],[6453,53,5863,55],[6454,4,5864,4],[6455,2,5865,0],[6456,2,5866,0],[6456,8,5866,6,"TotpMultiFactorInfoImpl"],[6456,31,5866,29],[6456,40,5866,38,"MultiFactorInfoImpl"],[6456,59,5866,57],[6456,60,5866,58],[6457,4,5867,4,"constructor"],[6457,15,5867,15,"constructor"],[6457,16,5867,16,"response"],[6457,24,5867,24],[6457,26,5867,26],[6458,6,5868,8],[6458,11,5868,13],[6458,12,5868,14],[6458,18,5868,20],[6458,19,5868,21],[6458,40,5868,42,"response"],[6458,48,5868,50],[6458,49,5868,51],[6459,4,5869,4],[6460,4,5870,4],[6460,11,5870,11,"_fromServerResponse"],[6460,30,5870,30,"_fromServerResponse"],[6460,31,5870,31,"_auth"],[6460,36,5870,36],[6460,38,5870,38,"enrollment"],[6460,48,5870,48],[6460,50,5870,50],[6461,6,5871,8],[6461,13,5871,15],[6461,17,5871,19,"TotpMultiFactorInfoImpl"],[6461,40,5871,42],[6461,41,5871,43,"enrollment"],[6461,51,5871,53],[6461,52,5871,54],[6462,4,5872,4],[6463,2,5873,0],[6465,2,5875,0],[6466,0,5876,0],[6467,0,5877,0],[6468,0,5878,0],[6469,0,5879,0],[6470,0,5880,0],[6471,0,5881,0],[6472,0,5882,0],[6473,0,5883,0],[6474,0,5884,0],[6475,0,5885,0],[6476,0,5886,0],[6477,0,5887,0],[6478,0,5888,0],[6479,0,5889,0],[6480,0,5890,0],[6481,2,5891,0],[6481,11,5891,9,"_setActionCodeSettingsOnRequest"],[6481,42,5891,40,"_setActionCodeSettingsOnRequest"],[6481,43,5891,41,"auth"],[6481,47,5891,45],[6481,49,5891,47,"request"],[6481,56,5891,54],[6481,58,5891,56,"actionCodeSettings"],[6481,76,5891,74],[6481,78,5891,76],[6482,4,5892,4,"_assert"],[6482,11,5892,11],[6482,12,5892,12,"actionCodeSettings"],[6482,30,5892,30],[6482,31,5892,31,"url"],[6482,34,5892,34],[6482,36,5892,36,"length"],[6482,42,5892,42],[6482,45,5892,45],[6482,46,5892,46],[6482,48,5892,48,"auth"],[6482,52,5892,52],[6482,54,5892,54],[6482,76,5892,76],[6482,77,5892,77],[6482,117,5892,117],[6482,118,5892,118],[6483,4,5893,4,"_assert"],[6483,11,5893,11],[6483,12,5893,12],[6483,19,5893,19,"actionCodeSettings"],[6483,37,5893,37],[6483,38,5893,38,"dynamicLinkDomain"],[6483,55,5893,55],[6483,60,5893,60],[6483,71,5893,71],[6483,75,5894,8,"actionCodeSettings"],[6483,93,5894,26],[6483,94,5894,27,"dynamicLinkDomain"],[6483,111,5894,44],[6483,112,5894,45,"length"],[6483,118,5894,51],[6483,121,5894,54],[6483,122,5894,55],[6483,124,5894,57,"auth"],[6483,128,5894,61],[6483,130,5894,63],[6483,159,5894,92],[6483,160,5894,93],[6483,207,5894,140],[6483,208,5894,141],[6484,4,5895,4,"_assert"],[6484,11,5895,11],[6484,12,5895,12],[6484,19,5895,19,"actionCodeSettings"],[6484,37,5895,37],[6484,38,5895,38,"linkDomain"],[6484,48,5895,48],[6484,53,5895,53],[6484,64,5895,64],[6484,68,5896,8,"actionCodeSettings"],[6484,86,5896,26],[6484,87,5896,27,"linkDomain"],[6484,97,5896,37],[6484,98,5896,38,"length"],[6484,104,5896,44],[6484,107,5896,47],[6484,108,5896,48],[6484,110,5896,50,"auth"],[6484,114,5896,54],[6484,116,5896,56],[6484,145,5896,85],[6484,146,5896,86],[6484,193,5896,133],[6484,194,5896,134],[6485,4,5897,4,"request"],[6485,11,5897,11],[6485,12,5897,12,"continueUrl"],[6485,23,5897,23],[6485,26,5897,26,"actionCodeSettings"],[6485,44,5897,44],[6485,45,5897,45,"url"],[6485,48,5897,48],[6486,4,5898,4,"request"],[6486,11,5898,11],[6486,12,5898,12,"dynamicLinkDomain"],[6486,29,5898,29],[6486,32,5898,32,"actionCodeSettings"],[6486,50,5898,50],[6486,51,5898,51,"dynamicLinkDomain"],[6486,68,5898,68],[6487,4,5899,4,"request"],[6487,11,5899,11],[6487,12,5899,12,"linkDomain"],[6487,22,5899,22],[6487,25,5899,25,"actionCodeSettings"],[6487,43,5899,43],[6487,44,5899,44,"linkDomain"],[6487,54,5899,54],[6488,4,5900,4,"request"],[6488,11,5900,11],[6488,12,5900,12,"canHandleCodeInApp"],[6488,30,5900,30],[6488,33,5900,33,"actionCodeSettings"],[6488,51,5900,51],[6488,52,5900,52,"handleCodeInApp"],[6488,67,5900,67],[6489,4,5901,4],[6489,8,5901,8,"actionCodeSettings"],[6489,26,5901,26],[6489,27,5901,27,"iOS"],[6489,30,5901,30],[6489,32,5901,32],[6490,6,5902,8,"_assert"],[6490,13,5902,15],[6490,14,5902,16,"actionCodeSettings"],[6490,32,5902,34],[6490,33,5902,35,"iOS"],[6490,36,5902,38],[6490,37,5902,39,"bundleId"],[6490,45,5902,47],[6490,46,5902,48,"length"],[6490,52,5902,54],[6490,55,5902,57],[6490,56,5902,58],[6490,58,5902,60,"auth"],[6490,62,5902,64],[6490,64,5902,66],[6490,87,5902,89],[6490,88,5902,90],[6490,129,5902,131],[6490,130,5902,132],[6491,6,5903,8,"request"],[6491,13,5903,15],[6491,14,5903,16,"iOSBundleId"],[6491,25,5903,27],[6491,28,5903,30,"actionCodeSettings"],[6491,46,5903,48],[6491,47,5903,49,"iOS"],[6491,50,5903,52],[6491,51,5903,53,"bundleId"],[6491,59,5903,61],[6492,4,5904,4],[6493,4,5905,4],[6493,8,5905,8,"actionCodeSettings"],[6493,26,5905,26],[6493,27,5905,27,"android"],[6493,34,5905,34],[6493,36,5905,36],[6494,6,5906,8,"_assert"],[6494,13,5906,15],[6494,14,5906,16,"actionCodeSettings"],[6494,32,5906,34],[6494,33,5906,35,"android"],[6494,40,5906,42],[6494,41,5906,43,"packageName"],[6494,52,5906,54],[6494,53,5906,55,"length"],[6494,59,5906,61],[6494,62,5906,64],[6494,63,5906,65],[6494,65,5906,67,"auth"],[6494,69,5906,71],[6494,71,5906,73],[6494,97,5906,99],[6494,98,5906,100],[6494,146,5906,148],[6494,147,5906,149],[6495,6,5907,8,"request"],[6495,13,5907,15],[6495,14,5907,16,"androidInstallApp"],[6495,31,5907,33],[6495,34,5907,36,"actionCodeSettings"],[6495,52,5907,54],[6495,53,5907,55,"android"],[6495,60,5907,62],[6495,61,5907,63,"installApp"],[6495,71,5907,73],[6496,6,5908,8,"request"],[6496,13,5908,15],[6496,14,5908,16,"androidMinimumVersionCode"],[6496,39,5908,41],[6496,42,5909,12,"actionCodeSettings"],[6496,60,5909,30],[6496,61,5909,31,"android"],[6496,68,5909,38],[6496,69,5909,39,"minimumVersion"],[6496,83,5909,53],[6497,6,5910,8,"request"],[6497,13,5910,15],[6497,14,5910,16,"androidPackageName"],[6497,32,5910,34],[6497,35,5910,37,"actionCodeSettings"],[6497,53,5910,55],[6497,54,5910,56,"android"],[6497,61,5910,63],[6497,62,5910,64,"packageName"],[6497,73,5910,75],[6498,4,5911,4],[6499,2,5912,0],[6501,2,5914,0],[6502,0,5915,0],[6503,0,5916,0],[6504,0,5917,0],[6505,0,5918,0],[6506,0,5919,0],[6507,0,5920,0],[6508,0,5921,0],[6509,0,5922,0],[6510,0,5923,0],[6511,0,5924,0],[6512,0,5925,0],[6513,0,5926,0],[6514,0,5927,0],[6515,0,5928,0],[6516,0,5929,0],[6517,2,5930,0],[6518,0,5931,0],[6519,0,5932,0],[6520,0,5933,0],[6521,0,5934,0],[6522,0,5935,0],[6523,0,5936,0],[6524,0,5937,0],[6525,0,5938,0],[6526,0,5939,0],[6527,0,5940,0],[6528,0,5941,0],[6529,0,5942,0],[6530,2,5943,0],[6530,17,5943,15,"recachePasswordPolicy"],[6530,38,5943,36,"recachePasswordPolicy"],[6530,39,5943,37,"auth"],[6530,43,5943,41],[6530,45,5943,43],[6531,4,5944,4],[6531,10,5944,10,"authInternal"],[6531,22,5944,22],[6531,25,5944,25,"_castAuth"],[6531,34,5944,34],[6531,35,5944,35,"auth"],[6531,39,5944,39],[6531,40,5944,40],[6532,4,5945,4],[6532,8,5945,8,"authInternal"],[6532,20,5945,20],[6532,21,5945,21,"_getPasswordPolicyInternal"],[6532,47,5945,47],[6532,48,5945,48],[6532,49,5945,49],[6532,51,5945,51],[6533,6,5946,8],[6533,12,5946,14,"authInternal"],[6533,24,5946,26],[6533,25,5946,27,"_updatePasswordPolicy"],[6533,46,5946,48],[6533,47,5946,49],[6533,48,5946,50],[6534,4,5947,4],[6535,2,5948,0],[6536,2,5949,0],[6537,0,5950,0],[6538,0,5951,0],[6539,0,5952,0],[6540,0,5953,0],[6541,0,5954,0],[6542,0,5955,0],[6543,0,5956,0],[6544,0,5957,0],[6545,0,5958,0],[6546,0,5959,0],[6547,0,5960,0],[6548,0,5961,0],[6549,0,5962,0],[6550,0,5963,0],[6551,0,5964,0],[6552,0,5965,0],[6553,0,5966,0],[6554,0,5967,0],[6555,0,5968,0],[6556,0,5969,0],[6557,0,5970,0],[6558,0,5971,0],[6559,0,5972,0],[6560,0,5973,0],[6561,0,5974,0],[6562,0,5975,0],[6563,0,5976,0],[6564,0,5977,0],[6565,0,5978,0],[6566,0,5979,0],[6567,0,5980,0],[6568,0,5981,0],[6569,0,5982,0],[6570,0,5983,0],[6571,2,5984,0],[6571,17,5984,15,"sendPasswordResetEmail"],[6571,39,5984,37,"sendPasswordResetEmail"],[6571,40,5984,38,"auth"],[6571,44,5984,42],[6571,46,5984,44,"email"],[6571,51,5984,49],[6571,53,5984,51,"actionCodeSettings"],[6571,71,5984,69],[6571,73,5984,71],[6572,4,5985,4],[6572,10,5985,10,"authInternal"],[6572,22,5985,22],[6572,25,5985,25,"_castAuth"],[6572,34,5985,34],[6572,35,5985,35,"auth"],[6572,39,5985,39],[6572,40,5985,40],[6573,4,5986,4],[6573,10,5986,10,"request"],[6573,17,5986,17],[6573,20,5986,20],[6574,6,5987,8,"requestType"],[6574,17,5987,19],[6574,19,5987,21],[6574,35,5987,37],[6574,36,5987,38],[6575,6,5988,8,"email"],[6575,11,5988,13],[6576,6,5989,8,"clientType"],[6576,16,5989,18],[6576,18,5989,20],[6576,35,5989,37],[6576,36,5989,38],[6577,4,5990,4],[6577,5,5990,5],[6578,4,5991,4],[6578,8,5991,8,"actionCodeSettings"],[6578,26,5991,26],[6578,28,5991,28],[6579,6,5992,8,"_setActionCodeSettingsOnRequest"],[6579,37,5992,39],[6579,38,5992,40,"authInternal"],[6579,50,5992,52],[6579,52,5992,54,"request"],[6579,59,5992,61],[6579,61,5992,63,"actionCodeSettings"],[6579,79,5992,81],[6579,80,5992,82],[6580,4,5993,4],[6581,4,5994,4],[6581,10,5994,10,"handleRecaptchaFlow"],[6581,29,5994,29],[6581,30,5994,30,"authInternal"],[6581,42,5994,42],[6581,44,5994,44,"request"],[6581,51,5994,51],[6581,53,5994,53],[6581,65,5994,65],[6581,66,5994,66],[6581,106,5994,106,"sendPasswordResetEmail$1"],[6581,130,5994,130],[6581,132,5994,132],[6581,157,5994,157],[6581,158,5994,158],[6581,209,5994,209],[6581,210,5994,210],[6582,2,5995,0],[6583,2,5996,0],[6584,0,5997,0],[6585,0,5998,0],[6586,0,5999,0],[6587,0,6000,0],[6588,0,6001,0],[6589,0,6002,0],[6590,0,6003,0],[6591,0,6004,0],[6592,2,6005,0],[6592,17,6005,15,"confirmPasswordReset"],[6592,37,6005,35,"confirmPasswordReset"],[6592,38,6005,36,"auth"],[6592,42,6005,40],[6592,44,6005,42,"oobCode"],[6592,51,6005,49],[6592,53,6005,51,"newPassword"],[6592,64,6005,62],[6592,66,6005,64],[6593,4,6006,4],[6593,10,6006,10,"resetPassword"],[6593,23,6006,23],[6593,24,6006,24],[6593,28,6006,24,"getModularInstance"],[6593,41,6006,42],[6593,42,6006,42,"getModularInstance"],[6593,60,6006,42],[6593,62,6006,43,"auth"],[6593,66,6006,47],[6593,67,6006,48],[6593,69,6006,50],[6594,6,6007,8,"oobCode"],[6594,13,6007,15],[6595,6,6008,8,"newPassword"],[6596,4,6009,4],[6596,5,6009,5],[6596,6,6009,6],[6596,7,6010,9,"catch"],[6596,12,6010,14],[6596,13,6010,15],[6596,19,6010,22,"error"],[6596,24,6010,27],[6596,28,6010,32],[6597,6,6011,8],[6597,10,6011,12,"error"],[6597,15,6011,17],[6597,16,6011,18,"code"],[6597,20,6011,22],[6597,25,6012,12],[6597,33,6012,20],[6597,70,6012,57],[6597,71,6012,58],[6597,128,6012,115],[6597,130,6012,117],[6598,8,6013,12],[6598,13,6013,17,"recachePasswordPolicy"],[6598,34,6013,38],[6598,35,6013,39,"auth"],[6598,39,6013,43],[6598,40,6013,44],[6599,6,6014,8],[6600,6,6015,8],[6600,12,6015,14,"error"],[6600,17,6015,19],[6601,4,6016,4],[6601,5,6016,5],[6601,6,6016,6],[6602,4,6017,4],[6603,2,6018,0],[6604,2,6019,0],[6605,0,6020,0],[6606,0,6021,0],[6607,0,6022,0],[6608,0,6023,0],[6609,0,6024,0],[6610,0,6025,0],[6611,0,6026,0],[6612,2,6027,0],[6612,17,6027,15,"applyActionCode"],[6612,32,6027,30,"applyActionCode"],[6612,33,6027,31,"auth"],[6612,37,6027,35],[6612,39,6027,37,"oobCode"],[6612,46,6027,44],[6612,48,6027,46],[6613,4,6028,4],[6613,10,6028,10,"applyActionCode$1"],[6613,27,6028,27],[6613,28,6028,28],[6613,32,6028,28,"getModularInstance"],[6613,45,6028,46],[6613,46,6028,46,"getModularInstance"],[6613,64,6028,46],[6613,66,6028,47,"auth"],[6613,70,6028,51],[6613,71,6028,52],[6613,73,6028,54],[6614,6,6028,56,"oobCode"],[6615,4,6028,64],[6615,5,6028,65],[6615,6,6028,66],[6616,2,6029,0],[6617,2,6030,0],[6618,0,6031,0],[6619,0,6032,0],[6620,0,6033,0],[6621,0,6034,0],[6622,0,6035,0],[6623,0,6036,0],[6624,0,6037,0],[6625,0,6038,0],[6626,0,6039,0],[6627,2,6040,0],[6627,17,6040,15,"checkActionCode"],[6627,32,6040,30,"checkActionCode"],[6627,33,6040,31,"auth"],[6627,37,6040,35],[6627,39,6040,37,"oobCode"],[6627,46,6040,44],[6627,48,6040,46],[6628,4,6041,4],[6628,10,6041,10,"authModular"],[6628,21,6041,21],[6628,24,6041,24],[6628,28,6041,24,"getModularInstance"],[6628,41,6041,42],[6628,42,6041,42,"getModularInstance"],[6628,60,6041,42],[6628,62,6041,43,"auth"],[6628,66,6041,47],[6628,67,6041,48],[6629,4,6042,4],[6629,10,6042,10,"response"],[6629,18,6042,18],[6629,21,6042,21],[6629,27,6042,27,"resetPassword"],[6629,40,6042,40],[6629,41,6042,41,"authModular"],[6629,52,6042,52],[6629,54,6042,54],[6630,6,6042,56,"oobCode"],[6631,4,6042,64],[6631,5,6042,65],[6631,6,6042,66],[6632,4,6043,4],[6633,4,6044,4],[6634,4,6045,4],[6635,4,6046,4],[6636,4,6047,4],[6637,4,6048,4],[6638,4,6049,4],[6638,10,6049,10,"operation"],[6638,19,6049,19],[6638,22,6049,22,"response"],[6638,30,6049,30],[6638,31,6049,31,"requestType"],[6638,42,6049,42],[6639,4,6050,4,"_assert"],[6639,11,6050,11],[6639,12,6050,12,"operation"],[6639,21,6050,21],[6639,23,6050,23,"authModular"],[6639,34,6050,34],[6639,36,6050,36],[6639,52,6050,52],[6639,53,6050,53],[6639,87,6050,87],[6639,88,6050,88],[6640,4,6051,4],[6640,12,6051,12,"operation"],[6640,21,6051,21],[6641,6,6052,8],[6641,11,6052,13],[6641,25,6052,27],[6641,26,6052,28],[6642,8,6053,12],[6643,6,6054,8],[6643,11,6054,13],[6643,36,6054,38],[6643,37,6054,39],[6644,8,6055,12,"_assert"],[6644,15,6055,19],[6644,16,6055,20,"response"],[6644,24,6055,28],[6644,25,6055,29,"newEmail"],[6644,33,6055,37],[6644,35,6055,39,"authModular"],[6644,46,6055,50],[6644,48,6055,52],[6644,64,6055,68],[6644,65,6055,69],[6644,99,6055,103],[6644,100,6055,104],[6645,8,6056,12],[6646,6,6057,8],[6646,11,6057,13],[6646,42,6057,44],[6646,43,6057,45],[6647,8,6058,12,"_assert"],[6647,15,6058,19],[6647,16,6058,20,"response"],[6647,24,6058,28],[6647,25,6058,29,"mfaInfo"],[6647,32,6058,36],[6647,34,6058,38,"authModular"],[6647,45,6058,49],[6647,47,6058,51],[6647,63,6058,67],[6647,64,6058,68],[6647,98,6058,102],[6647,99,6058,103],[6648,6,6059,8],[6649,6,6060,8],[6650,8,6061,12,"_assert"],[6650,15,6061,19],[6650,16,6061,20,"response"],[6650,24,6061,28],[6650,25,6061,29,"email"],[6650,30,6061,34],[6650,32,6061,36,"authModular"],[6650,43,6061,47],[6650,45,6061,49],[6650,61,6061,65],[6650,62,6061,66],[6650,96,6061,100],[6650,97,6061,101],[6651,4,6062,4],[6652,4,6063,4],[6653,4,6064,4],[6653,8,6064,8,"multiFactorInfo"],[6653,23,6064,23],[6653,26,6064,26],[6653,30,6064,30],[6654,4,6065,4],[6654,8,6065,8,"response"],[6654,16,6065,16],[6654,17,6065,17,"mfaInfo"],[6654,24,6065,24],[6654,26,6065,26],[6655,6,6066,8,"multiFactorInfo"],[6655,21,6066,23],[6655,24,6066,26,"MultiFactorInfoImpl"],[6655,43,6066,45],[6655,44,6066,46,"_fromServerResponse"],[6655,63,6066,65],[6655,64,6066,66,"_castAuth"],[6655,73,6066,75],[6655,74,6066,76,"authModular"],[6655,85,6066,87],[6655,86,6066,88],[6655,88,6066,90,"response"],[6655,96,6066,98],[6655,97,6066,99,"mfaInfo"],[6655,104,6066,106],[6655,105,6066,107],[6656,4,6067,4],[6657,4,6068,4],[6657,11,6068,11],[6658,6,6069,8,"data"],[6658,10,6069,12],[6658,12,6069,14],[6659,8,6070,12,"email"],[6659,13,6070,17],[6659,15,6070,19],[6659,16,6070,20,"response"],[6659,24,6070,28],[6659,25,6070,29,"requestType"],[6659,36,6070,40],[6659,41,6070,45],[6659,66,6070,70],[6659,67,6070,71],[6659,119,6071,18,"response"],[6659,127,6071,26],[6659,128,6071,27,"newEmail"],[6659,136,6071,35],[6659,139,6072,18,"response"],[6659,147,6072,26],[6659,148,6072,27,"email"],[6659,153,6072,32],[6659,158,6072,37],[6659,162,6072,41],[6660,8,6073,12,"previousEmail"],[6660,21,6073,25],[6660,23,6073,27],[6660,24,6073,28,"response"],[6660,32,6073,36],[6660,33,6073,37,"requestType"],[6660,44,6073,48],[6660,49,6073,53],[6660,74,6073,78],[6660,75,6073,79],[6660,127,6074,18,"response"],[6660,135,6074,26],[6660,136,6074,27,"email"],[6660,141,6074,32],[6660,144,6075,18,"response"],[6660,152,6075,26],[6660,153,6075,27,"newEmail"],[6660,161,6075,35],[6660,166,6075,40],[6660,170,6075,44],[6661,8,6076,12,"multiFactorInfo"],[6662,6,6077,8],[6662,7,6077,9],[6663,6,6078,8,"operation"],[6664,4,6079,4],[6664,5,6079,5],[6665,2,6080,0],[6666,2,6081,0],[6667,0,6082,0],[6668,0,6083,0],[6669,0,6084,0],[6670,0,6085,0],[6671,0,6086,0],[6672,0,6087,0],[6673,0,6088,0],[6674,0,6089,0],[6675,0,6090,0],[6676,2,6091,0],[6676,17,6091,15,"verifyPasswordResetCode"],[6676,40,6091,38,"verifyPasswordResetCode"],[6676,41,6091,39,"auth"],[6676,45,6091,43],[6676,47,6091,45,"code"],[6676,51,6091,49],[6676,53,6091,51],[6677,4,6092,4],[6677,10,6092,10],[6678,6,6092,12,"data"],[6679,4,6092,17],[6679,5,6092,18],[6679,8,6092,21],[6679,14,6092,27,"checkActionCode"],[6679,29,6092,42],[6679,30,6092,43],[6679,34,6092,43,"getModularInstance"],[6679,47,6092,61],[6679,48,6092,61,"getModularInstance"],[6679,66,6092,61],[6679,68,6092,62,"auth"],[6679,72,6092,66],[6679,73,6092,67],[6679,75,6092,69,"code"],[6679,79,6092,73],[6679,80,6092,74],[6680,4,6093,4],[6681,4,6094,4],[6681,11,6094,11,"data"],[6681,15,6094,15],[6681,16,6094,16,"email"],[6681,21,6094,21],[6682,2,6095,0],[6683,2,6096,0],[6684,0,6097,0],[6685,0,6098,0],[6686,0,6099,0],[6687,0,6100,0],[6688,0,6101,0],[6689,0,6102,0],[6690,0,6103,0],[6691,0,6104,0],[6692,0,6105,0],[6693,0,6106,0],[6694,0,6107,0],[6695,0,6108,0],[6696,0,6109,0],[6697,0,6110,0],[6698,0,6111,0],[6699,0,6112,0],[6700,0,6113,0],[6701,0,6114,0],[6702,0,6115,0],[6703,2,6116,0],[6703,17,6116,15,"createUserWithEmailAndPassword"],[6703,47,6116,45,"createUserWithEmailAndPassword"],[6703,48,6116,46,"auth"],[6703,52,6116,50],[6703,54,6116,52,"email"],[6703,59,6116,57],[6703,61,6116,59,"password"],[6703,69,6116,67],[6703,71,6116,69],[6704,4,6117,4],[6704,8,6117,8],[6704,12,6117,8,"_isFirebaseServerApp"],[6704,24,6117,28],[6704,25,6117,28,"_isFirebaseServerApp"],[6704,45,6117,28],[6704,47,6117,29,"auth"],[6704,51,6117,33],[6704,52,6117,34,"app"],[6704,55,6117,37],[6704,56,6117,38],[6704,58,6117,40],[6705,6,6118,8],[6705,13,6118,15,"Promise"],[6705,20,6118,22],[6705,21,6118,23,"reject"],[6705,27,6118,29],[6705,28,6118,30,"_serverAppCurrentUserOperationNotSupportedError"],[6705,75,6118,77],[6705,76,6118,78,"auth"],[6705,80,6118,82],[6705,81,6118,83],[6705,82,6118,84],[6706,4,6119,4],[6707,4,6120,4],[6707,10,6120,10,"authInternal"],[6707,22,6120,22],[6707,25,6120,25,"_castAuth"],[6707,34,6120,34],[6707,35,6120,35,"auth"],[6707,39,6120,39],[6707,40,6120,40],[6708,4,6121,4],[6708,10,6121,10,"request"],[6708,17,6121,17],[6708,20,6121,20],[6709,6,6122,8,"returnSecureToken"],[6709,23,6122,25],[6709,25,6122,27],[6709,29,6122,31],[6710,6,6123,8,"email"],[6710,11,6123,13],[6711,6,6124,8,"password"],[6711,14,6124,16],[6712,6,6125,8,"clientType"],[6712,16,6125,18],[6712,18,6125,20],[6712,35,6125,37],[6712,36,6125,38],[6713,4,6126,4],[6713,5,6126,5],[6714,4,6127,4],[6714,10,6127,10,"signUpResponse"],[6714,24,6127,24],[6714,27,6127,27,"handleRecaptchaFlow"],[6714,46,6127,46],[6714,47,6127,47,"authInternal"],[6714,59,6127,59],[6714,61,6127,61,"request"],[6714,68,6127,68],[6714,70,6127,70],[6714,86,6127,86],[6714,87,6127,87],[6714,131,6127,131,"signUp"],[6714,137,6127,137],[6714,139,6127,139],[6714,164,6127,164],[6714,165,6127,165],[6714,216,6127,216],[6714,217,6127,217],[6715,4,6128,4],[6715,10,6128,10,"response"],[6715,18,6128,18],[6715,21,6128,21],[6715,27,6128,27,"signUpResponse"],[6715,41,6128,41],[6715,42,6128,42,"catch"],[6715,47,6128,47],[6715,48,6128,48,"error"],[6715,53,6128,53],[6715,57,6128,57],[6716,6,6129,8],[6716,10,6129,12,"error"],[6716,15,6129,17],[6716,16,6129,18,"code"],[6716,20,6129,22],[6716,25,6129,27],[6716,33,6129,35],[6716,70,6129,72],[6716,71,6129,73],[6716,128,6129,130],[6716,130,6129,132],[6717,8,6130,12],[6717,13,6130,17,"recachePasswordPolicy"],[6717,34,6130,38],[6717,35,6130,39,"auth"],[6717,39,6130,43],[6717,40,6130,44],[6718,6,6131,8],[6719,6,6132,8],[6719,12,6132,14,"error"],[6719,17,6132,19],[6720,4,6133,4],[6720,5,6133,5],[6720,6,6133,6],[6721,4,6134,4],[6721,10,6134,10,"userCredential"],[6721,24,6134,24],[6721,27,6134,27],[6721,33,6134,33,"UserCredentialImpl"],[6721,51,6134,51],[6721,52,6134,52,"_fromIdTokenResponse"],[6721,72,6134,72],[6721,73,6134,73,"authInternal"],[6721,85,6134,85],[6721,87,6134,87],[6721,95,6134,95],[6721,96,6134,96],[6721,125,6134,125,"response"],[6721,133,6134,133],[6721,134,6134,134],[6722,4,6135,4],[6722,10,6135,10,"authInternal"],[6722,22,6135,22],[6722,23,6135,23,"_updateCurrentUser"],[6722,41,6135,41],[6722,42,6135,42,"userCredential"],[6722,56,6135,56],[6722,57,6135,57,"user"],[6722,61,6135,61],[6722,62,6135,62],[6723,4,6136,4],[6723,11,6136,11,"userCredential"],[6723,25,6136,25],[6724,2,6137,0],[6725,2,6138,0],[6726,0,6139,0],[6727,0,6140,0],[6728,0,6141,0],[6729,0,6142,0],[6730,0,6143,0],[6731,0,6144,0],[6732,0,6145,0],[6733,0,6146,0],[6734,0,6147,0],[6735,0,6148,0],[6736,0,6149,0],[6737,0,6150,0],[6738,0,6151,0],[6739,0,6152,0],[6740,0,6153,0],[6741,0,6154,0],[6742,0,6155,0],[6743,0,6156,0],[6744,0,6157,0],[6745,0,6158,0],[6746,0,6159,0],[6747,0,6160,0],[6748,2,6161,0],[6748,11,6161,9,"signInWithEmailAndPassword"],[6748,37,6161,35,"signInWithEmailAndPassword"],[6748,38,6161,36,"auth"],[6748,42,6161,40],[6748,44,6161,42,"email"],[6748,49,6161,47],[6748,51,6161,49,"password"],[6748,59,6161,57],[6748,61,6161,59],[6749,4,6162,4],[6749,8,6162,8],[6749,12,6162,8,"_isFirebaseServerApp"],[6749,24,6162,28],[6749,25,6162,28,"_isFirebaseServerApp"],[6749,45,6162,28],[6749,47,6162,29,"auth"],[6749,51,6162,33],[6749,52,6162,34,"app"],[6749,55,6162,37],[6749,56,6162,38],[6749,58,6162,40],[6750,6,6163,8],[6750,13,6163,15,"Promise"],[6750,20,6163,22],[6750,21,6163,23,"reject"],[6750,27,6163,29],[6750,28,6163,30,"_serverAppCurrentUserOperationNotSupportedError"],[6750,75,6163,77],[6750,76,6163,78,"auth"],[6750,80,6163,82],[6750,81,6163,83],[6750,82,6163,84],[6751,4,6164,4],[6752,4,6165,4],[6752,11,6165,11,"signInWithCredential"],[6752,31,6165,31],[6752,32,6165,32],[6752,36,6165,32,"getModularInstance"],[6752,49,6165,50],[6752,50,6165,50,"getModularInstance"],[6752,68,6165,50],[6752,70,6165,51,"auth"],[6752,74,6165,55],[6752,75,6165,56],[6752,77,6165,58,"EmailAuthProvider"],[6752,94,6165,75],[6752,95,6165,76,"credential"],[6752,105,6165,86],[6752,106,6165,87,"email"],[6752,111,6165,92],[6752,113,6165,94,"password"],[6752,121,6165,102],[6752,122,6165,103],[6752,123,6165,104],[6752,124,6165,105,"catch"],[6752,129,6165,110],[6752,130,6165,111],[6752,136,6165,118,"error"],[6752,141,6165,123],[6752,145,6165,128],[6753,6,6166,8],[6753,10,6166,12,"error"],[6753,15,6166,17],[6753,16,6166,18,"code"],[6753,20,6166,22],[6753,25,6166,27],[6753,33,6166,35],[6753,70,6166,72],[6753,71,6166,73],[6753,128,6166,130],[6753,130,6166,132],[6754,8,6167,12],[6754,13,6167,17,"recachePasswordPolicy"],[6754,34,6167,38],[6754,35,6167,39,"auth"],[6754,39,6167,43],[6754,40,6167,44],[6755,6,6168,8],[6756,6,6169,8],[6756,12,6169,14,"error"],[6756,17,6169,19],[6757,4,6170,4],[6757,5,6170,5],[6757,6,6170,6],[6758,2,6171,0],[6760,2,6173,0],[6761,0,6174,0],[6762,0,6175,0],[6763,0,6176,0],[6764,0,6177,0],[6765,0,6178,0],[6766,0,6179,0],[6767,0,6180,0],[6768,0,6181,0],[6769,0,6182,0],[6770,0,6183,0],[6771,0,6184,0],[6772,0,6185,0],[6773,0,6186,0],[6774,0,6187,0],[6775,0,6188,0],[6776,2,6189,0],[6777,0,6190,0],[6778,0,6191,0],[6779,0,6192,0],[6780,0,6193,0],[6781,0,6194,0],[6782,0,6195,0],[6783,0,6196,0],[6784,0,6197,0],[6785,0,6198,0],[6786,0,6199,0],[6787,0,6200,0],[6788,0,6201,0],[6789,0,6202,0],[6790,0,6203,0],[6791,0,6204,0],[6792,0,6205,0],[6793,0,6206,0],[6794,0,6207,0],[6795,0,6208,0],[6796,0,6209,0],[6797,0,6210,0],[6798,0,6211,0],[6799,0,6212,0],[6800,0,6213,0],[6801,0,6214,0],[6802,0,6215,0],[6803,0,6216,0],[6804,0,6217,0],[6805,0,6218,0],[6806,0,6219,0],[6807,0,6220,0],[6808,0,6221,0],[6809,0,6222,0],[6810,0,6223,0],[6811,0,6224,0],[6812,0,6225,0],[6813,0,6226,0],[6814,2,6227,0],[6814,17,6227,15,"sendSignInLinkToEmail"],[6814,38,6227,36,"sendSignInLinkToEmail"],[6814,39,6227,37,"auth"],[6814,43,6227,41],[6814,45,6227,43,"email"],[6814,50,6227,48],[6814,52,6227,50,"actionCodeSettings"],[6814,70,6227,68],[6814,72,6227,70],[6815,4,6228,4],[6815,10,6228,10,"authInternal"],[6815,22,6228,22],[6815,25,6228,25,"_castAuth"],[6815,34,6228,34],[6815,35,6228,35,"auth"],[6815,39,6228,39],[6815,40,6228,40],[6816,4,6229,4],[6816,10,6229,10,"request"],[6816,17,6229,17],[6816,20,6229,20],[6817,6,6230,8,"requestType"],[6817,17,6230,19],[6817,19,6230,21],[6817,33,6230,35],[6817,34,6230,36],[6818,6,6231,8,"email"],[6818,11,6231,13],[6819,6,6232,8,"clientType"],[6819,16,6232,18],[6819,18,6232,20],[6819,35,6232,37],[6819,36,6232,38],[6820,4,6233,4],[6820,5,6233,5],[6821,4,6234,4],[6821,13,6234,13,"setActionCodeSettings"],[6821,34,6234,34,"setActionCodeSettings"],[6821,35,6234,35,"request"],[6821,42,6234,42],[6821,44,6234,44,"actionCodeSettings"],[6821,62,6234,62],[6821,64,6234,64],[6822,6,6235,8,"_assert"],[6822,13,6235,15],[6822,14,6235,16,"actionCodeSettings"],[6822,32,6235,34],[6822,33,6235,35,"handleCodeInApp"],[6822,48,6235,50],[6822,50,6235,52,"authInternal"],[6822,62,6235,64],[6822,64,6235,66],[6822,80,6235,82],[6822,81,6235,83],[6822,115,6235,117],[6822,116,6235,118],[6823,6,6236,8],[6823,10,6236,12,"actionCodeSettings"],[6823,28,6236,30],[6823,30,6236,32],[6824,8,6237,12,"_setActionCodeSettingsOnRequest"],[6824,39,6237,43],[6824,40,6237,44,"authInternal"],[6824,52,6237,56],[6824,54,6237,58,"request"],[6824,61,6237,65],[6824,63,6237,67,"actionCodeSettings"],[6824,81,6237,85],[6824,82,6237,86],[6825,6,6238,8],[6826,4,6239,4],[6827,4,6240,4,"setActionCodeSettings"],[6827,25,6240,25],[6827,26,6240,26,"request"],[6827,33,6240,33],[6827,35,6240,35,"actionCodeSettings"],[6827,53,6240,53],[6827,54,6240,54],[6828,4,6241,4],[6828,10,6241,10,"handleRecaptchaFlow"],[6828,29,6241,29],[6828,30,6241,30,"authInternal"],[6828,42,6241,42],[6828,44,6241,44,"request"],[6828,51,6241,51],[6828,53,6241,53],[6828,65,6241,65],[6828,66,6241,66],[6828,106,6241,106,"sendSignInLinkToEmail$1"],[6828,129,6241,129],[6828,131,6241,131],[6828,156,6241,156],[6828,157,6241,157],[6828,208,6241,208],[6828,209,6241,209],[6829,2,6242,0],[6830,2,6243,0],[6831,0,6244,0],[6832,0,6245,0],[6833,0,6246,0],[6834,0,6247,0],[6835,0,6248,0],[6836,0,6249,0],[6837,0,6250,0],[6838,2,6251,0],[6838,11,6251,9,"isSignInWithEmailLink"],[6838,32,6251,30,"isSignInWithEmailLink"],[6838,33,6251,31,"auth"],[6838,37,6251,35],[6838,39,6251,37,"emailLink"],[6838,48,6251,46],[6838,50,6251,48],[6839,4,6252,4],[6839,10,6252,10,"actionCodeUrl"],[6839,23,6252,23],[6839,26,6252,26,"ActionCodeURL"],[6839,39,6252,39],[6839,40,6252,40,"parseLink"],[6839,49,6252,49],[6839,50,6252,50,"emailLink"],[6839,59,6252,59],[6839,60,6252,60],[6840,4,6253,4],[6840,11,6253,11,"actionCodeUrl"],[6840,24,6253,24],[6840,26,6253,26,"operation"],[6840,35,6253,35],[6840,40,6253,40],[6840,54,6253,54],[6840,55,6253,55],[6841,2,6254,0],[6842,2,6255,0],[6843,0,6256,0],[6844,0,6257,0],[6845,0,6258,0],[6846,0,6259,0],[6847,0,6260,0],[6848,0,6261,0],[6849,0,6262,0],[6850,0,6263,0],[6851,0,6264,0],[6852,0,6265,0],[6853,0,6266,0],[6854,0,6267,0],[6855,0,6268,0],[6856,0,6269,0],[6857,0,6270,0],[6858,0,6271,0],[6859,0,6272,0],[6860,0,6273,0],[6861,0,6274,0],[6862,0,6275,0],[6863,0,6276,0],[6864,0,6277,0],[6865,0,6278,0],[6866,0,6279,0],[6867,0,6280,0],[6868,0,6281,0],[6869,0,6282,0],[6870,0,6283,0],[6871,0,6284,0],[6872,0,6285,0],[6873,0,6286,0],[6874,0,6287,0],[6875,0,6288,0],[6876,0,6289,0],[6877,0,6290,0],[6878,0,6291,0],[6879,0,6292,0],[6880,0,6293,0],[6881,0,6294,0],[6882,0,6295,0],[6883,2,6296,0],[6883,17,6296,15,"signInWithEmailLink"],[6883,36,6296,34,"signInWithEmailLink"],[6883,37,6296,35,"auth"],[6883,41,6296,39],[6883,43,6296,41,"email"],[6883,48,6296,46],[6883,50,6296,48,"emailLink"],[6883,59,6296,57],[6883,61,6296,59],[6884,4,6297,4],[6884,8,6297,8],[6884,12,6297,8,"_isFirebaseServerApp"],[6884,24,6297,28],[6884,25,6297,28,"_isFirebaseServerApp"],[6884,45,6297,28],[6884,47,6297,29,"auth"],[6884,51,6297,33],[6884,52,6297,34,"app"],[6884,55,6297,37],[6884,56,6297,38],[6884,58,6297,40],[6885,6,6298,8],[6885,13,6298,15,"Promise"],[6885,20,6298,22],[6885,21,6298,23,"reject"],[6885,27,6298,29],[6885,28,6298,30,"_serverAppCurrentUserOperationNotSupportedError"],[6885,75,6298,77],[6885,76,6298,78,"auth"],[6885,80,6298,82],[6885,81,6298,83],[6885,82,6298,84],[6886,4,6299,4],[6887,4,6300,4],[6887,10,6300,10,"authModular"],[6887,21,6300,21],[6887,24,6300,24],[6887,28,6300,24,"getModularInstance"],[6887,41,6300,42],[6887,42,6300,42,"getModularInstance"],[6887,60,6300,42],[6887,62,6300,43,"auth"],[6887,66,6300,47],[6887,67,6300,48],[6888,4,6301,4],[6888,10,6301,10,"credential"],[6888,20,6301,20],[6888,23,6301,23,"EmailAuthProvider"],[6888,40,6301,40],[6888,41,6301,41,"credentialWithLink"],[6888,59,6301,59],[6888,60,6301,60,"email"],[6888,65,6301,65],[6888,67,6301,67,"emailLink"],[6888,76,6301,76],[6888,80,6301,80,"_getCurrentUrl"],[6888,94,6301,94],[6888,95,6301,95],[6888,96,6301,96],[6888,97,6301,97],[6889,4,6302,4],[6890,4,6303,4],[6891,4,6304,4,"_assert"],[6891,11,6304,11],[6891,12,6304,12,"credential"],[6891,22,6304,22],[6891,23,6304,23,"_tenantId"],[6891,32,6304,32],[6891,38,6304,38,"authModular"],[6891,49,6304,49],[6891,50,6304,50,"tenantId"],[6891,58,6304,58],[6891,62,6304,62],[6891,66,6304,66],[6891,67,6304,67],[6891,69,6304,69,"authModular"],[6891,80,6304,80],[6891,82,6304,82],[6891,102,6304,102],[6891,103,6304,103],[6891,141,6304,141],[6891,142,6304,142],[6892,4,6305,4],[6892,11,6305,11,"signInWithCredential"],[6892,31,6305,31],[6892,32,6305,32,"authModular"],[6892,43,6305,43],[6892,45,6305,45,"credential"],[6892,55,6305,55],[6892,56,6305,56],[6893,2,6306,0],[6895,2,6308,0],[6896,0,6309,0],[6897,0,6310,0],[6898,0,6311,0],[6899,0,6312,0],[6900,0,6313,0],[6901,0,6314,0],[6902,0,6315,0],[6903,0,6316,0],[6904,0,6317,0],[6905,0,6318,0],[6906,0,6319,0],[6907,0,6320,0],[6908,0,6321,0],[6909,0,6322,0],[6910,0,6323,0],[6911,2,6324,0],[6911,17,6324,15,"createAuthUri"],[6911,30,6324,28,"createAuthUri"],[6911,31,6324,29,"auth"],[6911,35,6324,33],[6911,37,6324,35,"request"],[6911,44,6324,42],[6911,46,6324,44],[6912,4,6325,4],[6912,11,6325,11,"_performApiRequest"],[6912,29,6325,29],[6912,30,6325,30,"auth"],[6912,34,6325,34],[6912,36,6325,36],[6912,42,6325,42],[6912,43,6325,43],[6912,66,6325,66],[6912,94,6325,94],[6912,95,6325,95],[6912,127,6325,127,"_addTidIfNecessary"],[6912,145,6325,145],[6912,146,6325,146,"auth"],[6912,150,6325,150],[6912,152,6325,152,"request"],[6912,159,6325,159],[6912,160,6325,160],[6912,161,6325,161],[6913,2,6326,0],[6915,2,6328,0],[6916,0,6329,0],[6917,0,6330,0],[6918,0,6331,0],[6919,0,6332,0],[6920,0,6333,0],[6921,0,6334,0],[6922,0,6335,0],[6923,0,6336,0],[6924,0,6337,0],[6925,0,6338,0],[6926,0,6339,0],[6927,0,6340,0],[6928,0,6341,0],[6929,0,6342,0],[6930,0,6343,0],[6931,2,6344,0],[6932,0,6345,0],[6933,0,6346,0],[6934,0,6347,0],[6935,0,6348,0],[6936,0,6349,0],[6937,0,6350,0],[6938,0,6351,0],[6939,0,6352,0],[6940,0,6353,0],[6941,0,6354,0],[6942,0,6355,0],[6943,0,6356,0],[6944,0,6357,0],[6945,0,6358,0],[6946,0,6359,0],[6947,0,6360,0],[6948,0,6361,0],[6949,0,6362,0],[6950,0,6363,0],[6951,2,6364,0],[6951,17,6364,15,"fetchSignInMethodsForEmail"],[6951,43,6364,41,"fetchSignInMethodsForEmail"],[6951,44,6364,42,"auth"],[6951,48,6364,46],[6951,50,6364,48,"email"],[6951,55,6364,53],[6951,57,6364,55],[6952,4,6365,4],[6953,4,6366,4],[6954,4,6367,4],[6955,4,6368,4],[6955,10,6368,10,"continueUri"],[6955,21,6368,21],[6955,24,6368,24,"_isHttpOrHttps"],[6955,38,6368,38],[6955,39,6368,39],[6955,40,6368,40],[6955,43,6368,43,"_getCurrentUrl"],[6955,57,6368,57],[6955,58,6368,58],[6955,59,6368,59],[6955,62,6368,62],[6955,80,6368,80],[6956,4,6369,4],[6956,10,6369,10,"request"],[6956,17,6369,17],[6956,20,6369,20],[6957,6,6370,8,"identifier"],[6957,16,6370,18],[6957,18,6370,20,"email"],[6957,23,6370,25],[6958,6,6371,8,"continueUri"],[6959,4,6372,4],[6959,5,6372,5],[6960,4,6373,4],[6960,10,6373,10],[6961,6,6373,12,"signinMethods"],[6962,4,6373,26],[6962,5,6373,27],[6962,8,6373,30],[6962,14,6373,36,"createAuthUri"],[6962,27,6373,49],[6962,28,6373,50],[6962,32,6373,50,"getModularInstance"],[6962,45,6373,68],[6962,46,6373,68,"getModularInstance"],[6962,64,6373,68],[6962,66,6373,69,"auth"],[6962,70,6373,73],[6962,71,6373,74],[6962,73,6373,76,"request"],[6962,80,6373,83],[6962,81,6373,84],[6963,4,6374,4],[6963,11,6374,11,"signinMethods"],[6963,24,6374,24],[6963,28,6374,28],[6963,30,6374,30],[6964,2,6375,0],[6965,2,6376,0],[6966,0,6377,0],[6967,0,6378,0],[6968,0,6379,0],[6969,0,6380,0],[6970,0,6381,0],[6971,0,6382,0],[6972,0,6383,0],[6973,0,6384,0],[6974,0,6385,0],[6975,0,6386,0],[6976,0,6387,0],[6977,0,6388,0],[6978,0,6389,0],[6979,0,6390,0],[6980,0,6391,0],[6981,0,6392,0],[6982,0,6393,0],[6983,0,6394,0],[6984,0,6395,0],[6985,0,6396,0],[6986,0,6397,0],[6987,0,6398,0],[6988,0,6399,0],[6989,0,6400,0],[6990,0,6401,0],[6991,0,6402,0],[6992,0,6403,0],[6993,0,6404,0],[6994,0,6405,0],[6995,2,6406,0],[6995,17,6406,15,"sendEmailVerification"],[6995,38,6406,36,"sendEmailVerification"],[6995,39,6406,37,"user"],[6995,43,6406,41],[6995,45,6406,43,"actionCodeSettings"],[6995,63,6406,61],[6995,65,6406,63],[6996,4,6407,4],[6996,10,6407,10,"userInternal"],[6996,22,6407,22],[6996,25,6407,25],[6996,29,6407,25,"getModularInstance"],[6996,42,6407,43],[6996,43,6407,43,"getModularInstance"],[6996,61,6407,43],[6996,63,6407,44,"user"],[6996,67,6407,48],[6996,68,6407,49],[6997,4,6408,4],[6997,10,6408,10,"idToken"],[6997,17,6408,17],[6997,20,6408,20],[6997,26,6408,26,"user"],[6997,30,6408,30],[6997,31,6408,31,"getIdToken"],[6997,41,6408,41],[6997,42,6408,42],[6997,43,6408,43],[6998,4,6409,4],[6998,10,6409,10,"request"],[6998,17,6409,17],[6998,20,6409,20],[6999,6,6410,8,"requestType"],[6999,17,6410,19],[6999,19,6410,21],[6999,33,6410,35],[6999,34,6410,36],[7000,6,6411,8,"idToken"],[7001,4,6412,4],[7001,5,6412,5],[7002,4,6413,4],[7002,8,6413,8,"actionCodeSettings"],[7002,26,6413,26],[7002,28,6413,28],[7003,6,6414,8,"_setActionCodeSettingsOnRequest"],[7003,37,6414,39],[7003,38,6414,40,"userInternal"],[7003,50,6414,52],[7003,51,6414,53,"auth"],[7003,55,6414,57],[7003,57,6414,59,"request"],[7003,64,6414,66],[7003,66,6414,68,"actionCodeSettings"],[7003,84,6414,86],[7003,85,6414,87],[7004,4,6415,4],[7005,4,6416,4],[7005,10,6416,10],[7006,6,6416,12,"email"],[7007,4,6416,18],[7007,5,6416,19],[7007,8,6416,22],[7007,14,6416,28,"sendEmailVerification$1"],[7007,37,6416,51],[7007,38,6416,52,"userInternal"],[7007,50,6416,64],[7007,51,6416,65,"auth"],[7007,55,6416,69],[7007,57,6416,71,"request"],[7007,64,6416,78],[7007,65,6416,79],[7008,4,6417,4],[7008,8,6417,8,"email"],[7008,13,6417,13],[7008,18,6417,18,"user"],[7008,22,6417,22],[7008,23,6417,23,"email"],[7008,28,6417,28],[7008,30,6417,30],[7009,6,6418,8],[7009,12,6418,14,"user"],[7009,16,6418,18],[7009,17,6418,19,"reload"],[7009,23,6418,25],[7009,24,6418,26],[7009,25,6418,27],[7010,4,6419,4],[7011,2,6420,0],[7012,2,6421,0],[7013,0,6422,0],[7014,0,6423,0],[7015,0,6424,0],[7016,0,6425,0],[7017,0,6426,0],[7018,0,6427,0],[7019,0,6428,0],[7020,0,6429,0],[7021,0,6430,0],[7022,0,6431,0],[7023,0,6432,0],[7024,0,6433,0],[7025,0,6434,0],[7026,0,6435,0],[7027,0,6436,0],[7028,0,6437,0],[7029,0,6438,0],[7030,0,6439,0],[7031,0,6440,0],[7032,0,6441,0],[7033,0,6442,0],[7034,0,6443,0],[7035,0,6444,0],[7036,0,6445,0],[7037,0,6446,0],[7038,0,6447,0],[7039,0,6448,0],[7040,0,6449,0],[7041,0,6450,0],[7042,0,6451,0],[7043,0,6452,0],[7044,0,6453,0],[7045,0,6454,0],[7046,2,6455,0],[7046,17,6455,15,"verifyBeforeUpdateEmail"],[7046,40,6455,38,"verifyBeforeUpdateEmail"],[7046,41,6455,39,"user"],[7046,45,6455,43],[7046,47,6455,45,"newEmail"],[7046,55,6455,53],[7046,57,6455,55,"actionCodeSettings"],[7046,75,6455,73],[7046,77,6455,75],[7047,4,6456,4],[7047,10,6456,10,"userInternal"],[7047,22,6456,22],[7047,25,6456,25],[7047,29,6456,25,"getModularInstance"],[7047,42,6456,43],[7047,43,6456,43,"getModularInstance"],[7047,61,6456,43],[7047,63,6456,44,"user"],[7047,67,6456,48],[7047,68,6456,49],[7048,4,6457,4],[7048,10,6457,10,"idToken"],[7048,17,6457,17],[7048,20,6457,20],[7048,26,6457,26,"user"],[7048,30,6457,30],[7048,31,6457,31,"getIdToken"],[7048,41,6457,41],[7048,42,6457,42],[7048,43,6457,43],[7049,4,6458,4],[7049,10,6458,10,"request"],[7049,17,6458,17],[7049,20,6458,20],[7050,6,6459,8,"requestType"],[7050,17,6459,19],[7050,19,6459,21],[7050,44,6459,46],[7050,45,6459,47],[7051,6,6460,8,"idToken"],[7051,13,6460,15],[7052,6,6461,8,"newEmail"],[7053,4,6462,4],[7053,5,6462,5],[7054,4,6463,4],[7054,8,6463,8,"actionCodeSettings"],[7054,26,6463,26],[7054,28,6463,28],[7055,6,6464,8,"_setActionCodeSettingsOnRequest"],[7055,37,6464,39],[7055,38,6464,40,"userInternal"],[7055,50,6464,52],[7055,51,6464,53,"auth"],[7055,55,6464,57],[7055,57,6464,59,"request"],[7055,64,6464,66],[7055,66,6464,68,"actionCodeSettings"],[7055,84,6464,86],[7055,85,6464,87],[7056,4,6465,4],[7057,4,6466,4],[7057,10,6466,10],[7058,6,6466,12,"email"],[7059,4,6466,18],[7059,5,6466,19],[7059,8,6466,22],[7059,14,6466,28,"verifyAndChangeEmail"],[7059,34,6466,48],[7059,35,6466,49,"userInternal"],[7059,47,6466,61],[7059,48,6466,62,"auth"],[7059,52,6466,66],[7059,54,6466,68,"request"],[7059,61,6466,75],[7059,62,6466,76],[7060,4,6467,4],[7060,8,6467,8,"email"],[7060,13,6467,13],[7060,18,6467,18,"user"],[7060,22,6467,22],[7060,23,6467,23,"email"],[7060,28,6467,28],[7060,30,6467,30],[7061,6,6468,8],[7062,6,6469,8],[7063,6,6470,8],[7063,12,6470,14,"user"],[7063,16,6470,18],[7063,17,6470,19,"reload"],[7063,23,6470,25],[7063,24,6470,26],[7063,25,6470,27],[7064,4,6471,4],[7065,2,6472,0],[7067,2,6474,0],[7068,0,6475,0],[7069,0,6476,0],[7070,0,6477,0],[7071,0,6478,0],[7072,0,6479,0],[7073,0,6480,0],[7074,0,6481,0],[7075,0,6482,0],[7076,0,6483,0],[7077,0,6484,0],[7078,0,6485,0],[7079,0,6486,0],[7080,0,6487,0],[7081,0,6488,0],[7082,0,6489,0],[7083,2,6490,0],[7083,17,6490,15,"updateProfile$1"],[7083,32,6490,30,"updateProfile$1"],[7083,33,6490,31,"auth"],[7083,37,6490,35],[7083,39,6490,37,"request"],[7083,46,6490,44],[7083,48,6490,46],[7084,4,6491,4],[7084,11,6491,11,"_performApiRequest"],[7084,29,6491,29],[7084,30,6491,30,"auth"],[7084,34,6491,34],[7084,36,6491,36],[7084,42,6491,42],[7084,43,6491,43],[7084,66,6491,66],[7084,87,6491,87],[7084,88,6491,88],[7084,121,6491,121,"request"],[7084,128,6491,128],[7084,129,6491,129],[7085,2,6492,0],[7087,2,6494,0],[7088,0,6495,0],[7089,0,6496,0],[7090,0,6497,0],[7091,0,6498,0],[7092,0,6499,0],[7093,0,6500,0],[7094,0,6501,0],[7095,0,6502,0],[7096,0,6503,0],[7097,0,6504,0],[7098,0,6505,0],[7099,0,6506,0],[7100,0,6507,0],[7101,0,6508,0],[7102,0,6509,0],[7103,2,6510,0],[7104,0,6511,0],[7105,0,6512,0],[7106,0,6513,0],[7107,0,6514,0],[7108,0,6515,0],[7109,0,6516,0],[7110,0,6517,0],[7111,2,6518,0],[7111,17,6518,15,"updateProfile"],[7111,30,6518,28,"updateProfile"],[7111,31,6518,29,"user"],[7111,35,6518,33],[7111,37,6518,35],[7112,4,6518,37,"displayName"],[7112,15,6518,48],[7113,4,6518,50,"photoURL"],[7113,12,6518,58],[7113,14,6518,60,"photoUrl"],[7114,2,6518,69],[7114,3,6518,70],[7114,5,6518,72],[7115,4,6519,4],[7115,8,6519,8,"displayName"],[7115,19,6519,19],[7115,24,6519,24,"undefined"],[7115,33,6519,33],[7115,37,6519,37,"photoUrl"],[7115,45,6519,45],[7115,50,6519,50,"undefined"],[7115,59,6519,59],[7115,61,6519,61],[7116,6,6520,8],[7117,4,6521,4],[7118,4,6522,4],[7118,10,6522,10,"userInternal"],[7118,22,6522,22],[7118,25,6522,25],[7118,29,6522,25,"getModularInstance"],[7118,42,6522,43],[7118,43,6522,43,"getModularInstance"],[7118,61,6522,43],[7118,63,6522,44,"user"],[7118,67,6522,48],[7118,68,6522,49],[7119,4,6523,4],[7119,10,6523,10,"idToken"],[7119,17,6523,17],[7119,20,6523,20],[7119,26,6523,26,"userInternal"],[7119,38,6523,38],[7119,39,6523,39,"getIdToken"],[7119,49,6523,49],[7119,50,6523,50],[7119,51,6523,51],[7120,4,6524,4],[7120,10,6524,10,"profileRequest"],[7120,24,6524,24],[7120,27,6524,27],[7121,6,6525,8,"idToken"],[7121,13,6525,15],[7122,6,6526,8,"displayName"],[7122,17,6526,19],[7123,6,6527,8,"photoUrl"],[7123,14,6527,16],[7124,6,6528,8,"returnSecureToken"],[7124,23,6528,25],[7124,25,6528,27],[7125,4,6529,4],[7125,5,6529,5],[7126,4,6530,4],[7126,10,6530,10,"response"],[7126,18,6530,18],[7126,21,6530,21],[7126,27,6530,27,"_logoutIfInvalidated"],[7126,47,6530,47],[7126,48,6530,48,"userInternal"],[7126,60,6530,60],[7126,62,6530,62,"updateProfile$1"],[7126,77,6530,77],[7126,78,6530,78,"userInternal"],[7126,90,6530,90],[7126,91,6530,91,"auth"],[7126,95,6530,95],[7126,97,6530,97,"profileRequest"],[7126,111,6530,111],[7126,112,6530,112],[7126,113,6530,113],[7127,4,6531,4,"userInternal"],[7127,16,6531,16],[7127,17,6531,17,"displayName"],[7127,28,6531,28],[7127,31,6531,31,"response"],[7127,39,6531,39],[7127,40,6531,40,"displayName"],[7127,51,6531,51],[7127,55,6531,55],[7127,59,6531,59],[7128,4,6532,4,"userInternal"],[7128,16,6532,16],[7128,17,6532,17,"photoURL"],[7128,25,6532,25],[7128,28,6532,28,"response"],[7128,36,6532,36],[7128,37,6532,37,"photoUrl"],[7128,45,6532,45],[7128,49,6532,49],[7128,53,6532,53],[7129,4,6533,4],[7130,4,6534,4],[7130,10,6534,10,"passwordProvider"],[7130,26,6534,26],[7130,29,6534,29,"userInternal"],[7130,41,6534,41],[7130,42,6534,42,"providerData"],[7130,54,6534,54],[7130,55,6534,55,"find"],[7130,59,6534,59],[7130,60,6534,60],[7130,61,6534,61],[7131,6,6534,63,"providerId"],[7132,4,6534,74],[7132,5,6534,75],[7132,10,6534,80,"providerId"],[7132,20,6534,90],[7132,25,6534,95],[7132,35,6534,105],[7132,36,6534,106],[7132,61,6534,131],[7132,62,6534,132],[7133,4,6535,4],[7133,8,6535,8,"passwordProvider"],[7133,24,6535,24],[7133,26,6535,26],[7134,6,6536,8,"passwordProvider"],[7134,22,6536,24],[7134,23,6536,25,"displayName"],[7134,34,6536,36],[7134,37,6536,39,"userInternal"],[7134,49,6536,51],[7134,50,6536,52,"displayName"],[7134,61,6536,63],[7135,6,6537,8,"passwordProvider"],[7135,22,6537,24],[7135,23,6537,25,"photoURL"],[7135,31,6537,33],[7135,34,6537,36,"userInternal"],[7135,46,6537,48],[7135,47,6537,49,"photoURL"],[7135,55,6537,57],[7136,4,6538,4],[7137,4,6539,4],[7137,10,6539,10,"userInternal"],[7137,22,6539,22],[7137,23,6539,23,"_updateTokensIfNecessary"],[7137,47,6539,47],[7137,48,6539,48,"response"],[7137,56,6539,56],[7137,57,6539,57],[7138,2,6540,0],[7139,2,6541,0],[7140,0,6542,0],[7141,0,6543,0],[7142,0,6544,0],[7143,0,6545,0],[7144,0,6546,0],[7145,0,6547,0],[7146,0,6548,0],[7147,0,6549,0],[7148,0,6550,0],[7149,0,6551,0],[7150,0,6552,0],[7151,0,6553,0],[7152,0,6554,0],[7153,0,6555,0],[7154,0,6556,0],[7155,0,6557,0],[7156,0,6558,0],[7157,0,6559,0],[7158,0,6560,0],[7159,0,6561,0],[7160,0,6562,0],[7161,0,6563,0],[7162,0,6564,0],[7163,2,6565,0],[7163,11,6565,9,"updateEmail"],[7163,22,6565,20,"updateEmail"],[7163,23,6565,21,"user"],[7163,27,6565,25],[7163,29,6565,27,"newEmail"],[7163,37,6565,35],[7163,39,6565,37],[7164,4,6566,4],[7164,10,6566,10,"userInternal"],[7164,22,6566,22],[7164,25,6566,25],[7164,29,6566,25,"getModularInstance"],[7164,42,6566,43],[7164,43,6566,43,"getModularInstance"],[7164,61,6566,43],[7164,63,6566,44,"user"],[7164,67,6566,48],[7164,68,6566,49],[7165,4,6567,4],[7165,8,6567,8],[7165,12,6567,8,"_isFirebaseServerApp"],[7165,24,6567,28],[7165,25,6567,28,"_isFirebaseServerApp"],[7165,45,6567,28],[7165,47,6567,29,"userInternal"],[7165,59,6567,41],[7165,60,6567,42,"auth"],[7165,64,6567,46],[7165,65,6567,47,"app"],[7165,68,6567,50],[7165,69,6567,51],[7165,71,6567,53],[7166,6,6568,8],[7166,13,6568,15,"Promise"],[7166,20,6568,22],[7166,21,6568,23,"reject"],[7166,27,6568,29],[7166,28,6568,30,"_serverAppCurrentUserOperationNotSupportedError"],[7166,75,6568,77],[7166,76,6568,78,"userInternal"],[7166,88,6568,90],[7166,89,6568,91,"auth"],[7166,93,6568,95],[7166,94,6568,96],[7166,95,6568,97],[7167,4,6569,4],[7168,4,6570,4],[7168,11,6570,11,"updateEmailOrPassword"],[7168,32,6570,32],[7168,33,6570,33,"userInternal"],[7168,45,6570,45],[7168,47,6570,47,"newEmail"],[7168,55,6570,55],[7168,57,6570,57],[7168,61,6570,61],[7168,62,6570,62],[7169,2,6571,0],[7170,2,6572,0],[7171,0,6573,0],[7172,0,6574,0],[7173,0,6575,0],[7174,0,6576,0],[7175,0,6577,0],[7176,0,6578,0],[7177,0,6579,0],[7178,0,6580,0],[7179,0,6581,0],[7180,0,6582,0],[7181,0,6583,0],[7182,0,6584,0],[7183,2,6585,0],[7183,11,6585,9,"updatePassword"],[7183,25,6585,23,"updatePassword"],[7183,26,6585,24,"user"],[7183,30,6585,28],[7183,32,6585,30,"newPassword"],[7183,43,6585,41],[7183,45,6585,43],[7184,4,6586,4],[7184,11,6586,11,"updateEmailOrPassword"],[7184,32,6586,32],[7184,33,6586,33],[7184,37,6586,33,"getModularInstance"],[7184,50,6586,51],[7184,51,6586,51,"getModularInstance"],[7184,69,6586,51],[7184,71,6586,52,"user"],[7184,75,6586,56],[7184,76,6586,57],[7184,78,6586,59],[7184,82,6586,63],[7184,84,6586,65,"newPassword"],[7184,95,6586,76],[7184,96,6586,77],[7185,2,6587,0],[7186,2,6588,0],[7186,17,6588,15,"updateEmailOrPassword"],[7186,38,6588,36,"updateEmailOrPassword"],[7186,39,6588,37,"user"],[7186,43,6588,41],[7186,45,6588,43,"email"],[7186,50,6588,48],[7186,52,6588,50,"password"],[7186,60,6588,58],[7186,62,6588,60],[7187,4,6589,4],[7187,10,6589,10],[7188,6,6589,12,"auth"],[7189,4,6589,17],[7189,5,6589,18],[7189,8,6589,21,"user"],[7189,12,6589,25],[7190,4,6590,4],[7190,10,6590,10,"idToken"],[7190,17,6590,17],[7190,20,6590,20],[7190,26,6590,26,"user"],[7190,30,6590,30],[7190,31,6590,31,"getIdToken"],[7190,41,6590,41],[7190,42,6590,42],[7190,43,6590,43],[7191,4,6591,4],[7191,10,6591,10,"request"],[7191,17,6591,17],[7191,20,6591,20],[7192,6,6592,8,"idToken"],[7192,13,6592,15],[7193,6,6593,8,"returnSecureToken"],[7193,23,6593,25],[7193,25,6593,27],[7194,4,6594,4],[7194,5,6594,5],[7195,4,6595,4],[7195,8,6595,8,"email"],[7195,13,6595,13],[7195,15,6595,15],[7196,6,6596,8,"request"],[7196,13,6596,15],[7196,14,6596,16,"email"],[7196,19,6596,21],[7196,22,6596,24,"email"],[7196,27,6596,29],[7197,4,6597,4],[7198,4,6598,4],[7198,8,6598,8,"password"],[7198,16,6598,16],[7198,18,6598,18],[7199,6,6599,8,"request"],[7199,13,6599,15],[7199,14,6599,16,"password"],[7199,22,6599,24],[7199,25,6599,27,"password"],[7199,33,6599,35],[7200,4,6600,4],[7201,4,6601,4],[7201,10,6601,10,"response"],[7201,18,6601,18],[7201,21,6601,21],[7201,27,6601,27,"_logoutIfInvalidated"],[7201,47,6601,47],[7201,48,6601,48,"user"],[7201,52,6601,52],[7201,54,6601,54,"updateEmailPassword"],[7201,73,6601,73],[7201,74,6601,74,"auth"],[7201,78,6601,78],[7201,80,6601,80,"request"],[7201,87,6601,87],[7201,88,6601,88],[7201,89,6601,89],[7202,4,6602,4],[7202,10,6602,10,"user"],[7202,14,6602,14],[7202,15,6602,15,"_updateTokensIfNecessary"],[7202,39,6602,39],[7202,40,6602,40,"response"],[7202,48,6602,48],[7202,50,6602,50],[7202,62,6602,63],[7202,66,6602,67],[7202,67,6602,68],[7203,2,6603,0],[7205,2,6605,0],[7206,0,6606,0],[7207,0,6607,0],[7208,0,6608,0],[7209,0,6609,0],[7210,0,6610,0],[7211,0,6611,0],[7212,0,6612,0],[7213,0,6613,0],[7214,0,6614,0],[7215,0,6615,0],[7216,0,6616,0],[7217,0,6617,0],[7218,0,6618,0],[7219,0,6619,0],[7220,0,6620,0],[7221,2,6621,0],[7222,0,6622,0],[7223,0,6623,0],[7224,0,6624,0],[7225,2,6625,0],[7225,11,6625,9,"_fromIdTokenResponse"],[7225,31,6625,29,"_fromIdTokenResponse"],[7225,32,6625,30,"idTokenResponse"],[7225,47,6625,45],[7225,49,6625,47],[7226,4,6626,4],[7226,8,6626,8],[7226,9,6626,9,"idTokenResponse"],[7226,24,6626,24],[7226,26,6626,26],[7227,6,6627,8],[7227,13,6627,15],[7227,17,6627,19],[7228,4,6628,4],[7229,4,6629,4],[7229,10,6629,10],[7230,6,6629,12,"providerId"],[7231,4,6629,23],[7231,5,6629,24],[7231,8,6629,27,"idTokenResponse"],[7231,23,6629,42],[7232,4,6630,4],[7232,10,6630,10,"profile"],[7232,17,6630,17],[7232,20,6630,20,"idTokenResponse"],[7232,35,6630,35],[7232,36,6630,36,"rawUserInfo"],[7232,47,6630,47],[7232,50,6631,10,"JSON"],[7232,54,6631,14],[7232,55,6631,15,"parse"],[7232,60,6631,20],[7232,61,6631,21,"idTokenResponse"],[7232,76,6631,36],[7232,77,6631,37,"rawUserInfo"],[7232,88,6631,48],[7232,89,6631,49],[7232,92,6632,10],[7232,93,6632,11],[7232,94,6632,12],[7233,4,6633,4],[7233,10,6633,10,"isNewUser"],[7233,19,6633,19],[7233,22,6633,22,"idTokenResponse"],[7233,37,6633,37],[7233,38,6633,38,"isNewUser"],[7233,47,6633,47],[7233,51,6634,8,"idTokenResponse"],[7233,66,6634,23],[7233,67,6634,24,"kind"],[7233,71,6634,28],[7233,76,6634,33],[7233,115,6634,72],[7233,116,6634,73],[7234,4,6635,4],[7234,8,6635,8],[7234,9,6635,9,"providerId"],[7234,19,6635,19],[7234,23,6635,23,"idTokenResponse"],[7234,38,6635,38],[7234,40,6635,40,"idToken"],[7234,47,6635,47],[7234,49,6635,49],[7235,6,6636,8],[7235,12,6636,14,"signInProvider"],[7235,26,6636,28],[7235,29,6636,31,"_parseToken"],[7235,40,6636,42],[7235,41,6636,43,"idTokenResponse"],[7235,56,6636,58],[7235,57,6636,59,"idToken"],[7235,64,6636,66],[7235,65,6636,67],[7235,67,6636,69,"firebase"],[7235,75,6636,77],[7235,78,6636,80],[7235,96,6636,98],[7235,97,6636,99],[7236,6,6637,8],[7236,10,6637,12,"signInProvider"],[7236,24,6637,26],[7236,26,6637,28],[7237,8,6638,12],[7237,14,6638,18,"filteredProviderId"],[7237,32,6638,36],[7237,35,6638,39,"signInProvider"],[7237,49,6638,53],[7237,54,6638,58],[7237,65,6638,69],[7237,66,6638,70],[7237,96,6639,16,"signInProvider"],[7237,110,6639,30],[7237,115,6639,35],[7237,123,6639,43],[7237,124,6639,44],[7237,150,6640,18,"signInProvider"],[7237,164,6640,32],[7237,167,6641,18],[7237,171,6641,22],[7238,8,6642,12],[7239,8,6643,12],[7239,15,6643,19],[7239,19,6643,23,"GenericAdditionalUserInfo"],[7239,44,6643,48],[7239,45,6643,49,"isNewUser"],[7239,54,6643,58],[7239,56,6643,60,"filteredProviderId"],[7239,74,6643,78],[7239,75,6643,79],[7240,6,6644,8],[7241,4,6645,4],[7242,4,6646,4],[7242,8,6646,8],[7242,9,6646,9,"providerId"],[7242,19,6646,19],[7242,21,6646,21],[7243,6,6647,8],[7243,13,6647,15],[7243,17,6647,19],[7244,4,6648,4],[7245,4,6649,4],[7245,12,6649,12,"providerId"],[7245,22,6649,22],[7246,6,6650,8],[7246,11,6650,13],[7246,25,6650,27],[7246,26,6650,28],[7247,8,6651,12],[7247,15,6651,19],[7247,19,6651,23,"FacebookAdditionalUserInfo"],[7247,45,6651,49],[7247,46,6651,50,"isNewUser"],[7247,55,6651,59],[7247,57,6651,61,"profile"],[7247,64,6651,68],[7247,65,6651,69],[7248,6,6652,8],[7248,11,6652,13],[7248,23,6652,25],[7248,24,6652,26],[7249,8,6653,12],[7249,15,6653,19],[7249,19,6653,23,"GithubAdditionalUserInfo"],[7249,43,6653,47],[7249,44,6653,48,"isNewUser"],[7249,53,6653,57],[7249,55,6653,59,"profile"],[7249,62,6653,66],[7249,63,6653,67],[7250,6,6654,8],[7250,11,6654,13],[7250,23,6654,25],[7250,24,6654,26],[7251,8,6655,12],[7251,15,6655,19],[7251,19,6655,23,"GoogleAdditionalUserInfo"],[7251,43,6655,47],[7251,44,6655,48,"isNewUser"],[7251,53,6655,57],[7251,55,6655,59,"profile"],[7251,62,6655,66],[7251,63,6655,67],[7252,6,6656,8],[7252,11,6656,13],[7252,24,6656,26],[7252,25,6656,27],[7253,8,6657,12],[7253,15,6657,19],[7253,19,6657,23,"TwitterAdditionalUserInfo"],[7253,44,6657,48],[7253,45,6657,49,"isNewUser"],[7253,54,6657,58],[7253,56,6657,60,"profile"],[7253,63,6657,67],[7253,65,6657,69,"idTokenResponse"],[7253,80,6657,84],[7253,81,6657,85,"screenName"],[7253,91,6657,95],[7253,95,6657,99],[7253,99,6657,103],[7253,100,6657,104],[7254,6,6658,8],[7254,11,6658,13],[7254,19,6658,21],[7254,20,6658,22],[7255,6,6659,8],[7255,11,6659,13],[7255,22,6659,24],[7255,23,6659,25],[7256,8,6660,12],[7256,15,6660,19],[7256,19,6660,23,"GenericAdditionalUserInfo"],[7256,44,6660,48],[7256,45,6660,49,"isNewUser"],[7256,54,6660,58],[7256,56,6660,60],[7256,60,6660,64],[7256,61,6660,65],[7257,6,6661,8],[7258,8,6662,12],[7258,15,6662,19],[7258,19,6662,23,"GenericAdditionalUserInfo"],[7258,44,6662,48],[7258,45,6662,49,"isNewUser"],[7258,54,6662,58],[7258,56,6662,60,"providerId"],[7258,66,6662,70],[7258,68,6662,72,"profile"],[7258,75,6662,79],[7258,76,6662,80],[7259,4,6663,4],[7260,2,6664,0],[7261,2,6665,0],[7261,8,6665,6,"GenericAdditionalUserInfo"],[7261,33,6665,31],[7261,34,6665,32],[7262,4,6666,4,"constructor"],[7262,15,6666,15,"constructor"],[7262,16,6666,16,"isNewUser"],[7262,25,6666,25],[7262,27,6666,27,"providerId"],[7262,37,6666,37],[7262,39,6666,39,"profile"],[7262,46,6666,46],[7262,49,6666,49],[7262,50,6666,50],[7262,51,6666,51],[7262,53,6666,53],[7263,6,6667,8],[7263,10,6667,12],[7263,11,6667,13,"isNewUser"],[7263,20,6667,22],[7263,23,6667,25,"isNewUser"],[7263,32,6667,34],[7264,6,6668,8],[7264,10,6668,12],[7264,11,6668,13,"providerId"],[7264,21,6668,23],[7264,24,6668,26,"providerId"],[7264,34,6668,36],[7265,6,6669,8],[7265,10,6669,12],[7265,11,6669,13,"profile"],[7265,18,6669,20],[7265,21,6669,23,"profile"],[7265,28,6669,30],[7266,4,6670,4],[7267,2,6671,0],[7268,2,6672,0],[7268,8,6672,6,"FederatedAdditionalUserInfoWithUsername"],[7268,47,6672,45],[7268,56,6672,54,"GenericAdditionalUserInfo"],[7268,81,6672,79],[7268,82,6672,80],[7269,4,6673,4,"constructor"],[7269,15,6673,15,"constructor"],[7269,16,6673,16,"isNewUser"],[7269,25,6673,25],[7269,27,6673,27,"providerId"],[7269,37,6673,37],[7269,39,6673,39,"profile"],[7269,46,6673,46],[7269,48,6673,48,"username"],[7269,56,6673,56],[7269,58,6673,58],[7270,6,6674,8],[7270,11,6674,13],[7270,12,6674,14,"isNewUser"],[7270,21,6674,23],[7270,23,6674,25,"providerId"],[7270,33,6674,35],[7270,35,6674,37,"profile"],[7270,42,6674,44],[7270,43,6674,45],[7271,6,6675,8],[7271,10,6675,12],[7271,11,6675,13,"username"],[7271,19,6675,21],[7271,22,6675,24,"username"],[7271,30,6675,32],[7272,4,6676,4],[7273,2,6677,0],[7274,2,6678,0],[7274,8,6678,6,"FacebookAdditionalUserInfo"],[7274,34,6678,32],[7274,43,6678,41,"GenericAdditionalUserInfo"],[7274,68,6678,66],[7274,69,6678,67],[7275,4,6679,4,"constructor"],[7275,15,6679,15,"constructor"],[7275,16,6679,16,"isNewUser"],[7275,25,6679,25],[7275,27,6679,27,"profile"],[7275,34,6679,34],[7275,36,6679,36],[7276,6,6680,8],[7276,11,6680,13],[7276,12,6680,14,"isNewUser"],[7276,21,6680,23],[7276,23,6680,25],[7276,37,6680,39],[7276,38,6680,40],[7276,65,6680,67,"profile"],[7276,72,6680,74],[7276,73,6680,75],[7277,4,6681,4],[7278,2,6682,0],[7279,2,6683,0],[7279,8,6683,6,"GithubAdditionalUserInfo"],[7279,32,6683,30],[7279,41,6683,39,"FederatedAdditionalUserInfoWithUsername"],[7279,80,6683,78],[7279,81,6683,79],[7280,4,6684,4,"constructor"],[7280,15,6684,15,"constructor"],[7280,16,6684,16,"isNewUser"],[7280,25,6684,25],[7280,27,6684,27,"profile"],[7280,34,6684,34],[7280,36,6684,36],[7281,6,6685,8],[7281,11,6685,13],[7281,12,6685,14,"isNewUser"],[7281,21,6685,23],[7281,23,6685,25],[7281,35,6685,37],[7281,36,6685,38],[7281,61,6685,63,"profile"],[7281,68,6685,70],[7281,70,6685,72],[7281,77,6685,79,"profile"],[7281,84,6685,86],[7281,86,6685,88,"login"],[7281,91,6685,93],[7281,96,6685,98],[7281,104,6685,106],[7281,107,6685,109,"profile"],[7281,114,6685,116],[7281,116,6685,118,"login"],[7281,121,6685,123],[7281,124,6685,126],[7281,128,6685,130],[7281,129,6685,131],[7282,4,6686,4],[7283,2,6687,0],[7284,2,6688,0],[7284,8,6688,6,"GoogleAdditionalUserInfo"],[7284,32,6688,30],[7284,41,6688,39,"GenericAdditionalUserInfo"],[7284,66,6688,64],[7284,67,6688,65],[7285,4,6689,4,"constructor"],[7285,15,6689,15,"constructor"],[7285,16,6689,16,"isNewUser"],[7285,25,6689,25],[7285,27,6689,27,"profile"],[7285,34,6689,34],[7285,36,6689,36],[7286,6,6690,8],[7286,11,6690,13],[7286,12,6690,14,"isNewUser"],[7286,21,6690,23],[7286,23,6690,25],[7286,35,6690,37],[7286,36,6690,38],[7286,61,6690,63,"profile"],[7286,68,6690,70],[7286,69,6690,71],[7287,4,6691,4],[7288,2,6692,0],[7289,2,6693,0],[7289,8,6693,6,"TwitterAdditionalUserInfo"],[7289,33,6693,31],[7289,42,6693,40,"FederatedAdditionalUserInfoWithUsername"],[7289,81,6693,79],[7289,82,6693,80],[7290,4,6694,4,"constructor"],[7290,15,6694,15,"constructor"],[7290,16,6694,16,"isNewUser"],[7290,25,6694,25],[7290,27,6694,27,"profile"],[7290,34,6694,34],[7290,36,6694,36,"screenName"],[7290,46,6694,46],[7290,48,6694,48],[7291,6,6695,8],[7291,11,6695,13],[7291,12,6695,14,"isNewUser"],[7291,21,6695,23],[7291,23,6695,25],[7291,36,6695,38],[7291,37,6695,39],[7291,63,6695,65,"profile"],[7291,70,6695,72],[7291,72,6695,74,"screenName"],[7291,82,6695,84],[7291,83,6695,85],[7292,4,6696,4],[7293,2,6697,0],[7294,2,6698,0],[7295,0,6699,0],[7296,0,6700,0],[7297,0,6701,0],[7298,0,6702,0],[7299,0,6703,0],[7300,0,6704,0],[7301,2,6705,0],[7301,11,6705,9,"getAdditionalUserInfo"],[7301,32,6705,30,"getAdditionalUserInfo"],[7301,33,6705,31,"userCredential"],[7301,47,6705,45],[7301,49,6705,47],[7302,4,6706,4],[7302,10,6706,10],[7303,6,6706,12,"user"],[7303,10,6706,16],[7304,6,6706,18,"_tokenResponse"],[7305,4,6706,33],[7305,5,6706,34],[7305,8,6706,37,"userCredential"],[7305,22,6706,51],[7306,4,6707,4],[7306,8,6707,8,"user"],[7306,12,6707,12],[7306,13,6707,13,"isAnonymous"],[7306,24,6707,24],[7306,28,6707,28],[7306,29,6707,29,"_tokenResponse"],[7306,43,6707,43],[7306,45,6707,45],[7307,6,6708,8],[7308,6,6709,8],[7309,6,6710,8],[7309,13,6710,15],[7310,8,6711,12,"providerId"],[7310,18,6711,22],[7310,20,6711,24],[7310,24,6711,28],[7311,8,6712,12,"isNewUser"],[7311,17,6712,21],[7311,19,6712,23],[7311,24,6712,28],[7312,8,6713,12,"profile"],[7312,15,6713,19],[7312,17,6713,21],[7313,6,6714,8],[7313,7,6714,9],[7314,4,6715,4],[7315,4,6716,4],[7315,11,6716,11,"_fromIdTokenResponse"],[7315,31,6716,31],[7315,32,6716,32,"_tokenResponse"],[7315,46,6716,46],[7315,47,6716,47],[7316,2,6717,0],[7318,2,6719,0],[7319,0,6720,0],[7320,0,6721,0],[7321,0,6722,0],[7322,0,6723,0],[7323,0,6724,0],[7324,0,6725,0],[7325,0,6726,0],[7326,0,6727,0],[7327,0,6728,0],[7328,0,6729,0],[7329,0,6730,0],[7330,0,6731,0],[7331,0,6732,0],[7332,0,6733,0],[7333,0,6734,0],[7334,2,6735,0],[7335,2,6736,0],[7336,0,6737,0],[7337,0,6738,0],[7338,0,6739,0],[7339,0,6740,0],[7340,0,6741,0],[7341,0,6742,0],[7342,0,6743,0],[7343,0,6744,0],[7344,0,6745,0],[7345,0,6746,0],[7346,0,6747,0],[7347,0,6748,0],[7348,0,6749,0],[7349,0,6750,0],[7350,0,6751,0],[7351,0,6752,0],[7352,0,6753,0],[7353,0,6754,0],[7354,0,6755,0],[7355,0,6756,0],[7356,0,6757,0],[7357,0,6758,0],[7358,0,6759,0],[7359,2,6760,0],[7359,11,6760,9,"setPersistence"],[7359,25,6760,23,"setPersistence"],[7359,26,6760,24,"auth"],[7359,30,6760,28],[7359,32,6760,30,"persistence"],[7359,43,6760,41],[7359,45,6760,43],[7360,4,6761,4],[7360,11,6761,11],[7360,15,6761,11,"getModularInstance"],[7360,28,6761,29],[7360,29,6761,29,"getModularInstance"],[7360,47,6761,29],[7360,49,6761,30,"auth"],[7360,53,6761,34],[7360,54,6761,35],[7360,55,6761,36,"setPersistence"],[7360,69,6761,50],[7360,70,6761,51,"persistence"],[7360,81,6761,62],[7360,82,6761,63],[7361,2,6762,0],[7362,2,6763,0],[7363,0,6764,0],[7364,0,6765,0],[7365,0,6766,0],[7366,0,6767,0],[7367,0,6768,0],[7368,0,6769,0],[7369,0,6770,0],[7370,0,6771,0],[7371,0,6772,0],[7372,0,6773,0],[7373,0,6774,0],[7374,0,6775,0],[7375,0,6776,0],[7376,0,6777,0],[7377,0,6778,0],[7378,0,6779,0],[7379,0,6780,0],[7380,0,6781,0],[7381,0,6782,0],[7382,0,6783,0],[7383,0,6784,0],[7384,0,6785,0],[7385,0,6786,0],[7386,0,6787,0],[7387,0,6788,0],[7388,0,6789,0],[7389,2,6790,0],[7389,11,6790,9,"initializeRecaptchaConfig"],[7389,36,6790,34,"initializeRecaptchaConfig"],[7389,37,6790,35,"auth"],[7389,41,6790,39],[7389,43,6790,41],[7390,4,6791,4],[7390,11,6791,11,"_initializeRecaptchaConfig"],[7390,37,6791,37],[7390,38,6791,38,"auth"],[7390,42,6791,42],[7390,43,6791,43],[7391,2,6792,0],[7392,2,6793,0],[7393,0,6794,0],[7394,0,6795,0],[7395,0,6796,0],[7396,0,6797,0],[7397,0,6798,0],[7398,0,6799,0],[7399,0,6800,0],[7400,0,6801,0],[7401,0,6802,0],[7402,0,6803,0],[7403,0,6804,0],[7404,0,6805,0],[7405,0,6806,0],[7406,0,6807,0],[7407,0,6808,0],[7408,0,6809,0],[7409,0,6810,0],[7410,0,6811,0],[7411,0,6812,0],[7412,0,6813,0],[7413,0,6814,0],[7414,0,6815,0],[7415,2,6816,0],[7415,17,6816,15,"validatePassword"],[7415,33,6816,31,"validatePassword"],[7415,34,6816,32,"auth"],[7415,38,6816,36],[7415,40,6816,38,"password"],[7415,48,6816,46],[7415,50,6816,48],[7416,4,6817,4],[7416,10,6817,10,"authInternal"],[7416,22,6817,22],[7416,25,6817,25,"_castAuth"],[7416,34,6817,34],[7416,35,6817,35,"auth"],[7416,39,6817,39],[7416,40,6817,40],[7417,4,6818,4],[7417,11,6818,11,"authInternal"],[7417,23,6818,23],[7417,24,6818,24,"validatePassword"],[7417,40,6818,40],[7417,41,6818,41,"password"],[7417,49,6818,49],[7417,50,6818,50],[7418,2,6819,0],[7419,2,6820,0],[7420,0,6821,0],[7421,0,6822,0],[7422,0,6823,0],[7423,0,6824,0],[7424,0,6825,0],[7425,0,6826,0],[7426,0,6827,0],[7427,0,6828,0],[7428,0,6829,0],[7429,0,6830,0],[7430,0,6831,0],[7431,0,6832,0],[7432,0,6833,0],[7433,0,6834,0],[7434,0,6835,0],[7435,2,6836,0],[7435,11,6836,9,"onIdTokenChanged"],[7435,27,6836,25,"onIdTokenChanged"],[7435,28,6836,26,"auth"],[7435,32,6836,30],[7435,34,6836,32,"nextOrObserver"],[7435,48,6836,46],[7435,50,6836,48,"error"],[7435,55,6836,53],[7435,57,6836,55,"completed"],[7435,66,6836,64],[7435,68,6836,66],[7436,4,6837,4],[7436,11,6837,11],[7436,15,6837,11,"getModularInstance"],[7436,28,6837,29],[7436,29,6837,29,"getModularInstance"],[7436,47,6837,29],[7436,49,6837,30,"auth"],[7436,53,6837,34],[7436,54,6837,35],[7436,55,6837,36,"onIdTokenChanged"],[7436,71,6837,52],[7436,72,6837,53,"nextOrObserver"],[7436,86,6837,67],[7436,88,6837,69,"error"],[7436,93,6837,74],[7436,95,6837,76,"completed"],[7436,104,6837,85],[7436,105,6837,86],[7437,2,6838,0],[7438,2,6839,0],[7439,0,6840,0],[7440,0,6841,0],[7441,0,6842,0],[7442,0,6843,0],[7443,0,6844,0],[7444,0,6845,0],[7445,0,6846,0],[7446,0,6847,0],[7447,0,6848,0],[7448,2,6849,0],[7448,11,6849,9,"beforeAuthStateChanged"],[7448,33,6849,31,"beforeAuthStateChanged"],[7448,34,6849,32,"auth"],[7448,38,6849,36],[7448,40,6849,38,"callback"],[7448,48,6849,46],[7448,50,6849,48,"onAbort"],[7448,57,6849,55],[7448,59,6849,57],[7449,4,6850,4],[7449,11,6850,11],[7449,15,6850,11,"getModularInstance"],[7449,28,6850,29],[7449,29,6850,29,"getModularInstance"],[7449,47,6850,29],[7449,49,6850,30,"auth"],[7449,53,6850,34],[7449,54,6850,35],[7449,55,6850,36,"beforeAuthStateChanged"],[7449,77,6850,58],[7449,78,6850,59,"callback"],[7449,86,6850,67],[7449,88,6850,69,"onAbort"],[7449,95,6850,76],[7449,96,6850,77],[7450,2,6851,0],[7451,2,6852,0],[7452,0,6853,0],[7453,0,6854,0],[7454,0,6855,0],[7455,0,6856,0],[7456,0,6857,0],[7457,0,6858,0],[7458,0,6859,0],[7459,0,6860,0],[7460,0,6861,0],[7461,0,6862,0],[7462,0,6863,0],[7463,0,6864,0],[7464,0,6865,0],[7465,0,6866,0],[7466,2,6867,0],[7466,11,6867,9,"onAuthStateChanged"],[7466,29,6867,27,"onAuthStateChanged"],[7466,30,6867,28,"auth"],[7466,34,6867,32],[7466,36,6867,34,"nextOrObserver"],[7466,50,6867,48],[7466,52,6867,50,"error"],[7466,57,6867,55],[7466,59,6867,57,"completed"],[7466,68,6867,66],[7466,70,6867,68],[7467,4,6868,4],[7467,11,6868,11],[7467,15,6868,11,"getModularInstance"],[7467,28,6868,29],[7467,29,6868,29,"getModularInstance"],[7467,47,6868,29],[7467,49,6868,30,"auth"],[7467,53,6868,34],[7467,54,6868,35],[7467,55,6868,36,"onAuthStateChanged"],[7467,73,6868,54],[7467,74,6868,55,"nextOrObserver"],[7467,88,6868,69],[7467,90,6868,71,"error"],[7467,95,6868,76],[7467,97,6868,78,"completed"],[7467,106,6868,87],[7467,107,6868,88],[7468,2,6869,0],[7469,2,6870,0],[7470,0,6871,0],[7471,0,6872,0],[7472,0,6873,0],[7473,0,6874,0],[7474,0,6875,0],[7475,0,6876,0],[7476,2,6877,0],[7476,11,6877,9,"useDeviceLanguage"],[7476,28,6877,26,"useDeviceLanguage"],[7476,29,6877,27,"auth"],[7476,33,6877,31],[7476,35,6877,33],[7477,4,6878,4],[7477,8,6878,4,"getModularInstance"],[7477,21,6878,22],[7477,22,6878,22,"getModularInstance"],[7477,40,6878,22],[7477,42,6878,23,"auth"],[7477,46,6878,27],[7477,47,6878,28],[7477,48,6878,29,"useDeviceLanguage"],[7477,65,6878,46],[7477,66,6878,47],[7477,67,6878,48],[7478,2,6879,0],[7479,2,6880,0],[7480,0,6881,0],[7481,0,6882,0],[7482,0,6883,0],[7483,0,6884,0],[7484,0,6885,0],[7485,0,6886,0],[7486,0,6887,0],[7487,0,6888,0],[7488,0,6889,0],[7489,0,6890,0],[7490,0,6891,0],[7491,0,6892,0],[7492,0,6893,0],[7493,0,6894,0],[7494,0,6895,0],[7495,0,6896,0],[7496,0,6897,0],[7497,0,6898,0],[7498,0,6899,0],[7499,0,6900,0],[7500,2,6901,0],[7500,11,6901,9,"updateCurrentUser"],[7500,28,6901,26,"updateCurrentUser"],[7500,29,6901,27,"auth"],[7500,33,6901,31],[7500,35,6901,33,"user"],[7500,39,6901,37],[7500,41,6901,39],[7501,4,6902,4],[7501,11,6902,11],[7501,15,6902,11,"getModularInstance"],[7501,28,6902,29],[7501,29,6902,29,"getModularInstance"],[7501,47,6902,29],[7501,49,6902,30,"auth"],[7501,53,6902,34],[7501,54,6902,35],[7501,55,6902,36,"updateCurrentUser"],[7501,72,6902,53],[7501,73,6902,54,"user"],[7501,77,6902,58],[7501,78,6902,59],[7502,2,6903,0],[7503,2,6904,0],[7504,0,6905,0],[7505,0,6906,0],[7506,0,6907,0],[7507,0,6908,0],[7508,0,6909,0],[7509,0,6910,0],[7510,0,6911,0],[7511,0,6912,0],[7512,0,6913,0],[7513,0,6914,0],[7514,2,6915,0],[7514,11,6915,9,"signOut"],[7514,18,6915,16,"signOut"],[7514,19,6915,17,"auth"],[7514,23,6915,21],[7514,25,6915,23],[7515,4,6916,4],[7515,11,6916,11],[7515,15,6916,11,"getModularInstance"],[7515,28,6916,29],[7515,29,6916,29,"getModularInstance"],[7515,47,6916,29],[7515,49,6916,30,"auth"],[7515,53,6916,34],[7515,54,6916,35],[7515,55,6916,36,"signOut"],[7515,62,6916,43],[7515,63,6916,44],[7515,64,6916,45],[7516,2,6917,0],[7517,2,6918,0],[7518,0,6919,0],[7519,0,6920,0],[7520,0,6921,0],[7521,0,6922,0],[7522,0,6923,0],[7523,0,6924,0],[7524,0,6925,0],[7525,2,6926,0],[7525,11,6926,9,"revokeAccessToken"],[7525,28,6926,26,"revokeAccessToken"],[7525,29,6926,27,"auth"],[7525,33,6926,31],[7525,35,6926,33,"token"],[7525,40,6926,38],[7525,42,6926,40],[7526,4,6927,4],[7526,10,6927,10,"authInternal"],[7526,22,6927,22],[7526,25,6927,25,"_castAuth"],[7526,34,6927,34],[7526,35,6927,35,"auth"],[7526,39,6927,39],[7526,40,6927,40],[7527,4,6928,4],[7527,11,6928,11,"authInternal"],[7527,23,6928,23],[7527,24,6928,24,"revokeAccessToken"],[7527,41,6928,41],[7527,42,6928,42,"token"],[7527,47,6928,47],[7527,48,6928,48],[7528,2,6929,0],[7529,2,6930,0],[7530,0,6931,0],[7531,0,6932,0],[7532,0,6933,0],[7533,0,6934,0],[7534,0,6935,0],[7535,0,6936,0],[7536,0,6937,0],[7537,0,6938,0],[7538,0,6939,0],[7539,0,6940,0],[7540,0,6941,0],[7541,2,6942,0],[7541,17,6942,15,"deleteUser"],[7541,27,6942,25,"deleteUser"],[7541,28,6942,26,"user"],[7541,32,6942,30],[7541,34,6942,32],[7542,4,6943,4],[7542,11,6943,11],[7542,15,6943,11,"getModularInstance"],[7542,28,6943,29],[7542,29,6943,29,"getModularInstance"],[7542,47,6943,29],[7542,49,6943,30,"user"],[7542,53,6943,34],[7542,54,6943,35],[7542,55,6943,36,"delete"],[7542,61,6943,42],[7542,62,6943,43],[7542,63,6943,44],[7543,2,6944,0],[7545,2,6946,0],[7546,0,6947,0],[7547,0,6948,0],[7548,0,6949,0],[7549,0,6950,0],[7550,0,6951,0],[7551,0,6952,0],[7552,0,6953,0],[7553,0,6954,0],[7554,0,6955,0],[7555,0,6956,0],[7556,0,6957,0],[7557,0,6958,0],[7558,0,6959,0],[7559,0,6960,0],[7560,0,6961,0],[7561,2,6962,0],[7561,8,6962,6,"MultiFactorSessionImpl"],[7561,30,6962,28],[7561,31,6962,29],[7562,4,6963,4,"constructor"],[7562,15,6963,15,"constructor"],[7562,16,6963,16,"type"],[7562,20,6963,20],[7562,22,6963,22,"credential"],[7562,32,6963,32],[7562,34,6963,34,"user"],[7562,38,6963,38],[7562,40,6963,40],[7563,6,6964,8],[7563,10,6964,12],[7563,11,6964,13,"type"],[7563,15,6964,17],[7563,18,6964,20,"type"],[7563,22,6964,24],[7564,6,6965,8],[7564,10,6965,12],[7564,11,6965,13,"credential"],[7564,21,6965,23],[7564,24,6965,26,"credential"],[7564,34,6965,36],[7565,6,6966,8],[7565,10,6966,12],[7565,11,6966,13,"user"],[7565,15,6966,17],[7565,18,6966,20,"user"],[7565,22,6966,24],[7566,4,6967,4],[7567,4,6968,4],[7567,11,6968,11,"_fromIdtoken"],[7567,23,6968,23,"_fromIdtoken"],[7567,24,6968,24,"idToken"],[7567,31,6968,31],[7567,33,6968,33,"user"],[7567,37,6968,37],[7567,39,6968,39],[7568,6,6969,8],[7568,13,6969,15],[7568,17,6969,19,"MultiFactorSessionImpl"],[7568,39,6969,41],[7568,40,6969,42],[7568,48,6969,50],[7568,49,6969,51],[7568,86,6969,88,"idToken"],[7568,93,6969,95],[7568,95,6969,97,"user"],[7568,99,6969,101],[7568,100,6969,102],[7569,4,6970,4],[7570,4,6971,4],[7570,11,6971,11,"_fromMfaPendingCredential"],[7570,36,6971,36,"_fromMfaPendingCredential"],[7570,37,6971,37,"mfaPendingCredential"],[7570,57,6971,57],[7570,59,6971,59],[7571,6,6972,8],[7571,13,6972,15],[7571,17,6972,19,"MultiFactorSessionImpl"],[7571,39,6972,41],[7571,40,6972,42],[7571,48,6972,50],[7571,49,6972,51],[7571,87,6972,89,"mfaPendingCredential"],[7571,107,6972,109],[7571,108,6972,110],[7572,4,6973,4],[7573,4,6974,4,"toJSON"],[7573,10,6974,10,"toJSON"],[7573,11,6974,10],[7573,13,6974,13],[7574,6,6975,8],[7574,12,6975,14,"key"],[7574,15,6975,17],[7574,18,6975,20],[7574,22,6975,24],[7574,23,6975,25,"type"],[7574,27,6975,29],[7574,32,6975,34],[7574,40,6975,42],[7574,41,6975,43],[7574,79,6976,14],[7574,88,6976,23],[7574,91,6977,14],[7574,110,6977,33],[7575,6,6978,8],[7575,13,6978,15],[7576,8,6979,12,"multiFactorSession"],[7576,26,6979,30],[7576,28,6979,32],[7577,10,6980,16],[7577,11,6980,17,"key"],[7577,14,6980,20],[7577,17,6980,23],[7577,21,6980,27],[7577,22,6980,28,"credential"],[7578,8,6981,12],[7579,6,6982,8],[7579,7,6982,9],[7580,4,6983,4],[7581,4,6984,4],[7581,11,6984,11,"fromJSON"],[7581,19,6984,19,"fromJSON"],[7581,20,6984,20,"obj"],[7581,23,6984,23],[7581,25,6984,25],[7582,6,6985,8],[7582,10,6985,12,"obj"],[7582,13,6985,15],[7582,15,6985,17,"multiFactorSession"],[7582,33,6985,35],[7582,35,6985,37],[7583,8,6986,12],[7583,12,6986,16,"obj"],[7583,15,6986,19],[7583,16,6986,20,"multiFactorSession"],[7583,34,6986,38],[7583,36,6986,40,"pendingCredential"],[7583,53,6986,57],[7583,55,6986,59],[7584,10,6987,16],[7584,17,6987,23,"MultiFactorSessionImpl"],[7584,39,6987,45],[7584,40,6987,46,"_fromMfaPendingCredential"],[7584,65,6987,71],[7584,66,6987,72,"obj"],[7584,69,6987,75],[7584,70,6987,76,"multiFactorSession"],[7584,88,6987,94],[7584,89,6987,95,"pendingCredential"],[7584,106,6987,112],[7584,107,6987,113],[7585,8,6988,12],[7585,9,6988,13],[7585,15,6989,17],[7585,19,6989,21,"obj"],[7585,22,6989,24],[7585,23,6989,25,"multiFactorSession"],[7585,41,6989,43],[7585,43,6989,45,"idToken"],[7585,50,6989,52],[7585,52,6989,54],[7586,10,6990,16],[7586,17,6990,23,"MultiFactorSessionImpl"],[7586,39,6990,45],[7586,40,6990,46,"_fromIdtoken"],[7586,52,6990,58],[7586,53,6990,59,"obj"],[7586,56,6990,62],[7586,57,6990,63,"multiFactorSession"],[7586,75,6990,81],[7586,76,6990,82,"idToken"],[7586,83,6990,89],[7586,84,6990,90],[7587,8,6991,12],[7588,6,6992,8],[7589,6,6993,8],[7589,13,6993,15],[7589,17,6993,19],[7590,4,6994,4],[7591,2,6995,0],[7593,2,6997,0],[7594,0,6998,0],[7595,0,6999,0],[7596,0,7000,0],[7597,0,7001,0],[7598,0,7002,0],[7599,0,7003,0],[7600,0,7004,0],[7601,0,7005,0],[7602,0,7006,0],[7603,0,7007,0],[7604,0,7008,0],[7605,0,7009,0],[7606,0,7010,0],[7607,0,7011,0],[7608,0,7012,0],[7609,2,7013,0],[7609,8,7013,6,"MultiFactorResolverImpl"],[7609,31,7013,29],[7609,32,7013,30],[7610,4,7014,4,"constructor"],[7610,15,7014,15,"constructor"],[7610,16,7014,16,"session"],[7610,23,7014,23],[7610,25,7014,25,"hints"],[7610,30,7014,30],[7610,32,7014,32,"signInResolver"],[7610,46,7014,46],[7610,48,7014,48],[7611,6,7015,8],[7611,10,7015,12],[7611,11,7015,13,"session"],[7611,18,7015,20],[7611,21,7015,23,"session"],[7611,28,7015,30],[7612,6,7016,8],[7612,10,7016,12],[7612,11,7016,13,"hints"],[7612,16,7016,18],[7612,19,7016,21,"hints"],[7612,24,7016,26],[7613,6,7017,8],[7613,10,7017,12],[7613,11,7017,13,"signInResolver"],[7613,25,7017,27],[7613,28,7017,30,"signInResolver"],[7613,42,7017,44],[7614,4,7018,4],[7615,4,7019,4],[7616,4,7020,4],[7616,11,7020,11,"_fromError"],[7616,21,7020,21,"_fromError"],[7616,22,7020,22,"authExtern"],[7616,32,7020,32],[7616,34,7020,34,"error"],[7616,39,7020,39],[7616,41,7020,41],[7617,6,7021,8],[7617,12,7021,14,"auth"],[7617,16,7021,18],[7617,19,7021,21,"_castAuth"],[7617,28,7021,30],[7617,29,7021,31,"authExtern"],[7617,39,7021,41],[7617,40,7021,42],[7618,6,7022,8],[7618,12,7022,14,"serverResponse"],[7618,26,7022,28],[7618,29,7022,31,"error"],[7618,34,7022,36],[7618,35,7022,37,"customData"],[7618,45,7022,47],[7618,46,7022,48,"_serverResponse"],[7618,61,7022,63],[7619,6,7023,8],[7619,12,7023,14,"hints"],[7619,17,7023,19],[7619,20,7023,22],[7619,21,7023,23,"serverResponse"],[7619,35,7023,37],[7619,36,7023,38,"mfaInfo"],[7619,43,7023,45],[7619,47,7023,49],[7619,49,7023,51],[7619,51,7023,53,"map"],[7619,54,7023,56],[7619,55,7023,57,"enrollment"],[7619,65,7023,67],[7619,69,7023,71,"MultiFactorInfoImpl"],[7619,88,7023,90],[7619,89,7023,91,"_fromServerResponse"],[7619,108,7023,110],[7619,109,7023,111,"auth"],[7619,113,7023,115],[7619,115,7023,117,"enrollment"],[7619,125,7023,127],[7619,126,7023,128],[7619,127,7023,129],[7620,6,7024,8,"_assert"],[7620,13,7024,15],[7620,14,7024,16,"serverResponse"],[7620,28,7024,30],[7620,29,7024,31,"mfaPendingCredential"],[7620,49,7024,51],[7620,51,7024,53,"auth"],[7620,55,7024,57],[7620,57,7024,59],[7620,73,7024,75],[7620,74,7024,76],[7620,108,7024,110],[7620,109,7024,111],[7621,6,7025,8],[7621,12,7025,14,"session"],[7621,19,7025,21],[7621,22,7025,24,"MultiFactorSessionImpl"],[7621,44,7025,46],[7621,45,7025,47,"_fromMfaPendingCredential"],[7621,70,7025,72],[7621,71,7025,73,"serverResponse"],[7621,85,7025,87],[7621,86,7025,88,"mfaPendingCredential"],[7621,106,7025,108],[7621,107,7025,109],[7622,6,7026,8],[7622,13,7026,15],[7622,17,7026,19,"MultiFactorResolverImpl"],[7622,40,7026,42],[7622,41,7026,43,"session"],[7622,48,7026,50],[7622,50,7026,52,"hints"],[7622,55,7026,57],[7622,57,7026,59],[7622,63,7026,66,"assertion"],[7622,72,7026,75],[7622,76,7026,80],[7623,8,7027,12],[7623,14,7027,18,"mfaResponse"],[7623,25,7027,29],[7623,28,7027,32],[7623,34,7027,38,"assertion"],[7623,43,7027,47],[7623,44,7027,48,"_process"],[7623,52,7027,56],[7623,53,7027,57,"auth"],[7623,57,7027,61],[7623,59,7027,63,"session"],[7623,66,7027,70],[7623,67,7027,71],[7624,8,7028,12],[7625,8,7029,12],[7625,15,7029,19,"serverResponse"],[7625,29,7029,33],[7625,30,7029,34,"mfaInfo"],[7625,37,7029,41],[7626,8,7030,12],[7626,15,7030,19,"serverResponse"],[7626,29,7030,33],[7626,30,7030,34,"mfaPendingCredential"],[7626,50,7030,54],[7627,8,7031,12],[7628,8,7032,12],[7628,14,7032,18,"idTokenResponse"],[7628,29,7032,33],[7628,32,7032,36],[7629,10,7033,16],[7629,13,7033,19,"serverResponse"],[7629,27,7033,33],[7630,10,7034,16,"idToken"],[7630,17,7034,23],[7630,19,7034,25,"mfaResponse"],[7630,30,7034,36],[7630,31,7034,37,"idToken"],[7630,38,7034,44],[7631,10,7035,16,"refreshToken"],[7631,22,7035,28],[7631,24,7035,30,"mfaResponse"],[7631,35,7035,41],[7631,36,7035,42,"refreshToken"],[7632,8,7036,12],[7632,9,7036,13],[7633,8,7037,12],[7634,8,7038,12],[7634,16,7038,20,"error"],[7634,21,7038,25],[7634,22,7038,26,"operationType"],[7634,35,7038,39],[7635,10,7039,16],[7635,15,7039,21],[7635,23,7039,29],[7635,24,7039,30],[7636,12,7040,20],[7636,18,7040,26,"userCredential"],[7636,32,7040,40],[7636,35,7040,43],[7636,41,7040,49,"UserCredentialImpl"],[7636,59,7040,67],[7636,60,7040,68,"_fromIdTokenResponse"],[7636,80,7040,88],[7636,81,7040,89,"auth"],[7636,85,7040,93],[7636,87,7040,95,"error"],[7636,92,7040,100],[7636,93,7040,101,"operationType"],[7636,106,7040,114],[7636,108,7040,116,"idTokenResponse"],[7636,123,7040,131],[7636,124,7040,132],[7637,12,7041,20],[7637,18,7041,26,"auth"],[7637,22,7041,30],[7637,23,7041,31,"_updateCurrentUser"],[7637,41,7041,49],[7637,42,7041,50,"userCredential"],[7637,56,7041,64],[7637,57,7041,65,"user"],[7637,61,7041,69],[7637,62,7041,70],[7638,12,7042,20],[7638,19,7042,27,"userCredential"],[7638,33,7042,41],[7639,10,7043,16],[7639,15,7043,21],[7639,31,7043,37],[7639,32,7043,38],[7640,12,7044,20,"_assert"],[7640,19,7044,27],[7640,20,7044,28,"error"],[7640,25,7044,33],[7640,26,7044,34,"user"],[7640,30,7044,38],[7640,32,7044,40,"auth"],[7640,36,7044,44],[7640,38,7044,46],[7640,54,7044,62],[7640,55,7044,63],[7640,89,7044,97],[7640,90,7044,98],[7641,12,7045,20],[7641,19,7045,27,"UserCredentialImpl"],[7641,37,7045,45],[7641,38,7045,46,"_forOperation"],[7641,51,7045,59],[7641,52,7045,60,"error"],[7641,57,7045,65],[7641,58,7045,66,"user"],[7641,62,7045,70],[7641,64,7045,72,"error"],[7641,69,7045,77],[7641,70,7045,78,"operationType"],[7641,83,7045,91],[7641,85,7045,93,"idTokenResponse"],[7641,100,7045,108],[7641,101,7045,109],[7642,10,7046,16],[7643,12,7047,20,"_fail"],[7643,17,7047,25],[7643,18,7047,26,"auth"],[7643,22,7047,30],[7643,24,7047,32],[7643,40,7047,48],[7643,41,7047,49],[7643,75,7047,83],[7643,76,7047,84],[7644,8,7048,12],[7645,6,7049,8],[7645,7,7049,9],[7645,8,7049,10],[7646,4,7050,4],[7647,4,7051,4],[7647,10,7051,10,"resolveSignIn"],[7647,23,7051,23,"resolveSignIn"],[7647,24,7051,24,"assertionExtern"],[7647,39,7051,39],[7647,41,7051,41],[7648,6,7052,8],[7648,12,7052,14,"assertion"],[7648,21,7052,23],[7648,24,7052,26,"assertionExtern"],[7648,39,7052,41],[7649,6,7053,8],[7649,13,7053,15],[7649,17,7053,19],[7649,18,7053,20,"signInResolver"],[7649,32,7053,34],[7649,33,7053,35,"assertion"],[7649,42,7053,44],[7649,43,7053,45],[7650,4,7054,4],[7651,2,7055,0],[7652,2,7056,0],[7653,0,7057,0],[7654,0,7058,0],[7655,0,7059,0],[7656,0,7060,0],[7657,0,7061,0],[7658,0,7062,0],[7659,0,7063,0],[7660,0,7064,0],[7661,0,7065,0],[7662,2,7066,0],[7662,11,7066,9,"getMultiFactorResolver"],[7662,33,7066,31,"getMultiFactorResolver"],[7662,34,7066,32,"auth"],[7662,38,7066,36],[7662,40,7066,38,"error"],[7662,45,7066,43],[7662,47,7066,45],[7663,4,7067,4],[7663,10,7067,10,"authModular"],[7663,21,7067,21],[7663,24,7067,24],[7663,28,7067,24,"getModularInstance"],[7663,41,7067,42],[7663,42,7067,42,"getModularInstance"],[7663,60,7067,42],[7663,62,7067,43,"auth"],[7663,66,7067,47],[7663,67,7067,48],[7664,4,7068,4],[7664,10,7068,10,"errorInternal"],[7664,23,7068,23],[7664,26,7068,26,"error"],[7664,31,7068,31],[7665,4,7069,4,"_assert"],[7665,11,7069,11],[7665,12,7069,12,"error"],[7665,17,7069,17],[7665,18,7069,18,"customData"],[7665,28,7069,28],[7665,29,7069,29,"operationType"],[7665,42,7069,42],[7665,44,7069,44,"authModular"],[7665,55,7069,55],[7665,57,7069,57],[7665,73,7069,73],[7665,74,7069,74],[7665,108,7069,108],[7665,109,7069,109],[7666,4,7070,4,"_assert"],[7666,11,7070,11],[7666,12,7070,12,"errorInternal"],[7666,25,7070,25],[7666,26,7070,26,"customData"],[7666,36,7070,36],[7666,37,7070,37,"_serverResponse"],[7666,52,7070,52],[7666,54,7070,54,"mfaPendingCredential"],[7666,74,7070,74],[7666,76,7070,76,"authModular"],[7666,87,7070,87],[7666,89,7070,89],[7666,105,7070,105],[7666,106,7070,106],[7666,140,7070,140],[7666,141,7070,141],[7667,4,7071,4],[7667,11,7071,11,"MultiFactorResolverImpl"],[7667,34,7071,34],[7667,35,7071,35,"_fromError"],[7667,45,7071,45],[7667,46,7071,46,"authModular"],[7667,57,7071,57],[7667,59,7071,59,"errorInternal"],[7667,72,7071,72],[7667,73,7071,73],[7668,2,7072,0],[7670,2,7074,0],[7671,0,7075,0],[7672,0,7076,0],[7673,0,7077,0],[7674,0,7078,0],[7675,0,7079,0],[7676,0,7080,0],[7677,0,7081,0],[7678,0,7082,0],[7679,0,7083,0],[7680,0,7084,0],[7681,0,7085,0],[7682,0,7086,0],[7683,0,7087,0],[7684,0,7088,0],[7685,0,7089,0],[7686,2,7090,0],[7686,11,7090,9,"startEnrollTotpMfa"],[7686,29,7090,27,"startEnrollTotpMfa"],[7686,30,7090,28,"auth"],[7686,34,7090,32],[7686,36,7090,34,"request"],[7686,43,7090,41],[7686,45,7090,43],[7687,4,7091,4],[7687,11,7091,11,"_performApiRequest"],[7687,29,7091,29],[7687,30,7091,30,"auth"],[7687,34,7091,34],[7687,36,7091,36],[7687,42,7091,42],[7687,43,7091,43],[7687,66,7091,66],[7687,100,7091,100],[7687,101,7091,101],[7687,138,7091,138,"_addTidIfNecessary"],[7687,156,7091,156],[7687,157,7091,157,"auth"],[7687,161,7091,161],[7687,163,7091,163,"request"],[7687,170,7091,170],[7687,171,7091,171],[7687,172,7091,172],[7688,2,7092,0],[7689,2,7093,0],[7689,11,7093,9,"finalizeEnrollTotpMfa"],[7689,32,7093,30,"finalizeEnrollTotpMfa"],[7689,33,7093,31,"auth"],[7689,37,7093,35],[7689,39,7093,37,"request"],[7689,46,7093,44],[7689,48,7093,46],[7690,4,7094,4],[7690,11,7094,11,"_performApiRequest"],[7690,29,7094,29],[7690,30,7094,30,"auth"],[7690,34,7094,34],[7690,36,7094,36],[7690,42,7094,42],[7690,43,7094,43],[7690,66,7094,66],[7690,103,7094,103],[7690,104,7094,104],[7690,144,7094,144,"_addTidIfNecessary"],[7690,162,7094,162],[7690,163,7094,163,"auth"],[7690,167,7094,167],[7690,169,7094,169,"request"],[7690,176,7094,176],[7690,177,7094,177],[7690,178,7094,178],[7691,2,7095,0],[7692,2,7096,0],[7692,11,7096,9,"withdrawMfa"],[7692,22,7096,20,"withdrawMfa"],[7692,23,7096,21,"auth"],[7692,27,7096,25],[7692,29,7096,27,"request"],[7692,36,7096,34],[7692,38,7096,36],[7693,4,7097,4],[7693,11,7097,11,"_performApiRequest"],[7693,29,7097,29],[7693,30,7097,30,"auth"],[7693,34,7097,34],[7693,36,7097,36],[7693,42,7097,42],[7693,43,7097,43],[7693,66,7097,66],[7693,103,7097,103],[7693,104,7097,104],[7693,133,7097,133,"_addTidIfNecessary"],[7693,151,7097,151],[7693,152,7097,152,"auth"],[7693,156,7097,156],[7693,158,7097,158,"request"],[7693,165,7097,165],[7693,166,7097,166],[7693,167,7097,167],[7694,2,7098,0],[7695,2,7100,0],[7695,8,7100,6,"MultiFactorUserImpl"],[7695,27,7100,25],[7695,28,7100,26],[7696,4,7101,4,"constructor"],[7696,15,7101,15,"constructor"],[7696,16,7101,16,"user"],[7696,20,7101,20],[7696,22,7101,22],[7697,6,7102,8],[7697,10,7102,12],[7697,11,7102,13,"user"],[7697,15,7102,17],[7697,18,7102,20,"user"],[7697,22,7102,24],[7698,6,7103,8],[7698,10,7103,12],[7698,11,7103,13,"enrolledFactors"],[7698,26,7103,28],[7698,29,7103,31],[7698,31,7103,33],[7699,6,7104,8,"user"],[7699,10,7104,12],[7699,11,7104,13,"_onReload"],[7699,20,7104,22],[7699,21,7104,23,"userInfo"],[7699,29,7104,31],[7699,33,7104,35],[7700,8,7105,12],[7700,12,7105,16,"userInfo"],[7700,20,7105,24],[7700,21,7105,25,"mfaInfo"],[7700,28,7105,32],[7700,30,7105,34],[7701,10,7106,16],[7701,14,7106,20],[7701,15,7106,21,"enrolledFactors"],[7701,30,7106,36],[7701,33,7106,39,"userInfo"],[7701,41,7106,47],[7701,42,7106,48,"mfaInfo"],[7701,49,7106,55],[7701,50,7106,56,"map"],[7701,53,7106,59],[7701,54,7106,60,"enrollment"],[7701,64,7106,70],[7701,68,7106,74,"MultiFactorInfoImpl"],[7701,87,7106,93],[7701,88,7106,94,"_fromServerResponse"],[7701,107,7106,113],[7701,108,7106,114,"user"],[7701,112,7106,118],[7701,113,7106,119,"auth"],[7701,117,7106,123],[7701,119,7106,125,"enrollment"],[7701,129,7106,135],[7701,130,7106,136],[7701,131,7106,137],[7702,8,7107,12],[7703,6,7108,8],[7703,7,7108,9],[7703,8,7108,10],[7704,4,7109,4],[7705,4,7110,4],[7705,11,7110,11,"_fromUser"],[7705,20,7110,20,"_fromUser"],[7705,21,7110,21,"user"],[7705,25,7110,25],[7705,27,7110,27],[7706,6,7111,8],[7706,13,7111,15],[7706,17,7111,19,"MultiFactorUserImpl"],[7706,36,7111,38],[7706,37,7111,39,"user"],[7706,41,7111,43],[7706,42,7111,44],[7707,4,7112,4],[7708,4,7113,4],[7708,10,7113,10,"getSession"],[7708,20,7113,20,"getSession"],[7708,21,7113,20],[7708,23,7113,23],[7709,6,7114,8],[7709,13,7114,15,"MultiFactorSessionImpl"],[7709,35,7114,37],[7709,36,7114,38,"_fromIdtoken"],[7709,48,7114,50],[7709,49,7114,51],[7709,55,7114,57],[7709,59,7114,61],[7709,60,7114,62,"user"],[7709,64,7114,66],[7709,65,7114,67,"getIdToken"],[7709,75,7114,77],[7709,76,7114,78],[7709,77,7114,79],[7709,79,7114,81],[7709,83,7114,85],[7709,84,7114,86,"user"],[7709,88,7114,90],[7709,89,7114,91],[7710,4,7115,4],[7711,4,7116,4],[7711,10,7116,10,"enroll"],[7711,16,7116,16,"enroll"],[7711,17,7116,17,"assertionExtern"],[7711,32,7116,32],[7711,34,7116,34,"displayName"],[7711,45,7116,45],[7711,47,7116,47],[7712,6,7117,8],[7712,12,7117,14,"assertion"],[7712,21,7117,23],[7712,24,7117,26,"assertionExtern"],[7712,39,7117,41],[7713,6,7118,8],[7713,12,7118,14,"session"],[7713,19,7118,21],[7713,22,7118,25],[7713,28,7118,31],[7713,32,7118,35],[7713,33,7118,36,"getSession"],[7713,43,7118,46],[7713,44,7118,47],[7713,45,7118,49],[7714,6,7119,8],[7714,12,7119,14,"finalizeMfaResponse"],[7714,31,7119,33],[7714,34,7119,36],[7714,40,7119,42,"_logoutIfInvalidated"],[7714,60,7119,62],[7714,61,7119,63],[7714,65,7119,67],[7714,66,7119,68,"user"],[7714,70,7119,72],[7714,72,7119,74,"assertion"],[7714,81,7119,83],[7714,82,7119,84,"_process"],[7714,90,7119,92],[7714,91,7119,93],[7714,95,7119,97],[7714,96,7119,98,"user"],[7714,100,7119,102],[7714,101,7119,103,"auth"],[7714,105,7119,107],[7714,107,7119,109,"session"],[7714,114,7119,116],[7714,116,7119,118,"displayName"],[7714,127,7119,129],[7714,128,7119,130],[7714,129,7119,131],[7715,6,7120,8],[7716,6,7121,8],[7717,6,7122,8],[7717,12,7122,14],[7717,16,7122,18],[7717,17,7122,19,"user"],[7717,21,7122,23],[7717,22,7122,24,"_updateTokensIfNecessary"],[7717,46,7122,48],[7717,47,7122,49,"finalizeMfaResponse"],[7717,66,7122,68],[7717,67,7122,69],[7718,6,7123,8],[7719,6,7124,8],[7720,6,7125,8],[7721,6,7126,8],[7721,13,7126,15],[7721,17,7126,19],[7721,18,7126,20,"user"],[7721,22,7126,24],[7721,23,7126,25,"reload"],[7721,29,7126,31],[7721,30,7126,32],[7721,31,7126,33],[7722,4,7127,4],[7723,4,7128,4],[7723,10,7128,10,"unenroll"],[7723,18,7128,18,"unenroll"],[7723,19,7128,19,"infoOrUid"],[7723,28,7128,28],[7723,30,7128,30],[7724,6,7129,8],[7724,12,7129,14,"mfaEnrollmentId"],[7724,27,7129,29],[7724,30,7129,32],[7724,37,7129,39,"infoOrUid"],[7724,46,7129,48],[7724,51,7129,53],[7724,59,7129,61],[7724,62,7129,64,"infoOrUid"],[7724,71,7129,73],[7724,74,7129,76,"infoOrUid"],[7724,83,7129,85],[7724,84,7129,86,"uid"],[7724,87,7129,89],[7725,6,7130,8],[7725,12,7130,14,"idToken"],[7725,19,7130,21],[7725,22,7130,24],[7725,28,7130,30],[7725,32,7130,34],[7725,33,7130,35,"user"],[7725,37,7130,39],[7725,38,7130,40,"getIdToken"],[7725,48,7130,50],[7725,49,7130,51],[7725,50,7130,52],[7726,6,7131,8],[7726,10,7131,12],[7727,8,7132,12],[7727,14,7132,18,"idTokenResponse"],[7727,29,7132,33],[7727,32,7132,36],[7727,38,7132,42,"_logoutIfInvalidated"],[7727,58,7132,62],[7727,59,7132,63],[7727,63,7132,67],[7727,64,7132,68,"user"],[7727,68,7132,72],[7727,70,7132,74,"withdrawMfa"],[7727,81,7132,85],[7727,82,7132,86],[7727,86,7132,90],[7727,87,7132,91,"user"],[7727,91,7132,95],[7727,92,7132,96,"auth"],[7727,96,7132,100],[7727,98,7132,102],[7728,10,7133,16,"idToken"],[7728,17,7133,23],[7729,10,7134,16,"mfaEnrollmentId"],[7730,8,7135,12],[7730,9,7135,13],[7730,10,7135,14],[7730,11,7135,15],[7731,8,7136,12],[7732,8,7137,12],[7732,12,7137,16],[7732,13,7137,17,"enrolledFactors"],[7732,28,7137,32],[7732,31,7137,35],[7732,35,7137,39],[7732,36,7137,40,"enrolledFactors"],[7732,51,7137,55],[7732,52,7137,56,"filter"],[7732,58,7137,62],[7732,59,7137,63],[7732,60,7137,64],[7733,10,7137,66,"uid"],[7734,8,7137,70],[7734,9,7137,71],[7734,14,7137,76,"uid"],[7734,17,7137,79],[7734,22,7137,84,"mfaEnrollmentId"],[7734,37,7137,99],[7734,38,7137,100],[7735,8,7138,12],[7736,8,7139,12],[7737,8,7140,12],[7738,8,7141,12],[7739,8,7142,12],[7739,14,7142,18],[7739,18,7142,22],[7739,19,7142,23,"user"],[7739,23,7142,27],[7739,24,7142,28,"_updateTokensIfNecessary"],[7739,48,7142,52],[7739,49,7142,53,"idTokenResponse"],[7739,64,7142,68],[7739,65,7142,69],[7740,8,7143,12],[7740,14,7143,18],[7740,18,7143,22],[7740,19,7143,23,"user"],[7740,23,7143,27],[7740,24,7143,28,"reload"],[7740,30,7143,34],[7740,31,7143,35],[7740,32,7143,36],[7741,6,7144,8],[7741,7,7144,9],[7741,8,7145,8],[7741,15,7145,15,"e"],[7741,16,7145,16],[7741,18,7145,18],[7742,8,7146,12],[7742,14,7146,18,"e"],[7742,15,7146,19],[7743,6,7147,8],[7744,4,7148,4],[7745,2,7149,0],[7746,2,7150,0],[7746,8,7150,6,"multiFactorUserCache"],[7746,28,7150,26],[7746,31,7150,29],[7746,35,7150,33,"WeakMap"],[7746,42,7150,40],[7746,43,7150,41],[7746,44,7150,42],[7747,2,7151,0],[7748,0,7152,0],[7749,0,7153,0],[7750,0,7154,0],[7751,0,7155,0],[7752,0,7156,0],[7753,0,7157,0],[7754,0,7158,0],[7755,0,7159,0],[7756,0,7160,0],[7757,2,7161,0],[7757,11,7161,9,"multiFactor"],[7757,22,7161,20,"multiFactor"],[7757,23,7161,21,"user"],[7757,27,7161,25],[7757,29,7161,27],[7758,4,7162,4],[7758,10,7162,10,"userModular"],[7758,21,7162,21],[7758,24,7162,24],[7758,28,7162,24,"getModularInstance"],[7758,41,7162,42],[7758,42,7162,42,"getModularInstance"],[7758,60,7162,42],[7758,62,7162,43,"user"],[7758,66,7162,47],[7758,67,7162,48],[7759,4,7163,4],[7759,8,7163,8],[7759,9,7163,9,"multiFactorUserCache"],[7759,29,7163,29],[7759,30,7163,30,"has"],[7759,33,7163,33],[7759,34,7163,34,"userModular"],[7759,45,7163,45],[7759,46,7163,46],[7759,48,7163,48],[7760,6,7164,8,"multiFactorUserCache"],[7760,26,7164,28],[7760,27,7164,29,"set"],[7760,30,7164,32],[7760,31,7164,33,"userModular"],[7760,42,7164,44],[7760,44,7164,46,"MultiFactorUserImpl"],[7760,63,7164,65],[7760,64,7164,66,"_fromUser"],[7760,73,7164,75],[7760,74,7164,76,"userModular"],[7760,85,7164,87],[7760,86,7164,88],[7760,87,7164,89],[7761,4,7165,4],[7762,4,7166,4],[7762,11,7166,11,"multiFactorUserCache"],[7762,31,7166,31],[7762,32,7166,32,"get"],[7762,35,7166,35],[7762,36,7166,36,"userModular"],[7762,47,7166,47],[7762,48,7166,48],[7763,2,7167,0],[7764,2,7169,0],[7764,6,7169,4,"name"],[7764,10,7169,8],[7764,13,7169,11],[7764,29,7169,27],[7765,2,7170,0],[7765,6,7170,4,"version"],[7765,13,7170,11],[7765,16,7170,14],[7765,24,7170,22],[7767,2,7172,0],[7768,0,7173,0],[7769,0,7174,0],[7770,0,7175,0],[7771,0,7176,0],[7772,0,7177,0],[7773,0,7178,0],[7774,0,7179,0],[7775,0,7180,0],[7776,0,7181,0],[7777,0,7182,0],[7778,0,7183,0],[7779,0,7184,0],[7780,0,7185,0],[7781,0,7186,0],[7782,0,7187,0],[7783,2,7188,0],[7783,8,7188,6,"AuthInterop"],[7783,19,7188,17],[7783,20,7188,18],[7784,4,7189,4,"constructor"],[7784,15,7189,15,"constructor"],[7784,16,7189,16,"auth"],[7784,20,7189,20],[7784,22,7189,22],[7785,6,7190,8],[7785,10,7190,12],[7785,11,7190,13,"auth"],[7785,15,7190,17],[7785,18,7190,20,"auth"],[7785,22,7190,24],[7786,6,7191,8],[7786,10,7191,12],[7786,11,7191,13,"internalListeners"],[7786,28,7191,30],[7786,31,7191,33],[7786,35,7191,37,"Map"],[7786,38,7191,40],[7786,39,7191,41],[7786,40,7191,42],[7787,4,7192,4],[7788,4,7193,4,"getUid"],[7788,10,7193,10,"getUid"],[7788,11,7193,10],[7788,13,7193,13],[7789,6,7194,8],[7789,10,7194,12],[7789,11,7194,13,"assertAuthConfigured"],[7789,31,7194,33],[7789,32,7194,34],[7789,33,7194,35],[7790,6,7195,8],[7790,13,7195,15],[7790,17,7195,19],[7790,18,7195,20,"auth"],[7790,22,7195,24],[7790,23,7195,25,"currentUser"],[7790,34,7195,36],[7790,36,7195,38,"uid"],[7790,39,7195,41],[7790,43,7195,45],[7790,47,7195,49],[7791,4,7196,4],[7792,4,7197,4],[7792,10,7197,10,"getToken"],[7792,18,7197,18,"getToken"],[7792,19,7197,19,"forceRefresh"],[7792,31,7197,31],[7792,33,7197,33],[7793,6,7198,8],[7793,10,7198,12],[7793,11,7198,13,"assertAuthConfigured"],[7793,31,7198,33],[7793,32,7198,34],[7793,33,7198,35],[7794,6,7199,8],[7794,12,7199,14],[7794,16,7199,18],[7794,17,7199,19,"auth"],[7794,21,7199,23],[7794,22,7199,24,"_initializationPromise"],[7794,44,7199,46],[7795,6,7200,8],[7795,10,7200,12],[7795,11,7200,13],[7795,15,7200,17],[7795,16,7200,18,"auth"],[7795,20,7200,22],[7795,21,7200,23,"currentUser"],[7795,32,7200,34],[7795,34,7200,36],[7796,8,7201,12],[7796,15,7201,19],[7796,19,7201,23],[7797,6,7202,8],[7798,6,7203,8],[7798,12,7203,14,"accessToken"],[7798,23,7203,25],[7798,26,7203,28],[7798,32,7203,34],[7798,36,7203,38],[7798,37,7203,39,"auth"],[7798,41,7203,43],[7798,42,7203,44,"currentUser"],[7798,53,7203,55],[7798,54,7203,56,"getIdToken"],[7798,64,7203,66],[7798,65,7203,67,"forceRefresh"],[7798,77,7203,79],[7798,78,7203,80],[7799,6,7204,8],[7799,13,7204,15],[7800,8,7204,17,"accessToken"],[7801,6,7204,29],[7801,7,7204,30],[7802,4,7205,4],[7803,4,7206,4,"addAuthTokenListener"],[7803,24,7206,24,"addAuthTokenListener"],[7803,25,7206,25,"listener"],[7803,33,7206,33],[7803,35,7206,35],[7804,6,7207,8],[7804,10,7207,12],[7804,11,7207,13,"assertAuthConfigured"],[7804,31,7207,33],[7804,32,7207,34],[7804,33,7207,35],[7805,6,7208,8],[7805,10,7208,12],[7805,14,7208,16],[7805,15,7208,17,"internalListeners"],[7805,32,7208,34],[7805,33,7208,35,"has"],[7805,36,7208,38],[7805,37,7208,39,"listener"],[7805,45,7208,47],[7805,46,7208,48],[7805,48,7208,50],[7806,8,7209,12],[7807,6,7210,8],[7808,6,7211,8],[7808,12,7211,14,"unsubscribe"],[7808,23,7211,25],[7808,26,7211,28],[7808,30,7211,32],[7808,31,7211,33,"auth"],[7808,35,7211,37],[7808,36,7211,38,"onIdTokenChanged"],[7808,52,7211,54],[7808,53,7211,55,"user"],[7808,57,7211,59],[7808,61,7211,63],[7809,8,7212,12,"listener"],[7809,16,7212,20],[7809,17,7212,21,"user"],[7809,21,7212,25],[7809,23,7212,27,"stsTokenManager"],[7809,38,7212,42],[7809,39,7212,43,"accessToken"],[7809,50,7212,54],[7809,54,7212,58],[7809,58,7212,62],[7809,59,7212,63],[7810,6,7213,8],[7810,7,7213,9],[7810,8,7213,10],[7811,6,7214,8],[7811,10,7214,12],[7811,11,7214,13,"internalListeners"],[7811,28,7214,30],[7811,29,7214,31,"set"],[7811,32,7214,34],[7811,33,7214,35,"listener"],[7811,41,7214,43],[7811,43,7214,45,"unsubscribe"],[7811,54,7214,56],[7811,55,7214,57],[7812,6,7215,8],[7812,10,7215,12],[7812,11,7215,13,"updateProactiveRefresh"],[7812,33,7215,35],[7812,34,7215,36],[7812,35,7215,37],[7813,4,7216,4],[7814,4,7217,4,"removeAuthTokenListener"],[7814,27,7217,27,"removeAuthTokenListener"],[7814,28,7217,28,"listener"],[7814,36,7217,36],[7814,38,7217,38],[7815,6,7218,8],[7815,10,7218,12],[7815,11,7218,13,"assertAuthConfigured"],[7815,31,7218,33],[7815,32,7218,34],[7815,33,7218,35],[7816,6,7219,8],[7816,12,7219,14,"unsubscribe"],[7816,23,7219,25],[7816,26,7219,28],[7816,30,7219,32],[7816,31,7219,33,"internalListeners"],[7816,48,7219,50],[7816,49,7219,51,"get"],[7816,52,7219,54],[7816,53,7219,55,"listener"],[7816,61,7219,63],[7816,62,7219,64],[7817,6,7220,8],[7817,10,7220,12],[7817,11,7220,13,"unsubscribe"],[7817,22,7220,24],[7817,24,7220,26],[7818,8,7221,12],[7819,6,7222,8],[7820,6,7223,8],[7820,10,7223,12],[7820,11,7223,13,"internalListeners"],[7820,28,7223,30],[7820,29,7223,31,"delete"],[7820,35,7223,37],[7820,36,7223,38,"listener"],[7820,44,7223,46],[7820,45,7223,47],[7821,6,7224,8,"unsubscribe"],[7821,17,7224,19],[7821,18,7224,20],[7821,19,7224,21],[7822,6,7225,8],[7822,10,7225,12],[7822,11,7225,13,"updateProactiveRefresh"],[7822,33,7225,35],[7822,34,7225,36],[7822,35,7225,37],[7823,4,7226,4],[7824,4,7227,4,"assertAuthConfigured"],[7824,24,7227,24,"assertAuthConfigured"],[7824,25,7227,24],[7824,27,7227,27],[7825,6,7228,8,"_assert"],[7825,13,7228,15],[7825,14,7228,16],[7825,18,7228,20],[7825,19,7228,21,"auth"],[7825,23,7228,25],[7825,24,7228,26,"_initializationPromise"],[7825,46,7228,48],[7825,48,7228,50],[7825,87,7228,89],[7825,88,7228,90],[7825,138,7228,140],[7825,139,7228,141],[7826,4,7229,4],[7827,4,7230,4,"updateProactiveRefresh"],[7827,26,7230,26,"updateProactiveRefresh"],[7827,27,7230,26],[7827,29,7230,29],[7828,6,7231,8],[7828,10,7231,12],[7828,14,7231,16],[7828,15,7231,17,"internalListeners"],[7828,32,7231,34],[7828,33,7231,35,"size"],[7828,37,7231,39],[7828,40,7231,42],[7828,41,7231,43],[7828,43,7231,45],[7829,8,7232,12],[7829,12,7232,16],[7829,13,7232,17,"auth"],[7829,17,7232,21],[7829,18,7232,22,"_startProactiveRefresh"],[7829,40,7232,44],[7829,41,7232,45],[7829,42,7232,46],[7830,6,7233,8],[7830,7,7233,9],[7830,13,7234,13],[7831,8,7235,12],[7831,12,7235,16],[7831,13,7235,17,"auth"],[7831,17,7235,21],[7831,18,7235,22,"_stopProactiveRefresh"],[7831,39,7235,43],[7831,40,7235,44],[7831,41,7235,45],[7832,6,7236,8],[7833,4,7237,4],[7834,2,7238,0],[7836,2,7240,0],[7837,0,7241,0],[7838,0,7242,0],[7839,0,7243,0],[7840,0,7244,0],[7841,0,7245,0],[7842,0,7246,0],[7843,0,7247,0],[7844,0,7248,0],[7845,0,7249,0],[7846,0,7250,0],[7847,0,7251,0],[7848,0,7252,0],[7849,0,7253,0],[7850,0,7254,0],[7851,0,7255,0],[7852,2,7256,0],[7852,11,7256,9,"getVersionForPlatform"],[7852,32,7256,30,"getVersionForPlatform"],[7852,33,7256,31,"clientPlatform"],[7852,47,7256,45],[7852,49,7256,47],[7853,4,7257,4],[7853,12,7257,12,"clientPlatform"],[7853,26,7257,26],[7854,6,7258,8],[7854,11,7258,13],[7854,17,7258,19],[7854,18,7258,20],[7855,8,7259,12],[7855,15,7259,19],[7855,21,7259,25],[7856,6,7260,8],[7856,11,7260,13],[7856,24,7260,26],[7856,25,7260,27],[7857,8,7261,12],[7857,15,7261,19],[7857,19,7261,23],[7858,6,7262,8],[7858,11,7262,13],[7858,19,7262,21],[7858,20,7262,22],[7859,8,7263,12],[7859,15,7263,19],[7859,26,7263,30],[7860,6,7264,8],[7860,11,7264,13],[7860,20,7264,22],[7860,21,7264,23],[7861,8,7265,12],[7861,15,7265,19],[7861,24,7265,28],[7862,6,7266,8],[7862,11,7266,13],[7862,25,7266,27],[7862,26,7266,28],[7863,8,7267,12],[7863,15,7267,19],[7863,30,7267,34],[7864,6,7268,8],[7865,8,7269,12],[7865,15,7269,19,"undefined"],[7865,24,7269,28],[7866,4,7270,4],[7867,2,7271,0],[7868,2,7272,0],[7869,2,7273,0],[7869,11,7273,9,"registerAuth"],[7869,23,7273,21,"registerAuth"],[7869,24,7273,22,"clientPlatform"],[7869,38,7273,36],[7869,40,7273,38],[7870,4,7274,4],[7870,8,7274,4,"_registerComponent"],[7870,20,7274,22],[7870,21,7274,22,"_registerComponent"],[7870,39,7274,22],[7870,41,7274,23],[7870,45,7274,27,"Component"],[7870,63,7274,36],[7870,64,7274,36,"Component"],[7870,73,7274,36],[7870,74,7274,37],[7870,80,7274,43],[7870,81,7274,44],[7870,108,7274,71],[7870,109,7274,72,"container"],[7870,118,7274,81],[7870,120,7274,83],[7871,6,7274,85,"options"],[7871,13,7274,92],[7871,15,7274,94,"deps"],[7872,4,7274,99],[7872,5,7274,100],[7872,10,7274,105],[7873,6,7275,8],[7873,12,7275,14,"app"],[7873,15,7275,17],[7873,18,7275,20,"container"],[7873,27,7275,29],[7873,28,7275,30,"getProvider"],[7873,39,7275,41],[7873,40,7275,42],[7873,45,7275,47],[7873,46,7275,48],[7873,47,7275,49,"getImmediate"],[7873,59,7275,61],[7873,60,7275,62],[7873,61,7275,63],[7874,6,7276,8],[7874,12,7276,14,"heartbeatServiceProvider"],[7874,36,7276,38],[7874,39,7276,41,"container"],[7874,48,7276,50],[7874,49,7276,51,"getProvider"],[7874,60,7276,62],[7874,61,7276,63],[7874,72,7276,74],[7874,73,7276,75],[7875,6,7277,8],[7875,12,7277,14,"appCheckServiceProvider"],[7875,35,7277,37],[7875,38,7277,40,"container"],[7875,47,7277,49],[7875,48,7277,50,"getProvider"],[7875,59,7277,61],[7875,60,7277,62],[7875,80,7277,82],[7875,81,7277,83],[7876,6,7278,8],[7876,12,7278,14],[7877,8,7278,16,"apiKey"],[7877,14,7278,22],[7878,8,7278,24,"authDomain"],[7879,6,7278,35],[7879,7,7278,36],[7879,10,7278,39,"app"],[7879,13,7278,42],[7879,14,7278,43,"options"],[7879,21,7278,50],[7880,6,7279,8,"_assert"],[7880,13,7279,15],[7880,14,7279,16,"apiKey"],[7880,20,7279,22],[7880,24,7279,26],[7880,25,7279,27,"apiKey"],[7880,31,7279,33],[7880,32,7279,34,"includes"],[7880,40,7279,42],[7880,41,7279,43],[7880,44,7279,46],[7880,45,7279,47],[7880,47,7279,49],[7880,64,7279,66],[7880,65,7279,67],[7880,102,7279,104],[7881,8,7279,106,"appName"],[7881,15,7279,113],[7881,17,7279,115,"app"],[7881,20,7279,118],[7881,21,7279,119,"name"],[7882,6,7279,124],[7882,7,7279,125],[7882,8,7279,126],[7883,6,7280,8],[7883,12,7280,14,"config"],[7883,18,7280,20],[7883,21,7280,23],[7884,8,7281,12,"apiKey"],[7884,14,7281,18],[7885,8,7282,12,"authDomain"],[7885,18,7282,22],[7886,8,7283,12,"clientPlatform"],[7886,22,7283,26],[7887,8,7284,12,"apiHost"],[7887,15,7284,19],[7887,17,7284,21],[7887,49,7284,53],[7887,50,7284,54],[7888,8,7285,12,"tokenApiHost"],[7888,20,7285,24],[7888,22,7285,26],[7888,50,7285,54],[7888,51,7285,55],[7889,8,7286,12,"apiScheme"],[7889,17,7286,21],[7889,19,7286,23],[7889,26,7286,30],[7889,27,7286,31],[7890,8,7287,12,"sdkClientVersion"],[7890,24,7287,28],[7890,26,7287,30,"_getClientVersion"],[7890,43,7287,47],[7890,44,7287,48,"clientPlatform"],[7890,58,7287,62],[7891,6,7288,8],[7891,7,7288,9],[7892,6,7289,8],[7892,12,7289,14,"authInstance"],[7892,24,7289,26],[7892,27,7289,29],[7892,31,7289,33,"AuthImpl"],[7892,39,7289,41],[7892,40,7289,42,"app"],[7892,43,7289,45],[7892,45,7289,47,"heartbeatServiceProvider"],[7892,69,7289,71],[7892,71,7289,73,"appCheckServiceProvider"],[7892,94,7289,96],[7892,96,7289,98,"config"],[7892,102,7289,104],[7892,103,7289,105],[7893,6,7290,8,"_initializeAuthInstance"],[7893,29,7290,31],[7893,30,7290,32,"authInstance"],[7893,42,7290,44],[7893,44,7290,46,"deps"],[7893,48,7290,50],[7893,49,7290,51],[7894,6,7291,8],[7894,13,7291,15,"authInstance"],[7894,25,7291,27],[7895,4,7292,4],[7895,5,7292,5],[7895,7,7292,7],[7895,15,7292,15],[7895,16,7292,16],[7895,42,7292,42],[7896,4,7293,8],[7897,0,7294,0],[7898,0,7295,0],[7899,0,7296,0],[7899,7,7293,8],[7899,8,7297,9,"setInstantiationMode"],[7899,28,7297,29],[7899,29,7297,30],[7899,39,7297,40],[7899,40,7297,41],[7899,72,7297,73],[7900,4,7298,8],[7901,0,7299,0],[7902,0,7300,0],[7903,0,7301,0],[7903,7,7298,8],[7903,8,7302,9,"setInstanceCreatedCallback"],[7903,34,7302,35],[7903,35,7302,36],[7903,36,7302,37,"container"],[7903,45,7302,46],[7903,47,7302,48,"_instanceIdentifier"],[7903,66,7302,67],[7903,68,7302,69,"_instance"],[7903,77,7302,78],[7903,82,7302,83],[7904,6,7303,8],[7904,12,7303,14,"authInternalProvider"],[7904,32,7303,34],[7904,35,7303,37,"container"],[7904,44,7303,46],[7904,45,7303,47,"getProvider"],[7904,56,7303,58],[7904,57,7303,59],[7904,72,7303,74],[7904,73,7303,75],[7904,107,7303,109],[7904,108,7303,110],[7905,6,7304,8,"authInternalProvider"],[7905,26,7304,28],[7905,27,7304,29,"initialize"],[7905,37,7304,39],[7905,38,7304,40],[7905,39,7304,41],[7906,4,7305,4],[7906,5,7305,5],[7906,6,7305,6],[7906,7,7305,7],[7907,4,7306,4],[7907,8,7306,4,"_registerComponent"],[7907,20,7306,22],[7907,21,7306,22,"_registerComponent"],[7907,39,7306,22],[7907,41,7306,23],[7907,45,7306,27,"Component"],[7907,63,7306,36],[7907,64,7306,36,"Component"],[7907,73,7306,36],[7907,74,7306,37],[7907,89,7306,52],[7907,90,7306,53],[7907,126,7306,89,"container"],[7907,135,7306,98],[7907,139,7306,102],[7908,6,7307,8],[7908,12,7307,14,"auth"],[7908,16,7307,18],[7908,19,7307,21,"_castAuth"],[7908,28,7307,30],[7908,29,7307,31,"container"],[7908,38,7307,40],[7908,39,7307,41,"getProvider"],[7908,50,7307,52],[7908,51,7307,53],[7908,57,7307,59],[7908,58,7307,60],[7908,83,7307,85],[7908,84,7307,86],[7908,85,7307,87,"getImmediate"],[7908,97,7307,99],[7908,98,7307,100],[7908,99,7307,101],[7908,100,7307,102],[7909,6,7308,8],[7909,13,7308,15],[7909,14,7308,16,"auth"],[7909,18,7308,20],[7909,22,7308,24],[7909,26,7308,28,"AuthInterop"],[7909,37,7308,39],[7909,38,7308,40,"auth"],[7909,42,7308,44],[7909,43,7308,45],[7909,45,7308,47,"auth"],[7909,49,7308,51],[7909,50,7308,52],[7910,4,7309,4],[7910,5,7309,5],[7910,7,7309,7],[7910,16,7309,16],[7910,17,7309,17],[7910,44,7309,44],[7910,45,7309,45],[7910,46,7309,46,"setInstantiationMode"],[7910,66,7309,66],[7910,67,7309,67],[7910,77,7309,77],[7910,78,7309,78],[7910,110,7309,110],[7910,111,7309,111],[7910,112,7309,112],[7911,4,7310,4],[7911,8,7310,4,"registerVersion"],[7911,20,7310,19],[7911,21,7310,19,"registerVersion"],[7911,36,7310,19],[7911,38,7310,20,"name"],[7911,42,7310,24],[7911,44,7310,26,"version"],[7911,51,7310,33],[7911,53,7310,35,"getVersionForPlatform"],[7911,74,7310,56],[7911,75,7310,57,"clientPlatform"],[7911,89,7310,71],[7911,90,7310,72],[7911,91,7310,73],[7912,4,7311,4],[7913,4,7312,4],[7913,8,7312,4,"registerVersion"],[7913,20,7312,19],[7913,21,7312,19,"registerVersion"],[7913,36,7312,19],[7913,38,7312,20,"name"],[7913,42,7312,24],[7913,44,7312,26,"version"],[7913,51,7312,33],[7913,53,7312,35],[7913,62,7312,44],[7913,63,7312,45],[7914,2,7313,0],[7916,2,7315,0],[7917,0,7316,0],[7918,0,7317,0],[7919,0,7318,0],[7920,0,7319,0],[7921,0,7320,0],[7922,0,7321,0],[7923,0,7322,0],[7924,0,7323,0],[7925,0,7324,0],[7926,0,7325,0],[7927,0,7326,0],[7928,0,7327,0],[7929,0,7328,0],[7930,0,7329,0],[7931,0,7330,0],[7932,2,7331,0],[7933,2,7332,0,"FetchProvider"],[7933,15,7332,13],[7933,16,7332,14,"initialize"],[7933,26,7332,24],[7933,27,7332,25,"fetch"],[7933,32,7332,30],[7933,34,7332,32,"Headers"],[7933,41,7332,39],[7933,43,7332,41,"Response"],[7933,51,7332,49],[7933,52,7332,50],[7934,2,7333,0],[7935,2,7334,0],[7936,2,7335,0],[7936,11,7335,9,"getAuth"],[7936,18,7335,16,"getAuth"],[7936,19,7335,17,"app"],[7936,22,7335,20],[7936,25,7335,23],[7936,29,7335,23,"getApp"],[7936,41,7335,29],[7936,42,7335,29,"getApp"],[7936,48,7335,29],[7936,50,7335,30],[7936,51,7335,31],[7936,53,7335,33],[7937,4,7336,4],[7937,10,7336,10,"provider"],[7937,18,7336,18],[7937,21,7336,21],[7937,25,7336,21,"_getProvider"],[7937,37,7336,33],[7937,38,7336,33,"_getProvider"],[7937,50,7336,33],[7937,52,7336,34,"app"],[7937,55,7336,37],[7937,57,7336,39],[7937,63,7336,45],[7937,64,7336,46],[7938,4,7337,4],[7938,8,7337,8,"provider"],[7938,16,7337,16],[7938,17,7337,17,"isInitialized"],[7938,30,7337,30],[7938,31,7337,31],[7938,32,7337,32],[7938,34,7337,34],[7939,6,7338,8],[7939,13,7338,15,"provider"],[7939,21,7338,23],[7939,22,7338,24,"getImmediate"],[7939,34,7338,36],[7939,35,7338,37],[7939,36,7338,38],[7940,4,7339,4],[7941,4,7340,4],[7941,10,7340,10,"auth"],[7941,14,7340,14],[7941,17,7340,17,"initializeAuth"],[7941,31,7340,31],[7941,32,7340,32,"app"],[7941,35,7340,35],[7941,36,7340,36],[7942,4,7341,4],[7942,10,7341,10,"authEmulatorHost"],[7942,26,7341,26],[7942,29,7341,29],[7942,33,7341,29,"getDefaultEmulatorHost"],[7942,46,7341,51],[7942,47,7341,51,"getDefaultEmulatorHost"],[7942,69,7341,51],[7942,71,7341,52],[7942,77,7341,58],[7942,78,7341,59],[7943,4,7342,4],[7943,8,7342,8,"authEmulatorHost"],[7943,24,7342,24],[7943,26,7342,26],[7944,6,7343,8,"connectAuthEmulator"],[7944,25,7343,27],[7944,26,7343,28,"auth"],[7944,30,7343,32],[7944,32,7343,34],[7944,42,7343,44,"authEmulatorHost"],[7944,58,7343,60],[7944,60,7343,62],[7944,61,7343,63],[7945,4,7344,4],[7946,4,7345,4],[7946,11,7345,11,"auth"],[7946,15,7345,15],[7947,2,7346,0],[7948,2,7347,0,"registerAuth"],[7948,14,7347,12],[7948,15,7347,13],[7948,21,7347,19],[7948,22,7347,20],[7948,47,7347,45],[7948,48,7347,46],[7949,2,7348,0],[7950,2,7349,0],[7951,2,7350,0],[7952,2,7351,0],[7953,2,7352,0],[7954,2,7353,0],[7955,2,7354,0],[7956,2,7355,0],[7956,8,7355,6,"NOT_AVAILABLE_ERROR"],[7956,27,7355,25],[7956,30,7355,28,"_createError"],[7956,42,7355,40],[7956,43,7355,41],[7956,88,7355,86],[7956,89,7355,87],[7956,132,7355,130],[7956,133,7355,131],[7957,2,7356,0],[7958,2,7357,0],[7958,17,7357,15,"fail"],[7958,21,7357,19,"fail"],[7958,22,7357,19],[7958,24,7357,22],[7959,4,7358,4],[7959,10,7358,10,"NOT_AVAILABLE_ERROR"],[7959,29,7358,29],[7960,2,7359,0],[7961,2,7360,0],[7962,0,7361,0],[7963,0,7362,0],[7964,0,7363,0],[7965,2,7364,0],[7965,8,7364,6,"FailClass"],[7965,17,7364,15],[7965,18,7364,16],[7966,4,7365,4,"constructor"],[7966,15,7365,15,"constructor"],[7966,16,7365,15],[7966,18,7365,18],[7967,6,7366,8],[7967,12,7366,14,"NOT_AVAILABLE_ERROR"],[7967,31,7366,33],[7968,4,7367,4],[7969,2,7368,0],[7970,2,7369,0],[7970,8,7369,6,"browserLocalPersistence"],[7970,31,7369,29],[7970,34,7369,32,"inMemoryPersistence"],[7970,53,7369,51],[7971,2,7370,0],[7971,8,7370,6,"browserSessionPersistence"],[7971,33,7370,31],[7971,36,7370,34,"inMemoryPersistence"],[7971,55,7370,53],[7972,2,7371,0],[7972,8,7371,6,"browserCookiePersistence"],[7972,32,7371,30],[7972,35,7371,33,"inMemoryPersistence"],[7972,54,7371,52],[7973,2,7372,0],[7973,8,7372,6,"indexedDBLocalPersistence"],[7973,33,7372,31],[7973,36,7372,34,"inMemoryPersistence"],[7973,55,7372,53],[7974,2,7373,0],[7974,8,7373,6,"browserPopupRedirectResolver"],[7974,36,7373,34],[7974,39,7373,37,"NOT_AVAILABLE_ERROR"],[7974,58,7373,56],[7975,2,7374,0],[7975,8,7374,6,"PhoneAuthProvider"],[7975,25,7374,23],[7975,28,7374,26,"FailClass"],[7975,37,7374,35],[7976,2,7375,0],[7976,8,7375,6,"signInWithPhoneNumber"],[7976,29,7375,27],[7976,32,7375,30,"fail"],[7976,36,7375,34],[7977,2,7376,0],[7977,8,7376,6,"linkWithPhoneNumber"],[7977,27,7376,25],[7977,30,7376,28,"fail"],[7977,34,7376,32],[7978,2,7377,0],[7978,8,7377,6,"reauthenticateWithPhoneNumber"],[7978,37,7377,35],[7978,40,7377,38,"fail"],[7978,44,7377,42],[7979,2,7378,0],[7979,8,7378,6,"updatePhoneNumber"],[7979,25,7378,23],[7979,28,7378,26,"fail"],[7979,32,7378,30],[7980,2,7379,0],[7980,8,7379,6,"signInWithPopup"],[7980,23,7379,21],[7980,26,7379,24,"fail"],[7980,30,7379,28],[7981,2,7380,0],[7981,8,7380,6,"linkWithPopup"],[7981,21,7380,19],[7981,24,7380,22,"fail"],[7981,28,7380,26],[7982,2,7381,0],[7982,8,7381,6,"reauthenticateWithPopup"],[7982,31,7381,29],[7982,34,7381,32,"fail"],[7982,38,7381,36],[7983,2,7382,0],[7983,8,7382,6,"signInWithRedirect"],[7983,26,7382,24],[7983,29,7382,27,"fail"],[7983,33,7382,31],[7984,2,7383,0],[7984,8,7383,6,"linkWithRedirect"],[7984,24,7383,22],[7984,27,7383,25,"fail"],[7984,31,7383,29],[7985,2,7384,0],[7985,8,7384,6,"reauthenticateWithRedirect"],[7985,34,7384,32],[7985,37,7384,35,"fail"],[7985,41,7384,39],[7986,2,7385,0],[7986,8,7385,6,"getRedirectResult"],[7986,25,7385,23],[7986,28,7385,26,"fail"],[7986,32,7385,30],[7987,2,7386,0],[7987,8,7386,6,"RecaptchaVerifier"],[7987,25,7386,23],[7987,28,7386,26,"FailClass"],[7987,37,7386,35],[7988,2,7387,0],[7988,8,7387,6,"PhoneMultiFactorGenerator"],[7988,33,7387,31],[7988,34,7387,32],[7989,4,7388,4],[7989,11,7388,11,"assertion"],[7989,20,7388,20,"assertion"],[7989,21,7388,20],[7989,23,7388,23],[7990,6,7389,8],[7990,12,7389,14,"NOT_AVAILABLE_ERROR"],[7990,31,7389,33],[7991,4,7390,4],[7992,2,7391,0],[7993,2,7392,0],[7994,2,7393,0],[7995,2,7394,0],[7996,2,7395,0,"AuthImpl"],[7996,10,7395,8],[7996,11,7395,9,"prototype"],[7996,20,7395,18],[7996,21,7395,19,"setPersistence"],[7996,35,7395,33],[7996,38,7395,36],[7996,50,7395,48],[7996,51,7395,50],[7996,52,7395,51],[7998,2,7397,0],[7999,0,7398,0],[8000,0,7399,0],[8001,0,7400,0],[8002,0,7401,0],[8003,0,7402,0],[8004,0,7403,0],[8005,0,7404,0],[8006,0,7405,0],[8007,0,7406,0],[8008,0,7407,0],[8009,0,7408,0],[8010,0,7409,0],[8011,0,7410,0],[8012,0,7411,0],[8013,0,7412,0],[8014,2,7413,0],[8014,11,7413,9,"finalizeSignInTotpMfa"],[8014,32,7413,30,"finalizeSignInTotpMfa"],[8014,33,7413,31,"auth"],[8014,37,7413,35],[8014,39,7413,37,"request"],[8014,46,7413,44],[8014,48,7413,46],[8015,4,7414,4],[8015,11,7414,11,"_performApiRequest"],[8015,29,7414,29],[8015,30,7414,30,"auth"],[8015,34,7414,34],[8015,36,7414,36],[8015,42,7414,42],[8015,43,7414,43],[8015,66,7414,66],[8015,99,7414,99],[8015,100,7414,100],[8015,137,7414,137,"_addTidIfNecessary"],[8015,155,7414,155],[8015,156,7414,156,"auth"],[8015,160,7414,160],[8015,162,7414,162,"request"],[8015,169,7414,169],[8015,170,7414,170],[8015,171,7414,171],[8016,2,7415,0],[8017,2,7417,0],[8017,8,7417,6,"MultiFactorAssertionImpl"],[8017,32,7417,30],[8017,33,7417,31],[8018,4,7418,4,"constructor"],[8018,15,7418,15,"constructor"],[8018,16,7418,16,"factorId"],[8018,24,7418,24],[8018,26,7418,26],[8019,6,7419,8],[8019,10,7419,12],[8019,11,7419,13,"factorId"],[8019,19,7419,21],[8019,22,7419,24,"factorId"],[8019,30,7419,32],[8020,4,7420,4],[8021,4,7421,4,"_process"],[8021,12,7421,12,"_process"],[8021,13,7421,13,"auth"],[8021,17,7421,17],[8021,19,7421,19,"session"],[8021,26,7421,26],[8021,28,7421,28,"displayName"],[8021,39,7421,39],[8021,41,7421,41],[8022,6,7422,8],[8022,14,7422,16,"session"],[8022,21,7422,23],[8022,22,7422,24,"type"],[8022,26,7422,28],[8023,8,7423,12],[8023,13,7423,17],[8023,21,7423,25],[8023,22,7423,26],[8024,10,7424,16],[8024,17,7424,23],[8024,21,7424,27],[8024,22,7424,28,"_finalizeEnroll"],[8024,37,7424,43],[8024,38,7424,44,"auth"],[8024,42,7424,48],[8024,44,7424,50,"session"],[8024,51,7424,57],[8024,52,7424,58,"credential"],[8024,62,7424,68],[8024,64,7424,70,"displayName"],[8024,75,7424,81],[8024,76,7424,82],[8025,8,7425,12],[8025,13,7425,17],[8025,21,7425,25],[8025,22,7425,26],[8026,10,7426,16],[8026,17,7426,23],[8026,21,7426,27],[8026,22,7426,28,"_finalizeSignIn"],[8026,37,7426,43],[8026,38,7426,44,"auth"],[8026,42,7426,48],[8026,44,7426,50,"session"],[8026,51,7426,57],[8026,52,7426,58,"credential"],[8026,62,7426,68],[8026,63,7426,69],[8027,8,7427,12],[8028,10,7428,16],[8028,17,7428,23,"debugFail"],[8028,26,7428,32],[8028,27,7428,33],[8028,62,7428,68],[8028,63,7428,69],[8029,6,7429,8],[8030,4,7430,4],[8031,2,7431,0],[8033,2,7433,0],[8034,0,7434,0],[8035,0,7435,0],[8036,0,7436,0],[8037,0,7437,0],[8038,2,7438,0],[8038,8,7438,6,"TotpMultiFactorGenerator"],[8038,32,7438,30],[8038,33,7438,31],[8039,4,7439,4],[8040,0,7440,0],[8041,0,7441,0],[8042,0,7442,0],[8043,0,7443,0],[8044,0,7444,0],[8045,0,7445,0],[8046,0,7446,0],[8047,0,7447,0],[8048,0,7448,0],[8049,4,7449,4],[8049,11,7449,11,"assertionForEnrollment"],[8049,33,7449,33,"assertionForEnrollment"],[8049,34,7449,34,"secret"],[8049,40,7449,40],[8049,42,7449,42,"oneTimePassword"],[8049,57,7449,57],[8049,59,7449,59],[8050,6,7450,8],[8050,13,7450,15,"TotpMultiFactorAssertionImpl"],[8050,41,7450,43],[8050,42,7450,44,"_fromSecret"],[8050,53,7450,55],[8050,54,7450,56,"secret"],[8050,60,7450,62],[8050,62,7450,64,"oneTimePassword"],[8050,77,7450,79],[8050,78,7450,80],[8051,4,7451,4],[8052,4,7452,4],[8053,0,7453,0],[8054,0,7454,0],[8055,0,7455,0],[8056,0,7456,0],[8057,0,7457,0],[8058,0,7458,0],[8059,0,7459,0],[8060,0,7460,0],[8061,4,7461,4],[8061,11,7461,11,"assertionForSignIn"],[8061,29,7461,29,"assertionForSignIn"],[8061,30,7461,30,"enrollmentId"],[8061,42,7461,42],[8061,44,7461,44,"oneTimePassword"],[8061,59,7461,59],[8061,61,7461,61],[8062,6,7462,8],[8062,13,7462,15,"TotpMultiFactorAssertionImpl"],[8062,41,7462,43],[8062,42,7462,44,"_fromEnrollmentId"],[8062,59,7462,61],[8062,60,7462,62,"enrollmentId"],[8062,72,7462,74],[8062,74,7462,76,"oneTimePassword"],[8062,89,7462,91],[8062,90,7462,92],[8063,4,7463,4],[8064,4,7464,4],[8065,0,7465,0],[8066,0,7466,0],[8067,0,7467,0],[8068,0,7468,0],[8069,0,7469,0],[8070,0,7470,0],[8071,0,7471,0],[8072,0,7472,0],[8073,4,7473,4],[8073,17,7473,17,"generateSecret"],[8073,31,7473,31,"generateSecret"],[8073,32,7473,32,"session"],[8073,39,7473,39],[8073,41,7473,41],[8074,6,7474,8],[8074,12,7474,14,"mfaSession"],[8074,22,7474,24],[8074,25,7474,27,"session"],[8074,32,7474,34],[8075,6,7475,8,"_assert"],[8075,13,7475,15],[8075,14,7475,16],[8075,21,7475,23,"mfaSession"],[8075,31,7475,33],[8075,32,7475,34,"user"],[8075,36,7475,38],[8075,38,7475,40,"auth"],[8075,42,7475,44],[8075,47,7475,49],[8075,58,7475,60],[8075,60,7475,62],[8075,76,7475,78],[8075,77,7475,79],[8075,111,7475,113],[8075,112,7475,114],[8076,6,7476,8],[8076,12,7476,14,"response"],[8076,20,7476,22],[8076,23,7476,25],[8076,29,7476,31,"startEnrollTotpMfa"],[8076,47,7476,49],[8076,48,7476,50,"mfaSession"],[8076,58,7476,60],[8076,59,7476,61,"user"],[8076,63,7476,65],[8076,64,7476,66,"auth"],[8076,68,7476,70],[8076,70,7476,72],[8077,8,7477,12,"idToken"],[8077,15,7477,19],[8077,17,7477,21,"mfaSession"],[8077,27,7477,31],[8077,28,7477,32,"credential"],[8077,38,7477,42],[8078,8,7478,12,"totpEnrollmentInfo"],[8078,26,7478,30],[8078,28,7478,32],[8078,29,7478,33],[8079,6,7479,8],[8079,7,7479,9],[8079,8,7479,10],[8080,6,7480,8],[8080,13,7480,15,"TotpSecret"],[8080,23,7480,25],[8080,24,7480,26,"_fromStartTotpMfaEnrollmentResponse"],[8080,59,7480,61],[8080,60,7480,62,"response"],[8080,68,7480,70],[8080,70,7480,72,"mfaSession"],[8080,80,7480,82],[8080,81,7480,83,"user"],[8080,85,7480,87],[8080,86,7480,88,"auth"],[8080,90,7480,92],[8080,91,7480,93],[8081,4,7481,4],[8082,2,7482,0],[8083,2,7483,0],[8084,0,7484,0],[8085,0,7485,0],[8086,2,7486,0,"TotpMultiFactorGenerator"],[8086,26,7486,24],[8086,27,7486,25,"FACTOR_ID"],[8086,36,7486,34],[8086,39,7486,37],[8086,45,7486,43],[8086,46,7486,44],[8087,2,7487,0],[8087,8,7487,6,"TotpMultiFactorAssertionImpl"],[8087,36,7487,34],[8087,45,7487,43,"MultiFactorAssertionImpl"],[8087,69,7487,67],[8087,70,7487,68],[8088,4,7488,4,"constructor"],[8088,15,7488,15,"constructor"],[8088,16,7488,16,"otp"],[8088,19,7488,19],[8088,21,7488,21,"enrollmentId"],[8088,33,7488,33],[8088,35,7488,35,"secret"],[8088,41,7488,41],[8088,43,7488,43],[8089,6,7489,8],[8089,11,7489,13],[8089,12,7489,14],[8089,18,7489,20],[8089,19,7489,21],[8089,38,7489,40],[8089,39,7489,41],[8090,6,7490,8],[8090,10,7490,12],[8090,11,7490,13,"otp"],[8090,14,7490,16],[8090,17,7490,19,"otp"],[8090,20,7490,22],[8091,6,7491,8],[8091,10,7491,12],[8091,11,7491,13,"enrollmentId"],[8091,23,7491,25],[8091,26,7491,28,"enrollmentId"],[8091,38,7491,40],[8092,6,7492,8],[8092,10,7492,12],[8092,11,7492,13,"secret"],[8092,17,7492,19],[8092,20,7492,22,"secret"],[8092,26,7492,28],[8093,4,7493,4],[8094,4,7494,4],[8095,4,7495,4],[8095,11,7495,11,"_fromSecret"],[8095,22,7495,22,"_fromSecret"],[8095,23,7495,23,"secret"],[8095,29,7495,29],[8095,31,7495,31,"otp"],[8095,34,7495,34],[8095,36,7495,36],[8096,6,7496,8],[8096,13,7496,15],[8096,17,7496,19,"TotpMultiFactorAssertionImpl"],[8096,45,7496,47],[8096,46,7496,48,"otp"],[8096,49,7496,51],[8096,51,7496,53,"undefined"],[8096,60,7496,62],[8096,62,7496,64,"secret"],[8096,68,7496,70],[8096,69,7496,71],[8097,4,7497,4],[8098,4,7498,4],[8099,4,7499,4],[8099,11,7499,11,"_fromEnrollmentId"],[8099,28,7499,28,"_fromEnrollmentId"],[8099,29,7499,29,"enrollmentId"],[8099,41,7499,41],[8099,43,7499,43,"otp"],[8099,46,7499,46],[8099,48,7499,48],[8100,6,7500,8],[8100,13,7500,15],[8100,17,7500,19,"TotpMultiFactorAssertionImpl"],[8100,45,7500,47],[8100,46,7500,48,"otp"],[8100,49,7500,51],[8100,51,7500,53,"enrollmentId"],[8100,63,7500,65],[8100,64,7500,66],[8101,4,7501,4],[8102,4,7502,4],[8103,4,7503,4],[8103,10,7503,10,"_finalizeEnroll"],[8103,25,7503,25,"_finalizeEnroll"],[8103,26,7503,26,"auth"],[8103,30,7503,30],[8103,32,7503,32,"idToken"],[8103,39,7503,39],[8103,41,7503,41,"displayName"],[8103,52,7503,52],[8103,54,7503,54],[8104,6,7504,8,"_assert"],[8104,13,7504,15],[8104,14,7504,16],[8104,21,7504,23],[8104,25,7504,27],[8104,26,7504,28,"secret"],[8104,32,7504,34],[8104,37,7504,39],[8104,48,7504,50],[8104,50,7504,52,"auth"],[8104,54,7504,56],[8104,56,7504,58],[8104,72,7504,74],[8104,73,7504,75],[8104,107,7504,109],[8104,108,7504,110],[8105,6,7505,8],[8105,13,7505,15,"finalizeEnrollTotpMfa"],[8105,34,7505,36],[8105,35,7505,37,"auth"],[8105,39,7505,41],[8105,41,7505,43],[8106,8,7506,12,"idToken"],[8106,15,7506,19],[8107,8,7507,12,"displayName"],[8107,19,7507,23],[8108,8,7508,12,"totpVerificationInfo"],[8108,28,7508,32],[8108,30,7508,34],[8108,34,7508,38],[8108,35,7508,39,"secret"],[8108,41,7508,45],[8108,42,7508,46,"_makeTotpVerificationInfo"],[8108,67,7508,71],[8108,68,7508,72],[8108,72,7508,76],[8108,73,7508,77,"otp"],[8108,76,7508,80],[8109,6,7509,8],[8109,7,7509,9],[8109,8,7509,10],[8110,4,7510,4],[8111,4,7511,4],[8112,4,7512,4],[8112,10,7512,10,"_finalizeSignIn"],[8112,25,7512,25,"_finalizeSignIn"],[8112,26,7512,26,"auth"],[8112,30,7512,30],[8112,32,7512,32,"mfaPendingCredential"],[8112,52,7512,52],[8112,54,7512,54],[8113,6,7513,8,"_assert"],[8113,13,7513,15],[8113,14,7513,16],[8113,18,7513,20],[8113,19,7513,21,"enrollmentId"],[8113,31,7513,33],[8113,36,7513,38,"undefined"],[8113,45,7513,47],[8113,49,7513,51],[8113,53,7513,55],[8113,54,7513,56,"otp"],[8113,57,7513,59],[8113,62,7513,64,"undefined"],[8113,71,7513,73],[8113,73,7513,75,"auth"],[8113,77,7513,79],[8113,79,7513,81],[8113,95,7513,97],[8113,96,7513,98],[8113,130,7513,132],[8113,131,7513,133],[8114,6,7514,8],[8114,12,7514,14,"totpVerificationInfo"],[8114,32,7514,34],[8114,35,7514,37],[8115,8,7514,39,"verificationCode"],[8115,24,7514,55],[8115,26,7514,57],[8115,30,7514,61],[8115,31,7514,62,"otp"],[8116,6,7514,66],[8116,7,7514,67],[8117,6,7515,8],[8117,13,7515,15,"finalizeSignInTotpMfa"],[8117,34,7515,36],[8117,35,7515,37,"auth"],[8117,39,7515,41],[8117,41,7515,43],[8118,8,7516,12,"mfaPendingCredential"],[8118,28,7516,32],[8119,8,7517,12,"mfaEnrollmentId"],[8119,23,7517,27],[8119,25,7517,29],[8119,29,7517,33],[8119,30,7517,34,"enrollmentId"],[8119,42,7517,46],[8120,8,7518,12,"totpVerificationInfo"],[8121,6,7519,8],[8121,7,7519,9],[8121,8,7519,10],[8122,4,7520,4],[8123,2,7521,0],[8124,2,7522,0],[8125,0,7523,0],[8126,0,7524,0],[8127,0,7525,0],[8128,0,7526,0],[8129,0,7527,0],[8130,0,7528,0],[8131,2,7529,0],[8131,8,7529,6,"TotpSecret"],[8131,18,7529,16],[8131,19,7529,17],[8132,4,7530,4],[8133,4,7531,4,"constructor"],[8133,15,7531,15,"constructor"],[8133,16,7531,16,"secretKey"],[8133,25,7531,25],[8133,27,7531,27,"hashingAlgorithm"],[8133,43,7531,43],[8133,45,7531,45,"codeLength"],[8133,55,7531,55],[8133,57,7531,57,"codeIntervalSeconds"],[8133,76,7531,76],[8133,78,7531,78,"enrollmentCompletionDeadline"],[8133,106,7531,106],[8133,108,7531,108,"sessionInfo"],[8133,119,7531,119],[8133,121,7531,121,"auth"],[8133,125,7531,125],[8133,127,7531,127],[8134,6,7532,8],[8134,10,7532,12],[8134,11,7532,13,"sessionInfo"],[8134,22,7532,24],[8134,25,7532,27,"sessionInfo"],[8134,36,7532,38],[8135,6,7533,8],[8135,10,7533,12],[8135,11,7533,13,"auth"],[8135,15,7533,17],[8135,18,7533,20,"auth"],[8135,22,7533,24],[8136,6,7534,8],[8136,10,7534,12],[8136,11,7534,13,"secretKey"],[8136,20,7534,22],[8136,23,7534,25,"secretKey"],[8136,32,7534,34],[8137,6,7535,8],[8137,10,7535,12],[8137,11,7535,13,"hashingAlgorithm"],[8137,27,7535,29],[8137,30,7535,32,"hashingAlgorithm"],[8137,46,7535,48],[8138,6,7536,8],[8138,10,7536,12],[8138,11,7536,13,"codeLength"],[8138,21,7536,23],[8138,24,7536,26,"codeLength"],[8138,34,7536,36],[8139,6,7537,8],[8139,10,7537,12],[8139,11,7537,13,"codeIntervalSeconds"],[8139,30,7537,32],[8139,33,7537,35,"codeIntervalSeconds"],[8139,52,7537,54],[8140,6,7538,8],[8140,10,7538,12],[8140,11,7538,13,"enrollmentCompletionDeadline"],[8140,39,7538,41],[8140,42,7538,44,"enrollmentCompletionDeadline"],[8140,70,7538,72],[8141,4,7539,4],[8142,4,7540,4],[8143,4,7541,4],[8143,11,7541,11,"_fromStartTotpMfaEnrollmentResponse"],[8143,46,7541,46,"_fromStartTotpMfaEnrollmentResponse"],[8143,47,7541,47,"response"],[8143,55,7541,55],[8143,57,7541,57,"auth"],[8143,61,7541,61],[8143,63,7541,63],[8144,6,7542,8],[8144,13,7542,15],[8144,17,7542,19,"TotpSecret"],[8144,27,7542,29],[8144,28,7542,30,"response"],[8144,36,7542,38],[8144,37,7542,39,"totpSessionInfo"],[8144,52,7542,54],[8144,53,7542,55,"sharedSecretKey"],[8144,68,7542,70],[8144,70,7542,72,"response"],[8144,78,7542,80],[8144,79,7542,81,"totpSessionInfo"],[8144,94,7542,96],[8144,95,7542,97,"hashingAlgorithm"],[8144,111,7542,113],[8144,113,7542,115,"response"],[8144,121,7542,123],[8144,122,7542,124,"totpSessionInfo"],[8144,137,7542,139],[8144,138,7542,140,"verificationCodeLength"],[8144,160,7542,162],[8144,162,7542,164,"response"],[8144,170,7542,172],[8144,171,7542,173,"totpSessionInfo"],[8144,186,7542,188],[8144,187,7542,189,"periodSec"],[8144,196,7542,198],[8144,198,7542,200],[8144,202,7542,204,"Date"],[8144,206,7542,208],[8144,207,7542,209,"response"],[8144,215,7542,217],[8144,216,7542,218,"totpSessionInfo"],[8144,231,7542,233],[8144,232,7542,234,"finalizeEnrollmentTime"],[8144,254,7542,256],[8144,255,7542,257],[8144,256,7542,258,"toUTCString"],[8144,267,7542,269],[8144,268,7542,270],[8144,269,7542,271],[8144,271,7542,273,"response"],[8144,279,7542,281],[8144,280,7542,282,"totpSessionInfo"],[8144,295,7542,297],[8144,296,7542,298,"sessionInfo"],[8144,307,7542,309],[8144,309,7542,311,"auth"],[8144,313,7542,315],[8144,314,7542,316],[8145,4,7543,4],[8146,4,7544,4],[8147,4,7545,4,"_makeTotpVerificationInfo"],[8147,29,7545,29,"_makeTotpVerificationInfo"],[8147,30,7545,30,"otp"],[8147,33,7545,33],[8147,35,7545,35],[8148,6,7546,8],[8148,13,7546,15],[8149,8,7546,17,"sessionInfo"],[8149,19,7546,28],[8149,21,7546,30],[8149,25,7546,34],[8149,26,7546,35,"sessionInfo"],[8149,37,7546,46],[8150,8,7546,48,"verificationCode"],[8150,24,7546,64],[8150,26,7546,66,"otp"],[8151,6,7546,70],[8151,7,7546,71],[8152,4,7547,4],[8153,4,7548,4],[8154,0,7549,0],[8155,0,7550,0],[8156,0,7551,0],[8157,0,7552,0],[8158,0,7553,0],[8159,0,7554,0],[8160,0,7555,0],[8161,0,7556,0],[8162,0,7557,0],[8163,4,7558,4,"generateQrCodeUrl"],[8163,21,7558,21,"generateQrCodeUrl"],[8163,22,7558,22,"accountName"],[8163,33,7558,33],[8163,35,7558,35,"issuer"],[8163,41,7558,41],[8163,43,7558,43],[8164,6,7559,8],[8164,10,7559,12,"useDefaults"],[8164,21,7559,23],[8164,24,7559,26],[8164,29,7559,31],[8165,6,7560,8],[8165,10,7560,12,"_isEmptyString"],[8165,24,7560,26],[8165,25,7560,27,"accountName"],[8165,36,7560,38],[8165,37,7560,39],[8165,41,7560,43,"_isEmptyString"],[8165,55,7560,57],[8165,56,7560,58,"issuer"],[8165,62,7560,64],[8165,63,7560,65],[8165,65,7560,67],[8166,8,7561,12,"useDefaults"],[8166,19,7561,23],[8166,22,7561,26],[8166,26,7561,30],[8167,6,7562,8],[8168,6,7563,8],[8168,10,7563,12,"useDefaults"],[8168,21,7563,23],[8168,23,7563,25],[8169,8,7564,12],[8169,12,7564,16,"_isEmptyString"],[8169,26,7564,30],[8169,27,7564,31,"accountName"],[8169,38,7564,42],[8169,39,7564,43],[8169,41,7564,45],[8170,10,7565,16,"accountName"],[8170,21,7565,27],[8170,24,7565,30],[8170,28,7565,34],[8170,29,7565,35,"auth"],[8170,33,7565,39],[8170,34,7565,40,"currentUser"],[8170,45,7565,51],[8170,47,7565,53,"email"],[8170,52,7565,58],[8170,56,7565,62],[8170,69,7565,75],[8171,8,7566,12],[8172,8,7567,12],[8172,12,7567,16,"_isEmptyString"],[8172,26,7567,30],[8172,27,7567,31,"issuer"],[8172,33,7567,37],[8172,34,7567,38],[8172,36,7567,40],[8173,10,7568,16,"issuer"],[8173,16,7568,22],[8173,19,7568,25],[8173,23,7568,29],[8173,24,7568,30,"auth"],[8173,28,7568,34],[8173,29,7568,35,"name"],[8173,33,7568,39],[8174,8,7569,12],[8175,6,7570,8],[8176,6,7571,8],[8176,13,7571,15],[8176,31,7571,33,"issuer"],[8176,37,7571,39],[8176,41,7571,43,"accountName"],[8176,52,7571,54],[8176,63,7571,65],[8176,67,7571,69],[8176,68,7571,70,"secretKey"],[8176,77,7571,79],[8176,88,7571,90,"issuer"],[8176,94,7571,96],[8176,108,7571,110],[8176,112,7571,114],[8176,113,7571,115,"hashingAlgorithm"],[8176,129,7571,131],[8176,140,7571,142],[8176,144,7571,146],[8176,145,7571,147,"codeLength"],[8176,155,7571,157],[8176,157,7571,159],[8177,4,7572,4],[8178,2,7573,0],[8179,2,7574,0],[8180,2,7575,0],[8180,11,7575,9,"_isEmptyString"],[8180,25,7575,23,"_isEmptyString"],[8180,26,7575,24,"input"],[8180,31,7575,29],[8180,33,7575,31],[8181,4,7576,4],[8181,11,7576,11],[8181,18,7576,18,"input"],[8181,23,7576,23],[8181,28,7576,28],[8181,39,7576,39],[8181,43,7576,43,"input"],[8181,48,7576,48],[8181,50,7576,50,"length"],[8181,56,7576,56],[8181,61,7576,61],[8181,62,7576,62],[8182,2,7577,0],[8183,0,7577,1],[8183,3]],"functionMap":{"names":["<global>","_debugErrorMap","_prodErrorMap","_logWarn","_logError","_fail","_createError","_errorWithCustomMessage","_serverAppCurrentUserOperationNotSupportedError","createErrorInternal","_assert","debugFail","debugAssert","_getCurrentUrl","_isHttpOrHttps","_getCurrentScheme","_isOnline","_getUserLanguage","Delay","Delay#constructor","Delay#get","_emulatorUrl","FetchProvider","FetchProvider.initialize","FetchProvider.fetch","FetchProvider.headers","FetchProvider.response","_addTidIfNecessary","_performApiRequest","_performFetchWithErrorHandling$argument_2","_performFetchWithErrorHandling","_performSignInRequest","_getFinalTarget","_parseEnforcementState","NetworkTimeout","NetworkTimeout#clearNetworkTimeout","NetworkTimeout#constructor","Promise$argument_0","setTimeout$argument_0","_makeTaggedError","isEnterprise","RecaptchaConfig","RecaptchaConfig#constructor","RecaptchaConfig#getProviderEnforcementState","RecaptchaConfig#isProviderEnabled","RecaptchaConfig#isAnyProviderEnabled","getRecaptchaConfig","deleteAccount","deleteLinkedAccounts","getAccountInfo","utcTimestampToDateString","getIdToken","getIdTokenResult","secondsStringToMilliseconds","_parseToken","_tokenExpiresIn","_logoutIfInvalidated","isUserInvalidated","ProactiveRefresh","ProactiveRefresh#constructor","ProactiveRefresh#_start","ProactiveRefresh#_stop","ProactiveRefresh#getInterval","ProactiveRefresh#schedule","ProactiveRefresh#iteration","UserMetadata","UserMetadata#constructor","UserMetadata#_initializeTime","UserMetadata#_copy","UserMetadata#toJSON","_reloadWithoutSaving","reload","mergeProviderData","original.filter$argument_0","newData.some$argument_0","extractProviderData","providers.map$argument_0","requestStsToken","revokeToken","StsTokenManager","StsTokenManager#constructor","StsTokenManager#get__isExpired","StsTokenManager#updateFromServerResponse","StsTokenManager#updateFromIdToken","StsTokenManager#getToken","StsTokenManager#clearRefreshToken","StsTokenManager#refresh","StsTokenManager#updateTokensAndExpiration","StsTokenManager.fromJSON","StsTokenManager#toJSON","StsTokenManager#_assign","StsTokenManager#_clone","StsTokenManager#_performRefresh","assertStringOrUndefined","UserImpl","UserImpl#constructor","UserImpl#getIdToken","UserImpl#getIdTokenResult","UserImpl#reload","UserImpl#_assign","user.providerData.map$argument_0","UserImpl#_clone","UserImpl#_onReload","UserImpl#_notifyReloadListener","UserImpl#_startProactiveRefresh","UserImpl#_stopProactiveRefresh","UserImpl#_updateTokensIfNecessary","UserImpl#_delete","UserImpl#toJSON","providerData.map$argument_0","UserImpl#get__refreshToken","UserImpl._fromJSON","UserImpl._fromIdTokenResponse","UserImpl._fromGetAccountInfoResponse","_getInstance","InMemoryPersistence","InMemoryPersistence#constructor","InMemoryPersistence#_isAvailable","InMemoryPersistence#_set","InMemoryPersistence#_get","InMemoryPersistence#_remove","InMemoryPersistence#_addListener","InMemoryPersistence#_removeListener","_persistenceKeyName","PersistenceUserManager","PersistenceUserManager#constructor","PersistenceUserManager#setCurrentUser","PersistenceUserManager#getCurrentUser","getAccountInfo._catch$argument_0","PersistenceUserManager#removeCurrentUser","PersistenceUserManager#savePersistenceForRedirect","PersistenceUserManager#setPersistence","PersistenceUserManager#_delete","PersistenceUserManager.create","persistenceHierarchy.map$argument_0","filter$argument_0","availablePersistences.filter$argument_0","_getBrowserName","_isFirefox","_isSafari","_isChromeIOS","_isIEMobile","_isAndroid","_isBlackBerry","_isWebOS","_isIOS","_isIOS7Or8","_isIE10","_isMobileBrowser","_getClientVersion","AuthMiddlewareQueue","AuthMiddlewareQueue#constructor","AuthMiddlewareQueue#pushCallback","wrappedCallback","<anonymous>","queue.index","AuthMiddlewareQueue#runMiddleware","_getPasswordPolicy","PasswordPolicyImpl","PasswordPolicyImpl#constructor","PasswordPolicyImpl#validatePassword","PasswordPolicyImpl#validatePasswordLengthOptions","PasswordPolicyImpl#validatePasswordCharacterOptions","PasswordPolicyImpl#updatePasswordCharacterOptionsStatuses","AuthImpl","AuthImpl#constructor","AuthImpl#_initializeWithPersistence","queue$argument_0","AuthImpl#_onStorageEvent","AuthImpl#initializeCurrentUserFromIdToken","AuthImpl#initializeCurrentUser","_popupRedirectResolver._overrideRedirectResult$argument_1","AuthImpl#tryRedirectSignIn","AuthImpl#reloadAndSetCurrentUserOrClear","AuthImpl#useDeviceLanguage","AuthImpl#_delete","AuthImpl#updateCurrentUser","AuthImpl#_updateCurrentUser","AuthImpl#signOut","AuthImpl#setPersistence","AuthImpl#_getRecaptchaConfig","AuthImpl#validatePassword","AuthImpl#_getPasswordPolicyInternal","AuthImpl#_updatePasswordPolicy","AuthImpl#_getPersistenceType","AuthImpl#_getPersistence","AuthImpl#_updateErrorMap","AuthImpl#onAuthStateChanged","AuthImpl#beforeAuthStateChanged","AuthImpl#onIdTokenChanged","AuthImpl#authStateReady","onAuthStateChanged$argument_0","AuthImpl#revokeAccessToken","AuthImpl#toJSON","AuthImpl#_setRedirectUser","AuthImpl#getOrInitRedirectPersistenceManager","AuthImpl#_redirectUserForId","AuthImpl#_persistUserIfCurrent","AuthImpl#_notifyListenersIfCurrent","AuthImpl#_key","AuthImpl#_startProactiveRefresh","AuthImpl#_stopProactiveRefresh","AuthImpl#get___currentUser","AuthImpl#notifyAuthListeners","AuthImpl#registerStateListener","promise.then$argument_0","AuthImpl#directlySetCurrentUser","AuthImpl#queue","AuthImpl#get__assertedPersistence","AuthImpl#_logFramework","AuthImpl#_getFrameworks","AuthImpl#_getAdditionalHeaders","AuthImpl#_getAppCheckToken","_castAuth","Subscription","Subscription#constructor","createSubscribe$argument_0","Subscription#get__next","externalJSProvider.loadJS","_loadJS","_recaptchaEnterpriseScriptUrl","MockGreCAPTCHATopLevel","MockGreCAPTCHATopLevel#constructor","MockGreCAPTCHATopLevel#ready","MockGreCAPTCHATopLevel#execute","MockGreCAPTCHATopLevel#render","MockGreCAPTCHA","MockGreCAPTCHA#ready","MockGreCAPTCHA#execute","MockGreCAPTCHA#render","RecaptchaEnterpriseVerifier","RecaptchaEnterpriseVerifier#constructor","RecaptchaEnterpriseVerifier#verify","retrieveSiteKey","getRecaptchaConfig.then$argument_0","getRecaptchaConfig.then._catch$argument_0","retrieveRecaptchaToken","grecaptcha.enterprise.ready$argument_0","grecaptcha.enterprise.execute.then$argument_0","grecaptcha.enterprise.execute.then._catch$argument_0","retrieveSiteKey.then$argument_0","_loadJS.then$argument_0","_loadJS.then._catch$argument_0","retrieveSiteKey.then._catch$argument_0","injectRecaptchaFields","handleRecaptchaFlow","actionMethod._catch$argument_0","_initializeRecaptchaConfig","initializeAuth","_initializeAuthInstance","connectAuthEmulator","extractProtocol","extractHostAndPort","parsePort","emitEmulatorWarning","attachBanner","AuthCredential","AuthCredential#constructor","AuthCredential#toJSON","AuthCredential#_getIdTokenResponse","AuthCredential#_linkToIdToken","AuthCredential#_getReauthenticationResolver","resetPassword","updateEmailPassword","linkEmailPassword","applyActionCode$1","signInWithPassword","sendOobCode","sendEmailVerification$1","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","verifyAndChangeEmail","signInWithEmailLink$1","signInWithEmailLinkForLinking","EmailAuthCredential","EmailAuthCredential#constructor","EmailAuthCredential._fromEmailAndPassword","EmailAuthCredential._fromEmailAndCode","EmailAuthCredential#toJSON","EmailAuthCredential.fromJSON","EmailAuthCredential#_getIdTokenResponse","EmailAuthCredential#_linkToIdToken","EmailAuthCredential#_getReauthenticationResolver","signInWithIdp","OAuthCredential","OAuthCredential#constructor","OAuthCredential._fromParams","OAuthCredential#toJSON","OAuthCredential.fromJSON","OAuthCredential#_getIdTokenResponse","OAuthCredential#_linkToIdToken","OAuthCredential#_getReauthenticationResolver","OAuthCredential#buildRequest","signInWithPhoneNumber$1","linkWithPhoneNumber$1","verifyPhoneNumberForExisting","PhoneAuthCredential","PhoneAuthCredential#constructor","PhoneAuthCredential._fromVerification","PhoneAuthCredential._fromTokenResponse","PhoneAuthCredential#_getIdTokenResponse","PhoneAuthCredential#_linkToIdToken","PhoneAuthCredential#_getReauthenticationResolver","PhoneAuthCredential#_makeVerificationRequest","PhoneAuthCredential#toJSON","PhoneAuthCredential.fromJSON","parseMode","parseDeepLink","ActionCodeURL","ActionCodeURL#constructor","ActionCodeURL.parseLink","parseActionCodeURL","EmailAuthProvider","EmailAuthProvider#constructor","EmailAuthProvider.credential","EmailAuthProvider.credentialWithLink","FederatedAuthProvider","FederatedAuthProvider#constructor","FederatedAuthProvider#setDefaultLanguage","FederatedAuthProvider#setCustomParameters","FederatedAuthProvider#getCustomParameters","BaseOAuthProvider","BaseOAuthProvider#constructor","BaseOAuthProvider#addScope","BaseOAuthProvider#getScopes","OAuthProvider","OAuthProvider.credentialFromJSON","OAuthProvider#credential","OAuthProvider#_credential","OAuthProvider.credentialFromResult","OAuthProvider.credentialFromError","OAuthProvider.oauthCredentialFromTaggedObject","FacebookAuthProvider","FacebookAuthProvider#constructor","FacebookAuthProvider.credential","FacebookAuthProvider.credentialFromResult","FacebookAuthProvider.credentialFromError","FacebookAuthProvider.credentialFromTaggedObject","GoogleAuthProvider","GoogleAuthProvider#constructor","GoogleAuthProvider.credential","GoogleAuthProvider.credentialFromResult","GoogleAuthProvider.credentialFromError","GoogleAuthProvider.credentialFromTaggedObject","GithubAuthProvider","GithubAuthProvider#constructor","GithubAuthProvider.credential","GithubAuthProvider.credentialFromResult","GithubAuthProvider.credentialFromError","GithubAuthProvider.credentialFromTaggedObject","SAMLAuthCredential","SAMLAuthCredential#constructor","SAMLAuthCredential#_getIdTokenResponse","SAMLAuthCredential#_linkToIdToken","SAMLAuthCredential#_getReauthenticationResolver","SAMLAuthCredential#toJSON","SAMLAuthCredential.fromJSON","SAMLAuthCredential._create","SAMLAuthCredential#buildRequest","SAMLAuthProvider","SAMLAuthProvider#constructor","SAMLAuthProvider.credentialFromResult","SAMLAuthProvider.credentialFromError","SAMLAuthProvider.credentialFromJSON","SAMLAuthProvider.samlCredentialFromTaggedObject","TwitterAuthProvider","TwitterAuthProvider#constructor","TwitterAuthProvider.credential","TwitterAuthProvider.credentialFromResult","TwitterAuthProvider.credentialFromError","TwitterAuthProvider.credentialFromTaggedObject","signUp","UserCredentialImpl","UserCredentialImpl#constructor","UserCredentialImpl._fromIdTokenResponse","UserCredentialImpl._forOperation","providerIdForResponse","signInAnonymously","MultiFactorError","MultiFactorError#constructor","MultiFactorError._fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","idTokenProvider._catch$argument_0","providerDataAsNames","providerData.map.filter$argument_0","unlink","userInternal.providerData.filter$argument_0","_link","_assertLinkedStatus","_reauthenticate","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","signInWithCustomToken$1","signInWithCustomToken","MultiFactorInfoImpl","MultiFactorInfoImpl#constructor","MultiFactorInfoImpl._fromServerResponse","PhoneMultiFactorInfoImpl","PhoneMultiFactorInfoImpl#constructor","PhoneMultiFactorInfoImpl._fromServerResponse","TotpMultiFactorInfoImpl","TotpMultiFactorInfoImpl#constructor","TotpMultiFactorInfoImpl._fromServerResponse","_setActionCodeSettingsOnRequest","recachePasswordPolicy","sendPasswordResetEmail","confirmPasswordReset","resetPassword._catch$argument_0","applyActionCode","checkActionCode","verifyPasswordResetCode","createUserWithEmailAndPassword","signUpResponse._catch$argument_0","signInWithEmailAndPassword","signInWithCredential._catch$argument_0","sendSignInLinkToEmail","setActionCodeSettings","isSignInWithEmailLink","signInWithEmailLink","createAuthUri","fetchSignInMethodsForEmail","sendEmailVerification","verifyBeforeUpdateEmail","updateProfile$1","updateProfile","userInternal.providerData.find$argument_0","updateEmail","updatePassword","updateEmailOrPassword","_fromIdTokenResponse","GenericAdditionalUserInfo","GenericAdditionalUserInfo#constructor","FederatedAdditionalUserInfoWithUsername","FederatedAdditionalUserInfoWithUsername#constructor","FacebookAdditionalUserInfo","FacebookAdditionalUserInfo#constructor","GithubAdditionalUserInfo","GithubAdditionalUserInfo#constructor","GoogleAdditionalUserInfo","GoogleAdditionalUserInfo#constructor","TwitterAdditionalUserInfo","TwitterAdditionalUserInfo#constructor","getAdditionalUserInfo","setPersistence","initializeRecaptchaConfig","validatePassword","onIdTokenChanged","beforeAuthStateChanged","onAuthStateChanged","useDeviceLanguage","updateCurrentUser","signOut","revokeAccessToken","deleteUser","MultiFactorSessionImpl","MultiFactorSessionImpl#constructor","MultiFactorSessionImpl._fromIdtoken","MultiFactorSessionImpl._fromMfaPendingCredential","MultiFactorSessionImpl#toJSON","MultiFactorSessionImpl.fromJSON","MultiFactorResolverImpl","MultiFactorResolverImpl#constructor","MultiFactorResolverImpl._fromError","map$argument_0","MultiFactorResolverImpl$argument_2","MultiFactorResolverImpl#resolveSignIn","getMultiFactorResolver","startEnrollTotpMfa","finalizeEnrollTotpMfa","withdrawMfa","MultiFactorUserImpl","MultiFactorUserImpl#constructor","user._onReload$argument_0","userInfo.mfaInfo.map$argument_0","MultiFactorUserImpl._fromUser","MultiFactorUserImpl#getSession","MultiFactorUserImpl#enroll","MultiFactorUserImpl#unenroll","enrolledFactors.filter$argument_0","multiFactor","AuthInterop","AuthInterop#constructor","AuthInterop#getUid","AuthInterop#getToken","AuthInterop#addAuthTokenListener","auth.onIdTokenChanged$argument_0","AuthInterop#removeAuthTokenListener","AuthInterop#assertAuthConfigured","AuthInterop#updateProactiveRefresh","getVersionForPlatform","registerAuth","Component$argument_1","Component.setInstantiationMode.setInstanceCreatedCallback$argument_0","getAuth","fail","FailClass","FailClass#constructor","PhoneMultiFactorGenerator","PhoneMultiFactorGenerator.assertion","AuthImpl.prototype.setPersistence","finalizeSignInTotpMfa","MultiFactorAssertionImpl","MultiFactorAssertionImpl#constructor","MultiFactorAssertionImpl#_process","TotpMultiFactorGenerator","TotpMultiFactorGenerator.assertionForEnrollment","TotpMultiFactorGenerator.assertionForSignIn","TotpMultiFactorGenerator.generateSecret","TotpMultiFactorAssertionImpl","TotpMultiFactorAssertionImpl#constructor","TotpMultiFactorAssertionImpl._fromSecret","TotpMultiFactorAssertionImpl._fromEnrollmentId","TotpMultiFactorAssertionImpl#_finalizeEnroll","TotpMultiFactorAssertionImpl#_finalizeSignIn","TotpSecret","TotpSecret#constructor","TotpSecret._fromStartTotpMfaEnrollmentResponse","TotpSecret#_makeTotpVerificationInfo","TotpSecret#generateQrCodeUrl","_isEmptyString"],"mappings":"AAA;ACwH;CDgK;AEC;CFS;AG0J;CHI;AIC;CJI;AKkB;CLE;AMC;CNE;AOC;CPS;AQC;CRE;ASC;CTU;AUC;CVI;AWO;CXS;AYQ;CZI;AakB;CbE;AcC;CdE;AeC;CfE;AgBqB;ChBe;AiBC;CjBa;AkBuB;ICC;KDM;IEC;KFU;ClBC;AqBkB;CrBO;AsBkB;ICC;KDQ;IEC;KFc;IGC;KHc;IIC;KJc;CtBC;A2ByH;C3BQ;A4BC;gECC;KDsC;C5BC;A8BC;C9BoD;A+BC;C/BQ;AgCC;ChCmB;AiCC;CjCW;AkCC;ICC;KDE;IEC;mCCM;oCCC;aDE;SDC;KFC;ClCC;AuCC;CvCc;AwCkB;CxCG;AyCC;ICC;KDe;IEO;KFY;IGO;KHI;IIO;KJG;CzCC;A8CkB;C9CE;A+CkB;C/CE;AgDC;ChDE;AiDC;CjDE;AkDkB;ClDiB;AmD8B;CnDE;AoDa;CpDgB;AqDC;CrDE;AsDC;CtDoB;AuDI;CvDM;AwDkB;CxDe;AyDC;CzDG;A0DkB;ICC;KDS;IEC;KFM;IGC;KHQ;IIC;KJa;IKC;kCzBM;SyBE;KLC;IMC;KNa;C1DC;AiEkB;ICC;KDI;IEC;KFG;IGC;KHI;IIC;KJK;CjEC;AsEkB;CtEgC;AuEQ;CvEQ;AwEC;oCCC,mBC,kCD,CD;CxEE;A2EC;yBCC;KDS;C3EC;A6EkB;oEhDC;KgDmB;C7EO;A8EC;C9EE;A+EwB;ICC;KDI;IEC;KFG;IGC;KHQ;IIC;KJI;IKC;KLU;IMC;KNE;IOC;KPG;IQC;KRI;ISC;KTsB;IUC;KVM;IWC;KXI;IYC;KZE;IaC;KbE;C/EC;A6FkB;C7FE;A8FC;ICC;KDmB;IEC;KFS;IGC;KHE;IIC;KJE;IKC;kDCY,6BD;KLG;IOC;KPQ;IQC;KRQ;ISC;KTQ;IUC;KVE;IWC;KXE;IYC;KZc;IaC;KbU;IcC;gDCU,6BD;KdY;IgBC;KhBE;IiBC;iDFsC,6BE;KjBM;IkBM;KlBa;ImBM;KnBgC;C9FC;AkHmB;ClHU;AmHkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJG;IKC;KLE;IMC;KNG;IOC;KPG;CnHC;A2HyB;C3HE;A4HC;ICC;KDS;IEC;KFE;IGC;sFCM,eD;KHO;IKC;KLE;IMC;KNE;IOC;KPU;IQC;KRE;ISC;kFCK;SDK,WE,0BF;iCLmB,eK;gEGoB,4BH;mDCc;SDO;KTE;C5HC;AyIqB;CzIiD;A0IC;C1IE;A2IC;C3IM;A4IC;C5IE;A6IC;C7IE;A8IC;C9IE;A+IC;C/IE;AgJC;ChJE;AiJC;CjJG;AkJC;ClJG;AmJC;CnJE;AoJC;CpJQ;AqJqB;CrJoB;AsJkB;ICC;KDG;IEC;gCCG,sBpH;SoHW,CD;eEK;gCCG,uBD;SFC;KFC;IMC;KNgC;CtJC;A6JyB;C7JE;A8JyB;ICC;KDoC;IEC;KFgB;IGO;KHS;IIO;KJmB;IKY;KLa;C9JC;AoKkB;ICC;wDhIuC,+DgI;KDC;IEC;iDCM;SD0B;KFE;III;KJqB;IKC;KLU;IMC;mCrIM;+BCC,2ED;iBqIC;8ECwC,uBD;KNoB;IQC;KR4B;ISC;KTa;IUC;KVE;IWC;KXE;IYC;KZa;IaC;0BVU;SUG;KbC;IcC;Kda;IeC;0BZI;SYE;KfC;IgBC;KhBO;IiBC;KjBa;IkBC;KlBO;ImBC;KnBS;IoBC;KpBE;IqBC;KrBE;IsBC;KtBE;IuBC;KvBE;IwBC;KxBE;IyBC;KzBE;I0BC;2BzJC;4D0JK;iB1JG;SyJE;K1BC;I4BI;K5Be;I6BC;K7BO;I8BC;K9BK;I+BC;K/BU;IgCC;6B7BI,e6B;KhCS;IiCC;8B9BE,6C8B;KjCE;IkCE;KlCI;ImCC;KnCE;IoCC;KpCK;IqCC;KrCK;IsCE;KtCE;IuCC;KvCU;IwCC;mBlDE,SkD;qBCY;SDK;mBlDG;akDG;mBlDI;akDG;KxCE;I0CM;K1Cc;I2CC;K3CK;I4CC;K5CG;I6CC;K7CS;I8CC;K9CE;I+CC;K/CuB;IgDC;KhDe;CpKC;AqNO;CrNE;AsNE;ICC;2CCG,sCD;KDC;IGC;KHG;CtNC;I0NmB;K1NE;A2NK;C3NE;A4NC;C5NE;A6NkB;ICC;KDE;IEC;KFE;IGC;KHI;IIC;KJI;C7NC;AkOC;ICC;KDE;IEC;KFI;IGC;KHI;ClOC;AsOK;ICM;KDM;IEM;QCC;+BpMU;0BqMK;iBrMc;2BsMC;iBtME;aoMC;SDC;QIC;4CCG;8BCG;qBDE;+BEC;qBFE;iBDC;SJK;2BnMM;sB2ME;8BCc;qBDE;+BEC;qBFE;a3ME;uB8MC;a9ME;SmMC;KFC;CtOC;AoPC;CpPsD;AqPC;6DCS;aDS;0ECQ;aDoB;CrPc;AuPC;CvPiB;AwP2C;CxPc;AyPC;CzPU;A0PwB;C1PuC;A2PC;C3PG;A4PC;C5PgB;A6PC;C7PS;A8PC;ICC;KDiB;C9Pc;AgQ0B;ICE;KDmB;IEM;KFE;IGE;KHE;IIE;KJE;IKE;KLE;ChQC;AsQkB;CtQE;AuQC;CvQE;AwQG;CxQE;AyQC;CzQE;A0QkB;C1QE;A2QC;C3QE;A4QC;C5QE;A6QC;C7QE;A8QC;C9QE;A+QC;C/QE;AgRkB;ChRE;AiRC;CjRE;AkR4B;ICE;KDW;IEE;KFE;IGE;KHE;IIE;KJO;IKS;KLW;IME;KNkB;IOE;KPoB;IQE;KRE;ClRC;A2RkB;C3RE;A4R2B;ICC;KDG;IEE;KF2B;IGE;KHU;IIU;KJa;IKE;KLG;IME;KNI;IOE;KPI;IQC;KR0B;C5RC;AqSkB;CrSE;AsSC;CtSM;AuSI;CvSM;AwSuB;ICC;KDG;IEE;KFE;IGE;KHE;IIE;KJE;IKE;KLK;IME;KNE;IOE;KPS;IQE;KRiB;ISE;KTiB;CxSC;AkTuB;ClTiB;AmTM;CnTY;AoTO;ICO;KDa;IEU;KFQ;CpTC;AuTO;CvTE;AwTuB;ICC;KDK;IEmB;KFE;IGuB;KHI;CxTC;A4TqC;ICM;KDM;IEM;KFE;IGW;KHG;III;KJE;C5TC;AiUwB;ICC;KDI;IEM;KFM;IGI;KHE;CjUC;AqUyC;ICK;KDI;IEsB;KFE;IGE;KHQ;IIM;KJE;IKO;KLE;IMC;KNyB;CrUC;A4UyD;ICC;KDE;IEa;KFM;IGM;KHE;IIO;KJE;IKC;KLa;C5UC;AkV+D;ICC;KDG;IEc;KFO;IGM;KHE;IIO;KJE;IKC;KLe;ClVC;AwVgE;ICC;KDE;IEM;KFM;IGM;KHE;IIO;KJE;IKC;KLa;CxVC;A8V0B;ICE;KDG;IEE;KFG;IGE;KHI;IIE;KJI;IKE;KLM;IMU;KNU;IOM;KPE;IQC;KRM;C9VC;AuWwB;ICK;KDG;IEiB;KFE;IGO;KHE;IIK;KJI;IKC;KLc;CvWC;A6WyD;ICC;KDE;IEO;KFO;IGM;KHE;IIO;KJE;IKC;KLc;C7WC;AmXsB;CnXE;AoXkB;ICC;KDK;IEC;KFU;IGC;KHS;CpXC;AwXC;CxXQ;AyXgC;CzXoB;A0XkB;ICC;KDY;IEC;KFE;C1XC;A6XC;iCCI;KDK;C7XC;A+XqB;alRE,8BkR;gBCC,YD;C/XC;AiY0B;iECQ,sCD;CjYM;AmYC;CnYG;AoYC;CpYO;AqYkB;CrYsB;AsYkB;CtYW;AuYe;CvYE;AwYY;CxYI;AyYiB;CzYE;A0YkB;C1YE;A2YqC;C3YY;A4YkB;ICC;KDK;IEC;KFQ;C5YC;A+YC;ICC;KDG;IEC;KFE;C/YC;AkZC;ICC;KDE;IEC;KFE;ClZC;AqZkB;CrZqB;AsZ+B;CtZK;AuZoC;CvZW;AwZU;eCK;KDM;CxZE;A0ZS;C1ZE;A2ZW;C3ZwC;A4ZW;C5ZI;A6ZqB;gDCY;KDK;C7ZI;A+ZwB;+GCI;KDK;C/ZC;AiawD;ICO;KDK;CjaG;AmaS;CnaG;Aoa0C;CpaU;AqakB;CraE;AsasC;CtaW;Aua+B;Cvac;AwamC;CxaiB;AyakB;CzaE;A0a0B;4DCgB,6CD;C1aM;A4ayB;C5aM;A6ac;C7aE;A8aC;C9ae;A+asB;C/auC;AgbC;ICC;KDI;ChbC;AkbC;ICC;KDG;ClbC;AobC;ICC;KDE;CpbC;AsbC;ICC;KDE;CtbC;AwbC;ICC;KDE;CxbC;A0bC;ICC;KDE;C1bC;A4bQ;C5bY;A6b2C;C7bE;A8b4B;C9bE;A+bwB;C/bG;AgciB;ChcE;AicW;CjcE;AkcgB;ClcE;AmcQ;CncE;AocsB;CpcE;AqcY;CrcE;AscS;CtcG;Auca;CvcE;AwckB;ICC;KDI;IEC;KFE;IGC;KHE;IIC;KJS;IKC;KLU;CxcC;A8ckB;ICC;KDI;IEE;yDCG,uED;2DEG;SFuB;KFC;IKC;KLG;C9cC;AodW;CpdM;AqdkB;CrdE;AsdC;CtdE;AudC;CvdE;AwdE;ICC;uBCG;4DCE,4ED;SDE;KDC;IIC;KJE;IKC;KLE;IMC;KNW;IOC;+DCS,oCD;KPW;CxdC;AieY;CjeM;AkeqB;ICC;KDG;IEC;KFG;IGC;KHQ;IIC;uDCK;SDE;KJG;IMC;KNS;IOC;KPE;IQC;KRO;CleC;A2ekB;C3ee;A4eE;uECC;KDkB;oCEU;KFG;yFCC;gBnVE,6BmV;KDC;C5eI;A+esB;C/eW;AgfW;ChfE;AifK;ICC;KDE;CjfC;AmfmB;ICC;KDE;CnfC;oCqfI,erf;AsfkB;CtfE;AufE;ICC;KDE;IEC;KFS;CvfC;A0fO;ICW;KDE;IEU;KFE;IGU;KHQ;C1fC;A8fK;ICC;KDK;IEE;KFE;IGE;KHE;IIE;KJO;IKE;KLQ;C9fC;AogBQ;ICE;KDQ;IEE;KFE;IGE;KHE;IIW;KJc;CpgBC;AygBE;CzgBE"},"hasCjsExports":false},"type":"js/module"}]}