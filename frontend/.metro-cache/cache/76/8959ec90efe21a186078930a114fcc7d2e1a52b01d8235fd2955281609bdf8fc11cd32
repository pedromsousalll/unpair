{"dependencies":[{"name":"@react-stately/toggle","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":4,"index":27},"end":{"line":3,"column":36,"index":59}}],"key":"1kYnl0PHk0yAJIZC6wsaE1wGJ7U=","exportNames":["*"],"imports":1}},{"name":"@react-aria/label","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":4,"index":83},"end":{"line":7,"column":32,"index":111}}],"key":"4aiRi+Avy5UxLtaihYKHDRnwPBQ=","exportNames":["*"],"imports":1}},{"name":"@react-aria/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":4,"index":155},"end":{"line":12,"column":32,"index":183}}],"key":"hH7ZPgKu/nR0zv7dDY6DfywJY/Y=","exportNames":["*"],"imports":1}},{"name":"@react-aria/toggle","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":4,"index":208},"end":{"line":16,"column":33,"index":237}}],"key":"7Fnsuh4F2cNFGkcXzav93+mU3xE=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":4,"index":262},"end":{"line":20,"column":20,"index":278}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/extends","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":57,"index":338},"end":{"line":22,"column":98,"index":379}}],"key":"+IMV7fApFxYj6g0kcsGRJafP6mc=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var {\n    useToggleState\n  } = require(_dependencyMap[0], \"@react-stately/toggle\");\n  var {\n    useLabel\n  } = require(_dependencyMap[1], \"@react-aria/label\");\n  var {\n    filterDOMProps,\n    mergeProps\n  } = require(_dependencyMap[2], \"@react-aria/utils\");\n  var {\n    useToggle\n  } = require(_dependencyMap[3], \"@react-aria/toggle\");\n  var {\n    useEffect\n  } = require(_dependencyMap[4], \"react\");\n  var _babelRuntimeHelpersExtends = $parcel$interopDefault(require(_dependencyMap[5], \"@babel/runtime/helpers/extends\"));\n  function $parcel$interopDefault(a) {\n    return a && a.__esModule ? a.default : a;\n  }\n\n  /**\n   * Provides the behavior and accessibility implementation for a checkbox component.\n   * Checkboxes allow users to select multiple items from a list of individual items, or\n   * to mark one individual item as selected.\n   * @param props - Props for the checkbox.\n   * @param state - State for the checkbox, as returned by `useToggleState`.\n   * @param inputRef - A ref for the HTML input element.\n   */\n  function useCheckbox(props, state, inputRef) {\n    let {\n      inputProps\n    } = useToggle(props, state, inputRef);\n    let {\n      isSelected\n    } = state;\n    let {\n      isIndeterminate\n    } = props;\n    useEffect(() => {\n      // indeterminate is a property, but it can only be set via javascript\n      // https://css-tricks.com/indeterminate-checkboxes/\n      if (inputRef.current) {\n        inputRef.current.indeterminate = isIndeterminate;\n      }\n    });\n    return {\n      inputProps: _babelRuntimeHelpersExtends({}, inputProps, {\n        checked: isSelected,\n        'aria-checked': isIndeterminate ? 'mixed' : isSelected\n      })\n    };\n  }\n  exports.useCheckbox = useCheckbox;\n\n  /*\n   * Copyright 2020 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n  const $f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames = new WeakMap();\n\n  /**\n   * Provides the behavior and accessibility implementation for a checkbox group component.\n   * Checkbox groups allow users to select multiple items from a list of options.\n   * @param props - Props for the checkbox group.\n   * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n   */\n  function useCheckboxGroup(props, state) {\n    let {\n      isDisabled,\n      name\n    } = props;\n    let {\n      labelProps,\n      fieldProps\n    } = useLabel(_babelRuntimeHelpersExtends({}, props, {\n      // Checkbox group is not an HTML input element so it\n      // shouldn't be labeled by a <label> element.\n      labelElementType: 'span'\n    }));\n    let domProps = filterDOMProps(props, {\n      labelable: true\n    }); // Pass name prop from group to all items by attaching to the state.\n\n    $f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames.set(state, name);\n    return {\n      groupProps: mergeProps(domProps, _babelRuntimeHelpersExtends({\n        role: 'group',\n        'aria-disabled': isDisabled || undefined\n      }, fieldProps)),\n      labelProps\n    };\n  }\n  exports.useCheckboxGroup = useCheckboxGroup;\n\n  /**\n   * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n   * Checkbox groups allow users to select multiple items from a list of options.\n   * @param props - Props for the checkbox.\n   * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n   * @param inputRef - A ref for the HTML input element.\n   */\n  function useCheckboxGroupItem(props, state, inputRef) {\n    const toggleState = useToggleState({\n      isReadOnly: props.isReadOnly || state.isReadOnly,\n      isSelected: state.isSelected(props.value),\n      onChange(isSelected) {\n        if (isSelected) {\n          state.addValue(props.value);\n        } else {\n          state.removeValue(props.value);\n        }\n        if (props.onChange) {\n          props.onChange(isSelected);\n        }\n      }\n    });\n    let {\n      inputProps\n    } = useCheckbox(_babelRuntimeHelpersExtends({}, props, {\n      isReadOnly: props.isReadOnly || state.isReadOnly,\n      isDisabled: props.isDisabled || state.isDisabled,\n      name: props.name || $f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames.get(state)\n    }), toggleState, inputRef);\n    return {\n      inputProps\n    };\n  }\n  exports.useCheckboxGroupItem = useCheckboxGroupItem;\n});","lineCount":138,"map":[[2,2,1,0],[2,6,1,4],[3,4,2,2,"useToggleState"],[4,2,3,0],[4,3,3,1],[4,6,3,4,"require"],[4,13,3,11],[4,14,3,11,"_dependencyMap"],[4,28,3,11],[4,56,3,35],[4,57,3,36],[5,2,5,0],[5,6,5,4],[6,4,6,2,"useLabel"],[7,2,7,0],[7,3,7,1],[7,6,7,4,"require"],[7,13,7,11],[7,14,7,11,"_dependencyMap"],[7,28,7,11],[7,52,7,31],[7,53,7,32],[8,2,9,0],[8,6,9,4],[9,4,10,2,"filterDOMProps"],[9,18,10,16],[10,4,11,2,"mergeProps"],[11,2,12,0],[11,3,12,1],[11,6,12,4,"require"],[11,13,12,11],[11,14,12,11,"_dependencyMap"],[11,28,12,11],[11,52,12,31],[11,53,12,32],[12,2,14,0],[12,6,14,4],[13,4,15,2,"useToggle"],[14,2,16,0],[14,3,16,1],[14,6,16,4,"require"],[14,13,16,11],[14,14,16,11,"_dependencyMap"],[14,28,16,11],[14,53,16,32],[14,54,16,33],[15,2,18,0],[15,6,18,4],[16,4,19,2,"useEffect"],[17,2,20,0],[17,3,20,1],[17,6,20,4,"require"],[17,13,20,11],[17,14,20,11,"_dependencyMap"],[17,28,20,11],[17,40,20,19],[17,41,20,20],[18,2,22,0],[18,6,22,4,"_babelRuntimeHelpersExtends"],[18,33,22,31],[18,36,22,34,"$parcel$interopDefault"],[18,58,22,56],[18,59,22,57,"require"],[18,66,22,64],[18,67,22,64,"_dependencyMap"],[18,81,22,64],[18,118,22,97],[18,119,22,98],[18,120,22,99],[19,2,24,0],[19,11,24,9,"$parcel$interopDefault"],[19,33,24,31,"$parcel$interopDefault"],[19,34,24,32,"a"],[19,35,24,33],[19,37,24,35],[20,4,25,2],[20,11,25,9,"a"],[20,12,25,10],[20,16,25,14,"a"],[20,17,25,15],[20,18,25,16,"__esModule"],[20,28,25,26],[20,31,25,29,"a"],[20,32,25,30],[20,33,25,31,"default"],[20,40,25,38],[20,43,25,41,"a"],[20,44,25,42],[21,2,26,0],[23,2,28,0],[24,0,29,0],[25,0,30,0],[26,0,31,0],[27,0,32,0],[28,0,33,0],[29,0,34,0],[30,0,35,0],[31,2,36,0],[31,11,36,9,"useCheckbox"],[31,22,36,20,"useCheckbox"],[31,23,36,21,"props"],[31,28,36,26],[31,30,36,28,"state"],[31,35,36,33],[31,37,36,35,"inputRef"],[31,45,36,43],[31,47,36,45],[32,4,37,2],[32,8,37,6],[33,6,38,4,"inputProps"],[34,4,39,2],[34,5,39,3],[34,8,39,6,"useToggle"],[34,17,39,15],[34,18,39,16,"props"],[34,23,39,21],[34,25,39,23,"state"],[34,30,39,28],[34,32,39,30,"inputRef"],[34,40,39,38],[34,41,39,39],[35,4,40,2],[35,8,40,6],[36,6,41,4,"isSelected"],[37,4,42,2],[37,5,42,3],[37,8,42,6,"state"],[37,13,42,11],[38,4,43,2],[38,8,43,6],[39,6,44,4,"isIndeterminate"],[40,4,45,2],[40,5,45,3],[40,8,45,6,"props"],[40,13,45,11],[41,4,46,2,"useEffect"],[41,13,46,11],[41,14,46,12],[41,20,46,18],[42,6,47,4],[43,6,48,4],[44,6,49,4],[44,10,49,8,"inputRef"],[44,18,49,16],[44,19,49,17,"current"],[44,26,49,24],[44,28,49,26],[45,8,50,6,"inputRef"],[45,16,50,14],[45,17,50,15,"current"],[45,24,50,22],[45,25,50,23,"indeterminate"],[45,38,50,36],[45,41,50,39,"isIndeterminate"],[45,56,50,54],[46,6,51,4],[47,4,52,2],[47,5,52,3],[47,6,52,4],[48,4,53,2],[48,11,53,9],[49,6,54,4,"inputProps"],[49,16,54,14],[49,18,54,16,"_babelRuntimeHelpersExtends"],[49,45,54,43],[49,46,54,44],[49,47,54,45],[49,48,54,46],[49,50,54,48,"inputProps"],[49,60,54,58],[49,62,54,60],[50,8,55,6,"checked"],[50,15,55,13],[50,17,55,15,"isSelected"],[50,27,55,25],[51,8,56,6],[51,22,56,20],[51,24,56,22,"isIndeterminate"],[51,39,56,37],[51,42,56,40],[51,49,56,47],[51,52,56,50,"isSelected"],[52,6,57,4],[52,7,57,5],[53,4,58,2],[53,5,58,3],[54,2,59,0],[55,2,61,0,"exports"],[55,9,61,7],[55,10,61,8,"useCheckbox"],[55,21,61,19],[55,24,61,22,"useCheckbox"],[55,35,61,33],[57,2,63,0],[58,0,64,0],[59,0,65,0],[60,0,66,0],[61,0,67,0],[62,0,68,0],[63,0,69,0],[64,0,70,0],[65,0,71,0],[66,0,72,0],[67,0,73,0],[68,2,74,0],[68,8,74,6,"$f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames"],[68,65,74,63],[68,68,74,66],[68,72,74,70,"WeakMap"],[68,79,74,77],[68,80,74,78],[68,81,74,79],[70,2,76,0],[71,0,77,0],[72,0,78,0],[73,0,79,0],[74,0,80,0],[75,0,81,0],[76,2,82,0],[76,11,82,9,"useCheckboxGroup"],[76,27,82,25,"useCheckboxGroup"],[76,28,82,26,"props"],[76,33,82,31],[76,35,82,33,"state"],[76,40,82,38],[76,42,82,40],[77,4,83,2],[77,8,83,6],[78,6,84,4,"isDisabled"],[78,16,84,14],[79,6,85,4,"name"],[80,4,86,2],[80,5,86,3],[80,8,86,6,"props"],[80,13,86,11],[81,4,87,2],[81,8,87,6],[82,6,88,4,"labelProps"],[82,16,88,14],[83,6,89,4,"fieldProps"],[84,4,90,2],[84,5,90,3],[84,8,90,6,"useLabel"],[84,16,90,14],[84,17,90,15,"_babelRuntimeHelpersExtends"],[84,44,90,42],[84,45,90,43],[84,46,90,44],[84,47,90,45],[84,49,90,47,"props"],[84,54,90,52],[84,56,90,54],[85,6,91,4],[86,6,92,4],[87,6,93,4,"labelElementType"],[87,22,93,20],[87,24,93,22],[88,4,94,2],[88,5,94,3],[88,6,94,4],[88,7,94,5],[89,4,95,2],[89,8,95,6,"domProps"],[89,16,95,14],[89,19,95,17,"filterDOMProps"],[89,33,95,31],[89,34,95,32,"props"],[89,39,95,37],[89,41,95,39],[90,6,96,4,"labelable"],[90,15,96,13],[90,17,96,15],[91,4,97,2],[91,5,97,3],[91,6,97,4],[91,7,97,5],[91,8,97,6],[93,4,99,2,"$f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames"],[93,61,99,59],[93,62,99,60,"set"],[93,65,99,63],[93,66,99,64,"state"],[93,71,99,69],[93,73,99,71,"name"],[93,77,99,75],[93,78,99,76],[94,4,100,2],[94,11,100,9],[95,6,101,4,"groupProps"],[95,16,101,14],[95,18,101,16,"mergeProps"],[95,28,101,26],[95,29,101,27,"domProps"],[95,37,101,35],[95,39,101,37,"_babelRuntimeHelpersExtends"],[95,66,101,64],[95,67,101,65],[96,8,102,6,"role"],[96,12,102,10],[96,14,102,12],[96,21,102,19],[97,8,103,6],[97,23,103,21],[97,25,103,23,"isDisabled"],[97,35,103,33],[97,39,103,37,"undefined"],[98,6,104,4],[98,7,104,5],[98,9,104,7,"fieldProps"],[98,19,104,17],[98,20,104,18],[98,21,104,19],[99,6,105,4,"labelProps"],[100,4,106,2],[100,5,106,3],[101,2,107,0],[102,2,109,0,"exports"],[102,9,109,7],[102,10,109,8,"useCheckboxGroup"],[102,26,109,24],[102,29,109,27,"useCheckboxGroup"],[102,45,109,43],[104,2,111,0],[105,0,112,0],[106,0,113,0],[107,0,114,0],[108,0,115,0],[109,0,116,0],[110,0,117,0],[111,2,118,0],[111,11,118,9,"useCheckboxGroupItem"],[111,31,118,29,"useCheckboxGroupItem"],[111,32,118,30,"props"],[111,37,118,35],[111,39,118,37,"state"],[111,44,118,42],[111,46,118,44,"inputRef"],[111,54,118,52],[111,56,118,54],[112,4,119,2],[112,10,119,8,"toggleState"],[112,21,119,19],[112,24,119,22,"useToggleState"],[112,38,119,36],[112,39,119,37],[113,6,120,4,"isReadOnly"],[113,16,120,14],[113,18,120,16,"props"],[113,23,120,21],[113,24,120,22,"isReadOnly"],[113,34,120,32],[113,38,120,36,"state"],[113,43,120,41],[113,44,120,42,"isReadOnly"],[113,54,120,52],[114,6,121,4,"isSelected"],[114,16,121,14],[114,18,121,16,"state"],[114,23,121,21],[114,24,121,22,"isSelected"],[114,34,121,32],[114,35,121,33,"props"],[114,40,121,38],[114,41,121,39,"value"],[114,46,121,44],[114,47,121,45],[115,6,123,4,"onChange"],[115,14,123,12,"onChange"],[115,15,123,13,"isSelected"],[115,25,123,23],[115,27,123,25],[116,8,124,6],[116,12,124,10,"isSelected"],[116,22,124,20],[116,24,124,22],[117,10,125,8,"state"],[117,15,125,13],[117,16,125,14,"addValue"],[117,24,125,22],[117,25,125,23,"props"],[117,30,125,28],[117,31,125,29,"value"],[117,36,125,34],[117,37,125,35],[118,8,126,6],[118,9,126,7],[118,15,126,13],[119,10,127,8,"state"],[119,15,127,13],[119,16,127,14,"removeValue"],[119,27,127,25],[119,28,127,26,"props"],[119,33,127,31],[119,34,127,32,"value"],[119,39,127,37],[119,40,127,38],[120,8,128,6],[121,8,130,6],[121,12,130,10,"props"],[121,17,130,15],[121,18,130,16,"onChange"],[121,26,130,24],[121,28,130,26],[122,10,131,8,"props"],[122,15,131,13],[122,16,131,14,"onChange"],[122,24,131,22],[122,25,131,23,"isSelected"],[122,35,131,33],[122,36,131,34],[123,8,132,6],[124,6,133,4],[125,4,135,2],[125,5,135,3],[125,6,135,4],[126,4,136,2],[126,8,136,6],[127,6,137,4,"inputProps"],[128,4,138,2],[128,5,138,3],[128,8,138,6,"useCheckbox"],[128,19,138,17],[128,20,138,18,"_babelRuntimeHelpersExtends"],[128,47,138,45],[128,48,138,46],[128,49,138,47],[128,50,138,48],[128,52,138,50,"props"],[128,57,138,55],[128,59,138,57],[129,6,139,4,"isReadOnly"],[129,16,139,14],[129,18,139,16,"props"],[129,23,139,21],[129,24,139,22,"isReadOnly"],[129,34,139,32],[129,38,139,36,"state"],[129,43,139,41],[129,44,139,42,"isReadOnly"],[129,54,139,52],[130,6,140,4,"isDisabled"],[130,16,140,14],[130,18,140,16,"props"],[130,23,140,21],[130,24,140,22,"isDisabled"],[130,34,140,32],[130,38,140,36,"state"],[130,43,140,41],[130,44,140,42,"isDisabled"],[130,54,140,52],[131,6,141,4,"name"],[131,10,141,8],[131,12,141,10,"props"],[131,17,141,15],[131,18,141,16,"name"],[131,22,141,20],[131,26,141,24,"$f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames"],[131,83,141,81],[131,84,141,82,"get"],[131,87,141,85],[131,88,141,86,"state"],[131,93,141,91],[132,4,142,2],[132,5,142,3],[132,6,142,4],[132,8,142,6,"toggleState"],[132,19,142,17],[132,21,142,19,"inputRef"],[132,29,142,27],[132,30,142,28],[133,4,143,2],[133,11,143,9],[134,6,144,4,"inputProps"],[135,4,145,2],[135,5,145,3],[136,2,146,0],[137,2,148,0,"exports"],[137,9,148,7],[137,10,148,8,"useCheckboxGroupItem"],[137,30,148,28],[137,33,148,31,"useCheckboxGroupItem"],[137,53,148,51],[138,0,148,52],[138,3]],"functionMap":{"names":["<global>","$parcel$interopDefault","useCheckbox","useEffect$argument_0","useCheckboxGroup","useCheckboxGroupItem","useToggleState$argument_0.onChange"],"mappings":"AAA;ACuB;CDE;AEU;YCU;GDM;CFO;AIuB;CJyB;AKW;ICK;KDU;CLa"},"hasCjsExports":true},"type":"js/module"}]}