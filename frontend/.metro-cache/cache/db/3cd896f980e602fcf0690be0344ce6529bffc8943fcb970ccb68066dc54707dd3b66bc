{"dependencies":[{"name":"@formatjs/icu-messageformat-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":239,"index":239}}],"key":"OodGQUSEtBP/qlCyfeXOWSeZfOs=","exportNames":["*"],"imports":1}},{"name":"./error","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":240},"end":{"line":2,"column":111,"index":351}}],"key":"QHycRqnFtfUmvzFfqax6IEFlq9M=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"PART_TYPE\", {\n    enumerable: true,\n    get: function () {\n      return PART_TYPE;\n    }\n  });\n  exports.isFormatXMLElementFn = isFormatXMLElementFn;\n  exports.formatToParts = formatToParts;\n  var _formatjsIcuMessageformatParser = require(_dependencyMap[0], \"@formatjs/icu-messageformat-parser\");\n  var _error = require(_dependencyMap[1], \"./error\");\n  var PART_TYPE;\n  (function (PART_TYPE) {\n    PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n    PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n  })(PART_TYPE || (PART_TYPE = {}));\n  function mergeLiteral(parts) {\n    if (parts.length < 2) {\n      return parts;\n    }\n    return parts.reduce(function (all, part) {\n      var lastPart = all[all.length - 1];\n      if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {\n        all.push(part);\n      } else {\n        lastPart.value += part.value;\n      }\n      return all;\n    }, []);\n  }\n  function isFormatXMLElementFn(el) {\n    return typeof el === 'function';\n  }\n  // TODO(skeleton): add skeleton support\n  function formatToParts(els, locales, formatters, formats, values, currentPluralValue,\n  // For debugging\n  originalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && (0, _formatjsIcuMessageformatParser.isLiteralElement)(els[0])) {\n      return [{\n        type: PART_TYPE.literal,\n        value: els[0].value\n      }];\n    }\n    var result = [];\n    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n      var el = els_1[_i];\n      // Exit early for string parts.\n      if ((0, _formatjsIcuMessageformatParser.isLiteralElement)(el)) {\n        result.push({\n          type: PART_TYPE.literal,\n          value: el.value\n        });\n        continue;\n      }\n      // TODO: should this part be literal type?\n      // Replace `#` in plural rules with the actual numeric value.\n      if ((0, _formatjsIcuMessageformatParser.isPoundElement)(el)) {\n        if (typeof currentPluralValue === 'number') {\n          result.push({\n            type: PART_TYPE.literal,\n            value: formatters.getNumberFormat(locales).format(currentPluralValue)\n          });\n        }\n        continue;\n      }\n      var varName = el.value;\n      // Enforce that all required values are provided by the caller.\n      if (!(values && varName in values)) {\n        throw new _error.MissingValueError(varName, originalMessage);\n      }\n      var value = values[varName];\n      if ((0, _formatjsIcuMessageformatParser.isArgumentElement)(el)) {\n        if (!value || typeof value === 'string' || typeof value === 'number') {\n          value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';\n        }\n        result.push({\n          type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n          value: value\n        });\n        continue;\n      }\n      // Recursively format plural and select parts' option â€” which can be a\n      // nested pattern structure. The choosing of the option to use is\n      // abstracted-by and delegated-to the part helper object.\n      if ((0, _formatjsIcuMessageformatParser.isDateElement)(el)) {\n        var style = typeof el.style === 'string' ? formats.date[el.style] : (0, _formatjsIcuMessageformatParser.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n        result.push({\n          type: PART_TYPE.literal,\n          value: formatters.getDateTimeFormat(locales, style).format(value)\n        });\n        continue;\n      }\n      if ((0, _formatjsIcuMessageformatParser.isTimeElement)(el)) {\n        var style = typeof el.style === 'string' ? formats.time[el.style] : (0, _formatjsIcuMessageformatParser.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;\n        result.push({\n          type: PART_TYPE.literal,\n          value: formatters.getDateTimeFormat(locales, style).format(value)\n        });\n        continue;\n      }\n      if ((0, _formatjsIcuMessageformatParser.isNumberElement)(el)) {\n        var style = typeof el.style === 'string' ? formats.number[el.style] : (0, _formatjsIcuMessageformatParser.isNumberSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n        if (style && style.scale) {\n          value = value * (style.scale || 1);\n        }\n        result.push({\n          type: PART_TYPE.literal,\n          value: formatters.getNumberFormat(locales, style).format(value)\n        });\n        continue;\n      }\n      if ((0, _formatjsIcuMessageformatParser.isTagElement)(el)) {\n        var children = el.children,\n          value_1 = el.value;\n        var formatFn = values[value_1];\n        if (!isFormatXMLElementFn(formatFn)) {\n          throw new _error.InvalidValueTypeError(value_1, 'function', originalMessage);\n        }\n        var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n        var chunks = formatFn(parts.map(function (p) {\n          return p.value;\n        }));\n        if (!Array.isArray(chunks)) {\n          chunks = [chunks];\n        }\n        result.push.apply(result, chunks.map(function (c) {\n          return {\n            type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n            value: c\n          };\n        }));\n      }\n      if ((0, _formatjsIcuMessageformatParser.isSelectElement)(el)) {\n        var opt = el.options[value] || el.options.other;\n        if (!opt) {\n          throw new _error.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n        }\n        result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n        continue;\n      }\n      if ((0, _formatjsIcuMessageformatParser.isPluralElement)(el)) {\n        var opt = el.options[\"=\".concat(value)];\n        if (!opt) {\n          if (!Intl.PluralRules) {\n            throw new _error.FormatError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\", _error.ErrorCode.MISSING_INTL_API, originalMessage);\n          }\n          var rule = formatters.getPluralRules(locales, {\n            type: el.pluralType\n          }).select(value - (el.offset || 0));\n          opt = el.options[rule] || el.options.other;\n        }\n        if (!opt) {\n          throw new _error.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n        }\n        result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n        continue;\n      }\n    }\n    return mergeLiteral(result);\n  }\n});","lineCount":167,"map":[[7,2,3,0,"Object"],[7,8,3,0],[7,9,3,0,"defineProperty"],[7,23,3,0],[7,24,3,0,"exports"],[7,31,3,0],[8,4,3,0,"enumerable"],[8,14,3,0],[9,4,3,0,"get"],[9,7,3,0],[9,18,3,0,"get"],[9,19,3,0],[10,6,3,0],[10,13,3,0,"PART_TYPE"],[10,22,3,0],[11,4,3,0],[12,2,3,0],[13,2,25,0,"exports"],[13,9,25,0],[13,10,25,0,"isFormatXMLElementFn"],[13,30,25,0],[13,33,25,0,"isFormatXMLElementFn"],[13,53,25,0],[14,2,29,0,"exports"],[14,9,29,0],[14,10,29,0,"formatToParts"],[14,23,29,0],[14,26,29,0,"formatToParts"],[14,39,29,0],[15,2,1,0],[15,6,1,0,"_formatjsIcuMessageformatParser"],[15,37,1,0],[15,40,1,0,"require"],[15,47,1,0],[15,48,1,0,"_dependencyMap"],[15,62,1,0],[16,2,2,0],[16,6,2,0,"_error"],[16,12,2,0],[16,15,2,0,"require"],[16,22,2,0],[16,23,2,0,"_dependencyMap"],[16,37,2,0],[17,2,3,7],[17,6,3,11,"PART_TYPE"],[17,15,3,20],[18,2,4,0],[18,3,4,1],[18,13,4,11,"PART_TYPE"],[18,22,4,20],[18,24,4,22],[19,4,5,4,"PART_TYPE"],[19,13,5,13],[19,14,5,14,"PART_TYPE"],[19,23,5,23],[19,24,5,24],[19,33,5,33],[19,34,5,34],[19,37,5,37],[19,38,5,38],[19,39,5,39],[19,42,5,42],[19,51,5,51],[20,4,6,4,"PART_TYPE"],[20,13,6,13],[20,14,6,14,"PART_TYPE"],[20,23,6,23],[20,24,6,24],[20,32,6,32],[20,33,6,33],[20,36,6,36],[20,37,6,37],[20,38,6,38],[20,41,6,41],[20,49,6,49],[21,2,7,0],[21,3,7,1],[21,5,7,3,"PART_TYPE"],[21,14,7,12],[21,19,7,17,"PART_TYPE"],[21,28,7,26],[21,31,7,29],[21,32,7,30],[21,33,7,31],[21,34,7,32],[21,35,7,33],[22,2,8,0],[22,11,8,9,"mergeLiteral"],[22,23,8,21,"mergeLiteral"],[22,24,8,22,"parts"],[22,29,8,27],[22,31,8,29],[23,4,9,4],[23,8,9,8,"parts"],[23,13,9,13],[23,14,9,14,"length"],[23,20,9,20],[23,23,9,23],[23,24,9,24],[23,26,9,26],[24,6,10,8],[24,13,10,15,"parts"],[24,18,10,20],[25,4,11,4],[26,4,12,4],[26,11,12,11,"parts"],[26,16,12,16],[26,17,12,17,"reduce"],[26,23,12,23],[26,24,12,24],[26,34,12,34,"all"],[26,37,12,37],[26,39,12,39,"part"],[26,43,12,43],[26,45,12,45],[27,6,13,8],[27,10,13,12,"lastPart"],[27,18,13,20],[27,21,13,23,"all"],[27,24,13,26],[27,25,13,27,"all"],[27,28,13,30],[27,29,13,31,"length"],[27,35,13,37],[27,38,13,40],[27,39,13,41],[27,40,13,42],[28,6,14,8],[28,10,14,12],[28,11,14,13,"lastPart"],[28,19,14,21],[28,23,15,12,"lastPart"],[28,31,15,20],[28,32,15,21,"type"],[28,36,15,25],[28,41,15,30,"PART_TYPE"],[28,50,15,39],[28,51,15,40,"literal"],[28,58,15,47],[28,62,16,12,"part"],[28,66,16,16],[28,67,16,17,"type"],[28,71,16,21],[28,76,16,26,"PART_TYPE"],[28,85,16,35],[28,86,16,36,"literal"],[28,93,16,43],[28,95,16,45],[29,8,17,12,"all"],[29,11,17,15],[29,12,17,16,"push"],[29,16,17,20],[29,17,17,21,"part"],[29,21,17,25],[29,22,17,26],[30,6,18,8],[30,7,18,9],[30,13,19,13],[31,8,20,12,"lastPart"],[31,16,20,20],[31,17,20,21,"value"],[31,22,20,26],[31,26,20,30,"part"],[31,30,20,34],[31,31,20,35,"value"],[31,36,20,40],[32,6,21,8],[33,6,22,8],[33,13,22,15,"all"],[33,16,22,18],[34,4,23,4],[34,5,23,5],[34,7,23,7],[34,9,23,9],[34,10,23,10],[35,2,24,0],[36,2,25,7],[36,11,25,16,"isFormatXMLElementFn"],[36,31,25,36,"isFormatXMLElementFn"],[36,32,25,37,"el"],[36,34,25,39],[36,36,25,41],[37,4,26,4],[37,11,26,11],[37,18,26,18,"el"],[37,20,26,20],[37,25,26,25],[37,35,26,35],[38,2,27,0],[39,2,28,0],[40,2,29,7],[40,11,29,16,"formatToParts"],[40,24,29,29,"formatToParts"],[40,25,29,30,"els"],[40,28,29,33],[40,30,29,35,"locales"],[40,37,29,42],[40,39,29,44,"formatters"],[40,49,29,54],[40,51,29,56,"formats"],[40,58,29,63],[40,60,29,65,"values"],[40,66,29,71],[40,68,29,73,"currentPluralValue"],[40,86,29,91],[41,2,30,0],[42,2,31,0,"originalMessage"],[42,17,31,15],[42,19,31,17],[43,4,32,4],[44,4,33,4],[44,8,33,8,"els"],[44,11,33,11],[44,12,33,12,"length"],[44,18,33,18],[44,23,33,23],[44,24,33,24],[44,28,33,28],[44,32,33,28,"isLiteralElement"],[44,63,33,44],[44,64,33,44,"isLiteralElement"],[44,80,33,44],[44,82,33,45,"els"],[44,85,33,48],[44,86,33,49],[44,87,33,50],[44,88,33,51],[44,89,33,52],[44,91,33,54],[45,6,34,8],[45,13,34,15],[45,14,35,12],[46,8,36,16,"type"],[46,12,36,20],[46,14,36,22,"PART_TYPE"],[46,23,36,31],[46,24,36,32,"literal"],[46,31,36,39],[47,8,37,16,"value"],[47,13,37,21],[47,15,37,23,"els"],[47,18,37,26],[47,19,37,27],[47,20,37,28],[47,21,37,29],[47,22,37,30,"value"],[48,6,38,12],[48,7,38,13],[48,8,39,9],[49,4,40,4],[50,4,41,4],[50,8,41,8,"result"],[50,14,41,14],[50,17,41,17],[50,19,41,19],[51,4,42,4],[51,9,42,9],[51,13,42,13,"_i"],[51,15,42,15],[51,18,42,18],[51,19,42,19],[51,21,42,21,"els_1"],[51,26,42,26],[51,29,42,29,"els"],[51,32,42,32],[51,34,42,34,"_i"],[51,36,42,36],[51,39,42,39,"els_1"],[51,44,42,44],[51,45,42,45,"length"],[51,51,42,51],[51,53,42,53,"_i"],[51,55,42,55],[51,57,42,57],[51,59,42,59],[52,6,43,8],[52,10,43,12,"el"],[52,12,43,14],[52,15,43,17,"els_1"],[52,20,43,22],[52,21,43,23,"_i"],[52,23,43,25],[52,24,43,26],[53,6,44,8],[54,6,45,8],[54,10,45,12],[54,14,45,12,"isLiteralElement"],[54,45,45,28],[54,46,45,28,"isLiteralElement"],[54,62,45,28],[54,64,45,29,"el"],[54,66,45,31],[54,67,45,32],[54,69,45,34],[55,8,46,12,"result"],[55,14,46,18],[55,15,46,19,"push"],[55,19,46,23],[55,20,46,24],[56,10,47,16,"type"],[56,14,47,20],[56,16,47,22,"PART_TYPE"],[56,25,47,31],[56,26,47,32,"literal"],[56,33,47,39],[57,10,48,16,"value"],[57,15,48,21],[57,17,48,23,"el"],[57,19,48,25],[57,20,48,26,"value"],[58,8,49,12],[58,9,49,13],[58,10,49,14],[59,8,50,12],[60,6,51,8],[61,6,52,8],[62,6,53,8],[63,6,54,8],[63,10,54,12],[63,14,54,12,"isPoundElement"],[63,45,54,26],[63,46,54,26,"isPoundElement"],[63,60,54,26],[63,62,54,27,"el"],[63,64,54,29],[63,65,54,30],[63,67,54,32],[64,8,55,12],[64,12,55,16],[64,19,55,23,"currentPluralValue"],[64,37,55,41],[64,42,55,46],[64,50,55,54],[64,52,55,56],[65,10,56,16,"result"],[65,16,56,22],[65,17,56,23,"push"],[65,21,56,27],[65,22,56,28],[66,12,57,20,"type"],[66,16,57,24],[66,18,57,26,"PART_TYPE"],[66,27,57,35],[66,28,57,36,"literal"],[66,35,57,43],[67,12,58,20,"value"],[67,17,58,25],[67,19,58,27,"formatters"],[67,29,58,37],[67,30,58,38,"getNumberFormat"],[67,45,58,53],[67,46,58,54,"locales"],[67,53,58,61],[67,54,58,62],[67,55,58,63,"format"],[67,61,58,69],[67,62,58,70,"currentPluralValue"],[67,80,58,88],[68,10,59,16],[68,11,59,17],[68,12,59,18],[69,8,60,12],[70,8,61,12],[71,6,62,8],[72,6,63,8],[72,10,63,12,"varName"],[72,17,63,19],[72,20,63,22,"el"],[72,22,63,24],[72,23,63,25,"value"],[72,28,63,30],[73,6,64,8],[74,6,65,8],[74,10,65,12],[74,12,65,14,"values"],[74,18,65,20],[74,22,65,24,"varName"],[74,29,65,31],[74,33,65,35,"values"],[74,39,65,41],[74,40,65,42],[74,42,65,44],[75,8,66,12],[75,14,66,18],[75,18,66,22,"MissingValueError"],[75,24,66,39],[75,25,66,39,"MissingValueError"],[75,42,66,39],[75,43,66,40,"varName"],[75,50,66,47],[75,52,66,49,"originalMessage"],[75,67,66,64],[75,68,66,65],[76,6,67,8],[77,6,68,8],[77,10,68,12,"value"],[77,15,68,17],[77,18,68,20,"values"],[77,24,68,26],[77,25,68,27,"varName"],[77,32,68,34],[77,33,68,35],[78,6,69,8],[78,10,69,12],[78,14,69,12,"isArgumentElement"],[78,45,69,29],[78,46,69,29,"isArgumentElement"],[78,63,69,29],[78,65,69,30,"el"],[78,67,69,32],[78,68,69,33],[78,70,69,35],[79,8,70,12],[79,12,70,16],[79,13,70,17,"value"],[79,18,70,22],[79,22,70,26],[79,29,70,33,"value"],[79,34,70,38],[79,39,70,43],[79,47,70,51],[79,51,70,55],[79,58,70,62,"value"],[79,63,70,67],[79,68,70,72],[79,76,70,80],[79,78,70,82],[80,10,71,16,"value"],[80,15,71,21],[80,18,72,20],[80,25,72,27,"value"],[80,30,72,32],[80,35,72,37],[80,43,72,45],[80,47,72,49],[80,54,72,56,"value"],[80,59,72,61],[80,64,72,66],[80,72,72,74],[80,75,73,26,"String"],[80,81,73,32],[80,82,73,33,"value"],[80,87,73,38],[80,88,73,39],[80,91,74,26],[80,93,74,28],[81,8,75,12],[82,8,76,12,"result"],[82,14,76,18],[82,15,76,19,"push"],[82,19,76,23],[82,20,76,24],[83,10,77,16,"type"],[83,14,77,20],[83,16,77,22],[83,23,77,29,"value"],[83,28,77,34],[83,33,77,39],[83,41,77,47],[83,44,77,50,"PART_TYPE"],[83,53,77,59],[83,54,77,60,"literal"],[83,61,77,67],[83,64,77,70,"PART_TYPE"],[83,73,77,79],[83,74,77,80,"object"],[83,80,77,86],[84,10,78,16,"value"],[84,15,78,21],[84,17,78,23,"value"],[85,8,79,12],[85,9,79,13],[85,10,79,14],[86,8,80,12],[87,6,81,8],[88,6,82,8],[89,6,83,8],[90,6,84,8],[91,6,85,8],[91,10,85,12],[91,14,85,12,"isDateElement"],[91,45,85,25],[91,46,85,25,"isDateElement"],[91,59,85,25],[91,61,85,26,"el"],[91,63,85,28],[91,64,85,29],[91,66,85,31],[92,8,86,12],[92,12,86,16,"style"],[92,17,86,21],[92,20,86,24],[92,27,86,31,"el"],[92,29,86,33],[92,30,86,34,"style"],[92,35,86,39],[92,40,86,44],[92,48,86,52],[92,51,87,18,"formats"],[92,58,87,25],[92,59,87,26,"date"],[92,63,87,30],[92,64,87,31,"el"],[92,66,87,33],[92,67,87,34,"style"],[92,72,87,39],[92,73,87,40],[92,76,88,18],[92,80,88,18,"isDateTimeSkeleton"],[92,111,88,36],[92,112,88,36,"isDateTimeSkeleton"],[92,130,88,36],[92,132,88,37,"el"],[92,134,88,39],[92,135,88,40,"style"],[92,140,88,45],[92,141,88,46],[92,144,89,22,"el"],[92,146,89,24],[92,147,89,25,"style"],[92,152,89,30],[92,153,89,31,"parsedOptions"],[92,166,89,44],[92,169,90,22,"undefined"],[92,178,90,31],[93,8,91,12,"result"],[93,14,91,18],[93,15,91,19,"push"],[93,19,91,23],[93,20,91,24],[94,10,92,16,"type"],[94,14,92,20],[94,16,92,22,"PART_TYPE"],[94,25,92,31],[94,26,92,32,"literal"],[94,33,92,39],[95,10,93,16,"value"],[95,15,93,21],[95,17,93,23,"formatters"],[95,27,93,33],[95,28,94,21,"getDateTimeFormat"],[95,45,94,38],[95,46,94,39,"locales"],[95,53,94,46],[95,55,94,48,"style"],[95,60,94,53],[95,61,94,54],[95,62,95,21,"format"],[95,68,95,27],[95,69,95,28,"value"],[95,74,95,33],[96,8,96,12],[96,9,96,13],[96,10,96,14],[97,8,97,12],[98,6,98,8],[99,6,99,8],[99,10,99,12],[99,14,99,12,"isTimeElement"],[99,45,99,25],[99,46,99,25,"isTimeElement"],[99,59,99,25],[99,61,99,26,"el"],[99,63,99,28],[99,64,99,29],[99,66,99,31],[100,8,100,12],[100,12,100,16,"style"],[100,17,100,21],[100,20,100,24],[100,27,100,31,"el"],[100,29,100,33],[100,30,100,34,"style"],[100,35,100,39],[100,40,100,44],[100,48,100,52],[100,51,101,18,"formats"],[100,58,101,25],[100,59,101,26,"time"],[100,63,101,30],[100,64,101,31,"el"],[100,66,101,33],[100,67,101,34,"style"],[100,72,101,39],[100,73,101,40],[100,76,102,18],[100,80,102,18,"isDateTimeSkeleton"],[100,111,102,36],[100,112,102,36,"isDateTimeSkeleton"],[100,130,102,36],[100,132,102,37,"el"],[100,134,102,39],[100,135,102,40,"style"],[100,140,102,45],[100,141,102,46],[100,144,103,22,"el"],[100,146,103,24],[100,147,103,25,"style"],[100,152,103,30],[100,153,103,31,"parsedOptions"],[100,166,103,44],[100,169,104,22,"formats"],[100,176,104,29],[100,177,104,30,"time"],[100,181,104,34],[100,182,104,35,"medium"],[100,188,104,41],[101,8,105,12,"result"],[101,14,105,18],[101,15,105,19,"push"],[101,19,105,23],[101,20,105,24],[102,10,106,16,"type"],[102,14,106,20],[102,16,106,22,"PART_TYPE"],[102,25,106,31],[102,26,106,32,"literal"],[102,33,106,39],[103,10,107,16,"value"],[103,15,107,21],[103,17,107,23,"formatters"],[103,27,107,33],[103,28,108,21,"getDateTimeFormat"],[103,45,108,38],[103,46,108,39,"locales"],[103,53,108,46],[103,55,108,48,"style"],[103,60,108,53],[103,61,108,54],[103,62,109,21,"format"],[103,68,109,27],[103,69,109,28,"value"],[103,74,109,33],[104,8,110,12],[104,9,110,13],[104,10,110,14],[105,8,111,12],[106,6,112,8],[107,6,113,8],[107,10,113,12],[107,14,113,12,"isNumberElement"],[107,45,113,27],[107,46,113,27,"isNumberElement"],[107,61,113,27],[107,63,113,28,"el"],[107,65,113,30],[107,66,113,31],[107,68,113,33],[108,8,114,12],[108,12,114,16,"style"],[108,17,114,21],[108,20,114,24],[108,27,114,31,"el"],[108,29,114,33],[108,30,114,34,"style"],[108,35,114,39],[108,40,114,44],[108,48,114,52],[108,51,115,18,"formats"],[108,58,115,25],[108,59,115,26,"number"],[108,65,115,32],[108,66,115,33,"el"],[108,68,115,35],[108,69,115,36,"style"],[108,74,115,41],[108,75,115,42],[108,78,116,18],[108,82,116,18,"isNumberSkeleton"],[108,113,116,34],[108,114,116,34,"isNumberSkeleton"],[108,130,116,34],[108,132,116,35,"el"],[108,134,116,37],[108,135,116,38,"style"],[108,140,116,43],[108,141,116,44],[108,144,117,22,"el"],[108,146,117,24],[108,147,117,25,"style"],[108,152,117,30],[108,153,117,31,"parsedOptions"],[108,166,117,44],[108,169,118,22,"undefined"],[108,178,118,31],[109,8,119,12],[109,12,119,16,"style"],[109,17,119,21],[109,21,119,25,"style"],[109,26,119,30],[109,27,119,31,"scale"],[109,32,119,36],[109,34,119,38],[110,10,120,16,"value"],[110,15,120,21],[110,18,121,20,"value"],[110,23,121,25],[110,27,122,25,"style"],[110,32,122,30],[110,33,122,31,"scale"],[110,38,122,36],[110,42,122,40],[110,43,122,41],[110,44,122,42],[111,8,123,12],[112,8,124,12,"result"],[112,14,124,18],[112,15,124,19,"push"],[112,19,124,23],[112,20,124,24],[113,10,125,16,"type"],[113,14,125,20],[113,16,125,22,"PART_TYPE"],[113,25,125,31],[113,26,125,32,"literal"],[113,33,125,39],[114,10,126,16,"value"],[114,15,126,21],[114,17,126,23,"formatters"],[114,27,126,33],[114,28,127,21,"getNumberFormat"],[114,43,127,36],[114,44,127,37,"locales"],[114,51,127,44],[114,53,127,46,"style"],[114,58,127,51],[114,59,127,52],[114,60,128,21,"format"],[114,66,128,27],[114,67,128,28,"value"],[114,72,128,33],[115,8,129,12],[115,9,129,13],[115,10,129,14],[116,8,130,12],[117,6,131,8],[118,6,132,8],[118,10,132,12],[118,14,132,12,"isTagElement"],[118,45,132,24],[118,46,132,24,"isTagElement"],[118,58,132,24],[118,60,132,25,"el"],[118,62,132,27],[118,63,132,28],[118,65,132,30],[119,8,133,12],[119,12,133,16,"children"],[119,20,133,24],[119,23,133,27,"el"],[119,25,133,29],[119,26,133,30,"children"],[119,34,133,38],[120,10,133,40,"value_1"],[120,17,133,47],[120,20,133,50,"el"],[120,22,133,52],[120,23,133,53,"value"],[120,28,133,58],[121,8,134,12],[121,12,134,16,"formatFn"],[121,20,134,24],[121,23,134,27,"values"],[121,29,134,33],[121,30,134,34,"value_1"],[121,37,134,41],[121,38,134,42],[122,8,135,12],[122,12,135,16],[122,13,135,17,"isFormatXMLElementFn"],[122,33,135,37],[122,34,135,38,"formatFn"],[122,42,135,46],[122,43,135,47],[122,45,135,49],[123,10,136,16],[123,16,136,22],[123,20,136,26,"InvalidValueTypeError"],[123,26,136,47],[123,27,136,47,"InvalidValueTypeError"],[123,48,136,47],[123,49,136,48,"value_1"],[123,56,136,55],[123,58,136,57],[123,68,136,67],[123,70,136,69,"originalMessage"],[123,85,136,84],[123,86,136,85],[124,8,137,12],[125,8,138,12],[125,12,138,16,"parts"],[125,17,138,21],[125,20,138,24,"formatToParts"],[125,33,138,37],[125,34,138,38,"children"],[125,42,138,46],[125,44,138,48,"locales"],[125,51,138,55],[125,53,138,57,"formatters"],[125,63,138,67],[125,65,138,69,"formats"],[125,72,138,76],[125,74,138,78,"values"],[125,80,138,84],[125,82,138,86,"currentPluralValue"],[125,100,138,104],[125,101,138,105],[126,8,139,12],[126,12,139,16,"chunks"],[126,18,139,22],[126,21,139,25,"formatFn"],[126,29,139,33],[126,30,139,34,"parts"],[126,35,139,39],[126,36,139,40,"map"],[126,39,139,43],[126,40,139,44],[126,50,139,54,"p"],[126,51,139,55],[126,53,139,57],[127,10,139,59],[127,17,139,66,"p"],[127,18,139,67],[127,19,139,68,"value"],[127,24,139,73],[128,8,139,75],[128,9,139,76],[128,10,139,77],[128,11,139,78],[129,8,140,12],[129,12,140,16],[129,13,140,17,"Array"],[129,18,140,22],[129,19,140,23,"isArray"],[129,26,140,30],[129,27,140,31,"chunks"],[129,33,140,37],[129,34,140,38],[129,36,140,40],[130,10,141,16,"chunks"],[130,16,141,22],[130,19,141,25],[130,20,141,26,"chunks"],[130,26,141,32],[130,27,141,33],[131,8,142,12],[132,8,143,12,"result"],[132,14,143,18],[132,15,143,19,"push"],[132,19,143,23],[132,20,143,24,"apply"],[132,25,143,29],[132,26,143,30,"result"],[132,32,143,36],[132,34,143,38,"chunks"],[132,40,143,44],[132,41,143,45,"map"],[132,44,143,48],[132,45,143,49],[132,55,143,59,"c"],[132,56,143,60],[132,58,143,62],[133,10,144,16],[133,17,144,23],[134,12,145,20,"type"],[134,16,145,24],[134,18,145,26],[134,25,145,33,"c"],[134,26,145,34],[134,31,145,39],[134,39,145,47],[134,42,145,50,"PART_TYPE"],[134,51,145,59],[134,52,145,60,"literal"],[134,59,145,67],[134,62,145,70,"PART_TYPE"],[134,71,145,79],[134,72,145,80,"object"],[134,78,145,86],[135,12,146,20,"value"],[135,17,146,25],[135,19,146,27,"c"],[136,10,147,16],[136,11,147,17],[137,8,148,12],[137,9,148,13],[137,10,148,14],[137,11,148,15],[138,6,149,8],[139,6,150,8],[139,10,150,12],[139,14,150,12,"isSelectElement"],[139,45,150,27],[139,46,150,27,"isSelectElement"],[139,61,150,27],[139,63,150,28,"el"],[139,65,150,30],[139,66,150,31],[139,68,150,33],[140,8,151,12],[140,12,151,16,"opt"],[140,15,151,19],[140,18,151,22,"el"],[140,20,151,24],[140,21,151,25,"options"],[140,28,151,32],[140,29,151,33,"value"],[140,34,151,38],[140,35,151,39],[140,39,151,43,"el"],[140,41,151,45],[140,42,151,46,"options"],[140,49,151,53],[140,50,151,54,"other"],[140,55,151,59],[141,8,152,12],[141,12,152,16],[141,13,152,17,"opt"],[141,16,152,20],[141,18,152,22],[142,10,153,16],[142,16,153,22],[142,20,153,26,"InvalidValueError"],[142,26,153,43],[142,27,153,43,"InvalidValueError"],[142,44,153,43],[142,45,153,44,"el"],[142,47,153,46],[142,48,153,47,"value"],[142,53,153,52],[142,55,153,54,"value"],[142,60,153,59],[142,62,153,61,"Object"],[142,68,153,67],[142,69,153,68,"keys"],[142,73,153,72],[142,74,153,73,"el"],[142,76,153,75],[142,77,153,76,"options"],[142,84,153,83],[142,85,153,84],[142,87,153,86,"originalMessage"],[142,102,153,101],[142,103,153,102],[143,8,154,12],[144,8,155,12,"result"],[144,14,155,18],[144,15,155,19,"push"],[144,19,155,23],[144,20,155,24,"apply"],[144,25,155,29],[144,26,155,30,"result"],[144,32,155,36],[144,34,155,38,"formatToParts"],[144,47,155,51],[144,48,155,52,"opt"],[144,51,155,55],[144,52,155,56,"value"],[144,57,155,61],[144,59,155,63,"locales"],[144,66,155,70],[144,68,155,72,"formatters"],[144,78,155,82],[144,80,155,84,"formats"],[144,87,155,91],[144,89,155,93,"values"],[144,95,155,99],[144,96,155,100],[144,97,155,101],[145,8,156,12],[146,6,157,8],[147,6,158,8],[147,10,158,12],[147,14,158,12,"isPluralElement"],[147,45,158,27],[147,46,158,27,"isPluralElement"],[147,61,158,27],[147,63,158,28,"el"],[147,65,158,30],[147,66,158,31],[147,68,158,33],[148,8,159,12],[148,12,159,16,"opt"],[148,15,159,19],[148,18,159,22,"el"],[148,20,159,24],[148,21,159,25,"options"],[148,28,159,32],[148,29,159,33],[148,32,159,36],[148,33,159,37,"concat"],[148,39,159,43],[148,40,159,44,"value"],[148,45,159,49],[148,46,159,50],[148,47,159,51],[149,8,160,12],[149,12,160,16],[149,13,160,17,"opt"],[149,16,160,20],[149,18,160,22],[150,10,161,16],[150,14,161,20],[150,15,161,21,"Intl"],[150,19,161,25],[150,20,161,26,"PluralRules"],[150,31,161,37],[150,33,161,39],[151,12,162,20],[151,18,162,26],[151,22,162,30,"FormatError"],[151,28,162,41],[151,29,162,41,"FormatError"],[151,40,162,41],[151,41,162,42],[151,156,162,157],[151,158,162,159,"ErrorCode"],[151,164,162,168],[151,165,162,168,"ErrorCode"],[151,174,162,168],[151,175,162,169,"MISSING_INTL_API"],[151,191,162,185],[151,193,162,187,"originalMessage"],[151,208,162,202],[151,209,162,203],[152,10,163,16],[153,10,164,16],[153,14,164,20,"rule"],[153,18,164,24],[153,21,164,27,"formatters"],[153,31,164,37],[153,32,165,21,"getPluralRules"],[153,46,165,35],[153,47,165,36,"locales"],[153,54,165,43],[153,56,165,45],[154,12,165,47,"type"],[154,16,165,51],[154,18,165,53,"el"],[154,20,165,55],[154,21,165,56,"pluralType"],[155,10,165,67],[155,11,165,68],[155,12,165,69],[155,13,166,21,"select"],[155,19,166,27],[155,20,166,28,"value"],[155,25,166,33],[155,29,166,37,"el"],[155,31,166,39],[155,32,166,40,"offset"],[155,38,166,46],[155,42,166,50],[155,43,166,51],[155,44,166,52],[155,45,166,53],[156,10,167,16,"opt"],[156,13,167,19],[156,16,167,22,"el"],[156,18,167,24],[156,19,167,25,"options"],[156,26,167,32],[156,27,167,33,"rule"],[156,31,167,37],[156,32,167,38],[156,36,167,42,"el"],[156,38,167,44],[156,39,167,45,"options"],[156,46,167,52],[156,47,167,53,"other"],[156,52,167,58],[157,8,168,12],[158,8,169,12],[158,12,169,16],[158,13,169,17,"opt"],[158,16,169,20],[158,18,169,22],[159,10,170,16],[159,16,170,22],[159,20,170,26,"InvalidValueError"],[159,26,170,43],[159,27,170,43,"InvalidValueError"],[159,44,170,43],[159,45,170,44,"el"],[159,47,170,46],[159,48,170,47,"value"],[159,53,170,52],[159,55,170,54,"value"],[159,60,170,59],[159,62,170,61,"Object"],[159,68,170,67],[159,69,170,68,"keys"],[159,73,170,72],[159,74,170,73,"el"],[159,76,170,75],[159,77,170,76,"options"],[159,84,170,83],[159,85,170,84],[159,87,170,86,"originalMessage"],[159,102,170,101],[159,103,170,102],[160,8,171,12],[161,8,172,12,"result"],[161,14,172,18],[161,15,172,19,"push"],[161,19,172,23],[161,20,172,24,"apply"],[161,25,172,29],[161,26,172,30,"result"],[161,32,172,36],[161,34,172,38,"formatToParts"],[161,47,172,51],[161,48,172,52,"opt"],[161,51,172,55],[161,52,172,56,"value"],[161,57,172,61],[161,59,172,63,"locales"],[161,66,172,70],[161,68,172,72,"formatters"],[161,78,172,82],[161,80,172,84,"formats"],[161,87,172,91],[161,89,172,93,"values"],[161,95,172,99],[161,97,172,101,"value"],[161,102,172,106],[161,106,172,110,"el"],[161,108,172,112],[161,109,172,113,"offset"],[161,115,172,119],[161,119,172,123],[161,120,172,124],[161,121,172,125],[161,122,172,126],[161,123,172,127],[162,8,173,12],[163,6,174,8],[164,4,175,4],[165,4,176,4],[165,11,176,11,"mergeLiteral"],[165,23,176,23],[165,24,176,24,"result"],[165,30,176,30],[165,31,176,31],[166,2,177,0],[167,0,177,1],[167,3]],"functionMap":{"names":["<global>","<anonymous>","mergeLiteral","parts.reduce$argument_0","isFormatXMLElementFn","formatToParts","parts.map$argument_0","chunks.map$argument_0"],"mappings":"AAA;CCG;CDG;AEC;wBCI;KDW;CFC;OIC;CJE;OKE;4CC8G,gCD;iDEI;aFK;CL6B"},"hasCjsExports":false},"type":"js/module"}]}