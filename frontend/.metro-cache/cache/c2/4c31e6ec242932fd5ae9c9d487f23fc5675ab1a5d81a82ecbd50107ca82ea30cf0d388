{"dependencies":[{"name":"./sxToSxResolved","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":22,"index":179},"end":{"line":7,"column":49,"index":206}}],"key":"vQvuAtvNMZXru1dfOs8hhCCOmLo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.reduceAndResolveCompoundVariants = reduceAndResolveCompoundVariants;\n  var _sxToSxResolved = require(_dependencyMap[0], \"./sxToSxResolved\");\n  function reduceAndResolveCompoundVariants(compoundVariants, path, CONFIG, shouldResolve = true) {\n    const compoundVariantsResolved = compoundVariants === null || compoundVariants === void 0 ? void 0 : compoundVariants.map((compoundVariant, index) => {\n      const {\n        value,\n        ...condition\n      } = compoundVariant;\n      // let conditionPath: Array<string> = [];\n      // Object.keys(condition).map((key) => {\n      //   conditionPath.push(key);\n      //   conditionPath.push(condition[key]);\n      // });\n      return (0, _sxToSxResolved.sxToSXResolved)(\n      //@ts-ignore\n\n      value, [...path, 'compoundVariants', index], {\n        condition\n      }, CONFIG, shouldResolve);\n    });\n    // console.log(compoundVariantsResolved, 'compoundVariantsResolved');\n\n    return compoundVariantsResolved;\n  }\n});","lineCount":31,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"reduceAndResolveCompoundVariants"],[7,42,6,40],[7,45,6,43,"reduceAndResolveCompoundVariants"],[7,77,6,75],[8,2,7,0],[8,6,7,4,"_sxToSxResolved"],[8,21,7,19],[8,24,7,22,"require"],[8,31,7,29],[8,32,7,29,"_dependencyMap"],[8,46,7,29],[8,69,7,48],[8,70,7,49],[9,2,8,0],[9,11,8,9,"reduceAndResolveCompoundVariants"],[9,43,8,41,"reduceAndResolveCompoundVariants"],[9,44,8,42,"compoundVariants"],[9,60,8,58],[9,62,8,60,"path"],[9,66,8,64],[9,68,8,66,"CONFIG"],[9,74,8,72],[9,76,8,74,"shouldResolve"],[9,89,8,87],[9,92,8,90],[9,96,8,94],[9,98,8,96],[10,4,9,2],[10,10,9,8,"compoundVariantsResolved"],[10,34,9,32],[10,37,9,35,"compoundVariants"],[10,53,9,51],[10,58,9,56],[10,62,9,60],[10,66,9,64,"compoundVariants"],[10,82,9,80],[10,87,9,85],[10,92,9,90],[10,93,9,91],[10,96,9,94],[10,101,9,99],[10,102,9,100],[10,105,9,103,"compoundVariants"],[10,121,9,119],[10,122,9,120,"map"],[10,125,9,123],[10,126,9,124],[10,127,9,125,"compoundVariant"],[10,142,9,140],[10,144,9,142,"index"],[10,149,9,147],[10,154,9,152],[11,6,10,4],[11,12,10,10],[12,8,11,6,"value"],[12,13,11,11],[13,8,12,6],[13,11,12,9,"condition"],[14,6,13,4],[14,7,13,5],[14,10,13,8,"compoundVariant"],[14,25,13,23],[15,6,14,4],[16,6,15,4],[17,6,16,4],[18,6,17,4],[19,6,18,4],[20,6,19,4],[20,13,19,11],[20,14,19,12],[20,15,19,13],[20,17,19,15,"_sxToSxResolved"],[20,32,19,30],[20,33,19,31,"sxToSXResolved"],[20,47,19,45],[21,6,20,4],[23,6,22,4,"value"],[23,11,22,9],[23,13,22,11],[23,14,22,12],[23,17,22,15,"path"],[23,21,22,19],[23,23,22,21],[23,41,22,39],[23,43,22,41,"index"],[23,48,22,46],[23,49,22,47],[23,51,22,49],[24,8,23,6,"condition"],[25,6,24,4],[25,7,24,5],[25,9,24,7,"CONFIG"],[25,15,24,13],[25,17,24,15,"shouldResolve"],[25,30,24,28],[25,31,24,29],[26,4,25,2],[26,5,25,3],[26,6,25,4],[27,4,26,2],[29,4,28,2],[29,11,28,9,"compoundVariantsResolved"],[29,35,28,33],[30,2,29,0],[31,0,29,1],[31,3]],"functionMap":{"names":["<global>","reduceAndResolveCompoundVariants","compoundVariants.map$argument_0"],"mappings":"AAA;ACO;4HCC;GDgB;CDI"},"hasCjsExports":true},"type":"js/module"}]}