{"dependencies":[{"name":"@react-stately/collections","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":621},"end":{"line":13,"column":58,"index":679}}],"key":"oPA1pq1AaTHiTwy6sr13sX+8yu4=","exportNames":["*"],"imports":1}},{"name":"@react-aria/interactions","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":680},"end":{"line":14,"column":71,"index":751}}],"key":"FcpU6JkYHVe2vVdySmtNP/5zbkQ=","exportNames":["*"],"imports":1}},{"name":"@react-native-aria/interactions","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":752},"end":{"line":15,"column":69,"index":821}}],"key":"7wnYIwH0J6Yl5OEFOthLZfkuaHo=","exportNames":["*"],"imports":1}},{"name":"@react-native-aria/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":822},"end":{"line":16,"column":59,"index":881}}],"key":"ijskzN+IV/diNKTT1BJzRK8qf8I=","exportNames":["*"],"imports":1}},{"name":"@react-aria/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":882},"end":{"line":17,"column":58,"index":940}}],"key":"1YkQy8j1AiEA5UJkjTUYe2TKBMU=","exportNames":["*"],"imports":1}},{"name":"@react-aria/selection","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":18,"column":0,"index":941},"end":{"line":18,"column":58,"index":999}}],"key":"X45zO0srcvRwTdVF6HkSdxQhd3c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.useMenuItem = useMenuItem;\n  var _reactStatelyCollections = require(_dependencyMap[0], \"@react-stately/collections\");\n  var _reactAriaInteractions = require(_dependencyMap[1], \"@react-aria/interactions\");\n  var _reactNativeAriaInteractions = require(_dependencyMap[2], \"@react-native-aria/interactions\");\n  var _reactNativeAriaUtils = require(_dependencyMap[3], \"@react-native-aria/utils\");\n  var _reactAriaUtils = require(_dependencyMap[4], \"@react-aria/utils\");\n  var _reactAriaSelection = require(_dependencyMap[5], \"@react-aria/selection\");\n  /*\n   * Copyright 2020 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n\n  /**\n   * Provides the behavior and accessibility implementation for an item in a menu.\n   * See `useMenu` for more details about menus.\n   * @param props - Props for the item.\n   * @param state - State for the menu, as returned by `useTreeState`.\n   */\n  function useMenuItem(props, state, ref) {\n    let {\n      isSelected,\n      isDisabled,\n      key,\n      onClose,\n      closeOnSelect = true,\n      isVirtualized,\n      onAction\n    } = props;\n    let role = 'menuitem';\n    if (state.selectionManager.selectionMode === 'single') {\n      role = 'menuitemradio';\n    } else if (state.selectionManager.selectionMode === 'multiple') {\n      role = 'menuitemcheckbox';\n    }\n    let labelId = (0, _reactAriaUtils.useSlotId)();\n    let descriptionId = (0, _reactAriaUtils.useSlotId)();\n    let keyboardId = (0, _reactAriaUtils.useSlotId)();\n    let ariaProps = {\n      'aria-disabled': isDisabled,\n      role,\n      'aria-label': props['aria-label'],\n      'aria-labelledby': labelId,\n      'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n    };\n    if (state.selectionManager.selectionMode !== 'none') {\n      ariaProps['aria-checked'] = isSelected;\n    }\n    if (isVirtualized) {\n      ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n      ariaProps['aria-setsize'] = (0, _reactStatelyCollections.getItemCount)(state.collection);\n    }\n    let onPressStart = e => {\n      if (e.pointerType === 'keyboard' && onAction) {\n        onAction(key);\n      }\n    };\n    let onPress = () => {\n      if (closeOnSelect && onClose) {\n        onClose();\n      }\n    };\n    let onPressUp = e => {\n      if (e.pointerType !== 'keyboard') {\n        if (onAction) {\n          onAction(key);\n        }\n      }\n    };\n    let {\n      itemProps\n    } = (0, _reactAriaSelection.useSelectableItem)({\n      selectionManager: state.selectionManager,\n      key,\n      ref,\n      shouldSelectOnPressUp: true\n    });\n    let {\n      pressProps\n    } = (0, _reactNativeAriaInteractions.usePress)((0, _reactAriaUtils.mergeProps)({\n      onPressStart,\n      onPressUp,\n      onPress,\n      isDisabled\n    }, (0, _reactNativeAriaUtils.mapDomPropsToRN)(itemProps)));\n    let {\n      hoverProps\n    } = (0, _reactNativeAriaInteractions.useHover)({\n      isDisabled,\n      onHoverStart() {\n        if (!(0, _reactAriaInteractions.isFocusVisible)()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }, ref);\n    const {\n      keyboardProps\n    } = (0, _reactAriaInteractions.useKeyboard)({\n      onKeyDown: e => {\n        // Ignore repeating events, which may have started on the menu trigger before moving\n        // focus to the menu item. We want to wait for a second complete key press sequence.\n        if (e.repeat) {\n          e.continuePropagation();\n          return;\n        }\n        switch (e.key) {\n          case ' ':\n            if (!isDisabled && closeOnSelect && onClose) {\n              onClose();\n            }\n            break;\n          case 'Enter':\n            // The Enter key should always close on select, except if overridden.\n            if (!isDisabled && closeOnSelect && onClose) {\n              onClose();\n            }\n            break;\n          default:\n            e.continuePropagation();\n            break;\n        }\n      }\n    });\n    return {\n      menuItemProps: Object.assign({}, (0, _reactNativeAriaUtils.mapDomPropsToRN)(ariaProps), (0, _reactAriaUtils.mergeProps)(pressProps, hoverProps, keyboardProps)),\n      labelProps: {\n        id: labelId\n      },\n      descriptionProps: {\n        id: descriptionId\n      },\n      keyboardShortcutProps: {\n        id: keyboardId\n      }\n    };\n  }\n});","lineCount":150,"map":[[7,2,25,0,"exports"],[7,9,25,0],[7,10,25,0,"useMenuItem"],[7,21,25,0],[7,24,25,0,"useMenuItem"],[7,35,25,0],[8,2,13,0],[8,6,13,0,"_reactStatelyCollections"],[8,30,13,0],[8,33,13,0,"require"],[8,40,13,0],[8,41,13,0,"_dependencyMap"],[8,55,13,0],[9,2,14,0],[9,6,14,0,"_reactAriaInteractions"],[9,28,14,0],[9,31,14,0,"require"],[9,38,14,0],[9,39,14,0,"_dependencyMap"],[9,53,14,0],[10,2,15,0],[10,6,15,0,"_reactNativeAriaInteractions"],[10,34,15,0],[10,37,15,0,"require"],[10,44,15,0],[10,45,15,0,"_dependencyMap"],[10,59,15,0],[11,2,16,0],[11,6,16,0,"_reactNativeAriaUtils"],[11,27,16,0],[11,30,16,0,"require"],[11,37,16,0],[11,38,16,0,"_dependencyMap"],[11,52,16,0],[12,2,17,0],[12,6,17,0,"_reactAriaUtils"],[12,21,17,0],[12,24,17,0,"require"],[12,31,17,0],[12,32,17,0,"_dependencyMap"],[12,46,17,0],[13,2,18,0],[13,6,18,0,"_reactAriaSelection"],[13,25,18,0],[13,28,18,0,"require"],[13,35,18,0],[13,36,18,0,"_dependencyMap"],[13,50,18,0],[14,2,1,0],[15,0,2,0],[16,0,3,0],[17,0,4,0],[18,0,5,0],[19,0,6,0],[20,0,7,0],[21,0,8,0],[22,0,9,0],[23,0,10,0],[24,0,11,0],[26,2,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,2,25,7],[32,11,25,16,"useMenuItem"],[32,22,25,27,"useMenuItem"],[32,23,25,28,"props"],[32,28,25,33],[32,30,25,35,"state"],[32,35,25,40],[32,37,25,42,"ref"],[32,40,25,45],[32,42,25,47],[33,4,26,2],[33,8,26,6],[34,6,27,4,"isSelected"],[34,16,27,14],[35,6,28,4,"isDisabled"],[35,16,28,14],[36,6,29,4,"key"],[36,9,29,7],[37,6,30,4,"onClose"],[37,13,30,11],[38,6,31,4,"closeOnSelect"],[38,19,31,17],[38,22,31,20],[38,26,31,24],[39,6,32,4,"isVirtualized"],[39,19,32,17],[40,6,33,4,"onAction"],[41,4,34,2],[41,5,34,3],[41,8,34,6,"props"],[41,13,34,11],[42,4,35,2],[42,8,35,6,"role"],[42,12,35,10],[42,15,35,13],[42,25,35,23],[43,4,36,2],[43,8,36,6,"state"],[43,13,36,11],[43,14,36,12,"selectionManager"],[43,30,36,28],[43,31,36,29,"selectionMode"],[43,44,36,42],[43,49,36,47],[43,57,36,55],[43,59,36,57],[44,6,37,4,"role"],[44,10,37,8],[44,13,37,11],[44,28,37,26],[45,4,38,2],[45,5,38,3],[45,11,38,9],[45,15,38,13,"state"],[45,20,38,18],[45,21,38,19,"selectionManager"],[45,37,38,35],[45,38,38,36,"selectionMode"],[45,51,38,49],[45,56,38,54],[45,66,38,64],[45,68,38,66],[46,6,39,4,"role"],[46,10,39,8],[46,13,39,11],[46,31,39,29],[47,4,40,2],[48,4,41,2],[48,8,41,6,"labelId"],[48,15,41,13],[48,18,41,16],[48,22,41,16,"useSlotId"],[48,37,41,25],[48,38,41,25,"useSlotId"],[48,47,41,25],[48,49,41,26],[48,50,41,27],[49,4,42,2],[49,8,42,6,"descriptionId"],[49,21,42,19],[49,24,42,22],[49,28,42,22,"useSlotId"],[49,43,42,31],[49,44,42,31,"useSlotId"],[49,53,42,31],[49,55,42,32],[49,56,42,33],[50,4,43,2],[50,8,43,6,"keyboardId"],[50,18,43,16],[50,21,43,19],[50,25,43,19,"useSlotId"],[50,40,43,28],[50,41,43,28,"useSlotId"],[50,50,43,28],[50,52,43,29],[50,53,43,30],[51,4,44,2],[51,8,44,6,"ariaProps"],[51,17,44,15],[51,20,44,18],[52,6,45,4],[52,21,45,19],[52,23,45,21,"isDisabled"],[52,33,45,31],[53,6,46,4,"role"],[53,10,46,8],[54,6,47,4],[54,18,47,16],[54,20,47,18,"props"],[54,25,47,23],[54,26,47,24],[54,38,47,36],[54,39,47,37],[55,6,48,4],[55,23,48,21],[55,25,48,23,"labelId"],[55,32,48,30],[56,6,49,4],[56,24,49,22],[56,26,49,24],[56,27,49,25,"descriptionId"],[56,40,49,38],[56,42,49,40,"keyboardId"],[56,52,49,50],[56,53,49,51],[56,54,49,52,"filter"],[56,60,49,58],[56,61,49,59,"Boolean"],[56,68,49,66],[56,69,49,67],[56,70,49,68,"join"],[56,74,49,72],[56,75,49,73],[56,78,49,76],[56,79,49,77],[56,83,49,81,"undefined"],[57,4,50,2],[57,5,50,3],[58,4,51,2],[58,8,51,6,"state"],[58,13,51,11],[58,14,51,12,"selectionManager"],[58,30,51,28],[58,31,51,29,"selectionMode"],[58,44,51,42],[58,49,51,47],[58,55,51,53],[58,57,51,55],[59,6,52,4,"ariaProps"],[59,15,52,13],[59,16,52,14],[59,30,52,28],[59,31,52,29],[59,34,52,32,"isSelected"],[59,44,52,42],[60,4,53,2],[61,4,54,2],[61,8,54,6,"isVirtualized"],[61,21,54,19],[61,23,54,21],[62,6,55,4,"ariaProps"],[62,15,55,13],[62,16,55,14],[62,31,55,29],[62,32,55,30],[62,35,55,33,"state"],[62,40,55,38],[62,41,55,39,"collection"],[62,51,55,49],[62,52,55,50,"getItem"],[62,59,55,57],[62,60,55,58,"key"],[62,63,55,61],[62,64,55,62],[62,65,55,63,"index"],[62,70,55,68],[63,6,56,4,"ariaProps"],[63,15,56,13],[63,16,56,14],[63,30,56,28],[63,31,56,29],[63,34,56,32],[63,38,56,32,"getItemCount"],[63,62,56,44],[63,63,56,44,"getItemCount"],[63,75,56,44],[63,77,56,45,"state"],[63,82,56,50],[63,83,56,51,"collection"],[63,93,56,61],[63,94,56,62],[64,4,57,2],[65,4,58,2],[65,8,58,6,"onPressStart"],[65,20,58,18],[65,23,58,21,"e"],[65,24,58,22],[65,28,58,26],[66,6,59,4],[66,10,59,8,"e"],[66,11,59,9],[66,12,59,10,"pointerType"],[66,23,59,21],[66,28,59,26],[66,38,59,36],[66,42,59,40,"onAction"],[66,50,59,48],[66,52,59,50],[67,8,60,6,"onAction"],[67,16,60,14],[67,17,60,15,"key"],[67,20,60,18],[67,21,60,19],[68,6,61,4],[69,4,62,2],[69,5,62,3],[70,4,63,2],[70,8,63,6,"onPress"],[70,15,63,13],[70,18,63,16,"onPress"],[70,19,63,16],[70,24,63,22],[71,6,64,4],[71,10,64,8,"closeOnSelect"],[71,23,64,21],[71,27,64,25,"onClose"],[71,34,64,32],[71,36,64,34],[72,8,65,6,"onClose"],[72,15,65,13],[72,16,65,14],[72,17,65,15],[73,6,66,4],[74,4,67,2],[74,5,67,3],[75,4,68,2],[75,8,68,6,"onPressUp"],[75,17,68,15],[75,20,68,18,"e"],[75,21,68,19],[75,25,68,23],[76,6,69,4],[76,10,69,8,"e"],[76,11,69,9],[76,12,69,10,"pointerType"],[76,23,69,21],[76,28,69,26],[76,38,69,36],[76,40,69,38],[77,8,70,6],[77,12,70,10,"onAction"],[77,20,70,18],[77,22,70,20],[78,10,71,8,"onAction"],[78,18,71,16],[78,19,71,17,"key"],[78,22,71,20],[78,23,71,21],[79,8,72,6],[80,6,73,4],[81,4,74,2],[81,5,74,3],[82,4,75,2],[82,8,75,6],[83,6,76,4,"itemProps"],[84,4,77,2],[84,5,77,3],[84,8,77,6],[84,12,77,6,"useSelectableItem"],[84,31,77,23],[84,32,77,23,"useSelectableItem"],[84,49,77,23],[84,51,77,24],[85,6,78,4,"selectionManager"],[85,22,78,20],[85,24,78,22,"state"],[85,29,78,27],[85,30,78,28,"selectionManager"],[85,46,78,44],[86,6,79,4,"key"],[86,9,79,7],[87,6,80,4,"ref"],[87,9,80,7],[88,6,81,4,"shouldSelectOnPressUp"],[88,27,81,25],[88,29,81,27],[89,4,82,2],[89,5,82,3],[89,6,82,4],[90,4,83,2],[90,8,83,6],[91,6,84,4,"pressProps"],[92,4,85,2],[92,5,85,3],[92,8,85,6],[92,12,85,6,"usePress"],[92,40,85,14],[92,41,85,14,"usePress"],[92,49,85,14],[92,51,85,15],[92,55,85,15,"mergeProps"],[92,70,85,25],[92,71,85,25,"mergeProps"],[92,81,85,25],[92,83,85,26],[93,6,86,4,"onPressStart"],[93,18,86,16],[94,6,87,4,"onPressUp"],[94,15,87,13],[95,6,88,4,"onPress"],[95,13,88,11],[96,6,89,4,"isDisabled"],[97,4,90,2],[97,5,90,3],[97,7,90,5],[97,11,90,5,"mapDomPropsToRN"],[97,32,90,20],[97,33,90,20,"mapDomPropsToRN"],[97,48,90,20],[97,50,90,21,"itemProps"],[97,59,90,30],[97,60,90,31],[97,61,90,32],[97,62,90,33],[98,4,91,2],[98,8,91,6],[99,6,92,4,"hoverProps"],[100,4,93,2],[100,5,93,3],[100,8,93,6],[100,12,93,6,"useHover"],[100,40,93,14],[100,41,93,14,"useHover"],[100,49,93,14],[100,51,93,15],[101,6,94,4,"isDisabled"],[101,16,94,14],[102,6,95,4,"onHoverStart"],[102,18,95,16,"onHoverStart"],[102,19,95,16],[102,21,95,19],[103,8,96,6],[103,12,96,10],[103,13,96,11],[103,17,96,11,"isFocusVisible"],[103,39,96,25],[103,40,96,25,"isFocusVisible"],[103,54,96,25],[103,56,96,26],[103,57,96,27],[103,59,96,29],[104,10,97,8,"state"],[104,15,97,13],[104,16,97,14,"selectionManager"],[104,32,97,30],[104,33,97,31,"setFocused"],[104,43,97,41],[104,44,97,42],[104,48,97,46],[104,49,97,47],[105,10,98,8,"state"],[105,15,98,13],[105,16,98,14,"selectionManager"],[105,32,98,30],[105,33,98,31,"setFocusedKey"],[105,46,98,44],[105,47,98,45,"key"],[105,50,98,48],[105,51,98,49],[106,8,99,6],[107,6,100,4],[108,4,101,2],[108,5,101,3],[108,7,101,5,"ref"],[108,10,101,8],[108,11,101,9],[109,4,102,2],[109,10,102,8],[110,6,103,4,"keyboardProps"],[111,4,104,2],[111,5,104,3],[111,8,104,6],[111,12,104,6,"useKeyboard"],[111,34,104,17],[111,35,104,17,"useKeyboard"],[111,46,104,17],[111,48,104,18],[112,6,105,4,"onKeyDown"],[112,15,105,13],[112,17,105,15,"e"],[112,18,105,16],[112,22,105,20],[113,8,106,6],[114,8,107,6],[115,8,108,6],[115,12,108,10,"e"],[115,13,108,11],[115,14,108,12,"repeat"],[115,20,108,18],[115,22,108,20],[116,10,109,8,"e"],[116,11,109,9],[116,12,109,10,"continuePropagation"],[116,31,109,29],[116,32,109,30],[116,33,109,31],[117,10,110,8],[118,8,111,6],[119,8,112,6],[119,16,112,14,"e"],[119,17,112,15],[119,18,112,16,"key"],[119,21,112,19],[120,10,113,8],[120,15,113,13],[120,18,113,16],[121,12,114,10],[121,16,114,14],[121,17,114,15,"isDisabled"],[121,27,114,25],[121,31,114,29,"closeOnSelect"],[121,44,114,42],[121,48,114,46,"onClose"],[121,55,114,53],[121,57,114,55],[122,14,115,12,"onClose"],[122,21,115,19],[122,22,115,20],[122,23,115,21],[123,12,116,10],[124,12,117,10],[125,10,118,8],[125,15,118,13],[125,22,118,20],[126,12,119,10],[127,12,120,10],[127,16,120,14],[127,17,120,15,"isDisabled"],[127,27,120,25],[127,31,120,29,"closeOnSelect"],[127,44,120,42],[127,48,120,46,"onClose"],[127,55,120,53],[127,57,120,55],[128,14,121,12,"onClose"],[128,21,121,19],[128,22,121,20],[128,23,121,21],[129,12,122,10],[130,12,123,10],[131,10,124,8],[132,12,125,10,"e"],[132,13,125,11],[132,14,125,12,"continuePropagation"],[132,33,125,31],[132,34,125,32],[132,35,125,33],[133,12,126,10],[134,8,127,6],[135,6,128,4],[136,4,129,2],[136,5,129,3],[136,6,129,4],[137,4,130,2],[137,11,130,9],[138,6,131,4,"menuItemProps"],[138,19,131,17],[138,21,131,17,"Object"],[138,27,131,17],[138,28,131,17,"assign"],[138,34,131,17],[138,39,132,9],[138,43,132,9,"mapDomPropsToRN"],[138,64,132,24],[138,65,132,24,"mapDomPropsToRN"],[138,80,132,24],[138,82,132,25,"ariaProps"],[138,91,132,34],[138,92,132,35],[138,94,133,9],[138,98,133,9,"mergeProps"],[138,113,133,19],[138,114,133,19,"mergeProps"],[138,124,133,19],[138,126,133,20,"pressProps"],[138,136,133,30],[138,138,133,32,"hoverProps"],[138,148,133,42],[138,150,133,44,"keyboardProps"],[138,163,133,57],[138,164,133,58],[138,165,134,5],[139,6,135,4,"labelProps"],[139,16,135,14],[139,18,135,16],[140,8,136,6,"id"],[140,10,136,8],[140,12,136,10,"labelId"],[141,6,137,4],[141,7,137,5],[142,6,138,4,"descriptionProps"],[142,22,138,20],[142,24,138,22],[143,8,139,6,"id"],[143,10,139,8],[143,12,139,10,"descriptionId"],[144,6,140,4],[144,7,140,5],[145,6,141,4,"keyboardShortcutProps"],[145,27,141,25],[145,29,141,27],[146,8,142,6,"id"],[146,10,142,8],[146,12,142,10,"keyboardId"],[147,6,143,4],[148,4,144,2],[148,5,144,3],[149,2,145,0],[150,0,145,1],[150,3]],"functionMap":{"names":["<global>","useMenuItem","onPressStart","onPress","onPressUp","useHover$argument_0.onHoverStart","useKeyboard$argument_0.onKeyDown"],"mappings":"AAA;OCwB;qBCiC;GDI;gBEC;GFI;kBGC;GHM;IIqB;KJK;eKK;KLuB;CDiB"},"hasCjsExports":false},"type":"js/module"}]}