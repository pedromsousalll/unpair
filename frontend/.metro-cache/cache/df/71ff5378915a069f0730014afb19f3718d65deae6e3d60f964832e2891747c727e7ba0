{"dependencies":[{"name":"./calculatePosition","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":25,"index":154},"end":{"line":7,"column":55,"index":184}}],"key":"4nSthtg37B6XM+cM4Ftj6QTTlLc=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":13,"index":199},"end":{"line":8,"column":29,"index":215}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"./useCloseOnScroll","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":24,"index":241},"end":{"line":9,"column":53,"index":270}}],"key":"X1l8nCqCHFbCvDCTStprgrtQwmI=","exportNames":["*"],"imports":1}},{"name":"@react-native-aria/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":13,"index":285},"end":{"line":10,"column":48,"index":320}}],"key":"sYjsikLgCJztsA5fDMHEvbKbndU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useOverlayPosition = useOverlayPosition;\n  var _calculatePosition = require(_dependencyMap[0], \"./calculatePosition\");\n  var _react = require(_dependencyMap[1], \"react\");\n  var _useCloseOnScroll = require(_dependencyMap[2], \"./useCloseOnScroll\");\n  var _utils = require(_dependencyMap[3], \"@react-native-aria/utils\");\n  //@ts-nocheck\n  /*\n   * Copyright 2020 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n\n  // @ts-ignore\n  let visualViewport = false && window.visualViewport;\n\n  /**\n   * Handles positioning overlays like popovers and menus relative to a trigger\n   * element, and updating the position when the window resizes.\n   */\n  function useOverlayPosition(props) {\n    var _targetRef$current, _targetRef$current2;\n    const direction = (0, _utils.isRTL)() ? 'rtl' : undefined;\n    let {\n      targetRef,\n      overlayRef,\n      scrollRef = overlayRef,\n      placement = 'bottom',\n      containerPadding = 12,\n      shouldFlip = true,\n      boundaryElement = typeof document !== 'undefined' ? document.body : null,\n      offset = 0,\n      crossOffset = 0,\n      shouldUpdatePosition = true,\n      isOpen = true,\n      shouldOverlapWithTrigger = false,\n      onClose\n    } = props;\n    let [position, setPosition] = (0, _react.useState)({\n      position: {},\n      arrowOffsetLeft: undefined,\n      arrowOffsetTop: undefined,\n      maxHeight: undefined,\n      placement: undefined\n    });\n    let deps = [shouldUpdatePosition, placement, overlayRef.current, (_targetRef$current = targetRef.current) === null || _targetRef$current === void 0 ? void 0 : _targetRef$current.offsetLeft, (_targetRef$current2 = targetRef.current) === null || _targetRef$current2 === void 0 ? void 0 : _targetRef$current2.offsetTop, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction, shouldOverlapWithTrigger];\n    let updatePosition = (0, _react.useCallback)(() => {\n      if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) {\n        return;\n      }\n      setPosition((0, _calculatePosition.calculatePosition)({\n        placement: translateRTL(placement, direction),\n        overlayNode: overlayRef.current,\n        targetNode: targetRef.current,\n        scrollNode: scrollRef.current,\n        padding: containerPadding,\n        shouldFlip,\n        boundaryElement,\n        offset,\n        crossOffset,\n        shouldOverlapWithTrigger\n      }));\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n\n    // Update position when anything changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    (0, _utils.useLayoutEffect)(updatePosition, deps);\n\n    // Update position on window resize\n    useResize(updatePosition);\n\n    // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n    // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n    let isResizing = (0, _react.useRef)(false);\n    (0, _utils.useLayoutEffect)(() => {\n      let timeout;\n      let onResize = () => {\n        isResizing.current = true;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n          isResizing.current = false;\n        }, 500);\n        updatePosition();\n      };\n      visualViewport === null || visualViewport === void 0 || visualViewport.addEventListener('resize', onResize);\n      return () => {\n        visualViewport === null || visualViewport === void 0 || visualViewport.removeEventListener('resize', onResize);\n      };\n    }, [updatePosition]);\n    let close = (0, _react.useCallback)(() => {\n      if (!isResizing.current) {\n        onClose();\n      }\n    }, [onClose, isResizing]);\n\n    // When scrolling a parent scrollable region of the trigger (other than the body),\n    // we hide the popover. Otherwise, its position would be incorrect.\n    (0, _useCloseOnScroll.useCloseOnScroll)({\n      triggerRef: targetRef,\n      isOpen,\n      onClose: onClose ? close : undefined\n    });\n\n    // useLayoutEffect(() => {\n    //   const mutationObserver = new MutationObserver((mutations) => {\n    //     updatePosition();\n    //     mutations.forEach((mutation) => {\n    //       // if (mutation.attributeName === 'style') {\n    //       //   const transform = mutation.target.style.transform;\n    //       //   if (transform) {\n    //       //     const match = transform.match(/scale\\((.+)\\)/);\n    //       //     if (match) {\n    //       //       const scale = parseFloat(match[1]);\n    //       //       console.log(`Scale: ${scale}`);\n    //       //       // updatePosition();\n    //       //     }\n    //       //   }\n    //       // }\n    //     });\n    //   });\n\n    //   mutationObserver.observe(overlayRef?.current, { attributes: true });\n\n    //   return () => mutationObserver.disconnect();\n    // }, [overlayRef, updatePosition]);\n\n    return {\n      rendered: true,\n      overlayProps: {\n        style: {\n          position: 'absolute',\n          zIndex: 100000,\n          // should match the z-index in ModalTrigger\n          ...position.position,\n          maxHeight: position.maxHeight\n        }\n      },\n      placement: position.placement,\n      arrowProps: {\n        style: {\n          left: position.arrowOffsetLeft,\n          top: position.arrowOffsetTop\n        }\n      },\n      isFlipped: position.isFlipped,\n      updatePosition\n    };\n  }\n  function useResize(onResize) {\n    (0, _utils.useLayoutEffect)(() => {\n      window.addEventListener('resize', onResize, false);\n      return () => {\n        window.removeEventListener('resize', onResize, false);\n      };\n    }, [onResize]);\n  }\n  function translateRTL(position, direction) {\n    if (direction === 'rtl') {\n      return position.replace('start', 'right').replace('end', 'left');\n    }\n    return position.replace('start', 'left').replace('end', 'right');\n  }\n});","lineCount":175,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"useOverlayPosition"],[7,28,6,26],[7,31,6,29,"useOverlayPosition"],[7,49,6,47],[8,2,7,0],[8,6,7,4,"_calculatePosition"],[8,24,7,22],[8,27,7,25,"require"],[8,34,7,32],[8,35,7,32,"_dependencyMap"],[8,49,7,32],[8,75,7,54],[8,76,7,55],[9,2,8,0],[9,6,8,4,"_react"],[9,12,8,10],[9,15,8,13,"require"],[9,22,8,20],[9,23,8,20,"_dependencyMap"],[9,37,8,20],[9,49,8,28],[9,50,8,29],[10,2,9,0],[10,6,9,4,"_useCloseOnScroll"],[10,23,9,21],[10,26,9,24,"require"],[10,33,9,31],[10,34,9,31,"_dependencyMap"],[10,48,9,31],[10,73,9,52],[10,74,9,53],[11,2,10,0],[11,6,10,4,"_utils"],[11,12,10,10],[11,15,10,13,"require"],[11,22,10,20],[11,23,10,20,"_dependencyMap"],[11,37,10,20],[11,68,10,47],[11,69,10,48],[12,2,11,0],[13,2,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[25,2,24,0],[26,2,25,0],[26,6,25,4,"visualViewport"],[26,20,25,18],[26,23,25,21],[26,32,25,54,"window"],[26,38,25,60],[26,39,25,61,"visualViewport"],[26,53,25,75],[28,2,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,2,31,0],[32,11,31,9,"useOverlayPosition"],[32,29,31,27,"useOverlayPosition"],[32,30,31,28,"props"],[32,35,31,33],[32,37,31,35],[33,4,32,2],[33,8,32,6,"_targetRef$current"],[33,26,32,24],[33,28,32,26,"_targetRef$current2"],[33,47,32,45],[34,4,33,2],[34,10,33,8,"direction"],[34,19,33,17],[34,22,33,20],[34,23,33,21],[34,24,33,22],[34,26,33,24,"_utils"],[34,32,33,30],[34,33,33,31,"isRTL"],[34,38,33,36],[34,40,33,38],[34,41,33,39],[34,44,33,42],[34,49,33,47],[34,52,33,50,"undefined"],[34,61,33,59],[35,4,34,2],[35,8,34,6],[36,6,35,4,"targetRef"],[36,15,35,13],[37,6,36,4,"overlayRef"],[37,16,36,14],[38,6,37,4,"scrollRef"],[38,15,37,13],[38,18,37,16,"overlayRef"],[38,28,37,26],[39,6,38,4,"placement"],[39,15,38,13],[39,18,38,16],[39,26,38,24],[40,6,39,4,"containerPadding"],[40,22,39,20],[40,25,39,23],[40,27,39,25],[41,6,40,4,"shouldFlip"],[41,16,40,14],[41,19,40,17],[41,23,40,21],[42,6,41,4,"boundaryElement"],[42,21,41,19],[42,24,41,22],[42,31,41,29,"document"],[42,39,41,37],[42,44,41,42],[42,55,41,53],[42,58,41,56,"document"],[42,66,41,64],[42,67,41,65,"body"],[42,71,41,69],[42,74,41,72],[42,78,41,76],[43,6,42,4,"offset"],[43,12,42,10],[43,15,42,13],[43,16,42,14],[44,6,43,4,"crossOffset"],[44,17,43,15],[44,20,43,18],[44,21,43,19],[45,6,44,4,"shouldUpdatePosition"],[45,26,44,24],[45,29,44,27],[45,33,44,31],[46,6,45,4,"isOpen"],[46,12,45,10],[46,15,45,13],[46,19,45,17],[47,6,46,4,"shouldOverlapWithTrigger"],[47,30,46,28],[47,33,46,31],[47,38,46,36],[48,6,47,4,"onClose"],[49,4,48,2],[49,5,48,3],[49,8,48,6,"props"],[49,13,48,11],[50,4,49,2],[50,8,49,6],[50,9,49,7,"position"],[50,17,49,15],[50,19,49,17,"setPosition"],[50,30,49,28],[50,31,49,29],[50,34,49,32],[50,35,49,33],[50,36,49,34],[50,38,49,36,"_react"],[50,44,49,42],[50,45,49,43,"useState"],[50,53,49,51],[50,55,49,53],[51,6,50,4,"position"],[51,14,50,12],[51,16,50,14],[51,17,50,15],[51,18,50,16],[52,6,51,4,"arrowOffsetLeft"],[52,21,51,19],[52,23,51,21,"undefined"],[52,32,51,30],[53,6,52,4,"arrowOffsetTop"],[53,20,52,18],[53,22,52,20,"undefined"],[53,31,52,29],[54,6,53,4,"maxHeight"],[54,15,53,13],[54,17,53,15,"undefined"],[54,26,53,24],[55,6,54,4,"placement"],[55,15,54,13],[55,17,54,15,"undefined"],[56,4,55,2],[56,5,55,3],[56,6,55,4],[57,4,56,2],[57,8,56,6,"deps"],[57,12,56,10],[57,15,56,13],[57,16,56,14,"shouldUpdatePosition"],[57,36,56,34],[57,38,56,36,"placement"],[57,47,56,45],[57,49,56,47,"overlayRef"],[57,59,56,57],[57,60,56,58,"current"],[57,67,56,65],[57,69,56,67],[57,70,56,68,"_targetRef$current"],[57,88,56,86],[57,91,56,89,"targetRef"],[57,100,56,98],[57,101,56,99,"current"],[57,108,56,106],[57,114,56,112],[57,118,56,116],[57,122,56,120,"_targetRef$current"],[57,140,56,138],[57,145,56,143],[57,150,56,148],[57,151,56,149],[57,154,56,152],[57,159,56,157],[57,160,56,158],[57,163,56,161,"_targetRef$current"],[57,181,56,179],[57,182,56,180,"offsetLeft"],[57,192,56,190],[57,194,56,192],[57,195,56,193,"_targetRef$current2"],[57,214,56,212],[57,217,56,215,"targetRef"],[57,226,56,224],[57,227,56,225,"current"],[57,234,56,232],[57,240,56,238],[57,244,56,242],[57,248,56,246,"_targetRef$current2"],[57,267,56,265],[57,272,56,270],[57,277,56,275],[57,278,56,276],[57,281,56,279],[57,286,56,284],[57,287,56,285],[57,290,56,288,"_targetRef$current2"],[57,309,56,307],[57,310,56,308,"offsetTop"],[57,319,56,317],[57,321,56,319,"scrollRef"],[57,330,56,328],[57,331,56,329,"current"],[57,338,56,336],[57,340,56,338,"containerPadding"],[57,356,56,354],[57,358,56,356,"shouldFlip"],[57,368,56,366],[57,370,56,368,"boundaryElement"],[57,385,56,383],[57,387,56,385,"offset"],[57,393,56,391],[57,395,56,393,"crossOffset"],[57,406,56,404],[57,408,56,406,"isOpen"],[57,414,56,412],[57,416,56,414,"direction"],[57,425,56,423],[57,427,56,425,"shouldOverlapWithTrigger"],[57,451,56,449],[57,452,56,450],[58,4,57,2],[58,8,57,6,"updatePosition"],[58,22,57,20],[58,25,57,23],[58,26,57,24],[58,27,57,25],[58,29,57,27,"_react"],[58,35,57,33],[58,36,57,34,"useCallback"],[58,47,57,45],[58,49,57,47],[58,55,57,53],[59,6,58,4],[59,10,58,8,"shouldUpdatePosition"],[59,30,58,28],[59,35,58,33],[59,40,58,38],[59,44,58,42],[59,45,58,43,"isOpen"],[59,51,58,49],[59,55,58,53],[59,56,58,54,"overlayRef"],[59,66,58,64],[59,67,58,65,"current"],[59,74,58,72],[59,78,58,76],[59,79,58,77,"targetRef"],[59,88,58,86],[59,89,58,87,"current"],[59,96,58,94],[59,100,58,98],[59,101,58,99,"scrollRef"],[59,110,58,108],[59,111,58,109,"current"],[59,118,58,116],[59,122,58,120],[59,123,58,121,"boundaryElement"],[59,138,58,136],[59,140,58,138],[60,8,59,6],[61,6,60,4],[62,6,61,4,"setPosition"],[62,17,61,15],[62,18,61,16],[62,19,61,17],[62,20,61,18],[62,22,61,20,"_calculatePosition"],[62,40,61,38],[62,41,61,39,"calculatePosition"],[62,58,61,56],[62,60,61,58],[63,8,62,6,"placement"],[63,17,62,15],[63,19,62,17,"translateRTL"],[63,31,62,29],[63,32,62,30,"placement"],[63,41,62,39],[63,43,62,41,"direction"],[63,52,62,50],[63,53,62,51],[64,8,63,6,"overlayNode"],[64,19,63,17],[64,21,63,19,"overlayRef"],[64,31,63,29],[64,32,63,30,"current"],[64,39,63,37],[65,8,64,6,"targetNode"],[65,18,64,16],[65,20,64,18,"targetRef"],[65,29,64,27],[65,30,64,28,"current"],[65,37,64,35],[66,8,65,6,"scrollNode"],[66,18,65,16],[66,20,65,18,"scrollRef"],[66,29,65,27],[66,30,65,28,"current"],[66,37,65,35],[67,8,66,6,"padding"],[67,15,66,13],[67,17,66,15,"containerPadding"],[67,33,66,31],[68,8,67,6,"shouldFlip"],[68,18,67,16],[69,8,68,6,"boundaryElement"],[69,23,68,21],[70,8,69,6,"offset"],[70,14,69,12],[71,8,70,6,"crossOffset"],[71,19,70,17],[72,8,71,6,"shouldOverlapWithTrigger"],[73,6,72,4],[73,7,72,5],[73,8,72,6],[73,9,72,7],[74,6,73,4],[75,4,74,2],[75,5,74,3],[75,7,74,5,"deps"],[75,11,74,9],[75,12,74,10],[77,4,76,2],[78,4,77,2],[79,4,78,2],[79,5,78,3],[79,6,78,4],[79,8,78,6,"_utils"],[79,14,78,12],[79,15,78,13,"useLayoutEffect"],[79,30,78,28],[79,32,78,30,"updatePosition"],[79,46,78,44],[79,48,78,46,"deps"],[79,52,78,50],[79,53,78,51],[81,4,80,2],[82,4,81,2,"useResize"],[82,13,81,11],[82,14,81,12,"updatePosition"],[82,28,81,26],[82,29,81,27],[84,4,83,2],[85,4,84,2],[86,4,85,2],[86,8,85,6,"isResizing"],[86,18,85,16],[86,21,85,19],[86,22,85,20],[86,23,85,21],[86,25,85,23,"_react"],[86,31,85,29],[86,32,85,30,"useRef"],[86,38,85,36],[86,40,85,38],[86,45,85,43],[86,46,85,44],[87,4,86,2],[87,5,86,3],[87,6,86,4],[87,8,86,6,"_utils"],[87,14,86,12],[87,15,86,13,"useLayoutEffect"],[87,30,86,28],[87,32,86,30],[87,38,86,36],[88,6,87,4],[88,10,87,8,"timeout"],[88,17,87,15],[89,6,88,4],[89,10,88,8,"onResize"],[89,18,88,16],[89,21,88,19,"onResize"],[89,22,88,19],[89,27,88,25],[90,8,89,6,"isResizing"],[90,18,89,16],[90,19,89,17,"current"],[90,26,89,24],[90,29,89,27],[90,33,89,31],[91,8,90,6,"clearTimeout"],[91,20,90,18],[91,21,90,19,"timeout"],[91,28,90,26],[91,29,90,27],[92,8,91,6,"timeout"],[92,15,91,13],[92,18,91,16,"setTimeout"],[92,28,91,26],[92,29,91,27],[92,35,91,33],[93,10,92,8,"isResizing"],[93,20,92,18],[93,21,92,19,"current"],[93,28,92,26],[93,31,92,29],[93,36,92,34],[94,8,93,6],[94,9,93,7],[94,11,93,9],[94,14,93,12],[94,15,93,13],[95,8,94,6,"updatePosition"],[95,22,94,20],[95,23,94,21],[95,24,94,22],[96,6,95,4],[96,7,95,5],[97,6,96,4,"visualViewport"],[97,20,96,18],[97,25,96,23],[97,29,96,27],[97,33,96,31,"visualViewport"],[97,47,96,45],[97,52,96,50],[97,57,96,55],[97,58,96,56],[97,62,96,60,"visualViewport"],[97,76,96,74],[97,77,96,75,"addEventListener"],[97,93,96,91],[97,94,96,92],[97,102,96,100],[97,104,96,102,"onResize"],[97,112,96,110],[97,113,96,111],[98,6,97,4],[98,13,97,11],[98,19,97,17],[99,8,98,6,"visualViewport"],[99,22,98,20],[99,27,98,25],[99,31,98,29],[99,35,98,33,"visualViewport"],[99,49,98,47],[99,54,98,52],[99,59,98,57],[99,60,98,58],[99,64,98,62,"visualViewport"],[99,78,98,76],[99,79,98,77,"removeEventListener"],[99,98,98,96],[99,99,98,97],[99,107,98,105],[99,109,98,107,"onResize"],[99,117,98,115],[99,118,98,116],[100,6,99,4],[100,7,99,5],[101,4,100,2],[101,5,100,3],[101,7,100,5],[101,8,100,6,"updatePosition"],[101,22,100,20],[101,23,100,21],[101,24,100,22],[102,4,101,2],[102,8,101,6,"close"],[102,13,101,11],[102,16,101,14],[102,17,101,15],[102,18,101,16],[102,20,101,18,"_react"],[102,26,101,24],[102,27,101,25,"useCallback"],[102,38,101,36],[102,40,101,38],[102,46,101,44],[103,6,102,4],[103,10,102,8],[103,11,102,9,"isResizing"],[103,21,102,19],[103,22,102,20,"current"],[103,29,102,27],[103,31,102,29],[104,8,103,6,"onClose"],[104,15,103,13],[104,16,103,14],[104,17,103,15],[105,6,104,4],[106,4,105,2],[106,5,105,3],[106,7,105,5],[106,8,105,6,"onClose"],[106,15,105,13],[106,17,105,15,"isResizing"],[106,27,105,25],[106,28,105,26],[106,29,105,27],[108,4,107,2],[109,4,108,2],[110,4,109,2],[110,5,109,3],[110,6,109,4],[110,8,109,6,"_useCloseOnScroll"],[110,25,109,23],[110,26,109,24,"useCloseOnScroll"],[110,42,109,40],[110,44,109,42],[111,6,110,4,"triggerRef"],[111,16,110,14],[111,18,110,16,"targetRef"],[111,27,110,25],[112,6,111,4,"isOpen"],[112,12,111,10],[113,6,112,4,"onClose"],[113,13,112,11],[113,15,112,13,"onClose"],[113,22,112,20],[113,25,112,23,"close"],[113,30,112,28],[113,33,112,31,"undefined"],[114,4,113,2],[114,5,113,3],[114,6,113,4],[116,4,115,2],[117,4,116,2],[118,4,117,2],[119,4,118,2],[120,4,119,2],[121,4,120,2],[122,4,121,2],[123,4,122,2],[124,4,123,2],[125,4,124,2],[126,4,125,2],[127,4,126,2],[128,4,127,2],[129,4,128,2],[130,4,129,2],[131,4,130,2],[132,4,131,2],[134,4,133,2],[136,4,135,2],[137,4,136,2],[139,4,138,2],[139,11,138,9],[140,6,139,4,"rendered"],[140,14,139,12],[140,16,139,14],[140,20,139,18],[141,6,140,4,"overlayProps"],[141,18,140,16],[141,20,140,18],[142,8,141,6,"style"],[142,13,141,11],[142,15,141,13],[143,10,142,8,"position"],[143,18,142,16],[143,20,142,18],[143,30,142,28],[144,10,143,8,"zIndex"],[144,16,143,14],[144,18,143,16],[144,24,143,22],[145,10,144,8],[146,10,145,8],[146,13,145,11,"position"],[146,21,145,19],[146,22,145,20,"position"],[146,30,145,28],[147,10,146,8,"maxHeight"],[147,19,146,17],[147,21,146,19,"position"],[147,29,146,27],[147,30,146,28,"maxHeight"],[148,8,147,6],[149,6,148,4],[149,7,148,5],[150,6,149,4,"placement"],[150,15,149,13],[150,17,149,15,"position"],[150,25,149,23],[150,26,149,24,"placement"],[150,35,149,33],[151,6,150,4,"arrowProps"],[151,16,150,14],[151,18,150,16],[152,8,151,6,"style"],[152,13,151,11],[152,15,151,13],[153,10,152,8,"left"],[153,14,152,12],[153,16,152,14,"position"],[153,24,152,22],[153,25,152,23,"arrowOffsetLeft"],[153,40,152,38],[154,10,153,8,"top"],[154,13,153,11],[154,15,153,13,"position"],[154,23,153,21],[154,24,153,22,"arrowOffsetTop"],[155,8,154,6],[156,6,155,4],[156,7,155,5],[157,6,156,4,"isFlipped"],[157,15,156,13],[157,17,156,15,"position"],[157,25,156,23],[157,26,156,24,"isFlipped"],[157,35,156,33],[158,6,157,4,"updatePosition"],[159,4,158,2],[159,5,158,3],[160,2,159,0],[161,2,160,0],[161,11,160,9,"useResize"],[161,20,160,18,"useResize"],[161,21,160,19,"onResize"],[161,29,160,27],[161,31,160,29],[162,4,161,2],[162,5,161,3],[162,6,161,4],[162,8,161,6,"_utils"],[162,14,161,12],[162,15,161,13,"useLayoutEffect"],[162,30,161,28],[162,32,161,30],[162,38,161,36],[163,6,162,4,"window"],[163,12,162,10],[163,13,162,11,"addEventListener"],[163,29,162,27],[163,30,162,28],[163,38,162,36],[163,40,162,38,"onResize"],[163,48,162,46],[163,50,162,48],[163,55,162,53],[163,56,162,54],[164,6,163,4],[164,13,163,11],[164,19,163,17],[165,8,164,6,"window"],[165,14,164,12],[165,15,164,13,"removeEventListener"],[165,34,164,32],[165,35,164,33],[165,43,164,41],[165,45,164,43,"onResize"],[165,53,164,51],[165,55,164,53],[165,60,164,58],[165,61,164,59],[166,6,165,4],[166,7,165,5],[167,4,166,2],[167,5,166,3],[167,7,166,5],[167,8,166,6,"onResize"],[167,16,166,14],[167,17,166,15],[167,18,166,16],[168,2,167,0],[169,2,168,0],[169,11,168,9,"translateRTL"],[169,23,168,21,"translateRTL"],[169,24,168,22,"position"],[169,32,168,30],[169,34,168,32,"direction"],[169,43,168,41],[169,45,168,43],[170,4,169,2],[170,8,169,6,"direction"],[170,17,169,15],[170,22,169,20],[170,27,169,25],[170,29,169,27],[171,6,170,4],[171,13,170,11,"position"],[171,21,170,19],[171,22,170,20,"replace"],[171,29,170,27],[171,30,170,28],[171,37,170,35],[171,39,170,37],[171,46,170,44],[171,47,170,45],[171,48,170,46,"replace"],[171,55,170,53],[171,56,170,54],[171,61,170,59],[171,63,170,61],[171,69,170,67],[171,70,170,68],[172,4,171,2],[173,4,172,2],[173,11,172,9,"position"],[173,19,172,17],[173,20,172,18,"replace"],[173,27,172,25],[173,28,172,26],[173,35,172,33],[173,37,172,35],[173,43,172,41],[173,44,172,42],[173,45,172,43,"replace"],[173,52,172,50],[173,53,172,51],[173,58,172,56],[173,60,172,58],[173,67,172,65],[173,68,172,66],[174,2,173,0],[175,0,173,1],[175,3]],"functionMap":{"names":["<global>","useOverlayPosition","<anonymous>","onResize","setTimeout$argument_0","useResize","translateRTL"],"mappings":"AAA;AC8B;+CC0B;GDiB;8BCY;mBCE;2BCG;ODE;KDE;GDK;sCCC;GDI;CDsD;AKC;8BHC;GGK;CLC;AMC;CNK"},"hasCjsExports":true},"type":"js/module"}]}