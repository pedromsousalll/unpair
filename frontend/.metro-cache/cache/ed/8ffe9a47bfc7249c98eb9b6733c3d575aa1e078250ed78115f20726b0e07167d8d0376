{"dependencies":[{"name":"./sxToSxResolved","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"oMdbMOhyFDFQzagXDt8K4VGVM7A=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.reduceAndResolveCompoundVariants = reduceAndResolveCompoundVariants;\n  var _sxToSxResolved = require(_dependencyMap[0], \"./sxToSxResolved\");\n  function reduceAndResolveCompoundVariants(compoundVariants, path, CONFIG, shouldResolve = true) {\n    const compoundVariantsResolved = compoundVariants === null || compoundVariants === void 0 ? void 0 : compoundVariants.map((compoundVariant, index) => {\n      const {\n        value,\n        ...condition\n      } = compoundVariant;\n      // let conditionPath: Array<string> = [];\n      // Object.keys(condition).map((key) => {\n      //   conditionPath.push(key);\n      //   conditionPath.push(condition[key]);\n      // });\n      return (0, _sxToSxResolved.sxToSXResolved)(\n      //@ts-ignore\n\n      value, [...path, 'compoundVariants', index], {\n        condition\n      }, CONFIG, shouldResolve);\n    });\n    // console.log(compoundVariantsResolved, 'compoundVariantsResolved');\n\n    return compoundVariantsResolved;\n  }\n});","lineCount":31,"map":[[7,2,2,0,"exports"],[7,9,2,0],[7,10,2,0,"reduceAndResolveCompoundVariants"],[7,42,2,0],[7,45,2,0,"reduceAndResolveCompoundVariants"],[7,77,2,0],[8,2,1,0],[8,6,1,0,"_sxToSxResolved"],[8,21,1,0],[8,24,1,0,"require"],[8,31,1,0],[8,32,1,0,"_dependencyMap"],[8,46,1,0],[9,2,2,7],[9,11,2,16,"reduceAndResolveCompoundVariants"],[9,43,2,48,"reduceAndResolveCompoundVariants"],[9,44,2,49,"compoundVariants"],[9,60,2,65],[9,62,2,67,"path"],[9,66,2,71],[9,68,2,73,"CONFIG"],[9,74,2,79],[9,76,2,81,"shouldResolve"],[9,89,2,94],[9,92,2,97],[9,96,2,101],[9,98,2,103],[10,4,3,2],[10,10,3,8,"compoundVariantsResolved"],[10,34,3,32],[10,37,3,35,"compoundVariants"],[10,53,3,51],[10,58,3,56],[10,62,3,60],[10,66,3,64,"compoundVariants"],[10,82,3,80],[10,87,3,85],[10,92,3,90],[10,93,3,91],[10,96,3,94],[10,101,3,99],[10,102,3,100],[10,105,3,103,"compoundVariants"],[10,121,3,119],[10,122,3,120,"map"],[10,125,3,123],[10,126,3,124],[10,127,3,125,"compoundVariant"],[10,142,3,140],[10,144,3,142,"index"],[10,149,3,147],[10,154,3,152],[11,6,4,4],[11,12,4,10],[12,8,5,6,"value"],[12,13,5,11],[13,8,6,6],[13,11,6,9,"condition"],[14,6,7,4],[14,7,7,5],[14,10,7,8,"compoundVariant"],[14,25,7,23],[15,6,8,4],[16,6,9,4],[17,6,10,4],[18,6,11,4],[19,6,12,4],[20,6,13,4],[20,13,13,11],[20,17,13,11,"sxToSXResolved"],[20,32,13,25],[20,33,13,25,"sxToSXResolved"],[20,47,13,25],[21,6,14,4],[23,6,16,4,"value"],[23,11,16,9],[23,13,16,11],[23,14,16,12],[23,17,16,15,"path"],[23,21,16,19],[23,23,16,21],[23,41,16,39],[23,43,16,41,"index"],[23,48,16,46],[23,49,16,47],[23,51,16,49],[24,8,17,6,"condition"],[25,6,18,4],[25,7,18,5],[25,9,18,7,"CONFIG"],[25,15,18,13],[25,17,18,15,"shouldResolve"],[25,30,18,28],[25,31,18,29],[26,4,19,2],[26,5,19,3],[26,6,19,4],[27,4,20,2],[29,4,22,2],[29,11,22,9,"compoundVariantsResolved"],[29,35,22,33],[30,2,23,0],[31,0,23,1],[31,3]],"functionMap":{"names":["<global>","reduceAndResolveCompoundVariants","compoundVariants.map$argument_0"],"mappings":"AAA;OCC;4HCC;GDgB;CDI"},"hasCjsExports":false},"type":"js/module"}]}