{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"],"imports":1}},{"name":"@firebase/app","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":125,"index":125}}],"key":"yqoiliQRTUQ9dvZxqpPLznnKsQ4=","exportNames":["*"],"imports":1}},{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":126},"end":{"line":2,"column":371,"index":497}}],"key":"BkBYK9w6fHruAfQL7S4qWsYds2s=","exportNames":["*"],"imports":1}},{"name":"@firebase/logger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":498},"end":{"line":3,"column":52,"index":550}}],"key":"ORGtDHPxrSEUSLP9WZfOMGsHx5g=","exportNames":["*"],"imports":1}},{"name":"@firebase/component","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":551},"end":{"line":4,"column":48,"index":599}}],"key":"Us9erpYucP7UHYJWKKSJ2tNZDvI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  const _excluded = [\"providerId\"],\n    _excluded2 = [\"uid\", \"auth\", \"stsTokenManager\"],\n    _excluded3 = [\"providerId\", \"signInMethod\"];\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"$\", {\n    enumerable: true,\n    get: function () {\n      return SAMLAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"A\", {\n    enumerable: true,\n    get: function () {\n      return ActionCodeOperation;\n    }\n  });\n  Object.defineProperty(exports, \"B\", {\n    enumerable: true,\n    get: function () {\n      return useDeviceLanguage;\n    }\n  });\n  Object.defineProperty(exports, \"C\", {\n    enumerable: true,\n    get: function () {\n      return updateCurrentUser;\n    }\n  });\n  Object.defineProperty(exports, \"D\", {\n    enumerable: true,\n    get: function () {\n      return signOut;\n    }\n  });\n  Object.defineProperty(exports, \"E\", {\n    enumerable: true,\n    get: function () {\n      return revokeAccessToken;\n    }\n  });\n  Object.defineProperty(exports, \"F\", {\n    enumerable: true,\n    get: function () {\n      return FactorId;\n    }\n  });\n  Object.defineProperty(exports, \"G\", {\n    enumerable: true,\n    get: function () {\n      return deleteUser;\n    }\n  });\n  Object.defineProperty(exports, \"H\", {\n    enumerable: true,\n    get: function () {\n      return debugErrorMap;\n    }\n  });\n  Object.defineProperty(exports, \"I\", {\n    enumerable: true,\n    get: function () {\n      return prodErrorMap;\n    }\n  });\n  Object.defineProperty(exports, \"J\", {\n    enumerable: true,\n    get: function () {\n      return AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;\n    }\n  });\n  Object.defineProperty(exports, \"K\", {\n    enumerable: true,\n    get: function () {\n      return initializeAuth;\n    }\n  });\n  Object.defineProperty(exports, \"L\", {\n    enumerable: true,\n    get: function () {\n      return connectAuthEmulator;\n    }\n  });\n  Object.defineProperty(exports, \"M\", {\n    enumerable: true,\n    get: function () {\n      return AuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"N\", {\n    enumerable: true,\n    get: function () {\n      return EmailAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"O\", {\n    enumerable: true,\n    get: function () {\n      return OperationType;\n    }\n  });\n  Object.defineProperty(exports, \"P\", {\n    enumerable: true,\n    get: function () {\n      return PhoneAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Q\", {\n    enumerable: true,\n    get: function () {\n      return OAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"R\", {\n    enumerable: true,\n    get: function () {\n      return RecaptchaVerifier;\n    }\n  });\n  Object.defineProperty(exports, \"S\", {\n    enumerable: true,\n    get: function () {\n      return SignInMethod;\n    }\n  });\n  Object.defineProperty(exports, \"T\", {\n    enumerable: true,\n    get: function () {\n      return TotpMultiFactorGenerator;\n    }\n  });\n  Object.defineProperty(exports, \"U\", {\n    enumerable: true,\n    get: function () {\n      return PhoneAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"V\", {\n    enumerable: true,\n    get: function () {\n      return inMemoryPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"W\", {\n    enumerable: true,\n    get: function () {\n      return EmailAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"X\", {\n    enumerable: true,\n    get: function () {\n      return FacebookAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Y\", {\n    enumerable: true,\n    get: function () {\n      return GoogleAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"Z\", {\n    enumerable: true,\n    get: function () {\n      return GithubAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"_\", {\n    enumerable: true,\n    get: function () {\n      return OAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"a\", {\n    enumerable: true,\n    get: function () {\n      return browserCookiePersistence;\n    }\n  });\n  Object.defineProperty(exports, \"a0\", {\n    enumerable: true,\n    get: function () {\n      return TwitterAuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"a1\", {\n    enumerable: true,\n    get: function () {\n      return signInAnonymously;\n    }\n  });\n  Object.defineProperty(exports, \"a2\", {\n    enumerable: true,\n    get: function () {\n      return signInWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a3\", {\n    enumerable: true,\n    get: function () {\n      return linkWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a4\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithCredential;\n    }\n  });\n  Object.defineProperty(exports, \"a5\", {\n    enumerable: true,\n    get: function () {\n      return signInWithCustomToken;\n    }\n  });\n  Object.defineProperty(exports, \"a6\", {\n    enumerable: true,\n    get: function () {\n      return sendPasswordResetEmail;\n    }\n  });\n  Object.defineProperty(exports, \"a7\", {\n    enumerable: true,\n    get: function () {\n      return confirmPasswordReset;\n    }\n  });\n  Object.defineProperty(exports, \"a8\", {\n    enumerable: true,\n    get: function () {\n      return applyActionCode;\n    }\n  });\n  Object.defineProperty(exports, \"a9\", {\n    enumerable: true,\n    get: function () {\n      return checkActionCode;\n    }\n  });\n  Object.defineProperty(exports, \"aA\", {\n    enumerable: true,\n    get: function () {\n      return _getProjectConfig;\n    }\n  });\n  Object.defineProperty(exports, \"aB\", {\n    enumerable: true,\n    get: function () {\n      return _isIOS7Or8;\n    }\n  });\n  Object.defineProperty(exports, \"aC\", {\n    enumerable: true,\n    get: function () {\n      return _createError;\n    }\n  });\n  Object.defineProperty(exports, \"aD\", {\n    enumerable: true,\n    get: function () {\n      return _assert;\n    }\n  });\n  Object.defineProperty(exports, \"aE\", {\n    enumerable: true,\n    get: function () {\n      return AuthEventManager;\n    }\n  });\n  Object.defineProperty(exports, \"aF\", {\n    enumerable: true,\n    get: function () {\n      return _getInstance;\n    }\n  });\n  Object.defineProperty(exports, \"aG\", {\n    enumerable: true,\n    get: function () {\n      return _persistenceKeyName;\n    }\n  });\n  Object.defineProperty(exports, \"aH\", {\n    enumerable: true,\n    get: function () {\n      return _getRedirectResult;\n    }\n  });\n  Object.defineProperty(exports, \"aI\", {\n    enumerable: true,\n    get: function () {\n      return _overrideRedirectResult;\n    }\n  });\n  Object.defineProperty(exports, \"aJ\", {\n    enumerable: true,\n    get: function () {\n      return _clearRedirectOutcomes;\n    }\n  });\n  Object.defineProperty(exports, \"aK\", {\n    enumerable: true,\n    get: function () {\n      return _castAuth;\n    }\n  });\n  Object.defineProperty(exports, \"aL\", {\n    enumerable: true,\n    get: function () {\n      return UserImpl;\n    }\n  });\n  Object.defineProperty(exports, \"aM\", {\n    enumerable: true,\n    get: function () {\n      return AuthImpl;\n    }\n  });\n  Object.defineProperty(exports, \"aN\", {\n    enumerable: true,\n    get: function () {\n      return _getClientVersion;\n    }\n  });\n  Object.defineProperty(exports, \"aO\", {\n    enumerable: true,\n    get: function () {\n      return _generateEventId;\n    }\n  });\n  Object.defineProperty(exports, \"aP\", {\n    enumerable: true,\n    get: function () {\n      return AuthPopup;\n    }\n  });\n  Object.defineProperty(exports, \"aQ\", {\n    enumerable: true,\n    get: function () {\n      return FetchProvider;\n    }\n  });\n  Object.defineProperty(exports, \"aR\", {\n    enumerable: true,\n    get: function () {\n      return SAMLAuthCredential;\n    }\n  });\n  Object.defineProperty(exports, \"aa\", {\n    enumerable: true,\n    get: function () {\n      return verifyPasswordResetCode;\n    }\n  });\n  Object.defineProperty(exports, \"ab\", {\n    enumerable: true,\n    get: function () {\n      return createUserWithEmailAndPassword;\n    }\n  });\n  Object.defineProperty(exports, \"ac\", {\n    enumerable: true,\n    get: function () {\n      return signInWithEmailAndPassword;\n    }\n  });\n  Object.defineProperty(exports, \"ad\", {\n    enumerable: true,\n    get: function () {\n      return sendSignInLinkToEmail;\n    }\n  });\n  Object.defineProperty(exports, \"ae\", {\n    enumerable: true,\n    get: function () {\n      return isSignInWithEmailLink;\n    }\n  });\n  Object.defineProperty(exports, \"af\", {\n    enumerable: true,\n    get: function () {\n      return signInWithEmailLink;\n    }\n  });\n  Object.defineProperty(exports, \"ag\", {\n    enumerable: true,\n    get: function () {\n      return fetchSignInMethodsForEmail;\n    }\n  });\n  Object.defineProperty(exports, \"ah\", {\n    enumerable: true,\n    get: function () {\n      return sendEmailVerification;\n    }\n  });\n  Object.defineProperty(exports, \"ai\", {\n    enumerable: true,\n    get: function () {\n      return verifyBeforeUpdateEmail;\n    }\n  });\n  Object.defineProperty(exports, \"aj\", {\n    enumerable: true,\n    get: function () {\n      return ActionCodeURL;\n    }\n  });\n  Object.defineProperty(exports, \"ak\", {\n    enumerable: true,\n    get: function () {\n      return parseActionCodeURL;\n    }\n  });\n  Object.defineProperty(exports, \"al\", {\n    enumerable: true,\n    get: function () {\n      return updateProfile;\n    }\n  });\n  Object.defineProperty(exports, \"am\", {\n    enumerable: true,\n    get: function () {\n      return updateEmail;\n    }\n  });\n  Object.defineProperty(exports, \"an\", {\n    enumerable: true,\n    get: function () {\n      return updatePassword;\n    }\n  });\n  Object.defineProperty(exports, \"ao\", {\n    enumerable: true,\n    get: function () {\n      return getIdToken;\n    }\n  });\n  Object.defineProperty(exports, \"ap\", {\n    enumerable: true,\n    get: function () {\n      return getIdTokenResult;\n    }\n  });\n  Object.defineProperty(exports, \"aq\", {\n    enumerable: true,\n    get: function () {\n      return unlink;\n    }\n  });\n  Object.defineProperty(exports, \"ar\", {\n    enumerable: true,\n    get: function () {\n      return getAdditionalUserInfo;\n    }\n  });\n  Object.defineProperty(exports, \"as\", {\n    enumerable: true,\n    get: function () {\n      return reload;\n    }\n  });\n  Object.defineProperty(exports, \"at\", {\n    enumerable: true,\n    get: function () {\n      return getMultiFactorResolver;\n    }\n  });\n  Object.defineProperty(exports, \"au\", {\n    enumerable: true,\n    get: function () {\n      return multiFactor;\n    }\n  });\n  Object.defineProperty(exports, \"av\", {\n    enumerable: true,\n    get: function () {\n      return debugAssert;\n    }\n  });\n  Object.defineProperty(exports, \"aw\", {\n    enumerable: true,\n    get: function () {\n      return _isIOS;\n    }\n  });\n  Object.defineProperty(exports, \"ax\", {\n    enumerable: true,\n    get: function () {\n      return _isAndroid;\n    }\n  });\n  Object.defineProperty(exports, \"ay\", {\n    enumerable: true,\n    get: function () {\n      return _fail;\n    }\n  });\n  Object.defineProperty(exports, \"az\", {\n    enumerable: true,\n    get: function () {\n      return _getRedirectUrl;\n    }\n  });\n  Object.defineProperty(exports, \"b\", {\n    enumerable: true,\n    get: function () {\n      return browserLocalPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"c\", {\n    enumerable: true,\n    get: function () {\n      return browserSessionPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"d\", {\n    enumerable: true,\n    get: function () {\n      return signInWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"e\", {\n    enumerable: true,\n    get: function () {\n      return linkWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"f\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithPopup;\n    }\n  });\n  Object.defineProperty(exports, \"g\", {\n    enumerable: true,\n    get: function () {\n      return signInWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"h\", {\n    enumerable: true,\n    get: function () {\n      return linkWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"i\", {\n    enumerable: true,\n    get: function () {\n      return indexedDBLocalPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"j\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithRedirect;\n    }\n  });\n  Object.defineProperty(exports, \"k\", {\n    enumerable: true,\n    get: function () {\n      return getRedirectResult;\n    }\n  });\n  Object.defineProperty(exports, \"l\", {\n    enumerable: true,\n    get: function () {\n      return linkWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"m\", {\n    enumerable: true,\n    get: function () {\n      return browserPopupRedirectResolver;\n    }\n  });\n  Object.defineProperty(exports, \"n\", {\n    enumerable: true,\n    get: function () {\n      return PhoneMultiFactorGenerator;\n    }\n  });\n  Object.defineProperty(exports, \"o\", {\n    enumerable: true,\n    get: function () {\n      return TotpSecret;\n    }\n  });\n  Object.defineProperty(exports, \"p\", {\n    enumerable: true,\n    get: function () {\n      return getAuth;\n    }\n  });\n  Object.defineProperty(exports, \"q\", {\n    enumerable: true,\n    get: function () {\n      return ProviderId;\n    }\n  });\n  Object.defineProperty(exports, \"r\", {\n    enumerable: true,\n    get: function () {\n      return reauthenticateWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"s\", {\n    enumerable: true,\n    get: function () {\n      return signInWithPhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"t\", {\n    enumerable: true,\n    get: function () {\n      return setPersistence;\n    }\n  });\n  Object.defineProperty(exports, \"u\", {\n    enumerable: true,\n    get: function () {\n      return updatePhoneNumber;\n    }\n  });\n  Object.defineProperty(exports, \"v\", {\n    enumerable: true,\n    get: function () {\n      return initializeRecaptchaConfig;\n    }\n  });\n  Object.defineProperty(exports, \"w\", {\n    enumerable: true,\n    get: function () {\n      return validatePassword;\n    }\n  });\n  Object.defineProperty(exports, \"x\", {\n    enumerable: true,\n    get: function () {\n      return onIdTokenChanged;\n    }\n  });\n  Object.defineProperty(exports, \"y\", {\n    enumerable: true,\n    get: function () {\n      return beforeAuthStateChanged;\n    }\n  });\n  Object.defineProperty(exports, \"z\", {\n    enumerable: true,\n    get: function () {\n      return onAuthStateChanged;\n    }\n  });\n  var _babelRuntimeHelpersObjectWithoutPropertiesLoose = require(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\n  var _objectWithoutPropertiesLoose = _interopDefault(_babelRuntimeHelpersObjectWithoutPropertiesLoose);\n  var _firebaseApp = require(_dependencyMap[1], \"@firebase/app\");\n  var _firebaseUtil = require(_dependencyMap[2], \"@firebase/util\");\n  var _firebaseLogger = require(_dependencyMap[3], \"@firebase/logger\");\n  var _firebaseComponent = require(_dependencyMap[4], \"@firebase/component\");\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * An enum of factors that may be used for multifactor authentication.\n   *\n   * @public\n   */\n  const FactorId = {\n    /** Phone as second factor */\n    PHONE: 'phone',\n    TOTP: 'totp'\n  };\n  /**\n   * Enumeration of supported providers.\n   *\n   * @public\n   */\n  const ProviderId = {\n    /** Facebook provider ID */\n    FACEBOOK: 'facebook.com',\n    /** GitHub provider ID */\n    GITHUB: 'github.com',\n    /** Google provider ID */\n    GOOGLE: 'google.com',\n    /** Password provider */\n    PASSWORD: 'password',\n    /** Phone provider */\n    PHONE: 'phone',\n    /** Twitter provider ID */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported sign-in methods.\n   *\n   * @public\n   */\n  const SignInMethod = {\n    /** Email link sign in method */\n    EMAIL_LINK: 'emailLink',\n    /** Email/password sign in method */\n    EMAIL_PASSWORD: 'password',\n    /** Facebook sign in method */\n    FACEBOOK: 'facebook.com',\n    /** GitHub sign in method */\n    GITHUB: 'github.com',\n    /** Google sign in method */\n    GOOGLE: 'google.com',\n    /** Phone sign in method */\n    PHONE: 'phone',\n    /** Twitter sign in method */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported operation types.\n   *\n   * @public\n   */\n  const OperationType = {\n    /** Operation involving linking an additional provider to an already signed-in user. */\n    LINK: 'link',\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\n    REAUTHENTICATE: 'reauthenticate',\n    /** Operation involving signing in a user. */\n    SIGN_IN: 'signIn'\n  };\n  /**\n   * An enumeration of the possible email action types.\n   *\n   * @public\n   */\n  const ActionCodeOperation = {\n    /** The email link sign-in action. */\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n    /** The password reset action. */\n    PASSWORD_RESET: 'PASSWORD_RESET',\n    /** The email revocation action. */\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\n    /** The revert second factor addition email action. */\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n    /** The revert second factor addition email action. */\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n    /** The email verification action. */\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _debugErrorMap() {\n    return {\n      [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n      [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n      [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',\n      [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',\n      [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',\n      [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',\n      [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n      [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n      [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n      [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n      [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',\n      [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',\n      [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n      [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n      [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.',\n      [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n      [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n      [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n      [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',\n      [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n      [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.',\n      [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',\n      [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n      [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',\n      [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n      [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n      [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n      [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n      [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n      [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n      [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n      [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n      [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',\n      [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',\n      [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',\n      [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',\n      [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n      [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n      [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',\n      [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n      [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',\n      [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n      [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n      [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n      [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n      [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',\n      [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',\n      [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n      [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n      [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n      [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n      [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',\n      [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n      [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n      [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n      [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n      [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n      [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n      [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n      [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n      [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',\n      [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n      [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n      [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',\n      [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',\n      [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.',\n      [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n      [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n      [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n      [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n      [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n      [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n      [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n      [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n      [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n      [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n      [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n      [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n      [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',\n      [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',\n      [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n      [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n      [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n      [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n      [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n      [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',\n      [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n      [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n      [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n      [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n      [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n      [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.',\n      [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n      [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n      [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n      [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n      [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n      [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n      [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n      [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n      [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n      [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n      [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' + 'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n    };\n  }\n  function _prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return {\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'\n    };\n  }\n  /**\n   * A verbose error map with detailed descriptions for most error codes.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const debugErrorMap = _debugErrorMap;\n  /**\n   * A minimal error map with all verbose error messages stripped.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const prodErrorMap = _prodErrorMap;\n  const _DEFAULT_AUTH_ERROR_FACTORY = new _firebaseUtil.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n  /**\n   * A map of potential `Auth` error codes, for easier comparison with errors\n   * thrown by the SDK.\n   *\n   * @remarks\n   * Note that you can't tree-shake individual keys\n   * in the map, so by using the map you might substantially increase your\n   * bundle size.\n   *\n   * @public\n   */\n  const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n    ARGUMENT_ERROR: 'auth/argument-error',\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n    CODE_EXPIRED: 'auth/code-expired',\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n    EMAIL_EXISTS: 'auth/email-already-in-use',\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n    INTERNAL_ERROR: 'auth/internal-error',\n    INVALID_API_KEY: 'auth/invalid-api-key',\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n    INVALID_APP_ID: 'auth/invalid-app-id',\n    INVALID_AUTH: 'auth/invalid-user-token',\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n    INVALID_CODE: 'auth/invalid-verification-code',\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n    INVALID_EMAIL: 'auth/invalid-email',\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\n    INVALID_PASSWORD: 'auth/wrong-password',\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n    INVALID_SENDER: 'auth/invalid-sender',\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n    MISSING_CODE: 'auth/missing-verification-code',\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\n    MODULE_DESTROYED: 'auth/app-deleted',\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n    NULL_USER: 'auth/null-user',\n    NO_AUTH_EVENT: 'auth/no-auth-event',\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n    POPUP_BLOCKED: 'auth/popup-blocked',\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n    TIMEOUT: 'auth/timeout',\n    TOKEN_EXPIRED: 'auth/user-token-expired',\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\n    USER_CANCELLED: 'auth/user-cancelled',\n    USER_DELETED: 'auth/user-not-found',\n    USER_DISABLED: 'auth/user-disabled',\n    USER_MISMATCH: 'auth/user-mismatch',\n    USER_SIGNED_OUT: 'auth/user-signed-out',\n    WEAK_PASSWORD: 'auth/weak-password',\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n    ALREADY_INITIALIZED: 'auth/already-initialized',\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n    INVALID_REQ_TYPE: 'auth/invalid-req-type',\n    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const logClient = new _firebaseLogger.Logger('@firebase/auth');\n  function _logWarn(msg, ...args) {\n    if (logClient.logLevel <= _firebaseLogger.LogLevel.WARN) {\n      logClient.warn(`Auth (${_firebaseApp.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n  function _logError(msg, ...args) {\n    if (logClient.logLevel <= _firebaseLogger.LogLevel.ERROR) {\n      logClient.error(`Auth (${_firebaseApp.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _fail(authOrCode, ...rest) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n  function _createError(authOrCode, ...rest) {\n    return createErrorInternal(authOrCode, ...rest);\n  }\n  function _errorWithCustomMessage(auth, code, message) {\n    const errorMap = Object.assign({}, prodErrorMap(), {\n      [code]: message\n    });\n    const factory = new _firebaseUtil.ErrorFactory('auth', 'Firebase', errorMap);\n    return factory.create(code, {\n      appName: auth.name\n    });\n  }\n  function _serverAppCurrentUserOperationNotSupportedError(auth) {\n    return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n  }\n  function _assertInstanceOf(auth, object, instance) {\n    const constructorInstance = instance;\n    if (!(object instanceof constructorInstance)) {\n      if (constructorInstance.name !== object.constructor.name) {\n        _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);\n    }\n  }\n  function createErrorInternal(authOrCode, ...rest) {\n    if (typeof authOrCode !== 'string') {\n      const code = rest[0];\n      const fullParams = [...rest.slice(1)];\n      if (fullParams[0]) {\n        fullParams[0].appName = authOrCode.name;\n      }\n      return authOrCode._errorFactory.create(code, ...fullParams);\n    }\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n  }\n  function _assert(assertion, authOrCode, ...rest) {\n    if (!assertion) {\n      throw createErrorInternal(authOrCode, ...rest);\n    }\n  }\n  /**\n   * Unconditionally fails, throwing an internal error with the given message.\n   *\n   * @param failure type of failure encountered\n   * @throws Error\n   */\n  function debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\n    _logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n  }\n  /**\n   * Fails if the given assertion condition is false, throwing an Error with the\n   * given message if it did.\n   *\n   * @param assertion\n   * @param message\n   */\n  function debugAssert(assertion, message) {\n    if (!assertion) {\n      debugFail(message);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getCurrentUrl() {\n    return typeof self !== 'undefined' && self.location?.href || '';\n  }\n  function _isHttpOrHttps() {\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n  }\n  function _getCurrentScheme() {\n    return typeof self !== 'undefined' && self.location?.protocol || null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine whether the browser is working online\n   */\n  function _isOnline() {\n    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    _isHttpOrHttps() || (0, _firebaseUtil.isBrowserExtension)() || 'connection' in navigator)) {\n      return navigator.onLine;\n    }\n    // If we can't determine the state, assume it is online.\n    return true;\n  }\n  function _getUserLanguage() {\n    if (typeof navigator === 'undefined') {\n      return null;\n    }\n    const navigatorLanguage = navigator;\n    return (\n      // Most reliable, but only supported in Chrome/Firefox.\n      navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n      // Supported in most browsers, but returns the language of the browser\n      // UI, not the language set in browser settings.\n      navigatorLanguage.language ||\n      // Couldn't determine language.\n      null\n    );\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * A structure to help pick between a range of long and short delay durations\n   * depending on the current environment. In general, the long delay is used for\n   * mobile environments whereas short delays are used for desktop environments.\n   */\n  class Delay {\n    constructor(shortDelay, longDelay) {\n      this.shortDelay = shortDelay;\n      this.longDelay = longDelay;\n      // Internal error when improperly initialized.\n      debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n      this.isMobile = (0, _firebaseUtil.isMobileCordova)() || (0, _firebaseUtil.isReactNative)();\n    }\n    get() {\n      if (!_isOnline()) {\n        // Pick the shorter timeout.\n        return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n      }\n      // If running in a mobile environment, return the long delay, otherwise\n      // return the short delay.\n      // This could be improved in the future to dynamically change based on other\n      // variables instead of just reading the current environment.\n      return this.isMobile ? this.longDelay : this.shortDelay;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _emulatorUrl(config, path) {\n    debugAssert(config.emulator, 'Emulator should always be set here');\n    const {\n      url\n    } = config.emulator;\n    if (!path) {\n      return url;\n    }\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class FetchProvider {\n    static initialize(fetchImpl, headersImpl, responseImpl) {\n      this.fetchImpl = fetchImpl;\n      if (headersImpl) {\n        this.headersImpl = headersImpl;\n      }\n      if (responseImpl) {\n        this.responseImpl = responseImpl;\n      }\n    }\n    static fetch() {\n      if (this.fetchImpl) {\n        return this.fetchImpl;\n      }\n      if (typeof self !== 'undefined' && 'fetch' in self) {\n        return self.fetch;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n        return globalThis.fetch;\n      }\n      if (typeof fetch !== 'undefined') {\n        return fetch;\n      }\n      debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static headers() {\n      if (this.headersImpl) {\n        return this.headersImpl;\n      }\n      if (typeof self !== 'undefined' && 'Headers' in self) {\n        return self.Headers;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n        return globalThis.Headers;\n      }\n      if (typeof Headers !== 'undefined') {\n        return Headers;\n      }\n      debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static response() {\n      if (this.responseImpl) {\n        return this.responseImpl;\n      }\n      if (typeof self !== 'undefined' && 'Response' in self) {\n        return self.Response;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Response) {\n        return globalThis.Response;\n      }\n      if (typeof Response !== 'undefined') {\n        return Response;\n      }\n      debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Map from errors returned by the server to errors to developer visible errors\n   */\n  const SERVER_ERROR_MAP = {\n    // Custom token errors.\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Create Auth URI errors.\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Sign in with email and password errors (some apply to sign up too).\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n    // invalid.\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n\n    // Sign up with email and password errors.\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n\n    // Verify assertion for sign in with credential errors:\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Send Password reset email errors:\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Operations that require ID token in request:\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n\n    // Other errors.\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n\n    // Phone Auth related errors.\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n\n    // Other action code errors when additional settings passed.\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n    // This is OK as this error will be caught by client side validation.\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n\n    // getProjectConfig errors when clientId is passed.\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n\n    // User actions (sign-up or deletion) disabled errors.\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n\n    // Multi factor related errors.\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n\n    // Blocking functions related errors.\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Recaptcha related errors.\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const CookieAuthProxiedEndpoints = [\"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, \"/v1/token\" /* Endpoint.TOKEN */];\n  const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\n  function _addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) {\n      return Object.assign({}, request, {\n        tenantId: auth.tenantId\n      });\n    }\n    return request;\n  }\n  async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n      let body = {};\n      let params = {};\n      if (request) {\n        if (method === \"GET\" /* HttpMethod.GET */) {\n          params = request;\n        } else {\n          body = {\n            body: JSON.stringify(request)\n          };\n        }\n      }\n      const query = (0, _firebaseUtil.querystring)(Object.assign({\n        key: auth.config.apiKey\n      }, params)).slice(1);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n      if (auth.languageCode) {\n        headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n      }\n      const fetchArgs = Object.assign({\n        method,\n        headers\n      }, body);\n      /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n         problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n         'RequestInitializerDict' is not implemented.\"\n         https://github.com/cloudflare/next-on-pages/issues/487 */\n      if (!(0, _firebaseUtil.isCloudflareWorker)()) {\n        fetchArgs.referrerPolicy = 'no-referrer';\n      }\n      if (auth.emulatorConfig && (0, _firebaseUtil.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        fetchArgs.credentials = 'include';\n      }\n      return FetchProvider.fetch()(await _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n    });\n  }\n  async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n    auth._canInitEmulator = false;\n    const errorMap = Object.assign({}, SERVER_ERROR_MAP, customErrorMap);\n    try {\n      const networkTimeout = new NetworkTimeout(auth);\n      const response = await Promise.race([fetchFn(), networkTimeout.promise]);\n      // If we've reached this point, the fetch succeeded and the networkTimeout\n      // didn't throw; clear the network timeout delay so that Node won't hang\n      networkTimeout.clearNetworkTimeout();\n      const json = await response.json();\n      if ('needConfirmation' in json) {\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n      }\n      if (response.ok && !('errorMessage' in json)) {\n        return json;\n      } else {\n        const errorMessage = response.ok ? json.errorMessage : json.error.message;\n        const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n        if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n          throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n        } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n          throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n        } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n          throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n        }\n        const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n        if (serverErrorMessage) {\n          throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n        } else {\n          _fail(auth, authError);\n        }\n      }\n    } catch (e) {\n      if (e instanceof _firebaseUtil.FirebaseError) {\n        throw e;\n      }\n      // Changing this to a different error code will log user out when there is a network error\n      // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n      // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n      _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n        'message': String(e)\n      });\n    }\n  }\n  async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n    if ('mfaPendingCredential' in serverResponse) {\n      _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n        _serverResponse: serverResponse\n      });\n    }\n    return serverResponse;\n  }\n  async function _getFinalTarget(auth, host, path, query) {\n    const base = `${host}${path}?${query}`;\n    const authInternal = auth;\n    const finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;\n    // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n    // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n    // from the response\n    if (CookieAuthProxiedEndpoints.includes(path)) {\n      // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n      // here since auth initialization calls this function.\n      await authInternal._persistenceManagerAvailable;\n      if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n        const cookiePersistence = authInternal._getPersistence();\n        return cookiePersistence._getFinalTarget(finalTarget).toString();\n      }\n    }\n    return finalTarget;\n  }\n  function _parseEnforcementState(enforcementStateStr) {\n    switch (enforcementStateStr) {\n      case 'ENFORCE':\n        return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n      case 'AUDIT':\n        return \"AUDIT\" /* EnforcementState.AUDIT */;\n      case 'OFF':\n        return \"OFF\" /* EnforcementState.OFF */;\n      default:\n        return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n    }\n  }\n  class NetworkTimeout {\n    clearNetworkTimeout() {\n      clearTimeout(this.timer);\n    }\n    constructor(auth) {\n      this.auth = auth;\n      // Node timers and browser timers are fundamentally incompatible, but we\n      // don't care about the value here\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timer = null;\n      this.promise = new Promise((_, reject) => {\n        this.timer = setTimeout(() => {\n          return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, DEFAULT_API_TIMEOUT_MS.get());\n      });\n    }\n  }\n  function _makeTaggedError(auth, code, response) {\n    const errorParams = {\n      appName: auth.name\n    };\n    if (response.email) {\n      errorParams.email = response.email;\n    }\n    if (response.phoneNumber) {\n      errorParams.phoneNumber = response.phoneNumber;\n    }\n    const error = _createError(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function isV2(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;\n  }\n  function isEnterprise(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n  }\n  class RecaptchaConfig {\n    constructor(response) {\n      /**\n       * The reCAPTCHA site key.\n       */\n      this.siteKey = '';\n      /**\n       * The list of providers and their enablement status for reCAPTCHA Enterprise.\n       */\n      this.recaptchaEnforcementState = [];\n      if (response.recaptchaKey === undefined) {\n        throw new Error('recaptchaKey undefined');\n      }\n      // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n      this.siteKey = response.recaptchaKey.split('/')[3];\n      this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n    }\n    /**\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n     *\n     * @param providerStr - The provider whose enforcement state is to be returned.\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n     */\n    getProviderEnforcementState(providerStr) {\n      if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n        return null;\n      }\n      for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n        if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n          return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n        }\n      }\n      return null;\n    }\n    /**\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n     *\n     * @param providerStr - The provider whose enablement state is to be returned.\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n     */\n    isProviderEnabled(providerStr) {\n      return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n    }\n    /**\n     * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n     * returns false.\n     *\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n     */\n    isAnyProviderEnabled() {\n      return this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) || this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function getRecaptchaParams(auth) {\n    return (await _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '';\n  }\n  async function getRecaptchaConfig(auth, request) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function deleteAccount(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n  }\n  async function deleteLinkedAccounts(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  async function getAccountInfo(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) {\n      return undefined;\n    }\n    try {\n      // Convert to date object.\n      const date = new Date(Number(utcTimestamp));\n      // Test date is valid.\n      if (!isNaN(date.getTime())) {\n        // Convert to UTC date string.\n        return date.toUTCString();\n      }\n    } catch (e) {\n      // Do nothing. undefined will be returned.\n    }\n    return undefined;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function getIdToken(user, forceRefresh = false) {\n    return (0, _firebaseUtil.getModularInstance)(user).getIdToken(forceRefresh);\n  }\n  /**\n   * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  async function getIdTokenResult(user, forceRefresh = false) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const token = await userInternal.getIdToken(forceRefresh);\n    const claims = _parseToken(token);\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n    const signInProvider = firebase?.['sign_in_provider'];\n    return {\n      claims,\n      token,\n      authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n      issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n      expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n      signInProvider: signInProvider || null,\n      signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n    };\n  }\n  function secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n  }\n  function _parseToken(token) {\n    const [algorithm, payload, signature] = token.split('.');\n    if (algorithm === undefined || payload === undefined || signature === undefined) {\n      _logError('JWT malformed, contained fewer than 3 sections');\n      return null;\n    }\n    try {\n      const decoded = (0, _firebaseUtil.base64Decode)(payload);\n      if (!decoded) {\n        _logError('Failed to decode base64 JWT payload');\n        return null;\n      }\n      return JSON.parse(decoded);\n    } catch (e) {\n      _logError('Caught error parsing JWT payload as JSON', e?.toString());\n      return null;\n    }\n  }\n  /**\n   * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n   */\n  function _tokenExpiresIn(token) {\n    const parsedToken = _parseToken(token);\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n    if (bypassAuthState) {\n      return promise;\n    }\n    try {\n      return await promise;\n    } catch (e) {\n      if (e instanceof _firebaseUtil.FirebaseError && isUserInvalidated(e)) {\n        if (user.auth.currentUser === user) {\n          await user.auth.signOut();\n        }\n      }\n      throw e;\n    }\n  }\n  function isUserInvalidated({\n    code\n  }) {\n    return code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class ProactiveRefresh {\n    constructor(user) {\n      this.user = user;\n      this.isRunning = false;\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timerId = null;\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n    }\n    _start() {\n      if (this.isRunning) {\n        return;\n      }\n      this.isRunning = true;\n      this.schedule();\n    }\n    _stop() {\n      if (!this.isRunning) {\n        return;\n      }\n      this.isRunning = false;\n      if (this.timerId !== null) {\n        clearTimeout(this.timerId);\n      }\n    }\n    getInterval(wasError) {\n      if (wasError) {\n        const interval = this.errorBackoff;\n        this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n        return interval;\n      } else {\n        // Reset the error backoff\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n        const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n        const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n        return Math.max(0, interval);\n      }\n    }\n    schedule(wasError = false) {\n      if (!this.isRunning) {\n        // Just in case...\n        return;\n      }\n      const interval = this.getInterval(wasError);\n      this.timerId = setTimeout(async () => {\n        await this.iteration();\n      }, interval);\n    }\n    async iteration() {\n      try {\n        await this.user.getIdToken(true);\n      } catch (e) {\n        // Only retry on network errors\n        if (e?.code === `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          this.schedule(/* wasError */true);\n        }\n        return;\n      }\n      this.schedule();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserMetadata {\n    constructor(createdAt, lastLoginAt) {\n      this.createdAt = createdAt;\n      this.lastLoginAt = lastLoginAt;\n      this._initializeTime();\n    }\n    _initializeTime() {\n      this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n      this.creationTime = utcTimestampToDateString(this.createdAt);\n    }\n    _copy(metadata) {\n      this.createdAt = metadata.createdAt;\n      this.lastLoginAt = metadata.lastLoginAt;\n      this._initializeTime();\n    }\n    toJSON() {\n      return {\n        createdAt: this.createdAt,\n        lastLoginAt: this.lastLoginAt\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reloadWithoutSaving(user) {\n    const auth = user.auth;\n    const idToken = await user.getIdToken();\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {\n      idToken\n    }));\n    _assert(response?.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const coreAccount = response.users[0];\n    user._notifyReloadListener(coreAccount);\n    const newProviderData = coreAccount.providerUserInfo?.length ? extractProviderData(coreAccount.providerUserInfo) : [];\n    const providerData = mergeProviderData(user.providerData, newProviderData);\n    // Preserves the non-nonymous status of the stored user, even if no more\n    // credentials (federated or email/password) are linked to the user. If\n    // the user was previously anonymous, then use provider data to update.\n    // On the other hand, if it was not anonymous before, it should never be\n    // considered anonymous now.\n    const oldIsAnonymous = user.isAnonymous;\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !providerData?.length;\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n    const updates = {\n      uid: coreAccount.localId,\n      displayName: coreAccount.displayName || null,\n      photoURL: coreAccount.photoUrl || null,\n      email: coreAccount.email || null,\n      emailVerified: coreAccount.emailVerified || false,\n      phoneNumber: coreAccount.phoneNumber || null,\n      tenantId: coreAccount.tenantId || null,\n      providerData,\n      metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n      isAnonymous\n    };\n    Object.assign(user, updates);\n  }\n  /**\n   * Reloads user account data, if signed in.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function reload(user) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _reloadWithoutSaving(userInternal);\n    // Even though the current user hasn't changed, update\n    // current user will trigger a persistence update w/ the\n    // new info.\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\n  }\n  function mergeProviderData(original, newData) {\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n    return [...deduped, ...newData];\n  }\n  function extractProviderData(providers) {\n    return providers.map(_ref => {\n      let {\n          providerId\n        } = _ref,\n        provider = (0, _objectWithoutPropertiesLoose.default)(_ref, _excluded);\n      return {\n        providerId,\n        uid: provider.rawId || '',\n        displayName: provider.displayName || null,\n        email: provider.email || null,\n        phoneNumber: provider.phoneNumber || null,\n        photoURL: provider.photoUrl || null\n      };\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function requestStsToken(auth, refreshToken) {\n    const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n      const body = (0, _firebaseUtil.querystring)({\n        'grant_type': 'refresh_token',\n        'refresh_token': refreshToken\n      }).slice(1);\n      const {\n        tokenApiHost,\n        apiKey\n      } = auth.config;\n      const url = await _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n      const options = {\n        method: \"POST\" /* HttpMethod.POST */,\n        headers,\n        body\n      };\n      if (auth.emulatorConfig && (0, _firebaseUtil.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        options.credentials = 'include';\n      }\n      return FetchProvider.fetch()(url, options);\n    });\n    // The response comes back in snake_case. Convert to camel:\n    return {\n      accessToken: response.access_token,\n      expiresIn: response.expires_in,\n      refreshToken: response.refresh_token\n    };\n  }\n  async function revokeToken(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * We need to mark this class as internal explicitly to exclude it in the public typings, because\n   * it references AuthInternal which has a circular dependency with UserInternal.\n   *\n   * @internal\n   */\n  class StsTokenManager {\n    constructor() {\n      this.refreshToken = null;\n      this.accessToken = null;\n      this.expirationTime = null;\n    }\n    get isExpired() {\n      return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n    }\n    updateFromServerResponse(response) {\n      _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n      this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n    }\n    updateFromIdToken(idToken) {\n      _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = _tokenExpiresIn(idToken);\n      this.updateTokensAndExpiration(idToken, null, expiresIn);\n    }\n    async getToken(auth, forceRefresh = false) {\n      if (!forceRefresh && this.accessToken && !this.isExpired) {\n        return this.accessToken;\n      }\n      _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n      if (this.refreshToken) {\n        await this.refresh(auth, this.refreshToken);\n        return this.accessToken;\n      }\n      return null;\n    }\n    clearRefreshToken() {\n      this.refreshToken = null;\n    }\n    async refresh(auth, oldToken) {\n      const {\n        accessToken,\n        refreshToken,\n        expiresIn\n      } = await requestStsToken(auth, oldToken);\n      this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n    }\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n      this.refreshToken = refreshToken || null;\n      this.accessToken = accessToken || null;\n      this.expirationTime = Date.now() + expiresInSec * 1000;\n    }\n    static fromJSON(appName, object) {\n      const {\n        refreshToken,\n        accessToken,\n        expirationTime\n      } = object;\n      const manager = new StsTokenManager();\n      if (refreshToken) {\n        _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.refreshToken = refreshToken;\n      }\n      if (accessToken) {\n        _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.accessToken = accessToken;\n      }\n      if (expirationTime) {\n        _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.expirationTime = expirationTime;\n      }\n      return manager;\n    }\n    toJSON() {\n      return {\n        refreshToken: this.refreshToken,\n        accessToken: this.accessToken,\n        expirationTime: this.expirationTime\n      };\n    }\n    _assign(stsTokenManager) {\n      this.accessToken = stsTokenManager.accessToken;\n      this.refreshToken = stsTokenManager.refreshToken;\n      this.expirationTime = stsTokenManager.expirationTime;\n    }\n    _clone() {\n      return Object.assign(new StsTokenManager(), this.toJSON());\n    }\n    _performRefresh() {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function assertStringOrUndefined(assertion, appName) {\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n      appName\n    });\n  }\n  class UserImpl {\n    constructor(_ref2) {\n      let {\n          uid,\n          auth,\n          stsTokenManager\n        } = _ref2,\n        opt = (0, _objectWithoutPropertiesLoose.default)(_ref2, _excluded2);\n      // For the user object, provider is always Firebase.\n      this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n      this.proactiveRefresh = new ProactiveRefresh(this);\n      this.reloadUserInfo = null;\n      this.reloadListener = null;\n      this.uid = uid;\n      this.auth = auth;\n      this.stsTokenManager = stsTokenManager;\n      this.accessToken = stsTokenManager.accessToken;\n      this.displayName = opt.displayName || null;\n      this.email = opt.email || null;\n      this.emailVerified = opt.emailVerified || false;\n      this.phoneNumber = opt.phoneNumber || null;\n      this.photoURL = opt.photoURL || null;\n      this.isAnonymous = opt.isAnonymous || false;\n      this.tenantId = opt.tenantId || null;\n      this.providerData = opt.providerData ? [...opt.providerData] : [];\n      this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    async getIdToken(forceRefresh) {\n      const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n      _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      if (this.accessToken !== accessToken) {\n        this.accessToken = accessToken;\n        await this.auth._persistUserIfCurrent(this);\n        this.auth._notifyListenersIfCurrent(this);\n      }\n      return accessToken;\n    }\n    getIdTokenResult(forceRefresh) {\n      return getIdTokenResult(this, forceRefresh);\n    }\n    reload() {\n      return reload(this);\n    }\n    _assign(user) {\n      if (this === user) {\n        return;\n      }\n      _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.displayName = user.displayName;\n      this.photoURL = user.photoURL;\n      this.email = user.email;\n      this.emailVerified = user.emailVerified;\n      this.phoneNumber = user.phoneNumber;\n      this.isAnonymous = user.isAnonymous;\n      this.tenantId = user.tenantId;\n      this.providerData = user.providerData.map(userInfo => Object.assign({}, userInfo));\n      this.metadata._copy(user.metadata);\n      this.stsTokenManager._assign(user.stsTokenManager);\n    }\n    _clone(auth) {\n      const newUser = new UserImpl(Object.assign({}, this, {\n        auth,\n        stsTokenManager: this.stsTokenManager._clone()\n      }));\n      newUser.metadata._copy(this.metadata);\n      return newUser;\n    }\n    _onReload(callback) {\n      // There should only ever be one listener, and that is a single instance of MultiFactorUser\n      _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.reloadListener = callback;\n      if (this.reloadUserInfo) {\n        this._notifyReloadListener(this.reloadUserInfo);\n        this.reloadUserInfo = null;\n      }\n    }\n    _notifyReloadListener(userInfo) {\n      if (this.reloadListener) {\n        this.reloadListener(userInfo);\n      } else {\n        // If no listener is subscribed yet, save the result so it's available when they do subscribe\n        this.reloadUserInfo = userInfo;\n      }\n    }\n    _startProactiveRefresh() {\n      this.proactiveRefresh._start();\n    }\n    _stopProactiveRefresh() {\n      this.proactiveRefresh._stop();\n    }\n    async _updateTokensIfNecessary(response, reload = false) {\n      let tokensRefreshed = false;\n      if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n        this.stsTokenManager.updateFromServerResponse(response);\n        tokensRefreshed = true;\n      }\n      if (reload) {\n        await _reloadWithoutSaving(this);\n      }\n      await this.auth._persistUserIfCurrent(this);\n      if (tokensRefreshed) {\n        this.auth._notifyListenersIfCurrent(this);\n      }\n    }\n    async delete() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n      }\n      const idToken = await this.getIdToken();\n      await _logoutIfInvalidated(this, deleteAccount(this.auth, {\n        idToken\n      }));\n      this.stsTokenManager.clearRefreshToken();\n      // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n      //       cancels pending actions...\n      return this.auth.signOut();\n    }\n    toJSON() {\n      return Object.assign({\n        uid: this.uid,\n        email: this.email || undefined,\n        emailVerified: this.emailVerified,\n        displayName: this.displayName || undefined,\n        isAnonymous: this.isAnonymous,\n        photoURL: this.photoURL || undefined,\n        phoneNumber: this.phoneNumber || undefined,\n        tenantId: this.tenantId || undefined,\n        providerData: this.providerData.map(userInfo => Object.assign({}, userInfo)),\n        stsTokenManager: this.stsTokenManager.toJSON(),\n        // Redirect event ID must be maintained in case there is a pending\n        // redirect event.\n        _redirectEventId: this._redirectEventId\n      }, this.metadata.toJSON(), {\n        // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n        apiKey: this.auth.config.apiKey,\n        appName: this.auth.name\n        // Missing authDomain will be tolerated by the legacy SDK.\n        // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n      });\n    }\n    get refreshToken() {\n      return this.stsTokenManager.refreshToken || '';\n    }\n    static _fromJSON(auth, object) {\n      const displayName = object.displayName ?? undefined;\n      const email = object.email ?? undefined;\n      const phoneNumber = object.phoneNumber ?? undefined;\n      const photoURL = object.photoURL ?? undefined;\n      const tenantId = object.tenantId ?? undefined;\n      const _redirectEventId = object._redirectEventId ?? undefined;\n      const createdAt = object.createdAt ?? undefined;\n      const lastLoginAt = object.lastLoginAt ?? undefined;\n      const {\n        uid,\n        emailVerified,\n        isAnonymous,\n        providerData,\n        stsTokenManager: plainObjectTokenManager\n      } = object;\n      _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n      _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(displayName, auth.name);\n      assertStringOrUndefined(email, auth.name);\n      _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(phoneNumber, auth.name);\n      assertStringOrUndefined(photoURL, auth.name);\n      assertStringOrUndefined(tenantId, auth.name);\n      assertStringOrUndefined(_redirectEventId, auth.name);\n      assertStringOrUndefined(createdAt, auth.name);\n      assertStringOrUndefined(lastLoginAt, auth.name);\n      const user = new UserImpl({\n        uid,\n        auth,\n        email,\n        emailVerified,\n        displayName,\n        isAnonymous,\n        photoURL,\n        phoneNumber,\n        tenantId,\n        stsTokenManager,\n        createdAt,\n        lastLoginAt\n      });\n      if (providerData && Array.isArray(providerData)) {\n        user.providerData = providerData.map(userInfo => Object.assign({}, userInfo));\n      }\n      if (_redirectEventId) {\n        user._redirectEventId = _redirectEventId;\n      }\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromServerResponse(idTokenResponse);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: idTokenResponse.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // Updates the user info and data and resolves with a user instance.\n      await _reloadWithoutSaving(user);\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromGetAccountInfoResponse(auth, response, idToken) {\n      const coreAccount = response.users[0];\n      _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n      const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromIdToken(idToken);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: coreAccount.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // update the user with data from the GetAccountInfo response.\n      const updates = {\n        uid: coreAccount.localId,\n        displayName: coreAccount.displayName || null,\n        photoURL: coreAccount.photoUrl || null,\n        email: coreAccount.email || null,\n        emailVerified: coreAccount.emailVerified || false,\n        phoneNumber: coreAccount.phoneNumber || null,\n        tenantId: coreAccount.tenantId || null,\n        providerData,\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n        isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length\n      };\n      Object.assign(user, updates);\n      return user;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const instanceCache = new Map();\n  function _getInstance(cls) {\n    debugAssert(cls instanceof Function, 'Expected a class definition');\n    let instance = instanceCache.get(cls);\n    if (instance) {\n      debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n      return instance;\n    }\n    instance = new cls();\n    instanceCache.set(cls, instance);\n    return instance;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class InMemoryPersistence {\n    constructor() {\n      this.type = \"NONE\" /* PersistenceType.NONE */;\n      this.storage = {};\n    }\n    async _isAvailable() {\n      return true;\n    }\n    async _set(key, value) {\n      this.storage[key] = value;\n    }\n    async _get(key) {\n      const value = this.storage[key];\n      return value === undefined ? null : value;\n    }\n    async _remove(key) {\n      delete this.storage[key];\n    }\n    _addListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n    _removeListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n  }\n  InMemoryPersistence.type = 'NONE';\n  /**\n   * An implementation of {@link Persistence} of type 'NONE'.\n   *\n   * @public\n   */\n  const inMemoryPersistence = InMemoryPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _persistenceKeyName(key, apiKey, appName) {\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n  }\n  class PersistenceUserManager {\n    constructor(persistence, auth, userKey) {\n      this.persistence = persistence;\n      this.auth = auth;\n      this.userKey = userKey;\n      const {\n        config,\n        name\n      } = this.auth;\n      this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n      this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n      this.boundEventHandler = auth._onStorageEvent.bind(auth);\n      this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    setCurrentUser(user) {\n      return this.persistence._set(this.fullUserKey, user.toJSON());\n    }\n    async getCurrentUser() {\n      const blob = await this.persistence._get(this.fullUserKey);\n      if (!blob) {\n        return null;\n      }\n      if (typeof blob === 'string') {\n        const response = await getAccountInfo(this.auth, {\n          idToken: blob\n        }).catch(() => undefined);\n        if (!response) {\n          return null;\n        }\n        return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n      }\n      return UserImpl._fromJSON(this.auth, blob);\n    }\n    removeCurrentUser() {\n      return this.persistence._remove(this.fullUserKey);\n    }\n    savePersistenceForRedirect() {\n      return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n    }\n    async setPersistence(newPersistence) {\n      if (this.persistence === newPersistence) {\n        return;\n      }\n      const currentUser = await this.getCurrentUser();\n      await this.removeCurrentUser();\n      this.persistence = newPersistence;\n      if (currentUser) {\n        return this.setCurrentUser(currentUser);\n      }\n    }\n    delete() {\n      this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n    }\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\n      if (!persistenceHierarchy.length) {\n        return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n      }\n      // Eliminate any persistences that are not available\n      const availablePersistences = (await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (await persistence._isAvailable()) {\n          return persistence;\n        }\n        return undefined;\n      }))).filter(persistence => persistence);\n      // Fall back to the first persistence listed, or in memory if none available\n      let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n      const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n      // Pull out the existing user, setting the chosen persistence to that\n      // persistence if the user exists.\n      let userToMigrate = null;\n      // Note, here we check for a user in _all_ persistences, not just the\n      // ones deemed available. If we can migrate a user out of a broken\n      // persistence, we will (but only if that persistence supports migration).\n      for (const persistence of persistenceHierarchy) {\n        try {\n          const blob = await persistence._get(key);\n          if (blob) {\n            let user;\n            if (typeof blob === 'string') {\n              const response = await getAccountInfo(auth, {\n                idToken: blob\n              }).catch(() => undefined);\n              if (!response) {\n                break;\n              }\n              user = await UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n            } else {\n              user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n            }\n            if (persistence !== selectedPersistence) {\n              userToMigrate = user;\n            }\n            selectedPersistence = persistence;\n            break;\n          }\n        } catch {}\n      }\n      // If we find the user in a persistence that does support migration, use\n      // that migration path (of only persistences that support migration)\n      const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n      // If the persistence does _not_ allow migration, just finish off here\n      if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\n      }\n      selectedPersistence = migrationHierarchy[0];\n      if (userToMigrate) {\n        // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n        // we'll just let it bubble to surface the error.\n        await selectedPersistence._set(key, userToMigrate.toJSON());\n      }\n      // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n      // such as users getting stuck with a previous account after signing out and refreshing the tab.\n      await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      }));\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine the browser for the purposes of reporting usage to the API\n   */\n  function _getBrowserName(userAgent) {\n    const ua = userAgent.toLowerCase();\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n      return \"Opera\" /* BrowserName.OPERA */;\n    } else if (_isIEMobile(ua)) {\n      // Windows phone IEMobile browser.\n      return \"IEMobile\" /* BrowserName.IEMOBILE */;\n    } else if (ua.includes('msie') || ua.includes('trident/')) {\n      return \"IE\" /* BrowserName.IE */;\n    } else if (ua.includes('edge/')) {\n      return \"Edge\" /* BrowserName.EDGE */;\n    } else if (_isFirefox(ua)) {\n      return \"Firefox\" /* BrowserName.FIREFOX */;\n    } else if (ua.includes('silk/')) {\n      return \"Silk\" /* BrowserName.SILK */;\n    } else if (_isBlackBerry(ua)) {\n      // Blackberry browser.\n      return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n    } else if (_isWebOS(ua)) {\n      // WebOS default browser.\n      return \"Webos\" /* BrowserName.WEBOS */;\n    } else if (_isSafari(ua)) {\n      return \"Safari\" /* BrowserName.SAFARI */;\n    } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n      return \"Chrome\" /* BrowserName.CHROME */;\n    } else if (_isAndroid(ua)) {\n      // Android stock browser.\n      return \"Android\" /* BrowserName.ANDROID */;\n    } else {\n      // Most modern browsers have name/version at end of user agent string.\n      const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n      const matches = userAgent.match(re);\n      if (matches?.length === 2) {\n        return matches[1];\n      }\n    }\n    return \"Other\" /* BrowserName.OTHER */;\n  }\n  function _isFirefox(ua = (0, _firebaseUtil.getUA)()) {\n    return /firefox\\//i.test(ua);\n  }\n  function _isSafari(userAgent = (0, _firebaseUtil.getUA)()) {\n    const ua = userAgent.toLowerCase();\n    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n  }\n  function _isChromeIOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /crios\\//i.test(ua);\n  }\n  function _isIEMobile(ua = (0, _firebaseUtil.getUA)()) {\n    return /iemobile/i.test(ua);\n  }\n  function _isAndroid(ua = (0, _firebaseUtil.getUA)()) {\n    return /android/i.test(ua);\n  }\n  function _isBlackBerry(ua = (0, _firebaseUtil.getUA)()) {\n    return /blackberry/i.test(ua);\n  }\n  function _isWebOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /webos/i.test(ua);\n  }\n  function _isIOS(ua = (0, _firebaseUtil.getUA)()) {\n    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n  }\n  function _isIOS7Or8(ua = (0, _firebaseUtil.getUA)()) {\n    return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n  }\n  function _isIOSStandalone(ua = (0, _firebaseUtil.getUA)()) {\n    return _isIOS(ua) && !!window.navigator?.standalone;\n  }\n  function _isIE10() {\n    return (0, _firebaseUtil.isIE)() && document.documentMode === 10;\n  }\n  function _isMobileBrowser(ua = (0, _firebaseUtil.getUA)()) {\n    // TODO: implement getBrowserName equivalent for OS.\n    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /*\n   * Determine the SDK version string\n   */\n  function _getClientVersion(clientPlatform, frameworks = []) {\n    let reportedPlatform;\n    switch (clientPlatform) {\n      case \"Browser\" /* ClientPlatform.BROWSER */:\n        // In a browser environment, report the browser name.\n        reportedPlatform = _getBrowserName((0, _firebaseUtil.getUA)());\n        break;\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        // Technically a worker runs from a browser but we need to differentiate a\n        // worker from a browser.\n        // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n        reportedPlatform = `${_getBrowserName((0, _firebaseUtil.getUA)())}-${clientPlatform}`;\n        break;\n      default:\n        reportedPlatform = clientPlatform;\n    }\n    const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${_firebaseApp.SDK_VERSION}/${reportedFrameworks}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthMiddlewareQueue {\n    constructor(auth) {\n      this.auth = auth;\n      this.queue = [];\n    }\n    pushCallback(callback, onAbort) {\n      // The callback could be sync or async. Wrap it into a\n      // function that is always async.\n      const wrappedCallback = user => new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n      // Attach the onAbort if present\n      wrappedCallback.onAbort = onAbort;\n      this.queue.push(wrappedCallback);\n      const index = this.queue.length - 1;\n      return () => {\n        // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n        // indexing of other elements.\n        this.queue[index] = () => Promise.resolve();\n      };\n    }\n    async runMiddleware(nextUser) {\n      if (this.auth.currentUser === nextUser) {\n        return;\n      }\n      // While running the middleware, build a temporary stack of onAbort\n      // callbacks to call if one middleware callback rejects.\n      const onAbortStack = [];\n      try {\n        for (const beforeStateCallback of this.queue) {\n          await beforeStateCallback(nextUser);\n          // Only push the onAbort if the callback succeeds\n          if (beforeStateCallback.onAbort) {\n            onAbortStack.push(beforeStateCallback.onAbort);\n          }\n        }\n      } catch (e) {\n        // Run all onAbort, with separate try/catch to ignore any errors and\n        // continue\n        onAbortStack.reverse();\n        for (const onAbort of onAbortStack) {\n          try {\n            onAbort();\n          } catch (_) {\n            /* swallow error */\n          }\n        }\n        throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n          originalMessage: e?.message\n        });\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n   *\n   * @param auth Auth object.\n   * @param request Password policy request.\n   * @returns Password policy response.\n   */\n  async function _getPasswordPolicy(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Minimum min password length enforced by the backend, even if no minimum length is set.\n  const MINIMUM_MIN_PASSWORD_LENGTH = 6;\n  /**\n   * Stores password policy requirements and provides password validation against the policy.\n   *\n   * @internal\n   */\n  class PasswordPolicyImpl {\n    constructor(response) {\n      // Only include custom strength options defined in the response.\n      const responseOptions = response.customStrengthOptions;\n      this.customStrengthOptions = {};\n      // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n      this.customStrengthOptions.minPasswordLength = responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n      if (responseOptions.maxPasswordLength) {\n        this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n      }\n      if (responseOptions.containsLowercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n      }\n      if (responseOptions.containsUppercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n      }\n      if (responseOptions.containsNumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n      }\n      if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n      }\n      this.enforcementState = response.enforcementState;\n      if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n        this.enforcementState = 'OFF';\n      }\n      // Use an empty string if no non-alphanumeric characters are specified in the response.\n      this.allowedNonAlphanumericCharacters = response.allowedNonAlphanumericCharacters?.join('') ?? '';\n      this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n      this.schemaVersion = response.schemaVersion;\n    }\n    validatePassword(password) {\n      const status = {\n        isValid: true,\n        passwordPolicy: this\n      };\n      // Check the password length and character options.\n      this.validatePasswordLengthOptions(password, status);\n      this.validatePasswordCharacterOptions(password, status);\n      // Combine the status into single isValid property.\n      status.isValid && (status.isValid = status.meetsMinPasswordLength ?? true);\n      status.isValid && (status.isValid = status.meetsMaxPasswordLength ?? true);\n      status.isValid && (status.isValid = status.containsLowercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsUppercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsNumericCharacter ?? true);\n      status.isValid && (status.isValid = status.containsNonAlphanumericCharacter ?? true);\n      return status;\n    }\n    /**\n     * Validates that the password meets the length options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordLengthOptions(password, status) {\n      const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n      const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n      if (minPasswordLength) {\n        status.meetsMinPasswordLength = password.length >= minPasswordLength;\n      }\n      if (maxPasswordLength) {\n        status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n      }\n    }\n    /**\n     * Validates that the password meets the character options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordCharacterOptions(password, status) {\n      // Assign statuses for requirements even if the password is an empty string.\n      this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n      let passwordChar;\n      for (let i = 0; i < password.length; i++) {\n        passwordChar = password.charAt(i);\n        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n      }\n    }\n    /**\n     * Updates the running validation status with the statuses for the character options.\n     * Expected to be called each time a character is processed to update each option status\n     * based on the current character.\n     *\n     * @param status Validation status.\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n     * @param containsNumericCharacter Whether the character is a numeric character.\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n     */\n    updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n      if (this.customStrengthOptions.containsLowercaseLetter) {\n        status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsUppercaseLetter) {\n        status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsNumericCharacter) {\n        status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n      }\n      if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n        status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthImpl {\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n      this.app = app;\n      this.heartbeatServiceProvider = heartbeatServiceProvider;\n      this.appCheckServiceProvider = appCheckServiceProvider;\n      this.config = config;\n      this.currentUser = null;\n      this.emulatorConfig = null;\n      this.operations = Promise.resolve();\n      this.authStateSubscription = new Subscription(this);\n      this.idTokenSubscription = new Subscription(this);\n      this.beforeStateQueue = new AuthMiddlewareQueue(this);\n      this.redirectUser = null;\n      this.isProactiveRefreshEnabled = false;\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n      // Any network calls will set this to true and prevent subsequent emulator\n      // initialization\n      this._canInitEmulator = true;\n      this._isInitialized = false;\n      this._deleted = false;\n      this._initializationPromise = null;\n      this._popupRedirectResolver = null;\n      this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n      this._agentRecaptchaConfig = null;\n      this._tenantRecaptchaConfigs = {};\n      this._projectPasswordPolicy = null;\n      this._tenantPasswordPolicies = {};\n      this._resolvePersistenceManagerAvailable = undefined;\n      // Tracks the last notified UID for state change listeners to prevent\n      // repeated calls to the callbacks. Undefined means it's never been\n      // called, whereas null means it's been called with a signed out user\n      this.lastNotifiedUid = undefined;\n      this.languageCode = null;\n      this.tenantId = null;\n      this.settings = {\n        appVerificationDisabledForTesting: false\n      };\n      this.frameworks = [];\n      this.name = app.name;\n      this.clientVersion = config.sdkClientVersion;\n      // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n      // persistenceMananger to be available. see _getFinalTarget for more context\n      this._persistenceManagerAvailable = new Promise(resolve => this._resolvePersistenceManagerAvailable = resolve);\n    }\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n      if (popupRedirectResolver) {\n        this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n      }\n      // Have to check for app deletion throughout initialization (after each\n      // promise resolution)\n      this._initializationPromise = this.queue(async () => {\n        if (this._deleted) {\n          return;\n        }\n        this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n        this._resolvePersistenceManagerAvailable?.();\n        if (this._deleted) {\n          return;\n        }\n        // Initialize the resolver early if necessary (only applicable to web:\n        // this will cause the iframe to load immediately in certain cases)\n        if (this._popupRedirectResolver?._shouldInitProactively) {\n          // If this fails, don't halt auth loading\n          try {\n            await this._popupRedirectResolver._initialize(this);\n          } catch (e) {\n            /* Ignore the error */\n          }\n        }\n        await this.initializeCurrentUser(popupRedirectResolver);\n        this.lastNotifiedUid = this.currentUser?.uid || null;\n        if (this._deleted) {\n          return;\n        }\n        this._isInitialized = true;\n      });\n      return this._initializationPromise;\n    }\n    /**\n     * If the persistence is changed in another window, the user manager will let us know\n     */\n    async _onStorageEvent() {\n      if (this._deleted) {\n        return;\n      }\n      const user = await this.assertedPersistence.getCurrentUser();\n      if (!this.currentUser && !user) {\n        // No change, do nothing (was signed out and remained signed out).\n        return;\n      }\n      // If the same user is to be synchronized.\n      if (this.currentUser && user && this.currentUser.uid === user.uid) {\n        // Data update, simply copy data changes.\n        this._currentUser._assign(user);\n        // If tokens changed from previous user tokens, this will trigger\n        // notifyAuthListeners_.\n        await this.currentUser.getIdToken();\n        return;\n      }\n      // Update current Auth state. Either a new login or logout.\n      // Skip blocking callbacks, they should not apply to a change in another tab.\n      await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n    }\n    async initializeCurrentUserFromIdToken(idToken) {\n      try {\n        const response = await getAccountInfo(this, {\n          idToken\n        });\n        const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n        await this.directlySetCurrentUser(user);\n      } catch (err) {\n        console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n        await this.directlySetCurrentUser(null);\n      }\n    }\n    async initializeCurrentUser(popupRedirectResolver) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        const idToken = this.app.settings.authIdToken;\n        if (idToken) {\n          // Start the auth operation in the next tick to allow a moment for the customer's app to\n          // attach an emulator, if desired.\n          return new Promise(resolve => {\n            setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n          });\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      // First check to see if we have a pending redirect event.\n      const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();\n      let futureCurrentUser = previouslyStoredUser;\n      let needsTocheckMiddleware = false;\n      if (popupRedirectResolver && this.config.authDomain) {\n        await this.getOrInitRedirectPersistenceManager();\n        const redirectUserEventId = this.redirectUser?._redirectEventId;\n        const storedUserEventId = futureCurrentUser?._redirectEventId;\n        const result = await this.tryRedirectSignIn(popupRedirectResolver);\n        // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n        // matches the redirect user, then we want to initially sign in with the\n        // new user object from result.\n        // TODO(samgho): More thoroughly test all of this\n        if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && result?.user) {\n          futureCurrentUser = result.user;\n          needsTocheckMiddleware = true;\n        }\n      }\n      // If no user in persistence, there is no current user. Set to null.\n      if (!futureCurrentUser) {\n        return this.directlySetCurrentUser(null);\n      }\n      if (!futureCurrentUser._redirectEventId) {\n        // This isn't a redirect link operation, we can reload and bail.\n        // First though, ensure that we check the middleware is happy.\n        if (needsTocheckMiddleware) {\n          try {\n            await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n          } catch (e) {\n            futureCurrentUser = previouslyStoredUser;\n            // We know this is available since the bit is only set when the\n            // resolver is available\n            this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n          }\n        }\n        if (futureCurrentUser) {\n          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      await this.getOrInitRedirectPersistenceManager();\n      // If the redirect user's event ID matches the current user's event ID,\n      // DO NOT reload the current user, otherwise they'll be cleared from storage.\n      // This is important for the reauthenticateWithRedirect() flow.\n      if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n        return this.directlySetCurrentUser(futureCurrentUser);\n      }\n      return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n    }\n    async tryRedirectSignIn(redirectResolver) {\n      // The redirect user needs to be checked (and signed in if available)\n      // during auth initialization. All of the normal sign in and link/reauth\n      // flows call back into auth and push things onto the promise queue. We\n      // need to await the result of the redirect sign in *inside the promise\n      // queue*. This presents a problem: we run into deadlock. See:\n      //    ┌> [Initialization] ─────┐\n      //    ┌> [<other queue tasks>] │\n      //    └─ [getRedirectResult] <─┘\n      //    where [] are tasks on the queue and arrows denote awaits\n      // Initialization will never complete because it's waiting on something\n      // that's waiting for initialization to complete!\n      //\n      // Instead, this method calls getRedirectResult() (stored in\n      // _completeRedirectFn) with an optional parameter that instructs all of\n      // the underlying auth operations to skip anything that mutates auth state.\n      let result = null;\n      try {\n        // We know this._popupRedirectResolver is set since redirectResolver\n        // is passed in. The _completeRedirectFn expects the unwrapped extern.\n        result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n      } catch (e) {\n        // Swallow any errors here; the code can retrieve them in\n        // getRedirectResult().\n        await this._setRedirectUser(null);\n      }\n      return result;\n    }\n    async reloadAndSetCurrentUserOrClear(user) {\n      try {\n        await _reloadWithoutSaving(user);\n      } catch (e) {\n        if (e?.code !== `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          // Something's wrong with the user's token. Log them out and remove\n          // them from storage\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      return this.directlySetCurrentUser(user);\n    }\n    useDeviceLanguage() {\n      this.languageCode = _getUserLanguage();\n    }\n    async _delete() {\n      this._deleted = true;\n    }\n    async updateCurrentUser(userExtern) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // The public updateCurrentUser method needs to make a copy of the user,\n      // and also check that the project matches\n      const user = userExtern ? (0, _firebaseUtil.getModularInstance)(userExtern) : null;\n      if (user) {\n        _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n      }\n      return this._updateCurrentUser(user && user._clone(this));\n    }\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n      if (this._deleted) {\n        return;\n      }\n      if (user) {\n        _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n      }\n      if (!skipBeforeStateCallbacks) {\n        await this.beforeStateQueue.runMiddleware(user);\n      }\n      return this.queue(async () => {\n        await this.directlySetCurrentUser(user);\n        this.notifyAuthListeners();\n      });\n    }\n    async signOut() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // Run first, to block _setRedirectUser() if any callbacks fail.\n      await this.beforeStateQueue.runMiddleware(null);\n      // Clear the redirect user when signOut is called\n      if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n        await this._setRedirectUser(null);\n      }\n      // Prevent callbacks from being called again in _updateCurrentUser, as\n      // they were already called in the first line.\n      return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);\n    }\n    setPersistence(persistence) {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      return this.queue(async () => {\n        await this.assertedPersistence.setPersistence(_getInstance(persistence));\n      });\n    }\n    _getRecaptchaConfig() {\n      if (this.tenantId == null) {\n        return this._agentRecaptchaConfig;\n      } else {\n        return this._tenantRecaptchaConfigs[this.tenantId];\n      }\n    }\n    async validatePassword(password) {\n      if (!this._getPasswordPolicyInternal()) {\n        await this._updatePasswordPolicy();\n      }\n      // Password policy will be defined after fetching.\n      const passwordPolicy = this._getPasswordPolicyInternal();\n      // Check that the policy schema version is supported by the SDK.\n      // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n      if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n        return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n      }\n      return passwordPolicy.validatePassword(password);\n    }\n    _getPasswordPolicyInternal() {\n      if (this.tenantId === null) {\n        return this._projectPasswordPolicy;\n      } else {\n        return this._tenantPasswordPolicies[this.tenantId];\n      }\n    }\n    async _updatePasswordPolicy() {\n      const response = await _getPasswordPolicy(this);\n      const passwordPolicy = new PasswordPolicyImpl(response);\n      if (this.tenantId === null) {\n        this._projectPasswordPolicy = passwordPolicy;\n      } else {\n        this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n      }\n    }\n    _getPersistenceType() {\n      return this.assertedPersistence.persistence.type;\n    }\n    _getPersistence() {\n      return this.assertedPersistence.persistence;\n    }\n    _updateErrorMap(errorMap) {\n      this._errorFactory = new _firebaseUtil.ErrorFactory('auth', 'Firebase', errorMap());\n    }\n    onAuthStateChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n    }\n    beforeAuthStateChanged(callback, onAbort) {\n      return this.beforeStateQueue.pushCallback(callback, onAbort);\n    }\n    onIdTokenChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n    }\n    authStateReady() {\n      return new Promise((resolve, reject) => {\n        if (this.currentUser) {\n          resolve();\n        } else {\n          const unsubscribe = this.onAuthStateChanged(() => {\n            unsubscribe();\n            resolve();\n          }, reject);\n        }\n      });\n    }\n    /**\n     * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n     */\n    async revokeAccessToken(token) {\n      if (this.currentUser) {\n        const idToken = await this.currentUser.getIdToken();\n        // Generalize this to accept other providers once supported.\n        const request = {\n          providerId: 'apple.com',\n          tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n          token,\n          idToken\n        };\n        if (this.tenantId != null) {\n          request.tenantId = this.tenantId;\n        }\n        await revokeToken(this, request);\n      }\n    }\n    toJSON() {\n      return {\n        apiKey: this.config.apiKey,\n        authDomain: this.config.authDomain,\n        appName: this.name,\n        currentUser: this._currentUser?.toJSON()\n      };\n    }\n    async _setRedirectUser(user, popupRedirectResolver) {\n      const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n      return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n    }\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n      if (!this.redirectPersistenceManager) {\n        const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n        _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n        this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();\n      }\n      return this.redirectPersistenceManager;\n    }\n    async _redirectUserForId(id) {\n      // Make sure we've cleared any pending persistence actions if we're not in\n      // the initializer\n      if (this._isInitialized) {\n        await this.queue(async () => {});\n      }\n      if (this._currentUser?._redirectEventId === id) {\n        return this._currentUser;\n      }\n      if (this.redirectUser?._redirectEventId === id) {\n        return this.redirectUser;\n      }\n      return null;\n    }\n    async _persistUserIfCurrent(user) {\n      if (user === this.currentUser) {\n        return this.queue(async () => this.directlySetCurrentUser(user));\n      }\n    }\n    /** Notifies listeners only if the user is current */\n    _notifyListenersIfCurrent(user) {\n      if (user === this.currentUser) {\n        this.notifyAuthListeners();\n      }\n    }\n    _key() {\n      return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n    }\n    _startProactiveRefresh() {\n      this.isProactiveRefreshEnabled = true;\n      if (this.currentUser) {\n        this._currentUser._startProactiveRefresh();\n      }\n    }\n    _stopProactiveRefresh() {\n      this.isProactiveRefreshEnabled = false;\n      if (this.currentUser) {\n        this._currentUser._stopProactiveRefresh();\n      }\n    }\n    /** Returns the current user cast as the internal type */\n    get _currentUser() {\n      return this.currentUser;\n    }\n    notifyAuthListeners() {\n      if (!this._isInitialized) {\n        return;\n      }\n      this.idTokenSubscription.next(this.currentUser);\n      const currentUid = this.currentUser?.uid ?? null;\n      if (this.lastNotifiedUid !== currentUid) {\n        this.lastNotifiedUid = currentUid;\n        this.authStateSubscription.next(this.currentUser);\n      }\n    }\n    registerStateListener(subscription, nextOrObserver, error, completed) {\n      if (this._deleted) {\n        return () => {};\n      }\n      const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n      let isUnsubscribed = false;\n      const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n      _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // The callback needs to be called asynchronously per the spec.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      promise.then(() => {\n        if (isUnsubscribed) {\n          return;\n        }\n        cb(this.currentUser);\n      });\n      if (typeof nextOrObserver === 'function') {\n        const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      } else {\n        const unsubscribe = subscription.addObserver(nextOrObserver);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      }\n    }\n    /**\n     * Unprotected (from race conditions) method to set the current user. This\n     * should only be called from within a queued callback. This is necessary\n     * because the queue shouldn't rely on another queued callback.\n     */\n    async directlySetCurrentUser(user) {\n      if (this.currentUser && this.currentUser !== user) {\n        this._currentUser._stopProactiveRefresh();\n      }\n      if (user && this.isProactiveRefreshEnabled) {\n        user._startProactiveRefresh();\n      }\n      this.currentUser = user;\n      if (user) {\n        await this.assertedPersistence.setCurrentUser(user);\n      } else {\n        await this.assertedPersistence.removeCurrentUser();\n      }\n    }\n    queue(action) {\n      // In case something errors, the callback still should be called in order\n      // to keep the promise chain alive\n      this.operations = this.operations.then(action, action);\n      return this.operations;\n    }\n    get assertedPersistence() {\n      _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.persistenceManager;\n    }\n    _logFramework(framework) {\n      if (!framework || this.frameworks.includes(framework)) {\n        return;\n      }\n      this.frameworks.push(framework);\n      // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n      // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n      this.frameworks.sort();\n      this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n    }\n    _getFrameworks() {\n      return this.frameworks;\n    }\n    async _getAdditionalHeaders() {\n      // Additional headers on every request\n      const headers = {\n        [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n      };\n      if (this.app.options.appId) {\n        headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n      }\n      // If the heartbeat service exists, add the heartbeat string\n      const heartbeatsHeader = await this.heartbeatServiceProvider.getImmediate({\n        optional: true\n      })?.getHeartbeatsHeader();\n      if (heartbeatsHeader) {\n        headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n      }\n      // If the App Check service exists, add the App Check token in the headers\n      const appCheckToken = await this._getAppCheckToken();\n      if (appCheckToken) {\n        headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n      }\n      return headers;\n    }\n    async _getAppCheckToken() {\n      if ((0, _firebaseApp._isFirebaseServerApp)(this.app) && this.app.settings.appCheckToken) {\n        return this.app.settings.appCheckToken;\n      }\n      const appCheckTokenResult = await this.appCheckServiceProvider.getImmediate({\n        optional: true\n      })?.getToken();\n      if (appCheckTokenResult?.error) {\n        // Context: appCheck.getToken() will never throw even if an error happened.\n        // In the error case, a dummy token will be returned along with an error field describing\n        // the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n        _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n      }\n      return appCheckTokenResult?.token;\n    }\n  }\n  /**\n   * Method to be used to cast down to our private implementation of Auth.\n   * It will also handle unwrapping from the compat type if necessary\n   *\n   * @param auth Auth object passed in from developer\n   */\n  function _castAuth(auth) {\n    return (0, _firebaseUtil.getModularInstance)(auth);\n  }\n  /** Helper class to wrap subscriber logic */\n  class Subscription {\n    constructor(auth) {\n      this.auth = auth;\n      this.observer = null;\n      this.addObserver = (0, _firebaseUtil.createSubscribe)(observer => this.observer = observer);\n    }\n    get next() {\n      _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.observer.next.bind(this.observer);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  let externalJSProvider = {\n    async loadJS() {\n      throw new Error('Unable to load external scripts');\n    },\n    recaptchaV2Script: '',\n    recaptchaEnterpriseScript: '',\n    gapiScript: ''\n  };\n  function _setExternalJSProvider(p) {\n    externalJSProvider = p;\n  }\n  function _loadJS(url) {\n    return externalJSProvider.loadJS(url);\n  }\n  function _recaptchaV2ScriptUrl() {\n    return externalJSProvider.recaptchaV2Script;\n  }\n  function _recaptchaEnterpriseScriptUrl() {\n    return externalJSProvider.recaptchaEnterpriseScript;\n  }\n  function _gapiScriptUrl() {\n    return externalJSProvider.gapiScript;\n  }\n  function _generateCallbackName(prefix) {\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const _SOLVE_TIME_MS = 500;\n  const _EXPIRATION_TIME_MS = 60000;\n  const _WIDGET_ID_START = 1000000000000;\n  class MockReCaptcha {\n    constructor(auth) {\n      this.auth = auth;\n      this.counter = _WIDGET_ID_START;\n      this._widgets = new Map();\n    }\n    render(container, parameters) {\n      const id = this.counter;\n      this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n      this.counter++;\n      return id;\n    }\n    reset(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      void this._widgets.get(id)?.delete();\n      this._widgets.delete(id);\n    }\n    getResponse(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      return this._widgets.get(id)?.getResponse() || '';\n    }\n    async execute(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      void this._widgets.get(id)?.execute();\n      return '';\n    }\n  }\n  class MockGreCAPTCHATopLevel {\n    constructor() {\n      this.enterprise = new MockGreCAPTCHA();\n    }\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n  class MockGreCAPTCHA {\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n  class MockWidget {\n    constructor(containerOrId, appName, params) {\n      this.params = params;\n      this.timerId = null;\n      this.deleted = false;\n      this.responseToken = null;\n      this.clickHandler = () => {\n        this.execute();\n      };\n      const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, {\n        appName\n      });\n      this.container = container;\n      this.isVisible = this.params.size !== 'invisible';\n      if (this.isVisible) {\n        this.execute();\n      } else {\n        this.container.addEventListener('click', this.clickHandler);\n      }\n    }\n    getResponse() {\n      this.checkIfDeleted();\n      return this.responseToken;\n    }\n    delete() {\n      this.checkIfDeleted();\n      this.deleted = true;\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n        this.timerId = null;\n      }\n      this.container.removeEventListener('click', this.clickHandler);\n    }\n    execute() {\n      this.checkIfDeleted();\n      if (this.timerId) {\n        return;\n      }\n      this.timerId = window.setTimeout(() => {\n        this.responseToken = generateRandomAlphaNumericString(50);\n        const {\n          callback,\n          'expired-callback': expiredCallback\n        } = this.params;\n        if (callback) {\n          try {\n            callback(this.responseToken);\n          } catch (e) {}\n        }\n        this.timerId = window.setTimeout(() => {\n          this.timerId = null;\n          this.responseToken = null;\n          if (expiredCallback) {\n            try {\n              expiredCallback();\n            } catch (e) {}\n          }\n          if (this.isVisible) {\n            this.execute();\n          }\n        }, _EXPIRATION_TIME_MS);\n      }, _SOLVE_TIME_MS);\n    }\n    checkIfDeleted() {\n      if (this.deleted) {\n        throw new Error('reCAPTCHA mock was already deleted!');\n      }\n    }\n  }\n  function generateRandomAlphaNumericString(len) {\n    const chars = [];\n    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (let i = 0; i < len; i++) {\n      chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n    }\n    return chars.join('');\n  }\n\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\n  const FAKE_TOKEN = 'NO_RECAPTCHA';\n  class RecaptchaEnterpriseVerifier {\n    /**\n     *\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     */\n    constructor(authExtern) {\n      /**\n       * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n       */\n      this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n      this.auth = _castAuth(authExtern);\n    }\n    /**\n     * Executes the verification process.\n     *\n     * @returns A Promise for a token that can be used to assert the validity of a request.\n     */\n    async verify(action = 'verify', forceRefresh = false) {\n      async function retrieveSiteKey(auth) {\n        if (!forceRefresh) {\n          if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n            return auth._agentRecaptchaConfig.siteKey;\n          }\n          if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n            return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n          }\n        }\n        return new Promise(async (resolve, reject) => {\n          getRecaptchaConfig(auth, {\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }).then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          }).catch(error => {\n            reject(error);\n          });\n        });\n      }\n      function retrieveRecaptchaToken(siteKey, resolve, reject) {\n        const grecaptcha = window.grecaptcha;\n        if (isEnterprise(grecaptcha)) {\n          grecaptcha.enterprise.ready(() => {\n            grecaptcha.enterprise.execute(siteKey, {\n              action\n            }).then(token => {\n              resolve(token);\n            }).catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n          });\n        } else {\n          reject(Error('No reCAPTCHA enterprise script loaded.'));\n        }\n      }\n      // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n      if (this.auth.settings.appVerificationDisabledForTesting) {\n        const mockRecaptcha = new MockGreCAPTCHATopLevel();\n        return mockRecaptcha.execute('siteKey', {\n          action: 'verify'\n        });\n      }\n      return new Promise((resolve, reject) => {\n        retrieveSiteKey(this.auth).then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (typeof window === 'undefined') {\n              reject(new Error('RecaptchaVerifier is only supported in browser'));\n              return;\n            }\n            let url = _recaptchaEnterpriseScriptUrl();\n            if (url.length !== 0) {\n              url += siteKey;\n            }\n            _loadJS(url).then(() => {\n              retrieveRecaptchaToken(siteKey, resolve, reject);\n            }).catch(error => {\n              reject(error);\n            });\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n  async function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\n    let captchaResponse;\n    if (isFakeToken) {\n      captchaResponse = FAKE_TOKEN;\n    } else {\n      try {\n        captchaResponse = await verifier.verify(action);\n      } catch (error) {\n        captchaResponse = await verifier.verify(action, true);\n      }\n    }\n    const newRequest = Object.assign({}, request);\n    if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ || action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n      if ('phoneEnrollmentInfo' in newRequest) {\n        const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n        const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneEnrollmentInfo': {\n            phoneNumber,\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      } else if ('phoneSignInInfo' in newRequest) {\n        const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneSignInInfo': {\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      }\n      return newRequest;\n    }\n    if (!isCaptchaResp) {\n      Object.assign(newRequest, {\n        captchaResponse\n      });\n    } else {\n      Object.assign(newRequest, {\n        'captchaResp': captchaResponse\n      });\n    }\n    Object.assign(newRequest, {\n      'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    });\n    Object.assign(newRequest, {\n      'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    return newRequest;\n  }\n  async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n    if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return actionMethod(authInstance, request).catch(async error => {\n          if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n            console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n            return actionMethod(authInstance, requestWithRecaptcha);\n          } else {\n            return Promise.reject(error);\n          }\n        });\n      }\n    } else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);\n        return actionMethod(authInstance, requestWithRecaptcha).catch(async error => {\n          if (authInstance._getRecaptchaConfig()?.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n            // AUDIT mode\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` || error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n              console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n              // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n              // check fails.\n              // Fallback to reCAPTCHA v2 flow.\n              const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n              // isCaptchaResp\n              true // isFakeToken\n              );\n              // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n              return actionMethod(authInstance, requestWithRecaptchaFields);\n            }\n          }\n          // ENFORCE mode or AUDIT mode with any other error.\n          return Promise.reject(error);\n        });\n      } else {\n        // Do reCAPTCHA v2 flow.\n        const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n        // isCaptchaResp\n        true // isFakeToken\n        );\n        // This will call the PhoneApiCaller to fetch and inject v2 token.\n        return actionMethod(authInstance, requestWithRecaptchaFields);\n      }\n    } else {\n      return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n    }\n  }\n  async function _initializeRecaptchaConfig(auth) {\n    const authInternal = _castAuth(auth);\n    const response = await getRecaptchaConfig(authInternal, {\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n      version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    const config = new RecaptchaConfig(response);\n    if (authInternal.tenantId == null) {\n      authInternal._agentRecaptchaConfig = config;\n    } else {\n      authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n    }\n    if (config.isAnyProviderEnabled()) {\n      const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n      void verifier.verify();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Initializes an {@link Auth} instance with fine-grained control over\n   * {@link Dependencies}.\n   *\n   * @remarks\n   *\n   * This function allows more control over the {@link Auth} instance than\n   * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n   * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n   * initialize Auth and works for most use cases. Use `initializeAuth` if you\n   * need control over which persistence layer is used, or to minimize bundle\n   * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n   *\n   * For example, if your app only uses anonymous accounts and you only want\n   * accounts saved for the current session, initialize `Auth` with:\n   *\n   * ```js\n   * const auth = initializeAuth(app, {\n   *   persistence: browserSessionPersistence,\n   *   popupRedirectResolver: undefined,\n   * });\n   * ```\n   *\n   * @public\n   */\n  function initializeAuth(app, deps) {\n    const provider = (0, _firebaseApp._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      const auth = provider.getImmediate();\n      const initialOptions = provider.getOptions();\n      if ((0, _firebaseUtil.deepEqual)(initialOptions, deps ?? {})) {\n        return auth;\n      } else {\n        _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n      }\n    }\n    const auth = provider.initialize({\n      options: deps\n    });\n    return auth;\n  }\n  function _initializeAuthInstance(auth, deps) {\n    const persistence = deps?.persistence || [];\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n    if (deps?.errorMap) {\n      auth._updateErrorMap(deps.errorMap);\n    }\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n  }\n\n  /**\n   * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n   * Firebase Auth services.\n   *\n   * @remarks\n   * This must be called synchronously immediately following the first call to\n   * {@link initializeAuth}.  Do not use with production credentials as emulator\n   * traffic is not encrypted.\n   *\n   *\n   * @example\n   * ```javascript\n   * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n   * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n   * `true` to disable the warning banner attached to the DOM.\n   *\n   * @public\n   */\n  function connectAuthEmulator(auth, url, options) {\n    const authInternal = _castAuth(auth);\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n    const disableWarnings = !!options?.disableWarnings;\n    const protocol = extractProtocol(url);\n    const {\n      host,\n      port\n    } = extractHostAndPort(url);\n    const portStr = port === null ? '' : `:${port}`;\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    const emulator = {\n      url: `${protocol}//${host}${portStr}/`\n    };\n    const emulatorConfig = Object.freeze({\n      host,\n      port,\n      protocol: protocol.replace(':', ''),\n      options: Object.freeze({\n        disableWarnings\n      })\n    });\n    // There are a few scenarios to guard against if the Auth instance has already started:\n    if (!authInternal._canInitEmulator) {\n      // Applications may not initialize the emulator for the first time if Auth has already started\n      // to make network requests.\n      _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // Applications may not alter the configuration of the emulator (aka pass a different config)\n      // once Auth has started to make network requests.\n      _assert((0, _firebaseUtil.deepEqual)(emulator, authInternal.config.emulator) && (0, _firebaseUtil.deepEqual)(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n      // connections, so long as the config matches the existing config. This results in a no-op.\n      return;\n    }\n    authInternal.config.emulator = emulator;\n    authInternal.emulatorConfig = emulatorConfig;\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    // Workaround to get cookies in Firebase Studio\n    if ((0, _firebaseUtil.isCloudWorkstation)(host)) {\n      void (0, _firebaseUtil.pingServer)(`${protocol}//${host}${portStr}`);\n      (0, _firebaseUtil.updateEmulatorBanner)('Auth', true);\n    } else if (!disableWarnings) {\n      emitEmulatorWarning();\n    }\n  }\n  function extractProtocol(url) {\n    const protocolEnd = url.indexOf(':');\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n  }\n  function extractHostAndPort(url) {\n    const protocol = extractProtocol(url);\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) {\n      return {\n        host: '',\n        port: null\n      };\n    }\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n      const host = bracketedIPv6[1];\n      return {\n        host,\n        port: parsePort(hostAndPort.substr(host.length + 1))\n      };\n    } else {\n      const [host, port] = hostAndPort.split(':');\n      return {\n        host,\n        port: parsePort(port)\n      };\n    }\n  }\n  function parsePort(portStr) {\n    if (!portStr) {\n      return null;\n    }\n    const port = Number(portStr);\n    if (isNaN(port)) {\n      return null;\n    }\n    return port;\n  }\n  function emitEmulatorWarning() {\n    function attachBanner() {\n      const el = document.createElement('p');\n      const sty = el.style;\n      el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n      sty.position = 'fixed';\n      sty.width = '100%';\n      sty.backgroundColor = '#ffffff';\n      sty.border = '.1em solid #000000';\n      sty.color = '#b50000';\n      sty.bottom = '0px';\n      sty.left = '0px';\n      sty.margin = '0px';\n      sty.zIndex = '10000';\n      sty.textAlign = 'center';\n      el.classList.add('firebase-emulator-warning');\n      document.body.appendChild(el);\n    }\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\n      console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n    }\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', attachBanner);\n      } else {\n        attachBanner();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by an {@link AuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class AuthCredential {\n    /** @internal */\n    constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    signInMethod) {\n      this.providerId = providerId;\n      this.signInMethod = signInMethod;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getIdTokenResponse(_auth) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _linkToIdToken(_auth, _idToken) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getReauthenticationResolver(_auth) {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function resetPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function updateEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  // Used for linking an email/password account to an existing idToken. Uses the same request/response\n  // format as updateEmailPassword.\n  async function linkEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n  }\n  async function applyActionCode$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithPassword(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function sendOobCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n  }\n  async function sendEmailVerification$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendPasswordResetEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendSignInLinkToEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function verifyAndChangeEmail(auth, request) {\n    return sendOobCode(auth, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithEmailLink$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n  async function signInWithEmailLinkForLinking(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n   * {@link ProviderId}.PASSWORD\n   *\n   * @remarks\n   * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @public\n   */\n  class EmailAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(/** @internal */\n    _email, /** @internal */\n    _password, signInMethod, /** @internal */\n    _tenantId = null) {\n      super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\n      this._email = _email;\n      this._password = _password;\n      this._tenantId = _tenantId;\n    }\n    /** @internal */\n    static _fromEmailAndPassword(email, password) {\n      return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n    }\n    /** @internal */\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\n      return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      return {\n        email: this._email,\n        password: this._password,\n        signInMethod: this.signInMethod,\n        tenantId: this._tenantId\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n     *\n     * @param json - Either `object` or the stringified representation of the object. When string is\n     * provided, `JSON.parse` would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      if (obj?.email && obj?.password) {\n        if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n          return this._fromEmailAndPassword(obj.email, obj.password);\n        } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n          return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n        }\n      }\n      return null;\n    }\n    /** @internal */\n    async _getIdTokenResponse(auth) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLink$1(auth, {\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    async _linkToIdToken(auth, idToken) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            idToken,\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLinkForLinking(auth, {\n            idToken,\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return this._getIdTokenResponse(auth);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithIdp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI$1 = 'http://localhost';\n  /**\n   * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class OAuthCredential extends AuthCredential {\n    constructor() {\n      super(...arguments);\n      this.pendingToken = null;\n    }\n    /** @internal */\n    static _fromParams(params) {\n      const cred = new OAuthCredential(params.providerId, params.signInMethod);\n      if (params.idToken || params.accessToken) {\n        // OAuth 2 and either ID token or access token.\n        if (params.idToken) {\n          cred.idToken = params.idToken;\n        }\n        if (params.accessToken) {\n          cred.accessToken = params.accessToken;\n        }\n        // Add nonce if available and no pendingToken is present.\n        if (params.nonce && !params.pendingToken) {\n          cred.nonce = params.nonce;\n        }\n        if (params.pendingToken) {\n          cred.pendingToken = params.pendingToken;\n        }\n      } else if (params.oauthToken && params.oauthTokenSecret) {\n        // OAuth 1 and OAuth token with token secret\n        cred.accessToken = params.oauthToken;\n        cred.secret = params.oauthTokenSecret;\n      } else {\n        _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      return cred;\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        idToken: this.idToken,\n        accessToken: this.accessToken,\n        secret: this.secret,\n        nonce: this.nonce,\n        pendingToken: this.pendingToken,\n        providerId: this.providerId,\n        signInMethod: this.signInMethod\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n          providerId,\n          signInMethod\n        } = obj,\n        rest = (0, _objectWithoutPropertiesLoose.default)(obj, _excluded3);\n      if (!providerId || !signInMethod) {\n        return null;\n      }\n      const cred = new OAuthCredential(providerId, signInMethod);\n      cred.idToken = rest.idToken || undefined;\n      cred.accessToken = rest.accessToken || undefined;\n      cred.secret = rest.secret;\n      cred.nonce = rest.nonce;\n      cred.pendingToken = rest.pendingToken || null;\n      return cred;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    buildRequest() {\n      const request = {\n        requestUri: IDP_REQUEST_URI$1,\n        returnSecureToken: true\n      };\n      if (this.pendingToken) {\n        request.pendingToken = this.pendingToken;\n      } else {\n        const postBody = {};\n        if (this.idToken) {\n          postBody['id_token'] = this.idToken;\n        }\n        if (this.accessToken) {\n          postBody['access_token'] = this.accessToken;\n        }\n        if (this.secret) {\n          postBody['oauth_token_secret'] = this.secret;\n        }\n        postBody['providerId'] = this.providerId;\n        if (this.nonce && !this.pendingToken) {\n          postBody['nonce'] = this.nonce;\n        }\n        request.postBody = (0, _firebaseUtil.querystring)(postBody);\n      }\n      return request;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function sendPhoneVerificationCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\n  }\n  async function signInWithPhoneNumber$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n  }\n  async function linkWithPhoneNumber$1(auth, request) {\n    const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n    if (response.temporaryProof) {\n      throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n    }\n    return response;\n  }\n  const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n  };\n  async function verifyPhoneNumberForExisting(auth, request) {\n    const apiRequest = Object.assign({}, request, {\n      operation: 'REAUTH'\n    });\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Represents the credentials returned by {@link PhoneAuthProvider}.\n   *\n   * @public\n   */\n  class PhoneAuthCredential extends AuthCredential {\n    constructor(params) {\n      super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\n      this.params = params;\n    }\n    /** @internal */\n    static _fromVerification(verificationId, verificationCode) {\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode\n      });\n    }\n    /** @internal */\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\n      return new PhoneAuthCredential({\n        phoneNumber,\n        temporaryProof\n      });\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      return linkWithPhoneNumber$1(auth, Object.assign({\n        idToken\n      }, this._makeVerificationRequest()));\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _makeVerificationRequest() {\n      const {\n        temporaryProof,\n        phoneNumber,\n        verificationId,\n        verificationCode\n      } = this.params;\n      if (temporaryProof && phoneNumber) {\n        return {\n          temporaryProof,\n          phoneNumber\n        };\n      }\n      return {\n        sessionInfo: verificationId,\n        code: verificationCode\n      };\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      const obj = {\n        providerId: this.providerId\n      };\n      if (this.params.phoneNumber) {\n        obj.phoneNumber = this.params.phoneNumber;\n      }\n      if (this.params.temporaryProof) {\n        obj.temporaryProof = this.params.temporaryProof;\n      }\n      if (this.params.verificationCode) {\n        obj.verificationCode = this.params.verificationCode;\n      }\n      if (this.params.verificationId) {\n        obj.verificationId = this.params.verificationId;\n      }\n      return obj;\n    }\n    /** Generates a phone credential based on a plain object or a JSON string. */\n    static fromJSON(json) {\n      if (typeof json === 'string') {\n        json = JSON.parse(json);\n      }\n      const {\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      } = json;\n      if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n        return null;\n      }\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      });\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Maps the mode string in action code URL to Action Code Info operation.\n   *\n   * @param mode\n   */\n  function parseMode(mode) {\n    switch (mode) {\n      case 'recoverEmail':\n        return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n      case 'resetPassword':\n        return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n      case 'signIn':\n        return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n      case 'verifyEmail':\n        return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n      case 'verifyAndChangeEmail':\n        return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n      case 'revertSecondFactorAddition':\n        return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n      default:\n        return null;\n    }\n  }\n  /**\n   * Helper to parse FDL links\n   *\n   * @param url\n   */\n  function parseDeepLink(url) {\n    const link = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(url))['link'];\n    // Double link case (automatic redirect).\n    const doubleDeepLink = link ? (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(link))['deep_link_id'] : null;\n    // iOS custom scheme links.\n    const iOSDeepLink = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(url))['deep_link_id'];\n    const iOSDoubleDeepLink = iOSDeepLink ? (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(iOSDeepLink))['link'] : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n  }\n  /**\n   * A utility class to parse email action URLs such as password reset, email verification,\n   * email link sign in, etc.\n   *\n   * @public\n   */\n  class ActionCodeURL {\n    /**\n     * @param actionLink - The link from which to extract the URL.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @internal\n     */\n    constructor(actionLink) {\n      const searchParams = (0, _firebaseUtil.querystringDecode)((0, _firebaseUtil.extractQuerystring)(actionLink));\n      const apiKey = searchParams[\"apiKey\" /* QueryField.API_KEY */] ?? null;\n      const code = searchParams[\"oobCode\" /* QueryField.CODE */] ?? null;\n      const operation = parseMode(searchParams[\"mode\" /* QueryField.MODE */] ?? null);\n      // Validate API key, code and mode.\n      _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.apiKey = apiKey;\n      this.operation = operation;\n      this.code = code;\n      this.continueUrl = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */] ?? null;\n      this.languageCode = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */] ?? null;\n      this.tenantId = searchParams[\"tenantId\" /* QueryField.TENANT_ID */] ?? null;\n    }\n    /**\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n     * otherwise returns null.\n     *\n     * @param link  - The email action link string.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @public\n     */\n    static parseLink(link) {\n      const actionLink = parseDeepLink(link);\n      try {\n        return new ActionCodeURL(actionLink);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if\n   * the link is valid, otherwise returns null.\n   *\n   * @public\n   */\n  function parseActionCodeURL(link) {\n    return ActionCodeURL.parseLink(link);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating {@link EmailAuthCredential}.\n   *\n   * @public\n   */\n  class EmailAuthProvider {\n    constructor() {\n      /**\n       * Always set to {@link ProviderId}.PASSWORD, even for email link.\n       */\n      this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and password.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credential(email, password);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n     * ```\n     *\n     * @param email - Email address.\n     * @param password - User account password.\n     * @returns The auth provider credential.\n     */\n    static credential(email, password) {\n      return EmailAuthCredential._fromEmailAndPassword(email, password);\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n     * email link operation.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * await sendSignInLinkToEmail(auth, email);\n     * // Obtain emailLink from user.\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n     * ```\n     *\n     * @param auth - The {@link Auth} instance used to verify the link.\n     * @param email - Email address.\n     * @param emailLink - Sign-in email link.\n     * @returns - The auth provider credential.\n     */\n    static credentialWithLink(email, emailLink) {\n      const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n      _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n    }\n  }\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  EmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The base class for all Federated providers (OAuth (including OIDC), SAML).\n   *\n   * This class is not meant to be instantiated directly.\n   *\n   * @public\n   */\n  class FederatedAuthProvider {\n    /**\n     * Constructor for generic OAuth providers.\n     *\n     * @param providerId - Provider for which credentials should be generated.\n     */\n    constructor(providerId) {\n      this.providerId = providerId;\n      /** @internal */\n      this.defaultLanguageCode = null;\n      /** @internal */\n      this.customParameters = {};\n    }\n    /**\n     * Set the language gode.\n     *\n     * @param languageCode - language code\n     */\n    setDefaultLanguage(languageCode) {\n      this.defaultLanguageCode = languageCode;\n    }\n    /**\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n     * operations.\n     *\n     * @remarks\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n     *\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n     */\n    setCustomParameters(customOAuthParameters) {\n      this.customParameters = customOAuthParameters;\n      return this;\n    }\n    /**\n     * Retrieve the current list of {@link CustomParameters}.\n     */\n    getCustomParameters() {\n      return this.customParameters;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Common code to all OAuth providers. This is separate from the\n   * {@link OAuthProvider} so that child providers (like\n   * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n   * Instead, they rely on a static `credential` method.\n   */\n  class BaseOAuthProvider extends FederatedAuthProvider {\n    constructor() {\n      super(...arguments);\n      /** @internal */\n      this.scopes = [];\n    }\n    /**\n     * Add an OAuth scope to the credential.\n     *\n     * @param scope - Provider OAuth scope to add.\n     */\n    addScope(scope) {\n      // If not already added, add scope to list.\n      if (!this.scopes.includes(scope)) {\n        this.scopes.push(scope);\n      }\n      return this;\n    }\n    /**\n     * Retrieve the current list of OAuth scopes.\n     */\n    getScopes() {\n      return [...this.scopes];\n    }\n  }\n  /**\n   * Provider for generating generic {@link OAuthCredential}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new OAuthProvider('google.com');\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a OAuth Access Token for the provider.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a OAuth Access Token for the provider.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class OAuthProvider extends BaseOAuthProvider {\n    /**\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return OAuthCredential._fromParams(obj);\n    }\n    /**\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n     *\n     * @remarks\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n     * the raw nonce must match the nonce field in the ID token.\n     *\n     * @example\n     * ```javascript\n     * // `googleUser` from the onsuccess Google Sign In callback.\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\n     * const provider = new OAuthProvider('google.com');\n     * const credential = provider.credential({\n     *   idToken: googleUser.getAuthResponse().id_token,\n     * });\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param params - Either the options object containing the ID token, access token and raw nonce\n     * or the ID token string.\n     */\n    credential(params) {\n      return this._credential(Object.assign({}, params, {\n        nonce: params.rawNonce\n      }));\n    }\n    /** An internal credential method that accepts more permissive options */\n    _credential(params) {\n      _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      // For OAuthCredential, sign in method is same as providerId.\n      return OAuthCredential._fromParams(Object.assign({}, params, {\n        providerId: this.providerId,\n        signInMethod: this.providerId\n      }));\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n    }\n    static oauthCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce,\n        providerId\n      } = tokenResponse;\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      }\n      if (!providerId) {\n        return null;\n      }\n      try {\n        return new OAuthProvider(providerId)._credential({\n          idToken: oauthIdToken,\n          accessToken: oauthAccessToken,\n          nonce,\n          pendingToken\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('user_birthday');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = FacebookAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = FacebookAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  class FacebookAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"facebook.com\" /* ProviderId.FACEBOOK */);\n    }\n    /**\n     * Creates a credential for Facebook.\n     *\n     * @example\n     * ```javascript\n     * // `event` from the Facebook auth.authResponseChange callback.\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param accessToken - Facebook access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: FacebookAuthProvider.PROVIDER_ID,\n        signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  FacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GoogleAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Google Access Token.\n   *   const credential = GoogleAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Google Access Token.\n   * const credential = GoogleAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  class GoogleAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"google.com\" /* ProviderId.GOOGLE */);\n      this.addScope('profile');\n    }\n    /**\n     * Creates a credential for Google. At least one of ID token and access token is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param idToken - Google ID token.\n     * @param accessToken - Google access token.\n     */\n    static credential(idToken, accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GoogleAuthProvider.PROVIDER_ID,\n        signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n        idToken,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken\n      } = tokenResponse;\n      if (!oauthIdToken && !oauthAccessToken) {\n        // This could be an oauth 1 credential or a phone credential\n        return null;\n      }\n      try {\n        return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  GoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n   *\n   * @remarks\n   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n   * the {@link signInWithPopup} handler:\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GithubAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('repo');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a GitHub Access Token.\n   *   const credential = GithubAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GithubAuthProvider();\n   * provider.addScope('repo');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a GitHub Access Token.\n   * const credential = GithubAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class GithubAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"github.com\" /* ProviderId.GITHUB */);\n    }\n    /**\n     * Creates a credential for GitHub.\n     *\n     * @param accessToken - GitHub access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GithubAuthProvider.PROVIDER_ID,\n        signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI = 'http://localhost';\n  /**\n   * @public\n   */\n  class SAMLAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(providerId, pendingToken) {\n      super(providerId, providerId);\n      this.pendingToken = pendingToken;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        signInMethod: this.signInMethod,\n        providerId: this.providerId,\n        pendingToken: this.pendingToken\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        pendingToken\n      } = obj;\n      if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n        return null;\n      }\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    /**\n     * Helper static method to avoid exposing the constructor to end users.\n     *\n     * @internal\n     */\n    static _create(providerId, pendingToken) {\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    buildRequest() {\n      return {\n        requestUri: IDP_REQUEST_URI,\n        returnSecureToken: true,\n        pendingToken: this.pendingToken\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const SAML_PROVIDER_PREFIX = 'saml.';\n  /**\n   * An {@link AuthProvider} for SAML.\n   *\n   * @public\n   */\n  class SAMLAuthProvider extends FederatedAuthProvider {\n    /**\n     * Constructor. The providerId must start with \"saml.\"\n     * @param providerId - SAML provider ID.\n     */\n    constructor(providerId) {\n      _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      super(providerId);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n     * successful SAML flow completes.\n     *\n     * @remarks\n     *\n     * For example, to get an {@link AuthCredential}, you could write the\n     * following code:\n     *\n     * ```js\n     * const userCredential = await signInWithPopup(auth, samlProvider);\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n     * ```\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n    }\n    /**\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const credential = SAMLAuthCredential.fromJSON(json);\n      _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return credential;\n    }\n    static samlCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        pendingToken,\n        providerId\n      } = tokenResponse;\n      if (!pendingToken || !providerId) {\n        return null;\n      }\n      try {\n        return SAMLAuthCredential._create(providerId, pendingToken);\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new TwitterAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Twitter Access Token and Secret.\n   *   const credential = TwitterAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   *   const secret = credential.secret;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new TwitterAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Twitter Access Token and Secret.\n   * const credential = TwitterAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * const secret = credential.secret;\n   * ```\n   *\n   * @public\n   */\n  class TwitterAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"twitter.com\" /* ProviderId.TWITTER */);\n    }\n    /**\n     * Creates a credential for Twitter.\n     *\n     * @param token - Twitter access token.\n     * @param secret - Twitter secret.\n     */\n    static credential(token, secret) {\n      return OAuthCredential._fromParams({\n        providerId: TwitterAuthProvider.PROVIDER_ID,\n        signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n        oauthToken: token,\n        oauthTokenSecret: secret\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthAccessToken,\n        oauthTokenSecret\n      } = tokenResponse;\n      if (!oauthAccessToken || !oauthTokenSecret) {\n        return null;\n      }\n      try {\n        return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  TwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signUp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserCredentialImpl {\n    constructor(params) {\n      this.user = params.user;\n      this.providerId = params.providerId;\n      this._tokenResponse = params._tokenResponse;\n      this.operationType = params.operationType;\n    }\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n      const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n      const providerId = providerIdForResponse(idTokenResponse);\n      const userCred = new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: idTokenResponse,\n        operationType\n      });\n      return userCred;\n    }\n    static async _forOperation(user, operationType, response) {\n      await user._updateTokensIfNecessary(response, /* reload */true);\n      const providerId = providerIdForResponse(response);\n      return new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: response,\n        operationType\n      });\n    }\n  }\n  function providerIdForResponse(response) {\n    if (response.providerId) {\n      return response.providerId;\n    }\n    if ('phoneNumber' in response) {\n      return \"phone\" /* ProviderId.PHONE */;\n    }\n    return null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in as an anonymous user.\n   *\n   * @remarks\n   * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n   * new anonymous user identity will be created and returned.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  async function signInAnonymously(auth) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    await authInternal._initializationPromise;\n    if (authInternal.currentUser?.isAnonymous) {\n      // If an anonymous user is already signed in, no need to sign them in again.\n      return new UserCredentialImpl({\n        user: authInternal.currentUser,\n        providerId: null,\n        operationType: \"signIn\" /* OperationType.SIGN_IN */\n      });\n    }\n    const response = await signUp(authInternal, {\n      returnSecureToken: true\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorError extends _firebaseUtil.FirebaseError {\n    constructor(auth, error, operationType, user) {\n      super(error.code, error.message);\n      this.operationType = operationType;\n      this.user = user;\n      // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(this, MultiFactorError.prototype);\n      this.customData = {\n        appName: auth.name,\n        tenantId: auth.tenantId ?? undefined,\n        _serverResponse: error.customData._serverResponse,\n        operationType\n      };\n    }\n    static _fromErrorAndOperation(auth, error, operationType, user) {\n      return new MultiFactorError(auth, error, operationType, user);\n    }\n  }\n  function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(error => {\n      if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n        throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Takes a set of UserInfo provider data and converts it to a set of names\n   */\n  function providerDataAsNames(providerData) {\n    return new Set(providerData.map(({\n      providerId\n    }) => providerId).filter(pid => !!pid));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Unlinks a provider from a user account.\n   *\n   * @param user - The user.\n   * @param providerId - The provider to unlink.\n   *\n   * @public\n   */\n  async function unlink(user, providerId) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _assertLinkedStatus(true, userInternal, providerId);\n    const {\n      providerUserInfo\n    } = await deleteLinkedAccounts(userInternal.auth, {\n      idToken: await userInternal.getIdToken(),\n      deleteProvider: [providerId]\n    });\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n      userInternal.phoneNumber = null;\n    }\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    return userInternal;\n  }\n  async function _link$1(user, credential, bypassAuthState = false) {\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n    return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n  }\n  async function _assertLinkedStatus(expected, user, provider) {\n    await _reloadWithoutSaving(user);\n    const providerIds = providerDataAsNames(user.providerData);\n    const code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n    _assert(providerIds.has(provider) === expected, user.auth, code);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reauthenticate(user, credential, bypassAuthState = false) {\n    const {\n      auth\n    } = user;\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n    try {\n      const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n      _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const parsed = _parseToken(response.idToken);\n      _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const {\n        sub: localId\n      } = parsed;\n      _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      return UserCredentialImpl._forOperation(user, operationType, response);\n    } catch (e) {\n      // Convert user deleted error into user mismatch\n      if (e?.code === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n        _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _signInWithCredential(auth, credential, bypassAuthState = false) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"signIn\" /* OperationType.SIGN_IN */;\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n    if (!bypassAuthState) {\n      await auth._updateCurrentUser(userCredential.user);\n    }\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function signInWithCredential(auth, credential) {\n    return _signInWithCredential(_castAuth(auth), credential);\n  }\n  /**\n   * Links the user account with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function linkWithCredential(user, credential) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\n    return _link$1(userInternal, credential);\n  }\n  /**\n   * Re-authenticates a user using a fresh credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n   * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n   * or a `TOKEN_EXPIRED` error.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function reauthenticateWithCredential(user, credential) {\n    return _reauthenticate((0, _firebaseUtil.getModularInstance)(user), credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithCustomToken$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in using a custom token.\n   *\n   * @remarks\n   * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n   * be generated by an auth backend using the\n   * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n   * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n   *\n   * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param customToken - The custom token to sign in with.\n   *\n   * @public\n   */\n  async function signInWithCustomToken(auth, customToken) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const response = await signInWithCustomToken$1(authInternal, {\n      token: customToken,\n      returnSecureToken: true\n    });\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(cred.user);\n    return cred;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorInfoImpl {\n    constructor(factorId, response) {\n      this.factorId = factorId;\n      this.uid = response.mfaEnrollmentId;\n      this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n      this.displayName = response.displayName;\n    }\n    static _fromServerResponse(auth, enrollment) {\n      if ('phoneInfo' in enrollment) {\n        return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      } else if ('totpInfo' in enrollment) {\n        return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      }\n      return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }\n  class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"phone\" /* FactorId.PHONE */, response);\n      this.phoneNumber = response.phoneInfo;\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new PhoneMultiFactorInfoImpl(enrollment);\n    }\n  }\n  class TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"totp\" /* FactorId.TOTP */, response);\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new TotpMultiFactorInfoImpl(enrollment);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    _assert(actionCodeSettings.url?.length > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n    _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.linkDomain = actionCodeSettings.linkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n      _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n      request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n      _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n      request.androidInstallApp = actionCodeSettings.android.installApp;\n      request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n      request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates the password policy cached in the {@link Auth} instance if a policy is already\n   * cached for the project or tenant.\n   *\n   * @remarks\n   * We only fetch the password policy if the password did not meet policy requirements and\n   * there is an existing policy cached. A developer must call validatePassword at least\n   * once for the cache to be automatically updated.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @private\n   */\n  async function recachePasswordPolicy(auth) {\n    const authInternal = _castAuth(auth);\n    if (authInternal._getPasswordPolicyInternal()) {\n      await authInternal._updatePasswordPolicy();\n    }\n  }\n  /**\n   * Sends a password reset email to the given email address. This method does not throw an error when\n   * there's no user account with the given email address and\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   *\n   * @remarks\n   * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n   * the email sent to the user, along with the new password specified by the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain code from user.\n   * await confirmPasswordReset('user@example.com', code);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n    }\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A confirmation code sent to the user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  async function confirmPasswordReset(auth, oobCode, newPassword) {\n    await resetPassword((0, _firebaseUtil.getModularInstance)(auth), {\n      oobCode,\n      newPassword\n    }).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    // Do not return the email.\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function applyActionCode(auth, oobCode) {\n    await applyActionCode$1((0, _firebaseUtil.getModularInstance)(auth), {\n      oobCode\n    });\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns metadata about the code.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function checkActionCode(auth, oobCode) {\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const response = await resetPassword(authModular, {\n      oobCode\n    });\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\n    // VERIFY_AND_CHANGE_EMAIL.\n    // New email should not be empty if the request type is\n    // VERIFY_AND_CHANGE_EMAIL.\n    // Multi-factor info could not be empty if the request type is\n    // REVERT_SECOND_FACTOR_ADDITION.\n    const operation = response.requestType;\n    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    switch (operation) {\n      case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n        break;\n      case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n        _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        break;\n      case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n        _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // fall through\n      default:\n        _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    // The multi-factor info for revert second factor addition\n    let multiFactorInfo = null;\n    if (response.mfaInfo) {\n      multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n    }\n    return {\n      data: {\n        email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n        previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n        multiFactorInfo\n      },\n      operation\n    };\n  }\n  /**\n   * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns the user's email address if valid.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param code - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function verifyPasswordResetCode(auth, code) {\n    const {\n      data\n    } = await checkActionCode((0, _firebaseUtil.getModularInstance)(auth), code);\n    // Email should always be present since a code was sent to it\n    return data.email;\n  }\n  /**\n   * Creates a new user account associated with the specified email address and password.\n   *\n   * @remarks\n   * On successful creation of the user account, this user will also be signed in to your application.\n   *\n   * User account creation can fail if the account already exists or the password is invalid.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The email address acts as a unique identifier for the user and enables an email-based\n   * password reset. This function will create a new user account and set the initial user password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param password - The user's chosen password.\n   *\n   * @public\n   */\n  async function createUserWithEmailAndPassword(auth, email, password) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const request = {\n      returnSecureToken: true,\n      email,\n      password,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    const response = await signUpResponse.catch(error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in using an email and password.\n   *\n   * @remarks\n   * Fails with an error if the email address and password do not match. When\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n   * email/password.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The user's password is NOT the password used to access the user's email account. The\n   * email address serves as a unique identifier for the user, and the password is used to access\n   * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The users email address.\n   * @param password - The users password.\n   *\n   * @public\n   */\n  function signInWithEmailAndPassword(auth, email, password) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    return signInWithCredential((0, _firebaseUtil.getModularInstance)(auth), EmailAuthProvider.credential(email, password)).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Sends a sign-in email link to the user with the specified email.\n   *\n   * @remarks\n   * The sign-in operation has to always be completed in the app unlike other out of band email\n   * actions (password reset and email verifications). This is because, at the end of the flow,\n   * the user is expected to be signed in and their Auth state persisted within the app.\n   *\n   * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n   * address and the email link supplied in the email sent to the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   * @param authInternal - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    function setActionCodeSettings(request, actionCodeSettings) {\n      _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n      }\n    }\n    setActionCodeSettings(request, actionCodeSettings);\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function isSignInWithEmailLink(auth, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    return actionCodeUrl?.operation === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @remarks\n   * If no link is passed, the link is inferred from the current URL.\n   *\n   * Fails with an error if the email address is invalid or OTP in email link expires.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  async function signInWithEmailLink(auth, email, emailLink) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\n    // instance.\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n    return signInWithCredential(authModular, credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function createAuthUri(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Gets the list of possible sign in methods for the given email address. This method returns an\n   * empty list when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, irrespective of the number of authentication methods available for the given email.\n   *\n   * @remarks\n   * This is useful to differentiate methods of sign-in for the same provider, eg.\n   * {@link EmailAuthProvider} which has 2 methods of sign-in,\n   * {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   *\n   * Deprecated. Migrating off of this method is recommended as a security best-practice.\n   * Learn more in the Identity Platform documentation for\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n   * @public\n   */\n  async function fetchSignInMethodsForEmail(auth, email) {\n    // createAuthUri returns an error if continue URI is not http or https.\n    // For environments like Cordova, Chrome extensions, native frameworks, file\n    // systems, etc, use http://localhost as continue URL.\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n    const request = {\n      identifier: email,\n      continueUri\n    };\n    const {\n      signinMethods\n    } = await createAuthUri((0, _firebaseUtil.getModularInstance)(auth), request);\n    return signinMethods || [];\n  }\n  /**\n   * Sends a verification email to a user.\n   *\n   * @remarks\n   * The verification process is completed by calling {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendEmailVerification(user, actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendEmailVerification(user, actionCodeSettings) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n      idToken\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await sendEmailVerification$1(userInternal.auth, request);\n    if (email !== user.email) {\n      await user.reload();\n    }\n  }\n  /**\n   * Sends a verification email to a new email address.\n   *\n   * @remarks\n   * The user's email will be updated to the new one after being verified.\n   *\n   * If you have a custom email action handler, you can complete the verification process by calling\n   * {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address to be verified before update.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n      idToken,\n      newEmail\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await verifyAndChangeEmail(userInternal.auth, request);\n    if (email !== user.email) {\n      // If the local copy of the email on user is outdated, reload the\n      // user.\n      await user.reload();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function updateProfile$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates a user's profile data.\n   *\n   * @param user - The user.\n   * @param profile - The profile's `displayName` and `photoURL` to update.\n   *\n   * @public\n   */\n  async function updateProfile(user, {\n    displayName,\n    photoURL: photoUrl\n  }) {\n    if (displayName === undefined && photoUrl === undefined) {\n      return;\n    }\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    const idToken = await userInternal.getIdToken();\n    const profileRequest = {\n      idToken,\n      displayName,\n      photoUrl,\n      returnSecureToken: true\n    };\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n    userInternal.displayName = response.displayName || null;\n    userInternal.photoURL = response.photoUrl || null;\n    // Update the password provider as well\n    const passwordProvider = userInternal.providerData.find(({\n      providerId\n    }) => providerId === \"password\" /* ProviderId.PASSWORD */);\n    if (passwordProvider) {\n      passwordProvider.displayName = userInternal.displayName;\n      passwordProvider.photoURL = userInternal.photoURL;\n    }\n    await userInternal._updateTokensIfNecessary(response);\n  }\n  /**\n   * Updates the user's email address.\n   *\n   * @remarks\n   * An email will be sent to the original email address (if it was set) that allows to revoke the\n   * email address change, in order to protect them from account hijacking.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address.\n   *\n   * Throws \"auth/operation-not-allowed\" error when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n   *\n   * @public\n   */\n  function updateEmail(user, newEmail) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    return updateEmailOrPassword(userInternal, newEmail, null);\n  }\n  /**\n   * Updates the user's password.\n   *\n   * @remarks\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function updatePassword(user, newPassword) {\n    return updateEmailOrPassword((0, _firebaseUtil.getModularInstance)(user), null, newPassword);\n  }\n  async function updateEmailOrPassword(user, email, password) {\n    const {\n      auth\n    } = user;\n    const idToken = await user.getIdToken();\n    const request = {\n      idToken,\n      returnSecureToken: true\n    };\n    if (email) {\n      request.email = email;\n    }\n    if (password) {\n      request.password = password;\n    }\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n    await user._updateTokensIfNecessary(response, /* reload */true);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Parse the `AdditionalUserInfo` from the ID token response.\n   *\n   */\n  function _fromIdTokenResponse(idTokenResponse) {\n    if (!idTokenResponse) {\n      return null;\n    }\n    const {\n      providerId\n    } = idTokenResponse;\n    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n    if (!providerId && idTokenResponse?.idToken) {\n      const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.['sign_in_provider'];\n      if (signInProvider) {\n        const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n        // Uses generic class in accordance with the legacy SDK.\n        return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n      }\n    }\n    if (!providerId) {\n      return null;\n    }\n    switch (providerId) {\n      case \"facebook.com\" /* ProviderId.FACEBOOK */:\n        return new FacebookAdditionalUserInfo(isNewUser, profile);\n      case \"github.com\" /* ProviderId.GITHUB */:\n        return new GithubAdditionalUserInfo(isNewUser, profile);\n      case \"google.com\" /* ProviderId.GOOGLE */:\n        return new GoogleAdditionalUserInfo(isNewUser, profile);\n      case \"twitter.com\" /* ProviderId.TWITTER */:\n        return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n      case \"custom\" /* ProviderId.CUSTOM */:\n      case \"anonymous\" /* ProviderId.ANONYMOUS */:\n        return new GenericAdditionalUserInfo(isNewUser, null);\n      default:\n        return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n  }\n  class GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile = {}) {\n      this.isNewUser = isNewUser;\n      this.providerId = providerId;\n      this.profile = profile;\n    }\n  }\n  class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile, username) {\n      super(isNewUser, providerId, profile);\n      this.username = username;\n    }\n  }\n  class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\n    }\n  }\n  class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof profile?.login === 'string' ? profile?.login : null);\n    }\n  }\n  class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\n    }\n  }\n  class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile, screenName) {\n      super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\n    }\n  }\n  /**\n   * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n   *\n   * @param userCredential - The user credential.\n   *\n   * @public\n   */\n  function getAdditionalUserInfo(userCredential) {\n    const {\n      user,\n      _tokenResponse\n    } = userCredential;\n    if (user.isAnonymous && !_tokenResponse) {\n      // Handle the special case where signInAnonymously() gets called twice.\n      // No network call is made so there's nothing to actually fill this in\n      return {\n        providerId: null,\n        isNewUser: false,\n        profile: null\n      };\n    }\n    return _fromIdTokenResponse(_tokenResponse);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Non-optional auth methods.\n  /**\n   * Changes the type of persistence on the {@link Auth} instance for the currently saved\n   * `Auth` session and applies this type of persistence for future sign-in requests, including\n   * sign-in with redirect requests.\n   *\n   * @remarks\n   * This makes it easy for a user signing in to specify whether their session should be\n   * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n   * that are shared by other users or have sensitive data.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * setPersistence(auth, browserSessionPersistence);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param persistence - The {@link Persistence} to use.\n   * @returns A `Promise` that resolves once the persistence change has completed\n   *\n   * @public\n   */\n  function setPersistence(auth, persistence) {\n    return (0, _firebaseUtil.getModularInstance)(auth).setPersistence(persistence);\n  }\n  /**\n   * Loads the reCAPTCHA configuration into the `Auth` instance.\n   *\n   * @remarks\n   * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n   * verification flow should be triggered for each auth provider, into the\n   * current Auth session.\n   *\n   * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n   * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n   * verification, the SDK will transparently load the reCAPTCHA config and restart the\n   * auth flows.\n   *\n   * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n   * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * initializeRecaptchaConfig(auth);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function initializeRecaptchaConfig(auth) {\n    return _initializeRecaptchaConfig(auth);\n  }\n  /**\n   * Validates the password against the password policy configured for the project or tenant.\n   *\n   * @remarks\n   * If no tenant ID is set on the `Auth` instance, then this method will use the password\n   * policy configured for the project. Otherwise, this method will use the policy configured\n   * for the tenant. If a password policy has not been configured, then the default policy\n   * configured for all projects will be used.\n   *\n   * If an auth flow fails because a submitted password does not meet the password policy\n   * requirements and this method has previously been called, then this method will use the\n   * most recent policy available when called again.\n   *\n   * @example\n   * ```javascript\n   * validatePassword(auth, 'some-password');\n   * ```\n   *\n   * @param auth The {@link Auth} instance.\n   * @param password The password to validate.\n   *\n   * @public\n   */\n  async function validatePassword(auth, password) {\n    const authInternal = _castAuth(auth);\n    return authInternal.validatePassword(password);\n  }\n  /**\n   * Adds an observer for changes to the signed-in user's ID token.\n   *\n   * @remarks\n   * This includes sign-in, sign-out, and token refresh events.\n   * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onIdTokenChanged(auth, nextOrObserver, error, completed) {\n    return (0, _firebaseUtil.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Adds a blocking callback that runs before an auth state change\n   * sets a new user.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param callback - callback triggered before new user value is set.\n   *   If this throws, it blocks the user from being set.\n   * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n   *   callback throws, allowing you to undo any side effects.\n   */\n  function beforeAuthStateChanged(auth, callback, onAbort) {\n    return (0, _firebaseUtil.getModularInstance)(auth).beforeAuthStateChanged(callback, onAbort);\n  }\n  /**\n   * Adds an observer for changes to the user's sign-in state.\n   *\n   * @remarks\n   * To keep the old behavior, see {@link onIdTokenChanged}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onAuthStateChanged(auth, nextOrObserver, error, completed) {\n    return (0, _firebaseUtil.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Sets the current language to the default device/browser preference.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function useDeviceLanguage(auth) {\n    (0, _firebaseUtil.getModularInstance)(auth).useDeviceLanguage();\n  }\n  /**\n   * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n   * {@link Auth} instance.\n   *\n   * @remarks\n   * A new instance copy of the user provided will be made and set as currentUser.\n   *\n   * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n   * like other sign in methods.\n   *\n   * The operation fails with an error if the user to be updated belongs to a different Firebase\n   * project.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param user - The new {@link User}.\n   *\n   * @public\n   */\n  function updateCurrentUser(auth, user) {\n    return (0, _firebaseUtil.getModularInstance)(auth).updateCurrentUser(user);\n  }\n  /**\n   * Signs out the current user.\n   *\n   * @remarks\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signOut(auth) {\n    return (0, _firebaseUtil.getModularInstance)(auth).signOut();\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param token - The Apple OAuth access token.\n   *\n   * @public\n   */\n  function revokeAccessToken(auth, token) {\n    const authInternal = _castAuth(auth);\n    return authInternal.revokeAccessToken(token);\n  }\n  /**\n   * Deletes and signs out the user.\n   *\n   * @remarks\n   * Important: this is a security-sensitive operation that requires the user to have recently\n   * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function deleteUser(user) {\n    return (0, _firebaseUtil.getModularInstance)(user).delete();\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorSessionImpl {\n    constructor(type, credential, user) {\n      this.type = type;\n      this.credential = credential;\n      this.user = user;\n    }\n    static _fromIdtoken(idToken, user) {\n      return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n    }\n    static _fromMfaPendingCredential(mfaPendingCredential) {\n      return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n    }\n    toJSON() {\n      const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n      return {\n        multiFactorSession: {\n          [key]: this.credential\n        }\n      };\n    }\n    static fromJSON(obj) {\n      if (obj?.multiFactorSession) {\n        if (obj.multiFactorSession?.pendingCredential) {\n          return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n        } else if (obj.multiFactorSession?.idToken) {\n          return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n        }\n      }\n      return null;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorResolverImpl {\n    constructor(session, hints, signInResolver) {\n      this.session = session;\n      this.hints = hints;\n      this.signInResolver = signInResolver;\n    }\n    /** @internal */\n    static _fromError(authExtern, error) {\n      const auth = _castAuth(authExtern);\n      const serverResponse = error.customData._serverResponse;\n      const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n      _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n      return new MultiFactorResolverImpl(session, hints, async assertion => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = Object.assign({}, serverResponse, {\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        });\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case \"signIn\" /* OperationType.SIGN_IN */:\n            const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n            _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n          default:\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n      });\n    }\n    async resolveSignIn(assertionExtern) {\n      const assertion = assertionExtern;\n      return this.signInResolver(assertion);\n    }\n  }\n  /**\n   * Provides a {@link MultiFactorResolver} suitable for completion of a\n   * multi-factor flow.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param error - The {@link MultiFactorError} raised during a sign-in, or\n   * reauthentication operation.\n   *\n   * @public\n   */\n  function getMultiFactorResolver(auth, error) {\n    const authModular = (0, _firebaseUtil.getModularInstance)(auth);\n    const errorInternal = error;\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(errorInternal.customData._serverResponse?.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function startEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function withdrawMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n  }\n  class MultiFactorUserImpl {\n    constructor(user) {\n      this.user = user;\n      this.enrolledFactors = [];\n      user._onReload(userInfo => {\n        if (userInfo.mfaInfo) {\n          this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n        }\n      });\n    }\n    static _fromUser(user) {\n      return new MultiFactorUserImpl(user);\n    }\n    async getSession() {\n      return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n    }\n    async enroll(assertionExtern, displayName) {\n      const assertion = assertionExtern;\n      const session = await this.getSession();\n      const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n      // New tokens will be issued after enrollment of the new second factors.\n      // They need to be updated on the user.\n      await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n      // The user needs to be reloaded to get the new multi-factor information\n      // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n      // will be updated.\n      return this.user.reload();\n    }\n    async unenroll(infoOrUid) {\n      const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n      const idToken = await this.user.getIdToken();\n      try {\n        const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        }));\n        // Remove the second factor from the user's list.\n        this.enrolledFactors = this.enrolledFactors.filter(({\n          uid\n        }) => uid !== mfaEnrollmentId);\n        // Depending on whether the backend decided to revoke the user's session,\n        // the tokenResponse may be empty. If the tokens were not updated (and they\n        // are now invalid), reloading the user will discover this and invalidate\n        // the user's state accordingly.\n        await this.user._updateTokensIfNecessary(idTokenResponse);\n        await this.user.reload();\n      } catch (e) {\n        throw e;\n      }\n    }\n  }\n  const multiFactorUserCache = new WeakMap();\n  /**\n   * The {@link MultiFactorUser} corresponding to the user.\n   *\n   * @remarks\n   * This is used to access all multi-factor properties and operations related to the user.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function multiFactor(user) {\n    const userModular = (0, _firebaseUtil.getModularInstance)(user);\n    if (!multiFactorUserCache.has(userModular)) {\n      multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n    }\n    return multiFactorUserCache.get(userModular);\n  }\n  const STORAGE_AVAILABLE_KEY = '__sak';\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // There are two different browser persistence types: local and session.\n  // Both have the same implementation but use a different underlying storage\n  // object.\n  class BrowserPersistenceClass {\n    constructor(storageRetriever, type) {\n      this.storageRetriever = storageRetriever;\n      this.type = type;\n    }\n    _isAvailable() {\n      try {\n        if (!this.storage) {\n          return Promise.resolve(false);\n        }\n        this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n        this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n        return Promise.resolve(true);\n      } catch {\n        return Promise.resolve(false);\n      }\n    }\n    _set(key, value) {\n      this.storage.setItem(key, JSON.stringify(value));\n      return Promise.resolve();\n    }\n    _get(key) {\n      const json = this.storage.getItem(key);\n      return Promise.resolve(json ? JSON.parse(json) : null);\n    }\n    _remove(key) {\n      this.storage.removeItem(key);\n      return Promise.resolve();\n    }\n    get storage() {\n      return this.storageRetriever();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // The polling period in case events are not supported\n  const _POLLING_INTERVAL_MS$1 = 1000;\n  // The IE 10 localStorage cross tab synchronization delay in milliseconds\n  const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\n  class BrowserLocalPersistence extends BrowserPersistenceClass {\n    constructor() {\n      super(() => window.localStorage, \"LOCAL\" /* PersistenceType.LOCAL */);\n      this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\n      this.listeners = {};\n      this.localCache = {};\n      // setTimeout return value is platform specific\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.pollTimer = null;\n      // Whether to use polling instead of depending on window events\n      this.fallbackToPolling = _isMobileBrowser();\n      this._shouldAllowMigration = true;\n    }\n    forAllChangedKeys(cb) {\n      // Check all keys with listeners on them.\n      for (const key of Object.keys(this.listeners)) {\n        // Get value from localStorage.\n        const newValue = this.storage.getItem(key);\n        const oldValue = this.localCache[key];\n        // If local map value does not match, trigger listener with storage event.\n        // Differentiate this simulated event from the real storage event.\n        if (newValue !== oldValue) {\n          cb(key, oldValue, newValue);\n        }\n      }\n    }\n    onStorageEvent(event, poll = false) {\n      // Key would be null in some situations, like when localStorage is cleared\n      if (!event.key) {\n        this.forAllChangedKeys((key, _oldValue, newValue) => {\n          this.notifyListeners(key, newValue);\n        });\n        return;\n      }\n      const key = event.key;\n      // Check the mechanism how this event was detected.\n      // The first event will dictate the mechanism to be used.\n      if (poll) {\n        // Environment detects storage changes via polling.\n        // Remove storage event listener to prevent possible event duplication.\n        this.detachListener();\n      } else {\n        // Environment detects storage changes via storage event listener.\n        // Remove polling listener to prevent possible event duplication.\n        this.stopPolling();\n      }\n      const triggerListeners = () => {\n        // Keep local map up to date in case storage event is triggered before\n        // poll.\n        const storedValue = this.storage.getItem(key);\n        if (!poll && this.localCache[key] === storedValue) {\n          // Real storage event which has already been detected, do nothing.\n          // This seems to trigger in some IE browsers for some reason.\n          return;\n        }\n        this.notifyListeners(key, storedValue);\n      };\n      const storedValue = this.storage.getItem(key);\n      if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {\n        // IE 10 has this weird bug where a storage event would trigger with the\n        // correct key, oldValue and newValue but localStorage.getItem(key) does\n        // not yield the updated value until a few milliseconds. This ensures\n        // this recovers from that situation.\n        setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n      } else {\n        triggerListeners();\n      }\n    }\n    notifyListeners(key, value) {\n      this.localCache[key] = value;\n      const listeners = this.listeners[key];\n      if (listeners) {\n        for (const listener of Array.from(listeners)) {\n          listener(value ? JSON.parse(value) : value);\n        }\n      }\n    }\n    startPolling() {\n      this.stopPolling();\n      this.pollTimer = setInterval(() => {\n        this.forAllChangedKeys((key, oldValue, newValue) => {\n          this.onStorageEvent(new StorageEvent('storage', {\n            key,\n            oldValue,\n            newValue\n          }), /* poll */true);\n        });\n      }, _POLLING_INTERVAL_MS$1);\n    }\n    stopPolling() {\n      if (this.pollTimer) {\n        clearInterval(this.pollTimer);\n        this.pollTimer = null;\n      }\n    }\n    attachListener() {\n      window.addEventListener('storage', this.boundEventHandler);\n    }\n    detachListener() {\n      window.removeEventListener('storage', this.boundEventHandler);\n    }\n    _addListener(key, listener) {\n      if (Object.keys(this.listeners).length === 0) {\n        // Whether browser can detect storage event when it had already been pushed to the background.\n        // This may happen in some mobile browsers. A localStorage change in the foreground window\n        // will not be detected in the background window via the storage event.\n        // This was detected in iOS 7.x mobile browsers\n        if (this.fallbackToPolling) {\n          this.startPolling();\n        } else {\n          this.attachListener();\n        }\n      }\n      if (!this.listeners[key]) {\n        this.listeners[key] = new Set();\n        // Populate the cache to avoid spuriously triggering on first poll.\n        this.localCache[key] = this.storage.getItem(key);\n      }\n      this.listeners[key].add(listener);\n    }\n    _removeListener(key, listener) {\n      if (this.listeners[key]) {\n        this.listeners[key].delete(listener);\n        if (this.listeners[key].size === 0) {\n          delete this.listeners[key];\n        }\n      }\n      if (Object.keys(this.listeners).length === 0) {\n        this.detachListener();\n        this.stopPolling();\n      }\n    }\n    // Update local cache on base operations:\n    async _set(key, value) {\n      await super._set(key, value);\n      this.localCache[key] = JSON.stringify(value);\n    }\n    async _get(key) {\n      const value = await super._get(key);\n      this.localCache[key] = JSON.stringify(value);\n      return value;\n    }\n    async _remove(key) {\n      await super._remove(key);\n      delete this.localCache[key];\n    }\n  }\n  BrowserLocalPersistence.type = 'LOCAL';\n  /**\n   * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const browserLocalPersistence = BrowserLocalPersistence;\n\n  /**\n   * @license\n   * Copyright 2025 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const POLLING_INTERVAL_MS = 1000;\n  // Pull a cookie value from document.cookie\n  function getDocumentCookie(name) {\n    const escapedName = name.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&');\n    const matcher = RegExp(`${escapedName}=([^;]+)`);\n    return document.cookie.match(matcher)?.[1] ?? null;\n  }\n  // Produce a sanitized cookie name from the persistence key\n  function getCookieName(key) {\n    // __HOST- doesn't work in localhost https://issues.chromium.org/issues/40196122 but it has\n    // desirable security properties, so lets use a different cookie name while in dev-mode.\n    // Already checked isSecureContext in _isAvailable, so if it's http we're hitting local.\n    const isDevMode = window.location.protocol === 'http:';\n    return `${isDevMode ? '__dev_' : '__HOST-'}FIREBASE_${key.split(':')[3]}`;\n  }\n  class CookiePersistence {\n    constructor() {\n      this.type = \"COOKIE\" /* PersistenceType.COOKIE */;\n      this.listenerUnsubscribes = new Map();\n    }\n    // used to get the URL to the backend to proxy to\n    _getFinalTarget(originalUrl) {\n      if (typeof window === undefined) {\n        return originalUrl;\n      }\n      const url = new URL(`${window.location.origin}/__cookies__`);\n      url.searchParams.set('finalTarget', originalUrl);\n      return url;\n    }\n    // To be a usable persistence method in a chain browserCookiePersistence ensures that\n    // prerequisites have been met, namely that we're in a secureContext, navigator and document are\n    // available and cookies are enabled. Not all UAs support these method, so fallback accordingly.\n    async _isAvailable() {\n      if (typeof isSecureContext === 'boolean' && !isSecureContext) {\n        return false;\n      }\n      if (typeof navigator === 'undefined' || typeof document === 'undefined') {\n        return false;\n      }\n      return navigator.cookieEnabled ?? true;\n    }\n    // Set should be a noop as we expect middleware to handle this\n    async _set(_key, _value) {\n      return;\n    }\n    // Attempt to get the cookie from cookieStore, fallback to document.cookie\n    async _get(key) {\n      if (!this._isAvailable()) {\n        return null;\n      }\n      const name = getCookieName(key);\n      if (window.cookieStore) {\n        const cookie = await window.cookieStore.get(name);\n        return cookie?.value;\n      }\n      return getDocumentCookie(name);\n    }\n    // Log out by overriding the idToken with a sentinel value of \"\"\n    async _remove(key) {\n      if (!this._isAvailable()) {\n        return;\n      }\n      // To make sure we don't hit signout over and over again, only do this operation if we need to\n      // with the logout sentinel value of \"\" this can cause race conditions. Unnecessary set-cookie\n      // headers will reduce CDN hit rates too.\n      const existingValue = await this._get(key);\n      if (!existingValue) {\n        return;\n      }\n      const name = getCookieName(key);\n      document.cookie = `${name}=;Max-Age=34560000;Partitioned;Secure;SameSite=Strict;Path=/;Priority=High`;\n      await fetch(`/__cookies__`, {\n        method: 'DELETE'\n      }).catch(() => undefined);\n    }\n    // Listen for cookie changes, both cookieStore and fallback to polling document.cookie\n    _addListener(key, listener) {\n      if (!this._isAvailable()) {\n        return;\n      }\n      const name = getCookieName(key);\n      if (window.cookieStore) {\n        const cb = event => {\n          const changedCookie = event.changed.find(change => change.name === name);\n          if (changedCookie) {\n            listener(changedCookie.value);\n          }\n          const deletedCookie = event.deleted.find(change => change.name === name);\n          if (deletedCookie) {\n            listener(null);\n          }\n        };\n        const unsubscribe = () => window.cookieStore.removeEventListener('change', cb);\n        this.listenerUnsubscribes.set(listener, unsubscribe);\n        return window.cookieStore.addEventListener('change', cb);\n      }\n      let lastValue = getDocumentCookie(name);\n      const interval = setInterval(() => {\n        const currentValue = getDocumentCookie(name);\n        if (currentValue !== lastValue) {\n          listener(currentValue);\n          lastValue = currentValue;\n        }\n      }, POLLING_INTERVAL_MS);\n      const unsubscribe = () => clearInterval(interval);\n      this.listenerUnsubscribes.set(listener, unsubscribe);\n    }\n    _removeListener(_key, listener) {\n      const unsubscribe = this.listenerUnsubscribes.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      unsubscribe();\n      this.listenerUnsubscribes.delete(listener);\n    }\n  }\n  CookiePersistence.type = 'COOKIE';\n  /**\n   * An implementation of {@link Persistence} of type `COOKIE`, for use on the client side in\n   * applications leveraging hybrid rendering and middleware.\n   *\n   * @remarks This persistence method requires companion middleware to function, such as that provided\n   * by {@link https://firebaseopensource.com/projects/firebaseextended/reactfire/ | ReactFire} for\n   * NextJS.\n   * @beta\n   */\n  const browserCookiePersistence = CookiePersistence;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class BrowserSessionPersistence extends BrowserPersistenceClass {\n    constructor() {\n      super(() => window.sessionStorage, \"SESSION\" /* PersistenceType.SESSION */);\n    }\n    _addListener(_key, _listener) {\n      // Listeners are not supported for session storage since it cannot be shared across windows\n      return;\n    }\n    _removeListener(_key, _listener) {\n      // Listeners are not supported for session storage since it cannot be shared across windows\n      return;\n    }\n  }\n  BrowserSessionPersistence.type = 'SESSION';\n  /**\n   * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const browserSessionPersistence = BrowserSessionPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n   *\n   * @param promises - Array of promises to wait on.\n   */\n  function _allSettled(promises) {\n    return Promise.all(promises.map(async promise => {\n      try {\n        const value = await promise;\n        return {\n          fulfilled: true,\n          value\n        };\n      } catch (reason) {\n        return {\n          fulfilled: false,\n          reason\n        };\n      }\n    }));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface class for receiving messages.\n   *\n   */\n  class Receiver {\n    constructor(eventTarget) {\n      this.eventTarget = eventTarget;\n      this.handlersMap = {};\n      this.boundEventHandler = this.handleEvent.bind(this);\n    }\n    /**\n     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n     *\n     * @param eventTarget - An event target (such as window or self) through which the underlying\n     * messages will be received.\n     */\n    static _getInstance(eventTarget) {\n      // The results are stored in an array since objects can't be keys for other\n      // objects. In addition, setting a unique property on an event target as a\n      // hash map key may not be allowed due to CORS restrictions.\n      const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));\n      if (existingInstance) {\n        return existingInstance;\n      }\n      const newInstance = new Receiver(eventTarget);\n      this.receivers.push(newInstance);\n      return newInstance;\n    }\n    isListeningto(eventTarget) {\n      return this.eventTarget === eventTarget;\n    }\n    /**\n     * Fans out a MessageEvent to the appropriate listeners.\n     *\n     * @remarks\n     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n     * finished processing.\n     *\n     * @param event - The MessageEvent.\n     *\n     */\n    async handleEvent(event) {\n      const messageEvent = event;\n      const {\n        eventId,\n        eventType,\n        data\n      } = messageEvent.data;\n      const handlers = this.handlersMap[eventType];\n      if (!handlers?.size) {\n        return;\n      }\n      messageEvent.ports[0].postMessage({\n        status: \"ack\" /* _Status.ACK */,\n        eventId,\n        eventType\n      });\n      const promises = Array.from(handlers).map(async handler => handler(messageEvent.origin, data));\n      const response = await _allSettled(promises);\n      messageEvent.ports[0].postMessage({\n        status: \"done\" /* _Status.DONE */,\n        eventId,\n        eventType,\n        response\n      });\n    }\n    /**\n     * Subscribe an event handler for a particular event.\n     *\n     * @param eventType - Event name to subscribe to.\n     * @param eventHandler - The event handler which should receive the events.\n     *\n     */\n    _subscribe(eventType, eventHandler) {\n      if (Object.keys(this.handlersMap).length === 0) {\n        this.eventTarget.addEventListener('message', this.boundEventHandler);\n      }\n      if (!this.handlersMap[eventType]) {\n        this.handlersMap[eventType] = new Set();\n      }\n      this.handlersMap[eventType].add(eventHandler);\n    }\n    /**\n     * Unsubscribe an event handler from a particular event.\n     *\n     * @param eventType - Event name to unsubscribe from.\n     * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.\n     *\n     */\n    _unsubscribe(eventType, eventHandler) {\n      if (this.handlersMap[eventType] && eventHandler) {\n        this.handlersMap[eventType].delete(eventHandler);\n      }\n      if (!eventHandler || this.handlersMap[eventType].size === 0) {\n        delete this.handlersMap[eventType];\n      }\n      if (Object.keys(this.handlersMap).length === 0) {\n        this.eventTarget.removeEventListener('message', this.boundEventHandler);\n      }\n    }\n  }\n  Receiver.receivers = [];\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _generateEventId(prefix = '', digits = 10) {\n    let random = '';\n    for (let i = 0; i < digits; i++) {\n      random += Math.floor(Math.random() * 10);\n    }\n    return prefix + random;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface for sending messages and waiting for a completion response.\n   *\n   */\n  class Sender {\n    constructor(target) {\n      this.target = target;\n      this.handlers = new Set();\n    }\n    /**\n     * Unsubscribe the handler and remove it from our tracking Set.\n     *\n     * @param handler - The handler to unsubscribe.\n     */\n    removeMessageHandler(handler) {\n      if (handler.messageChannel) {\n        handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\n        handler.messageChannel.port1.close();\n      }\n      this.handlers.delete(handler);\n    }\n    /**\n     * Send a message to the Receiver located at {@link target}.\n     *\n     * @remarks\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n     * receiver has had a chance to fully process the event.\n     *\n     * @param eventType - Type of event to send.\n     * @param data - The payload of the event.\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\n     *\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\n     */\n    async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {\n      const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n      if (!messageChannel) {\n        throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */);\n      }\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let completionTimer;\n      let handler;\n      return new Promise((resolve, reject) => {\n        const eventId = _generateEventId('', 20);\n        messageChannel.port1.start();\n        const ackTimer = setTimeout(() => {\n          reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */));\n        }, timeout);\n        handler = {\n          messageChannel,\n          onMessage(event) {\n            const messageEvent = event;\n            if (messageEvent.data.eventId !== eventId) {\n              return;\n            }\n            switch (messageEvent.data.status) {\n              case \"ack\" /* _Status.ACK */:\n                // The receiver should ACK first.\n                clearTimeout(ackTimer);\n                completionTimer = setTimeout(() => {\n                  reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */));\n                }, 3000 /* _TimeoutDuration.COMPLETION */);\n                break;\n              case \"done\" /* _Status.DONE */:\n                // Once the receiver's handlers are finished we will get the results.\n                clearTimeout(completionTimer);\n                resolve(messageEvent.data.response);\n                break;\n              default:\n                clearTimeout(ackTimer);\n                clearTimeout(completionTimer);\n                reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */));\n                break;\n            }\n          }\n        };\n        this.handlers.add(handler);\n        messageChannel.port1.addEventListener('message', handler.onMessage);\n        this.target.postMessage({\n          eventType,\n          eventId,\n          data\n        }, [messageChannel.port2]);\n      }).finally(() => {\n        if (handler) {\n          this.removeMessageHandler(handler);\n        }\n      });\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Lazy accessor for window, since the compat layer won't tree shake this out,\n   * we need to make sure not to mess with window unless we have to\n   */\n  function _window() {\n    return window;\n  }\n  function _setWindowLocation(url) {\n    _window().location.href = url;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _isWorker() {\n    return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';\n  }\n  async function _getActiveServiceWorker() {\n    if (!navigator?.serviceWorker) {\n      return null;\n    }\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      return registration.active;\n    } catch {\n      return null;\n    }\n  }\n  function _getServiceWorkerController() {\n    return navigator?.serviceWorker?.controller || null;\n  }\n  function _getWorkerGlobalScope() {\n    return _isWorker() ? self : null;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const DB_NAME = 'firebaseLocalStorageDb';\n  const DB_VERSION = 1;\n  const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\n  const DB_DATA_KEYPATH = 'fbase_key';\n  /**\n   * Promise wrapper for IDBRequest\n   *\n   * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n   *\n   */\n  class DBPromise {\n    constructor(request) {\n      this.request = request;\n    }\n    toPromise() {\n      return new Promise((resolve, reject) => {\n        this.request.addEventListener('success', () => {\n          resolve(this.request.result);\n        });\n        this.request.addEventListener('error', () => {\n          reject(this.request.error);\n        });\n      });\n    }\n  }\n  function getObjectStore(db, isReadWrite) {\n    return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly').objectStore(DB_OBJECTSTORE_NAME);\n  }\n  function _deleteDatabase() {\n    const request = indexedDB.deleteDatabase(DB_NAME);\n    return new DBPromise(request).toPromise();\n  }\n  function _openDatabase() {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    return new Promise((resolve, reject) => {\n      request.addEventListener('error', () => {\n        reject(request.error);\n      });\n      request.addEventListener('upgradeneeded', () => {\n        const db = request.result;\n        try {\n          db.createObjectStore(DB_OBJECTSTORE_NAME, {\n            keyPath: DB_DATA_KEYPATH\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n      request.addEventListener('success', async () => {\n        const db = request.result;\n        // Strange bug that occurs in Firefox when multiple tabs are opened at the\n        // same time. The only way to recover seems to be deleting the database\n        // and re-initializing it.\n        // https://github.com/firebase/firebase-js-sdk/issues/634\n        if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n          // Need to close the database or else you get a `blocked` event\n          db.close();\n          await _deleteDatabase();\n          resolve(await _openDatabase());\n        } else {\n          resolve(db);\n        }\n      });\n    });\n  }\n  async function _putObject(db, key, value) {\n    const request = getObjectStore(db, true).put({\n      [DB_DATA_KEYPATH]: key,\n      value\n    });\n    return new DBPromise(request).toPromise();\n  }\n  async function getObject(db, key) {\n    const request = getObjectStore(db, false).get(key);\n    const data = await new DBPromise(request).toPromise();\n    return data === undefined ? null : data.value;\n  }\n  function _deleteObject(db, key) {\n    const request = getObjectStore(db, true).delete(key);\n    return new DBPromise(request).toPromise();\n  }\n  const _POLLING_INTERVAL_MS = 800;\n  const _TRANSACTION_RETRY_COUNT = 3;\n  class IndexedDBLocalPersistence {\n    constructor() {\n      this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\n      this._shouldAllowMigration = true;\n      this.listeners = {};\n      this.localCache = {};\n      // setTimeout return value is platform specific\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.pollTimer = null;\n      this.pendingWrites = 0;\n      this.receiver = null;\n      this.sender = null;\n      this.serviceWorkerReceiverAvailable = false;\n      this.activeServiceWorker = null;\n      // Fire & forget the service worker registration as it may never resolve\n      this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {}, () => {});\n    }\n    async _openDb() {\n      if (this.db) {\n        return this.db;\n      }\n      this.db = await _openDatabase();\n      return this.db;\n    }\n    async _withRetries(op) {\n      let numAttempts = 0;\n      while (true) {\n        try {\n          const db = await this._openDb();\n          return await op(db);\n        } catch (e) {\n          if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n            throw e;\n          }\n          if (this.db) {\n            this.db.close();\n            this.db = undefined;\n          }\n          // TODO: consider adding exponential backoff\n        }\n      }\n    }\n    /**\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n     * postMessage interface to send these events to the worker ourselves.\n     */\n    async initializeServiceWorkerMessaging() {\n      return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n    }\n    /**\n     * As the worker we should listen to events from the main window.\n     */\n    async initializeReceiver() {\n      this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\n      // Refresh from persistence if we receive a KeyChanged message.\n      this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, async (_origin, data) => {\n        const keys = await this._poll();\n        return {\n          keyProcessed: keys.includes(data.key)\n        };\n      });\n      // Let the sender know that we are listening so they give us more timeout.\n      this.receiver._subscribe(\"ping\" /* _EventType.PING */, async (_origin, _data) => {\n        return [\"keyChanged\" /* _EventType.KEY_CHANGED */];\n      });\n    }\n    /**\n     * As the main window, we should let the worker know when keys change (set and remove).\n     *\n     * @remarks\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n     * may not resolve.\n     */\n    async initializeSender() {\n      // Check to see if there's an active service worker.\n      this.activeServiceWorker = await _getActiveServiceWorker();\n      if (!this.activeServiceWorker) {\n        return;\n      }\n      this.sender = new Sender(this.activeServiceWorker);\n      // Ping the service worker to check what events they can handle.\n      const results = await this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);\n      if (!results) {\n        return;\n      }\n      if (results[0]?.fulfilled && results[0]?.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */)) {\n        this.serviceWorkerReceiverAvailable = true;\n      }\n    }\n    /**\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\n     * worker will just trigger a full sync anyway.\n     *\n     * @remarks\n     * For now, we only support one service worker per page.\n     *\n     * @param key - Storage key which changed.\n     */\n    async notifyServiceWorker(key) {\n      if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {\n        return;\n      }\n      try {\n        await this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, {\n          key\n        },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable ? 800 /* _TimeoutDuration.LONG_ACK */ : 50 /* _TimeoutDuration.ACK */);\n      } catch {\n        // This is a best effort approach. Ignore errors.\n      }\n    }\n    async _isAvailable() {\n      try {\n        if (!indexedDB) {\n          return false;\n        }\n        const db = await _openDatabase();\n        await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n        await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n        return true;\n      } catch {}\n      return false;\n    }\n    async _withPendingWrite(write) {\n      this.pendingWrites++;\n      try {\n        await write();\n      } finally {\n        this.pendingWrites--;\n      }\n    }\n    async _set(key, value) {\n      return this._withPendingWrite(async () => {\n        await this._withRetries(db => _putObject(db, key, value));\n        this.localCache[key] = value;\n        return this.notifyServiceWorker(key);\n      });\n    }\n    async _get(key) {\n      const obj = await this._withRetries(db => getObject(db, key));\n      this.localCache[key] = obj;\n      return obj;\n    }\n    async _remove(key) {\n      return this._withPendingWrite(async () => {\n        await this._withRetries(db => _deleteObject(db, key));\n        delete this.localCache[key];\n        return this.notifyServiceWorker(key);\n      });\n    }\n    async _poll() {\n      // TODO: check if we need to fallback if getAll is not supported\n      const result = await this._withRetries(db => {\n        const getAllRequest = getObjectStore(db, false).getAll();\n        return new DBPromise(getAllRequest).toPromise();\n      });\n      if (!result) {\n        return [];\n      }\n      // If we have pending writes in progress abort, we'll get picked up on the next poll\n      if (this.pendingWrites !== 0) {\n        return [];\n      }\n      const keys = [];\n      const keysInResult = new Set();\n      if (result.length !== 0) {\n        for (const {\n          fbase_key: key,\n          value\n        } of result) {\n          keysInResult.add(key);\n          if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n            this.notifyListeners(key, value);\n            keys.push(key);\n          }\n        }\n      }\n      for (const localKey of Object.keys(this.localCache)) {\n        if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n          // Deleted\n          this.notifyListeners(localKey, null);\n          keys.push(localKey);\n        }\n      }\n      return keys;\n    }\n    notifyListeners(key, newValue) {\n      this.localCache[key] = newValue;\n      const listeners = this.listeners[key];\n      if (listeners) {\n        for (const listener of Array.from(listeners)) {\n          listener(newValue);\n        }\n      }\n    }\n    startPolling() {\n      this.stopPolling();\n      this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\n    }\n    stopPolling() {\n      if (this.pollTimer) {\n        clearInterval(this.pollTimer);\n        this.pollTimer = null;\n      }\n    }\n    _addListener(key, listener) {\n      if (Object.keys(this.listeners).length === 0) {\n        this.startPolling();\n      }\n      if (!this.listeners[key]) {\n        this.listeners[key] = new Set();\n        // Populate the cache to avoid spuriously triggering on first poll.\n        void this._get(key); // This can happen in the background async and we can return immediately.\n      }\n      this.listeners[key].add(listener);\n    }\n    _removeListener(key, listener) {\n      if (this.listeners[key]) {\n        this.listeners[key].delete(listener);\n        if (this.listeners[key].size === 0) {\n          delete this.listeners[key];\n        }\n      }\n      if (Object.keys(this.listeners).length === 0) {\n        this.stopPolling();\n      }\n    }\n  }\n  IndexedDBLocalPersistence.type = 'LOCAL';\n  /**\n   * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const indexedDBLocalPersistence = IndexedDBLocalPersistence;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // ReCaptcha will load using the same callback, so the callback function needs\n  // to be kept around\n  const _JSLOAD_CALLBACK = _generateCallbackName('rcb');\n  const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n  /**\n   * Loader for the GReCaptcha library. There should only ever be one of this.\n   */\n  class ReCaptchaLoaderImpl {\n    constructor() {\n      this.hostLanguage = '';\n      this.counter = 0;\n      /**\n       * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n       * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n       * `window.grecaptcha.render()` will not. Another load will add it.\n       */\n      this.librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n    }\n    load(auth, hl = '') {\n      _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n        return Promise.resolve(_window().grecaptcha);\n      }\n      return new Promise((resolve, reject) => {\n        const networkTimeout = _window().setTimeout(() => {\n          reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, NETWORK_TIMEOUT_DELAY.get());\n        _window()[_JSLOAD_CALLBACK] = () => {\n          _window().clearTimeout(networkTimeout);\n          delete _window()[_JSLOAD_CALLBACK];\n          const recaptcha = _window().grecaptcha;\n          if (!recaptcha || !isV2(recaptcha)) {\n            reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n            return;\n          }\n          // Wrap the recaptcha render function so that we know if the developer has\n          // called it separately\n          const render = recaptcha.render;\n          recaptcha.render = (container, params) => {\n            const widgetId = render(container, params);\n            this.counter++;\n            return widgetId;\n          };\n          this.hostLanguage = hl;\n          resolve(recaptcha);\n        };\n        const url = `${_recaptchaV2ScriptUrl()}?${(0, _firebaseUtil.querystring)({\n          onload: _JSLOAD_CALLBACK,\n          render: 'explicit',\n          hl\n        })}`;\n        _loadJS(url).catch(() => {\n          clearTimeout(networkTimeout);\n          reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n        });\n      });\n    }\n    clearedOneInstance() {\n      this.counter--;\n    }\n    shouldResolveImmediately(hl) {\n      // We can resolve immediately if:\n      //   • grecaptcha is already defined AND (\n      //     1. the requested language codes are the same OR\n      //     2. there exists already a ReCaptcha on the page\n      //     3. the library was already loaded by the app\n      // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n      // that are already in the page\n      return !!_window().grecaptcha?.render && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n    }\n  }\n  function isHostLanguageValid(hl) {\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n  }\n  class MockReCaptchaLoaderImpl {\n    async load(auth) {\n      return new MockReCaptcha(auth);\n    }\n    clearedOneInstance() {}\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n  const DEFAULT_PARAMS = {\n    theme: 'light',\n    type: 'image'\n  };\n  /**\n   * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n   *\n   * @remarks\n   * `RecaptchaVerifier` does not work in a Node.js environment.\n   *\n   * @public\n   */\n  class RecaptchaVerifier {\n    /**\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     * @param containerOrId - The reCAPTCHA container parameter.\n     *\n     * @remarks\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n     * an element ID. The corresponding element must also must be in the DOM at the time of\n     * initialization.\n     *\n     * @param parameters - The optional reCAPTCHA parameters.\n     *\n     * @remarks\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n     * 'invisible'.\n     */\n    constructor(authExtern, containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS)) {\n      this.parameters = parameters;\n      /**\n       * The application verifier type.\n       *\n       * @remarks\n       * For a reCAPTCHA verifier, this is 'recaptcha'.\n       */\n      this.type = RECAPTCHA_VERIFIER_TYPE;\n      this.destroyed = false;\n      this.widgetId = null;\n      this.tokenChangeListeners = new Set();\n      this.renderPromise = null;\n      this.recaptcha = null;\n      this.auth = _castAuth(authExtern);\n      this.isInvisible = this.parameters.size === 'invisible';\n      _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n      const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.container = container;\n      this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n      this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n      this.validateStartingState();\n      // TODO: Figure out if sdk version is needed\n    }\n    /**\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n     *\n     * @returns A Promise for the reCAPTCHA token.\n     */\n    async verify() {\n      this.assertNotDestroyed();\n      const id = await this.render();\n      const recaptcha = this.getAssertedRecaptcha();\n      const response = recaptcha.getResponse(id);\n      if (response) {\n        return response;\n      }\n      return new Promise(resolve => {\n        const tokenChange = token => {\n          if (!token) {\n            return; // Ignore token expirations.\n          }\n          this.tokenChangeListeners.delete(tokenChange);\n          resolve(token);\n        };\n        this.tokenChangeListeners.add(tokenChange);\n        if (this.isInvisible) {\n          recaptcha.execute(id);\n        }\n      });\n    }\n    /**\n     * Renders the reCAPTCHA widget on the page.\n     *\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\n     */\n    render() {\n      try {\n        this.assertNotDestroyed();\n      } catch (e) {\n        // This method returns a promise. Since it's not async (we want to return the\n        // _same_ promise if rendering is still occurring), the API surface should\n        // reject with the error rather than just throw\n        return Promise.reject(e);\n      }\n      if (this.renderPromise) {\n        return this.renderPromise;\n      }\n      this.renderPromise = this.makeRenderPromise().catch(e => {\n        this.renderPromise = null;\n        throw e;\n      });\n      return this.renderPromise;\n    }\n    /** @internal */\n    _reset() {\n      this.assertNotDestroyed();\n      if (this.widgetId !== null) {\n        this.getAssertedRecaptcha().reset(this.widgetId);\n      }\n    }\n    /**\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\n     */\n    clear() {\n      this.assertNotDestroyed();\n      this.destroyed = true;\n      this._recaptchaLoader.clearedOneInstance();\n      if (!this.isInvisible) {\n        this.container.childNodes.forEach(node => {\n          this.container.removeChild(node);\n        });\n      }\n    }\n    validateStartingState() {\n      _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    }\n    makeTokenCallback(existing) {\n      return token => {\n        this.tokenChangeListeners.forEach(listener => listener(token));\n        if (typeof existing === 'function') {\n          existing(token);\n        } else if (typeof existing === 'string') {\n          const globalFunc = _window()[existing];\n          if (typeof globalFunc === 'function') {\n            globalFunc(token);\n          }\n        }\n      };\n    }\n    assertNotDestroyed() {\n      _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    async makeRenderPromise() {\n      await this.init();\n      if (!this.widgetId) {\n        let container = this.container;\n        if (!this.isInvisible) {\n          const guaranteedEmpty = document.createElement('div');\n          container.appendChild(guaranteedEmpty);\n          container = guaranteedEmpty;\n        }\n        this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n      }\n      return this.widgetId;\n    }\n    async init() {\n      _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      await domReady();\n      this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\n      const siteKey = await getRecaptchaParams(this.auth);\n      _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.parameters.sitekey = siteKey;\n    }\n    getAssertedRecaptcha() {\n      _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.recaptcha;\n    }\n  }\n  function domReady() {\n    let resolver = null;\n    return new Promise(resolve => {\n      if (document.readyState === 'complete') {\n        resolve();\n        return;\n      }\n      // Document not ready, wait for load before resolving.\n      // Save resolver, so we can remove listener in case it was externally\n      // cancelled.\n      resolver = () => resolve();\n      window.addEventListener('load', resolver);\n    }).catch(e => {\n      if (resolver) {\n        window.removeEventListener('load', resolver);\n      }\n      throw e;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class ConfirmationResultImpl {\n    constructor(verificationId, onConfirmation) {\n      this.verificationId = verificationId;\n      this.onConfirmation = onConfirmation;\n    }\n    confirm(verificationCode) {\n      const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n      return this.onConfirmation(authCredential);\n    }\n  }\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   * @remarks\n   * This method sends a code via SMS to the given\n   * phone number, and returns a {@link ConfirmationResult}. After the user\n   * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n   * with the code to sign the user in.\n   *\n   * For abuse prevention, this method requires a {@link ApplicationVerifier}.\n   * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.\n   * This function can work on other platforms that do not support the\n   * {@link RecaptchaVerifier} (like React Native), but you need to use a\n   * third-party {@link ApplicationVerifier} implementation.\n   *\n   * If you've enabled project-level reCAPTCHA Enterprise bot protection in\n   * Enforce mode, you can omit the {@link ApplicationVerifier}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain a verificationCode from the user.\n   * const credential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, (0, _firebaseUtil.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\n  }\n  /**\n   * Links the user account with the given phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    await _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _firebaseUtil.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\n  }\n  /**\n   * Re-authenticates a user using a fresh phone credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n   *\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _firebaseUtil.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\n  }\n  /**\n   * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n   *\n   */\n  async function _verifyPhoneNumber(auth, options, verifier) {\n    if (!auth._getRecaptchaConfig()) {\n      try {\n        await _initializeRecaptchaConfig(auth);\n      } catch (error) {\n        // If an error occurs while fetching the config, there is no way to know the enablement state\n        // of Phone provider, so we proceed with recaptcha V2 verification.\n        // The error is likely \"recaptchaKey undefined\", as reCAPTCHA Enterprise is not\n        // enabled for any provider.\n        console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');\n      }\n    }\n    try {\n      let phoneInfoOptions;\n      if (typeof options === 'string') {\n        phoneInfoOptions = {\n          phoneNumber: options\n        };\n      } else {\n        phoneInfoOptions = options;\n      }\n      if ('session' in phoneInfoOptions) {\n        const session = phoneInfoOptions.session;\n        if ('phoneNumber' in phoneInfoOptions) {\n          _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          const startPhoneMfaEnrollmentRequest = {\n            idToken: session.credential,\n            phoneEnrollmentInfo: {\n              phoneNumber: phoneInfoOptions.phoneNumber,\n              clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n            }\n          };\n          const startEnrollPhoneMfaActionCallback = async (authInstance, request) => {\n            // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n            if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {\n              _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n              return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);\n            }\n            return startEnrollPhoneMfa(authInstance, request);\n          };\n          const startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */, startEnrollPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n          const response = await startPhoneMfaEnrollmentResponse.catch(error => {\n            return Promise.reject(error);\n          });\n          return response.phoneSessionInfo.sessionInfo;\n        } else {\n          _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          const mfaEnrollmentId = phoneInfoOptions.multiFactorHint?.uid || phoneInfoOptions.multiFactorUid;\n          _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\n          const startPhoneMfaSignInRequest = {\n            mfaPendingCredential: session.credential,\n            mfaEnrollmentId,\n            phoneSignInInfo: {\n              clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n            }\n          };\n          const startSignInPhoneMfaActionCallback = async (authInstance, request) => {\n            // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n            if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {\n              _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n              return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);\n            }\n            return startSignInPhoneMfa(authInstance, request);\n          };\n          const startPhoneMfaSignInResponse = handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */, startSignInPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n          const response = await startPhoneMfaSignInResponse.catch(error => {\n            return Promise.reject(error);\n          });\n          return response.phoneResponseInfo.sessionInfo;\n        }\n      } else {\n        const sendPhoneVerificationCodeRequest = {\n          phoneNumber: phoneInfoOptions.phoneNumber,\n          clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n        };\n        const sendPhoneVerificationCodeActionCallback = async (authInstance, request) => {\n          // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n          if (request.captchaResponse === FAKE_TOKEN) {\n            _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n            return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);\n          }\n          return sendPhoneVerificationCode(authInstance, request);\n        };\n        const sendPhoneVerificationCodeResponse = handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, \"sendVerificationCode\" /* RecaptchaActionName.SEND_VERIFICATION_CODE */, sendPhoneVerificationCodeActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n        const response = await sendPhoneVerificationCodeResponse.catch(error => {\n          return Promise.reject(error);\n        });\n        return response.sessionInfo;\n      }\n    } finally {\n      verifier?._reset();\n    }\n  }\n  /**\n   * Updates the user's phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * await updatePhoneNumber(user, phoneCredential);\n   * ```\n   *\n   * @param user - The user.\n   * @param credential - A credential authenticating the new phone number.\n   *\n   * @public\n   */\n  async function updatePhoneNumber(user, credential) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    await _link$1(userInternal, credential);\n  }\n  // Helper function that fetches and injects a reCAPTCHA v2 token into the request.\n  async function injectRecaptchaV2Token(auth, request, recaptchaV2Verifier) {\n    _assert(recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const recaptchaV2Token = await recaptchaV2Verifier.verify();\n    _assert(typeof recaptchaV2Token === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const newRequest = Object.assign({}, request);\n    if ('phoneEnrollmentInfo' in newRequest) {\n      const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n      const captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;\n      const clientType = newRequest.phoneEnrollmentInfo.clientType;\n      const recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;\n      Object.assign(newRequest, {\n        'phoneEnrollmentInfo': {\n          phoneNumber,\n          recaptchaToken: recaptchaV2Token,\n          captchaResponse,\n          clientType,\n          recaptchaVersion\n        }\n      });\n      return newRequest;\n    } else if ('phoneSignInInfo' in newRequest) {\n      const captchaResponse = newRequest.phoneSignInInfo.captchaResponse;\n      const clientType = newRequest.phoneSignInInfo.clientType;\n      const recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;\n      Object.assign(newRequest, {\n        'phoneSignInInfo': {\n          recaptchaToken: recaptchaV2Token,\n          captchaResponse,\n          clientType,\n          recaptchaVersion\n        }\n      });\n      return newRequest;\n    } else {\n      Object.assign(newRequest, {\n        'recaptchaToken': recaptchaV2Token\n      });\n      return newRequest;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link PhoneAuthCredential}.\n   *\n   * @remarks\n   * `PhoneAuthProvider` does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, phoneCredential);\n   * ```\n   *\n   * @public\n   */\n  class PhoneAuthProvider {\n    /**\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n     *\n     */\n    constructor(auth) {\n      /** Always set to {@link ProviderId}.PHONE. */\n      this.providerId = PhoneAuthProvider.PROVIDER_ID;\n      this.auth = _castAuth(auth);\n    }\n    /**\n     *\n     * Starts a phone number authentication flow by sending a verification code to the given phone\n     * number.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n     * E.164 format (e.g. +16505550101).\n     * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents\n     * requests from unauthorized clients. This SDK includes an implementation\n     * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled\n     * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is\n     * optional; in all other configurations, the parameter is required.\n     *\n     * @returns A Promise for a verification ID that can be passed to\n     * {@link PhoneAuthProvider.credential} to identify this flow.\n     */\n    verifyPhoneNumber(phoneOptions, applicationVerifier) {\n      return _verifyPhoneNumber(this.auth, phoneOptions, (0, _firebaseUtil.getModularInstance)(applicationVerifier));\n    }\n    /**\n     * Creates a phone auth credential, given the verification ID from\n     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n     * mobile device.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = await confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n     * @param verificationCode - The verification code sent to the user's mobile device.\n     *\n     * @returns The auth provider credential.\n     */\n    static credential(verificationId, verificationCode) {\n      return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential}.\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      const credential = userCredential;\n      return PhoneAuthProvider.credentialFromTaggedObject(credential);\n    }\n    /**\n     * Returns an {@link AuthCredential} when passed an error.\n     *\n     * @remarks\n     *\n     * This method works for errors like\n     * `auth/account-exists-with-different-credentials`. This is useful for\n     * recovering when attempting to set a user's phone number but the number\n     * in question is already tied to another account. For example, the following\n     * code tries to update the current user's phone number, and if that\n     * fails, links the user with the account associated with that number:\n     *\n     * ```js\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n     * try {\n     *   const code = ''; // Prompt the user for the verification code\n     *   await updatePhoneNumber(\n     *       auth.currentUser,\n     *       PhoneAuthProvider.credential(verificationId, code));\n     * } catch (e) {\n     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n     *     const cred = PhoneAuthProvider.credentialFromError(e);\n     *     await linkWithCredential(auth.currentUser, cred);\n     *   }\n     * }\n     *\n     * // At this point, auth.currentUser.phoneNumber === number.\n     * ```\n     *\n     * @param error - The error to generate a credential from.\n     */\n    static credentialFromError(error) {\n      return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        phoneNumber,\n        temporaryProof\n      } = tokenResponse;\n      if (phoneNumber && temporaryProof) {\n        return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n      }\n      return null;\n    }\n  }\n  /** Always set to {@link ProviderId}.PHONE. */\n  PhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  PhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Chooses a popup/redirect resolver to use. This prefers the override (which\n   * is directly passed in), and falls back to the property set on the auth\n   * object. If neither are available, this function errors w/ an argument error.\n   */\n  function _withDefaultResolver(auth, resolverOverride) {\n    if (resolverOverride) {\n      return _getInstance(resolverOverride);\n    }\n    _assert(auth._popupRedirectResolver, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return auth._popupRedirectResolver;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class IdpCredential extends AuthCredential {\n    constructor(params) {\n      super(\"custom\" /* ProviderId.CUSTOM */, \"custom\" /* ProviderId.CUSTOM */);\n      this.params = params;\n    }\n    _getIdTokenResponse(auth) {\n      return signInWithIdp(auth, this._buildIdpRequest());\n    }\n    _linkToIdToken(auth, idToken) {\n      return signInWithIdp(auth, this._buildIdpRequest(idToken));\n    }\n    _getReauthenticationResolver(auth) {\n      return signInWithIdp(auth, this._buildIdpRequest());\n    }\n    _buildIdpRequest(idToken) {\n      const request = {\n        requestUri: this.params.requestUri,\n        sessionId: this.params.sessionId,\n        postBody: this.params.postBody,\n        tenantId: this.params.tenantId,\n        pendingToken: this.params.pendingToken,\n        returnSecureToken: true,\n        returnIdpCredential: true\n      };\n      if (idToken) {\n        request.idToken = idToken;\n      }\n      return request;\n    }\n  }\n  function _signIn(params) {\n    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\n  }\n  function _reauth(params) {\n    const {\n      auth,\n      user\n    } = params;\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\n  }\n  async function _link(params) {\n    const {\n      auth,\n      user\n    } = params;\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return _link$1(user, new IdpCredential(params), params.bypassAuthState);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n   * events\n   */\n  class AbstractPopupRedirectOperation {\n    constructor(auth, filter, resolver, user, bypassAuthState = false) {\n      this.auth = auth;\n      this.resolver = resolver;\n      this.user = user;\n      this.bypassAuthState = bypassAuthState;\n      this.pendingPromise = null;\n      this.eventManager = null;\n      this.filter = Array.isArray(filter) ? filter : [filter];\n    }\n    execute() {\n      return new Promise(async (resolve, reject) => {\n        this.pendingPromise = {\n          resolve,\n          reject\n        };\n        try {\n          this.eventManager = await this.resolver._initialize(this.auth);\n          await this.onExecution();\n          this.eventManager.registerConsumer(this);\n        } catch (e) {\n          this.reject(e);\n        }\n      });\n    }\n    async onAuthEvent(event) {\n      const {\n        urlResponse,\n        sessionId,\n        postBody,\n        tenantId,\n        error,\n        type\n      } = event;\n      if (error) {\n        this.reject(error);\n        return;\n      }\n      const params = {\n        auth: this.auth,\n        requestUri: urlResponse,\n        sessionId: sessionId,\n        tenantId: tenantId || undefined,\n        postBody: postBody || undefined,\n        user: this.user,\n        bypassAuthState: this.bypassAuthState\n      };\n      try {\n        this.resolve(await this.getIdpTask(type)(params));\n      } catch (e) {\n        this.reject(e);\n      }\n    }\n    onError(error) {\n      this.reject(error);\n    }\n    getIdpTask(type) {\n      switch (type) {\n        case \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */:\n        case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n          return _signIn;\n        case \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */:\n        case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n          return _link;\n        case \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */:\n        case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n          return _reauth;\n        default:\n          _fail(this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    resolve(cred) {\n      debugAssert(this.pendingPromise, 'Pending promise was never set');\n      this.pendingPromise.resolve(cred);\n      this.unregisterAndCleanUp();\n    }\n    reject(error) {\n      debugAssert(this.pendingPromise, 'Pending promise was never set');\n      this.pendingPromise.reject(error);\n      this.unregisterAndCleanUp();\n    }\n    unregisterAndCleanUp() {\n      if (this.eventManager) {\n        this.eventManager.unregisterConsumer(this);\n      }\n      this.pendingPromise = null;\n      this.cleanUp();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n  /**\n   * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n   *\n   * @remarks\n   * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n   * unsuccessful, returns an error object containing additional information about the error.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function signInWithPopup(auth, provider, resolver) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_createError(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n    }\n    const authInternal = _castAuth(auth);\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\n    const action = new PopupOperation(authInternal, \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */, provider, resolverInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n   * OAuth flow.\n   *\n   * @remarks\n   * If the reauthentication is successful, the returned result will contain the user and the\n   * provider's credential.\n   *\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   * // Reauthenticate using a popup.\n   * await reauthenticateWithPopup(result.user, provider);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function reauthenticateWithPopup(user, provider, resolver) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_createError(userInternal.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n    }\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n   *\n   * @remarks\n   * If the linking is successful, the returned result will contain the user and the provider's credential.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using some other provider.\n   * const result = await signInWithEmailAndPassword(auth, email, password);\n   * // Link using a popup.\n   * const provider = new FacebookAuthProvider();\n   * await linkWithPopup(result.user, provider);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function linkWithPopup(user, provider, resolver) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    const action = new PopupOperation(userInternal.auth, \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */, provider, resolverInternal, userInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n   * events\n   *\n   */\n  class PopupOperation extends AbstractPopupRedirectOperation {\n    constructor(auth, filter, provider, resolver, user) {\n      super(auth, filter, resolver, user);\n      this.provider = provider;\n      this.authWindow = null;\n      this.pollId = null;\n      if (PopupOperation.currentPopupAction) {\n        PopupOperation.currentPopupAction.cancel();\n      }\n      PopupOperation.currentPopupAction = this;\n    }\n    async executeNotNull() {\n      const result = await this.execute();\n      _assert(result, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return result;\n    }\n    async onExecution() {\n      debugAssert(this.filter.length === 1, 'Popup operations only handle one event');\n      const eventId = _generateEventId();\n      this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0],\n      // There's always one, see constructor\n      eventId);\n      this.authWindow.associatedEvent = eventId;\n      // Check for web storage support and origin validation _after_ the popup is\n      // loaded. These operations are slow (~1 second or so) Rather than\n      // waiting on them before opening the window, optimistically open the popup\n      // and check for storage support at the same time. If storage support is\n      // not available, this will cause the whole thing to reject properly. It\n      // will also close the popup, but since the promise has already rejected,\n      // the popup closed by user poll will reject into the void.\n      this.resolver._originValidation(this.auth).catch(e => {\n        this.reject(e);\n      });\n      this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n        if (!isSupported) {\n          this.reject(_createError(this.auth, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));\n        }\n      });\n      // Handle user closure. Notice this does *not* use await\n      this.pollUserCancellation();\n    }\n    get eventId() {\n      return this.authWindow?.associatedEvent || null;\n    }\n    cancel() {\n      this.reject(_createError(this.auth, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));\n    }\n    cleanUp() {\n      if (this.authWindow) {\n        this.authWindow.close();\n      }\n      if (this.pollId) {\n        window.clearTimeout(this.pollId);\n      }\n      this.authWindow = null;\n      this.pollId = null;\n      PopupOperation.currentPopupAction = null;\n    }\n    pollUserCancellation() {\n      const poll = () => {\n        if (this.authWindow?.window?.closed) {\n          // Make sure that there is sufficient time for whatever action to\n          // complete. The window could have closed but the sign in network\n          // call could still be in flight. This is specifically true for\n          // Firefox or if the opener is in an iframe, in which case the oauth\n          // helper closes the popup.\n          this.pollId = window.setTimeout(() => {\n            this.pollId = null;\n            this.reject(_createError(this.auth, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));\n          }, 8000 /* _Timeout.AUTH_EVENT */);\n          return;\n        }\n        this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n      };\n      poll();\n    }\n  }\n  // Only one popup is ever shown at once. The lifecycle of the current popup\n  // can be managed / cancelled by the constructor.\n  PopupOperation.currentPopupAction = null;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const PENDING_REDIRECT_KEY = 'pendingRedirect';\n  // We only get one redirect outcome for any one auth, so just store it\n  // in here.\n  const redirectOutcomeMap = new Map();\n  class RedirectAction extends AbstractPopupRedirectOperation {\n    constructor(auth, resolver, bypassAuthState = false) {\n      super(auth, [\"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, \"unknown\" /* AuthEventType.UNKNOWN */], resolver, undefined, bypassAuthState);\n      this.eventId = null;\n    }\n    /**\n     * Override the execute function; if we already have a redirect result, then\n     * just return it.\n     */\n    async execute() {\n      let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n      if (!readyOutcome) {\n        try {\n          const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\n          const result = hasPendingRedirect ? await super.execute() : null;\n          readyOutcome = () => Promise.resolve(result);\n        } catch (e) {\n          readyOutcome = () => Promise.reject(e);\n        }\n        redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n      }\n      // If we're not bypassing auth state, the ready outcome should be set to\n      // null.\n      if (!this.bypassAuthState) {\n        redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n      }\n      return readyOutcome();\n    }\n    async onAuthEvent(event) {\n      if (event.type === \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {\n        return super.onAuthEvent(event);\n      } else if (event.type === \"unknown\" /* AuthEventType.UNKNOWN */) {\n        // This is a sentinel value indicating there's no pending redirect\n        this.resolve(null);\n        return;\n      }\n      if (event.eventId) {\n        const user = await this.auth._redirectUserForId(event.eventId);\n        if (user) {\n          this.user = user;\n          return super.onAuthEvent(event);\n        } else {\n          this.resolve(null);\n        }\n      }\n    }\n    async onExecution() {}\n    cleanUp() {}\n  }\n  async function _getAndClearPendingRedirectStatus(resolver, auth) {\n    const key = pendingRedirectKey(auth);\n    const persistence = resolverPersistence(resolver);\n    if (!(await persistence._isAvailable())) {\n      return false;\n    }\n    const hasPendingRedirect = (await persistence._get(key)) === 'true';\n    await persistence._remove(key);\n    return hasPendingRedirect;\n  }\n  async function _setPendingRedirectStatus(resolver, auth) {\n    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n  }\n  function _clearRedirectOutcomes() {\n    redirectOutcomeMap.clear();\n  }\n  function _overrideRedirectResult(auth, result) {\n    redirectOutcomeMap.set(auth._key(), result);\n  }\n  function resolverPersistence(resolver) {\n    return _getInstance(resolver._redirectPersistence);\n  }\n  function pendingRedirectKey(auth) {\n    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Authenticates a Firebase client using a full-page redirect flow.\n   *\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link signInWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // You can add additional scopes to the provider:\n   * provider.addScope('user_birthday');\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * // As this API can be used for sign-in, linking and reauthentication,\n   * // check the operationType to determine what triggered this redirect\n   * // operation.\n   * const operationType = result.operationType;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function signInWithRedirect(auth, provider, resolver) {\n    return _signInWithRedirect(auth, provider, resolver);\n  }\n  async function _signInWithRedirect(auth, provider, resolver) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await authInternal._initializationPromise;\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\n    await _setPendingRedirectStatus(resolverInternal, authInternal);\n    return resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */);\n  }\n  /**\n   * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link reauthenticateWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * // Reauthenticate using a redirect.\n   * await reauthenticateWithRedirect(result.user, provider);\n   * // This will again trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function reauthenticateWithRedirect(user, provider, resolver) {\n    return _reauthenticateWithRedirect(user, provider, resolver);\n  }\n  async function _reauthenticateWithRedirect(user, provider, resolver) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    if ((0, _firebaseApp._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await userInternal.auth._initializationPromise;\n    // Allow the resolver to error before persisting the redirect user\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n    const eventId = await prepareUserForRedirect(userInternal);\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, eventId);\n  }\n  /**\n   * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link linkWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using some other provider.\n   * const result = await signInWithEmailAndPassword(auth, email, password);\n   * // Link using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * await linkWithRedirect(result.user, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function linkWithRedirect(user, provider, resolver) {\n    return _linkWithRedirect(user, provider, resolver);\n  }\n  async function _linkWithRedirect(user, provider, resolver) {\n    const userInternal = (0, _firebaseUtil.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await userInternal.auth._initializationPromise;\n    // Allow the resolver to error before persisting the redirect user\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    await _assertLinkedStatus(false, userInternal, provider.providerId);\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n    const eventId = await prepareUserForRedirect(userInternal);\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, eventId);\n  }\n  /**\n   * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n   *\n   * @remarks\n   * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n   * error. If no redirect operation was called, returns `null`.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // You can add additional scopes to the provider:\n   * provider.addScope('user_birthday');\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * // As this API can be used for sign-in, linking and reauthentication,\n   * // check the operationType to determine what triggered this redirect\n   * // operation.\n   * const operationType = result.operationType;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function getRedirectResult(auth, resolver) {\n    await _castAuth(auth)._initializationPromise;\n    return _getRedirectResult(auth, resolver, false);\n  }\n  async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\n    if ((0, _firebaseApp._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const resolver = _withDefaultResolver(authInternal, resolverExtern);\n    const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n    const result = await action.execute();\n    if (result && !bypassAuthState) {\n      delete result.user._redirectEventId;\n      await authInternal._persistUserIfCurrent(result.user);\n      await authInternal._setRedirectUser(null, resolverExtern);\n    }\n    return result;\n  }\n  async function prepareUserForRedirect(user) {\n    const eventId = _generateEventId(`${user.uid}:::`);\n    user._redirectEventId = eventId;\n    await user.auth._setRedirectUser(user);\n    await user.auth._persistUserIfCurrent(user);\n    return eventId;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // The amount of time to store the UIDs of seen events; this is\n  // set to 10 min by default\n  const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\n  class AuthEventManager {\n    constructor(auth) {\n      this.auth = auth;\n      this.cachedEventUids = new Set();\n      this.consumers = new Set();\n      this.queuedRedirectEvent = null;\n      this.hasHandledPotentialRedirect = false;\n      this.lastProcessedEventTime = Date.now();\n    }\n    registerConsumer(authEventConsumer) {\n      this.consumers.add(authEventConsumer);\n      if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\n        this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n        this.saveEventToCache(this.queuedRedirectEvent);\n        this.queuedRedirectEvent = null;\n      }\n    }\n    unregisterConsumer(authEventConsumer) {\n      this.consumers.delete(authEventConsumer);\n    }\n    onEvent(event) {\n      // Check if the event has already been handled\n      if (this.hasEventBeenHandled(event)) {\n        return false;\n      }\n      let handled = false;\n      this.consumers.forEach(consumer => {\n        if (this.isEventForConsumer(event, consumer)) {\n          handled = true;\n          this.sendToConsumer(event, consumer);\n          this.saveEventToCache(event);\n        }\n      });\n      if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n        // If we've already seen a redirect before, or this is a popup event,\n        // bail now\n        return handled;\n      }\n      this.hasHandledPotentialRedirect = true;\n      // If the redirect wasn't handled, hang on to it\n      if (!handled) {\n        this.queuedRedirectEvent = event;\n        handled = true;\n      }\n      return handled;\n    }\n    sendToConsumer(event, consumer) {\n      if (event.error && !isNullRedirectEvent(event)) {\n        const code = event.error.code?.split('auth/')[1] || \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */;\n        consumer.onError(_createError(this.auth, code));\n      } else {\n        consumer.onAuthEvent(event);\n      }\n    }\n    isEventForConsumer(event, consumer) {\n      const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;\n      return consumer.filter.includes(event.type) && eventIdMatches;\n    }\n    hasEventBeenHandled(event) {\n      if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {\n        this.cachedEventUids.clear();\n      }\n      return this.cachedEventUids.has(eventUid(event));\n    }\n    saveEventToCache(event) {\n      this.cachedEventUids.add(eventUid(event));\n      this.lastProcessedEventTime = Date.now();\n    }\n  }\n  function eventUid(e) {\n    return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n  }\n  function isNullRedirectEvent({\n    type,\n    error\n  }) {\n    return type === \"unknown\" /* AuthEventType.UNKNOWN */ && error?.code === `auth/${\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */}`;\n  }\n  function isRedirectEvent(event) {\n    switch (event.type) {\n      case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n      case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n      case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n        return true;\n      case \"unknown\" /* AuthEventType.UNKNOWN */:\n        return isNullRedirectEvent(event);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _getProjectConfig(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/projects\" /* Endpoint.GET_PROJECT_CONFIG */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n  const HTTP_REGEX = /^https?/;\n  async function _validateOrigin(auth) {\n    // Skip origin validation if we are in an emulated environment\n    if (auth.config.emulator) {\n      return;\n    }\n    const {\n      authorizedDomains\n    } = await _getProjectConfig(auth);\n    for (const domain of authorizedDomains) {\n      try {\n        if (matchDomain(domain)) {\n          return;\n        }\n      } catch {\n        // Do nothing if there's a URL error; just continue searching\n      }\n    }\n    // In the old SDK, this error also provides helpful messages.\n    _fail(auth, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */);\n  }\n  function matchDomain(expected) {\n    const currentUrl = _getCurrentUrl();\n    const {\n      protocol,\n      hostname\n    } = new URL(currentUrl);\n    if (expected.startsWith('chrome-extension://')) {\n      const ceUrl = new URL(expected);\n      if (ceUrl.hostname === '' && hostname === '') {\n        // For some reason we're not parsing chrome URLs properly\n        return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');\n      }\n      return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n    }\n    if (!HTTP_REGEX.test(protocol)) {\n      return false;\n    }\n    if (IP_ADDRESS_REGEX.test(expected)) {\n      // The domain has to be exactly equal to the pattern, as an IP domain will\n      // only contain the IP, no extra character.\n      return hostname === expected;\n    }\n    // Dots in pattern should be escaped.\n    const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n    // Non ip address domains.\n    // domain.com = *.domain.com OR domain.com\n    const re = new RegExp('^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');\n    return re.test(hostname);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const NETWORK_TIMEOUT = new Delay(30000, 60000);\n  /**\n   * Reset unloaded GApi modules. If gapi.load fails due to a network error,\n   * it will stop working after a retrial. This is a hack to fix this issue.\n   */\n  function resetUnloadedGapiModules() {\n    // Clear last failed gapi.load state to force next gapi.load to first\n    // load the failed gapi.iframes module.\n    // Get gapix.beacon context.\n    const beacon = _window().___jsl;\n    // Get current hint.\n    if (beacon?.H) {\n      // Get gapi hint.\n      for (const hint of Object.keys(beacon.H)) {\n        // Requested modules.\n        beacon.H[hint].r = beacon.H[hint].r || [];\n        // Loaded modules.\n        beacon.H[hint].L = beacon.H[hint].L || [];\n        // Set requested modules to a copy of the loaded modules.\n        beacon.H[hint].r = [...beacon.H[hint].L];\n        // Clear pending callbacks.\n        if (beacon.CP) {\n          for (let i = 0; i < beacon.CP.length; i++) {\n            // Remove all failed pending callbacks.\n            beacon.CP[i] = null;\n          }\n        }\n      }\n    }\n  }\n  function loadGapi(auth) {\n    return new Promise((resolve, reject) => {\n      // Function to run when gapi.load is ready.\n      function loadGapiIframe() {\n        // The developer may have tried to previously run gapi.load and failed.\n        // Run this to fix that.\n        resetUnloadedGapiModules();\n        gapi.load('gapi.iframes', {\n          callback: () => {\n            resolve(gapi.iframes.getContext());\n          },\n          ontimeout: () => {\n            // The above reset may be sufficient, but having this reset after\n            // failure ensures that if the developer calls gapi.load after the\n            // connection is re-established and before another attempt to embed\n            // the iframe, it would work and would not be broken because of our\n            // failed attempt.\n            // Timeout when gapi.iframes.Iframe not loaded.\n            resetUnloadedGapiModules();\n            reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n          },\n          timeout: NETWORK_TIMEOUT.get()\n        });\n      }\n      if (_window().gapi?.iframes?.Iframe) {\n        // If gapi.iframes.Iframe available, resolve.\n        resolve(gapi.iframes.getContext());\n      } else if (!!_window().gapi?.load) {\n        // Gapi loader ready, load gapi.iframes.\n        loadGapiIframe();\n      } else {\n        // Create a new iframe callback when this is called so as not to overwrite\n        // any previous defined callback. This happens if this method is called\n        // multiple times in parallel and could result in the later callback\n        // overwriting the previous one. This would end up with a iframe\n        // timeout.\n        const cbName = _generateCallbackName('iframefcb');\n        // GApi loader not available, dynamically load platform.js.\n        _window()[cbName] = () => {\n          // GApi loader should be ready.\n          if (!!gapi.load) {\n            loadGapiIframe();\n          } else {\n            // Gapi loader failed, throw error.\n            reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n          }\n        };\n        // Load GApi loader.\n        return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`).catch(e => reject(e));\n      }\n    }).catch(error => {\n      // Reset cached promise to allow for retrial.\n      cachedGApiLoader = null;\n      throw error;\n    });\n  }\n  let cachedGApiLoader = null;\n  function _loadGapi(auth) {\n    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n    return cachedGApiLoader;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const PING_TIMEOUT = new Delay(5000, 15000);\n  const IFRAME_PATH = '__/auth/iframe';\n  const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\n  const IFRAME_ATTRIBUTES = {\n    style: {\n      position: 'absolute',\n      top: '-100px',\n      width: '1px',\n      height: '1px'\n    },\n    'aria-hidden': 'true',\n    tabindex: '-1'\n  };\n  // Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n  // anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\n  const EID_FROM_APIHOST = new Map([[\"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */, 'p'],\n  // production\n  ['staging-identitytoolkit.sandbox.googleapis.com', 's'],\n  // staging\n  ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n  ]);\n  function getIframeUrl(auth) {\n    const config = auth.config;\n    _assert(config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n    const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n    const params = {\n      apiKey: config.apiKey,\n      appName: auth.name,\n      v: _firebaseApp.SDK_VERSION\n    };\n    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n    if (eid) {\n      params.eid = eid;\n    }\n    const frameworks = auth._getFrameworks();\n    if (frameworks.length) {\n      params.fw = frameworks.join(',');\n    }\n    return `${url}?${(0, _firebaseUtil.querystring)(params).slice(1)}`;\n  }\n  async function _openIframe(auth) {\n    const context = await _loadGapi(auth);\n    const gapi = _window().gapi;\n    _assert(gapi, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return context.open({\n      where: document.body,\n      url: getIframeUrl(auth),\n      messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n      attributes: IFRAME_ATTRIBUTES,\n      dontclear: true\n    }, iframe => new Promise(async (resolve, reject) => {\n      await iframe.restyle({\n        // Prevent iframe from closing on mouse out.\n        setHideOnLeave: false\n      });\n      const networkError = _createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);\n      // Confirm iframe is correctly loaded.\n      // To fallback on failure, set a timeout.\n      const networkErrorTimer = _window().setTimeout(() => {\n        reject(networkError);\n      }, PING_TIMEOUT.get());\n      // Clear timer and resolve pending iframe ready promise.\n      function clearTimerAndResolve() {\n        _window().clearTimeout(networkErrorTimer);\n        resolve(iframe);\n      }\n      // This returns an IThenable. However the reject part does not call\n      // when the iframe is not loaded.\n      iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n        reject(networkError);\n      });\n    }));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const BASE_POPUP_OPTIONS = {\n    location: 'yes',\n    resizable: 'yes',\n    statusbar: 'yes',\n    toolbar: 'no'\n  };\n  const DEFAULT_WIDTH = 500;\n  const DEFAULT_HEIGHT = 600;\n  const TARGET_BLANK = '_blank';\n  const FIREFOX_EMPTY_URL = 'http://localhost';\n  class AuthPopup {\n    constructor(window) {\n      this.window = window;\n      this.associatedEvent = null;\n    }\n    close() {\n      if (this.window) {\n        try {\n          this.window.close();\n        } catch (e) {}\n      }\n    }\n  }\n  function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n    let target = '';\n    const options = Object.assign({}, BASE_POPUP_OPTIONS, {\n      width: width.toString(),\n      height: height.toString(),\n      top,\n      left\n    });\n    // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n    // specified, even though the popup is not necessarily blocked.\n    const ua = (0, _firebaseUtil.getUA)().toLowerCase();\n    if (name) {\n      target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n    }\n    if (_isFirefox(ua)) {\n      // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n      url = url || FIREFOX_EMPTY_URL;\n      // Firefox disables by default scrolling on popup windows, which can create\n      // issues when the user has many Google accounts, for instance.\n      options.scrollbars = 'yes';\n    }\n    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');\n    if (_isIOSStandalone(ua) && target !== '_self') {\n      openAsNewWindowIOS(url || '', target);\n      return new AuthPopup(null);\n    }\n    // about:blank getting sanitized causing browsers like IE/Edge to display\n    // brief error message before redirecting to handler.\n    const newWin = window.open(url || '', target, optionsString);\n    _assert(newWin, auth, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */);\n    // Flaky on IE edge, encapsulate with a try and catch.\n    try {\n      newWin.focus();\n    } catch (e) {}\n    return new AuthPopup(newWin);\n  }\n  function openAsNewWindowIOS(url, target) {\n    const el = document.createElement('a');\n    el.href = url;\n    el.target = target;\n    const click = document.createEvent('MouseEvent');\n    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\n    el.dispatchEvent(click);\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * URL for Authentication widget which will initiate the OAuth handshake\n   *\n   * @internal\n   */\n  const WIDGET_PATH = '__/auth/handler';\n  /**\n   * URL for emulated environment\n   *\n   * @internal\n   */\n  const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n  /**\n   * Fragment name for the App Check token that gets passed to the widget\n   *\n   * @internal\n   */\n  const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\n  async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n    _assert(auth.config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n    _assert(auth.config.apiKey, auth, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */);\n    const params = {\n      apiKey: auth.config.apiKey,\n      appName: auth.name,\n      authType,\n      redirectUrl,\n      v: _firebaseApp.SDK_VERSION,\n      eventId\n    };\n    if (provider instanceof FederatedAuthProvider) {\n      provider.setDefaultLanguage(auth.languageCode);\n      params.providerId = provider.providerId || '';\n      if (!(0, _firebaseUtil.isEmpty)(provider.getCustomParameters())) {\n        params.customParameters = JSON.stringify(provider.getCustomParameters());\n      }\n      // TODO set additionalParams from the provider as well?\n      for (const [key, value] of Object.entries(additionalParams || {})) {\n        params[key] = value;\n      }\n    }\n    if (provider instanceof BaseOAuthProvider) {\n      const scopes = provider.getScopes().filter(scope => scope !== '');\n      if (scopes.length > 0) {\n        params.scopes = scopes.join(',');\n      }\n    }\n    if (auth.tenantId) {\n      params.tid = auth.tenantId;\n    }\n    // TODO: maybe set eid as endpointId\n    // TODO: maybe set fw as Frameworks.join(\",\")\n    const paramsDict = params;\n    for (const key of Object.keys(paramsDict)) {\n      if (paramsDict[key] === undefined) {\n        delete paramsDict[key];\n      }\n    }\n    // Sets the App Check token to pass to the widget\n    const appCheckToken = await auth._getAppCheckToken();\n    const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : '';\n    // Start at index 1 to skip the leading '&' in the query string\n    return `${getHandlerBase(auth)}?${(0, _firebaseUtil.querystring)(paramsDict).slice(1)}${appCheckTokenFragment}`;\n  }\n  function getHandlerBase({\n    config\n  }) {\n    if (!config.emulator) {\n      return `https://${config.authDomain}/${WIDGET_PATH}`;\n    }\n    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The special web storage event\n   *\n   */\n  const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\n  class BrowserPopupRedirectResolver {\n    constructor() {\n      this.eventManagers = {};\n      this.iframes = {};\n      this.originValidationPromises = {};\n      this._redirectPersistence = browserSessionPersistence;\n      this._completeRedirectFn = _getRedirectResult;\n      this._overrideRedirectResult = _overrideRedirectResult;\n    }\n    // Wrapping in async even though we don't await anywhere in order\n    // to make sure errors are raised as promise rejections\n    async _openPopup(auth, provider, authType, eventId) {\n      debugAssert(this.eventManagers[auth._key()]?.manager, '_initialize() not called before _openPopup()');\n      const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n      return _open(auth, url, _generateEventId());\n    }\n    async _openRedirect(auth, provider, authType, eventId) {\n      await this._originValidation(auth);\n      const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n      _setWindowLocation(url);\n      return new Promise(() => {});\n    }\n    _initialize(auth) {\n      const key = auth._key();\n      if (this.eventManagers[key]) {\n        const {\n          manager,\n          promise\n        } = this.eventManagers[key];\n        if (manager) {\n          return Promise.resolve(manager);\n        } else {\n          debugAssert(promise, 'If manager is not set, promise should be');\n          return promise;\n        }\n      }\n      const promise = this.initAndGetManager(auth);\n      this.eventManagers[key] = {\n        promise\n      };\n      // If the promise is rejected, the key should be removed so that the\n      // operation can be retried later.\n      promise.catch(() => {\n        delete this.eventManagers[key];\n      });\n      return promise;\n    }\n    async initAndGetManager(auth) {\n      const iframe = await _openIframe(auth);\n      const manager = new AuthEventManager(auth);\n      iframe.register('authEvent', iframeEvent => {\n        _assert(iframeEvent?.authEvent, auth, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */);\n        // TODO: Consider splitting redirect and popup events earlier on\n        const handled = manager.onEvent(iframeEvent.authEvent);\n        return {\n          status: handled ? \"ACK\" /* GapiOutcome.ACK */ : \"ERROR\" /* GapiOutcome.ERROR */\n        };\n      }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n      this.eventManagers[auth._key()] = {\n        manager\n      };\n      this.iframes[auth._key()] = iframe;\n      return manager;\n    }\n    _isIframeWebStorageSupported(auth, cb) {\n      const iframe = this.iframes[auth._key()];\n      iframe.send(WEB_STORAGE_SUPPORT_KEY, {\n        type: WEB_STORAGE_SUPPORT_KEY\n      }, result => {\n        const isSupported = result?.[0]?.[WEB_STORAGE_SUPPORT_KEY];\n        if (isSupported !== undefined) {\n          cb(!!isSupported);\n        }\n        _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n    }\n    _originValidation(auth) {\n      const key = auth._key();\n      if (!this.originValidationPromises[key]) {\n        this.originValidationPromises[key] = _validateOrigin(auth);\n      }\n      return this.originValidationPromises[key];\n    }\n    get _shouldInitProactively() {\n      // Mobile browsers and Safari need to optimistically initialize\n      return _isMobileBrowser() || _isSafari() || _isIOS();\n    }\n  }\n  /**\n   * An implementation of {@link PopupRedirectResolver} suitable for browser\n   * based applications.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @public\n   */\n  const browserPopupRedirectResolver = BrowserPopupRedirectResolver;\n  class MultiFactorAssertionImpl {\n    constructor(factorId) {\n      this.factorId = factorId;\n    }\n    _process(auth, session, displayName) {\n      switch (session.type) {\n        case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n          return this._finalizeEnroll(auth, session.credential, displayName);\n        case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n          return this._finalizeSignIn(auth, session.credential);\n        default:\n          return debugFail('unexpected MultiFactorSessionType');\n      }\n    }\n  }\n\n  /**\n   * {@inheritdoc PhoneMultiFactorAssertion}\n   *\n   * @public\n   */\n  class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(credential) {\n      super(\"phone\" /* FactorId.PHONE */);\n      this.credential = credential;\n    }\n    /** @internal */\n    static _fromCredential(credential) {\n      return new PhoneMultiFactorAssertionImpl(credential);\n    }\n    /** @internal */\n    _finalizeEnroll(auth, idToken, displayName) {\n      return finalizeEnrollPhoneMfa(auth, {\n        idToken,\n        displayName,\n        phoneVerificationInfo: this.credential._makeVerificationRequest()\n      });\n    }\n    /** @internal */\n    _finalizeSignIn(auth, mfaPendingCredential) {\n      return finalizeSignInPhoneMfa(auth, {\n        mfaPendingCredential,\n        phoneVerificationInfo: this.credential._makeVerificationRequest()\n      });\n    }\n  }\n  /**\n   * Provider for generating a {@link PhoneMultiFactorAssertion}.\n   *\n   * @public\n   */\n  class PhoneMultiFactorGenerator {\n    constructor() {}\n    /**\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n     *\n     * @remarks\n     * This method does not work in a Node.js environment.\n     *\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}\n     */\n    static assertion(credential) {\n      return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n    }\n  }\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  PhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * @public\n   */\n  class TotpMultiFactorGenerator {\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n     * the TOTP (time-based one-time password) second factor.\n     * This assertion is used to complete enrollment in TOTP second factor.\n     *\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorUser.enroll}.\n     */\n    static assertionForEnrollment(secret, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n    }\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n     * This assertion is used to complete signIn with TOTP as the second factor.\n     *\n     * @param enrollmentId identifies the enrolled TOTP second factor.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}.\n     */\n    static assertionForSignIn(enrollmentId, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n    }\n    /**\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\n     * Used for generating a QR code URL or inputting into a TOTP app.\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\n     *\n     * @param session The {@link MultiFactorSession} that the user is part of.\n     * @returns A promise to {@link TotpSecret}.\n     */\n    static async generateSecret(session) {\n      const mfaSession = session;\n      _assert(typeof mfaSession.user?.auth !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n        idToken: mfaSession.credential,\n        totpEnrollmentInfo: {}\n      });\n      return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n    }\n  }\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  TotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\n  class TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(otp, enrollmentId, secret) {\n      super(\"totp\" /* FactorId.TOTP */);\n      this.otp = otp;\n      this.enrollmentId = enrollmentId;\n      this.secret = secret;\n    }\n    /** @internal */\n    static _fromSecret(secret, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n    }\n    /** @internal */\n    static _fromEnrollmentId(enrollmentId, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n    }\n    /** @internal */\n    async _finalizeEnroll(auth, idToken, displayName) {\n      _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return finalizeEnrollTotpMfa(auth, {\n        idToken,\n        displayName,\n        totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n      });\n    }\n    /** @internal */\n    async _finalizeSignIn(auth, mfaPendingCredential) {\n      _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      const totpVerificationInfo = {\n        verificationCode: this.otp\n      };\n      return finalizeSignInTotpMfa(auth, {\n        mfaPendingCredential,\n        mfaEnrollmentId: this.enrollmentId,\n        totpVerificationInfo\n      });\n    }\n  }\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * Stores the shared secret key and other parameters to generate time-based OTPs.\n   * Implements methods to retrieve the shared secret key and generate a QR code URL.\n   * @public\n   */\n  class TotpSecret {\n    // The public members are declared outside the constructor so the docs can be generated.\n    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n      this.sessionInfo = sessionInfo;\n      this.auth = auth;\n      this.secretKey = secretKey;\n      this.hashingAlgorithm = hashingAlgorithm;\n      this.codeLength = codeLength;\n      this.codeIntervalSeconds = codeIntervalSeconds;\n      this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    /** @internal */\n    static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n      return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n    }\n    /** @internal */\n    _makeTotpVerificationInfo(otp) {\n      return {\n        sessionInfo: this.sessionInfo,\n        verificationCode: otp\n      };\n    }\n    /**\n     * Returns a QR code URL as described in\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n     *\n     * @param accountName the name of the account/app along with a user identifier.\n     * @param issuer issuer of the TOTP (likely the app name).\n     * @returns A QR code URL string.\n     */\n    generateQrCodeUrl(accountName, issuer) {\n      let useDefaults = false;\n      if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n        useDefaults = true;\n      }\n      if (useDefaults) {\n        if (_isEmptyString(accountName)) {\n          accountName = this.auth.currentUser?.email || 'unknownuser';\n        }\n        if (_isEmptyString(issuer)) {\n          issuer = this.auth.name;\n        }\n      }\n      return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n    }\n  }\n  /** @internal */\n  function _isEmptyString(input) {\n    return typeof input === 'undefined' || input?.length === 0;\n  }\n  var name = \"@firebase/auth\";\n  var version = \"1.11.0\";\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthInterop {\n    constructor(auth) {\n      this.auth = auth;\n      this.internalListeners = new Map();\n    }\n    getUid() {\n      this.assertAuthConfigured();\n      return this.auth.currentUser?.uid || null;\n    }\n    async getToken(forceRefresh) {\n      this.assertAuthConfigured();\n      await this.auth._initializationPromise;\n      if (!this.auth.currentUser) {\n        return null;\n      }\n      const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n      return {\n        accessToken\n      };\n    }\n    addAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      if (this.internalListeners.has(listener)) {\n        return;\n      }\n      const unsubscribe = this.auth.onIdTokenChanged(user => {\n        listener(user?.stsTokenManager.accessToken || null);\n      });\n      this.internalListeners.set(listener, unsubscribe);\n      this.updateProactiveRefresh();\n    }\n    removeAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      const unsubscribe = this.internalListeners.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      this.internalListeners.delete(listener);\n      unsubscribe();\n      this.updateProactiveRefresh();\n    }\n    assertAuthConfigured() {\n      _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n    }\n    updateProactiveRefresh() {\n      if (this.internalListeners.size > 0) {\n        this.auth._startProactiveRefresh();\n      } else {\n        this.auth._stopProactiveRefresh();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getVersionForPlatform(clientPlatform) {\n    switch (clientPlatform) {\n      case \"Node\" /* ClientPlatform.NODE */:\n        return 'node';\n      case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n        return 'rn';\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        return 'webworker';\n      case \"Cordova\" /* ClientPlatform.CORDOVA */:\n        return 'cordova';\n      case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n        return 'web-extension';\n      default:\n        return undefined;\n    }\n  }\n  /** @internal */\n  function registerAuth(clientPlatform) {\n    (0, _firebaseApp._registerComponent)(new _firebaseComponent.Component(\"auth\" /* _ComponentName.AUTH */, (container, {\n      options: deps\n    }) => {\n      const app = container.getProvider('app').getImmediate();\n      const heartbeatServiceProvider = container.getProvider('heartbeat');\n      const appCheckServiceProvider = container.getProvider('app-check-internal');\n      const {\n        apiKey,\n        authDomain\n      } = app.options;\n      _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n        appName: app.name\n      });\n      const config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n        tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n        apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n    /**\n     * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n     * For why we do this, See go/firebase-next-auth-init\n     */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n    /**\n     * Because all firebase products that depend on auth depend on auth-internal directly,\n     * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n     */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n      const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n      authInternalProvider.initialize();\n    }));\n    (0, _firebaseApp._registerComponent)(new _firebaseComponent.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n      const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n      return (auth => new AuthInterop(auth))(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n    (0, _firebaseApp.registerVersion)(name, version, getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    (0, _firebaseApp.registerVersion)(name, version, 'esm2020');\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\n  const authIdTokenMaxAge = (0, _firebaseUtil.getExperimentalSetting)('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\n  let lastPostedIdToken = null;\n  const mintCookieFactory = url => async user => {\n    const idTokenResult = user && (await user.getIdTokenResult());\n    const idTokenAge = idTokenResult && (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;\n    if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n      return;\n    }\n    // Specifically trip null => undefined when logged out, to delete any existing cookie\n    const idToken = idTokenResult?.token;\n    if (lastPostedIdToken === idToken) {\n      return;\n    }\n    lastPostedIdToken = idToken;\n    await fetch(url, {\n      method: idToken ? 'POST' : 'DELETE',\n      headers: idToken ? {\n        'Authorization': `Bearer ${idToken}`\n      } : {}\n    });\n  };\n  /**\n   * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n   * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n   *\n   * @param app - The Firebase App.\n   *\n   * @public\n   */\n  function getAuth(app = (0, _firebaseApp.getApp)()) {\n    const provider = (0, _firebaseApp._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      return provider.getImmediate();\n    }\n    const auth = initializeAuth(app, {\n      popupRedirectResolver: browserPopupRedirectResolver,\n      persistence: [indexedDBLocalPersistence, browserLocalPersistence, browserSessionPersistence]\n    });\n    const authTokenSyncPath = (0, _firebaseUtil.getExperimentalSetting)('authTokenSyncURL');\n    // Only do the Cookie exchange in a secure context\n    if (authTokenSyncPath && typeof isSecureContext === 'boolean' && isSecureContext) {\n      // Don't allow urls (XSS possibility), only paths on the same domain\n      const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);\n      if (location.origin === authTokenSyncUrl.origin) {\n        const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());\n        beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\n        onIdTokenChanged(auth, user => mintCookie(user));\n      }\n    }\n    const authEmulatorHost = (0, _firebaseUtil.getDefaultEmulatorHost)('auth');\n    if (authEmulatorHost) {\n      connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n    }\n    return auth;\n  }\n  function getScriptParentElement() {\n    return document.getElementsByTagName('head')?.[0] ?? document;\n  }\n  _setExternalJSProvider({\n    loadJS(url) {\n      // TODO: consider adding timeout support & cancellation\n      return new Promise((resolve, reject) => {\n        const el = document.createElement('script');\n        el.setAttribute('src', url);\n        el.onload = resolve;\n        el.onerror = e => {\n          const error = _createError(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          error.customData = e;\n          reject(error);\n        };\n        el.type = 'text/javascript';\n        el.charset = 'UTF-8';\n        getScriptParentElement().appendChild(el);\n      });\n    },\n    gapiScript: 'https://apis.google.com/js/api.js',\n    recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',\n    recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='\n  });\n  registerAuth(\"Browser\" /* ClientPlatform.BROWSER */);\n});","lineCount":11702,"map":[[15,2,11154,0,"Object"],[15,8,11154,0],[15,9,11154,0,"defineProperty"],[15,23,11154,0],[15,24,11154,0,"exports"],[15,31,11154,0],[16,4,11154,0,"enumerable"],[16,14,11154,0],[17,4,11154,0,"get"],[17,7,11154,0],[17,18,11154,0,"get"],[17,19,11154,0],[18,6,11154,0],[18,13,11154,9,"SAMLAuthProvider"],[18,29,11154,25],[19,4,11154,25],[20,2,11154,25],[21,2,11154,0,"Object"],[21,8,11154,0],[21,9,11154,0,"defineProperty"],[21,23,11154,0],[21,24,11154,0,"exports"],[21,31,11154,0],[22,4,11154,0,"enumerable"],[22,14,11154,0],[23,4,11154,0,"get"],[23,7,11154,0],[23,18,11154,0,"get"],[23,19,11154,0],[24,6,11154,0],[24,13,11154,32,"ActionCodeOperation"],[24,32,11154,51],[25,4,11154,51],[26,2,11154,51],[27,2,11154,0,"Object"],[27,8,11154,0],[27,9,11154,0,"defineProperty"],[27,23,11154,0],[27,24,11154,0,"exports"],[27,31,11154,0],[28,4,11154,0,"enumerable"],[28,14,11154,0],[29,4,11154,0,"get"],[29,7,11154,0],[29,18,11154,0,"get"],[29,19,11154,0],[30,6,11154,0],[30,13,11154,58,"useDeviceLanguage"],[30,30,11154,75],[31,4,11154,75],[32,2,11154,75],[33,2,11154,0,"Object"],[33,8,11154,0],[33,9,11154,0,"defineProperty"],[33,23,11154,0],[33,24,11154,0,"exports"],[33,31,11154,0],[34,4,11154,0,"enumerable"],[34,14,11154,0],[35,4,11154,0,"get"],[35,7,11154,0],[35,18,11154,0,"get"],[35,19,11154,0],[36,6,11154,0],[36,13,11154,82,"updateCurrentUser"],[36,30,11154,99],[37,4,11154,99],[38,2,11154,99],[39,2,11154,0,"Object"],[39,8,11154,0],[39,9,11154,0,"defineProperty"],[39,23,11154,0],[39,24,11154,0,"exports"],[39,31,11154,0],[40,4,11154,0,"enumerable"],[40,14,11154,0],[41,4,11154,0,"get"],[41,7,11154,0],[41,18,11154,0,"get"],[41,19,11154,0],[42,6,11154,0],[42,13,11154,106,"signOut"],[42,20,11154,113],[43,4,11154,113],[44,2,11154,113],[45,2,11154,0,"Object"],[45,8,11154,0],[45,9,11154,0,"defineProperty"],[45,23,11154,0],[45,24,11154,0,"exports"],[45,31,11154,0],[46,4,11154,0,"enumerable"],[46,14,11154,0],[47,4,11154,0,"get"],[47,7,11154,0],[47,18,11154,0,"get"],[47,19,11154,0],[48,6,11154,0],[48,13,11154,120,"revokeAccessToken"],[48,30,11154,137],[49,4,11154,137],[50,2,11154,137],[51,2,11154,0,"Object"],[51,8,11154,0],[51,9,11154,0,"defineProperty"],[51,23,11154,0],[51,24,11154,0,"exports"],[51,31,11154,0],[52,4,11154,0,"enumerable"],[52,14,11154,0],[53,4,11154,0,"get"],[53,7,11154,0],[53,18,11154,0,"get"],[53,19,11154,0],[54,6,11154,0],[54,13,11154,144,"FactorId"],[54,21,11154,152],[55,4,11154,152],[56,2,11154,152],[57,2,11154,0,"Object"],[57,8,11154,0],[57,9,11154,0,"defineProperty"],[57,23,11154,0],[57,24,11154,0,"exports"],[57,31,11154,0],[58,4,11154,0,"enumerable"],[58,14,11154,0],[59,4,11154,0,"get"],[59,7,11154,0],[59,18,11154,0,"get"],[59,19,11154,0],[60,6,11154,0],[60,13,11154,159,"deleteUser"],[60,23,11154,169],[61,4,11154,169],[62,2,11154,169],[63,2,11154,0,"Object"],[63,8,11154,0],[63,9,11154,0,"defineProperty"],[63,23,11154,0],[63,24,11154,0,"exports"],[63,31,11154,0],[64,4,11154,0,"enumerable"],[64,14,11154,0],[65,4,11154,0,"get"],[65,7,11154,0],[65,18,11154,0,"get"],[65,19,11154,0],[66,6,11154,0],[66,13,11154,176,"debugErrorMap"],[66,26,11154,189],[67,4,11154,189],[68,2,11154,189],[69,2,11154,0,"Object"],[69,8,11154,0],[69,9,11154,0,"defineProperty"],[69,23,11154,0],[69,24,11154,0,"exports"],[69,31,11154,0],[70,4,11154,0,"enumerable"],[70,14,11154,0],[71,4,11154,0,"get"],[71,7,11154,0],[71,18,11154,0,"get"],[71,19,11154,0],[72,6,11154,0],[72,13,11154,196,"prodErrorMap"],[72,25,11154,208],[73,4,11154,208],[74,2,11154,208],[75,2,11154,0,"Object"],[75,8,11154,0],[75,9,11154,0,"defineProperty"],[75,23,11154,0],[75,24,11154,0,"exports"],[75,31,11154,0],[76,4,11154,0,"enumerable"],[76,14,11154,0],[77,4,11154,0,"get"],[77,7,11154,0],[77,18,11154,0,"get"],[77,19,11154,0],[78,6,11154,0],[78,13,11154,215,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[78,55,11154,257],[79,4,11154,257],[80,2,11154,257],[81,2,11154,0,"Object"],[81,8,11154,0],[81,9,11154,0,"defineProperty"],[81,23,11154,0],[81,24,11154,0,"exports"],[81,31,11154,0],[82,4,11154,0,"enumerable"],[82,14,11154,0],[83,4,11154,0,"get"],[83,7,11154,0],[83,18,11154,0,"get"],[83,19,11154,0],[84,6,11154,0],[84,13,11154,264,"initializeAuth"],[84,27,11154,278],[85,4,11154,278],[86,2,11154,278],[87,2,11154,0,"Object"],[87,8,11154,0],[87,9,11154,0,"defineProperty"],[87,23,11154,0],[87,24,11154,0,"exports"],[87,31,11154,0],[88,4,11154,0,"enumerable"],[88,14,11154,0],[89,4,11154,0,"get"],[89,7,11154,0],[89,18,11154,0,"get"],[89,19,11154,0],[90,6,11154,0],[90,13,11154,285,"connectAuthEmulator"],[90,32,11154,304],[91,4,11154,304],[92,2,11154,304],[93,2,11154,0,"Object"],[93,8,11154,0],[93,9,11154,0,"defineProperty"],[93,23,11154,0],[93,24,11154,0,"exports"],[93,31,11154,0],[94,4,11154,0,"enumerable"],[94,14,11154,0],[95,4,11154,0,"get"],[95,7,11154,0],[95,18,11154,0,"get"],[95,19,11154,0],[96,6,11154,0],[96,13,11154,311,"AuthCredential"],[96,27,11154,325],[97,4,11154,325],[98,2,11154,325],[99,2,11154,0,"Object"],[99,8,11154,0],[99,9,11154,0,"defineProperty"],[99,23,11154,0],[99,24,11154,0,"exports"],[99,31,11154,0],[100,4,11154,0,"enumerable"],[100,14,11154,0],[101,4,11154,0,"get"],[101,7,11154,0],[101,18,11154,0,"get"],[101,19,11154,0],[102,6,11154,0],[102,13,11154,332,"EmailAuthCredential"],[102,32,11154,351],[103,4,11154,351],[104,2,11154,351],[105,2,11154,0,"Object"],[105,8,11154,0],[105,9,11154,0,"defineProperty"],[105,23,11154,0],[105,24,11154,0,"exports"],[105,31,11154,0],[106,4,11154,0,"enumerable"],[106,14,11154,0],[107,4,11154,0,"get"],[107,7,11154,0],[107,18,11154,0,"get"],[107,19,11154,0],[108,6,11154,0],[108,13,11154,358,"OperationType"],[108,26,11154,371],[109,4,11154,371],[110,2,11154,371],[111,2,11154,0,"Object"],[111,8,11154,0],[111,9,11154,0,"defineProperty"],[111,23,11154,0],[111,24,11154,0,"exports"],[111,31,11154,0],[112,4,11154,0,"enumerable"],[112,14,11154,0],[113,4,11154,0,"get"],[113,7,11154,0],[113,18,11154,0,"get"],[113,19,11154,0],[114,6,11154,0],[114,13,11154,378,"PhoneAuthProvider"],[114,30,11154,395],[115,4,11154,395],[116,2,11154,395],[117,2,11154,0,"Object"],[117,8,11154,0],[117,9,11154,0,"defineProperty"],[117,23,11154,0],[117,24,11154,0,"exports"],[117,31,11154,0],[118,4,11154,0,"enumerable"],[118,14,11154,0],[119,4,11154,0,"get"],[119,7,11154,0],[119,18,11154,0,"get"],[119,19,11154,0],[120,6,11154,0],[120,13,11154,402,"OAuthCredential"],[120,28,11154,417],[121,4,11154,417],[122,2,11154,417],[123,2,11154,0,"Object"],[123,8,11154,0],[123,9,11154,0,"defineProperty"],[123,23,11154,0],[123,24,11154,0,"exports"],[123,31,11154,0],[124,4,11154,0,"enumerable"],[124,14,11154,0],[125,4,11154,0,"get"],[125,7,11154,0],[125,18,11154,0,"get"],[125,19,11154,0],[126,6,11154,0],[126,13,11154,424,"RecaptchaVerifier"],[126,30,11154,441],[127,4,11154,441],[128,2,11154,441],[129,2,11154,0,"Object"],[129,8,11154,0],[129,9,11154,0,"defineProperty"],[129,23,11154,0],[129,24,11154,0,"exports"],[129,31,11154,0],[130,4,11154,0,"enumerable"],[130,14,11154,0],[131,4,11154,0,"get"],[131,7,11154,0],[131,18,11154,0,"get"],[131,19,11154,0],[132,6,11154,0],[132,13,11154,448,"SignInMethod"],[132,25,11154,460],[133,4,11154,460],[134,2,11154,460],[135,2,11154,0,"Object"],[135,8,11154,0],[135,9,11154,0,"defineProperty"],[135,23,11154,0],[135,24,11154,0,"exports"],[135,31,11154,0],[136,4,11154,0,"enumerable"],[136,14,11154,0],[137,4,11154,0,"get"],[137,7,11154,0],[137,18,11154,0,"get"],[137,19,11154,0],[138,6,11154,0],[138,13,11154,467,"TotpMultiFactorGenerator"],[138,37,11154,491],[139,4,11154,491],[140,2,11154,491],[141,2,11154,0,"Object"],[141,8,11154,0],[141,9,11154,0,"defineProperty"],[141,23,11154,0],[141,24,11154,0,"exports"],[141,31,11154,0],[142,4,11154,0,"enumerable"],[142,14,11154,0],[143,4,11154,0,"get"],[143,7,11154,0],[143,18,11154,0,"get"],[143,19,11154,0],[144,6,11154,0],[144,13,11154,498,"PhoneAuthCredential"],[144,32,11154,517],[145,4,11154,517],[146,2,11154,517],[147,2,11154,0,"Object"],[147,8,11154,0],[147,9,11154,0,"defineProperty"],[147,23,11154,0],[147,24,11154,0,"exports"],[147,31,11154,0],[148,4,11154,0,"enumerable"],[148,14,11154,0],[149,4,11154,0,"get"],[149,7,11154,0],[149,18,11154,0,"get"],[149,19,11154,0],[150,6,11154,0],[150,13,11154,524,"inMemoryPersistence"],[150,32,11154,543],[151,4,11154,543],[152,2,11154,543],[153,2,11154,0,"Object"],[153,8,11154,0],[153,9,11154,0,"defineProperty"],[153,23,11154,0],[153,24,11154,0,"exports"],[153,31,11154,0],[154,4,11154,0,"enumerable"],[154,14,11154,0],[155,4,11154,0,"get"],[155,7,11154,0],[155,18,11154,0,"get"],[155,19,11154,0],[156,6,11154,0],[156,13,11154,550,"EmailAuthProvider"],[156,30,11154,567],[157,4,11154,567],[158,2,11154,567],[159,2,11154,0,"Object"],[159,8,11154,0],[159,9,11154,0,"defineProperty"],[159,23,11154,0],[159,24,11154,0,"exports"],[159,31,11154,0],[160,4,11154,0,"enumerable"],[160,14,11154,0],[161,4,11154,0,"get"],[161,7,11154,0],[161,18,11154,0,"get"],[161,19,11154,0],[162,6,11154,0],[162,13,11154,574,"FacebookAuthProvider"],[162,33,11154,594],[163,4,11154,594],[164,2,11154,594],[165,2,11154,0,"Object"],[165,8,11154,0],[165,9,11154,0,"defineProperty"],[165,23,11154,0],[165,24,11154,0,"exports"],[165,31,11154,0],[166,4,11154,0,"enumerable"],[166,14,11154,0],[167,4,11154,0,"get"],[167,7,11154,0],[167,18,11154,0,"get"],[167,19,11154,0],[168,6,11154,0],[168,13,11154,601,"GoogleAuthProvider"],[168,31,11154,619],[169,4,11154,619],[170,2,11154,619],[171,2,11154,0,"Object"],[171,8,11154,0],[171,9,11154,0,"defineProperty"],[171,23,11154,0],[171,24,11154,0,"exports"],[171,31,11154,0],[172,4,11154,0,"enumerable"],[172,14,11154,0],[173,4,11154,0,"get"],[173,7,11154,0],[173,18,11154,0,"get"],[173,19,11154,0],[174,6,11154,0],[174,13,11154,626,"GithubAuthProvider"],[174,31,11154,644],[175,4,11154,644],[176,2,11154,644],[177,2,11154,0,"Object"],[177,8,11154,0],[177,9,11154,0,"defineProperty"],[177,23,11154,0],[177,24,11154,0,"exports"],[177,31,11154,0],[178,4,11154,0,"enumerable"],[178,14,11154,0],[179,4,11154,0,"get"],[179,7,11154,0],[179,18,11154,0,"get"],[179,19,11154,0],[180,6,11154,0],[180,13,11154,651,"OAuthProvider"],[180,26,11154,664],[181,4,11154,664],[182,2,11154,664],[183,2,11154,0,"Object"],[183,8,11154,0],[183,9,11154,0,"defineProperty"],[183,23,11154,0],[183,24,11154,0,"exports"],[183,31,11154,0],[184,4,11154,0,"enumerable"],[184,14,11154,0],[185,4,11154,0,"get"],[185,7,11154,0],[185,18,11154,0,"get"],[185,19,11154,0],[186,6,11154,0],[186,13,11154,671,"browserCookiePersistence"],[186,37,11154,695],[187,4,11154,695],[188,2,11154,695],[189,2,11154,0,"Object"],[189,8,11154,0],[189,9,11154,0,"defineProperty"],[189,23,11154,0],[189,24,11154,0,"exports"],[189,31,11154,0],[190,4,11154,0,"enumerable"],[190,14,11154,0],[191,4,11154,0,"get"],[191,7,11154,0],[191,18,11154,0,"get"],[191,19,11154,0],[192,6,11154,0],[192,13,11154,702,"TwitterAuthProvider"],[192,32,11154,721],[193,4,11154,721],[194,2,11154,721],[195,2,11154,0,"Object"],[195,8,11154,0],[195,9,11154,0,"defineProperty"],[195,23,11154,0],[195,24,11154,0,"exports"],[195,31,11154,0],[196,4,11154,0,"enumerable"],[196,14,11154,0],[197,4,11154,0,"get"],[197,7,11154,0],[197,18,11154,0,"get"],[197,19,11154,0],[198,6,11154,0],[198,13,11154,729,"signInAnonymously"],[198,30,11154,746],[199,4,11154,746],[200,2,11154,746],[201,2,11154,0,"Object"],[201,8,11154,0],[201,9,11154,0,"defineProperty"],[201,23,11154,0],[201,24,11154,0,"exports"],[201,31,11154,0],[202,4,11154,0,"enumerable"],[202,14,11154,0],[203,4,11154,0,"get"],[203,7,11154,0],[203,18,11154,0,"get"],[203,19,11154,0],[204,6,11154,0],[204,13,11154,754,"signInWithCredential"],[204,33,11154,774],[205,4,11154,774],[206,2,11154,774],[207,2,11154,0,"Object"],[207,8,11154,0],[207,9,11154,0,"defineProperty"],[207,23,11154,0],[207,24,11154,0,"exports"],[207,31,11154,0],[208,4,11154,0,"enumerable"],[208,14,11154,0],[209,4,11154,0,"get"],[209,7,11154,0],[209,18,11154,0,"get"],[209,19,11154,0],[210,6,11154,0],[210,13,11154,782,"linkWithCredential"],[210,31,11154,800],[211,4,11154,800],[212,2,11154,800],[213,2,11154,0,"Object"],[213,8,11154,0],[213,9,11154,0,"defineProperty"],[213,23,11154,0],[213,24,11154,0,"exports"],[213,31,11154,0],[214,4,11154,0,"enumerable"],[214,14,11154,0],[215,4,11154,0,"get"],[215,7,11154,0],[215,18,11154,0,"get"],[215,19,11154,0],[216,6,11154,0],[216,13,11154,808,"reauthenticateWithCredential"],[216,41,11154,836],[217,4,11154,836],[218,2,11154,836],[219,2,11154,0,"Object"],[219,8,11154,0],[219,9,11154,0,"defineProperty"],[219,23,11154,0],[219,24,11154,0,"exports"],[219,31,11154,0],[220,4,11154,0,"enumerable"],[220,14,11154,0],[221,4,11154,0,"get"],[221,7,11154,0],[221,18,11154,0,"get"],[221,19,11154,0],[222,6,11154,0],[222,13,11154,844,"signInWithCustomToken"],[222,34,11154,865],[223,4,11154,865],[224,2,11154,865],[225,2,11154,0,"Object"],[225,8,11154,0],[225,9,11154,0,"defineProperty"],[225,23,11154,0],[225,24,11154,0,"exports"],[225,31,11154,0],[226,4,11154,0,"enumerable"],[226,14,11154,0],[227,4,11154,0,"get"],[227,7,11154,0],[227,18,11154,0,"get"],[227,19,11154,0],[228,6,11154,0],[228,13,11154,873,"sendPasswordResetEmail"],[228,35,11154,895],[229,4,11154,895],[230,2,11154,895],[231,2,11154,0,"Object"],[231,8,11154,0],[231,9,11154,0,"defineProperty"],[231,23,11154,0],[231,24,11154,0,"exports"],[231,31,11154,0],[232,4,11154,0,"enumerable"],[232,14,11154,0],[233,4,11154,0,"get"],[233,7,11154,0],[233,18,11154,0,"get"],[233,19,11154,0],[234,6,11154,0],[234,13,11154,903,"confirmPasswordReset"],[234,33,11154,923],[235,4,11154,923],[236,2,11154,923],[237,2,11154,0,"Object"],[237,8,11154,0],[237,9,11154,0,"defineProperty"],[237,23,11154,0],[237,24,11154,0,"exports"],[237,31,11154,0],[238,4,11154,0,"enumerable"],[238,14,11154,0],[239,4,11154,0,"get"],[239,7,11154,0],[239,18,11154,0,"get"],[239,19,11154,0],[240,6,11154,0],[240,13,11154,931,"applyActionCode"],[240,28,11154,946],[241,4,11154,946],[242,2,11154,946],[243,2,11154,0,"Object"],[243,8,11154,0],[243,9,11154,0,"defineProperty"],[243,23,11154,0],[243,24,11154,0,"exports"],[243,31,11154,0],[244,4,11154,0,"enumerable"],[244,14,11154,0],[245,4,11154,0,"get"],[245,7,11154,0],[245,18,11154,0,"get"],[245,19,11154,0],[246,6,11154,0],[246,13,11154,954,"checkActionCode"],[246,28,11154,969],[247,4,11154,969],[248,2,11154,969],[249,2,11154,0,"Object"],[249,8,11154,0],[249,9,11154,0,"defineProperty"],[249,23,11154,0],[249,24,11154,0,"exports"],[249,31,11154,0],[250,4,11154,0,"enumerable"],[250,14,11154,0],[251,4,11154,0,"get"],[251,7,11154,0],[251,18,11154,0,"get"],[251,19,11154,0],[252,6,11154,0],[252,13,11154,977,"_getProjectConfig"],[252,30,11154,994],[253,4,11154,994],[254,2,11154,994],[255,2,11154,0,"Object"],[255,8,11154,0],[255,9,11154,0,"defineProperty"],[255,23,11154,0],[255,24,11154,0,"exports"],[255,31,11154,0],[256,4,11154,0,"enumerable"],[256,14,11154,0],[257,4,11154,0,"get"],[257,7,11154,0],[257,18,11154,0,"get"],[257,19,11154,0],[258,6,11154,0],[258,13,11154,1002,"_isIOS7Or8"],[258,23,11154,1012],[259,4,11154,1012],[260,2,11154,1012],[261,2,11154,0,"Object"],[261,8,11154,0],[261,9,11154,0,"defineProperty"],[261,23,11154,0],[261,24,11154,0,"exports"],[261,31,11154,0],[262,4,11154,0,"enumerable"],[262,14,11154,0],[263,4,11154,0,"get"],[263,7,11154,0],[263,18,11154,0,"get"],[263,19,11154,0],[264,6,11154,0],[264,13,11154,1020,"_createError"],[264,25,11154,1032],[265,4,11154,1032],[266,2,11154,1032],[267,2,11154,0,"Object"],[267,8,11154,0],[267,9,11154,0,"defineProperty"],[267,23,11154,0],[267,24,11154,0,"exports"],[267,31,11154,0],[268,4,11154,0,"enumerable"],[268,14,11154,0],[269,4,11154,0,"get"],[269,7,11154,0],[269,18,11154,0,"get"],[269,19,11154,0],[270,6,11154,0],[270,13,11154,1040,"_assert"],[270,20,11154,1047],[271,4,11154,1047],[272,2,11154,1047],[273,2,11154,0,"Object"],[273,8,11154,0],[273,9,11154,0,"defineProperty"],[273,23,11154,0],[273,24,11154,0,"exports"],[273,31,11154,0],[274,4,11154,0,"enumerable"],[274,14,11154,0],[275,4,11154,0,"get"],[275,7,11154,0],[275,18,11154,0,"get"],[275,19,11154,0],[276,6,11154,0],[276,13,11154,1055,"AuthEventManager"],[276,29,11154,1071],[277,4,11154,1071],[278,2,11154,1071],[279,2,11154,0,"Object"],[279,8,11154,0],[279,9,11154,0,"defineProperty"],[279,23,11154,0],[279,24,11154,0,"exports"],[279,31,11154,0],[280,4,11154,0,"enumerable"],[280,14,11154,0],[281,4,11154,0,"get"],[281,7,11154,0],[281,18,11154,0,"get"],[281,19,11154,0],[282,6,11154,0],[282,13,11154,1079,"_getInstance"],[282,25,11154,1091],[283,4,11154,1091],[284,2,11154,1091],[285,2,11154,0,"Object"],[285,8,11154,0],[285,9,11154,0,"defineProperty"],[285,23,11154,0],[285,24,11154,0,"exports"],[285,31,11154,0],[286,4,11154,0,"enumerable"],[286,14,11154,0],[287,4,11154,0,"get"],[287,7,11154,0],[287,18,11154,0,"get"],[287,19,11154,0],[288,6,11154,0],[288,13,11154,1099,"_persistenceKeyName"],[288,32,11154,1118],[289,4,11154,1118],[290,2,11154,1118],[291,2,11154,0,"Object"],[291,8,11154,0],[291,9,11154,0,"defineProperty"],[291,23,11154,0],[291,24,11154,0,"exports"],[291,31,11154,0],[292,4,11154,0,"enumerable"],[292,14,11154,0],[293,4,11154,0,"get"],[293,7,11154,0],[293,18,11154,0,"get"],[293,19,11154,0],[294,6,11154,0],[294,13,11154,1126,"_getRedirectResult"],[294,31,11154,1144],[295,4,11154,1144],[296,2,11154,1144],[297,2,11154,0,"Object"],[297,8,11154,0],[297,9,11154,0,"defineProperty"],[297,23,11154,0],[297,24,11154,0,"exports"],[297,31,11154,0],[298,4,11154,0,"enumerable"],[298,14,11154,0],[299,4,11154,0,"get"],[299,7,11154,0],[299,18,11154,0,"get"],[299,19,11154,0],[300,6,11154,0],[300,13,11154,1152,"_overrideRedirectResult"],[300,36,11154,1175],[301,4,11154,1175],[302,2,11154,1175],[303,2,11154,0,"Object"],[303,8,11154,0],[303,9,11154,0,"defineProperty"],[303,23,11154,0],[303,24,11154,0,"exports"],[303,31,11154,0],[304,4,11154,0,"enumerable"],[304,14,11154,0],[305,4,11154,0,"get"],[305,7,11154,0],[305,18,11154,0,"get"],[305,19,11154,0],[306,6,11154,0],[306,13,11154,1183,"_clearRedirectOutcomes"],[306,35,11154,1205],[307,4,11154,1205],[308,2,11154,1205],[309,2,11154,0,"Object"],[309,8,11154,0],[309,9,11154,0,"defineProperty"],[309,23,11154,0],[309,24,11154,0,"exports"],[309,31,11154,0],[310,4,11154,0,"enumerable"],[310,14,11154,0],[311,4,11154,0,"get"],[311,7,11154,0],[311,18,11154,0,"get"],[311,19,11154,0],[312,6,11154,0],[312,13,11154,1213,"_castAuth"],[312,22,11154,1222],[313,4,11154,1222],[314,2,11154,1222],[315,2,11154,0,"Object"],[315,8,11154,0],[315,9,11154,0,"defineProperty"],[315,23,11154,0],[315,24,11154,0,"exports"],[315,31,11154,0],[316,4,11154,0,"enumerable"],[316,14,11154,0],[317,4,11154,0,"get"],[317,7,11154,0],[317,18,11154,0,"get"],[317,19,11154,0],[318,6,11154,0],[318,13,11154,1230,"UserImpl"],[318,21,11154,1238],[319,4,11154,1238],[320,2,11154,1238],[321,2,11154,0,"Object"],[321,8,11154,0],[321,9,11154,0,"defineProperty"],[321,23,11154,0],[321,24,11154,0,"exports"],[321,31,11154,0],[322,4,11154,0,"enumerable"],[322,14,11154,0],[323,4,11154,0,"get"],[323,7,11154,0],[323,18,11154,0,"get"],[323,19,11154,0],[324,6,11154,0],[324,13,11154,1246,"AuthImpl"],[324,21,11154,1254],[325,4,11154,1254],[326,2,11154,1254],[327,2,11154,0,"Object"],[327,8,11154,0],[327,9,11154,0,"defineProperty"],[327,23,11154,0],[327,24,11154,0,"exports"],[327,31,11154,0],[328,4,11154,0,"enumerable"],[328,14,11154,0],[329,4,11154,0,"get"],[329,7,11154,0],[329,18,11154,0,"get"],[329,19,11154,0],[330,6,11154,0],[330,13,11154,1262,"_getClientVersion"],[330,30,11154,1279],[331,4,11154,1279],[332,2,11154,1279],[333,2,11154,0,"Object"],[333,8,11154,0],[333,9,11154,0,"defineProperty"],[333,23,11154,0],[333,24,11154,0,"exports"],[333,31,11154,0],[334,4,11154,0,"enumerable"],[334,14,11154,0],[335,4,11154,0,"get"],[335,7,11154,0],[335,18,11154,0,"get"],[335,19,11154,0],[336,6,11154,0],[336,13,11154,1287,"_generateEventId"],[336,29,11154,1303],[337,4,11154,1303],[338,2,11154,1303],[339,2,11154,0,"Object"],[339,8,11154,0],[339,9,11154,0,"defineProperty"],[339,23,11154,0],[339,24,11154,0,"exports"],[339,31,11154,0],[340,4,11154,0,"enumerable"],[340,14,11154,0],[341,4,11154,0,"get"],[341,7,11154,0],[341,18,11154,0,"get"],[341,19,11154,0],[342,6,11154,0],[342,13,11154,1311,"AuthPopup"],[342,22,11154,1320],[343,4,11154,1320],[344,2,11154,1320],[345,2,11154,0,"Object"],[345,8,11154,0],[345,9,11154,0,"defineProperty"],[345,23,11154,0],[345,24,11154,0,"exports"],[345,31,11154,0],[346,4,11154,0,"enumerable"],[346,14,11154,0],[347,4,11154,0,"get"],[347,7,11154,0],[347,18,11154,0,"get"],[347,19,11154,0],[348,6,11154,0],[348,13,11154,1328,"FetchProvider"],[348,26,11154,1341],[349,4,11154,1341],[350,2,11154,1341],[351,2,11154,0,"Object"],[351,8,11154,0],[351,9,11154,0,"defineProperty"],[351,23,11154,0],[351,24,11154,0,"exports"],[351,31,11154,0],[352,4,11154,0,"enumerable"],[352,14,11154,0],[353,4,11154,0,"get"],[353,7,11154,0],[353,18,11154,0,"get"],[353,19,11154,0],[354,6,11154,0],[354,13,11154,1349,"SAMLAuthCredential"],[354,31,11154,1367],[355,4,11154,1367],[356,2,11154,1367],[357,2,11154,0,"Object"],[357,8,11154,0],[357,9,11154,0,"defineProperty"],[357,23,11154,0],[357,24,11154,0,"exports"],[357,31,11154,0],[358,4,11154,0,"enumerable"],[358,14,11154,0],[359,4,11154,0,"get"],[359,7,11154,0],[359,18,11154,0,"get"],[359,19,11154,0],[360,6,11154,0],[360,13,11154,1375,"verifyPasswordResetCode"],[360,36,11154,1398],[361,4,11154,1398],[362,2,11154,1398],[363,2,11154,0,"Object"],[363,8,11154,0],[363,9,11154,0,"defineProperty"],[363,23,11154,0],[363,24,11154,0,"exports"],[363,31,11154,0],[364,4,11154,0,"enumerable"],[364,14,11154,0],[365,4,11154,0,"get"],[365,7,11154,0],[365,18,11154,0,"get"],[365,19,11154,0],[366,6,11154,0],[366,13,11154,1406,"createUserWithEmailAndPassword"],[366,43,11154,1436],[367,4,11154,1436],[368,2,11154,1436],[369,2,11154,0,"Object"],[369,8,11154,0],[369,9,11154,0,"defineProperty"],[369,23,11154,0],[369,24,11154,0,"exports"],[369,31,11154,0],[370,4,11154,0,"enumerable"],[370,14,11154,0],[371,4,11154,0,"get"],[371,7,11154,0],[371,18,11154,0,"get"],[371,19,11154,0],[372,6,11154,0],[372,13,11154,1444,"signInWithEmailAndPassword"],[372,39,11154,1470],[373,4,11154,1470],[374,2,11154,1470],[375,2,11154,0,"Object"],[375,8,11154,0],[375,9,11154,0,"defineProperty"],[375,23,11154,0],[375,24,11154,0,"exports"],[375,31,11154,0],[376,4,11154,0,"enumerable"],[376,14,11154,0],[377,4,11154,0,"get"],[377,7,11154,0],[377,18,11154,0,"get"],[377,19,11154,0],[378,6,11154,0],[378,13,11154,1478,"sendSignInLinkToEmail"],[378,34,11154,1499],[379,4,11154,1499],[380,2,11154,1499],[381,2,11154,0,"Object"],[381,8,11154,0],[381,9,11154,0,"defineProperty"],[381,23,11154,0],[381,24,11154,0,"exports"],[381,31,11154,0],[382,4,11154,0,"enumerable"],[382,14,11154,0],[383,4,11154,0,"get"],[383,7,11154,0],[383,18,11154,0,"get"],[383,19,11154,0],[384,6,11154,0],[384,13,11154,1507,"isSignInWithEmailLink"],[384,34,11154,1528],[385,4,11154,1528],[386,2,11154,1528],[387,2,11154,0,"Object"],[387,8,11154,0],[387,9,11154,0,"defineProperty"],[387,23,11154,0],[387,24,11154,0,"exports"],[387,31,11154,0],[388,4,11154,0,"enumerable"],[388,14,11154,0],[389,4,11154,0,"get"],[389,7,11154,0],[389,18,11154,0,"get"],[389,19,11154,0],[390,6,11154,0],[390,13,11154,1536,"signInWithEmailLink"],[390,32,11154,1555],[391,4,11154,1555],[392,2,11154,1555],[393,2,11154,0,"Object"],[393,8,11154,0],[393,9,11154,0,"defineProperty"],[393,23,11154,0],[393,24,11154,0,"exports"],[393,31,11154,0],[394,4,11154,0,"enumerable"],[394,14,11154,0],[395,4,11154,0,"get"],[395,7,11154,0],[395,18,11154,0,"get"],[395,19,11154,0],[396,6,11154,0],[396,13,11154,1563,"fetchSignInMethodsForEmail"],[396,39,11154,1589],[397,4,11154,1589],[398,2,11154,1589],[399,2,11154,0,"Object"],[399,8,11154,0],[399,9,11154,0,"defineProperty"],[399,23,11154,0],[399,24,11154,0,"exports"],[399,31,11154,0],[400,4,11154,0,"enumerable"],[400,14,11154,0],[401,4,11154,0,"get"],[401,7,11154,0],[401,18,11154,0,"get"],[401,19,11154,0],[402,6,11154,0],[402,13,11154,1597,"sendEmailVerification"],[402,34,11154,1618],[403,4,11154,1618],[404,2,11154,1618],[405,2,11154,0,"Object"],[405,8,11154,0],[405,9,11154,0,"defineProperty"],[405,23,11154,0],[405,24,11154,0,"exports"],[405,31,11154,0],[406,4,11154,0,"enumerable"],[406,14,11154,0],[407,4,11154,0,"get"],[407,7,11154,0],[407,18,11154,0,"get"],[407,19,11154,0],[408,6,11154,0],[408,13,11154,1626,"verifyBeforeUpdateEmail"],[408,36,11154,1649],[409,4,11154,1649],[410,2,11154,1649],[411,2,11154,0,"Object"],[411,8,11154,0],[411,9,11154,0,"defineProperty"],[411,23,11154,0],[411,24,11154,0,"exports"],[411,31,11154,0],[412,4,11154,0,"enumerable"],[412,14,11154,0],[413,4,11154,0,"get"],[413,7,11154,0],[413,18,11154,0,"get"],[413,19,11154,0],[414,6,11154,0],[414,13,11154,1657,"ActionCodeURL"],[414,26,11154,1670],[415,4,11154,1670],[416,2,11154,1670],[417,2,11154,0,"Object"],[417,8,11154,0],[417,9,11154,0,"defineProperty"],[417,23,11154,0],[417,24,11154,0,"exports"],[417,31,11154,0],[418,4,11154,0,"enumerable"],[418,14,11154,0],[419,4,11154,0,"get"],[419,7,11154,0],[419,18,11154,0,"get"],[419,19,11154,0],[420,6,11154,0],[420,13,11154,1678,"parseActionCodeURL"],[420,31,11154,1696],[421,4,11154,1696],[422,2,11154,1696],[423,2,11154,0,"Object"],[423,8,11154,0],[423,9,11154,0,"defineProperty"],[423,23,11154,0],[423,24,11154,0,"exports"],[423,31,11154,0],[424,4,11154,0,"enumerable"],[424,14,11154,0],[425,4,11154,0,"get"],[425,7,11154,0],[425,18,11154,0,"get"],[425,19,11154,0],[426,6,11154,0],[426,13,11154,1704,"updateProfile"],[426,26,11154,1717],[427,4,11154,1717],[428,2,11154,1717],[429,2,11154,0,"Object"],[429,8,11154,0],[429,9,11154,0,"defineProperty"],[429,23,11154,0],[429,24,11154,0,"exports"],[429,31,11154,0],[430,4,11154,0,"enumerable"],[430,14,11154,0],[431,4,11154,0,"get"],[431,7,11154,0],[431,18,11154,0,"get"],[431,19,11154,0],[432,6,11154,0],[432,13,11154,1725,"updateEmail"],[432,24,11154,1736],[433,4,11154,1736],[434,2,11154,1736],[435,2,11154,0,"Object"],[435,8,11154,0],[435,9,11154,0,"defineProperty"],[435,23,11154,0],[435,24,11154,0,"exports"],[435,31,11154,0],[436,4,11154,0,"enumerable"],[436,14,11154,0],[437,4,11154,0,"get"],[437,7,11154,0],[437,18,11154,0,"get"],[437,19,11154,0],[438,6,11154,0],[438,13,11154,1744,"updatePassword"],[438,27,11154,1758],[439,4,11154,1758],[440,2,11154,1758],[441,2,11154,0,"Object"],[441,8,11154,0],[441,9,11154,0,"defineProperty"],[441,23,11154,0],[441,24,11154,0,"exports"],[441,31,11154,0],[442,4,11154,0,"enumerable"],[442,14,11154,0],[443,4,11154,0,"get"],[443,7,11154,0],[443,18,11154,0,"get"],[443,19,11154,0],[444,6,11154,0],[444,13,11154,1766,"getIdToken"],[444,23,11154,1776],[445,4,11154,1776],[446,2,11154,1776],[447,2,11154,0,"Object"],[447,8,11154,0],[447,9,11154,0,"defineProperty"],[447,23,11154,0],[447,24,11154,0,"exports"],[447,31,11154,0],[448,4,11154,0,"enumerable"],[448,14,11154,0],[449,4,11154,0,"get"],[449,7,11154,0],[449,18,11154,0,"get"],[449,19,11154,0],[450,6,11154,0],[450,13,11154,1784,"getIdTokenResult"],[450,29,11154,1800],[451,4,11154,1800],[452,2,11154,1800],[453,2,11154,0,"Object"],[453,8,11154,0],[453,9,11154,0,"defineProperty"],[453,23,11154,0],[453,24,11154,0,"exports"],[453,31,11154,0],[454,4,11154,0,"enumerable"],[454,14,11154,0],[455,4,11154,0,"get"],[455,7,11154,0],[455,18,11154,0,"get"],[455,19,11154,0],[456,6,11154,0],[456,13,11154,1808,"unlink"],[456,19,11154,1814],[457,4,11154,1814],[458,2,11154,1814],[459,2,11154,0,"Object"],[459,8,11154,0],[459,9,11154,0,"defineProperty"],[459,23,11154,0],[459,24,11154,0,"exports"],[459,31,11154,0],[460,4,11154,0,"enumerable"],[460,14,11154,0],[461,4,11154,0,"get"],[461,7,11154,0],[461,18,11154,0,"get"],[461,19,11154,0],[462,6,11154,0],[462,13,11154,1822,"getAdditionalUserInfo"],[462,34,11154,1843],[463,4,11154,1843],[464,2,11154,1843],[465,2,11154,0,"Object"],[465,8,11154,0],[465,9,11154,0,"defineProperty"],[465,23,11154,0],[465,24,11154,0,"exports"],[465,31,11154,0],[466,4,11154,0,"enumerable"],[466,14,11154,0],[467,4,11154,0,"get"],[467,7,11154,0],[467,18,11154,0,"get"],[467,19,11154,0],[468,6,11154,0],[468,13,11154,1851,"reload"],[468,19,11154,1857],[469,4,11154,1857],[470,2,11154,1857],[471,2,11154,0,"Object"],[471,8,11154,0],[471,9,11154,0,"defineProperty"],[471,23,11154,0],[471,24,11154,0,"exports"],[471,31,11154,0],[472,4,11154,0,"enumerable"],[472,14,11154,0],[473,4,11154,0,"get"],[473,7,11154,0],[473,18,11154,0,"get"],[473,19,11154,0],[474,6,11154,0],[474,13,11154,1865,"getMultiFactorResolver"],[474,35,11154,1887],[475,4,11154,1887],[476,2,11154,1887],[477,2,11154,0,"Object"],[477,8,11154,0],[477,9,11154,0,"defineProperty"],[477,23,11154,0],[477,24,11154,0,"exports"],[477,31,11154,0],[478,4,11154,0,"enumerable"],[478,14,11154,0],[479,4,11154,0,"get"],[479,7,11154,0],[479,18,11154,0,"get"],[479,19,11154,0],[480,6,11154,0],[480,13,11154,1895,"multiFactor"],[480,24,11154,1906],[481,4,11154,1906],[482,2,11154,1906],[483,2,11154,0,"Object"],[483,8,11154,0],[483,9,11154,0,"defineProperty"],[483,23,11154,0],[483,24,11154,0,"exports"],[483,31,11154,0],[484,4,11154,0,"enumerable"],[484,14,11154,0],[485,4,11154,0,"get"],[485,7,11154,0],[485,18,11154,0,"get"],[485,19,11154,0],[486,6,11154,0],[486,13,11154,1914,"debugAssert"],[486,24,11154,1925],[487,4,11154,1925],[488,2,11154,1925],[489,2,11154,0,"Object"],[489,8,11154,0],[489,9,11154,0,"defineProperty"],[489,23,11154,0],[489,24,11154,0,"exports"],[489,31,11154,0],[490,4,11154,0,"enumerable"],[490,14,11154,0],[491,4,11154,0,"get"],[491,7,11154,0],[491,18,11154,0,"get"],[491,19,11154,0],[492,6,11154,0],[492,13,11154,1933,"_isIOS"],[492,19,11154,1939],[493,4,11154,1939],[494,2,11154,1939],[495,2,11154,0,"Object"],[495,8,11154,0],[495,9,11154,0,"defineProperty"],[495,23,11154,0],[495,24,11154,0,"exports"],[495,31,11154,0],[496,4,11154,0,"enumerable"],[496,14,11154,0],[497,4,11154,0,"get"],[497,7,11154,0],[497,18,11154,0,"get"],[497,19,11154,0],[498,6,11154,0],[498,13,11154,1947,"_isAndroid"],[498,23,11154,1957],[499,4,11154,1957],[500,2,11154,1957],[501,2,11154,0,"Object"],[501,8,11154,0],[501,9,11154,0,"defineProperty"],[501,23,11154,0],[501,24,11154,0,"exports"],[501,31,11154,0],[502,4,11154,0,"enumerable"],[502,14,11154,0],[503,4,11154,0,"get"],[503,7,11154,0],[503,18,11154,0,"get"],[503,19,11154,0],[504,6,11154,0],[504,13,11154,1965,"_fail"],[504,18,11154,1970],[505,4,11154,1970],[506,2,11154,1970],[507,2,11154,0,"Object"],[507,8,11154,0],[507,9,11154,0,"defineProperty"],[507,23,11154,0],[507,24,11154,0,"exports"],[507,31,11154,0],[508,4,11154,0,"enumerable"],[508,14,11154,0],[509,4,11154,0,"get"],[509,7,11154,0],[509,18,11154,0,"get"],[509,19,11154,0],[510,6,11154,0],[510,13,11154,1978,"_getRedirectUrl"],[510,28,11154,1993],[511,4,11154,1993],[512,2,11154,1993],[513,2,11154,0,"Object"],[513,8,11154,0],[513,9,11154,0,"defineProperty"],[513,23,11154,0],[513,24,11154,0,"exports"],[513,31,11154,0],[514,4,11154,0,"enumerable"],[514,14,11154,0],[515,4,11154,0,"get"],[515,7,11154,0],[515,18,11154,0,"get"],[515,19,11154,0],[516,6,11154,0],[516,13,11154,2001,"browserLocalPersistence"],[516,36,11154,2024],[517,4,11154,2024],[518,2,11154,2024],[519,2,11154,0,"Object"],[519,8,11154,0],[519,9,11154,0,"defineProperty"],[519,23,11154,0],[519,24,11154,0,"exports"],[519,31,11154,0],[520,4,11154,0,"enumerable"],[520,14,11154,0],[521,4,11154,0,"get"],[521,7,11154,0],[521,18,11154,0,"get"],[521,19,11154,0],[522,6,11154,0],[522,13,11154,2031,"browserSessionPersistence"],[522,38,11154,2056],[523,4,11154,2056],[524,2,11154,2056],[525,2,11154,0,"Object"],[525,8,11154,0],[525,9,11154,0,"defineProperty"],[525,23,11154,0],[525,24,11154,0,"exports"],[525,31,11154,0],[526,4,11154,0,"enumerable"],[526,14,11154,0],[527,4,11154,0,"get"],[527,7,11154,0],[527,18,11154,0,"get"],[527,19,11154,0],[528,6,11154,0],[528,13,11154,2063,"signInWithPopup"],[528,28,11154,2078],[529,4,11154,2078],[530,2,11154,2078],[531,2,11154,0,"Object"],[531,8,11154,0],[531,9,11154,0,"defineProperty"],[531,23,11154,0],[531,24,11154,0,"exports"],[531,31,11154,0],[532,4,11154,0,"enumerable"],[532,14,11154,0],[533,4,11154,0,"get"],[533,7,11154,0],[533,18,11154,0,"get"],[533,19,11154,0],[534,6,11154,0],[534,13,11154,2085,"linkWithPopup"],[534,26,11154,2098],[535,4,11154,2098],[536,2,11154,2098],[537,2,11154,0,"Object"],[537,8,11154,0],[537,9,11154,0,"defineProperty"],[537,23,11154,0],[537,24,11154,0,"exports"],[537,31,11154,0],[538,4,11154,0,"enumerable"],[538,14,11154,0],[539,4,11154,0,"get"],[539,7,11154,0],[539,18,11154,0,"get"],[539,19,11154,0],[540,6,11154,0],[540,13,11154,2105,"reauthenticateWithPopup"],[540,36,11154,2128],[541,4,11154,2128],[542,2,11154,2128],[543,2,11154,0,"Object"],[543,8,11154,0],[543,9,11154,0,"defineProperty"],[543,23,11154,0],[543,24,11154,0,"exports"],[543,31,11154,0],[544,4,11154,0,"enumerable"],[544,14,11154,0],[545,4,11154,0,"get"],[545,7,11154,0],[545,18,11154,0,"get"],[545,19,11154,0],[546,6,11154,0],[546,13,11154,2135,"signInWithRedirect"],[546,31,11154,2153],[547,4,11154,2153],[548,2,11154,2153],[549,2,11154,0,"Object"],[549,8,11154,0],[549,9,11154,0,"defineProperty"],[549,23,11154,0],[549,24,11154,0,"exports"],[549,31,11154,0],[550,4,11154,0,"enumerable"],[550,14,11154,0],[551,4,11154,0,"get"],[551,7,11154,0],[551,18,11154,0,"get"],[551,19,11154,0],[552,6,11154,0],[552,13,11154,2160,"linkWithRedirect"],[552,29,11154,2176],[553,4,11154,2176],[554,2,11154,2176],[555,2,11154,0,"Object"],[555,8,11154,0],[555,9,11154,0,"defineProperty"],[555,23,11154,0],[555,24,11154,0,"exports"],[555,31,11154,0],[556,4,11154,0,"enumerable"],[556,14,11154,0],[557,4,11154,0,"get"],[557,7,11154,0],[557,18,11154,0,"get"],[557,19,11154,0],[558,6,11154,0],[558,13,11154,2183,"indexedDBLocalPersistence"],[558,38,11154,2208],[559,4,11154,2208],[560,2,11154,2208],[561,2,11154,0,"Object"],[561,8,11154,0],[561,9,11154,0,"defineProperty"],[561,23,11154,0],[561,24,11154,0,"exports"],[561,31,11154,0],[562,4,11154,0,"enumerable"],[562,14,11154,0],[563,4,11154,0,"get"],[563,7,11154,0],[563,18,11154,0,"get"],[563,19,11154,0],[564,6,11154,0],[564,13,11154,2215,"reauthenticateWithRedirect"],[564,39,11154,2241],[565,4,11154,2241],[566,2,11154,2241],[567,2,11154,0,"Object"],[567,8,11154,0],[567,9,11154,0,"defineProperty"],[567,23,11154,0],[567,24,11154,0,"exports"],[567,31,11154,0],[568,4,11154,0,"enumerable"],[568,14,11154,0],[569,4,11154,0,"get"],[569,7,11154,0],[569,18,11154,0,"get"],[569,19,11154,0],[570,6,11154,0],[570,13,11154,2248,"getRedirectResult"],[570,30,11154,2265],[571,4,11154,2265],[572,2,11154,2265],[573,2,11154,0,"Object"],[573,8,11154,0],[573,9,11154,0,"defineProperty"],[573,23,11154,0],[573,24,11154,0,"exports"],[573,31,11154,0],[574,4,11154,0,"enumerable"],[574,14,11154,0],[575,4,11154,0,"get"],[575,7,11154,0],[575,18,11154,0,"get"],[575,19,11154,0],[576,6,11154,0],[576,13,11154,2272,"linkWithPhoneNumber"],[576,32,11154,2291],[577,4,11154,2291],[578,2,11154,2291],[579,2,11154,0,"Object"],[579,8,11154,0],[579,9,11154,0,"defineProperty"],[579,23,11154,0],[579,24,11154,0,"exports"],[579,31,11154,0],[580,4,11154,0,"enumerable"],[580,14,11154,0],[581,4,11154,0,"get"],[581,7,11154,0],[581,18,11154,0,"get"],[581,19,11154,0],[582,6,11154,0],[582,13,11154,2298,"browserPopupRedirectResolver"],[582,41,11154,2326],[583,4,11154,2326],[584,2,11154,2326],[585,2,11154,0,"Object"],[585,8,11154,0],[585,9,11154,0,"defineProperty"],[585,23,11154,0],[585,24,11154,0,"exports"],[585,31,11154,0],[586,4,11154,0,"enumerable"],[586,14,11154,0],[587,4,11154,0,"get"],[587,7,11154,0],[587,18,11154,0,"get"],[587,19,11154,0],[588,6,11154,0],[588,13,11154,2333,"PhoneMultiFactorGenerator"],[588,38,11154,2358],[589,4,11154,2358],[590,2,11154,2358],[591,2,11154,0,"Object"],[591,8,11154,0],[591,9,11154,0,"defineProperty"],[591,23,11154,0],[591,24,11154,0,"exports"],[591,31,11154,0],[592,4,11154,0,"enumerable"],[592,14,11154,0],[593,4,11154,0,"get"],[593,7,11154,0],[593,18,11154,0,"get"],[593,19,11154,0],[594,6,11154,0],[594,13,11154,2365,"TotpSecret"],[594,23,11154,2375],[595,4,11154,2375],[596,2,11154,2375],[597,2,11154,0,"Object"],[597,8,11154,0],[597,9,11154,0,"defineProperty"],[597,23,11154,0],[597,24,11154,0,"exports"],[597,31,11154,0],[598,4,11154,0,"enumerable"],[598,14,11154,0],[599,4,11154,0,"get"],[599,7,11154,0],[599,18,11154,0,"get"],[599,19,11154,0],[600,6,11154,0],[600,13,11154,2382,"getAuth"],[600,20,11154,2389],[601,4,11154,2389],[602,2,11154,2389],[603,2,11154,0,"Object"],[603,8,11154,0],[603,9,11154,0,"defineProperty"],[603,23,11154,0],[603,24,11154,0,"exports"],[603,31,11154,0],[604,4,11154,0,"enumerable"],[604,14,11154,0],[605,4,11154,0,"get"],[605,7,11154,0],[605,18,11154,0,"get"],[605,19,11154,0],[606,6,11154,0],[606,13,11154,2396,"ProviderId"],[606,23,11154,2406],[607,4,11154,2406],[608,2,11154,2406],[609,2,11154,0,"Object"],[609,8,11154,0],[609,9,11154,0,"defineProperty"],[609,23,11154,0],[609,24,11154,0,"exports"],[609,31,11154,0],[610,4,11154,0,"enumerable"],[610,14,11154,0],[611,4,11154,0,"get"],[611,7,11154,0],[611,18,11154,0,"get"],[611,19,11154,0],[612,6,11154,0],[612,13,11154,2413,"reauthenticateWithPhoneNumber"],[612,42,11154,2442],[613,4,11154,2442],[614,2,11154,2442],[615,2,11154,0,"Object"],[615,8,11154,0],[615,9,11154,0,"defineProperty"],[615,23,11154,0],[615,24,11154,0,"exports"],[615,31,11154,0],[616,4,11154,0,"enumerable"],[616,14,11154,0],[617,4,11154,0,"get"],[617,7,11154,0],[617,18,11154,0,"get"],[617,19,11154,0],[618,6,11154,0],[618,13,11154,2449,"signInWithPhoneNumber"],[618,34,11154,2470],[619,4,11154,2470],[620,2,11154,2470],[621,2,11154,0,"Object"],[621,8,11154,0],[621,9,11154,0,"defineProperty"],[621,23,11154,0],[621,24,11154,0,"exports"],[621,31,11154,0],[622,4,11154,0,"enumerable"],[622,14,11154,0],[623,4,11154,0,"get"],[623,7,11154,0],[623,18,11154,0,"get"],[623,19,11154,0],[624,6,11154,0],[624,13,11154,2477,"setPersistence"],[624,27,11154,2491],[625,4,11154,2491],[626,2,11154,2491],[627,2,11154,0,"Object"],[627,8,11154,0],[627,9,11154,0,"defineProperty"],[627,23,11154,0],[627,24,11154,0,"exports"],[627,31,11154,0],[628,4,11154,0,"enumerable"],[628,14,11154,0],[629,4,11154,0,"get"],[629,7,11154,0],[629,18,11154,0,"get"],[629,19,11154,0],[630,6,11154,0],[630,13,11154,2498,"updatePhoneNumber"],[630,30,11154,2515],[631,4,11154,2515],[632,2,11154,2515],[633,2,11154,0,"Object"],[633,8,11154,0],[633,9,11154,0,"defineProperty"],[633,23,11154,0],[633,24,11154,0,"exports"],[633,31,11154,0],[634,4,11154,0,"enumerable"],[634,14,11154,0],[635,4,11154,0,"get"],[635,7,11154,0],[635,18,11154,0,"get"],[635,19,11154,0],[636,6,11154,0],[636,13,11154,2522,"initializeRecaptchaConfig"],[636,38,11154,2547],[637,4,11154,2547],[638,2,11154,2547],[639,2,11154,0,"Object"],[639,8,11154,0],[639,9,11154,0,"defineProperty"],[639,23,11154,0],[639,24,11154,0,"exports"],[639,31,11154,0],[640,4,11154,0,"enumerable"],[640,14,11154,0],[641,4,11154,0,"get"],[641,7,11154,0],[641,18,11154,0,"get"],[641,19,11154,0],[642,6,11154,0],[642,13,11154,2554,"validatePassword"],[642,29,11154,2570],[643,4,11154,2570],[644,2,11154,2570],[645,2,11154,0,"Object"],[645,8,11154,0],[645,9,11154,0,"defineProperty"],[645,23,11154,0],[645,24,11154,0,"exports"],[645,31,11154,0],[646,4,11154,0,"enumerable"],[646,14,11154,0],[647,4,11154,0,"get"],[647,7,11154,0],[647,18,11154,0,"get"],[647,19,11154,0],[648,6,11154,0],[648,13,11154,2577,"onIdTokenChanged"],[648,29,11154,2593],[649,4,11154,2593],[650,2,11154,2593],[651,2,11154,0,"Object"],[651,8,11154,0],[651,9,11154,0,"defineProperty"],[651,23,11154,0],[651,24,11154,0,"exports"],[651,31,11154,0],[652,4,11154,0,"enumerable"],[652,14,11154,0],[653,4,11154,0,"get"],[653,7,11154,0],[653,18,11154,0,"get"],[653,19,11154,0],[654,6,11154,0],[654,13,11154,2600,"beforeAuthStateChanged"],[654,35,11154,2622],[655,4,11154,2622],[656,2,11154,2622],[657,2,11154,0,"Object"],[657,8,11154,0],[657,9,11154,0,"defineProperty"],[657,23,11154,0],[657,24,11154,0,"exports"],[657,31,11154,0],[658,4,11154,0,"enumerable"],[658,14,11154,0],[659,4,11154,0,"get"],[659,7,11154,0],[659,18,11154,0,"get"],[659,19,11154,0],[660,6,11154,0],[660,13,11154,2629,"onAuthStateChanged"],[660,31,11154,2647],[661,4,11154,2647],[662,2,11154,2647],[663,2,11154,2655],[663,6,11154,2655,"_babelRuntimeHelpersObjectWithoutPropertiesLoose"],[663,54,11154,2655],[663,57,11154,2655,"require"],[663,64,11154,2655],[663,65,11154,2655,"_dependencyMap"],[663,79,11154,2655],[664,2,11154,2655],[664,6,11154,2655,"_objectWithoutPropertiesLoose"],[664,35,11154,2655],[664,38,11154,2655,"_interopDefault"],[664,53,11154,2655],[664,54,11154,2655,"_babelRuntimeHelpersObjectWithoutPropertiesLoose"],[664,102,11154,2655],[665,2,1,0],[665,6,1,0,"_firebaseApp"],[665,18,1,0],[665,21,1,0,"require"],[665,28,1,0],[665,29,1,0,"_dependencyMap"],[665,43,1,0],[666,2,2,0],[666,6,2,0,"_firebaseUtil"],[666,19,2,0],[666,22,2,0,"require"],[666,29,2,0],[666,30,2,0,"_dependencyMap"],[666,44,2,0],[667,2,3,0],[667,6,3,0,"_firebaseLogger"],[667,21,3,0],[667,24,3,0,"require"],[667,31,3,0],[667,32,3,0,"_dependencyMap"],[667,46,3,0],[668,2,4,0],[668,6,4,0,"_firebaseComponent"],[668,24,4,0],[668,27,4,0,"require"],[668,34,4,0],[668,35,4,0,"_dependencyMap"],[668,49,4,0],[669,2,6,0],[670,0,7,0],[671,0,8,0],[672,0,9,0],[673,0,10,0],[674,0,11,0],[675,0,12,0],[676,0,13,0],[677,0,14,0],[678,0,15,0],[679,0,16,0],[680,0,17,0],[681,0,18,0],[682,0,19,0],[683,0,20,0],[684,0,21,0],[685,2,22,0],[686,0,23,0],[687,0,24,0],[688,0,25,0],[689,0,26,0],[690,2,27,0],[690,8,27,6,"FactorId"],[690,16,27,14],[690,19,27,17],[691,4,28,4],[692,4,29,4,"PHONE"],[692,9,29,9],[692,11,29,11],[692,18,29,18],[693,4,30,4,"TOTP"],[693,8,30,8],[693,10,30,10],[694,2,31,0],[694,3,31,1],[695,2,32,0],[696,0,33,0],[697,0,34,0],[698,0,35,0],[699,0,36,0],[700,2,37,0],[700,8,37,6,"ProviderId"],[700,18,37,16],[700,21,37,19],[701,4,38,4],[702,4,39,4,"FACEBOOK"],[702,12,39,12],[702,14,39,14],[702,28,39,28],[703,4,40,4],[704,4,41,4,"GITHUB"],[704,10,41,10],[704,12,41,12],[704,24,41,24],[705,4,42,4],[706,4,43,4,"GOOGLE"],[706,10,43,10],[706,12,43,12],[706,24,43,24],[707,4,44,4],[708,4,45,4,"PASSWORD"],[708,12,45,12],[708,14,45,14],[708,24,45,24],[709,4,46,4],[710,4,47,4,"PHONE"],[710,9,47,9],[710,11,47,11],[710,18,47,18],[711,4,48,4],[712,4,49,4,"TWITTER"],[712,11,49,11],[712,13,49,13],[713,2,50,0],[713,3,50,1],[714,2,51,0],[715,0,52,0],[716,0,53,0],[717,0,54,0],[718,0,55,0],[719,2,56,0],[719,8,56,6,"SignInMethod"],[719,20,56,18],[719,23,56,21],[720,4,57,4],[721,4,58,4,"EMAIL_LINK"],[721,14,58,14],[721,16,58,16],[721,27,58,27],[722,4,59,4],[723,4,60,4,"EMAIL_PASSWORD"],[723,18,60,18],[723,20,60,20],[723,30,60,30],[724,4,61,4],[725,4,62,4,"FACEBOOK"],[725,12,62,12],[725,14,62,14],[725,28,62,28],[726,4,63,4],[727,4,64,4,"GITHUB"],[727,10,64,10],[727,12,64,12],[727,24,64,24],[728,4,65,4],[729,4,66,4,"GOOGLE"],[729,10,66,10],[729,12,66,12],[729,24,66,24],[730,4,67,4],[731,4,68,4,"PHONE"],[731,9,68,9],[731,11,68,11],[731,18,68,18],[732,4,69,4],[733,4,70,4,"TWITTER"],[733,11,70,11],[733,13,70,13],[734,2,71,0],[734,3,71,1],[735,2,72,0],[736,0,73,0],[737,0,74,0],[738,0,75,0],[739,0,76,0],[740,2,77,0],[740,8,77,6,"OperationType"],[740,21,77,19],[740,24,77,22],[741,4,78,4],[742,4,79,4,"LINK"],[742,8,79,8],[742,10,79,10],[742,16,79,16],[743,4,80,4],[744,4,81,4,"REAUTHENTICATE"],[744,18,81,18],[744,20,81,20],[744,36,81,36],[745,4,82,4],[746,4,83,4,"SIGN_IN"],[746,11,83,11],[746,13,83,13],[747,2,84,0],[747,3,84,1],[748,2,85,0],[749,0,86,0],[750,0,87,0],[751,0,88,0],[752,0,89,0],[753,2,90,0],[753,8,90,6,"ActionCodeOperation"],[753,27,90,25],[753,30,90,28],[754,4,91,4],[755,4,92,4,"EMAIL_SIGNIN"],[755,16,92,16],[755,18,92,18],[755,32,92,32],[756,4,93,4],[757,4,94,4,"PASSWORD_RESET"],[757,18,94,18],[757,20,94,20],[757,36,94,36],[758,4,95,4],[759,4,96,4,"RECOVER_EMAIL"],[759,17,96,17],[759,19,96,19],[759,34,96,34],[760,4,97,4],[761,4,98,4,"REVERT_SECOND_FACTOR_ADDITION"],[761,33,98,33],[761,35,98,35],[761,66,98,66],[762,4,99,4],[763,4,100,4,"VERIFY_AND_CHANGE_EMAIL"],[763,27,100,27],[763,29,100,29],[763,54,100,54],[764,4,101,4],[765,4,102,4,"VERIFY_EMAIL"],[765,16,102,16],[765,18,102,18],[766,2,103,0],[766,3,103,1],[768,2,105,0],[769,0,106,0],[770,0,107,0],[771,0,108,0],[772,0,109,0],[773,0,110,0],[774,0,111,0],[775,0,112,0],[776,0,113,0],[777,0,114,0],[778,0,115,0],[779,0,116,0],[780,0,117,0],[781,0,118,0],[782,0,119,0],[783,0,120,0],[784,2,121,0],[784,11,121,9,"_debugErrorMap"],[784,25,121,23,"_debugErrorMap"],[784,26,121,23],[784,28,121,26],[785,4,122,4],[785,11,122,11],[786,6,123,8],[786,7,123,9],[786,35,123,37],[786,36,123,38],[786,79,123,81],[786,133,123,135],[787,6,124,8],[787,7,124,9],[787,23,124,25],[787,24,124,26],[787,61,124,63],[787,63,124,65],[788,6,125,8],[788,7,125,9],[788,27,125,29],[788,28,125,30],[788,69,125,71],[788,132,125,134],[788,135,126,12],[788,206,126,83],[788,209,127,12],[788,267,127,70],[789,6,128,8],[789,7,128,9],[789,26,128,28],[789,27,128,29],[789,67,128,69],[789,135,128,137],[789,138,129,12],[789,208,129,82],[789,211,130,12],[789,225,130,26],[790,6,131,8],[790,7,131,9],[790,29,131,31],[790,30,131,32],[790,73,131,75],[790,141,131,143],[790,144,132,12],[790,216,132,84],[790,219,133,12],[790,244,133,37],[791,6,134,8],[791,7,134,9],[791,21,134,23],[791,22,134,24],[791,57,134,59],[791,129,134,131],[791,132,135,12],[791,140,135,20],[792,6,136,8],[792,7,136,9],[792,26,136,28],[792,27,136,29],[792,67,136,69],[792,100,136,102],[793,6,137,8],[793,7,137,9],[793,25,137,27],[793,26,137,28],[793,65,137,67],[793,97,137,99],[794,6,138,8],[794,7,138,9],[794,34,138,36],[794,35,138,37],[794,83,138,85],[794,153,138,155],[795,6,139,8],[795,7,139,9],[795,30,139,32],[795,31,139,33],[795,73,139,75],[795,128,139,130],[796,6,140,8],[796,7,140,9],[796,30,140,32],[796,31,140,33],[796,84,140,86],[796,157,140,159],[796,160,141,12],[796,197,141,49],[797,6,142,8],[797,7,142,9],[797,46,142,48],[797,47,142,49],[797,100,142,102],[797,180,142,182],[797,183,143,12],[797,258,143,87],[797,261,144,12],[797,295,144,46],[798,6,145,8],[798,7,145,9],[798,35,145,37],[798,36,145,38],[798,85,145,87],[798,168,145,170],[798,171,146,12],[798,184,146,25],[799,6,147,8],[799,7,147,9],[799,40,147,42],[799,41,147,43],[799,95,147,97],[799,150,147,152],[800,6,148,8],[800,7,148,9],[800,29,148,31],[800,30,148,32],[800,65,148,67],[800,122,148,124],[801,6,149,8],[801,7,149,9],[801,31,149,33],[801,32,149,34],[801,77,149,79],[801,148,149,150],[801,151,150,12],[801,210,150,71],[801,213,151,12],[801,246,151,45],[802,6,152,8],[802,7,152,9],[802,28,152,30],[802,29,152,31],[802,68,152,70],[802,98,152,100],[803,6,153,8],[803,7,153,9],[803,32,153,34],[803,33,153,35],[803,77,153,79],[803,159,153,161],[804,6,154,8],[804,7,154,9],[804,23,154,25],[804,24,154,26],[804,61,154,63],[804,98,154,100],[805,6,155,8],[805,7,155,9],[805,31,155,33],[805,32,155,34],[805,77,155,79],[805,151,155,153],[805,154,156,12],[805,215,156,73],[806,6,157,8],[806,7,157,9],[806,23,157,25],[806,24,157,26],[806,61,157,63],[806,131,157,133],[807,6,158,8],[807,7,158,9],[807,27,158,29],[807,28,158,30],[807,63,158,65],[807,134,158,136],[807,137,159,12],[807,208,159,83],[807,211,160,12],[807,254,160,55],[808,6,161,8],[808,7,161,9],[808,27,161,29],[808,28,161,30],[808,69,161,71],[808,106,161,108],[809,6,162,8],[809,7,162,9],[809,34,162,36],[809,35,162,37],[809,70,162,72],[809,142,162,144],[809,145,163,12],[809,219,163,86],[809,222,164,12],[809,263,164,53],[810,6,165,8],[810,7,165,9],[810,29,165,31],[810,30,165,32],[810,73,165,75],[810,127,165,129],[811,6,166,8],[811,7,166,9],[811,38,166,40],[811,39,166,41],[811,91,166,93],[811,166,166,168],[811,169,167,12],[811,229,167,72],[811,232,168,12],[811,293,168,73],[811,296,169,12],[811,329,169,45],[812,6,170,8],[812,7,170,9],[812,29,170,31],[812,30,170,32],[812,73,170,75],[812,144,170,146],[813,6,171,8],[813,7,171,9],[813,36,171,38],[813,37,171,39],[813,87,171,89],[813,178,171,180],[814,6,172,8],[814,7,172,9],[814,22,172,24],[814,23,172,25],[814,59,172,61],[814,98,172,100],[815,6,173,8],[815,7,173,9],[815,32,173,34],[815,33,173,35],[815,79,173,81],[815,147,173,149],[816,6,174,8],[816,7,174,9],[816,24,174,26],[816,25,174,27],[816,63,174,65],[816,132,174,134],[817,6,175,8],[817,7,175,9],[817,26,175,28],[817,27,175,29],[817,67,175,69],[817,116,175,118],[818,6,176,8],[818,7,176,9],[818,27,176,29],[818,28,176,30],[818,69,176,71],[818,139,176,141],[819,6,177,8],[819,7,177,9],[819,32,177,34],[819,33,177,35],[819,79,177,81],[819,173,177,175],[819,176,178,12],[819,258,178,94],[820,6,179,8],[820,7,179,9],[820,37,179,39],[820,38,179,40],[820,80,179,82],[820,160,179,162],[821,6,180,8],[821,7,180,9],[821,31,180,33],[821,32,180,34],[821,77,180,79],[821,149,180,151],[821,152,181,12],[821,184,181,44],[822,6,182,8],[822,7,182,9],[822,32,182,34],[822,33,182,35],[822,79,182,81],[822,150,182,152],[822,153,183,12],[822,173,183,32],[823,6,184,8],[823,7,184,9],[823,28,184,30],[823,29,184,31],[823,66,184,68],[823,137,184,139],[823,140,185,12],[823,213,185,85],[824,6,186,8],[824,7,186,9],[824,28,186,30],[824,29,186,31],[824,68,186,70],[824,140,186,142],[824,143,187,12],[824,179,187,48],[825,6,188,8],[825,7,188,9],[825,23,188,25],[825,24,188,26],[825,63,188,65],[825,126,188,128],[826,6,189,8],[826,7,189,9],[826,33,189,35],[826,34,189,36],[826,76,189,78],[826,159,189,161],[827,6,190,8],[827,7,190,9],[827,29,190,31],[827,30,190,32],[827,73,190,75],[827,146,190,148],[827,149,191,12],[827,220,191,83],[827,223,192,12],[827,294,192,83],[827,297,193,12],[827,327,193,42],[828,6,194,8],[828,7,194,9],[828,28,194,30],[828,29,194,31],[828,71,194,73],[828,110,194,112],[829,6,195,8],[829,7,195,9],[829,32,195,34],[829,33,195,35],[829,79,195,81],[829,151,195,153],[829,154,196,12],[829,191,196,49],[830,6,197,8],[830,7,197,9],[830,23,197,25],[830,24,197,26],[830,61,197,63],[830,153,197,155],[830,156,198,12],[830,238,198,94],[831,6,199,8],[831,7,199,9],[831,32,199,34],[831,33,199,35],[831,76,199,78],[831,150,199,152],[832,6,200,8],[832,7,200,9],[832,26,200,28],[832,27,200,29],[832,67,200,69],[832,110,200,112],[833,6,201,8],[833,7,201,9],[833,22,201,24],[833,23,201,25],[833,59,201,61],[833,118,201,120],[834,6,202,8],[834,7,202,9],[834,33,202,35],[834,34,202,36],[834,85,202,87],[834,175,202,177],[835,6,203,8],[835,7,203,9],[835,36,203,38],[835,37,203,39],[835,79,203,81],[835,150,203,152],[835,153,204,12],[835,209,204,68],[836,6,205,8],[836,7,205,9],[836,31,205,33],[836,32,205,34],[836,77,205,79],[836,145,205,147],[836,148,206,12],[836,209,206,73],[837,6,207,8],[837,7,207,9],[837,34,207,36],[837,35,207,37],[837,70,207,72],[837,146,207,148],[838,6,208,8],[838,7,208,9],[838,29,208,31],[838,30,208,32],[838,73,208,75],[838,122,208,124],[839,6,209,8],[839,7,209,9],[839,29,209,31],[839,30,209,32],[839,73,209,75],[839,110,209,112],[840,6,210,8],[840,7,210,9],[840,30,210,32],[840,31,210,33],[840,75,210,77],[840,142,210,144],[841,6,211,8],[841,7,211,9],[841,33,211,35],[841,34,211,36],[841,81,211,83],[841,149,211,151],[841,152,212,12],[841,225,212,85],[841,228,213,12],[841,254,213,38],[842,6,214,8],[842,7,214,9],[842,25,214,27],[842,26,214,28],[842,65,214,67],[842,104,214,106],[843,6,215,8],[843,7,215,9],[843,34,215,36],[843,35,215,37],[843,74,215,76],[843,116,215,118],[844,6,216,8],[844,7,216,9],[844,37,216,39],[844,38,216,40],[844,80,216,82],[844,146,216,148],[845,6,217,8],[845,7,217,9],[845,29,217,31],[845,30,217,32],[845,73,217,75],[845,144,217,146],[846,6,218,8],[846,7,218,9],[846,32,218,34],[846,33,218,35],[846,76,218,78],[846,146,218,148],[847,6,219,8],[847,7,219,9],[847,20,219,22],[847,21,219,23],[847,60,219,62],[847,108,219,110],[848,6,220,8],[848,7,220,9],[848,36,220,38],[848,37,220,39],[848,78,220,80],[848,152,220,154],[849,6,221,8],[849,7,221,9],[849,35,221,37],[849,36,221,38],[849,71,221,73],[849,143,221,145],[850,6,222,8],[850,7,222,9],[850,49,222,51],[850,50,222,52],[850,90,222,92],[850,160,222,162],[850,163,223,12],[850,232,223,81],[850,235,224,12],[850,251,224,28],[851,6,225,8],[851,7,225,9],[851,31,225,33],[851,32,225,34],[851,77,225,79],[851,174,225,176],[852,6,226,8],[852,7,226,9],[852,22,226,24],[852,23,226,25],[852,59,226,61],[852,96,226,98],[853,6,227,8],[853,7,227,9],[853,25,227,27],[853,26,227,28],[853,65,227,67],[853,125,227,127],[854,6,228,8],[854,7,228,9],[854,18,228,20],[854,19,228,21],[854,51,228,53],[854,124,228,126],[854,127,229,12],[854,161,229,46],[855,6,230,8],[855,7,230,9],[855,30,230,32],[855,31,230,33],[855,75,230,77],[855,143,230,145],[855,146,231,12],[855,219,231,85],[855,222,232,12],[855,237,232,27],[856,6,233,8],[856,7,233,9],[856,52,233,54],[856,53,233,55],[856,99,233,101],[856,172,233,174],[856,175,234,12],[856,248,234,85],[856,251,235,12],[856,286,235,47],[857,6,236,8],[857,7,236,9],[857,22,236,24],[857,23,236,25],[857,59,236,61],[857,150,236,152],[858,6,237,8],[858,7,237,9],[858,29,237,31],[858,30,237,32],[858,73,237,75],[858,145,237,147],[859,6,238,8],[859,7,238,9],[859,32,238,34],[859,33,238,35],[859,79,238,81],[859,144,238,146],[860,6,239,8],[860,7,239,9],[860,23,239,25],[860,24,239,26],[860,61,239,63],[860,120,239,122],[861,6,240,8],[861,7,240,9],[861,35,240,37],[861,36,240,38],[861,85,240,87],[861,159,240,161],[862,6,241,8],[862,7,241,9],[862,35,241,37],[862,36,241,38],[862,85,241,87],[862,135,241,137],[863,6,242,8],[863,7,242,9],[863,28,242,30],[863,29,242,31],[863,71,242,73],[863,131,242,133],[864,6,243,8],[864,7,243,9],[864,37,243,39],[864,38,243,40],[864,91,243,93],[864,147,243,149],[865,6,244,8],[865,7,244,9],[865,45,244,47],[865,46,244,48],[865,97,244,99],[865,172,244,174],[866,6,245,8],[866,7,245,9],[866,27,245,29],[866,28,245,30],[866,69,245,71],[866,138,245,140],[867,6,246,8],[867,7,246,9],[867,16,246,18],[867,17,246,19],[867,47,246,49],[867,77,246,79],[868,6,247,8],[868,7,247,9],[868,27,247,29],[868,28,247,30],[868,64,247,66],[868,136,247,138],[869,6,248,8],[869,7,248,9],[869,26,248,28],[869,27,248,29],[869,77,248,79],[869,150,248,152],[869,153,249,12],[869,171,249,30],[870,6,250,8],[870,7,250,9],[870,34,250,36],[870,35,250,37],[870,77,250,79],[870,148,250,150],[870,151,251,12],[870,188,251,49],[871,6,252,8],[871,7,252,9],[871,33,252,35],[871,34,252,36],[871,81,252,83],[871,198,252,200],[872,6,253,8],[872,7,253,9],[872,37,253,39],[872,38,253,40],[872,84,253,86],[872,158,253,160],[873,6,254,8],[873,7,254,9],[873,37,254,39],[873,38,254,40],[873,89,254,91],[873,149,254,151],[874,6,255,8],[874,7,255,9],[874,25,255,27],[874,26,255,28],[874,65,255,67],[874,107,255,109],[875,6,256,8],[875,7,256,9],[875,23,256,25],[875,24,256,26],[875,61,256,63],[875,132,256,134],[876,6,257,8],[876,7,257,9],[876,23,257,25],[876,24,257,26],[876,59,257,61],[876,132,257,134],[876,135,258,12],[876,155,258,32],[877,6,259,8],[877,7,259,9],[877,22,259,24],[877,23,259,25],[877,59,259,61],[877,116,259,118],[878,6,260,8],[878,7,260,9],[878,22,260,24],[878,23,260,25],[878,59,260,61],[878,137,260,139],[879,6,261,8],[879,7,261,9],[879,24,261,26],[879,25,261,27],[879,63,261,65],[879,65,261,67],[880,6,262,8],[880,7,262,9],[880,22,262,24],[880,23,262,25],[880,59,262,61],[880,108,262,110],[881,6,263,8],[881,7,263,9],[881,32,263,34],[881,33,263,35],[881,79,263,81],[881,157,263,159],[882,6,264,8],[882,7,264,9],[882,28,264,30],[882,29,264,31],[882,71,264,73],[882,119,264,121],[882,122,265,12],[882,195,265,85],[882,198,266,12],[882,278,266,92],[882,281,267,12],[882,313,267,44],[883,6,268,8],[883,7,268,9],[883,32,268,34],[883,33,268,35],[883,79,268,81],[883,148,268,150],[884,6,269,8],[884,7,269,9],[884,32,269,34],[884,33,269,35],[884,79,269,81],[884,148,269,150],[885,6,270,8],[885,7,270,9],[885,33,270,35],[885,34,270,36],[885,81,270,83],[885,151,270,153],[886,6,271,8],[886,7,271,9],[886,30,271,32],[886,31,271,33],[886,75,271,77],[886,142,271,144],[887,6,272,8],[887,7,272,9],[887,28,272,30],[887,29,272,31],[887,71,272,73],[887,146,272,148],[888,6,273,8],[888,7,273,9],[888,34,273,36],[888,35,273,37],[888,83,273,85],[888,154,273,156],[889,6,274,8],[889,7,274,9],[889,25,274,27],[889,26,274,28],[889,65,274,67],[889,94,274,96],[890,6,275,8],[890,7,275,9],[890,34,275,36],[890,35,275,37],[890,83,275,85],[890,154,275,156],[891,6,276,8],[891,7,276,9],[891,51,276,53],[891,52,276,54],[891,117,276,119],[891,245,276,247],[892,6,277,8],[892,7,277,9],[892,44,277,46],[892,45,277,47],[892,103,277,105],[892,149,277,151],[893,6,278,8],[893,7,278,9],[893,36,278,38],[893,37,278,39],[893,87,278,89],[893,179,278,181],[893,182,279,12],[894,4,280,4],[894,5,280,5],[895,2,281,0],[896,2,282,0],[896,11,282,9,"_prodErrorMap"],[896,24,282,22,"_prodErrorMap"],[896,25,282,22],[896,27,282,25],[897,4,283,4],[898,4,284,4],[899,4,285,4],[900,4,286,4],[900,11,286,11],[901,6,287,8],[901,7,287,9],[901,46,287,48],[901,47,287,49],[901,100,287,102],[901,180,287,182],[901,183,288,12],[901,258,288,87],[901,261,289,12],[902,4,290,4],[902,5,290,5],[903,2,291,0],[904,2,292,0],[905,0,293,0],[906,0,294,0],[907,0,295,0],[908,0,296,0],[909,0,297,0],[910,0,298,0],[911,2,299,0],[911,8,299,6,"debugErrorMap"],[911,21,299,19],[911,24,299,22,"_debugErrorMap"],[911,38,299,36],[912,2,300,0],[913,0,301,0],[914,0,302,0],[915,0,303,0],[916,0,304,0],[917,0,305,0],[918,0,306,0],[919,2,307,0],[919,8,307,6,"prodErrorMap"],[919,20,307,18],[919,23,307,21,"_prodErrorMap"],[919,36,307,34],[920,2,308,0],[920,8,308,6,"_DEFAULT_AUTH_ERROR_FACTORY"],[920,35,308,33],[920,38,308,36],[920,42,308,40,"ErrorFactory"],[920,55,308,52],[920,56,308,52,"ErrorFactory"],[920,68,308,52],[920,69,308,53],[920,75,308,59],[920,77,308,61],[920,87,308,71],[920,89,308,73,"_prodErrorMap"],[920,102,308,86],[920,103,308,87],[920,104,308,88],[920,105,308,89],[921,2,309,0],[922,0,310,0],[923,0,311,0],[924,0,312,0],[925,0,313,0],[926,0,314,0],[927,0,315,0],[928,0,316,0],[929,0,317,0],[930,0,318,0],[931,0,319,0],[932,2,320,0],[932,8,320,6,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[932,50,320,48],[932,53,320,51],[933,4,321,4,"ADMIN_ONLY_OPERATION"],[933,24,321,24],[933,26,321,26],[933,59,321,59],[934,4,322,4,"ARGUMENT_ERROR"],[934,18,322,18],[934,20,322,20],[934,41,322,41],[935,4,323,4,"APP_NOT_AUTHORIZED"],[935,22,323,22],[935,24,323,24],[935,49,323,49],[936,4,324,4,"APP_NOT_INSTALLED"],[936,21,324,21],[936,23,324,23],[936,47,324,47],[937,4,325,4,"CAPTCHA_CHECK_FAILED"],[937,24,325,24],[937,26,325,26],[937,53,325,53],[938,4,326,4,"CODE_EXPIRED"],[938,16,326,16],[938,18,326,18],[938,37,326,37],[939,4,327,4,"CORDOVA_NOT_READY"],[939,21,327,21],[939,23,327,23],[939,47,327,47],[940,4,328,4,"CORS_UNSUPPORTED"],[940,20,328,20],[940,22,328,22],[940,45,328,45],[941,4,329,4,"CREDENTIAL_ALREADY_IN_USE"],[941,29,329,29],[941,31,329,31],[941,63,329,63],[942,4,330,4,"CREDENTIAL_MISMATCH"],[942,23,330,23],[942,25,330,25],[942,53,330,53],[943,4,331,4,"CREDENTIAL_TOO_OLD_LOGIN_AGAIN"],[943,34,331,34],[943,36,331,36],[943,64,331,64],[944,4,332,4,"DEPENDENT_SDK_INIT_BEFORE_AUTH"],[944,34,332,34],[944,36,332,36],[944,80,332,80],[945,4,333,4,"DYNAMIC_LINK_NOT_ACTIVATED"],[945,30,333,30],[945,32,333,32],[945,65,333,65],[946,4,334,4,"EMAIL_CHANGE_NEEDS_VERIFICATION"],[946,35,334,35],[946,37,334,37],[946,75,334,75],[947,4,335,4,"EMAIL_EXISTS"],[947,16,335,16],[947,18,335,18],[947,45,335,45],[948,4,336,4,"EMULATOR_CONFIG_FAILED"],[948,26,336,26],[948,28,336,28],[948,57,336,57],[949,4,337,4,"EXPIRED_OOB_CODE"],[949,20,337,20],[949,22,337,22],[949,48,337,48],[950,4,338,4,"EXPIRED_POPUP_REQUEST"],[950,25,338,25],[950,27,338,27],[950,57,338,57],[951,4,339,4,"INTERNAL_ERROR"],[951,18,339,18],[951,20,339,20],[951,41,339,41],[952,4,340,4,"INVALID_API_KEY"],[952,19,340,19],[952,21,340,21],[952,43,340,43],[953,4,341,4,"INVALID_APP_CREDENTIAL"],[953,26,341,26],[953,28,341,28],[953,57,341,57],[954,4,342,4,"INVALID_APP_ID"],[954,18,342,18],[954,20,342,20],[954,41,342,41],[955,4,343,4,"INVALID_AUTH"],[955,16,343,16],[955,18,343,18],[955,43,343,43],[956,4,344,4,"INVALID_AUTH_EVENT"],[956,22,344,22],[956,24,344,24],[956,49,344,49],[957,4,345,4,"INVALID_CERT_HASH"],[957,21,345,21],[957,23,345,23],[957,47,345,47],[958,4,346,4,"INVALID_CODE"],[958,16,346,16],[958,18,346,18],[958,50,346,50],[959,4,347,4,"INVALID_CONTINUE_URI"],[959,24,347,24],[959,26,347,26],[959,53,347,53],[960,4,348,4,"INVALID_CORDOVA_CONFIGURATION"],[960,33,348,33],[960,35,348,35],[960,71,348,71],[961,4,349,4,"INVALID_CUSTOM_TOKEN"],[961,24,349,24],[961,26,349,26],[961,53,349,53],[962,4,350,4,"INVALID_DYNAMIC_LINK_DOMAIN"],[962,31,350,31],[962,33,350,33],[962,67,350,67],[963,4,351,4,"INVALID_EMAIL"],[963,17,351,17],[963,19,351,19],[963,39,351,39],[964,4,352,4,"INVALID_EMULATOR_SCHEME"],[964,27,352,27],[964,29,352,29],[964,59,352,59],[965,4,353,4,"INVALID_IDP_RESPONSE"],[965,24,353,24],[965,26,353,26],[965,51,353,51],[966,4,354,4,"INVALID_LOGIN_CREDENTIALS"],[966,29,354,29],[966,31,354,31],[966,56,354,56],[967,4,355,4,"INVALID_MESSAGE_PAYLOAD"],[967,27,355,27],[967,29,355,29],[967,59,355,59],[968,4,356,4,"INVALID_MFA_SESSION"],[968,23,356,23],[968,25,356,25],[968,60,356,60],[969,4,357,4,"INVALID_OAUTH_CLIENT_ID"],[969,27,357,27],[969,29,357,29],[969,59,357,59],[970,4,358,4,"INVALID_OAUTH_PROVIDER"],[970,26,358,26],[970,28,358,28],[970,57,358,57],[971,4,359,4,"INVALID_OOB_CODE"],[971,20,359,20],[971,22,359,22],[971,48,359,48],[972,4,360,4,"INVALID_ORIGIN"],[972,18,360,18],[972,20,360,20],[972,46,360,46],[973,4,361,4,"INVALID_PASSWORD"],[973,20,361,20],[973,22,361,22],[973,43,361,43],[974,4,362,4,"INVALID_PERSISTENCE"],[974,23,362,23],[974,25,362,25],[974,56,362,56],[975,4,363,4,"INVALID_PHONE_NUMBER"],[975,24,363,24],[975,26,363,26],[975,53,363,53],[976,4,364,4,"INVALID_PROVIDER_ID"],[976,23,364,23],[976,25,364,25],[976,51,364,51],[977,4,365,4,"INVALID_RECIPIENT_EMAIL"],[977,27,365,27],[977,29,365,29],[977,59,365,59],[978,4,366,4,"INVALID_SENDER"],[978,18,366,18],[978,20,366,20],[978,41,366,41],[979,4,367,4,"INVALID_SESSION_INFO"],[979,24,367,24],[979,26,367,26],[979,56,367,56],[980,4,368,4,"INVALID_TENANT_ID"],[980,21,368,21],[980,23,368,23],[980,47,368,47],[981,4,369,4,"MFA_INFO_NOT_FOUND"],[981,22,369,22],[981,24,369,24],[981,58,369,58],[982,4,370,4,"MFA_REQUIRED"],[982,16,370,16],[982,18,370,18],[982,51,370,51],[983,4,371,4,"MISSING_ANDROID_PACKAGE_NAME"],[983,32,371,32],[983,34,371,34],[983,65,371,65],[984,4,372,4,"MISSING_APP_CREDENTIAL"],[984,26,372,26],[984,28,372,28],[984,57,372,57],[985,4,373,4,"MISSING_AUTH_DOMAIN"],[985,23,373,23],[985,25,373,25],[985,59,373,59],[986,4,374,4,"MISSING_CODE"],[986,16,374,16],[986,18,374,18],[986,50,374,50],[987,4,375,4,"MISSING_CONTINUE_URI"],[987,24,375,24],[987,26,375,26],[987,53,375,53],[988,4,376,4,"MISSING_IFRAME_START"],[988,24,376,24],[988,26,376,26],[988,53,376,53],[989,4,377,4,"MISSING_IOS_BUNDLE_ID"],[989,25,377,25],[989,27,377,27],[989,55,377,55],[990,4,378,4,"MISSING_OR_INVALID_NONCE"],[990,28,378,28],[990,30,378,30],[990,61,378,61],[991,4,379,4,"MISSING_MFA_INFO"],[991,20,379,20],[991,22,379,22],[991,54,379,54],[992,4,380,4,"MISSING_MFA_SESSION"],[992,23,380,23],[992,25,380,25],[992,60,380,60],[993,4,381,4,"MISSING_PHONE_NUMBER"],[993,24,381,24],[993,26,381,26],[993,53,381,53],[994,4,382,4,"MISSING_SESSION_INFO"],[994,24,382,24],[994,26,382,26],[994,56,382,56],[995,4,383,4,"MODULE_DESTROYED"],[995,20,383,20],[995,22,383,22],[995,40,383,40],[996,4,384,4,"NEED_CONFIRMATION"],[996,21,384,21],[996,23,384,23],[996,70,384,70],[997,4,385,4,"NETWORK_REQUEST_FAILED"],[997,26,385,26],[997,28,385,28],[997,57,385,57],[998,4,386,4,"NULL_USER"],[998,13,386,13],[998,15,386,15],[998,31,386,31],[999,4,387,4,"NO_AUTH_EVENT"],[999,17,387,17],[999,19,387,19],[999,39,387,39],[1000,4,388,4,"NO_SUCH_PROVIDER"],[1000,20,388,20],[1000,22,388,22],[1000,45,388,45],[1001,4,389,4,"OPERATION_NOT_ALLOWED"],[1001,25,389,25],[1001,27,389,27],[1001,55,389,55],[1002,4,390,4,"OPERATION_NOT_SUPPORTED"],[1002,27,390,27],[1002,29,390,29],[1002,79,390,79],[1003,4,391,4,"POPUP_BLOCKED"],[1003,17,391,17],[1003,19,391,19],[1003,39,391,39],[1004,4,392,4,"POPUP_CLOSED_BY_USER"],[1004,24,392,24],[1004,26,392,26],[1004,53,392,53],[1005,4,393,4,"PROVIDER_ALREADY_LINKED"],[1005,27,393,27],[1005,29,393,29],[1005,59,393,59],[1006,4,394,4,"QUOTA_EXCEEDED"],[1006,18,394,18],[1006,20,394,20],[1006,41,394,41],[1007,4,395,4,"REDIRECT_CANCELLED_BY_USER"],[1007,30,395,30],[1007,32,395,32],[1007,65,395,65],[1008,4,396,4,"REDIRECT_OPERATION_PENDING"],[1008,30,396,30],[1008,32,396,32],[1008,65,396,65],[1009,4,397,4,"REJECTED_CREDENTIAL"],[1009,23,397,23],[1009,25,397,25],[1009,51,397,51],[1010,4,398,4,"SECOND_FACTOR_ALREADY_ENROLLED"],[1010,34,398,34],[1010,36,398,36],[1010,71,398,71],[1011,4,399,4,"SECOND_FACTOR_LIMIT_EXCEEDED"],[1011,32,399,32],[1011,34,399,34],[1011,77,399,77],[1012,4,400,4,"TENANT_ID_MISMATCH"],[1012,22,400,22],[1012,24,400,24],[1012,49,400,49],[1013,4,401,4,"TIMEOUT"],[1013,11,401,11],[1013,13,401,13],[1013,27,401,27],[1014,4,402,4,"TOKEN_EXPIRED"],[1014,17,402,17],[1014,19,402,19],[1014,44,402,44],[1015,4,403,4,"TOO_MANY_ATTEMPTS_TRY_LATER"],[1015,31,403,31],[1015,33,403,33],[1015,57,403,57],[1016,4,404,4,"UNAUTHORIZED_DOMAIN"],[1016,23,404,23],[1016,25,404,25],[1016,57,404,57],[1017,4,405,4,"UNSUPPORTED_FIRST_FACTOR"],[1017,28,405,28],[1017,30,405,30],[1017,61,405,61],[1018,4,406,4,"UNSUPPORTED_PERSISTENCE"],[1018,27,406,27],[1018,29,406,29],[1018,64,406,64],[1019,4,407,4,"UNSUPPORTED_TENANT_OPERATION"],[1019,32,407,32],[1019,34,407,34],[1019,69,407,69],[1020,4,408,4,"UNVERIFIED_EMAIL"],[1020,20,408,20],[1020,22,408,22],[1020,45,408,45],[1021,4,409,4,"USER_CANCELLED"],[1021,18,409,18],[1021,20,409,20],[1021,41,409,41],[1022,4,410,4,"USER_DELETED"],[1022,16,410,16],[1022,18,410,18],[1022,39,410,39],[1023,4,411,4,"USER_DISABLED"],[1023,17,411,17],[1023,19,411,19],[1023,39,411,39],[1024,4,412,4,"USER_MISMATCH"],[1024,17,412,17],[1024,19,412,19],[1024,39,412,39],[1025,4,413,4,"USER_SIGNED_OUT"],[1025,19,413,19],[1025,21,413,21],[1025,43,413,43],[1026,4,414,4,"WEAK_PASSWORD"],[1026,17,414,17],[1026,19,414,19],[1026,39,414,39],[1027,4,415,4,"WEB_STORAGE_UNSUPPORTED"],[1027,27,415,27],[1027,29,415,29],[1027,59,415,59],[1028,4,416,4,"ALREADY_INITIALIZED"],[1028,23,416,23],[1028,25,416,25],[1028,51,416,51],[1029,4,417,4,"RECAPTCHA_NOT_ENABLED"],[1029,25,417,25],[1029,27,417,27],[1029,55,417,55],[1030,4,418,4,"MISSING_RECAPTCHA_TOKEN"],[1030,27,418,27],[1030,29,418,29],[1030,59,418,59],[1031,4,419,4,"INVALID_RECAPTCHA_TOKEN"],[1031,27,419,27],[1031,29,419,29],[1031,59,419,59],[1032,4,420,4,"INVALID_RECAPTCHA_ACTION"],[1032,28,420,28],[1032,30,420,30],[1032,61,420,61],[1033,4,421,4,"MISSING_CLIENT_TYPE"],[1033,23,421,23],[1033,25,421,25],[1033,51,421,51],[1034,4,422,4,"MISSING_RECAPTCHA_VERSION"],[1034,29,422,29],[1034,31,422,31],[1034,63,422,63],[1035,4,423,4,"INVALID_RECAPTCHA_VERSION"],[1035,29,423,29],[1035,31,423,31],[1035,63,423,63],[1036,4,424,4,"INVALID_REQ_TYPE"],[1036,20,424,20],[1036,22,424,22],[1036,45,424,45],[1037,4,425,4,"INVALID_HOSTING_LINK_DOMAIN"],[1037,31,425,31],[1037,33,425,33],[1038,2,426,0],[1038,3,426,1],[1040,2,428,0],[1041,0,429,0],[1042,0,430,0],[1043,0,431,0],[1044,0,432,0],[1045,0,433,0],[1046,0,434,0],[1047,0,435,0],[1048,0,436,0],[1049,0,437,0],[1050,0,438,0],[1051,0,439,0],[1052,0,440,0],[1053,0,441,0],[1054,0,442,0],[1055,0,443,0],[1056,2,444,0],[1056,8,444,6,"logClient"],[1056,17,444,15],[1056,20,444,18],[1056,24,444,22,"Logger"],[1056,39,444,28],[1056,40,444,28,"Logger"],[1056,46,444,28],[1056,47,444,29],[1056,63,444,45],[1056,64,444,46],[1057,2,445,0],[1057,11,445,9,"_logWarn"],[1057,19,445,17,"_logWarn"],[1057,20,445,18,"msg"],[1057,23,445,21],[1057,25,445,23],[1057,28,445,26,"args"],[1057,32,445,30],[1057,34,445,32],[1058,4,446,4],[1058,8,446,8,"logClient"],[1058,17,446,17],[1058,18,446,18,"logLevel"],[1058,26,446,26],[1058,30,446,30,"LogLevel"],[1058,45,446,38],[1058,46,446,38,"LogLevel"],[1058,54,446,38],[1058,55,446,39,"WARN"],[1058,59,446,43],[1058,61,446,45],[1059,6,447,8,"logClient"],[1059,15,447,17],[1059,16,447,18,"warn"],[1059,20,447,22],[1059,21,447,23],[1059,30,447,32,"SDK_VERSION"],[1059,42,447,43],[1059,43,447,43,"SDK_VERSION"],[1059,54,447,43],[1059,60,447,49,"msg"],[1059,63,447,52],[1059,65,447,54],[1059,67,447,56],[1059,70,447,59,"args"],[1059,74,447,63],[1059,75,447,64],[1060,4,448,4],[1061,2,449,0],[1062,2,450,0],[1062,11,450,9,"_logError"],[1062,20,450,18,"_logError"],[1062,21,450,19,"msg"],[1062,24,450,22],[1062,26,450,24],[1062,29,450,27,"args"],[1062,33,450,31],[1062,35,450,33],[1063,4,451,4],[1063,8,451,8,"logClient"],[1063,17,451,17],[1063,18,451,18,"logLevel"],[1063,26,451,26],[1063,30,451,30,"LogLevel"],[1063,45,451,38],[1063,46,451,38,"LogLevel"],[1063,54,451,38],[1063,55,451,39,"ERROR"],[1063,60,451,44],[1063,62,451,46],[1064,6,452,8,"logClient"],[1064,15,452,17],[1064,16,452,18,"error"],[1064,21,452,23],[1064,22,452,24],[1064,31,452,33,"SDK_VERSION"],[1064,43,452,44],[1064,44,452,44,"SDK_VERSION"],[1064,55,452,44],[1064,61,452,50,"msg"],[1064,64,452,53],[1064,66,452,55],[1064,68,452,57],[1064,71,452,60,"args"],[1064,75,452,64],[1064,76,452,65],[1065,4,453,4],[1066,2,454,0],[1068,2,456,0],[1069,0,457,0],[1070,0,458,0],[1071,0,459,0],[1072,0,460,0],[1073,0,461,0],[1074,0,462,0],[1075,0,463,0],[1076,0,464,0],[1077,0,465,0],[1078,0,466,0],[1079,0,467,0],[1080,0,468,0],[1081,0,469,0],[1082,0,470,0],[1083,0,471,0],[1084,2,472,0],[1084,11,472,9,"_fail"],[1084,16,472,14,"_fail"],[1084,17,472,15,"authOrCode"],[1084,27,472,25],[1084,29,472,27],[1084,32,472,30,"rest"],[1084,36,472,34],[1084,38,472,36],[1085,4,473,4],[1085,10,473,10,"createErrorInternal"],[1085,29,473,29],[1085,30,473,30,"authOrCode"],[1085,40,473,40],[1085,42,473,42],[1085,45,473,45,"rest"],[1085,49,473,49],[1085,50,473,50],[1086,2,474,0],[1087,2,475,0],[1087,11,475,9,"_createError"],[1087,23,475,21,"_createError"],[1087,24,475,22,"authOrCode"],[1087,34,475,32],[1087,36,475,34],[1087,39,475,37,"rest"],[1087,43,475,41],[1087,45,475,43],[1088,4,476,4],[1088,11,476,11,"createErrorInternal"],[1088,30,476,30],[1088,31,476,31,"authOrCode"],[1088,41,476,41],[1088,43,476,43],[1088,46,476,46,"rest"],[1088,50,476,50],[1088,51,476,51],[1089,2,477,0],[1090,2,478,0],[1090,11,478,9,"_errorWithCustomMessage"],[1090,34,478,32,"_errorWithCustomMessage"],[1090,35,478,33,"auth"],[1090,39,478,37],[1090,41,478,39,"code"],[1090,45,478,43],[1090,47,478,45,"message"],[1090,54,478,52],[1090,56,478,54],[1091,4,479,4],[1091,10,479,10,"errorMap"],[1091,18,479,18],[1091,21,479,18,"Object"],[1091,27,479,18],[1091,28,479,18,"assign"],[1091,34,479,18],[1091,39,480,11,"prodErrorMap"],[1091,51,480,23],[1091,52,480,24],[1091,53,480,25],[1092,6,481,8],[1092,7,481,9,"code"],[1092,11,481,13],[1092,14,481,16,"message"],[1093,4,481,23],[1093,6,482,5],[1094,4,483,4],[1094,10,483,10,"factory"],[1094,17,483,17],[1094,20,483,20],[1094,24,483,24,"ErrorFactory"],[1094,37,483,36],[1094,38,483,36,"ErrorFactory"],[1094,50,483,36],[1094,51,483,37],[1094,57,483,43],[1094,59,483,45],[1094,69,483,55],[1094,71,483,57,"errorMap"],[1094,79,483,65],[1094,80,483,66],[1095,4,484,4],[1095,11,484,11,"factory"],[1095,18,484,18],[1095,19,484,19,"create"],[1095,25,484,25],[1095,26,484,26,"code"],[1095,30,484,30],[1095,32,484,32],[1096,6,485,8,"appName"],[1096,13,485,15],[1096,15,485,17,"auth"],[1096,19,485,21],[1096,20,485,22,"name"],[1097,4,486,4],[1097,5,486,5],[1097,6,486,6],[1098,2,487,0],[1099,2,488,0],[1099,11,488,9,"_serverAppCurrentUserOperationNotSupportedError"],[1099,58,488,56,"_serverAppCurrentUserOperationNotSupportedError"],[1099,59,488,57,"auth"],[1099,63,488,61],[1099,65,488,63],[1100,4,489,4],[1100,11,489,11,"_errorWithCustomMessage"],[1100,34,489,34],[1100,35,489,35,"auth"],[1100,39,489,39],[1100,41,489,41],[1100,86,489,86],[1100,87,489,87],[1100,132,489,132],[1100,228,489,228],[1100,229,489,229],[1101,2,490,0],[1102,2,491,0],[1102,11,491,9,"_assertInstanceOf"],[1102,28,491,26,"_assertInstanceOf"],[1102,29,491,27,"auth"],[1102,33,491,31],[1102,35,491,33,"object"],[1102,41,491,39],[1102,43,491,41,"instance"],[1102,51,491,49],[1102,53,491,51],[1103,4,492,4],[1103,10,492,10,"constructorInstance"],[1103,29,492,29],[1103,32,492,32,"instance"],[1103,40,492,40],[1104,4,493,4],[1104,8,493,8],[1104,10,493,10,"object"],[1104,16,493,16],[1104,28,493,28,"constructorInstance"],[1104,47,493,47],[1104,48,493,48],[1104,50,493,50],[1105,6,494,8],[1105,10,494,12,"constructorInstance"],[1105,29,494,31],[1105,30,494,32,"name"],[1105,34,494,36],[1105,39,494,41,"object"],[1105,45,494,47],[1105,46,494,48,"constructor"],[1105,57,494,59],[1105,58,494,60,"name"],[1105,62,494,64],[1105,64,494,66],[1106,8,495,12,"_fail"],[1106,13,495,17],[1106,14,495,18,"auth"],[1106,18,495,22],[1106,20,495,24],[1106,36,495,40],[1106,37,495,41],[1106,71,495,75],[1106,72,495,76],[1107,6,496,8],[1108,6,497,8],[1108,12,497,14,"_errorWithCustomMessage"],[1108,35,497,37],[1108,36,497,38,"auth"],[1108,40,497,42],[1108,42,497,44],[1108,58,497,60],[1108,59,497,61],[1108,95,497,97],[1108,106,497,108,"object"],[1108,112,497,114],[1108,113,497,115,"constructor"],[1108,124,497,126],[1108,125,497,127,"name"],[1108,129,497,131],[1108,165,497,167],[1108,168,498,12],[1108,221,498,65],[1108,222,498,66],[1109,4,499,4],[1110,2,500,0],[1111,2,501,0],[1111,11,501,9,"createErrorInternal"],[1111,30,501,28,"createErrorInternal"],[1111,31,501,29,"authOrCode"],[1111,41,501,39],[1111,43,501,41],[1111,46,501,44,"rest"],[1111,50,501,48],[1111,52,501,50],[1112,4,502,4],[1112,8,502,8],[1112,15,502,15,"authOrCode"],[1112,25,502,25],[1112,30,502,30],[1112,38,502,38],[1112,40,502,40],[1113,6,503,8],[1113,12,503,14,"code"],[1113,16,503,18],[1113,19,503,21,"rest"],[1113,23,503,25],[1113,24,503,26],[1113,25,503,27],[1113,26,503,28],[1114,6,504,8],[1114,12,504,14,"fullParams"],[1114,22,504,24],[1114,25,504,27],[1114,26,504,28],[1114,29,504,31,"rest"],[1114,33,504,35],[1114,34,504,36,"slice"],[1114,39,504,41],[1114,40,504,42],[1114,41,504,43],[1114,42,504,44],[1114,43,504,45],[1115,6,505,8],[1115,10,505,12,"fullParams"],[1115,20,505,22],[1115,21,505,23],[1115,22,505,24],[1115,23,505,25],[1115,25,505,27],[1116,8,506,12,"fullParams"],[1116,18,506,22],[1116,19,506,23],[1116,20,506,24],[1116,21,506,25],[1116,22,506,26,"appName"],[1116,29,506,33],[1116,32,506,36,"authOrCode"],[1116,42,506,46],[1116,43,506,47,"name"],[1116,47,506,51],[1117,6,507,8],[1118,6,508,8],[1118,13,508,15,"authOrCode"],[1118,23,508,25],[1118,24,508,26,"_errorFactory"],[1118,37,508,39],[1118,38,508,40,"create"],[1118,44,508,46],[1118,45,508,47,"code"],[1118,49,508,51],[1118,51,508,53],[1118,54,508,56,"fullParams"],[1118,64,508,66],[1118,65,508,67],[1119,4,509,4],[1120,4,510,4],[1120,11,510,11,"_DEFAULT_AUTH_ERROR_FACTORY"],[1120,38,510,38],[1120,39,510,39,"create"],[1120,45,510,45],[1120,46,510,46,"authOrCode"],[1120,56,510,56],[1120,58,510,58],[1120,61,510,61,"rest"],[1120,65,510,65],[1120,66,510,66],[1121,2,511,0],[1122,2,512,0],[1122,11,512,9,"_assert"],[1122,18,512,16,"_assert"],[1122,19,512,17,"assertion"],[1122,28,512,26],[1122,30,512,28,"authOrCode"],[1122,40,512,38],[1122,42,512,40],[1122,45,512,43,"rest"],[1122,49,512,47],[1122,51,512,49],[1123,4,513,4],[1123,8,513,8],[1123,9,513,9,"assertion"],[1123,18,513,18],[1123,20,513,20],[1124,6,514,8],[1124,12,514,14,"createErrorInternal"],[1124,31,514,33],[1124,32,514,34,"authOrCode"],[1124,42,514,44],[1124,44,514,46],[1124,47,514,49,"rest"],[1124,51,514,53],[1124,52,514,54],[1125,4,515,4],[1126,2,516,0],[1127,2,517,0],[1128,0,518,0],[1129,0,519,0],[1130,0,520,0],[1131,0,521,0],[1132,0,522,0],[1133,2,523,0],[1133,11,523,9,"debugFail"],[1133,20,523,18,"debugFail"],[1133,21,523,19,"failure"],[1133,28,523,26],[1133,30,523,28],[1134,4,524,4],[1135,4,525,4],[1136,4,526,4],[1136,10,526,10,"message"],[1136,17,526,17],[1136,20,526,20],[1136,49,526,49],[1136,52,526,52,"failure"],[1136,59,526,59],[1137,4,527,4,"_logError"],[1137,13,527,13],[1137,14,527,14,"message"],[1137,21,527,21],[1137,22,527,22],[1138,4,528,4],[1139,4,529,4],[1140,4,530,4],[1141,4,531,4],[1141,10,531,10],[1141,14,531,14,"Error"],[1141,19,531,19],[1141,20,531,20,"message"],[1141,27,531,27],[1141,28,531,28],[1142,2,532,0],[1143,2,533,0],[1144,0,534,0],[1145,0,535,0],[1146,0,536,0],[1147,0,537,0],[1148,0,538,0],[1149,0,539,0],[1150,2,540,0],[1150,11,540,9,"debugAssert"],[1150,22,540,20,"debugAssert"],[1150,23,540,21,"assertion"],[1150,32,540,30],[1150,34,540,32,"message"],[1150,41,540,39],[1150,43,540,41],[1151,4,541,4],[1151,8,541,8],[1151,9,541,9,"assertion"],[1151,18,541,18],[1151,20,541,20],[1152,6,542,8,"debugFail"],[1152,15,542,17],[1152,16,542,18,"message"],[1152,23,542,25],[1152,24,542,26],[1153,4,543,4],[1154,2,544,0],[1156,2,546,0],[1157,0,547,0],[1158,0,548,0],[1159,0,549,0],[1160,0,550,0],[1161,0,551,0],[1162,0,552,0],[1163,0,553,0],[1164,0,554,0],[1165,0,555,0],[1166,0,556,0],[1167,0,557,0],[1168,0,558,0],[1169,0,559,0],[1170,0,560,0],[1171,0,561,0],[1172,2,562,0],[1172,11,562,9,"_getCurrentUrl"],[1172,25,562,23,"_getCurrentUrl"],[1172,26,562,23],[1172,28,562,26],[1173,4,563,4],[1173,11,563,12],[1173,18,563,19,"self"],[1173,22,563,23],[1173,27,563,28],[1173,38,563,39],[1173,42,563,43,"self"],[1173,46,563,47],[1173,47,563,48,"location"],[1173,55,563,56],[1173,57,563,58,"href"],[1173,61,563,62],[1173,65,563,67],[1173,67,563,69],[1174,2,564,0],[1175,2,565,0],[1175,11,565,9,"_isHttpOrHttps"],[1175,25,565,23,"_isHttpOrHttps"],[1175,26,565,23],[1175,28,565,26],[1176,4,566,4],[1176,11,566,11,"_getCurrentScheme"],[1176,28,566,28],[1176,29,566,29],[1176,30,566,30],[1176,35,566,35],[1176,42,566,42],[1176,46,566,46,"_getCurrentScheme"],[1176,63,566,63],[1176,64,566,64],[1176,65,566,65],[1176,70,566,70],[1176,78,566,78],[1177,2,567,0],[1178,2,568,0],[1178,11,568,9,"_getCurrentScheme"],[1178,28,568,26,"_getCurrentScheme"],[1178,29,568,26],[1178,31,568,29],[1179,4,569,4],[1179,11,569,12],[1179,18,569,19,"self"],[1179,22,569,23],[1179,27,569,28],[1179,38,569,39],[1179,42,569,43,"self"],[1179,46,569,47],[1179,47,569,48,"location"],[1179,55,569,56],[1179,57,569,58,"protocol"],[1179,65,569,66],[1179,69,569,71],[1179,73,569,75],[1180,2,570,0],[1182,2,572,0],[1183,0,573,0],[1184,0,574,0],[1185,0,575,0],[1186,0,576,0],[1187,0,577,0],[1188,0,578,0],[1189,0,579,0],[1190,0,580,0],[1191,0,581,0],[1192,0,582,0],[1193,0,583,0],[1194,0,584,0],[1195,0,585,0],[1196,0,586,0],[1197,0,587,0],[1198,2,588,0],[1199,0,589,0],[1200,0,590,0],[1201,2,591,0],[1201,11,591,9,"_isOnline"],[1201,20,591,18,"_isOnline"],[1201,21,591,18],[1201,23,591,21],[1202,4,592,4],[1202,8,592,8],[1202,15,592,15,"navigator"],[1202,24,592,24],[1202,29,592,29],[1202,40,592,40],[1202,44,593,8,"navigator"],[1202,53,593,17],[1202,57,594,8],[1202,65,594,16],[1202,69,594,20,"navigator"],[1202,78,594,29],[1202,82,595,8],[1202,89,595,15,"navigator"],[1202,98,595,24],[1202,99,595,25,"onLine"],[1202,105,595,31],[1202,110,595,36],[1202,119,595,45],[1203,4,596,8],[1204,4,597,8],[1205,4,598,8],[1206,4,599,8],[1207,4,600,8],[1208,4,601,9,"_isHttpOrHttps"],[1208,18,601,23],[1208,19,601,24],[1208,20,601,25],[1208,24,601,29],[1208,28,601,29,"isBrowserExtension"],[1208,41,601,47],[1208,42,601,47,"isBrowserExtension"],[1208,60,601,47],[1208,62,601,48],[1208,63,601,49],[1208,67,601,53],[1208,79,601,65],[1208,83,601,69,"navigator"],[1208,92,601,78],[1208,93,601,79],[1208,95,601,81],[1209,6,602,8],[1209,13,602,15,"navigator"],[1209,22,602,24],[1209,23,602,25,"onLine"],[1209,29,602,31],[1210,4,603,4],[1211,4,604,4],[1212,4,605,4],[1212,11,605,11],[1212,15,605,15],[1213,2,606,0],[1214,2,607,0],[1214,11,607,9,"_getUserLanguage"],[1214,27,607,25,"_getUserLanguage"],[1214,28,607,25],[1214,30,607,28],[1215,4,608,4],[1215,8,608,8],[1215,15,608,15,"navigator"],[1215,24,608,24],[1215,29,608,29],[1215,40,608,40],[1215,42,608,42],[1216,6,609,8],[1216,13,609,15],[1216,17,609,19],[1217,4,610,4],[1218,4,611,4],[1218,10,611,10,"navigatorLanguage"],[1218,27,611,27],[1218,30,611,30,"navigator"],[1218,39,611,39],[1219,4,612,4],[1220,6,613,4],[1221,6,614,5,"navigatorLanguage"],[1221,23,614,22],[1221,24,614,23,"languages"],[1221,33,614,32],[1221,37,614,36,"navigatorLanguage"],[1221,54,614,53],[1221,55,614,54,"languages"],[1221,64,614,63],[1221,65,614,64],[1221,66,614,65],[1221,67,614,66],[1222,6,615,8],[1223,6,616,8],[1224,6,617,8,"navigatorLanguage"],[1224,23,617,25],[1224,24,617,26,"language"],[1224,32,617,34],[1225,6,618,8],[1226,6,619,8],[1227,4,619,12],[1228,2,620,0],[1230,2,622,0],[1231,0,623,0],[1232,0,624,0],[1233,0,625,0],[1234,0,626,0],[1235,0,627,0],[1236,0,628,0],[1237,0,629,0],[1238,0,630,0],[1239,0,631,0],[1240,0,632,0],[1241,0,633,0],[1242,0,634,0],[1243,0,635,0],[1244,0,636,0],[1245,0,637,0],[1246,2,638,0],[1247,0,639,0],[1248,0,640,0],[1249,0,641,0],[1250,0,642,0],[1251,2,643,0],[1251,8,643,6,"Delay"],[1251,13,643,11],[1251,14,643,12],[1252,4,644,4,"constructor"],[1252,15,644,15,"constructor"],[1252,16,644,16,"shortDelay"],[1252,26,644,26],[1252,28,644,28,"longDelay"],[1252,37,644,37],[1252,39,644,39],[1253,6,645,8],[1253,10,645,12],[1253,11,645,13,"shortDelay"],[1253,21,645,23],[1253,24,645,26,"shortDelay"],[1253,34,645,36],[1254,6,646,8],[1254,10,646,12],[1254,11,646,13,"longDelay"],[1254,20,646,22],[1254,23,646,25,"longDelay"],[1254,32,646,34],[1255,6,647,8],[1256,6,648,8,"debugAssert"],[1256,17,648,19],[1256,18,648,20,"longDelay"],[1256,27,648,29],[1256,30,648,32,"shortDelay"],[1256,40,648,42],[1256,42,648,44],[1256,87,648,89],[1256,88,648,90],[1257,6,649,8],[1257,10,649,12],[1257,11,649,13,"isMobile"],[1257,19,649,21],[1257,22,649,24],[1257,26,649,24,"isMobileCordova"],[1257,39,649,39],[1257,40,649,39,"isMobileCordova"],[1257,55,649,39],[1257,57,649,40],[1257,58,649,41],[1257,62,649,45],[1257,66,649,45,"isReactNative"],[1257,79,649,58],[1257,80,649,58,"isReactNative"],[1257,93,649,58],[1257,95,649,59],[1257,96,649,60],[1258,4,650,4],[1259,4,651,4,"get"],[1259,7,651,7,"get"],[1259,8,651,7],[1259,10,651,10],[1260,6,652,8],[1260,10,652,12],[1260,11,652,13,"_isOnline"],[1260,20,652,22],[1260,21,652,23],[1260,22,652,24],[1260,24,652,26],[1261,8,653,12],[1262,8,654,12],[1262,15,654,19,"Math"],[1262,19,654,23],[1262,20,654,24,"min"],[1262,23,654,27],[1262,24,654,28],[1262,28,654,32],[1262,29,654,33],[1262,53,654,57],[1262,57,654,61],[1262,58,654,62,"shortDelay"],[1262,68,654,72],[1262,69,654,73],[1263,6,655,8],[1264,6,656,8],[1265,6,657,8],[1266,6,658,8],[1267,6,659,8],[1268,6,660,8],[1268,13,660,15],[1268,17,660,19],[1268,18,660,20,"isMobile"],[1268,26,660,28],[1268,29,660,31],[1268,33,660,35],[1268,34,660,36,"longDelay"],[1268,43,660,45],[1268,46,660,48],[1268,50,660,52],[1268,51,660,53,"shortDelay"],[1268,61,660,63],[1269,4,661,4],[1270,2,662,0],[1272,2,664,0],[1273,0,665,0],[1274,0,666,0],[1275,0,667,0],[1276,0,668,0],[1277,0,669,0],[1278,0,670,0],[1279,0,671,0],[1280,0,672,0],[1281,0,673,0],[1282,0,674,0],[1283,0,675,0],[1284,0,676,0],[1285,0,677,0],[1286,0,678,0],[1287,0,679,0],[1288,2,680,0],[1288,11,680,9,"_emulatorUrl"],[1288,23,680,21,"_emulatorUrl"],[1288,24,680,22,"config"],[1288,30,680,28],[1288,32,680,30,"path"],[1288,36,680,34],[1288,38,680,36],[1289,4,681,4,"debugAssert"],[1289,15,681,15],[1289,16,681,16,"config"],[1289,22,681,22],[1289,23,681,23,"emulator"],[1289,31,681,31],[1289,33,681,33],[1289,69,681,69],[1289,70,681,70],[1290,4,682,4],[1290,10,682,10],[1291,6,682,12,"url"],[1292,4,682,16],[1292,5,682,17],[1292,8,682,20,"config"],[1292,14,682,26],[1292,15,682,27,"emulator"],[1292,23,682,35],[1293,4,683,4],[1293,8,683,8],[1293,9,683,9,"path"],[1293,13,683,13],[1293,15,683,15],[1294,6,684,8],[1294,13,684,15,"url"],[1294,16,684,18],[1295,4,685,4],[1296,4,686,4],[1296,11,686,11],[1296,14,686,14,"url"],[1296,17,686,17],[1296,20,686,20,"path"],[1296,24,686,24],[1296,25,686,25,"startsWith"],[1296,35,686,35],[1296,36,686,36],[1296,39,686,39],[1296,40,686,40],[1296,43,686,43,"path"],[1296,47,686,47],[1296,48,686,48,"slice"],[1296,53,686,53],[1296,54,686,54],[1296,55,686,55],[1296,56,686,56],[1296,59,686,59,"path"],[1296,63,686,63],[1296,65,686,65],[1297,2,687,0],[1299,2,689,0],[1300,0,690,0],[1301,0,691,0],[1302,0,692,0],[1303,0,693,0],[1304,0,694,0],[1305,0,695,0],[1306,0,696,0],[1307,0,697,0],[1308,0,698,0],[1309,0,699,0],[1310,0,700,0],[1311,0,701,0],[1312,0,702,0],[1313,0,703,0],[1314,0,704,0],[1315,2,705,0],[1315,8,705,6,"FetchProvider"],[1315,21,705,19],[1315,22,705,20],[1316,4,706,4],[1316,11,706,11,"initialize"],[1316,21,706,21,"initialize"],[1316,22,706,22,"fetchImpl"],[1316,31,706,31],[1316,33,706,33,"headersImpl"],[1316,44,706,44],[1316,46,706,46,"responseImpl"],[1316,58,706,58],[1316,60,706,60],[1317,6,707,8],[1317,10,707,12],[1317,11,707,13,"fetchImpl"],[1317,20,707,22],[1317,23,707,25,"fetchImpl"],[1317,32,707,34],[1318,6,708,8],[1318,10,708,12,"headersImpl"],[1318,21,708,23],[1318,23,708,25],[1319,8,709,12],[1319,12,709,16],[1319,13,709,17,"headersImpl"],[1319,24,709,28],[1319,27,709,31,"headersImpl"],[1319,38,709,42],[1320,6,710,8],[1321,6,711,8],[1321,10,711,12,"responseImpl"],[1321,22,711,24],[1321,24,711,26],[1322,8,712,12],[1322,12,712,16],[1322,13,712,17,"responseImpl"],[1322,25,712,29],[1322,28,712,32,"responseImpl"],[1322,40,712,44],[1323,6,713,8],[1324,4,714,4],[1325,4,715,4],[1325,11,715,11,"fetch"],[1325,16,715,16,"fetch"],[1325,17,715,16],[1325,19,715,19],[1326,6,716,8],[1326,10,716,12],[1326,14,716,16],[1326,15,716,17,"fetchImpl"],[1326,24,716,26],[1326,26,716,28],[1327,8,717,12],[1327,15,717,19],[1327,19,717,23],[1327,20,717,24,"fetchImpl"],[1327,29,717,33],[1328,6,718,8],[1329,6,719,8],[1329,10,719,12],[1329,17,719,19,"self"],[1329,21,719,23],[1329,26,719,28],[1329,37,719,39],[1329,41,719,43],[1329,48,719,50],[1329,52,719,54,"self"],[1329,56,719,58],[1329,58,719,60],[1330,8,720,12],[1330,15,720,19,"self"],[1330,19,720,23],[1330,20,720,24,"fetch"],[1330,25,720,29],[1331,6,721,8],[1332,6,722,8],[1332,10,722,12],[1332,17,722,19,"globalThis"],[1332,27,722,29],[1332,32,722,34],[1332,43,722,45],[1332,47,722,49,"globalThis"],[1332,57,722,59],[1332,58,722,60,"fetch"],[1332,63,722,65],[1332,65,722,67],[1333,8,723,12],[1333,15,723,19,"globalThis"],[1333,25,723,29],[1333,26,723,30,"fetch"],[1333,31,723,35],[1334,6,724,8],[1335,6,725,8],[1335,10,725,12],[1335,17,725,19,"fetch"],[1335,22,725,24],[1335,27,725,29],[1335,38,725,40],[1335,40,725,42],[1336,8,726,12],[1336,15,726,19,"fetch"],[1336,20,726,24],[1337,6,727,8],[1338,6,728,8,"debugFail"],[1338,15,728,17],[1338,16,728,18],[1338,129,728,131],[1338,130,728,132],[1339,4,729,4],[1340,4,730,4],[1340,11,730,11,"headers"],[1340,18,730,18,"headers"],[1340,19,730,18],[1340,21,730,21],[1341,6,731,8],[1341,10,731,12],[1341,14,731,16],[1341,15,731,17,"headersImpl"],[1341,26,731,28],[1341,28,731,30],[1342,8,732,12],[1342,15,732,19],[1342,19,732,23],[1342,20,732,24,"headersImpl"],[1342,31,732,35],[1343,6,733,8],[1344,6,734,8],[1344,10,734,12],[1344,17,734,19,"self"],[1344,21,734,23],[1344,26,734,28],[1344,37,734,39],[1344,41,734,43],[1344,50,734,52],[1344,54,734,56,"self"],[1344,58,734,60],[1344,60,734,62],[1345,8,735,12],[1345,15,735,19,"self"],[1345,19,735,23],[1345,20,735,24,"Headers"],[1345,27,735,31],[1346,6,736,8],[1347,6,737,8],[1347,10,737,12],[1347,17,737,19,"globalThis"],[1347,27,737,29],[1347,32,737,34],[1347,43,737,45],[1347,47,737,49,"globalThis"],[1347,57,737,59],[1347,58,737,60,"Headers"],[1347,65,737,67],[1347,67,737,69],[1348,8,738,12],[1348,15,738,19,"globalThis"],[1348,25,738,29],[1348,26,738,30,"Headers"],[1348,33,738,37],[1349,6,739,8],[1350,6,740,8],[1350,10,740,12],[1350,17,740,19,"Headers"],[1350,24,740,26],[1350,29,740,31],[1350,40,740,42],[1350,42,740,44],[1351,8,741,12],[1351,15,741,19,"Headers"],[1351,22,741,26],[1352,6,742,8],[1353,6,743,8,"debugFail"],[1353,15,743,17],[1353,16,743,18],[1353,131,743,133],[1353,132,743,134],[1354,4,744,4],[1355,4,745,4],[1355,11,745,11,"response"],[1355,19,745,19,"response"],[1355,20,745,19],[1355,22,745,22],[1356,6,746,8],[1356,10,746,12],[1356,14,746,16],[1356,15,746,17,"responseImpl"],[1356,27,746,29],[1356,29,746,31],[1357,8,747,12],[1357,15,747,19],[1357,19,747,23],[1357,20,747,24,"responseImpl"],[1357,32,747,36],[1358,6,748,8],[1359,6,749,8],[1359,10,749,12],[1359,17,749,19,"self"],[1359,21,749,23],[1359,26,749,28],[1359,37,749,39],[1359,41,749,43],[1359,51,749,53],[1359,55,749,57,"self"],[1359,59,749,61],[1359,61,749,63],[1360,8,750,12],[1360,15,750,19,"self"],[1360,19,750,23],[1360,20,750,24,"Response"],[1360,28,750,32],[1361,6,751,8],[1362,6,752,8],[1362,10,752,12],[1362,17,752,19,"globalThis"],[1362,27,752,29],[1362,32,752,34],[1362,43,752,45],[1362,47,752,49,"globalThis"],[1362,57,752,59],[1362,58,752,60,"Response"],[1362,66,752,68],[1362,68,752,70],[1363,8,753,12],[1363,15,753,19,"globalThis"],[1363,25,753,29],[1363,26,753,30,"Response"],[1363,34,753,38],[1364,6,754,8],[1365,6,755,8],[1365,10,755,12],[1365,17,755,19,"Response"],[1365,25,755,27],[1365,30,755,32],[1365,41,755,43],[1365,43,755,45],[1366,8,756,12],[1366,15,756,19,"Response"],[1366,23,756,27],[1367,6,757,8],[1368,6,758,8,"debugFail"],[1368,15,758,17],[1368,16,758,18],[1368,132,758,134],[1368,133,758,135],[1369,4,759,4],[1370,2,760,0],[1372,2,762,0],[1373,0,763,0],[1374,0,764,0],[1375,0,765,0],[1376,0,766,0],[1377,0,767,0],[1378,0,768,0],[1379,0,769,0],[1380,0,770,0],[1381,0,771,0],[1382,0,772,0],[1383,0,773,0],[1384,0,774,0],[1385,0,775,0],[1386,0,776,0],[1387,0,777,0],[1388,2,778,0],[1389,0,779,0],[1390,0,780,0],[1391,2,781,0],[1391,8,781,6,"SERVER_ERROR_MAP"],[1391,24,781,22],[1391,27,781,25],[1392,4,782,4],[1393,4,783,4],[1393,5,783,5],[1393,26,783,26],[1393,27,783,27],[1393,67,783,67],[1393,90,783,90],[1393,91,783,91],[1395,4,784,4],[1396,4,785,4],[1396,5,785,5],[1396,27,785,27],[1396,28,785,28],[1396,69,785,69],[1396,85,785,85],[1396,86,785,86],[1398,4,786,4],[1399,4,787,4],[1399,5,787,5],[1399,25,787,25],[1399,26,787,26],[1399,65,787,65],[1399,80,787,80],[1399,81,787,81],[1401,4,788,4],[1402,4,789,4],[1402,5,789,5],[1402,27,789,27],[1402,28,789,28],[1402,69,789,69],[1402,85,789,85],[1402,86,789,86],[1404,4,790,4],[1405,4,791,4],[1405,5,791,5],[1405,23,791,23],[1405,24,791,24],[1405,61,791,61],[1405,77,791,77],[1405,78,791,78],[1407,4,792,4],[1408,4,793,4],[1408,5,793,5],[1408,23,793,23],[1408,24,793,24],[1408,61,793,61],[1408,79,793,79],[1408,80,793,80],[1410,4,794,4],[1411,4,795,4],[1412,4,796,4],[1412,5,796,5],[1412,32,796,32],[1412,33,796,33],[1412,79,796,79],[1412,99,796,99],[1412,100,796,100],[1414,4,797,4],[1415,4,798,4],[1415,5,798,5],[1415,19,798,19],[1415,20,798,20],[1415,53,798,53],[1415,75,798,75],[1415,76,798,76],[1416,4,799,4],[1416,5,799,5],[1416,30,799,30],[1416,31,799,31],[1416,75,799,75],[1416,98,799,98],[1416,99,799,99],[1418,4,800,4],[1419,4,801,4],[1419,5,801,5],[1419,27,801,27],[1419,28,801,28],[1419,69,801,69],[1419,89,801,89],[1419,90,801,90],[1420,4,802,4],[1420,5,802,5],[1420,28,802,28],[1420,29,802,29],[1420,71,802,71],[1420,91,802,91],[1420,92,802,92],[1421,4,803,4],[1421,5,803,5],[1421,39,803,39],[1421,40,803,40],[1421,93,803,93],[1421,120,803,120],[1421,121,803,121],[1423,4,804,4],[1424,4,805,4],[1424,5,805,5],[1424,23,805,23],[1424,24,805,24],[1424,61,805,61],[1424,77,805,77],[1424,78,805,78],[1426,4,806,4],[1427,4,807,4],[1427,5,807,5],[1427,22,807,22],[1427,23,807,23],[1427,59,807,59],[1427,75,807,75],[1427,76,807,76],[1428,4,808,4],[1428,5,808,5],[1428,34,808,34],[1428,35,808,35],[1428,83,808,83],[1428,102,808,102],[1428,103,808,103],[1429,4,809,4],[1429,5,809,5],[1429,23,809,23],[1429,24,809,24],[1429,61,809,61],[1429,82,809,82],[1429,83,809,83],[1430,4,810,4],[1430,5,810,5],[1430,23,810,23],[1430,24,810,24],[1430,61,810,61],[1430,82,810,82],[1430,83,810,83],[1432,4,811,4],[1433,4,812,4],[1433,5,812,5],[1433,23,812,23],[1433,24,812,24],[1433,61,812,61],[1433,77,812,77],[1433,78,812,78],[1435,4,813,4],[1436,4,814,4],[1436,5,814,5],[1436,37,814,37],[1436,38,814,38],[1436,89,814,89],[1436,112,814,112],[1436,113,814,113],[1437,4,815,4],[1437,5,815,5],[1437,23,815,23],[1437,24,815,24],[1437,61,815,61],[1437,81,815,81],[1437,82,815,82],[1438,4,816,4],[1438,5,816,5],[1438,20,816,20],[1438,21,816,21],[1438,55,816,55],[1438,75,816,75],[1438,76,816,76],[1439,4,817,4],[1439,5,817,5],[1439,21,817,21],[1439,22,817,22],[1439,57,817,57],[1439,77,817,77],[1439,78,817,78],[1441,4,818,4],[1442,4,819,4],[1442,5,819,5],[1442,34,819,34],[1442,35,819,35],[1442,83,819,83],[1442,102,819,102],[1442,103,819,103],[1443,4,820,4],[1443,5,820,5],[1443,42,820,42],[1443,43,820,43],[1443,99,820,99],[1443,136,820,136],[1443,137,820,137],[1445,4,821,4],[1446,4,822,4],[1446,5,822,5],[1446,19,822,19],[1446,20,822,20],[1446,53,822,53],[1446,80,822,80],[1446,81,822,81],[1447,4,823,4],[1447,5,823,5],[1447,27,823,27],[1447,28,823,28],[1447,69,823,69],[1447,94,823,94],[1447,95,823,95],[1448,4,824,4],[1448,5,824,5],[1448,30,824,30],[1448,31,824,31],[1448,75,824,75],[1448,95,824,95],[1448,96,824,96],[1449,4,825,4],[1449,5,825,5],[1449,27,825,27],[1449,28,825,28],[1449,69,825,69],[1449,94,825,94],[1449,95,825,95],[1450,4,826,4],[1450,5,826,5],[1450,22,826,22],[1450,23,826,23],[1450,59,826,59],[1450,73,826,73],[1450,74,826,74],[1452,4,827,4],[1453,4,828,4],[1454,4,829,4],[1455,4,830,4],[1455,5,830,5],[1455,35,830,35],[1455,36,830,36],[1455,85,830,85],[1455,111,830,111],[1455,112,830,112],[1456,4,831,4],[1456,5,831,5],[1456,26,831,26],[1456,27,831,27],[1456,67,831,67],[1456,94,831,94],[1456,95,831,95],[1458,4,832,4],[1459,4,833,4],[1459,5,833,5],[1459,30,833,30],[1459,31,833,31],[1459,75,833,75],[1459,100,833,100],[1459,101,833,101],[1461,4,834,4],[1462,4,835,4],[1462,5,835,5],[1462,27,835,27],[1462,28,835,28],[1462,69,835,69],[1462,97,835,97],[1462,98,835,98],[1464,4,836,4],[1465,4,837,4],[1465,5,837,5],[1465,37,837,37],[1465,38,837,38],[1465,89,837,89],[1465,119,837,119],[1465,120,837,120],[1466,4,838,4],[1466,5,838,5],[1466,31,838,31],[1466,32,838,32],[1466,77,838,77],[1466,106,838,106],[1466,107,838,107],[1467,4,839,4],[1467,5,839,5],[1467,32,839,32],[1467,33,839,33],[1467,79,839,79],[1467,106,839,106],[1467,107,839,107],[1468,4,840,4],[1468,5,840,5],[1468,37,840,37],[1468,38,840,38],[1468,89,840,89],[1468,119,840,119],[1468,120,840,120],[1469,4,841,4],[1469,5,841,5],[1469,27,841,27],[1469,28,841,28],[1469,69,841,69],[1469,99,841,99],[1469,100,841,100],[1470,4,842,4],[1470,5,842,5],[1470,35,842,35],[1470,36,842,36],[1470,85,842,85],[1470,123,842,123],[1470,124,842,124],[1472,4,843,4],[1473,4,844,4],[1473,5,844,5],[1473,39,844,39],[1473,40,844,40],[1473,93,844,93],[1473,109,844,109],[1473,110,844,110],[1475,4,845,4],[1476,4,846,4],[1476,5,846,5],[1476,28,846,28],[1476,29,846,29],[1476,71,846,71],[1476,94,846,94],[1476,95,846,95],[1477,4,847,4],[1477,5,847,5],[1477,30,847,30],[1477,31,847,31],[1477,75,847,75],[1477,100,847,100],[1477,101,847,101],[1478,4,848,4],[1478,5,848,5],[1478,30,848,30],[1478,31,848,31],[1478,75,848,75],[1478,100,848,100],[1478,101,848,101],[1479,4,849,4],[1479,5,849,5],[1479,31,849,31],[1479,32,849,32],[1479,77,849,77],[1479,103,849,103],[1479,104,849,104],[1480,4,850,4],[1480,5,850,5],[1480,26,850,26],[1480,27,850,27],[1480,67,850,67],[1480,88,850,88],[1480,89,850,89],[1481,4,851,4],[1481,5,851,5],[1481,32,851,32],[1481,33,851,33],[1481,79,851,79],[1481,106,851,106],[1481,107,851,107],[1482,4,852,4],[1482,5,852,5],[1482,32,852,32],[1482,33,852,33],[1482,79,852,79],[1482,106,852,106],[1482,107,852,107],[1483,4,853,4],[1483,5,853,5],[1483,23,853,23],[1483,24,853,24],[1483,61,853,61],[1483,79,853,79],[1483,80,853,80],[1484,2,854,0],[1484,3,854,1],[1486,2,856,0],[1487,0,857,0],[1488,0,858,0],[1489,0,859,0],[1490,0,860,0],[1491,0,861,0],[1492,0,862,0],[1493,0,863,0],[1494,0,864,0],[1495,0,865,0],[1496,0,866,0],[1497,0,867,0],[1498,0,868,0],[1499,0,869,0],[1500,0,870,0],[1501,0,871,0],[1502,2,872,0],[1502,8,872,6,"CookieAuthProxiedEndpoints"],[1502,34,872,32],[1502,37,872,35],[1502,38,873,4],[1502,74,873,40],[1502,75,873,41],[1502,117,874,4],[1502,151,874,38],[1502,152,874,39],[1502,192,875,4],[1502,220,875,32],[1502,221,875,33],[1502,254,876,4],[1502,287,876,37],[1502,288,876,38],[1502,326,877,4],[1502,362,877,40],[1502,363,877,41],[1502,405,878,4],[1502,416,878,15],[1502,417,878,16],[1502,438,879,1],[1503,2,880,0],[1503,8,880,6,"DEFAULT_API_TIMEOUT_MS"],[1503,30,880,28],[1503,33,880,31],[1503,37,880,35,"Delay"],[1503,42,880,40],[1503,43,880,41],[1503,48,880,46],[1503,50,880,48],[1503,55,880,53],[1503,56,880,54],[1504,2,881,0],[1504,11,881,9,"_addTidIfNecessary"],[1504,29,881,27,"_addTidIfNecessary"],[1504,30,881,28,"auth"],[1504,34,881,32],[1504,36,881,34,"request"],[1504,43,881,41],[1504,45,881,43],[1505,4,882,4],[1505,8,882,8,"auth"],[1505,12,882,12],[1505,13,882,13,"tenantId"],[1505,21,882,21],[1505,25,882,25],[1505,26,882,26,"request"],[1505,33,882,33],[1505,34,882,34,"tenantId"],[1505,42,882,42],[1505,44,882,44],[1506,6,883,8],[1506,13,883,8,"Object"],[1506,19,883,8],[1506,20,883,8,"assign"],[1506,26,883,8],[1506,31,884,15,"request"],[1506,38,884,22],[1507,8,885,12,"tenantId"],[1507,16,885,20],[1507,18,885,22,"auth"],[1507,22,885,26],[1507,23,885,27,"tenantId"],[1508,6,885,35],[1509,4,887,4],[1510,4,888,4],[1510,11,888,11,"request"],[1510,18,888,18],[1511,2,889,0],[1512,2,890,0],[1512,17,890,15,"_performApiRequest"],[1512,35,890,33,"_performApiRequest"],[1512,36,890,34,"auth"],[1512,40,890,38],[1512,42,890,40,"method"],[1512,48,890,46],[1512,50,890,48,"path"],[1512,54,890,52],[1512,56,890,54,"request"],[1512,63,890,61],[1512,65,890,63,"customErrorMap"],[1512,79,890,77],[1512,82,890,80],[1512,83,890,81],[1512,84,890,82],[1512,86,890,84],[1513,4,891,4],[1513,11,891,11,"_performFetchWithErrorHandling"],[1513,41,891,41],[1513,42,891,42,"auth"],[1513,46,891,46],[1513,48,891,48,"customErrorMap"],[1513,62,891,62],[1513,64,891,64],[1513,76,891,76],[1514,6,892,8],[1514,10,892,12,"body"],[1514,14,892,16],[1514,17,892,19],[1514,18,892,20],[1514,19,892,21],[1515,6,893,8],[1515,10,893,12,"params"],[1515,16,893,18],[1515,19,893,21],[1515,20,893,22],[1515,21,893,23],[1516,6,894,8],[1516,10,894,12,"request"],[1516,17,894,19],[1516,19,894,21],[1517,8,895,12],[1517,12,895,16,"method"],[1517,18,895,22],[1517,23,895,27],[1517,28,895,32],[1517,29,895,33],[1517,51,895,55],[1518,10,896,16,"params"],[1518,16,896,22],[1518,19,896,25,"request"],[1518,26,896,32],[1519,8,897,12],[1519,9,897,13],[1519,15,898,17],[1520,10,899,16,"body"],[1520,14,899,20],[1520,17,899,23],[1521,12,900,20,"body"],[1521,16,900,24],[1521,18,900,26,"JSON"],[1521,22,900,30],[1521,23,900,31,"stringify"],[1521,32,900,40],[1521,33,900,41,"request"],[1521,40,900,48],[1522,10,901,16],[1522,11,901,17],[1523,8,902,12],[1524,6,903,8],[1525,6,904,8],[1525,12,904,14,"query"],[1525,17,904,19],[1525,20,904,22],[1525,24,904,22,"querystring"],[1525,37,904,33],[1525,38,904,33,"querystring"],[1525,49,904,33],[1525,51,904,33,"Object"],[1525,57,904,33],[1525,58,904,33,"assign"],[1525,64,904,33],[1526,8,905,12,"key"],[1526,11,905,15],[1526,13,905,17,"auth"],[1526,17,905,21],[1526,18,905,22,"config"],[1526,24,905,28],[1526,25,905,29,"apiKey"],[1527,6,905,35],[1527,9,906,15,"params"],[1527,15,906,21],[1527,16,907,9],[1527,17,907,10],[1527,18,907,11,"slice"],[1527,23,907,16],[1527,24,907,17],[1527,25,907,18],[1527,26,907,19],[1528,6,908,8],[1528,12,908,14,"headers"],[1528,19,908,21],[1528,22,908,24],[1528,28,908,30,"auth"],[1528,32,908,34],[1528,33,908,35,"_getAdditionalHeaders"],[1528,54,908,56],[1528,55,908,57],[1528,56,908,58],[1529,6,909,8,"headers"],[1529,13,909,15],[1529,14,909,16],[1529,28,909,30],[1529,29,909,31],[1529,59,909,61],[1529,62,909,64],[1529,80,909,82],[1530,6,910,8],[1530,10,910,12,"auth"],[1530,14,910,16],[1530,15,910,17,"languageCode"],[1530,27,910,29],[1530,29,910,31],[1531,8,911,12,"headers"],[1531,15,911,19],[1531,16,911,20],[1531,35,911,39],[1531,36,911,40],[1531,71,911,75],[1531,74,911,78,"auth"],[1531,78,911,82],[1531,79,911,83,"languageCode"],[1531,91,911,95],[1532,6,912,8],[1533,6,913,8],[1533,12,913,14,"fetchArgs"],[1533,21,913,23],[1533,24,913,23,"Object"],[1533,30,913,23],[1533,31,913,23,"assign"],[1533,37,913,23],[1534,8,914,12,"method"],[1534,14,914,18],[1535,8,915,12,"headers"],[1536,6,915,19],[1536,9,916,15,"body"],[1536,13,916,19],[1536,14,917,9],[1537,6,918,8],[1538,0,919,0],[1539,0,920,0],[1540,0,921,0],[1541,6,922,8],[1541,10,922,12],[1541,11,922,13],[1541,15,922,13,"isCloudflareWorker"],[1541,28,922,31],[1541,29,922,31,"isCloudflareWorker"],[1541,47,922,31],[1541,49,922,32],[1541,50,922,33],[1541,52,922,35],[1542,8,923,12,"fetchArgs"],[1542,17,923,21],[1542,18,923,22,"referrerPolicy"],[1542,32,923,36],[1542,35,923,39],[1542,48,923,52],[1543,6,924,8],[1544,6,925,8],[1544,10,925,12,"auth"],[1544,14,925,16],[1544,15,925,17,"emulatorConfig"],[1544,29,925,31],[1544,33,925,35],[1544,37,925,35,"isCloudWorkstation"],[1544,50,925,53],[1544,51,925,53,"isCloudWorkstation"],[1544,69,925,53],[1544,71,925,54,"auth"],[1544,75,925,58],[1544,76,925,59,"emulatorConfig"],[1544,90,925,73],[1544,91,925,74,"host"],[1544,95,925,78],[1544,96,925,79],[1544,98,925,81],[1545,8,926,12,"fetchArgs"],[1545,17,926,21],[1545,18,926,22,"credentials"],[1545,29,926,33],[1545,32,926,36],[1545,41,926,45],[1546,6,927,8],[1547,6,928,8],[1547,13,928,15,"FetchProvider"],[1547,26,928,28],[1547,27,928,29,"fetch"],[1547,32,928,34],[1547,33,928,35],[1547,34,928,36],[1547,35,928,37],[1547,41,928,43,"_getFinalTarget"],[1547,56,928,58],[1547,57,928,59,"auth"],[1547,61,928,63],[1547,63,928,65,"auth"],[1547,67,928,69],[1547,68,928,70,"config"],[1547,74,928,76],[1547,75,928,77,"apiHost"],[1547,82,928,84],[1547,84,928,86,"path"],[1547,88,928,90],[1547,90,928,92,"query"],[1547,95,928,97],[1547,96,928,98],[1547,98,928,100,"fetchArgs"],[1547,107,928,109],[1547,108,928,110],[1548,4,929,4],[1548,5,929,5],[1548,6,929,6],[1549,2,930,0],[1550,2,931,0],[1550,17,931,15,"_performFetchWithErrorHandling"],[1550,47,931,45,"_performFetchWithErrorHandling"],[1550,48,931,46,"auth"],[1550,52,931,50],[1550,54,931,52,"customErrorMap"],[1550,68,931,66],[1550,70,931,68,"fetchFn"],[1550,77,931,75],[1550,79,931,77],[1551,4,932,4,"auth"],[1551,8,932,8],[1551,9,932,9,"_canInitEmulator"],[1551,25,932,25],[1551,28,932,28],[1551,33,932,33],[1552,4,933,4],[1552,10,933,10,"errorMap"],[1552,18,933,18],[1552,21,933,18,"Object"],[1552,27,933,18],[1552,28,933,18,"assign"],[1552,34,933,18],[1552,39,933,26,"SERVER_ERROR_MAP"],[1552,55,933,42],[1552,57,933,47,"customErrorMap"],[1552,71,933,61],[1552,72,933,63],[1553,4,934,4],[1553,8,934,8],[1554,6,935,8],[1554,12,935,14,"networkTimeout"],[1554,26,935,28],[1554,29,935,31],[1554,33,935,35,"NetworkTimeout"],[1554,47,935,49],[1554,48,935,50,"auth"],[1554,52,935,54],[1554,53,935,55],[1555,6,936,8],[1555,12,936,14,"response"],[1555,20,936,22],[1555,23,936,25],[1555,29,936,31,"Promise"],[1555,36,936,38],[1555,37,936,39,"race"],[1555,41,936,43],[1555,42,936,44],[1555,43,937,12,"fetchFn"],[1555,50,937,19],[1555,51,937,20],[1555,52,937,21],[1555,54,938,12,"networkTimeout"],[1555,68,938,26],[1555,69,938,27,"promise"],[1555,76,938,34],[1555,77,939,9],[1555,78,939,10],[1556,6,940,8],[1557,6,941,8],[1558,6,942,8,"networkTimeout"],[1558,20,942,22],[1558,21,942,23,"clearNetworkTimeout"],[1558,40,942,42],[1558,41,942,43],[1558,42,942,44],[1559,6,943,8],[1559,12,943,14,"json"],[1559,16,943,18],[1559,19,943,21],[1559,25,943,27,"response"],[1559,33,943,35],[1559,34,943,36,"json"],[1559,38,943,40],[1559,39,943,41],[1559,40,943,42],[1560,6,944,8],[1560,10,944,12],[1560,28,944,30],[1560,32,944,34,"json"],[1560,36,944,38],[1560,38,944,40],[1561,8,945,12],[1561,14,945,18,"_makeTaggedError"],[1561,30,945,34],[1561,31,945,35,"auth"],[1561,35,945,39],[1561,37,945,41],[1561,79,945,83],[1561,80,945,84],[1561,119,945,123,"json"],[1561,123,945,127],[1561,124,945,128],[1562,6,946,8],[1563,6,947,8],[1563,10,947,12,"response"],[1563,18,947,20],[1563,19,947,21,"ok"],[1563,21,947,23],[1563,25,947,27],[1563,27,947,29],[1563,41,947,43],[1563,45,947,47,"json"],[1563,49,947,51],[1563,50,947,52],[1563,52,947,54],[1564,8,948,12],[1564,15,948,19,"json"],[1564,19,948,23],[1565,6,949,8],[1565,7,949,9],[1565,13,950,13],[1566,8,951,12],[1566,14,951,18,"errorMessage"],[1566,26,951,30],[1566,29,951,33,"response"],[1566,37,951,41],[1566,38,951,42,"ok"],[1566,40,951,44],[1566,43,951,47,"json"],[1566,47,951,51],[1566,48,951,52,"errorMessage"],[1566,60,951,64],[1566,63,951,67,"json"],[1566,67,951,71],[1566,68,951,72,"error"],[1566,73,951,77],[1566,74,951,78,"message"],[1566,81,951,85],[1567,8,952,12],[1567,14,952,18],[1567,15,952,19,"serverErrorCode"],[1567,30,952,34],[1567,32,952,36,"serverErrorMessage"],[1567,50,952,54],[1567,51,952,55],[1567,54,952,58,"errorMessage"],[1567,66,952,70],[1567,67,952,71,"split"],[1567,72,952,76],[1567,73,952,77],[1567,78,952,82],[1567,79,952,83],[1568,8,953,12],[1568,12,953,16,"serverErrorCode"],[1568,27,953,31],[1568,32,953,36],[1568,66,953,70],[1568,67,953,71],[1568,119,953,123],[1569,10,954,16],[1569,16,954,22,"_makeTaggedError"],[1569,32,954,38],[1569,33,954,39,"auth"],[1569,37,954,43],[1569,39,954,45],[1569,66,954,72],[1569,67,954,73],[1569,114,954,120,"json"],[1569,118,954,124],[1569,119,954,125],[1570,8,955,12],[1570,9,955,13],[1570,15,956,17],[1570,19,956,21,"serverErrorCode"],[1570,34,956,36],[1570,39,956,41],[1570,53,956,55],[1570,54,956,56],[1570,86,956,88],[1571,10,957,16],[1571,16,957,22,"_makeTaggedError"],[1571,32,957,38],[1571,33,957,39,"auth"],[1571,37,957,43],[1571,39,957,45],[1571,61,957,67],[1571,62,957,68],[1571,96,957,102,"json"],[1571,100,957,106],[1571,101,957,107],[1572,8,958,12],[1572,9,958,13],[1572,15,959,17],[1572,19,959,21,"serverErrorCode"],[1572,34,959,36],[1572,39,959,41],[1572,54,959,56],[1572,55,959,57],[1572,88,959,90],[1573,10,960,16],[1573,16,960,22,"_makeTaggedError"],[1573,32,960,38],[1573,33,960,39,"auth"],[1573,37,960,43],[1573,39,960,45],[1573,54,960,60],[1573,55,960,61],[1573,90,960,96,"json"],[1573,94,960,100],[1573,95,960,101],[1574,8,961,12],[1575,8,962,12],[1575,14,962,18,"authError"],[1575,23,962,27],[1575,26,962,30,"errorMap"],[1575,34,962,38],[1575,35,962,39,"serverErrorCode"],[1575,50,962,54],[1575,51,962,55],[1575,55,963,16,"serverErrorCode"],[1575,70,963,31],[1575,71,964,21,"toLowerCase"],[1575,82,964,32],[1575,83,964,33],[1575,84,964,34],[1575,85,965,21,"replace"],[1575,92,965,28],[1575,93,965,29],[1575,102,965,38],[1575,104,965,40],[1575,107,965,43],[1575,108,965,44],[1576,8,966,12],[1576,12,966,16,"serverErrorMessage"],[1576,30,966,34],[1576,32,966,36],[1577,10,967,16],[1577,16,967,22,"_errorWithCustomMessage"],[1577,39,967,45],[1577,40,967,46,"auth"],[1577,44,967,50],[1577,46,967,52,"authError"],[1577,55,967,61],[1577,57,967,63,"serverErrorMessage"],[1577,75,967,81],[1577,76,967,82],[1578,8,968,12],[1578,9,968,13],[1578,15,969,17],[1579,10,970,16,"_fail"],[1579,15,970,21],[1579,16,970,22,"auth"],[1579,20,970,26],[1579,22,970,28,"authError"],[1579,31,970,37],[1579,32,970,38],[1580,8,971,12],[1581,6,972,8],[1582,4,973,4],[1582,5,973,5],[1582,6,974,4],[1582,13,974,11,"e"],[1582,14,974,12],[1582,16,974,14],[1583,6,975,8],[1583,10,975,12,"e"],[1583,11,975,13],[1583,23,975,25,"FirebaseError"],[1583,36,975,38],[1583,37,975,38,"FirebaseError"],[1583,50,975,38],[1583,52,975,40],[1584,8,976,12],[1584,14,976,18,"e"],[1584,15,976,19],[1585,6,977,8],[1586,6,978,8],[1587,6,979,8],[1588,6,980,8],[1589,6,981,8,"_fail"],[1589,11,981,13],[1589,12,981,14,"auth"],[1589,16,981,18],[1589,18,981,20],[1589,42,981,44],[1589,43,981,45],[1589,87,981,89],[1590,8,981,91],[1590,17,981,100],[1590,19,981,102,"String"],[1590,25,981,108],[1590,26,981,109,"e"],[1590,27,981,110],[1591,6,981,112],[1591,7,981,113],[1591,8,981,114],[1592,4,982,4],[1593,2,983,0],[1594,2,984,0],[1594,17,984,15,"_performSignInRequest"],[1594,38,984,36,"_performSignInRequest"],[1594,39,984,37,"auth"],[1594,43,984,41],[1594,45,984,43,"method"],[1594,51,984,49],[1594,53,984,51,"path"],[1594,57,984,55],[1594,59,984,57,"request"],[1594,66,984,64],[1594,68,984,66,"customErrorMap"],[1594,82,984,80],[1594,85,984,83],[1594,86,984,84],[1594,87,984,85],[1594,89,984,87],[1595,4,985,4],[1595,10,985,10,"serverResponse"],[1595,24,985,24],[1595,27,985,27],[1595,33,985,33,"_performApiRequest"],[1595,51,985,51],[1595,52,985,52,"auth"],[1595,56,985,56],[1595,58,985,58,"method"],[1595,64,985,64],[1595,66,985,66,"path"],[1595,70,985,70],[1595,72,985,72,"request"],[1595,79,985,79],[1595,81,985,81,"customErrorMap"],[1595,95,985,95],[1595,96,985,96],[1596,4,986,4],[1596,8,986,8],[1596,30,986,30],[1596,34,986,34,"serverResponse"],[1596,48,986,48],[1596,50,986,50],[1597,6,987,8,"_fail"],[1597,11,987,13],[1597,12,987,14,"auth"],[1597,16,987,18],[1597,18,987,20],[1597,46,987,48],[1597,47,987,49],[1597,81,987,83],[1598,8,988,12,"_serverResponse"],[1598,23,988,27],[1598,25,988,29,"serverResponse"],[1599,6,989,8],[1599,7,989,9],[1599,8,989,10],[1600,4,990,4],[1601,4,991,4],[1601,11,991,11,"serverResponse"],[1601,25,991,25],[1602,2,992,0],[1603,2,993,0],[1603,17,993,15,"_getFinalTarget"],[1603,32,993,30,"_getFinalTarget"],[1603,33,993,31,"auth"],[1603,37,993,35],[1603,39,993,37,"host"],[1603,43,993,41],[1603,45,993,43,"path"],[1603,49,993,47],[1603,51,993,49,"query"],[1603,56,993,54],[1603,58,993,56],[1604,4,994,4],[1604,10,994,10,"base"],[1604,14,994,14],[1604,17,994,17],[1604,20,994,20,"host"],[1604,24,994,24],[1604,27,994,27,"path"],[1604,31,994,31],[1604,35,994,35,"query"],[1604,40,994,40],[1604,42,994,42],[1605,4,995,4],[1605,10,995,10,"authInternal"],[1605,22,995,22],[1605,25,995,25,"auth"],[1605,29,995,29],[1606,4,996,4],[1606,10,996,10,"finalTarget"],[1606,21,996,21],[1606,24,996,24,"authInternal"],[1606,36,996,36],[1606,37,996,37,"config"],[1606,43,996,43],[1606,44,996,44,"emulator"],[1606,52,996,52],[1606,55,997,10,"_emulatorUrl"],[1606,67,997,22],[1606,68,997,23,"auth"],[1606,72,997,27],[1606,73,997,28,"config"],[1606,79,997,34],[1606,81,997,36,"base"],[1606,85,997,40],[1606,86,997,41],[1606,89,998,10],[1606,92,998,13,"auth"],[1606,96,998,17],[1606,97,998,18,"config"],[1606,103,998,24],[1606,104,998,25,"apiScheme"],[1606,113,998,34],[1606,119,998,40,"base"],[1606,123,998,44],[1606,125,998,46],[1607,4,999,4],[1608,4,1000,4],[1609,4,1001,4],[1610,4,1002,4],[1610,8,1002,8,"CookieAuthProxiedEndpoints"],[1610,34,1002,34],[1610,35,1002,35,"includes"],[1610,43,1002,43],[1610,44,1002,44,"path"],[1610,48,1002,48],[1610,49,1002,49],[1610,51,1002,51],[1611,6,1003,8],[1612,6,1004,8],[1613,6,1005,8],[1613,12,1005,14,"authInternal"],[1613,24,1005,26],[1613,25,1005,27,"_persistenceManagerAvailable"],[1613,53,1005,55],[1614,6,1006,8],[1614,10,1006,12,"authInternal"],[1614,22,1006,24],[1614,23,1006,25,"_getPersistenceType"],[1614,42,1006,44],[1614,43,1006,45],[1614,44,1006,46],[1614,49,1006,51],[1614,57,1006,59],[1614,58,1006,60],[1614,88,1006,90],[1615,8,1007,12],[1615,14,1007,18,"cookiePersistence"],[1615,31,1007,35],[1615,34,1007,38,"authInternal"],[1615,46,1007,50],[1615,47,1007,51,"_getPersistence"],[1615,62,1007,66],[1615,63,1007,67],[1615,64,1007,68],[1616,8,1008,12],[1616,15,1008,19,"cookiePersistence"],[1616,32,1008,36],[1616,33,1008,37,"_getFinalTarget"],[1616,48,1008,52],[1616,49,1008,53,"finalTarget"],[1616,60,1008,64],[1616,61,1008,65],[1616,62,1008,66,"toString"],[1616,70,1008,74],[1616,71,1008,75],[1616,72,1008,76],[1617,6,1009,8],[1618,4,1010,4],[1619,4,1011,4],[1619,11,1011,11,"finalTarget"],[1619,22,1011,22],[1620,2,1012,0],[1621,2,1013,0],[1621,11,1013,9,"_parseEnforcementState"],[1621,33,1013,31,"_parseEnforcementState"],[1621,34,1013,32,"enforcementStateStr"],[1621,53,1013,51],[1621,55,1013,53],[1622,4,1014,4],[1622,12,1014,12,"enforcementStateStr"],[1622,31,1014,31],[1623,6,1015,8],[1623,11,1015,13],[1623,20,1015,22],[1624,8,1016,12],[1624,15,1016,19],[1624,24,1016,28],[1624,25,1016,29],[1625,6,1017,8],[1625,11,1017,13],[1625,18,1017,20],[1626,8,1018,12],[1626,15,1018,19],[1626,22,1018,26],[1626,23,1018,27],[1627,6,1019,8],[1627,11,1019,13],[1627,16,1019,18],[1628,8,1020,12],[1628,15,1020,19],[1628,20,1020,24],[1628,21,1020,25],[1629,6,1021,8],[1630,8,1022,12],[1630,15,1022,19],[1630,46,1022,50],[1630,47,1022,51],[1631,4,1023,4],[1632,2,1024,0],[1633,2,1025,0],[1633,8,1025,6,"NetworkTimeout"],[1633,22,1025,20],[1633,23,1025,21],[1634,4,1026,4,"clearNetworkTimeout"],[1634,23,1026,23,"clearNetworkTimeout"],[1634,24,1026,23],[1634,26,1026,26],[1635,6,1027,8,"clearTimeout"],[1635,18,1027,20],[1635,19,1027,21],[1635,23,1027,25],[1635,24,1027,26,"timer"],[1635,29,1027,31],[1635,30,1027,32],[1636,4,1028,4],[1637,4,1029,4,"constructor"],[1637,15,1029,15,"constructor"],[1637,16,1029,16,"auth"],[1637,20,1029,20],[1637,22,1029,22],[1638,6,1030,8],[1638,10,1030,12],[1638,11,1030,13,"auth"],[1638,15,1030,17],[1638,18,1030,20,"auth"],[1638,22,1030,24],[1639,6,1031,8],[1640,6,1032,8],[1641,6,1033,8],[1642,6,1034,8],[1642,10,1034,12],[1642,11,1034,13,"timer"],[1642,16,1034,18],[1642,19,1034,21],[1642,23,1034,25],[1643,6,1035,8],[1643,10,1035,12],[1643,11,1035,13,"promise"],[1643,18,1035,20],[1643,21,1035,23],[1643,25,1035,27,"Promise"],[1643,32,1035,34],[1643,33,1035,35],[1643,34,1035,36,"_"],[1643,35,1035,37],[1643,37,1035,39,"reject"],[1643,43,1035,45],[1643,48,1035,50],[1644,8,1036,12],[1644,12,1036,16],[1644,13,1036,17,"timer"],[1644,18,1036,22],[1644,21,1036,25,"setTimeout"],[1644,31,1036,35],[1644,32,1036,36],[1644,38,1036,42],[1645,10,1037,16],[1645,17,1037,23,"reject"],[1645,23,1037,29],[1645,24,1037,30,"_createError"],[1645,36,1037,42],[1645,37,1037,43],[1645,41,1037,47],[1645,42,1037,48,"auth"],[1645,46,1037,52],[1645,48,1037,54],[1645,72,1037,78],[1645,73,1037,79],[1645,115,1037,121],[1645,116,1037,122],[1645,117,1037,123],[1646,8,1038,12],[1646,9,1038,13],[1646,11,1038,15,"DEFAULT_API_TIMEOUT_MS"],[1646,33,1038,37],[1646,34,1038,38,"get"],[1646,37,1038,41],[1646,38,1038,42],[1646,39,1038,43],[1646,40,1038,44],[1647,6,1039,8],[1647,7,1039,9],[1647,8,1039,10],[1648,4,1040,4],[1649,2,1041,0],[1650,2,1042,0],[1650,11,1042,9,"_makeTaggedError"],[1650,27,1042,25,"_makeTaggedError"],[1650,28,1042,26,"auth"],[1650,32,1042,30],[1650,34,1042,32,"code"],[1650,38,1042,36],[1650,40,1042,38,"response"],[1650,48,1042,46],[1650,50,1042,48],[1651,4,1043,4],[1651,10,1043,10,"errorParams"],[1651,21,1043,21],[1651,24,1043,24],[1652,6,1044,8,"appName"],[1652,13,1044,15],[1652,15,1044,17,"auth"],[1652,19,1044,21],[1652,20,1044,22,"name"],[1653,4,1045,4],[1653,5,1045,5],[1654,4,1046,4],[1654,8,1046,8,"response"],[1654,16,1046,16],[1654,17,1046,17,"email"],[1654,22,1046,22],[1654,24,1046,24],[1655,6,1047,8,"errorParams"],[1655,17,1047,19],[1655,18,1047,20,"email"],[1655,23,1047,25],[1655,26,1047,28,"response"],[1655,34,1047,36],[1655,35,1047,37,"email"],[1655,40,1047,42],[1656,4,1048,4],[1657,4,1049,4],[1657,8,1049,8,"response"],[1657,16,1049,16],[1657,17,1049,17,"phoneNumber"],[1657,28,1049,28],[1657,30,1049,30],[1658,6,1050,8,"errorParams"],[1658,17,1050,19],[1658,18,1050,20,"phoneNumber"],[1658,29,1050,31],[1658,32,1050,34,"response"],[1658,40,1050,42],[1658,41,1050,43,"phoneNumber"],[1658,52,1050,54],[1659,4,1051,4],[1660,4,1052,4],[1660,10,1052,10,"error"],[1660,15,1052,15],[1660,18,1052,18,"_createError"],[1660,30,1052,30],[1660,31,1052,31,"auth"],[1660,35,1052,35],[1660,37,1052,37,"code"],[1660,41,1052,41],[1660,43,1052,43,"errorParams"],[1660,54,1052,54],[1660,55,1052,55],[1661,4,1053,4],[1662,4,1054,4,"error"],[1662,9,1054,9],[1662,10,1054,10,"customData"],[1662,20,1054,20],[1662,21,1054,21,"_tokenResponse"],[1662,35,1054,35],[1662,38,1054,38,"response"],[1662,46,1054,46],[1663,4,1055,4],[1663,11,1055,11,"error"],[1663,16,1055,16],[1664,2,1056,0],[1666,2,1058,0],[1667,0,1059,0],[1668,0,1060,0],[1669,0,1061,0],[1670,0,1062,0],[1671,0,1063,0],[1672,0,1064,0],[1673,0,1065,0],[1674,0,1066,0],[1675,0,1067,0],[1676,0,1068,0],[1677,0,1069,0],[1678,0,1070,0],[1679,0,1071,0],[1680,0,1072,0],[1681,0,1073,0],[1682,2,1074,0],[1682,11,1074,9,"isV2"],[1682,15,1074,13,"isV2"],[1682,16,1074,14,"grecaptcha"],[1682,26,1074,24],[1682,28,1074,26],[1683,4,1075,4],[1683,11,1075,12,"grecaptcha"],[1683,21,1075,22],[1683,26,1075,27,"undefined"],[1683,35,1075,36],[1683,39,1076,8,"grecaptcha"],[1683,49,1076,18],[1683,50,1076,19,"getResponse"],[1683,61,1076,30],[1683,66,1076,35,"undefined"],[1683,75,1076,44],[1684,2,1077,0],[1685,2,1078,0],[1685,11,1078,9,"isEnterprise"],[1685,23,1078,21,"isEnterprise"],[1685,24,1078,22,"grecaptcha"],[1685,34,1078,32],[1685,36,1078,34],[1686,4,1079,4],[1686,11,1079,12,"grecaptcha"],[1686,21,1079,22],[1686,26,1079,27,"undefined"],[1686,35,1079,36],[1686,39,1080,8,"grecaptcha"],[1686,49,1080,18],[1686,50,1080,19,"enterprise"],[1686,60,1080,29],[1686,65,1080,34,"undefined"],[1686,74,1080,43],[1687,2,1081,0],[1688,2,1082,0],[1688,8,1082,6,"RecaptchaConfig"],[1688,23,1082,21],[1688,24,1082,22],[1689,4,1083,4,"constructor"],[1689,15,1083,15,"constructor"],[1689,16,1083,16,"response"],[1689,24,1083,24],[1689,26,1083,26],[1690,6,1084,8],[1691,0,1085,0],[1692,0,1086,0],[1693,6,1087,8],[1693,10,1087,12],[1693,11,1087,13,"siteKey"],[1693,18,1087,20],[1693,21,1087,23],[1693,23,1087,25],[1694,6,1088,8],[1695,0,1089,0],[1696,0,1090,0],[1697,6,1091,8],[1697,10,1091,12],[1697,11,1091,13,"recaptchaEnforcementState"],[1697,36,1091,38],[1697,39,1091,41],[1697,41,1091,43],[1698,6,1092,8],[1698,10,1092,12,"response"],[1698,18,1092,20],[1698,19,1092,21,"recaptchaKey"],[1698,31,1092,33],[1698,36,1092,38,"undefined"],[1698,45,1092,47],[1698,47,1092,49],[1699,8,1093,12],[1699,14,1093,18],[1699,18,1093,22,"Error"],[1699,23,1093,27],[1699,24,1093,28],[1699,48,1093,52],[1699,49,1093,53],[1700,6,1094,8],[1701,6,1095,8],[1702,6,1096,8],[1702,10,1096,12],[1702,11,1096,13,"siteKey"],[1702,18,1096,20],[1702,21,1096,23,"response"],[1702,29,1096,31],[1702,30,1096,32,"recaptchaKey"],[1702,42,1096,44],[1702,43,1096,45,"split"],[1702,48,1096,50],[1702,49,1096,51],[1702,52,1096,54],[1702,53,1096,55],[1702,54,1096,56],[1702,55,1096,57],[1702,56,1096,58],[1703,6,1097,8],[1703,10,1097,12],[1703,11,1097,13,"recaptchaEnforcementState"],[1703,36,1097,38],[1703,39,1097,41,"response"],[1703,47,1097,49],[1703,48,1097,50,"recaptchaEnforcementState"],[1703,73,1097,75],[1704,4,1098,4],[1705,4,1099,4],[1706,0,1100,0],[1707,0,1101,0],[1708,0,1102,0],[1709,0,1103,0],[1710,0,1104,0],[1711,4,1105,4,"getProviderEnforcementState"],[1711,31,1105,31,"getProviderEnforcementState"],[1711,32,1105,32,"providerStr"],[1711,43,1105,43],[1711,45,1105,45],[1712,6,1106,8],[1712,10,1106,12],[1712,11,1106,13],[1712,15,1106,17],[1712,16,1106,18,"recaptchaEnforcementState"],[1712,41,1106,43],[1712,45,1107,12],[1712,49,1107,16],[1712,50,1107,17,"recaptchaEnforcementState"],[1712,75,1107,42],[1712,76,1107,43,"length"],[1712,82,1107,49],[1712,87,1107,54],[1712,88,1107,55],[1712,90,1107,57],[1713,8,1108,12],[1713,15,1108,19],[1713,19,1108,23],[1714,6,1109,8],[1715,6,1110,8],[1715,11,1110,13],[1715,17,1110,19,"recaptchaEnforcementState"],[1715,42,1110,44],[1715,46,1110,48],[1715,50,1110,52],[1715,51,1110,53,"recaptchaEnforcementState"],[1715,76,1110,78],[1715,78,1110,80],[1716,8,1111,12],[1716,12,1111,16,"recaptchaEnforcementState"],[1716,37,1111,41],[1716,38,1111,42,"provider"],[1716,46,1111,50],[1716,50,1112,16,"recaptchaEnforcementState"],[1716,75,1112,41],[1716,76,1112,42,"provider"],[1716,84,1112,50],[1716,89,1112,55,"providerStr"],[1716,100,1112,66],[1716,102,1112,68],[1717,10,1113,16],[1717,17,1113,23,"_parseEnforcementState"],[1717,39,1113,45],[1717,40,1113,46,"recaptchaEnforcementState"],[1717,65,1113,71],[1717,66,1113,72,"enforcementState"],[1717,82,1113,88],[1717,83,1113,89],[1718,8,1114,12],[1719,6,1115,8],[1720,6,1116,8],[1720,13,1116,15],[1720,17,1116,19],[1721,4,1117,4],[1722,4,1118,4],[1723,0,1119,0],[1724,0,1120,0],[1725,0,1121,0],[1726,0,1122,0],[1727,0,1123,0],[1728,4,1124,4,"isProviderEnabled"],[1728,21,1124,21,"isProviderEnabled"],[1728,22,1124,22,"providerStr"],[1728,33,1124,33],[1728,35,1124,35],[1729,6,1125,8],[1729,13,1125,16],[1729,17,1125,20],[1729,18,1125,21,"getProviderEnforcementState"],[1729,45,1125,48],[1729,46,1125,49,"providerStr"],[1729,57,1125,60],[1729,58,1125,61],[1729,63,1126,12],[1729,72,1126,21],[1729,73,1126,22],[1729,107,1127,12],[1729,111,1127,16],[1729,112,1127,17,"getProviderEnforcementState"],[1729,139,1127,44],[1729,140,1127,45,"providerStr"],[1729,151,1127,56],[1729,152,1127,57],[1729,157,1127,62],[1729,164,1127,69],[1729,165,1127,70],[1730,4,1128,4],[1731,4,1129,4],[1732,0,1130,0],[1733,0,1131,0],[1734,0,1132,0],[1735,0,1133,0],[1736,0,1134,0],[1737,4,1135,4,"isAnyProviderEnabled"],[1737,24,1135,24,"isAnyProviderEnabled"],[1737,25,1135,24],[1737,27,1135,27],[1738,6,1136,8],[1738,13,1136,16],[1738,17,1136,20],[1738,18,1136,21,"isProviderEnabled"],[1738,35,1136,38],[1738,36,1136,39],[1738,61,1136,64],[1738,62,1136,65],[1738,113,1136,116],[1738,114,1136,117],[1738,118,1137,12],[1738,122,1137,16],[1738,123,1137,17,"isProviderEnabled"],[1738,140,1137,34],[1738,141,1137,35],[1738,157,1137,51],[1738,158,1137,52],[1738,200,1137,94],[1738,201,1137,95],[1739,4,1138,4],[1740,2,1139,0],[1742,2,1141,0],[1743,0,1142,0],[1744,0,1143,0],[1745,0,1144,0],[1746,0,1145,0],[1747,0,1146,0],[1748,0,1147,0],[1749,0,1148,0],[1750,0,1149,0],[1751,0,1150,0],[1752,0,1151,0],[1753,0,1152,0],[1754,0,1153,0],[1755,0,1154,0],[1756,0,1155,0],[1757,0,1156,0],[1758,2,1157,0],[1758,17,1157,15,"getRecaptchaParams"],[1758,35,1157,33,"getRecaptchaParams"],[1758,36,1157,34,"auth"],[1758,40,1157,38],[1758,42,1157,40],[1759,4,1158,4],[1759,11,1158,12],[1759,12,1158,13],[1759,18,1158,19,"_performApiRequest"],[1759,36,1158,37],[1759,37,1158,38,"auth"],[1759,41,1158,42],[1759,43,1158,44],[1759,48,1158,49],[1759,49,1158,50],[1759,71,1158,72],[1759,92,1158,93],[1759,93,1158,94],[1759,127,1158,128],[1759,128,1158,129],[1759,130,1158,131,"recaptchaSiteKey"],[1759,146,1158,147],[1759,150,1158,151],[1759,152,1158,153],[1760,2,1159,0],[1761,2,1160,0],[1761,17,1160,15,"getRecaptchaConfig"],[1761,35,1160,33,"getRecaptchaConfig"],[1761,36,1160,34,"auth"],[1761,40,1160,38],[1761,42,1160,40,"request"],[1761,49,1160,47],[1761,51,1160,49],[1762,4,1161,4],[1762,11,1161,11,"_performApiRequest"],[1762,29,1161,29],[1762,30,1161,30,"auth"],[1762,34,1161,34],[1762,36,1161,36],[1762,41,1161,41],[1762,42,1161,42],[1762,64,1161,64],[1762,85,1161,85],[1762,86,1161,86],[1762,123,1161,123,"_addTidIfNecessary"],[1762,141,1161,141],[1762,142,1161,142,"auth"],[1762,146,1161,146],[1762,148,1161,148,"request"],[1762,155,1161,155],[1762,156,1161,156],[1762,157,1161,157],[1763,2,1162,0],[1765,2,1164,0],[1766,0,1165,0],[1767,0,1166,0],[1768,0,1167,0],[1769,0,1168,0],[1770,0,1169,0],[1771,0,1170,0],[1772,0,1171,0],[1773,0,1172,0],[1774,0,1173,0],[1775,0,1174,0],[1776,0,1175,0],[1777,0,1176,0],[1778,0,1177,0],[1779,0,1178,0],[1780,0,1179,0],[1781,2,1180,0],[1781,17,1180,15,"deleteAccount"],[1781,30,1180,28,"deleteAccount"],[1781,31,1180,29,"auth"],[1781,35,1180,33],[1781,37,1180,35,"request"],[1781,44,1180,42],[1781,46,1180,44],[1782,4,1181,4],[1782,11,1181,11,"_performApiRequest"],[1782,29,1181,29],[1782,30,1181,30,"auth"],[1782,34,1181,34],[1782,36,1181,36],[1782,42,1181,42],[1782,43,1181,43],[1782,66,1181,66],[1782,87,1181,87],[1782,88,1181,88],[1782,119,1181,119,"request"],[1782,126,1181,126],[1782,127,1181,127],[1783,2,1182,0],[1784,2,1183,0],[1784,17,1183,15,"deleteLinkedAccounts"],[1784,37,1183,35,"deleteLinkedAccounts"],[1784,38,1183,36,"auth"],[1784,42,1183,40],[1784,44,1183,42,"request"],[1784,51,1183,49],[1784,53,1183,51],[1785,4,1184,4],[1785,11,1184,11,"_performApiRequest"],[1785,29,1184,29],[1785,30,1184,30,"auth"],[1785,34,1184,34],[1785,36,1184,36],[1785,42,1184,42],[1785,43,1184,43],[1785,66,1184,66],[1785,87,1184,87],[1785,88,1184,88],[1785,121,1184,121,"request"],[1785,128,1184,128],[1785,129,1184,129],[1786,2,1185,0],[1787,2,1186,0],[1787,17,1186,15,"getAccountInfo"],[1787,31,1186,29,"getAccountInfo"],[1787,32,1186,30,"auth"],[1787,36,1186,34],[1787,38,1186,36,"request"],[1787,45,1186,43],[1787,47,1186,45],[1788,4,1187,4],[1788,11,1187,11,"_performApiRequest"],[1788,29,1187,29],[1788,30,1187,30,"auth"],[1788,34,1187,34],[1788,36,1187,36],[1788,42,1187,42],[1788,43,1187,43],[1788,66,1187,66],[1788,87,1187,87],[1788,88,1187,88],[1788,121,1187,121,"request"],[1788,128,1187,128],[1788,129,1187,129],[1789,2,1188,0],[1791,2,1190,0],[1792,0,1191,0],[1793,0,1192,0],[1794,0,1193,0],[1795,0,1194,0],[1796,0,1195,0],[1797,0,1196,0],[1798,0,1197,0],[1799,0,1198,0],[1800,0,1199,0],[1801,0,1200,0],[1802,0,1201,0],[1803,0,1202,0],[1804,0,1203,0],[1805,0,1204,0],[1806,0,1205,0],[1807,2,1206,0],[1807,11,1206,9,"utcTimestampToDateString"],[1807,35,1206,33,"utcTimestampToDateString"],[1807,36,1206,34,"utcTimestamp"],[1807,48,1206,46],[1807,50,1206,48],[1808,4,1207,4],[1808,8,1207,8],[1808,9,1207,9,"utcTimestamp"],[1808,21,1207,21],[1808,23,1207,23],[1809,6,1208,8],[1809,13,1208,15,"undefined"],[1809,22,1208,24],[1810,4,1209,4],[1811,4,1210,4],[1811,8,1210,8],[1812,6,1211,8],[1813,6,1212,8],[1813,12,1212,14,"date"],[1813,16,1212,18],[1813,19,1212,21],[1813,23,1212,25,"Date"],[1813,27,1212,29],[1813,28,1212,30,"Number"],[1813,34,1212,36],[1813,35,1212,37,"utcTimestamp"],[1813,47,1212,49],[1813,48,1212,50],[1813,49,1212,51],[1814,6,1213,8],[1815,6,1214,8],[1815,10,1214,12],[1815,11,1214,13,"isNaN"],[1815,16,1214,18],[1815,17,1214,19,"date"],[1815,21,1214,23],[1815,22,1214,24,"getTime"],[1815,29,1214,31],[1815,30,1214,32],[1815,31,1214,33],[1815,32,1214,34],[1815,34,1214,36],[1816,8,1215,12],[1817,8,1216,12],[1817,15,1216,19,"date"],[1817,19,1216,23],[1817,20,1216,24,"toUTCString"],[1817,31,1216,35],[1817,32,1216,36],[1817,33,1216,37],[1818,6,1217,8],[1819,4,1218,4],[1819,5,1218,5],[1819,6,1219,4],[1819,13,1219,11,"e"],[1819,14,1219,12],[1819,16,1219,14],[1820,6,1220,8],[1821,4,1220,8],[1822,4,1222,4],[1822,11,1222,11,"undefined"],[1822,20,1222,20],[1823,2,1223,0],[1825,2,1225,0],[1826,0,1226,0],[1827,0,1227,0],[1828,0,1228,0],[1829,0,1229,0],[1830,0,1230,0],[1831,0,1231,0],[1832,0,1232,0],[1833,0,1233,0],[1834,0,1234,0],[1835,0,1235,0],[1836,0,1236,0],[1837,0,1237,0],[1838,0,1238,0],[1839,0,1239,0],[1840,0,1240,0],[1841,2,1241,0],[1842,0,1242,0],[1843,0,1243,0],[1844,0,1244,0],[1845,0,1245,0],[1846,0,1246,0],[1847,0,1247,0],[1848,0,1248,0],[1849,0,1249,0],[1850,0,1250,0],[1851,0,1251,0],[1852,0,1252,0],[1853,2,1253,0],[1853,11,1253,9,"getIdToken"],[1853,21,1253,19,"getIdToken"],[1853,22,1253,20,"user"],[1853,26,1253,24],[1853,28,1253,26,"forceRefresh"],[1853,40,1253,38],[1853,43,1253,41],[1853,48,1253,46],[1853,50,1253,48],[1854,4,1254,4],[1854,11,1254,11],[1854,15,1254,11,"getModularInstance"],[1854,28,1254,29],[1854,29,1254,29,"getModularInstance"],[1854,47,1254,29],[1854,49,1254,30,"user"],[1854,53,1254,34],[1854,54,1254,35],[1854,55,1254,36,"getIdToken"],[1854,65,1254,46],[1854,66,1254,47,"forceRefresh"],[1854,78,1254,59],[1854,79,1254,60],[1855,2,1255,0],[1856,2,1256,0],[1857,0,1257,0],[1858,0,1258,0],[1859,0,1259,0],[1860,0,1260,0],[1861,0,1261,0],[1862,0,1262,0],[1863,0,1263,0],[1864,0,1264,0],[1865,0,1265,0],[1866,0,1266,0],[1867,0,1267,0],[1868,2,1268,0],[1868,17,1268,15,"getIdTokenResult"],[1868,33,1268,31,"getIdTokenResult"],[1868,34,1268,32,"user"],[1868,38,1268,36],[1868,40,1268,38,"forceRefresh"],[1868,52,1268,50],[1868,55,1268,53],[1868,60,1268,58],[1868,62,1268,60],[1869,4,1269,4],[1869,10,1269,10,"userInternal"],[1869,22,1269,22],[1869,25,1269,25],[1869,29,1269,25,"getModularInstance"],[1869,42,1269,43],[1869,43,1269,43,"getModularInstance"],[1869,61,1269,43],[1869,63,1269,44,"user"],[1869,67,1269,48],[1869,68,1269,49],[1870,4,1270,4],[1870,10,1270,10,"token"],[1870,15,1270,15],[1870,18,1270,18],[1870,24,1270,24,"userInternal"],[1870,36,1270,36],[1870,37,1270,37,"getIdToken"],[1870,47,1270,47],[1870,48,1270,48,"forceRefresh"],[1870,60,1270,60],[1870,61,1270,61],[1871,4,1271,4],[1871,10,1271,10,"claims"],[1871,16,1271,16],[1871,19,1271,19,"_parseToken"],[1871,30,1271,30],[1871,31,1271,31,"token"],[1871,36,1271,36],[1871,37,1271,37],[1872,4,1272,4,"_assert"],[1872,11,1272,11],[1872,12,1272,12,"claims"],[1872,18,1272,18],[1872,22,1272,22,"claims"],[1872,28,1272,28],[1872,29,1272,29,"exp"],[1872,32,1272,32],[1872,36,1272,36,"claims"],[1872,42,1272,42],[1872,43,1272,43,"auth_time"],[1872,52,1272,52],[1872,56,1272,56,"claims"],[1872,62,1272,62],[1872,63,1272,63,"iat"],[1872,66,1272,66],[1872,68,1272,68,"userInternal"],[1872,80,1272,80],[1872,81,1272,81,"auth"],[1872,85,1272,85],[1872,87,1272,87],[1872,103,1272,103],[1872,104,1272,104],[1872,138,1272,138],[1872,139,1272,139],[1873,4,1273,4],[1873,10,1273,10,"firebase"],[1873,18,1273,18],[1873,21,1273,21],[1873,28,1273,28,"claims"],[1873,34,1273,34],[1873,35,1273,35,"firebase"],[1873,43,1273,43],[1873,48,1273,48],[1873,56,1273,56],[1873,59,1273,59,"claims"],[1873,65,1273,65],[1873,66,1273,66,"firebase"],[1873,74,1273,74],[1873,77,1273,77,"undefined"],[1873,86,1273,86],[1874,4,1274,4],[1874,10,1274,10,"signInProvider"],[1874,24,1274,24],[1874,27,1274,27,"firebase"],[1874,35,1274,35],[1874,38,1274,38],[1874,56,1274,56],[1874,57,1274,57],[1875,4,1275,4],[1875,11,1275,11],[1876,6,1276,8,"claims"],[1876,12,1276,14],[1877,6,1277,8,"token"],[1877,11,1277,13],[1878,6,1278,8,"authTime"],[1878,14,1278,16],[1878,16,1278,18,"utcTimestampToDateString"],[1878,40,1278,42],[1878,41,1278,43,"secondsStringToMilliseconds"],[1878,68,1278,70],[1878,69,1278,71,"claims"],[1878,75,1278,77],[1878,76,1278,78,"auth_time"],[1878,85,1278,87],[1878,86,1278,88],[1878,87,1278,89],[1879,6,1279,8,"issuedAtTime"],[1879,18,1279,20],[1879,20,1279,22,"utcTimestampToDateString"],[1879,44,1279,46],[1879,45,1279,47,"secondsStringToMilliseconds"],[1879,72,1279,74],[1879,73,1279,75,"claims"],[1879,79,1279,81],[1879,80,1279,82,"iat"],[1879,83,1279,85],[1879,84,1279,86],[1879,85,1279,87],[1880,6,1280,8,"expirationTime"],[1880,20,1280,22],[1880,22,1280,24,"utcTimestampToDateString"],[1880,46,1280,48],[1880,47,1280,49,"secondsStringToMilliseconds"],[1880,74,1280,76],[1880,75,1280,77,"claims"],[1880,81,1280,83],[1880,82,1280,84,"exp"],[1880,85,1280,87],[1880,86,1280,88],[1880,87,1280,89],[1881,6,1281,8,"signInProvider"],[1881,20,1281,22],[1881,22,1281,24,"signInProvider"],[1881,36,1281,38],[1881,40,1281,42],[1881,44,1281,46],[1882,6,1282,8,"signInSecondFactor"],[1882,24,1282,26],[1882,26,1282,28,"firebase"],[1882,34,1282,36],[1882,37,1282,39],[1882,60,1282,62],[1882,61,1282,63],[1882,65,1282,67],[1883,4,1283,4],[1883,5,1283,5],[1884,2,1284,0],[1885,2,1285,0],[1885,11,1285,9,"secondsStringToMilliseconds"],[1885,38,1285,36,"secondsStringToMilliseconds"],[1885,39,1285,37,"seconds"],[1885,46,1285,44],[1885,48,1285,46],[1886,4,1286,4],[1886,11,1286,11,"Number"],[1886,17,1286,17],[1886,18,1286,18,"seconds"],[1886,25,1286,25],[1886,26,1286,26],[1886,29,1286,29],[1886,33,1286,33],[1887,2,1287,0],[1888,2,1288,0],[1888,11,1288,9,"_parseToken"],[1888,22,1288,20,"_parseToken"],[1888,23,1288,21,"token"],[1888,28,1288,26],[1888,30,1288,28],[1889,4,1289,4],[1889,10,1289,10],[1889,11,1289,11,"algorithm"],[1889,20,1289,20],[1889,22,1289,22,"payload"],[1889,29,1289,29],[1889,31,1289,31,"signature"],[1889,40,1289,40],[1889,41,1289,41],[1889,44,1289,44,"token"],[1889,49,1289,49],[1889,50,1289,50,"split"],[1889,55,1289,55],[1889,56,1289,56],[1889,59,1289,59],[1889,60,1289,60],[1890,4,1290,4],[1890,8,1290,8,"algorithm"],[1890,17,1290,17],[1890,22,1290,22,"undefined"],[1890,31,1290,31],[1890,35,1291,8,"payload"],[1890,42,1291,15],[1890,47,1291,20,"undefined"],[1890,56,1291,29],[1890,60,1292,8,"signature"],[1890,69,1292,17],[1890,74,1292,22,"undefined"],[1890,83,1292,31],[1890,85,1292,33],[1891,6,1293,8,"_logError"],[1891,15,1293,17],[1891,16,1293,18],[1891,64,1293,66],[1891,65,1293,67],[1892,6,1294,8],[1892,13,1294,15],[1892,17,1294,19],[1893,4,1295,4],[1894,4,1296,4],[1894,8,1296,8],[1895,6,1297,8],[1895,12,1297,14,"decoded"],[1895,19,1297,21],[1895,22,1297,24],[1895,26,1297,24,"base64Decode"],[1895,39,1297,36],[1895,40,1297,36,"base64Decode"],[1895,52,1297,36],[1895,54,1297,37,"payload"],[1895,61,1297,44],[1895,62,1297,45],[1896,6,1298,8],[1896,10,1298,12],[1896,11,1298,13,"decoded"],[1896,18,1298,20],[1896,20,1298,22],[1897,8,1299,12,"_logError"],[1897,17,1299,21],[1897,18,1299,22],[1897,55,1299,59],[1897,56,1299,60],[1898,8,1300,12],[1898,15,1300,19],[1898,19,1300,23],[1899,6,1301,8],[1900,6,1302,8],[1900,13,1302,15,"JSON"],[1900,17,1302,19],[1900,18,1302,20,"parse"],[1900,23,1302,25],[1900,24,1302,26,"decoded"],[1900,31,1302,33],[1900,32,1302,34],[1901,4,1303,4],[1901,5,1303,5],[1901,6,1304,4],[1901,13,1304,11,"e"],[1901,14,1304,12],[1901,16,1304,14],[1902,6,1305,8,"_logError"],[1902,15,1305,17],[1902,16,1305,18],[1902,58,1305,60],[1902,60,1305,62,"e"],[1902,61,1305,63],[1902,63,1305,65,"toString"],[1902,71,1305,73],[1902,72,1305,74],[1902,73,1305,75],[1902,74,1305,76],[1903,6,1306,8],[1903,13,1306,15],[1903,17,1306,19],[1904,4,1307,4],[1905,2,1308,0],[1906,2,1309,0],[1907,0,1310,0],[1908,0,1311,0],[1909,2,1312,0],[1909,11,1312,9,"_tokenExpiresIn"],[1909,26,1312,24,"_tokenExpiresIn"],[1909,27,1312,25,"token"],[1909,32,1312,30],[1909,34,1312,32],[1910,4,1313,4],[1910,10,1313,10,"parsedToken"],[1910,21,1313,21],[1910,24,1313,24,"_parseToken"],[1910,35,1313,35],[1910,36,1313,36,"token"],[1910,41,1313,41],[1910,42,1313,42],[1911,4,1314,4,"_assert"],[1911,11,1314,11],[1911,12,1314,12,"parsedToken"],[1911,23,1314,23],[1911,25,1314,25],[1911,41,1314,41],[1911,42,1314,42],[1911,76,1314,76],[1911,77,1314,77],[1912,4,1315,4,"_assert"],[1912,11,1315,11],[1912,12,1315,12],[1912,19,1315,19,"parsedToken"],[1912,30,1315,30],[1912,31,1315,31,"exp"],[1912,34,1315,34],[1912,39,1315,39],[1912,50,1315,50],[1912,52,1315,52],[1912,68,1315,68],[1912,69,1315,69],[1912,103,1315,103],[1912,104,1315,104],[1913,4,1316,4,"_assert"],[1913,11,1316,11],[1913,12,1316,12],[1913,19,1316,19,"parsedToken"],[1913,30,1316,30],[1913,31,1316,31,"iat"],[1913,34,1316,34],[1913,39,1316,39],[1913,50,1316,50],[1913,52,1316,52],[1913,68,1316,68],[1913,69,1316,69],[1913,103,1316,103],[1913,104,1316,104],[1914,4,1317,4],[1914,11,1317,11,"Number"],[1914,17,1317,17],[1914,18,1317,18,"parsedToken"],[1914,29,1317,29],[1914,30,1317,30,"exp"],[1914,33,1317,33],[1914,34,1317,34],[1914,37,1317,37,"Number"],[1914,43,1317,43],[1914,44,1317,44,"parsedToken"],[1914,55,1317,55],[1914,56,1317,56,"iat"],[1914,59,1317,59],[1914,60,1317,60],[1915,2,1318,0],[1917,2,1320,0],[1918,0,1321,0],[1919,0,1322,0],[1920,0,1323,0],[1921,0,1324,0],[1922,0,1325,0],[1923,0,1326,0],[1924,0,1327,0],[1925,0,1328,0],[1926,0,1329,0],[1927,0,1330,0],[1928,0,1331,0],[1929,0,1332,0],[1930,0,1333,0],[1931,0,1334,0],[1932,0,1335,0],[1933,2,1336,0],[1933,17,1336,15,"_logoutIfInvalidated"],[1933,37,1336,35,"_logoutIfInvalidated"],[1933,38,1336,36,"user"],[1933,42,1336,40],[1933,44,1336,42,"promise"],[1933,51,1336,49],[1933,53,1336,51,"bypassAuthState"],[1933,68,1336,66],[1933,71,1336,69],[1933,76,1336,74],[1933,78,1336,76],[1934,4,1337,4],[1934,8,1337,8,"bypassAuthState"],[1934,23,1337,23],[1934,25,1337,25],[1935,6,1338,8],[1935,13,1338,15,"promise"],[1935,20,1338,22],[1936,4,1339,4],[1937,4,1340,4],[1937,8,1340,8],[1938,6,1341,8],[1938,13,1341,15],[1938,19,1341,21,"promise"],[1938,26,1341,28],[1939,4,1342,4],[1939,5,1342,5],[1939,6,1343,4],[1939,13,1343,11,"e"],[1939,14,1343,12],[1939,16,1343,14],[1940,6,1344,8],[1940,10,1344,12,"e"],[1940,11,1344,13],[1940,23,1344,25,"FirebaseError"],[1940,36,1344,38],[1940,37,1344,38,"FirebaseError"],[1940,50,1344,38],[1940,54,1344,42,"isUserInvalidated"],[1940,71,1344,59],[1940,72,1344,60,"e"],[1940,73,1344,61],[1940,74,1344,62],[1940,76,1344,64],[1941,8,1345,12],[1941,12,1345,16,"user"],[1941,16,1345,20],[1941,17,1345,21,"auth"],[1941,21,1345,25],[1941,22,1345,26,"currentUser"],[1941,33,1345,37],[1941,38,1345,42,"user"],[1941,42,1345,46],[1941,44,1345,48],[1942,10,1346,16],[1942,16,1346,22,"user"],[1942,20,1346,26],[1942,21,1346,27,"auth"],[1942,25,1346,31],[1942,26,1346,32,"signOut"],[1942,33,1346,39],[1942,34,1346,40],[1942,35,1346,41],[1943,8,1347,12],[1944,6,1348,8],[1945,6,1349,8],[1945,12,1349,14,"e"],[1945,13,1349,15],[1946,4,1350,4],[1947,2,1351,0],[1948,2,1352,0],[1948,11,1352,9,"isUserInvalidated"],[1948,28,1352,26,"isUserInvalidated"],[1948,29,1352,27],[1949,4,1352,29,"code"],[1950,2,1352,34],[1950,3,1352,35],[1950,5,1352,37],[1951,4,1353,4],[1951,11,1353,12,"code"],[1951,15,1353,16],[1951,20,1353,21],[1951,28,1353,29],[1951,43,1353,44],[1951,44,1353,45],[1951,79,1353,80],[1951,83,1354,8,"code"],[1951,87,1354,12],[1951,92,1354,17],[1951,100,1354,25],[1951,120,1354,45],[1951,121,1354,46],[1951,156,1354,81],[1952,2,1355,0],[1954,2,1357,0],[1955,0,1358,0],[1956,0,1359,0],[1957,0,1360,0],[1958,0,1361,0],[1959,0,1362,0],[1960,0,1363,0],[1961,0,1364,0],[1962,0,1365,0],[1963,0,1366,0],[1964,0,1367,0],[1965,0,1368,0],[1966,0,1369,0],[1967,0,1370,0],[1968,0,1371,0],[1969,0,1372,0],[1970,2,1373,0],[1970,8,1373,6,"ProactiveRefresh"],[1970,24,1373,22],[1970,25,1373,23],[1971,4,1374,4,"constructor"],[1971,15,1374,15,"constructor"],[1971,16,1374,16,"user"],[1971,20,1374,20],[1971,22,1374,22],[1972,6,1375,8],[1972,10,1375,12],[1972,11,1375,13,"user"],[1972,15,1375,17],[1972,18,1375,20,"user"],[1972,22,1375,24],[1973,6,1376,8],[1973,10,1376,12],[1973,11,1376,13,"isRunning"],[1973,20,1376,22],[1973,23,1376,25],[1973,28,1376,30],[1974,6,1377,8],[1975,6,1378,8],[1976,6,1379,8],[1977,6,1380,8],[1978,6,1381,8],[1978,10,1381,12],[1978,11,1381,13,"timerId"],[1978,18,1381,20],[1978,21,1381,23],[1978,25,1381,27],[1979,6,1382,8],[1979,10,1382,12],[1979,11,1382,13,"errorBackoff"],[1979,23,1382,25],[1979,26,1382,28],[1979,31,1382,33],[1979,32,1382,34],[1980,4,1383,4],[1981,4,1384,4,"_start"],[1981,10,1384,10,"_start"],[1981,11,1384,10],[1981,13,1384,13],[1982,6,1385,8],[1982,10,1385,12],[1982,14,1385,16],[1982,15,1385,17,"isRunning"],[1982,24,1385,26],[1982,26,1385,28],[1983,8,1386,12],[1984,6,1387,8],[1985,6,1388,8],[1985,10,1388,12],[1985,11,1388,13,"isRunning"],[1985,20,1388,22],[1985,23,1388,25],[1985,27,1388,29],[1986,6,1389,8],[1986,10,1389,12],[1986,11,1389,13,"schedule"],[1986,19,1389,21],[1986,20,1389,22],[1986,21,1389,23],[1987,4,1390,4],[1988,4,1391,4,"_stop"],[1988,9,1391,9,"_stop"],[1988,10,1391,9],[1988,12,1391,12],[1989,6,1392,8],[1989,10,1392,12],[1989,11,1392,13],[1989,15,1392,17],[1989,16,1392,18,"isRunning"],[1989,25,1392,27],[1989,27,1392,29],[1990,8,1393,12],[1991,6,1394,8],[1992,6,1395,8],[1992,10,1395,12],[1992,11,1395,13,"isRunning"],[1992,20,1395,22],[1992,23,1395,25],[1992,28,1395,30],[1993,6,1396,8],[1993,10,1396,12],[1993,14,1396,16],[1993,15,1396,17,"timerId"],[1993,22,1396,24],[1993,27,1396,29],[1993,31,1396,33],[1993,33,1396,35],[1994,8,1397,12,"clearTimeout"],[1994,20,1397,24],[1994,21,1397,25],[1994,25,1397,29],[1994,26,1397,30,"timerId"],[1994,33,1397,37],[1994,34,1397,38],[1995,6,1398,8],[1996,4,1399,4],[1997,4,1400,4,"getInterval"],[1997,15,1400,15,"getInterval"],[1997,16,1400,16,"wasError"],[1997,24,1400,24],[1997,26,1400,26],[1998,6,1401,8],[1998,10,1401,12,"wasError"],[1998,18,1401,20],[1998,20,1401,22],[1999,8,1402,12],[1999,14,1402,18,"interval"],[1999,22,1402,26],[1999,25,1402,29],[1999,29,1402,33],[1999,30,1402,34,"errorBackoff"],[1999,42,1402,46],[2000,8,1403,12],[2000,12,1403,16],[2000,13,1403,17,"errorBackoff"],[2000,25,1403,29],[2000,28,1403,32,"Math"],[2000,32,1403,36],[2000,33,1403,37,"min"],[2000,36,1403,40],[2000,37,1403,41],[2000,41,1403,45],[2000,42,1403,46,"errorBackoff"],[2000,54,1403,58],[2000,57,1403,61],[2000,58,1403,62],[2000,60,1403,64],[2000,66,1403,70],[2000,67,1403,71],[2000,99,1403,103],[2000,100,1403,104],[2001,8,1404,12],[2001,15,1404,19,"interval"],[2001,23,1404,27],[2002,6,1405,8],[2002,7,1405,9],[2002,13,1406,13],[2003,8,1407,12],[2004,8,1408,12],[2004,12,1408,16],[2004,13,1408,17,"errorBackoff"],[2004,25,1408,29],[2004,28,1408,32],[2004,33,1408,37],[2004,34,1408,38],[2005,8,1409,12],[2005,14,1409,18,"expTime"],[2005,21,1409,25],[2005,24,1409,28],[2005,28,1409,32],[2005,29,1409,33,"user"],[2005,33,1409,37],[2005,34,1409,38,"stsTokenManager"],[2005,49,1409,53],[2005,50,1409,54,"expirationTime"],[2005,64,1409,68],[2005,68,1409,72],[2005,69,1409,73],[2006,8,1410,12],[2006,14,1410,18,"interval"],[2006,22,1410,26],[2006,25,1410,29,"expTime"],[2006,32,1410,36],[2006,35,1410,39,"Date"],[2006,39,1410,43],[2006,40,1410,44,"now"],[2006,43,1410,47],[2006,44,1410,48],[2006,45,1410,49],[2006,48,1410,52],[2006,54,1410,58],[2006,55,1410,59],[2007,8,1411,12],[2007,15,1411,19,"Math"],[2007,19,1411,23],[2007,20,1411,24,"max"],[2007,23,1411,27],[2007,24,1411,28],[2007,25,1411,29],[2007,27,1411,31,"interval"],[2007,35,1411,39],[2007,36,1411,40],[2008,6,1412,8],[2009,4,1413,4],[2010,4,1414,4,"schedule"],[2010,12,1414,12,"schedule"],[2010,13,1414,13,"wasError"],[2010,21,1414,21],[2010,24,1414,24],[2010,29,1414,29],[2010,31,1414,31],[2011,6,1415,8],[2011,10,1415,12],[2011,11,1415,13],[2011,15,1415,17],[2011,16,1415,18,"isRunning"],[2011,25,1415,27],[2011,27,1415,29],[2012,8,1416,12],[2013,8,1417,12],[2014,6,1418,8],[2015,6,1419,8],[2015,12,1419,14,"interval"],[2015,20,1419,22],[2015,23,1419,25],[2015,27,1419,29],[2015,28,1419,30,"getInterval"],[2015,39,1419,41],[2015,40,1419,42,"wasError"],[2015,48,1419,50],[2015,49,1419,51],[2016,6,1420,8],[2016,10,1420,12],[2016,11,1420,13,"timerId"],[2016,18,1420,20],[2016,21,1420,23,"setTimeout"],[2016,31,1420,33],[2016,32,1420,34],[2016,44,1420,46],[2017,8,1421,12],[2017,14,1421,18],[2017,18,1421,22],[2017,19,1421,23,"iteration"],[2017,28,1421,32],[2017,29,1421,33],[2017,30,1421,34],[2018,6,1422,8],[2018,7,1422,9],[2018,9,1422,11,"interval"],[2018,17,1422,19],[2018,18,1422,20],[2019,4,1423,4],[2020,4,1424,4],[2020,10,1424,10,"iteration"],[2020,19,1424,19,"iteration"],[2020,20,1424,19],[2020,22,1424,22],[2021,6,1425,8],[2021,10,1425,12],[2022,8,1426,12],[2022,14,1426,18],[2022,18,1426,22],[2022,19,1426,23,"user"],[2022,23,1426,27],[2022,24,1426,28,"getIdToken"],[2022,34,1426,38],[2022,35,1426,39],[2022,39,1426,43],[2022,40,1426,44],[2023,6,1427,8],[2023,7,1427,9],[2023,8,1428,8],[2023,15,1428,15,"e"],[2023,16,1428,16],[2023,18,1428,18],[2024,8,1429,12],[2025,8,1430,12],[2025,12,1430,16,"e"],[2025,13,1430,17],[2025,15,1430,19,"code"],[2025,19,1430,23],[2025,24,1431,16],[2025,32,1431,24],[2025,56,1431,48],[2025,57,1431,49],[2025,101,1431,93],[2025,103,1431,95],[2026,10,1432,16],[2026,14,1432,20],[2026,15,1432,21,"schedule"],[2026,23,1432,29],[2026,24,1432,30],[2026,38,1432,45],[2026,42,1432,49],[2026,43,1432,50],[2027,8,1433,12],[2028,8,1434,12],[2029,6,1435,8],[2030,6,1436,8],[2030,10,1436,12],[2030,11,1436,13,"schedule"],[2030,19,1436,21],[2030,20,1436,22],[2030,21,1436,23],[2031,4,1437,4],[2032,2,1438,0],[2034,2,1440,0],[2035,0,1441,0],[2036,0,1442,0],[2037,0,1443,0],[2038,0,1444,0],[2039,0,1445,0],[2040,0,1446,0],[2041,0,1447,0],[2042,0,1448,0],[2043,0,1449,0],[2044,0,1450,0],[2045,0,1451,0],[2046,0,1452,0],[2047,0,1453,0],[2048,0,1454,0],[2049,0,1455,0],[2050,2,1456,0],[2050,8,1456,6,"UserMetadata"],[2050,20,1456,18],[2050,21,1456,19],[2051,4,1457,4,"constructor"],[2051,15,1457,15,"constructor"],[2051,16,1457,16,"createdAt"],[2051,25,1457,25],[2051,27,1457,27,"lastLoginAt"],[2051,38,1457,38],[2051,40,1457,40],[2052,6,1458,8],[2052,10,1458,12],[2052,11,1458,13,"createdAt"],[2052,20,1458,22],[2052,23,1458,25,"createdAt"],[2052,32,1458,34],[2053,6,1459,8],[2053,10,1459,12],[2053,11,1459,13,"lastLoginAt"],[2053,22,1459,24],[2053,25,1459,27,"lastLoginAt"],[2053,36,1459,38],[2054,6,1460,8],[2054,10,1460,12],[2054,11,1460,13,"_initializeTime"],[2054,26,1460,28],[2054,27,1460,29],[2054,28,1460,30],[2055,4,1461,4],[2056,4,1462,4,"_initializeTime"],[2056,19,1462,19,"_initializeTime"],[2056,20,1462,19],[2056,22,1462,22],[2057,6,1463,8],[2057,10,1463,12],[2057,11,1463,13,"lastSignInTime"],[2057,25,1463,27],[2057,28,1463,30,"utcTimestampToDateString"],[2057,52,1463,54],[2057,53,1463,55],[2057,57,1463,59],[2057,58,1463,60,"lastLoginAt"],[2057,69,1463,71],[2057,70,1463,72],[2058,6,1464,8],[2058,10,1464,12],[2058,11,1464,13,"creationTime"],[2058,23,1464,25],[2058,26,1464,28,"utcTimestampToDateString"],[2058,50,1464,52],[2058,51,1464,53],[2058,55,1464,57],[2058,56,1464,58,"createdAt"],[2058,65,1464,67],[2058,66,1464,68],[2059,4,1465,4],[2060,4,1466,4,"_copy"],[2060,9,1466,9,"_copy"],[2060,10,1466,10,"metadata"],[2060,18,1466,18],[2060,20,1466,20],[2061,6,1467,8],[2061,10,1467,12],[2061,11,1467,13,"createdAt"],[2061,20,1467,22],[2061,23,1467,25,"metadata"],[2061,31,1467,33],[2061,32,1467,34,"createdAt"],[2061,41,1467,43],[2062,6,1468,8],[2062,10,1468,12],[2062,11,1468,13,"lastLoginAt"],[2062,22,1468,24],[2062,25,1468,27,"metadata"],[2062,33,1468,35],[2062,34,1468,36,"lastLoginAt"],[2062,45,1468,47],[2063,6,1469,8],[2063,10,1469,12],[2063,11,1469,13,"_initializeTime"],[2063,26,1469,28],[2063,27,1469,29],[2063,28,1469,30],[2064,4,1470,4],[2065,4,1471,4,"toJSON"],[2065,10,1471,10,"toJSON"],[2065,11,1471,10],[2065,13,1471,13],[2066,6,1472,8],[2066,13,1472,15],[2067,8,1473,12,"createdAt"],[2067,17,1473,21],[2067,19,1473,23],[2067,23,1473,27],[2067,24,1473,28,"createdAt"],[2067,33,1473,37],[2068,8,1474,12,"lastLoginAt"],[2068,19,1474,23],[2068,21,1474,25],[2068,25,1474,29],[2068,26,1474,30,"lastLoginAt"],[2069,6,1475,8],[2069,7,1475,9],[2070,4,1476,4],[2071,2,1477,0],[2073,2,1479,0],[2074,0,1480,0],[2075,0,1481,0],[2076,0,1482,0],[2077,0,1483,0],[2078,0,1484,0],[2079,0,1485,0],[2080,0,1486,0],[2081,0,1487,0],[2082,0,1488,0],[2083,0,1489,0],[2084,0,1490,0],[2085,0,1491,0],[2086,0,1492,0],[2087,0,1493,0],[2088,0,1494,0],[2089,2,1495,0],[2089,17,1495,15,"_reloadWithoutSaving"],[2089,37,1495,35,"_reloadWithoutSaving"],[2089,38,1495,36,"user"],[2089,42,1495,40],[2089,44,1495,42],[2090,4,1496,4],[2090,10,1496,10,"auth"],[2090,14,1496,14],[2090,17,1496,17,"user"],[2090,21,1496,21],[2090,22,1496,22,"auth"],[2090,26,1496,26],[2091,4,1497,4],[2091,10,1497,10,"idToken"],[2091,17,1497,17],[2091,20,1497,20],[2091,26,1497,26,"user"],[2091,30,1497,30],[2091,31,1497,31,"getIdToken"],[2091,41,1497,41],[2091,42,1497,42],[2091,43,1497,43],[2092,4,1498,4],[2092,10,1498,10,"response"],[2092,18,1498,18],[2092,21,1498,21],[2092,27,1498,27,"_logoutIfInvalidated"],[2092,47,1498,47],[2092,48,1498,48,"user"],[2092,52,1498,52],[2092,54,1498,54,"getAccountInfo"],[2092,68,1498,68],[2092,69,1498,69,"auth"],[2092,73,1498,73],[2092,75,1498,75],[2093,6,1498,77,"idToken"],[2094,4,1498,85],[2094,5,1498,86],[2094,6,1498,87],[2094,7,1498,88],[2095,4,1499,4,"_assert"],[2095,11,1499,11],[2095,12,1499,12,"response"],[2095,20,1499,20],[2095,22,1499,22,"users"],[2095,27,1499,27],[2095,28,1499,28,"length"],[2095,34,1499,34],[2095,36,1499,36,"auth"],[2095,40,1499,40],[2095,42,1499,42],[2095,58,1499,58],[2095,59,1499,59],[2095,93,1499,93],[2095,94,1499,94],[2096,4,1500,4],[2096,10,1500,10,"coreAccount"],[2096,21,1500,21],[2096,24,1500,24,"response"],[2096,32,1500,32],[2096,33,1500,33,"users"],[2096,38,1500,38],[2096,39,1500,39],[2096,40,1500,40],[2096,41,1500,41],[2097,4,1501,4,"user"],[2097,8,1501,8],[2097,9,1501,9,"_notifyReloadListener"],[2097,30,1501,30],[2097,31,1501,31,"coreAccount"],[2097,42,1501,42],[2097,43,1501,43],[2098,4,1502,4],[2098,10,1502,10,"newProviderData"],[2098,25,1502,25],[2098,28,1502,28,"coreAccount"],[2098,39,1502,39],[2098,40,1502,40,"providerUserInfo"],[2098,56,1502,56],[2098,58,1502,58,"length"],[2098,64,1502,64],[2098,67,1503,10,"extractProviderData"],[2098,86,1503,29],[2098,87,1503,30,"coreAccount"],[2098,98,1503,41],[2098,99,1503,42,"providerUserInfo"],[2098,115,1503,58],[2098,116,1503,59],[2098,119,1504,10],[2098,121,1504,12],[2099,4,1505,4],[2099,10,1505,10,"providerData"],[2099,22,1505,22],[2099,25,1505,25,"mergeProviderData"],[2099,42,1505,42],[2099,43,1505,43,"user"],[2099,47,1505,47],[2099,48,1505,48,"providerData"],[2099,60,1505,60],[2099,62,1505,62,"newProviderData"],[2099,77,1505,77],[2099,78,1505,78],[2100,4,1506,4],[2101,4,1507,4],[2102,4,1508,4],[2103,4,1509,4],[2104,4,1510,4],[2105,4,1511,4],[2105,10,1511,10,"oldIsAnonymous"],[2105,24,1511,24],[2105,27,1511,27,"user"],[2105,31,1511,31],[2105,32,1511,32,"isAnonymous"],[2105,43,1511,43],[2106,4,1512,4],[2106,10,1512,10,"newIsAnonymous"],[2106,24,1512,24],[2106,27,1512,27],[2106,29,1512,29,"user"],[2106,33,1512,33],[2106,34,1512,34,"email"],[2106,39,1512,39],[2106,43,1512,43,"coreAccount"],[2106,54,1512,54],[2106,55,1512,55,"passwordHash"],[2106,67,1512,67],[2106,68,1512,68],[2106,72,1512,72],[2106,73,1512,73,"providerData"],[2106,85,1512,85],[2106,87,1512,87,"length"],[2106,93,1512,93],[2107,4,1513,4],[2107,10,1513,10,"isAnonymous"],[2107,21,1513,21],[2107,24,1513,24],[2107,25,1513,25,"oldIsAnonymous"],[2107,39,1513,39],[2107,42,1513,42],[2107,47,1513,47],[2107,50,1513,50,"newIsAnonymous"],[2107,64,1513,64],[2108,4,1514,4],[2108,10,1514,10,"updates"],[2108,17,1514,17],[2108,20,1514,20],[2109,6,1515,8,"uid"],[2109,9,1515,11],[2109,11,1515,13,"coreAccount"],[2109,22,1515,24],[2109,23,1515,25,"localId"],[2109,30,1515,32],[2110,6,1516,8,"displayName"],[2110,17,1516,19],[2110,19,1516,21,"coreAccount"],[2110,30,1516,32],[2110,31,1516,33,"displayName"],[2110,42,1516,44],[2110,46,1516,48],[2110,50,1516,52],[2111,6,1517,8,"photoURL"],[2111,14,1517,16],[2111,16,1517,18,"coreAccount"],[2111,27,1517,29],[2111,28,1517,30,"photoUrl"],[2111,36,1517,38],[2111,40,1517,42],[2111,44,1517,46],[2112,6,1518,8,"email"],[2112,11,1518,13],[2112,13,1518,15,"coreAccount"],[2112,24,1518,26],[2112,25,1518,27,"email"],[2112,30,1518,32],[2112,34,1518,36],[2112,38,1518,40],[2113,6,1519,8,"emailVerified"],[2113,19,1519,21],[2113,21,1519,23,"coreAccount"],[2113,32,1519,34],[2113,33,1519,35,"emailVerified"],[2113,46,1519,48],[2113,50,1519,52],[2113,55,1519,57],[2114,6,1520,8,"phoneNumber"],[2114,17,1520,19],[2114,19,1520,21,"coreAccount"],[2114,30,1520,32],[2114,31,1520,33,"phoneNumber"],[2114,42,1520,44],[2114,46,1520,48],[2114,50,1520,52],[2115,6,1521,8,"tenantId"],[2115,14,1521,16],[2115,16,1521,18,"coreAccount"],[2115,27,1521,29],[2115,28,1521,30,"tenantId"],[2115,36,1521,38],[2115,40,1521,42],[2115,44,1521,46],[2116,6,1522,8,"providerData"],[2116,18,1522,20],[2117,6,1523,8,"metadata"],[2117,14,1523,16],[2117,16,1523,18],[2117,20,1523,22,"UserMetadata"],[2117,32,1523,34],[2117,33,1523,35,"coreAccount"],[2117,44,1523,46],[2117,45,1523,47,"createdAt"],[2117,54,1523,56],[2117,56,1523,58,"coreAccount"],[2117,67,1523,69],[2117,68,1523,70,"lastLoginAt"],[2117,79,1523,81],[2117,80,1523,82],[2118,6,1524,8,"isAnonymous"],[2119,4,1525,4],[2119,5,1525,5],[2120,4,1526,4,"Object"],[2120,10,1526,10],[2120,11,1526,11,"assign"],[2120,17,1526,17],[2120,18,1526,18,"user"],[2120,22,1526,22],[2120,24,1526,24,"updates"],[2120,31,1526,31],[2120,32,1526,32],[2121,2,1527,0],[2122,2,1528,0],[2123,0,1529,0],[2124,0,1530,0],[2125,0,1531,0],[2126,0,1532,0],[2127,0,1533,0],[2128,0,1534,0],[2129,2,1535,0],[2129,17,1535,15,"reload"],[2129,23,1535,21,"reload"],[2129,24,1535,22,"user"],[2129,28,1535,26],[2129,30,1535,28],[2130,4,1536,4],[2130,10,1536,10,"userInternal"],[2130,22,1536,22],[2130,25,1536,25],[2130,29,1536,25,"getModularInstance"],[2130,42,1536,43],[2130,43,1536,43,"getModularInstance"],[2130,61,1536,43],[2130,63,1536,44,"user"],[2130,67,1536,48],[2130,68,1536,49],[2131,4,1537,4],[2131,10,1537,10,"_reloadWithoutSaving"],[2131,30,1537,30],[2131,31,1537,31,"userInternal"],[2131,43,1537,43],[2131,44,1537,44],[2132,4,1538,4],[2133,4,1539,4],[2134,4,1540,4],[2135,4,1541,4],[2135,10,1541,10,"userInternal"],[2135,22,1541,22],[2135,23,1541,23,"auth"],[2135,27,1541,27],[2135,28,1541,28,"_persistUserIfCurrent"],[2135,49,1541,49],[2135,50,1541,50,"userInternal"],[2135,62,1541,62],[2135,63,1541,63],[2136,4,1542,4,"userInternal"],[2136,16,1542,16],[2136,17,1542,17,"auth"],[2136,21,1542,21],[2136,22,1542,22,"_notifyListenersIfCurrent"],[2136,47,1542,47],[2136,48,1542,48,"userInternal"],[2136,60,1542,60],[2136,61,1542,61],[2137,2,1543,0],[2138,2,1544,0],[2138,11,1544,9,"mergeProviderData"],[2138,28,1544,26,"mergeProviderData"],[2138,29,1544,27,"original"],[2138,37,1544,35],[2138,39,1544,37,"newData"],[2138,46,1544,44],[2138,48,1544,46],[2139,4,1545,4],[2139,10,1545,10,"deduped"],[2139,17,1545,17],[2139,20,1545,20,"original"],[2139,28,1545,28],[2139,29,1545,29,"filter"],[2139,35,1545,35],[2139,36,1545,36,"o"],[2139,37,1545,37],[2139,41,1545,41],[2139,42,1545,42,"newData"],[2139,49,1545,49],[2139,50,1545,50,"some"],[2139,54,1545,54],[2139,55,1545,55,"n"],[2139,56,1545,56],[2139,60,1545,60,"n"],[2139,61,1545,61],[2139,62,1545,62,"providerId"],[2139,72,1545,72],[2139,77,1545,77,"o"],[2139,78,1545,78],[2139,79,1545,79,"providerId"],[2139,89,1545,89],[2139,90,1545,90],[2139,91,1545,91],[2140,4,1546,4],[2140,11,1546,11],[2140,12,1546,12],[2140,15,1546,15,"deduped"],[2140,22,1546,22],[2140,24,1546,24],[2140,27,1546,27,"newData"],[2140,34,1546,34],[2140,35,1546,35],[2141,2,1547,0],[2142,2,1548,0],[2142,11,1548,9,"extractProviderData"],[2142,30,1548,28,"extractProviderData"],[2142,31,1548,29,"providers"],[2142,40,1548,38],[2142,42,1548,40],[2143,4,1549,4],[2143,11,1549,11,"providers"],[2143,20,1549,20],[2143,21,1549,21,"map"],[2143,24,1549,24],[2143,25,1549,25,"_ref"],[2143,29,1549,25],[2143,33,1549,58],[2144,6,1549,58],[2144,10,1549,26],[2145,10,1549,28,"providerId"],[2146,8,1549,52],[2146,9,1549,53],[2146,12,1549,53,"_ref"],[2146,16,1549,53],[2147,8,1549,43,"provider"],[2147,16,1549,51],[2147,23,1549,51,"_objectWithoutPropertiesLoose"],[2147,52,1549,51],[2147,53,1549,51,"default"],[2147,60,1549,51],[2147,62,1549,51,"_ref"],[2147,66,1549,51],[2147,68,1549,51,"_excluded"],[2147,77,1549,51],[2148,6,1550,8],[2148,13,1550,15],[2149,8,1551,12,"providerId"],[2149,18,1551,22],[2150,8,1552,12,"uid"],[2150,11,1552,15],[2150,13,1552,17,"provider"],[2150,21,1552,25],[2150,22,1552,26,"rawId"],[2150,27,1552,31],[2150,31,1552,35],[2150,33,1552,37],[2151,8,1553,12,"displayName"],[2151,19,1553,23],[2151,21,1553,25,"provider"],[2151,29,1553,33],[2151,30,1553,34,"displayName"],[2151,41,1553,45],[2151,45,1553,49],[2151,49,1553,53],[2152,8,1554,12,"email"],[2152,13,1554,17],[2152,15,1554,19,"provider"],[2152,23,1554,27],[2152,24,1554,28,"email"],[2152,29,1554,33],[2152,33,1554,37],[2152,37,1554,41],[2153,8,1555,12,"phoneNumber"],[2153,19,1555,23],[2153,21,1555,25,"provider"],[2153,29,1555,33],[2153,30,1555,34,"phoneNumber"],[2153,41,1555,45],[2153,45,1555,49],[2153,49,1555,53],[2154,8,1556,12,"photoURL"],[2154,16,1556,20],[2154,18,1556,22,"provider"],[2154,26,1556,30],[2154,27,1556,31,"photoUrl"],[2154,35,1556,39],[2154,39,1556,43],[2155,6,1557,8],[2155,7,1557,9],[2156,4,1558,4],[2156,5,1558,5],[2156,6,1558,6],[2157,2,1559,0],[2159,2,1561,0],[2160,0,1562,0],[2161,0,1563,0],[2162,0,1564,0],[2163,0,1565,0],[2164,0,1566,0],[2165,0,1567,0],[2166,0,1568,0],[2167,0,1569,0],[2168,0,1570,0],[2169,0,1571,0],[2170,0,1572,0],[2171,0,1573,0],[2172,0,1574,0],[2173,0,1575,0],[2174,0,1576,0],[2175,2,1577,0],[2175,17,1577,15,"requestStsToken"],[2175,32,1577,30,"requestStsToken"],[2175,33,1577,31,"auth"],[2175,37,1577,35],[2175,39,1577,37,"refreshToken"],[2175,51,1577,49],[2175,53,1577,51],[2176,4,1578,4],[2176,10,1578,10,"response"],[2176,18,1578,18],[2176,21,1578,21],[2176,27,1578,27,"_performFetchWithErrorHandling"],[2176,57,1578,57],[2176,58,1578,58,"auth"],[2176,62,1578,62],[2176,64,1578,64],[2176,65,1578,65],[2176,66,1578,66],[2176,68,1578,68],[2176,80,1578,80],[2177,6,1579,8],[2177,12,1579,14,"body"],[2177,16,1579,18],[2177,19,1579,21],[2177,23,1579,21,"querystring"],[2177,36,1579,32],[2177,37,1579,32,"querystring"],[2177,48,1579,32],[2177,50,1579,33],[2178,8,1580,12],[2178,20,1580,24],[2178,22,1580,26],[2178,37,1580,41],[2179,8,1581,12],[2179,23,1581,27],[2179,25,1581,29,"refreshToken"],[2180,6,1582,8],[2180,7,1582,9],[2180,8,1582,10],[2180,9,1582,11,"slice"],[2180,14,1582,16],[2180,15,1582,17],[2180,16,1582,18],[2180,17,1582,19],[2181,6,1583,8],[2181,12,1583,14],[2182,8,1583,16,"tokenApiHost"],[2182,20,1583,28],[2183,8,1583,30,"apiKey"],[2184,6,1583,37],[2184,7,1583,38],[2184,10,1583,41,"auth"],[2184,14,1583,45],[2184,15,1583,46,"config"],[2184,21,1583,52],[2185,6,1584,8],[2185,12,1584,14,"url"],[2185,15,1584,17],[2185,18,1584,20],[2185,24,1584,26,"_getFinalTarget"],[2185,39,1584,41],[2185,40,1584,42,"auth"],[2185,44,1584,46],[2185,46,1584,48,"tokenApiHost"],[2185,58,1584,60],[2185,60,1584,62],[2185,71,1584,73],[2185,72,1584,74],[2185,94,1584,96],[2185,101,1584,103,"apiKey"],[2185,107,1584,109],[2185,109,1584,111],[2185,110,1584,112],[2186,6,1585,8],[2186,12,1585,14,"headers"],[2186,19,1585,21],[2186,22,1585,24],[2186,28,1585,30,"auth"],[2186,32,1585,34],[2186,33,1585,35,"_getAdditionalHeaders"],[2186,54,1585,56],[2186,55,1585,57],[2186,56,1585,58],[2187,6,1586,8,"headers"],[2187,13,1586,15],[2187,14,1586,16],[2187,28,1586,30],[2187,29,1586,31],[2187,59,1586,61],[2187,62,1586,64],[2187,97,1586,99],[2188,6,1587,8],[2188,12,1587,14,"options"],[2188,19,1587,21],[2188,22,1587,24],[2189,8,1588,12,"method"],[2189,14,1588,18],[2189,16,1588,20],[2189,22,1588,26],[2189,23,1588,27],[2190,8,1589,12,"headers"],[2190,15,1589,19],[2191,8,1590,12,"body"],[2192,6,1591,8],[2192,7,1591,9],[2193,6,1592,8],[2193,10,1592,12,"auth"],[2193,14,1592,16],[2193,15,1592,17,"emulatorConfig"],[2193,29,1592,31],[2193,33,1593,12],[2193,37,1593,12,"isCloudWorkstation"],[2193,50,1593,30],[2193,51,1593,30,"isCloudWorkstation"],[2193,69,1593,30],[2193,71,1593,31,"auth"],[2193,75,1593,35],[2193,76,1593,36,"emulatorConfig"],[2193,90,1593,50],[2193,91,1593,51,"host"],[2193,95,1593,55],[2193,96,1593,56],[2193,98,1593,58],[2194,8,1594,12,"options"],[2194,15,1594,19],[2194,16,1594,20,"credentials"],[2194,27,1594,31],[2194,30,1594,34],[2194,39,1594,43],[2195,6,1595,8],[2196,6,1596,8],[2196,13,1596,15,"FetchProvider"],[2196,26,1596,28],[2196,27,1596,29,"fetch"],[2196,32,1596,34],[2196,33,1596,35],[2196,34,1596,36],[2196,35,1596,37,"url"],[2196,38,1596,40],[2196,40,1596,42,"options"],[2196,47,1596,49],[2196,48,1596,50],[2197,4,1597,4],[2197,5,1597,5],[2197,6,1597,6],[2198,4,1598,4],[2199,4,1599,4],[2199,11,1599,11],[2200,6,1600,8,"accessToken"],[2200,17,1600,19],[2200,19,1600,21,"response"],[2200,27,1600,29],[2200,28,1600,30,"access_token"],[2200,40,1600,42],[2201,6,1601,8,"expiresIn"],[2201,15,1601,17],[2201,17,1601,19,"response"],[2201,25,1601,27],[2201,26,1601,28,"expires_in"],[2201,36,1601,38],[2202,6,1602,8,"refreshToken"],[2202,18,1602,20],[2202,20,1602,22,"response"],[2202,28,1602,30],[2202,29,1602,31,"refresh_token"],[2203,4,1603,4],[2203,5,1603,5],[2204,2,1604,0],[2205,2,1605,0],[2205,17,1605,15,"revokeToken"],[2205,28,1605,26,"revokeToken"],[2205,29,1605,27,"auth"],[2205,33,1605,31],[2205,35,1605,33,"request"],[2205,42,1605,40],[2205,44,1605,42],[2206,4,1606,4],[2206,11,1606,11,"_performApiRequest"],[2206,29,1606,29],[2206,30,1606,30,"auth"],[2206,34,1606,34],[2206,36,1606,36],[2206,42,1606,42],[2206,43,1606,43],[2206,66,1606,66],[2206,92,1606,92],[2206,93,1606,93],[2206,122,1606,122,"_addTidIfNecessary"],[2206,140,1606,140],[2206,141,1606,141,"auth"],[2206,145,1606,145],[2206,147,1606,147,"request"],[2206,154,1606,154],[2206,155,1606,155],[2206,156,1606,156],[2207,2,1607,0],[2209,2,1609,0],[2210,0,1610,0],[2211,0,1611,0],[2212,0,1612,0],[2213,0,1613,0],[2214,0,1614,0],[2215,0,1615,0],[2216,0,1616,0],[2217,0,1617,0],[2218,0,1618,0],[2219,0,1619,0],[2220,0,1620,0],[2221,0,1621,0],[2222,0,1622,0],[2223,0,1623,0],[2224,0,1624,0],[2225,2,1625,0],[2226,0,1626,0],[2227,0,1627,0],[2228,0,1628,0],[2229,0,1629,0],[2230,0,1630,0],[2231,2,1631,0],[2231,8,1631,6,"StsTokenManager"],[2231,23,1631,21],[2231,24,1631,22],[2232,4,1632,4,"constructor"],[2232,15,1632,15,"constructor"],[2232,16,1632,15],[2232,18,1632,18],[2233,6,1633,8],[2233,10,1633,12],[2233,11,1633,13,"refreshToken"],[2233,23,1633,25],[2233,26,1633,28],[2233,30,1633,32],[2234,6,1634,8],[2234,10,1634,12],[2234,11,1634,13,"accessToken"],[2234,22,1634,24],[2234,25,1634,27],[2234,29,1634,31],[2235,6,1635,8],[2235,10,1635,12],[2235,11,1635,13,"expirationTime"],[2235,25,1635,27],[2235,28,1635,30],[2235,32,1635,34],[2236,4,1636,4],[2237,4,1637,4],[2237,8,1637,8,"isExpired"],[2237,17,1637,17,"isExpired"],[2237,18,1637,17],[2237,20,1637,20],[2238,6,1638,8],[2238,13,1638,16],[2238,14,1638,17],[2238,18,1638,21],[2238,19,1638,22,"expirationTime"],[2238,33,1638,36],[2238,37,1639,12,"Date"],[2238,41,1639,16],[2238,42,1639,17,"now"],[2238,45,1639,20],[2238,46,1639,21],[2238,47,1639,22],[2238,50,1639,25],[2238,54,1639,29],[2238,55,1639,30,"expirationTime"],[2238,69,1639,44],[2238,72,1639,47],[2238,77,1639,52],[2238,78,1639,53],[2239,4,1640,4],[2240,4,1641,4,"updateFromServerResponse"],[2240,28,1641,28,"updateFromServerResponse"],[2240,29,1641,29,"response"],[2240,37,1641,37],[2240,39,1641,39],[2241,6,1642,8,"_assert"],[2241,13,1642,15],[2241,14,1642,16,"response"],[2241,22,1642,24],[2241,23,1642,25,"idToken"],[2241,30,1642,32],[2241,32,1642,34],[2241,48,1642,50],[2241,49,1642,51],[2241,83,1642,85],[2241,84,1642,86],[2242,6,1643,8,"_assert"],[2242,13,1643,15],[2242,14,1643,16],[2242,21,1643,23,"response"],[2242,29,1643,31],[2242,30,1643,32,"idToken"],[2242,37,1643,39],[2242,42,1643,44],[2242,53,1643,55],[2242,55,1643,57],[2242,71,1643,73],[2242,72,1643,74],[2242,106,1643,108],[2242,107,1643,109],[2243,6,1644,8,"_assert"],[2243,13,1644,15],[2243,14,1644,16],[2243,21,1644,23,"response"],[2243,29,1644,31],[2243,30,1644,32,"refreshToken"],[2243,42,1644,44],[2243,47,1644,49],[2243,58,1644,60],[2243,60,1644,62],[2243,76,1644,78],[2243,77,1644,79],[2243,111,1644,113],[2243,112,1644,114],[2244,6,1645,8],[2244,12,1645,14,"expiresIn"],[2244,21,1645,23],[2244,24,1645,26],[2244,35,1645,37],[2244,39,1645,41,"response"],[2244,47,1645,49],[2244,51,1645,53],[2244,58,1645,60,"response"],[2244,66,1645,68],[2244,67,1645,69,"expiresIn"],[2244,76,1645,78],[2244,81,1645,83],[2244,92,1645,94],[2244,95,1646,14,"Number"],[2244,101,1646,20],[2244,102,1646,21,"response"],[2244,110,1646,29],[2244,111,1646,30,"expiresIn"],[2244,120,1646,39],[2244,121,1646,40],[2244,124,1647,14,"_tokenExpiresIn"],[2244,139,1647,29],[2244,140,1647,30,"response"],[2244,148,1647,38],[2244,149,1647,39,"idToken"],[2244,156,1647,46],[2244,157,1647,47],[2245,6,1648,8],[2245,10,1648,12],[2245,11,1648,13,"updateTokensAndExpiration"],[2245,36,1648,38],[2245,37,1648,39,"response"],[2245,45,1648,47],[2245,46,1648,48,"idToken"],[2245,53,1648,55],[2245,55,1648,57,"response"],[2245,63,1648,65],[2245,64,1648,66,"refreshToken"],[2245,76,1648,78],[2245,78,1648,80,"expiresIn"],[2245,87,1648,89],[2245,88,1648,90],[2246,4,1649,4],[2247,4,1650,4,"updateFromIdToken"],[2247,21,1650,21,"updateFromIdToken"],[2247,22,1650,22,"idToken"],[2247,29,1650,29],[2247,31,1650,31],[2248,6,1651,8,"_assert"],[2248,13,1651,15],[2248,14,1651,16,"idToken"],[2248,21,1651,23],[2248,22,1651,24,"length"],[2248,28,1651,30],[2248,33,1651,35],[2248,34,1651,36],[2248,36,1651,38],[2248,52,1651,54],[2248,53,1651,55],[2248,87,1651,89],[2248,88,1651,90],[2249,6,1652,8],[2249,12,1652,14,"expiresIn"],[2249,21,1652,23],[2249,24,1652,26,"_tokenExpiresIn"],[2249,39,1652,41],[2249,40,1652,42,"idToken"],[2249,47,1652,49],[2249,48,1652,50],[2250,6,1653,8],[2250,10,1653,12],[2250,11,1653,13,"updateTokensAndExpiration"],[2250,36,1653,38],[2250,37,1653,39,"idToken"],[2250,44,1653,46],[2250,46,1653,48],[2250,50,1653,52],[2250,52,1653,54,"expiresIn"],[2250,61,1653,63],[2250,62,1653,64],[2251,4,1654,4],[2252,4,1655,4],[2252,10,1655,10,"getToken"],[2252,18,1655,18,"getToken"],[2252,19,1655,19,"auth"],[2252,23,1655,23],[2252,25,1655,25,"forceRefresh"],[2252,37,1655,37],[2252,40,1655,40],[2252,45,1655,45],[2252,47,1655,47],[2253,6,1656,8],[2253,10,1656,12],[2253,11,1656,13,"forceRefresh"],[2253,23,1656,25],[2253,27,1656,29],[2253,31,1656,33],[2253,32,1656,34,"accessToken"],[2253,43,1656,45],[2253,47,1656,49],[2253,48,1656,50],[2253,52,1656,54],[2253,53,1656,55,"isExpired"],[2253,62,1656,64],[2253,64,1656,66],[2254,8,1657,12],[2254,15,1657,19],[2254,19,1657,23],[2254,20,1657,24,"accessToken"],[2254,31,1657,35],[2255,6,1658,8],[2256,6,1659,8,"_assert"],[2256,13,1659,15],[2256,14,1659,16],[2256,18,1659,20],[2256,19,1659,21,"refreshToken"],[2256,31,1659,33],[2256,33,1659,35,"auth"],[2256,37,1659,39],[2256,39,1659,41],[2256,59,1659,61],[2256,60,1659,62],[2256,93,1659,95],[2256,94,1659,96],[2257,6,1660,8],[2257,10,1660,12],[2257,14,1660,16],[2257,15,1660,17,"refreshToken"],[2257,27,1660,29],[2257,29,1660,31],[2258,8,1661,12],[2258,14,1661,18],[2258,18,1661,22],[2258,19,1661,23,"refresh"],[2258,26,1661,30],[2258,27,1661,31,"auth"],[2258,31,1661,35],[2258,33,1661,37],[2258,37,1661,41],[2258,38,1661,42,"refreshToken"],[2258,50,1661,54],[2258,51,1661,55],[2259,8,1662,12],[2259,15,1662,19],[2259,19,1662,23],[2259,20,1662,24,"accessToken"],[2259,31,1662,35],[2260,6,1663,8],[2261,6,1664,8],[2261,13,1664,15],[2261,17,1664,19],[2262,4,1665,4],[2263,4,1666,4,"clearRefreshToken"],[2263,21,1666,21,"clearRefreshToken"],[2263,22,1666,21],[2263,24,1666,24],[2264,6,1667,8],[2264,10,1667,12],[2264,11,1667,13,"refreshToken"],[2264,23,1667,25],[2264,26,1667,28],[2264,30,1667,32],[2265,4,1668,4],[2266,4,1669,4],[2266,10,1669,10,"refresh"],[2266,17,1669,17,"refresh"],[2266,18,1669,18,"auth"],[2266,22,1669,22],[2266,24,1669,24,"oldToken"],[2266,32,1669,32],[2266,34,1669,34],[2267,6,1670,8],[2267,12,1670,14],[2268,8,1670,16,"accessToken"],[2268,19,1670,27],[2269,8,1670,29,"refreshToken"],[2269,20,1670,41],[2270,8,1670,43,"expiresIn"],[2271,6,1670,53],[2271,7,1670,54],[2271,10,1670,57],[2271,16,1670,63,"requestStsToken"],[2271,31,1670,78],[2271,32,1670,79,"auth"],[2271,36,1670,83],[2271,38,1670,85,"oldToken"],[2271,46,1670,93],[2271,47,1670,94],[2272,6,1671,8],[2272,10,1671,12],[2272,11,1671,13,"updateTokensAndExpiration"],[2272,36,1671,38],[2272,37,1671,39,"accessToken"],[2272,48,1671,50],[2272,50,1671,52,"refreshToken"],[2272,62,1671,64],[2272,64,1671,66,"Number"],[2272,70,1671,72],[2272,71,1671,73,"expiresIn"],[2272,80,1671,82],[2272,81,1671,83],[2272,82,1671,84],[2273,4,1672,4],[2274,4,1673,4,"updateTokensAndExpiration"],[2274,29,1673,29,"updateTokensAndExpiration"],[2274,30,1673,30,"accessToken"],[2274,41,1673,41],[2274,43,1673,43,"refreshToken"],[2274,55,1673,55],[2274,57,1673,57,"expiresInSec"],[2274,69,1673,69],[2274,71,1673,71],[2275,6,1674,8],[2275,10,1674,12],[2275,11,1674,13,"refreshToken"],[2275,23,1674,25],[2275,26,1674,28,"refreshToken"],[2275,38,1674,40],[2275,42,1674,44],[2275,46,1674,48],[2276,6,1675,8],[2276,10,1675,12],[2276,11,1675,13,"accessToken"],[2276,22,1675,24],[2276,25,1675,27,"accessToken"],[2276,36,1675,38],[2276,40,1675,42],[2276,44,1675,46],[2277,6,1676,8],[2277,10,1676,12],[2277,11,1676,13,"expirationTime"],[2277,25,1676,27],[2277,28,1676,30,"Date"],[2277,32,1676,34],[2277,33,1676,35,"now"],[2277,36,1676,38],[2277,37,1676,39],[2277,38,1676,40],[2277,41,1676,43,"expiresInSec"],[2277,53,1676,55],[2277,56,1676,58],[2277,60,1676,62],[2278,4,1677,4],[2279,4,1678,4],[2279,11,1678,11,"fromJSON"],[2279,19,1678,19,"fromJSON"],[2279,20,1678,20,"appName"],[2279,27,1678,27],[2279,29,1678,29,"object"],[2279,35,1678,35],[2279,37,1678,37],[2280,6,1679,8],[2280,12,1679,14],[2281,8,1679,16,"refreshToken"],[2281,20,1679,28],[2282,8,1679,30,"accessToken"],[2282,19,1679,41],[2283,8,1679,43,"expirationTime"],[2284,6,1679,58],[2284,7,1679,59],[2284,10,1679,62,"object"],[2284,16,1679,68],[2285,6,1680,8],[2285,12,1680,14,"manager"],[2285,19,1680,21],[2285,22,1680,24],[2285,26,1680,28,"StsTokenManager"],[2285,41,1680,43],[2285,42,1680,44],[2285,43,1680,45],[2286,6,1681,8],[2286,10,1681,12,"refreshToken"],[2286,22,1681,24],[2286,24,1681,26],[2287,8,1682,12,"_assert"],[2287,15,1682,19],[2287,16,1682,20],[2287,23,1682,27,"refreshToken"],[2287,35,1682,39],[2287,40,1682,44],[2287,48,1682,52],[2287,50,1682,54],[2287,66,1682,70],[2287,67,1682,71],[2287,103,1682,107],[2288,10,1683,16,"appName"],[2289,8,1684,12],[2289,9,1684,13],[2289,10,1684,14],[2290,8,1685,12,"manager"],[2290,15,1685,19],[2290,16,1685,20,"refreshToken"],[2290,28,1685,32],[2290,31,1685,35,"refreshToken"],[2290,43,1685,47],[2291,6,1686,8],[2292,6,1687,8],[2292,10,1687,12,"accessToken"],[2292,21,1687,23],[2292,23,1687,25],[2293,8,1688,12,"_assert"],[2293,15,1688,19],[2293,16,1688,20],[2293,23,1688,27,"accessToken"],[2293,34,1688,38],[2293,39,1688,43],[2293,47,1688,51],[2293,49,1688,53],[2293,65,1688,69],[2293,66,1688,70],[2293,102,1688,106],[2294,10,1689,16,"appName"],[2295,8,1690,12],[2295,9,1690,13],[2295,10,1690,14],[2296,8,1691,12,"manager"],[2296,15,1691,19],[2296,16,1691,20,"accessToken"],[2296,27,1691,31],[2296,30,1691,34,"accessToken"],[2296,41,1691,45],[2297,6,1692,8],[2298,6,1693,8],[2298,10,1693,12,"expirationTime"],[2298,24,1693,26],[2298,26,1693,28],[2299,8,1694,12,"_assert"],[2299,15,1694,19],[2299,16,1694,20],[2299,23,1694,27,"expirationTime"],[2299,37,1694,41],[2299,42,1694,46],[2299,50,1694,54],[2299,52,1694,56],[2299,68,1694,72],[2299,69,1694,73],[2299,105,1694,109],[2300,10,1695,16,"appName"],[2301,8,1696,12],[2301,9,1696,13],[2301,10,1696,14],[2302,8,1697,12,"manager"],[2302,15,1697,19],[2302,16,1697,20,"expirationTime"],[2302,30,1697,34],[2302,33,1697,37,"expirationTime"],[2302,47,1697,51],[2303,6,1698,8],[2304,6,1699,8],[2304,13,1699,15,"manager"],[2304,20,1699,22],[2305,4,1700,4],[2306,4,1701,4,"toJSON"],[2306,10,1701,10,"toJSON"],[2306,11,1701,10],[2306,13,1701,13],[2307,6,1702,8],[2307,13,1702,15],[2308,8,1703,12,"refreshToken"],[2308,20,1703,24],[2308,22,1703,26],[2308,26,1703,30],[2308,27,1703,31,"refreshToken"],[2308,39,1703,43],[2309,8,1704,12,"accessToken"],[2309,19,1704,23],[2309,21,1704,25],[2309,25,1704,29],[2309,26,1704,30,"accessToken"],[2309,37,1704,41],[2310,8,1705,12,"expirationTime"],[2310,22,1705,26],[2310,24,1705,28],[2310,28,1705,32],[2310,29,1705,33,"expirationTime"],[2311,6,1706,8],[2311,7,1706,9],[2312,4,1707,4],[2313,4,1708,4,"_assign"],[2313,11,1708,11,"_assign"],[2313,12,1708,12,"stsTokenManager"],[2313,27,1708,27],[2313,29,1708,29],[2314,6,1709,8],[2314,10,1709,12],[2314,11,1709,13,"accessToken"],[2314,22,1709,24],[2314,25,1709,27,"stsTokenManager"],[2314,40,1709,42],[2314,41,1709,43,"accessToken"],[2314,52,1709,54],[2315,6,1710,8],[2315,10,1710,12],[2315,11,1710,13,"refreshToken"],[2315,23,1710,25],[2315,26,1710,28,"stsTokenManager"],[2315,41,1710,43],[2315,42,1710,44,"refreshToken"],[2315,54,1710,56],[2316,6,1711,8],[2316,10,1711,12],[2316,11,1711,13,"expirationTime"],[2316,25,1711,27],[2316,28,1711,30,"stsTokenManager"],[2316,43,1711,45],[2316,44,1711,46,"expirationTime"],[2316,58,1711,60],[2317,4,1712,4],[2318,4,1713,4,"_clone"],[2318,10,1713,10,"_clone"],[2318,11,1713,10],[2318,13,1713,13],[2319,6,1714,8],[2319,13,1714,15,"Object"],[2319,19,1714,21],[2319,20,1714,22,"assign"],[2319,26,1714,28],[2319,27,1714,29],[2319,31,1714,33,"StsTokenManager"],[2319,46,1714,48],[2319,47,1714,49],[2319,48,1714,50],[2319,50,1714,52],[2319,54,1714,56],[2319,55,1714,57,"toJSON"],[2319,61,1714,63],[2319,62,1714,64],[2319,63,1714,65],[2319,64,1714,66],[2320,4,1715,4],[2321,4,1716,4,"_performRefresh"],[2321,19,1716,19,"_performRefresh"],[2321,20,1716,19],[2321,22,1716,22],[2322,6,1717,8],[2322,13,1717,15,"debugFail"],[2322,22,1717,24],[2322,23,1717,25],[2322,40,1717,42],[2322,41,1717,43],[2323,4,1718,4],[2324,2,1719,0],[2326,2,1721,0],[2327,0,1722,0],[2328,0,1723,0],[2329,0,1724,0],[2330,0,1725,0],[2331,0,1726,0],[2332,0,1727,0],[2333,0,1728,0],[2334,0,1729,0],[2335,0,1730,0],[2336,0,1731,0],[2337,0,1732,0],[2338,0,1733,0],[2339,0,1734,0],[2340,0,1735,0],[2341,0,1736,0],[2342,2,1737,0],[2342,11,1737,9,"assertStringOrUndefined"],[2342,34,1737,32,"assertStringOrUndefined"],[2342,35,1737,33,"assertion"],[2342,44,1737,42],[2342,46,1737,44,"appName"],[2342,53,1737,51],[2342,55,1737,53],[2343,4,1738,4,"_assert"],[2343,11,1738,11],[2343,12,1738,12],[2343,19,1738,19,"assertion"],[2343,28,1738,28],[2343,33,1738,33],[2343,41,1738,41],[2343,45,1738,45],[2343,52,1738,52,"assertion"],[2343,61,1738,61],[2343,66,1738,66],[2343,77,1738,77],[2343,79,1738,79],[2343,95,1738,95],[2343,96,1738,96],[2343,132,1738,132],[2344,6,1738,134,"appName"],[2345,4,1738,142],[2345,5,1738,143],[2345,6,1738,144],[2346,2,1739,0],[2347,2,1740,0],[2347,8,1740,6,"UserImpl"],[2347,16,1740,14],[2347,17,1740,15],[2348,4,1741,4,"constructor"],[2348,15,1741,15,"constructor"],[2348,16,1741,15,"_ref2"],[2348,21,1741,15],[2348,23,1741,56],[2349,6,1741,56],[2349,10,1741,16],[2350,10,1741,18,"uid"],[2350,13,1741,21],[2351,10,1741,23,"auth"],[2351,14,1741,27],[2352,10,1741,29,"stsTokenManager"],[2353,8,1741,53],[2353,9,1741,54],[2353,12,1741,54,"_ref2"],[2353,17,1741,54],[2354,8,1741,49,"opt"],[2354,11,1741,52],[2354,18,1741,52,"_objectWithoutPropertiesLoose"],[2354,47,1741,52],[2354,48,1741,52,"default"],[2354,55,1741,52],[2354,57,1741,52,"_ref2"],[2354,62,1741,52],[2354,64,1741,52,"_excluded2"],[2354,74,1741,52],[2355,6,1742,8],[2356,6,1743,8],[2356,10,1743,12],[2356,11,1743,13,"providerId"],[2356,21,1743,23],[2356,24,1743,26],[2356,34,1743,36],[2356,35,1743,37],[2357,6,1744,8],[2357,10,1744,12],[2357,11,1744,13,"proactiveRefresh"],[2357,27,1744,29],[2357,30,1744,32],[2357,34,1744,36,"ProactiveRefresh"],[2357,50,1744,52],[2357,51,1744,53],[2357,55,1744,57],[2357,56,1744,58],[2358,6,1745,8],[2358,10,1745,12],[2358,11,1745,13,"reloadUserInfo"],[2358,25,1745,27],[2358,28,1745,30],[2358,32,1745,34],[2359,6,1746,8],[2359,10,1746,12],[2359,11,1746,13,"reloadListener"],[2359,25,1746,27],[2359,28,1746,30],[2359,32,1746,34],[2360,6,1747,8],[2360,10,1747,12],[2360,11,1747,13,"uid"],[2360,14,1747,16],[2360,17,1747,19,"uid"],[2360,20,1747,22],[2361,6,1748,8],[2361,10,1748,12],[2361,11,1748,13,"auth"],[2361,15,1748,17],[2361,18,1748,20,"auth"],[2361,22,1748,24],[2362,6,1749,8],[2362,10,1749,12],[2362,11,1749,13,"stsTokenManager"],[2362,26,1749,28],[2362,29,1749,31,"stsTokenManager"],[2362,44,1749,46],[2363,6,1750,8],[2363,10,1750,12],[2363,11,1750,13,"accessToken"],[2363,22,1750,24],[2363,25,1750,27,"stsTokenManager"],[2363,40,1750,42],[2363,41,1750,43,"accessToken"],[2363,52,1750,54],[2364,6,1751,8],[2364,10,1751,12],[2364,11,1751,13,"displayName"],[2364,22,1751,24],[2364,25,1751,27,"opt"],[2364,28,1751,30],[2364,29,1751,31,"displayName"],[2364,40,1751,42],[2364,44,1751,46],[2364,48,1751,50],[2365,6,1752,8],[2365,10,1752,12],[2365,11,1752,13,"email"],[2365,16,1752,18],[2365,19,1752,21,"opt"],[2365,22,1752,24],[2365,23,1752,25,"email"],[2365,28,1752,30],[2365,32,1752,34],[2365,36,1752,38],[2366,6,1753,8],[2366,10,1753,12],[2366,11,1753,13,"emailVerified"],[2366,24,1753,26],[2366,27,1753,29,"opt"],[2366,30,1753,32],[2366,31,1753,33,"emailVerified"],[2366,44,1753,46],[2366,48,1753,50],[2366,53,1753,55],[2367,6,1754,8],[2367,10,1754,12],[2367,11,1754,13,"phoneNumber"],[2367,22,1754,24],[2367,25,1754,27,"opt"],[2367,28,1754,30],[2367,29,1754,31,"phoneNumber"],[2367,40,1754,42],[2367,44,1754,46],[2367,48,1754,50],[2368,6,1755,8],[2368,10,1755,12],[2368,11,1755,13,"photoURL"],[2368,19,1755,21],[2368,22,1755,24,"opt"],[2368,25,1755,27],[2368,26,1755,28,"photoURL"],[2368,34,1755,36],[2368,38,1755,40],[2368,42,1755,44],[2369,6,1756,8],[2369,10,1756,12],[2369,11,1756,13,"isAnonymous"],[2369,22,1756,24],[2369,25,1756,27,"opt"],[2369,28,1756,30],[2369,29,1756,31,"isAnonymous"],[2369,40,1756,42],[2369,44,1756,46],[2369,49,1756,51],[2370,6,1757,8],[2370,10,1757,12],[2370,11,1757,13,"tenantId"],[2370,19,1757,21],[2370,22,1757,24,"opt"],[2370,25,1757,27],[2370,26,1757,28,"tenantId"],[2370,34,1757,36],[2370,38,1757,40],[2370,42,1757,44],[2371,6,1758,8],[2371,10,1758,12],[2371,11,1758,13,"providerData"],[2371,23,1758,25],[2371,26,1758,28,"opt"],[2371,29,1758,31],[2371,30,1758,32,"providerData"],[2371,42,1758,44],[2371,45,1758,47],[2371,46,1758,48],[2371,49,1758,51,"opt"],[2371,52,1758,54],[2371,53,1758,55,"providerData"],[2371,65,1758,67],[2371,66,1758,68],[2371,69,1758,71],[2371,71,1758,73],[2372,6,1759,8],[2372,10,1759,12],[2372,11,1759,13,"metadata"],[2372,19,1759,21],[2372,22,1759,24],[2372,26,1759,28,"UserMetadata"],[2372,38,1759,40],[2372,39,1759,41,"opt"],[2372,42,1759,44],[2372,43,1759,45,"createdAt"],[2372,52,1759,54],[2372,56,1759,58,"undefined"],[2372,65,1759,67],[2372,67,1759,69,"opt"],[2372,70,1759,72],[2372,71,1759,73,"lastLoginAt"],[2372,82,1759,84],[2372,86,1759,88,"undefined"],[2372,95,1759,97],[2372,96,1759,98],[2373,4,1760,4],[2374,4,1761,4],[2374,10,1761,10,"getIdToken"],[2374,20,1761,20,"getIdToken"],[2374,21,1761,21,"forceRefresh"],[2374,33,1761,33],[2374,35,1761,35],[2375,6,1762,8],[2375,12,1762,14,"accessToken"],[2375,23,1762,25],[2375,26,1762,28],[2375,32,1762,34,"_logoutIfInvalidated"],[2375,52,1762,54],[2375,53,1762,55],[2375,57,1762,59],[2375,59,1762,61],[2375,63,1762,65],[2375,64,1762,66,"stsTokenManager"],[2375,79,1762,81],[2375,80,1762,82,"getToken"],[2375,88,1762,90],[2375,89,1762,91],[2375,93,1762,95],[2375,94,1762,96,"auth"],[2375,98,1762,100],[2375,100,1762,102,"forceRefresh"],[2375,112,1762,114],[2375,113,1762,115],[2375,114,1762,116],[2376,6,1763,8,"_assert"],[2376,13,1763,15],[2376,14,1763,16,"accessToken"],[2376,25,1763,27],[2376,27,1763,29],[2376,31,1763,33],[2376,32,1763,34,"auth"],[2376,36,1763,38],[2376,38,1763,40],[2376,54,1763,56],[2376,55,1763,57],[2376,89,1763,91],[2376,90,1763,92],[2377,6,1764,8],[2377,10,1764,12],[2377,14,1764,16],[2377,15,1764,17,"accessToken"],[2377,26,1764,28],[2377,31,1764,33,"accessToken"],[2377,42,1764,44],[2377,44,1764,46],[2378,8,1765,12],[2378,12,1765,16],[2378,13,1765,17,"accessToken"],[2378,24,1765,28],[2378,27,1765,31,"accessToken"],[2378,38,1765,42],[2379,8,1766,12],[2379,14,1766,18],[2379,18,1766,22],[2379,19,1766,23,"auth"],[2379,23,1766,27],[2379,24,1766,28,"_persistUserIfCurrent"],[2379,45,1766,49],[2379,46,1766,50],[2379,50,1766,54],[2379,51,1766,55],[2380,8,1767,12],[2380,12,1767,16],[2380,13,1767,17,"auth"],[2380,17,1767,21],[2380,18,1767,22,"_notifyListenersIfCurrent"],[2380,43,1767,47],[2380,44,1767,48],[2380,48,1767,52],[2380,49,1767,53],[2381,6,1768,8],[2382,6,1769,8],[2382,13,1769,15,"accessToken"],[2382,24,1769,26],[2383,4,1770,4],[2384,4,1771,4,"getIdTokenResult"],[2384,20,1771,20,"getIdTokenResult"],[2384,21,1771,21,"forceRefresh"],[2384,33,1771,33],[2384,35,1771,35],[2385,6,1772,8],[2385,13,1772,15,"getIdTokenResult"],[2385,29,1772,31],[2385,30,1772,32],[2385,34,1772,36],[2385,36,1772,38,"forceRefresh"],[2385,48,1772,50],[2385,49,1772,51],[2386,4,1773,4],[2387,4,1774,4,"reload"],[2387,10,1774,10,"reload"],[2387,11,1774,10],[2387,13,1774,13],[2388,6,1775,8],[2388,13,1775,15,"reload"],[2388,19,1775,21],[2388,20,1775,22],[2388,24,1775,26],[2388,25,1775,27],[2389,4,1776,4],[2390,4,1777,4,"_assign"],[2390,11,1777,11,"_assign"],[2390,12,1777,12,"user"],[2390,16,1777,16],[2390,18,1777,18],[2391,6,1778,8],[2391,10,1778,12],[2391,14,1778,16],[2391,19,1778,21,"user"],[2391,23,1778,25],[2391,25,1778,27],[2392,8,1779,12],[2393,6,1780,8],[2394,6,1781,8,"_assert"],[2394,13,1781,15],[2394,14,1781,16],[2394,18,1781,20],[2394,19,1781,21,"uid"],[2394,22,1781,24],[2394,27,1781,29,"user"],[2394,31,1781,33],[2394,32,1781,34,"uid"],[2394,35,1781,37],[2394,37,1781,39],[2394,41,1781,43],[2394,42,1781,44,"auth"],[2394,46,1781,48],[2394,48,1781,50],[2394,64,1781,66],[2394,65,1781,67],[2394,99,1781,101],[2394,100,1781,102],[2395,6,1782,8],[2395,10,1782,12],[2395,11,1782,13,"displayName"],[2395,22,1782,24],[2395,25,1782,27,"user"],[2395,29,1782,31],[2395,30,1782,32,"displayName"],[2395,41,1782,43],[2396,6,1783,8],[2396,10,1783,12],[2396,11,1783,13,"photoURL"],[2396,19,1783,21],[2396,22,1783,24,"user"],[2396,26,1783,28],[2396,27,1783,29,"photoURL"],[2396,35,1783,37],[2397,6,1784,8],[2397,10,1784,12],[2397,11,1784,13,"email"],[2397,16,1784,18],[2397,19,1784,21,"user"],[2397,23,1784,25],[2397,24,1784,26,"email"],[2397,29,1784,31],[2398,6,1785,8],[2398,10,1785,12],[2398,11,1785,13,"emailVerified"],[2398,24,1785,26],[2398,27,1785,29,"user"],[2398,31,1785,33],[2398,32,1785,34,"emailVerified"],[2398,45,1785,47],[2399,6,1786,8],[2399,10,1786,12],[2399,11,1786,13,"phoneNumber"],[2399,22,1786,24],[2399,25,1786,27,"user"],[2399,29,1786,31],[2399,30,1786,32,"phoneNumber"],[2399,41,1786,43],[2400,6,1787,8],[2400,10,1787,12],[2400,11,1787,13,"isAnonymous"],[2400,22,1787,24],[2400,25,1787,27,"user"],[2400,29,1787,31],[2400,30,1787,32,"isAnonymous"],[2400,41,1787,43],[2401,6,1788,8],[2401,10,1788,12],[2401,11,1788,13,"tenantId"],[2401,19,1788,21],[2401,22,1788,24,"user"],[2401,26,1788,28],[2401,27,1788,29,"tenantId"],[2401,35,1788,37],[2402,6,1789,8],[2402,10,1789,12],[2402,11,1789,13,"providerData"],[2402,23,1789,25],[2402,26,1789,28,"user"],[2402,30,1789,32],[2402,31,1789,33,"providerData"],[2402,43,1789,45],[2402,44,1789,46,"map"],[2402,47,1789,49],[2402,48,1789,50,"userInfo"],[2402,56,1789,58],[2402,60,1789,58,"Object"],[2402,66,1789,58],[2402,67,1789,58,"assign"],[2402,73,1789,58],[2402,78,1789,68,"userInfo"],[2402,86,1789,76],[2402,87,1789,79],[2402,88,1789,80],[2403,6,1790,8],[2403,10,1790,12],[2403,11,1790,13,"metadata"],[2403,19,1790,21],[2403,20,1790,22,"_copy"],[2403,25,1790,27],[2403,26,1790,28,"user"],[2403,30,1790,32],[2403,31,1790,33,"metadata"],[2403,39,1790,41],[2403,40,1790,42],[2404,6,1791,8],[2404,10,1791,12],[2404,11,1791,13,"stsTokenManager"],[2404,26,1791,28],[2404,27,1791,29,"_assign"],[2404,34,1791,36],[2404,35,1791,37,"user"],[2404,39,1791,41],[2404,40,1791,42,"stsTokenManager"],[2404,55,1791,57],[2404,56,1791,58],[2405,4,1792,4],[2406,4,1793,4,"_clone"],[2406,10,1793,10,"_clone"],[2406,11,1793,11,"auth"],[2406,15,1793,15],[2406,17,1793,17],[2407,6,1794,8],[2407,12,1794,14,"newUser"],[2407,19,1794,21],[2407,22,1794,24],[2407,26,1794,28,"UserImpl"],[2407,34,1794,36],[2407,35,1794,36,"Object"],[2407,41,1794,36],[2407,42,1794,36,"assign"],[2407,48,1794,36],[2407,53,1795,15],[2407,57,1795,19],[2408,8,1796,12,"auth"],[2408,12,1796,16],[2409,8,1797,12,"stsTokenManager"],[2409,23,1797,27],[2409,25,1797,29],[2409,29,1797,33],[2409,30,1797,34,"stsTokenManager"],[2409,45,1797,49],[2409,46,1797,50,"_clone"],[2409,52,1797,56],[2409,53,1797,57],[2410,6,1797,58],[2410,8,1798,9],[2410,9,1798,10],[2411,6,1799,8,"newUser"],[2411,13,1799,15],[2411,14,1799,16,"metadata"],[2411,22,1799,24],[2411,23,1799,25,"_copy"],[2411,28,1799,30],[2411,29,1799,31],[2411,33,1799,35],[2411,34,1799,36,"metadata"],[2411,42,1799,44],[2411,43,1799,45],[2412,6,1800,8],[2412,13,1800,15,"newUser"],[2412,20,1800,22],[2413,4,1801,4],[2414,4,1802,4,"_onReload"],[2414,13,1802,13,"_onReload"],[2414,14,1802,14,"callback"],[2414,22,1802,22],[2414,24,1802,24],[2415,6,1803,8],[2416,6,1804,8,"_assert"],[2416,13,1804,15],[2416,14,1804,16],[2416,15,1804,17],[2416,19,1804,21],[2416,20,1804,22,"reloadListener"],[2416,34,1804,36],[2416,36,1804,38],[2416,40,1804,42],[2416,41,1804,43,"auth"],[2416,45,1804,47],[2416,47,1804,49],[2416,63,1804,65],[2416,64,1804,66],[2416,98,1804,100],[2416,99,1804,101],[2417,6,1805,8],[2417,10,1805,12],[2417,11,1805,13,"reloadListener"],[2417,25,1805,27],[2417,28,1805,30,"callback"],[2417,36,1805,38],[2418,6,1806,8],[2418,10,1806,12],[2418,14,1806,16],[2418,15,1806,17,"reloadUserInfo"],[2418,29,1806,31],[2418,31,1806,33],[2419,8,1807,12],[2419,12,1807,16],[2419,13,1807,17,"_notifyReloadListener"],[2419,34,1807,38],[2419,35,1807,39],[2419,39,1807,43],[2419,40,1807,44,"reloadUserInfo"],[2419,54,1807,58],[2419,55,1807,59],[2420,8,1808,12],[2420,12,1808,16],[2420,13,1808,17,"reloadUserInfo"],[2420,27,1808,31],[2420,30,1808,34],[2420,34,1808,38],[2421,6,1809,8],[2422,4,1810,4],[2423,4,1811,4,"_notifyReloadListener"],[2423,25,1811,25,"_notifyReloadListener"],[2423,26,1811,26,"userInfo"],[2423,34,1811,34],[2423,36,1811,36],[2424,6,1812,8],[2424,10,1812,12],[2424,14,1812,16],[2424,15,1812,17,"reloadListener"],[2424,29,1812,31],[2424,31,1812,33],[2425,8,1813,12],[2425,12,1813,16],[2425,13,1813,17,"reloadListener"],[2425,27,1813,31],[2425,28,1813,32,"userInfo"],[2425,36,1813,40],[2425,37,1813,41],[2426,6,1814,8],[2426,7,1814,9],[2426,13,1815,13],[2427,8,1816,12],[2428,8,1817,12],[2428,12,1817,16],[2428,13,1817,17,"reloadUserInfo"],[2428,27,1817,31],[2428,30,1817,34,"userInfo"],[2428,38,1817,42],[2429,6,1818,8],[2430,4,1819,4],[2431,4,1820,4,"_startProactiveRefresh"],[2431,26,1820,26,"_startProactiveRefresh"],[2431,27,1820,26],[2431,29,1820,29],[2432,6,1821,8],[2432,10,1821,12],[2432,11,1821,13,"proactiveRefresh"],[2432,27,1821,29],[2432,28,1821,30,"_start"],[2432,34,1821,36],[2432,35,1821,37],[2432,36,1821,38],[2433,4,1822,4],[2434,4,1823,4,"_stopProactiveRefresh"],[2434,25,1823,25,"_stopProactiveRefresh"],[2434,26,1823,25],[2434,28,1823,28],[2435,6,1824,8],[2435,10,1824,12],[2435,11,1824,13,"proactiveRefresh"],[2435,27,1824,29],[2435,28,1824,30,"_stop"],[2435,33,1824,35],[2435,34,1824,36],[2435,35,1824,37],[2436,4,1825,4],[2437,4,1826,4],[2437,10,1826,10,"_updateTokensIfNecessary"],[2437,34,1826,34,"_updateTokensIfNecessary"],[2437,35,1826,35,"response"],[2437,43,1826,43],[2437,45,1826,45,"reload"],[2437,51,1826,51],[2437,54,1826,54],[2437,59,1826,59],[2437,61,1826,61],[2438,6,1827,8],[2438,10,1827,12,"tokensRefreshed"],[2438,25,1827,27],[2438,28,1827,30],[2438,33,1827,35],[2439,6,1828,8],[2439,10,1828,12,"response"],[2439,18,1828,20],[2439,19,1828,21,"idToken"],[2439,26,1828,28],[2439,30,1829,12,"response"],[2439,38,1829,20],[2439,39,1829,21,"idToken"],[2439,46,1829,28],[2439,51,1829,33],[2439,55,1829,37],[2439,56,1829,38,"stsTokenManager"],[2439,71,1829,53],[2439,72,1829,54,"accessToken"],[2439,83,1829,65],[2439,85,1829,67],[2440,8,1830,12],[2440,12,1830,16],[2440,13,1830,17,"stsTokenManager"],[2440,28,1830,32],[2440,29,1830,33,"updateFromServerResponse"],[2440,53,1830,57],[2440,54,1830,58,"response"],[2440,62,1830,66],[2440,63,1830,67],[2441,8,1831,12,"tokensRefreshed"],[2441,23,1831,27],[2441,26,1831,30],[2441,30,1831,34],[2442,6,1832,8],[2443,6,1833,8],[2443,10,1833,12,"reload"],[2443,16,1833,18],[2443,18,1833,20],[2444,8,1834,12],[2444,14,1834,18,"_reloadWithoutSaving"],[2444,34,1834,38],[2444,35,1834,39],[2444,39,1834,43],[2444,40,1834,44],[2445,6,1835,8],[2446,6,1836,8],[2446,12,1836,14],[2446,16,1836,18],[2446,17,1836,19,"auth"],[2446,21,1836,23],[2446,22,1836,24,"_persistUserIfCurrent"],[2446,43,1836,45],[2446,44,1836,46],[2446,48,1836,50],[2446,49,1836,51],[2447,6,1837,8],[2447,10,1837,12,"tokensRefreshed"],[2447,25,1837,27],[2447,27,1837,29],[2448,8,1838,12],[2448,12,1838,16],[2448,13,1838,17,"auth"],[2448,17,1838,21],[2448,18,1838,22,"_notifyListenersIfCurrent"],[2448,43,1838,47],[2448,44,1838,48],[2448,48,1838,52],[2448,49,1838,53],[2449,6,1839,8],[2450,4,1840,4],[2451,4,1841,4],[2451,10,1841,10,"delete"],[2451,16,1841,16,"delete"],[2451,17,1841,16],[2451,19,1841,19],[2452,6,1842,8],[2452,10,1842,12],[2452,14,1842,12,"_isFirebaseServerApp"],[2452,26,1842,32],[2452,27,1842,32,"_isFirebaseServerApp"],[2452,47,1842,32],[2452,49,1842,33],[2452,53,1842,37],[2452,54,1842,38,"auth"],[2452,58,1842,42],[2452,59,1842,43,"app"],[2452,62,1842,46],[2452,63,1842,47],[2452,65,1842,49],[2453,8,1843,12],[2453,15,1843,19,"Promise"],[2453,22,1843,26],[2453,23,1843,27,"reject"],[2453,29,1843,33],[2453,30,1843,34,"_serverAppCurrentUserOperationNotSupportedError"],[2453,77,1843,81],[2453,78,1843,82],[2453,82,1843,86],[2453,83,1843,87,"auth"],[2453,87,1843,91],[2453,88,1843,92],[2453,89,1843,93],[2454,6,1844,8],[2455,6,1845,8],[2455,12,1845,14,"idToken"],[2455,19,1845,21],[2455,22,1845,24],[2455,28,1845,30],[2455,32,1845,34],[2455,33,1845,35,"getIdToken"],[2455,43,1845,45],[2455,44,1845,46],[2455,45,1845,47],[2456,6,1846,8],[2456,12,1846,14,"_logoutIfInvalidated"],[2456,32,1846,34],[2456,33,1846,35],[2456,37,1846,39],[2456,39,1846,41,"deleteAccount"],[2456,52,1846,54],[2456,53,1846,55],[2456,57,1846,59],[2456,58,1846,60,"auth"],[2456,62,1846,64],[2456,64,1846,66],[2457,8,1846,68,"idToken"],[2458,6,1846,76],[2458,7,1846,77],[2458,8,1846,78],[2458,9,1846,79],[2459,6,1847,8],[2459,10,1847,12],[2459,11,1847,13,"stsTokenManager"],[2459,26,1847,28],[2459,27,1847,29,"clearRefreshToken"],[2459,44,1847,46],[2459,45,1847,47],[2459,46,1847,48],[2460,6,1848,8],[2461,6,1849,8],[2462,6,1850,8],[2462,13,1850,15],[2462,17,1850,19],[2462,18,1850,20,"auth"],[2462,22,1850,24],[2462,23,1850,25,"signOut"],[2462,30,1850,32],[2462,31,1850,33],[2462,32,1850,34],[2463,4,1851,4],[2464,4,1852,4,"toJSON"],[2464,10,1852,10,"toJSON"],[2464,11,1852,10],[2464,13,1852,13],[2465,6,1853,8],[2465,13,1853,8,"Object"],[2465,19,1853,8],[2465,20,1853,8,"assign"],[2465,26,1853,8],[2466,8,1854,12,"uid"],[2466,11,1854,15],[2466,13,1854,17],[2466,17,1854,21],[2466,18,1854,22,"uid"],[2466,21,1854,25],[2467,8,1855,12,"email"],[2467,13,1855,17],[2467,15,1855,19],[2467,19,1855,23],[2467,20,1855,24,"email"],[2467,25,1855,29],[2467,29,1855,33,"undefined"],[2467,38,1855,42],[2468,8,1856,12,"emailVerified"],[2468,21,1856,25],[2468,23,1856,27],[2468,27,1856,31],[2468,28,1856,32,"emailVerified"],[2468,41,1856,45],[2469,8,1857,12,"displayName"],[2469,19,1857,23],[2469,21,1857,25],[2469,25,1857,29],[2469,26,1857,30,"displayName"],[2469,37,1857,41],[2469,41,1857,45,"undefined"],[2469,50,1857,54],[2470,8,1858,12,"isAnonymous"],[2470,19,1858,23],[2470,21,1858,25],[2470,25,1858,29],[2470,26,1858,30,"isAnonymous"],[2470,37,1858,41],[2471,8,1859,12,"photoURL"],[2471,16,1859,20],[2471,18,1859,22],[2471,22,1859,26],[2471,23,1859,27,"photoURL"],[2471,31,1859,35],[2471,35,1859,39,"undefined"],[2471,44,1859,48],[2472,8,1860,12,"phoneNumber"],[2472,19,1860,23],[2472,21,1860,25],[2472,25,1860,29],[2472,26,1860,30,"phoneNumber"],[2472,37,1860,41],[2472,41,1860,45,"undefined"],[2472,50,1860,54],[2473,8,1861,12,"tenantId"],[2473,16,1861,20],[2473,18,1861,22],[2473,22,1861,26],[2473,23,1861,27,"tenantId"],[2473,31,1861,35],[2473,35,1861,39,"undefined"],[2473,44,1861,48],[2474,8,1862,12,"providerData"],[2474,20,1862,24],[2474,22,1862,26],[2474,26,1862,30],[2474,27,1862,31,"providerData"],[2474,39,1862,43],[2474,40,1862,44,"map"],[2474,43,1862,47],[2474,44,1862,48,"userInfo"],[2474,52,1862,56],[2474,56,1862,56,"Object"],[2474,62,1862,56],[2474,63,1862,56,"assign"],[2474,69,1862,56],[2474,74,1862,66,"userInfo"],[2474,82,1862,74],[2474,83,1862,77],[2474,84,1862,78],[2475,8,1863,12,"stsTokenManager"],[2475,23,1863,27],[2475,25,1863,29],[2475,29,1863,33],[2475,30,1863,34,"stsTokenManager"],[2475,45,1863,49],[2475,46,1863,50,"toJSON"],[2475,52,1863,56],[2475,53,1863,57],[2475,54,1863,58],[2476,8,1864,12],[2477,8,1865,12],[2478,8,1866,12,"_redirectEventId"],[2478,24,1866,28],[2478,26,1866,30],[2478,30,1866,34],[2478,31,1866,35,"_redirectEventId"],[2479,6,1866,51],[2479,9,1867,15],[2479,13,1867,19],[2479,14,1867,20,"metadata"],[2479,22,1867,28],[2479,23,1867,29,"toJSON"],[2479,29,1867,35],[2479,30,1867,36],[2479,31,1867,37],[2480,8,1868,12],[2481,8,1869,12,"apiKey"],[2481,14,1869,18],[2481,16,1869,20],[2481,20,1869,24],[2481,21,1869,25,"auth"],[2481,25,1869,29],[2481,26,1869,30,"config"],[2481,32,1869,36],[2481,33,1869,37,"apiKey"],[2481,39,1869,43],[2482,8,1870,12,"appName"],[2482,15,1870,19],[2482,17,1870,21],[2482,21,1870,25],[2482,22,1870,26,"auth"],[2482,26,1870,30],[2482,27,1870,31,"name"],[2483,8,1871,12],[2484,8,1872,12],[2485,6,1872,12],[2486,4,1874,4],[2487,4,1875,4],[2487,8,1875,8,"refreshToken"],[2487,20,1875,20,"refreshToken"],[2487,21,1875,20],[2487,23,1875,23],[2488,6,1876,8],[2488,13,1876,15],[2488,17,1876,19],[2488,18,1876,20,"stsTokenManager"],[2488,33,1876,35],[2488,34,1876,36,"refreshToken"],[2488,46,1876,48],[2488,50,1876,52],[2488,52,1876,54],[2489,4,1877,4],[2490,4,1878,4],[2490,11,1878,11,"_fromJSON"],[2490,20,1878,20,"_fromJSON"],[2490,21,1878,21,"auth"],[2490,25,1878,25],[2490,27,1878,27,"object"],[2490,33,1878,33],[2490,35,1878,35],[2491,6,1879,8],[2491,12,1879,14,"displayName"],[2491,23,1879,25],[2491,26,1879,28,"object"],[2491,32,1879,34],[2491,33,1879,35,"displayName"],[2491,44,1879,46],[2491,48,1879,50,"undefined"],[2491,57,1879,59],[2492,6,1880,8],[2492,12,1880,14,"email"],[2492,17,1880,19],[2492,20,1880,22,"object"],[2492,26,1880,28],[2492,27,1880,29,"email"],[2492,32,1880,34],[2492,36,1880,38,"undefined"],[2492,45,1880,47],[2493,6,1881,8],[2493,12,1881,14,"phoneNumber"],[2493,23,1881,25],[2493,26,1881,28,"object"],[2493,32,1881,34],[2493,33,1881,35,"phoneNumber"],[2493,44,1881,46],[2493,48,1881,50,"undefined"],[2493,57,1881,59],[2494,6,1882,8],[2494,12,1882,14,"photoURL"],[2494,20,1882,22],[2494,23,1882,25,"object"],[2494,29,1882,31],[2494,30,1882,32,"photoURL"],[2494,38,1882,40],[2494,42,1882,44,"undefined"],[2494,51,1882,53],[2495,6,1883,8],[2495,12,1883,14,"tenantId"],[2495,20,1883,22],[2495,23,1883,25,"object"],[2495,29,1883,31],[2495,30,1883,32,"tenantId"],[2495,38,1883,40],[2495,42,1883,44,"undefined"],[2495,51,1883,53],[2496,6,1884,8],[2496,12,1884,14,"_redirectEventId"],[2496,28,1884,30],[2496,31,1884,33,"object"],[2496,37,1884,39],[2496,38,1884,40,"_redirectEventId"],[2496,54,1884,56],[2496,58,1884,60,"undefined"],[2496,67,1884,69],[2497,6,1885,8],[2497,12,1885,14,"createdAt"],[2497,21,1885,23],[2497,24,1885,26,"object"],[2497,30,1885,32],[2497,31,1885,33,"createdAt"],[2497,40,1885,42],[2497,44,1885,46,"undefined"],[2497,53,1885,55],[2498,6,1886,8],[2498,12,1886,14,"lastLoginAt"],[2498,23,1886,25],[2498,26,1886,28,"object"],[2498,32,1886,34],[2498,33,1886,35,"lastLoginAt"],[2498,44,1886,46],[2498,48,1886,50,"undefined"],[2498,57,1886,59],[2499,6,1887,8],[2499,12,1887,14],[2500,8,1887,16,"uid"],[2500,11,1887,19],[2501,8,1887,21,"emailVerified"],[2501,21,1887,34],[2502,8,1887,36,"isAnonymous"],[2502,19,1887,47],[2503,8,1887,49,"providerData"],[2503,20,1887,61],[2504,8,1887,63,"stsTokenManager"],[2504,23,1887,78],[2504,25,1887,80,"plainObjectTokenManager"],[2505,6,1887,104],[2505,7,1887,105],[2505,10,1887,108,"object"],[2505,16,1887,114],[2506,6,1888,8,"_assert"],[2506,13,1888,15],[2506,14,1888,16,"uid"],[2506,17,1888,19],[2506,21,1888,23,"plainObjectTokenManager"],[2506,44,1888,46],[2506,46,1888,48,"auth"],[2506,50,1888,52],[2506,52,1888,54],[2506,68,1888,70],[2506,69,1888,71],[2506,103,1888,105],[2506,104,1888,106],[2507,6,1889,8],[2507,12,1889,14,"stsTokenManager"],[2507,27,1889,29],[2507,30,1889,32,"StsTokenManager"],[2507,45,1889,47],[2507,46,1889,48,"fromJSON"],[2507,54,1889,56],[2507,55,1889,57],[2507,59,1889,61],[2507,60,1889,62,"name"],[2507,64,1889,66],[2507,66,1889,68,"plainObjectTokenManager"],[2507,89,1889,91],[2507,90,1889,92],[2508,6,1890,8,"_assert"],[2508,13,1890,15],[2508,14,1890,16],[2508,21,1890,23,"uid"],[2508,24,1890,26],[2508,29,1890,31],[2508,37,1890,39],[2508,39,1890,41,"auth"],[2508,43,1890,45],[2508,45,1890,47],[2508,61,1890,63],[2508,62,1890,64],[2508,96,1890,98],[2508,97,1890,99],[2509,6,1891,8,"assertStringOrUndefined"],[2509,29,1891,31],[2509,30,1891,32,"displayName"],[2509,41,1891,43],[2509,43,1891,45,"auth"],[2509,47,1891,49],[2509,48,1891,50,"name"],[2509,52,1891,54],[2509,53,1891,55],[2510,6,1892,8,"assertStringOrUndefined"],[2510,29,1892,31],[2510,30,1892,32,"email"],[2510,35,1892,37],[2510,37,1892,39,"auth"],[2510,41,1892,43],[2510,42,1892,44,"name"],[2510,46,1892,48],[2510,47,1892,49],[2511,6,1893,8,"_assert"],[2511,13,1893,15],[2511,14,1893,16],[2511,21,1893,23,"emailVerified"],[2511,34,1893,36],[2511,39,1893,41],[2511,48,1893,50],[2511,50,1893,52,"auth"],[2511,54,1893,56],[2511,56,1893,58],[2511,72,1893,74],[2511,73,1893,75],[2511,107,1893,109],[2511,108,1893,110],[2512,6,1894,8,"_assert"],[2512,13,1894,15],[2512,14,1894,16],[2512,21,1894,23,"isAnonymous"],[2512,32,1894,34],[2512,37,1894,39],[2512,46,1894,48],[2512,48,1894,50,"auth"],[2512,52,1894,54],[2512,54,1894,56],[2512,70,1894,72],[2512,71,1894,73],[2512,105,1894,107],[2512,106,1894,108],[2513,6,1895,8,"assertStringOrUndefined"],[2513,29,1895,31],[2513,30,1895,32,"phoneNumber"],[2513,41,1895,43],[2513,43,1895,45,"auth"],[2513,47,1895,49],[2513,48,1895,50,"name"],[2513,52,1895,54],[2513,53,1895,55],[2514,6,1896,8,"assertStringOrUndefined"],[2514,29,1896,31],[2514,30,1896,32,"photoURL"],[2514,38,1896,40],[2514,40,1896,42,"auth"],[2514,44,1896,46],[2514,45,1896,47,"name"],[2514,49,1896,51],[2514,50,1896,52],[2515,6,1897,8,"assertStringOrUndefined"],[2515,29,1897,31],[2515,30,1897,32,"tenantId"],[2515,38,1897,40],[2515,40,1897,42,"auth"],[2515,44,1897,46],[2515,45,1897,47,"name"],[2515,49,1897,51],[2515,50,1897,52],[2516,6,1898,8,"assertStringOrUndefined"],[2516,29,1898,31],[2516,30,1898,32,"_redirectEventId"],[2516,46,1898,48],[2516,48,1898,50,"auth"],[2516,52,1898,54],[2516,53,1898,55,"name"],[2516,57,1898,59],[2516,58,1898,60],[2517,6,1899,8,"assertStringOrUndefined"],[2517,29,1899,31],[2517,30,1899,32,"createdAt"],[2517,39,1899,41],[2517,41,1899,43,"auth"],[2517,45,1899,47],[2517,46,1899,48,"name"],[2517,50,1899,52],[2517,51,1899,53],[2518,6,1900,8,"assertStringOrUndefined"],[2518,29,1900,31],[2518,30,1900,32,"lastLoginAt"],[2518,41,1900,43],[2518,43,1900,45,"auth"],[2518,47,1900,49],[2518,48,1900,50,"name"],[2518,52,1900,54],[2518,53,1900,55],[2519,6,1901,8],[2519,12,1901,14,"user"],[2519,16,1901,18],[2519,19,1901,21],[2519,23,1901,25,"UserImpl"],[2519,31,1901,33],[2519,32,1901,34],[2520,8,1902,12,"uid"],[2520,11,1902,15],[2521,8,1903,12,"auth"],[2521,12,1903,16],[2522,8,1904,12,"email"],[2522,13,1904,17],[2523,8,1905,12,"emailVerified"],[2523,21,1905,25],[2524,8,1906,12,"displayName"],[2524,19,1906,23],[2525,8,1907,12,"isAnonymous"],[2525,19,1907,23],[2526,8,1908,12,"photoURL"],[2526,16,1908,20],[2527,8,1909,12,"phoneNumber"],[2527,19,1909,23],[2528,8,1910,12,"tenantId"],[2528,16,1910,20],[2529,8,1911,12,"stsTokenManager"],[2529,23,1911,27],[2530,8,1912,12,"createdAt"],[2530,17,1912,21],[2531,8,1913,12,"lastLoginAt"],[2532,6,1914,8],[2532,7,1914,9],[2532,8,1914,10],[2533,6,1915,8],[2533,10,1915,12,"providerData"],[2533,22,1915,24],[2533,26,1915,28,"Array"],[2533,31,1915,33],[2533,32,1915,34,"isArray"],[2533,39,1915,41],[2533,40,1915,42,"providerData"],[2533,52,1915,54],[2533,53,1915,55],[2533,55,1915,57],[2534,8,1916,12,"user"],[2534,12,1916,16],[2534,13,1916,17,"providerData"],[2534,25,1916,29],[2534,28,1916,32,"providerData"],[2534,40,1916,44],[2534,41,1916,45,"map"],[2534,44,1916,48],[2534,45,1916,49,"userInfo"],[2534,53,1916,57],[2534,57,1916,57,"Object"],[2534,63,1916,57],[2534,64,1916,57,"assign"],[2534,70,1916,57],[2534,75,1916,67,"userInfo"],[2534,83,1916,75],[2534,84,1916,78],[2534,85,1916,79],[2535,6,1917,8],[2536,6,1918,8],[2536,10,1918,12,"_redirectEventId"],[2536,26,1918,28],[2536,28,1918,30],[2537,8,1919,12,"user"],[2537,12,1919,16],[2537,13,1919,17,"_redirectEventId"],[2537,29,1919,33],[2537,32,1919,36,"_redirectEventId"],[2537,48,1919,52],[2538,6,1920,8],[2539,6,1921,8],[2539,13,1921,15,"user"],[2539,17,1921,19],[2540,4,1922,4],[2541,4,1923,4],[2542,0,1924,0],[2543,0,1925,0],[2544,0,1926,0],[2545,0,1927,0],[2546,4,1928,4],[2546,17,1928,17,"_fromIdTokenResponse"],[2546,37,1928,37,"_fromIdTokenResponse"],[2546,38,1928,38,"auth"],[2546,42,1928,42],[2546,44,1928,44,"idTokenResponse"],[2546,59,1928,59],[2546,61,1928,61,"isAnonymous"],[2546,72,1928,72],[2546,75,1928,75],[2546,80,1928,80],[2546,82,1928,82],[2547,6,1929,8],[2547,12,1929,14,"stsTokenManager"],[2547,27,1929,29],[2547,30,1929,32],[2547,34,1929,36,"StsTokenManager"],[2547,49,1929,51],[2547,50,1929,52],[2547,51,1929,53],[2548,6,1930,8,"stsTokenManager"],[2548,21,1930,23],[2548,22,1930,24,"updateFromServerResponse"],[2548,46,1930,48],[2548,47,1930,49,"idTokenResponse"],[2548,62,1930,64],[2548,63,1930,65],[2549,6,1931,8],[2550,6,1932,8],[2550,12,1932,14,"user"],[2550,16,1932,18],[2550,19,1932,21],[2550,23,1932,25,"UserImpl"],[2550,31,1932,33],[2550,32,1932,34],[2551,8,1933,12,"uid"],[2551,11,1933,15],[2551,13,1933,17,"idTokenResponse"],[2551,28,1933,32],[2551,29,1933,33,"localId"],[2551,36,1933,40],[2552,8,1934,12,"auth"],[2552,12,1934,16],[2553,8,1935,12,"stsTokenManager"],[2553,23,1935,27],[2554,8,1936,12,"isAnonymous"],[2555,6,1937,8],[2555,7,1937,9],[2555,8,1937,10],[2556,6,1938,8],[2557,6,1939,8],[2557,12,1939,14,"_reloadWithoutSaving"],[2557,32,1939,34],[2557,33,1939,35,"user"],[2557,37,1939,39],[2557,38,1939,40],[2558,6,1940,8],[2558,13,1940,15,"user"],[2558,17,1940,19],[2559,4,1941,4],[2560,4,1942,4],[2561,0,1943,0],[2562,0,1944,0],[2563,0,1945,0],[2564,0,1946,0],[2565,4,1947,4],[2565,17,1947,17,"_fromGetAccountInfoResponse"],[2565,44,1947,44,"_fromGetAccountInfoResponse"],[2565,45,1947,45,"auth"],[2565,49,1947,49],[2565,51,1947,51,"response"],[2565,59,1947,59],[2565,61,1947,61,"idToken"],[2565,68,1947,68],[2565,70,1947,70],[2566,6,1948,8],[2566,12,1948,14,"coreAccount"],[2566,23,1948,25],[2566,26,1948,28,"response"],[2566,34,1948,36],[2566,35,1948,37,"users"],[2566,40,1948,42],[2566,41,1948,43],[2566,42,1948,44],[2566,43,1948,45],[2567,6,1949,8,"_assert"],[2567,13,1949,15],[2567,14,1949,16,"coreAccount"],[2567,25,1949,27],[2567,26,1949,28,"localId"],[2567,33,1949,35],[2567,38,1949,40,"undefined"],[2567,47,1949,49],[2567,49,1949,51],[2567,65,1949,67],[2567,66,1949,68],[2567,100,1949,102],[2567,101,1949,103],[2568,6,1950,8],[2568,12,1950,14,"providerData"],[2568,24,1950,26],[2568,27,1950,29,"coreAccount"],[2568,38,1950,40],[2568,39,1950,41,"providerUserInfo"],[2568,55,1950,57],[2568,60,1950,62,"undefined"],[2568,69,1950,71],[2568,72,1951,14,"extractProviderData"],[2568,91,1951,33],[2568,92,1951,34,"coreAccount"],[2568,103,1951,45],[2568,104,1951,46,"providerUserInfo"],[2568,120,1951,62],[2568,121,1951,63],[2568,124,1952,14],[2568,126,1952,16],[2569,6,1953,8],[2569,12,1953,14,"isAnonymous"],[2569,23,1953,25],[2569,26,1953,28],[2569,28,1953,30,"coreAccount"],[2569,39,1953,41],[2569,40,1953,42,"email"],[2569,45,1953,47],[2569,49,1953,51,"coreAccount"],[2569,60,1953,62],[2569,61,1953,63,"passwordHash"],[2569,73,1953,75],[2569,74,1953,76],[2569,78,1953,80],[2569,79,1953,81,"providerData"],[2569,91,1953,93],[2569,93,1953,95,"length"],[2569,99,1953,101],[2570,6,1954,8],[2570,12,1954,14,"stsTokenManager"],[2570,27,1954,29],[2570,30,1954,32],[2570,34,1954,36,"StsTokenManager"],[2570,49,1954,51],[2570,50,1954,52],[2570,51,1954,53],[2571,6,1955,8,"stsTokenManager"],[2571,21,1955,23],[2571,22,1955,24,"updateFromIdToken"],[2571,39,1955,41],[2571,40,1955,42,"idToken"],[2571,47,1955,49],[2571,48,1955,50],[2572,6,1956,8],[2573,6,1957,8],[2573,12,1957,14,"user"],[2573,16,1957,18],[2573,19,1957,21],[2573,23,1957,25,"UserImpl"],[2573,31,1957,33],[2573,32,1957,34],[2574,8,1958,12,"uid"],[2574,11,1958,15],[2574,13,1958,17,"coreAccount"],[2574,24,1958,28],[2574,25,1958,29,"localId"],[2574,32,1958,36],[2575,8,1959,12,"auth"],[2575,12,1959,16],[2576,8,1960,12,"stsTokenManager"],[2576,23,1960,27],[2577,8,1961,12,"isAnonymous"],[2578,6,1962,8],[2578,7,1962,9],[2578,8,1962,10],[2579,6,1963,8],[2580,6,1964,8],[2580,12,1964,14,"updates"],[2580,19,1964,21],[2580,22,1964,24],[2581,8,1965,12,"uid"],[2581,11,1965,15],[2581,13,1965,17,"coreAccount"],[2581,24,1965,28],[2581,25,1965,29,"localId"],[2581,32,1965,36],[2582,8,1966,12,"displayName"],[2582,19,1966,23],[2582,21,1966,25,"coreAccount"],[2582,32,1966,36],[2582,33,1966,37,"displayName"],[2582,44,1966,48],[2582,48,1966,52],[2582,52,1966,56],[2583,8,1967,12,"photoURL"],[2583,16,1967,20],[2583,18,1967,22,"coreAccount"],[2583,29,1967,33],[2583,30,1967,34,"photoUrl"],[2583,38,1967,42],[2583,42,1967,46],[2583,46,1967,50],[2584,8,1968,12,"email"],[2584,13,1968,17],[2584,15,1968,19,"coreAccount"],[2584,26,1968,30],[2584,27,1968,31,"email"],[2584,32,1968,36],[2584,36,1968,40],[2584,40,1968,44],[2585,8,1969,12,"emailVerified"],[2585,21,1969,25],[2585,23,1969,27,"coreAccount"],[2585,34,1969,38],[2585,35,1969,39,"emailVerified"],[2585,48,1969,52],[2585,52,1969,56],[2585,57,1969,61],[2586,8,1970,12,"phoneNumber"],[2586,19,1970,23],[2586,21,1970,25,"coreAccount"],[2586,32,1970,36],[2586,33,1970,37,"phoneNumber"],[2586,44,1970,48],[2586,48,1970,52],[2586,52,1970,56],[2587,8,1971,12,"tenantId"],[2587,16,1971,20],[2587,18,1971,22,"coreAccount"],[2587,29,1971,33],[2587,30,1971,34,"tenantId"],[2587,38,1971,42],[2587,42,1971,46],[2587,46,1971,50],[2588,8,1972,12,"providerData"],[2588,20,1972,24],[2589,8,1973,12,"metadata"],[2589,16,1973,20],[2589,18,1973,22],[2589,22,1973,26,"UserMetadata"],[2589,34,1973,38],[2589,35,1973,39,"coreAccount"],[2589,46,1973,50],[2589,47,1973,51,"createdAt"],[2589,56,1973,60],[2589,58,1973,62,"coreAccount"],[2589,69,1973,73],[2589,70,1973,74,"lastLoginAt"],[2589,81,1973,85],[2589,82,1973,86],[2590,8,1974,12,"isAnonymous"],[2590,19,1974,23],[2590,21,1974,25],[2590,23,1974,27,"coreAccount"],[2590,34,1974,38],[2590,35,1974,39,"email"],[2590,40,1974,44],[2590,44,1974,48,"coreAccount"],[2590,55,1974,59],[2590,56,1974,60,"passwordHash"],[2590,68,1974,72],[2590,69,1974,73],[2590,73,1975,16],[2590,74,1975,17,"providerData"],[2590,86,1975,29],[2590,88,1975,31,"length"],[2591,6,1976,8],[2591,7,1976,9],[2592,6,1977,8,"Object"],[2592,12,1977,14],[2592,13,1977,15,"assign"],[2592,19,1977,21],[2592,20,1977,22,"user"],[2592,24,1977,26],[2592,26,1977,28,"updates"],[2592,33,1977,35],[2592,34,1977,36],[2593,6,1978,8],[2593,13,1978,15,"user"],[2593,17,1978,19],[2594,4,1979,4],[2595,2,1980,0],[2597,2,1982,0],[2598,0,1983,0],[2599,0,1984,0],[2600,0,1985,0],[2601,0,1986,0],[2602,0,1987,0],[2603,0,1988,0],[2604,0,1989,0],[2605,0,1990,0],[2606,0,1991,0],[2607,0,1992,0],[2608,0,1993,0],[2609,0,1994,0],[2610,0,1995,0],[2611,0,1996,0],[2612,0,1997,0],[2613,2,1998,0],[2613,8,1998,6,"instanceCache"],[2613,21,1998,19],[2613,24,1998,22],[2613,28,1998,26,"Map"],[2613,31,1998,29],[2613,32,1998,30],[2613,33,1998,31],[2614,2,1999,0],[2614,11,1999,9,"_getInstance"],[2614,23,1999,21,"_getInstance"],[2614,24,1999,22,"cls"],[2614,27,1999,25],[2614,29,1999,27],[2615,4,2000,4,"debugAssert"],[2615,15,2000,15],[2615,16,2000,16,"cls"],[2615,19,2000,19],[2615,31,2000,31,"Function"],[2615,39,2000,39],[2615,41,2000,41],[2615,70,2000,70],[2615,71,2000,71],[2616,4,2001,4],[2616,8,2001,8,"instance"],[2616,16,2001,16],[2616,19,2001,19,"instanceCache"],[2616,32,2001,32],[2616,33,2001,33,"get"],[2616,36,2001,36],[2616,37,2001,37,"cls"],[2616,40,2001,40],[2616,41,2001,41],[2617,4,2002,4],[2617,8,2002,8,"instance"],[2617,16,2002,16],[2617,18,2002,18],[2618,6,2003,8,"debugAssert"],[2618,17,2003,19],[2618,18,2003,20,"instance"],[2618,26,2003,28],[2618,38,2003,40,"cls"],[2618,41,2003,43],[2618,43,2003,45],[2618,91,2003,93],[2618,92,2003,94],[2619,6,2004,8],[2619,13,2004,15,"instance"],[2619,21,2004,23],[2620,4,2005,4],[2621,4,2006,4,"instance"],[2621,12,2006,12],[2621,15,2006,15],[2621,19,2006,19,"cls"],[2621,22,2006,22],[2621,23,2006,23],[2621,24,2006,24],[2622,4,2007,4,"instanceCache"],[2622,17,2007,17],[2622,18,2007,18,"set"],[2622,21,2007,21],[2622,22,2007,22,"cls"],[2622,25,2007,25],[2622,27,2007,27,"instance"],[2622,35,2007,35],[2622,36,2007,36],[2623,4,2008,4],[2623,11,2008,11,"instance"],[2623,19,2008,19],[2624,2,2009,0],[2626,2,2011,0],[2627,0,2012,0],[2628,0,2013,0],[2629,0,2014,0],[2630,0,2015,0],[2631,0,2016,0],[2632,0,2017,0],[2633,0,2018,0],[2634,0,2019,0],[2635,0,2020,0],[2636,0,2021,0],[2637,0,2022,0],[2638,0,2023,0],[2639,0,2024,0],[2640,0,2025,0],[2641,0,2026,0],[2642,2,2027,0],[2642,8,2027,6,"InMemoryPersistence"],[2642,27,2027,25],[2642,28,2027,26],[2643,4,2028,4,"constructor"],[2643,15,2028,15,"constructor"],[2643,16,2028,15],[2643,18,2028,18],[2644,6,2029,8],[2644,10,2029,12],[2644,11,2029,13,"type"],[2644,15,2029,17],[2644,18,2029,20],[2644,24,2029,26],[2644,25,2029,27],[2645,6,2030,8],[2645,10,2030,12],[2645,11,2030,13,"storage"],[2645,18,2030,20],[2645,21,2030,23],[2645,22,2030,24],[2645,23,2030,25],[2646,4,2031,4],[2647,4,2032,4],[2647,10,2032,10,"_isAvailable"],[2647,22,2032,22,"_isAvailable"],[2647,23,2032,22],[2647,25,2032,25],[2648,6,2033,8],[2648,13,2033,15],[2648,17,2033,19],[2649,4,2034,4],[2650,4,2035,4],[2650,10,2035,10,"_set"],[2650,14,2035,14,"_set"],[2650,15,2035,15,"key"],[2650,18,2035,18],[2650,20,2035,20,"value"],[2650,25,2035,25],[2650,27,2035,27],[2651,6,2036,8],[2651,10,2036,12],[2651,11,2036,13,"storage"],[2651,18,2036,20],[2651,19,2036,21,"key"],[2651,22,2036,24],[2651,23,2036,25],[2651,26,2036,28,"value"],[2651,31,2036,33],[2652,4,2037,4],[2653,4,2038,4],[2653,10,2038,10,"_get"],[2653,14,2038,14,"_get"],[2653,15,2038,15,"key"],[2653,18,2038,18],[2653,20,2038,20],[2654,6,2039,8],[2654,12,2039,14,"value"],[2654,17,2039,19],[2654,20,2039,22],[2654,24,2039,26],[2654,25,2039,27,"storage"],[2654,32,2039,34],[2654,33,2039,35,"key"],[2654,36,2039,38],[2654,37,2039,39],[2655,6,2040,8],[2655,13,2040,15,"value"],[2655,18,2040,20],[2655,23,2040,25,"undefined"],[2655,32,2040,34],[2655,35,2040,37],[2655,39,2040,41],[2655,42,2040,44,"value"],[2655,47,2040,49],[2656,4,2041,4],[2657,4,2042,4],[2657,10,2042,10,"_remove"],[2657,17,2042,17,"_remove"],[2657,18,2042,18,"key"],[2657,21,2042,21],[2657,23,2042,23],[2658,6,2043,8],[2658,13,2043,15],[2658,17,2043,19],[2658,18,2043,20,"storage"],[2658,25,2043,27],[2658,26,2043,28,"key"],[2658,29,2043,31],[2658,30,2043,32],[2659,4,2044,4],[2660,4,2045,4,"_addListener"],[2660,16,2045,16,"_addListener"],[2660,17,2045,17,"_key"],[2660,21,2045,21],[2660,23,2045,23,"_listener"],[2660,32,2045,32],[2660,34,2045,34],[2661,6,2046,8],[2662,6,2047,8],[2663,4,2048,4],[2664,4,2049,4,"_removeListener"],[2664,19,2049,19,"_removeListener"],[2664,20,2049,20,"_key"],[2664,24,2049,24],[2664,26,2049,26,"_listener"],[2664,35,2049,35],[2664,37,2049,37],[2665,6,2050,8],[2666,6,2051,8],[2667,4,2052,4],[2668,2,2053,0],[2669,2,2054,0,"InMemoryPersistence"],[2669,21,2054,19],[2669,22,2054,20,"type"],[2669,26,2054,24],[2669,29,2054,27],[2669,35,2054,33],[2670,2,2055,0],[2671,0,2056,0],[2672,0,2057,0],[2673,0,2058,0],[2674,0,2059,0],[2675,2,2060,0],[2675,8,2060,6,"inMemoryPersistence"],[2675,27,2060,25],[2675,30,2060,28,"InMemoryPersistence"],[2675,49,2060,47],[2677,2,2062,0],[2678,0,2063,0],[2679,0,2064,0],[2680,0,2065,0],[2681,0,2066,0],[2682,0,2067,0],[2683,0,2068,0],[2684,0,2069,0],[2685,0,2070,0],[2686,0,2071,0],[2687,0,2072,0],[2688,0,2073,0],[2689,0,2074,0],[2690,0,2075,0],[2691,0,2076,0],[2692,0,2077,0],[2693,2,2078,0],[2693,11,2078,9,"_persistenceKeyName"],[2693,30,2078,28,"_persistenceKeyName"],[2693,31,2078,29,"key"],[2693,34,2078,32],[2693,36,2078,34,"apiKey"],[2693,42,2078,40],[2693,44,2078,42,"appName"],[2693,51,2078,49],[2693,53,2078,51],[2694,4,2079,4],[2694,11,2079,11],[2694,14,2079,14],[2694,24,2079,24],[2694,25,2079,25],[2694,56,2079,56,"key"],[2694,59,2079,59],[2694,63,2079,63,"apiKey"],[2694,69,2079,69],[2694,73,2079,73,"appName"],[2694,80,2079,80],[2694,82,2079,82],[2695,2,2080,0],[2696,2,2081,0],[2696,8,2081,6,"PersistenceUserManager"],[2696,30,2081,28],[2696,31,2081,29],[2697,4,2082,4,"constructor"],[2697,15,2082,15,"constructor"],[2697,16,2082,16,"persistence"],[2697,27,2082,27],[2697,29,2082,29,"auth"],[2697,33,2082,33],[2697,35,2082,35,"userKey"],[2697,42,2082,42],[2697,44,2082,44],[2698,6,2083,8],[2698,10,2083,12],[2698,11,2083,13,"persistence"],[2698,22,2083,24],[2698,25,2083,27,"persistence"],[2698,36,2083,38],[2699,6,2084,8],[2699,10,2084,12],[2699,11,2084,13,"auth"],[2699,15,2084,17],[2699,18,2084,20,"auth"],[2699,22,2084,24],[2700,6,2085,8],[2700,10,2085,12],[2700,11,2085,13,"userKey"],[2700,18,2085,20],[2700,21,2085,23,"userKey"],[2700,28,2085,30],[2701,6,2086,8],[2701,12,2086,14],[2702,8,2086,16,"config"],[2702,14,2086,22],[2703,8,2086,24,"name"],[2704,6,2086,29],[2704,7,2086,30],[2704,10,2086,33],[2704,14,2086,37],[2704,15,2086,38,"auth"],[2704,19,2086,42],[2705,6,2087,8],[2705,10,2087,12],[2705,11,2087,13,"fullUserKey"],[2705,22,2087,24],[2705,25,2087,27,"_persistenceKeyName"],[2705,44,2087,46],[2705,45,2087,47],[2705,49,2087,51],[2705,50,2087,52,"userKey"],[2705,57,2087,59],[2705,59,2087,61,"config"],[2705,65,2087,67],[2705,66,2087,68,"apiKey"],[2705,72,2087,74],[2705,74,2087,76,"name"],[2705,78,2087,80],[2705,79,2087,81],[2706,6,2088,8],[2706,10,2088,12],[2706,11,2088,13,"fullPersistenceKey"],[2706,29,2088,31],[2706,32,2088,34,"_persistenceKeyName"],[2706,51,2088,53],[2706,52,2088,54],[2706,65,2088,67],[2706,66,2088,68],[2706,98,2088,100,"config"],[2706,104,2088,106],[2706,105,2088,107,"apiKey"],[2706,111,2088,113],[2706,113,2088,115,"name"],[2706,117,2088,119],[2706,118,2088,120],[2707,6,2089,8],[2707,10,2089,12],[2707,11,2089,13,"boundEventHandler"],[2707,28,2089,30],[2707,31,2089,33,"auth"],[2707,35,2089,37],[2707,36,2089,38,"_onStorageEvent"],[2707,51,2089,53],[2707,52,2089,54,"bind"],[2707,56,2089,58],[2707,57,2089,59,"auth"],[2707,61,2089,63],[2707,62,2089,64],[2708,6,2090,8],[2708,10,2090,12],[2708,11,2090,13,"persistence"],[2708,22,2090,24],[2708,23,2090,25,"_addListener"],[2708,35,2090,37],[2708,36,2090,38],[2708,40,2090,42],[2708,41,2090,43,"fullUserKey"],[2708,52,2090,54],[2708,54,2090,56],[2708,58,2090,60],[2708,59,2090,61,"boundEventHandler"],[2708,76,2090,78],[2708,77,2090,79],[2709,4,2091,4],[2710,4,2092,4,"setCurrentUser"],[2710,18,2092,18,"setCurrentUser"],[2710,19,2092,19,"user"],[2710,23,2092,23],[2710,25,2092,25],[2711,6,2093,8],[2711,13,2093,15],[2711,17,2093,19],[2711,18,2093,20,"persistence"],[2711,29,2093,31],[2711,30,2093,32,"_set"],[2711,34,2093,36],[2711,35,2093,37],[2711,39,2093,41],[2711,40,2093,42,"fullUserKey"],[2711,51,2093,53],[2711,53,2093,55,"user"],[2711,57,2093,59],[2711,58,2093,60,"toJSON"],[2711,64,2093,66],[2711,65,2093,67],[2711,66,2093,68],[2711,67,2093,69],[2712,4,2094,4],[2713,4,2095,4],[2713,10,2095,10,"getCurrentUser"],[2713,24,2095,24,"getCurrentUser"],[2713,25,2095,24],[2713,27,2095,27],[2714,6,2096,8],[2714,12,2096,14,"blob"],[2714,16,2096,18],[2714,19,2096,21],[2714,25,2096,27],[2714,29,2096,31],[2714,30,2096,32,"persistence"],[2714,41,2096,43],[2714,42,2096,44,"_get"],[2714,46,2096,48],[2714,47,2096,49],[2714,51,2096,53],[2714,52,2096,54,"fullUserKey"],[2714,63,2096,65],[2714,64,2096,66],[2715,6,2097,8],[2715,10,2097,12],[2715,11,2097,13,"blob"],[2715,15,2097,17],[2715,17,2097,19],[2716,8,2098,12],[2716,15,2098,19],[2716,19,2098,23],[2717,6,2099,8],[2718,6,2100,8],[2718,10,2100,12],[2718,17,2100,19,"blob"],[2718,21,2100,23],[2718,26,2100,28],[2718,34,2100,36],[2718,36,2100,38],[2719,8,2101,12],[2719,14,2101,18,"response"],[2719,22,2101,26],[2719,25,2101,29],[2719,31,2101,35,"getAccountInfo"],[2719,45,2101,49],[2719,46,2101,50],[2719,50,2101,54],[2719,51,2101,55,"auth"],[2719,55,2101,59],[2719,57,2101,61],[2720,10,2101,63,"idToken"],[2720,17,2101,70],[2720,19,2101,72,"blob"],[2721,8,2101,77],[2721,9,2101,78],[2721,10,2101,79],[2721,11,2101,80,"catch"],[2721,16,2101,85],[2721,17,2101,86],[2721,23,2101,92,"undefined"],[2721,32,2101,101],[2721,33,2101,102],[2722,8,2102,12],[2722,12,2102,16],[2722,13,2102,17,"response"],[2722,21,2102,25],[2722,23,2102,27],[2723,10,2103,16],[2723,17,2103,23],[2723,21,2103,27],[2724,8,2104,12],[2725,8,2105,12],[2725,15,2105,19,"UserImpl"],[2725,23,2105,27],[2725,24,2105,28,"_fromGetAccountInfoResponse"],[2725,51,2105,55],[2725,52,2105,56],[2725,56,2105,60],[2725,57,2105,61,"auth"],[2725,61,2105,65],[2725,63,2105,67,"response"],[2725,71,2105,75],[2725,73,2105,77,"blob"],[2725,77,2105,81],[2725,78,2105,82],[2726,6,2106,8],[2727,6,2107,8],[2727,13,2107,15,"UserImpl"],[2727,21,2107,23],[2727,22,2107,24,"_fromJSON"],[2727,31,2107,33],[2727,32,2107,34],[2727,36,2107,38],[2727,37,2107,39,"auth"],[2727,41,2107,43],[2727,43,2107,45,"blob"],[2727,47,2107,49],[2727,48,2107,50],[2728,4,2108,4],[2729,4,2109,4,"removeCurrentUser"],[2729,21,2109,21,"removeCurrentUser"],[2729,22,2109,21],[2729,24,2109,24],[2730,6,2110,8],[2730,13,2110,15],[2730,17,2110,19],[2730,18,2110,20,"persistence"],[2730,29,2110,31],[2730,30,2110,32,"_remove"],[2730,37,2110,39],[2730,38,2110,40],[2730,42,2110,44],[2730,43,2110,45,"fullUserKey"],[2730,54,2110,56],[2730,55,2110,57],[2731,4,2111,4],[2732,4,2112,4,"savePersistenceForRedirect"],[2732,30,2112,30,"savePersistenceForRedirect"],[2732,31,2112,30],[2732,33,2112,33],[2733,6,2113,8],[2733,13,2113,15],[2733,17,2113,19],[2733,18,2113,20,"persistence"],[2733,29,2113,31],[2733,30,2113,32,"_set"],[2733,34,2113,36],[2733,35,2113,37],[2733,39,2113,41],[2733,40,2113,42,"fullPersistenceKey"],[2733,58,2113,60],[2733,60,2113,62],[2733,64,2113,66],[2733,65,2113,67,"persistence"],[2733,76,2113,78],[2733,77,2113,79,"type"],[2733,81,2113,83],[2733,82,2113,84],[2734,4,2114,4],[2735,4,2115,4],[2735,10,2115,10,"setPersistence"],[2735,24,2115,24,"setPersistence"],[2735,25,2115,25,"newPersistence"],[2735,39,2115,39],[2735,41,2115,41],[2736,6,2116,8],[2736,10,2116,12],[2736,14,2116,16],[2736,15,2116,17,"persistence"],[2736,26,2116,28],[2736,31,2116,33,"newPersistence"],[2736,45,2116,47],[2736,47,2116,49],[2737,8,2117,12],[2738,6,2118,8],[2739,6,2119,8],[2739,12,2119,14,"currentUser"],[2739,23,2119,25],[2739,26,2119,28],[2739,32,2119,34],[2739,36,2119,38],[2739,37,2119,39,"getCurrentUser"],[2739,51,2119,53],[2739,52,2119,54],[2739,53,2119,55],[2740,6,2120,8],[2740,12,2120,14],[2740,16,2120,18],[2740,17,2120,19,"removeCurrentUser"],[2740,34,2120,36],[2740,35,2120,37],[2740,36,2120,38],[2741,6,2121,8],[2741,10,2121,12],[2741,11,2121,13,"persistence"],[2741,22,2121,24],[2741,25,2121,27,"newPersistence"],[2741,39,2121,41],[2742,6,2122,8],[2742,10,2122,12,"currentUser"],[2742,21,2122,23],[2742,23,2122,25],[2743,8,2123,12],[2743,15,2123,19],[2743,19,2123,23],[2743,20,2123,24,"setCurrentUser"],[2743,34,2123,38],[2743,35,2123,39,"currentUser"],[2743,46,2123,50],[2743,47,2123,51],[2744,6,2124,8],[2745,4,2125,4],[2746,4,2126,4,"delete"],[2746,10,2126,10,"delete"],[2746,11,2126,10],[2746,13,2126,13],[2747,6,2127,8],[2747,10,2127,12],[2747,11,2127,13,"persistence"],[2747,22,2127,24],[2747,23,2127,25,"_removeListener"],[2747,38,2127,40],[2747,39,2127,41],[2747,43,2127,45],[2747,44,2127,46,"fullUserKey"],[2747,55,2127,57],[2747,57,2127,59],[2747,61,2127,63],[2747,62,2127,64,"boundEventHandler"],[2747,79,2127,81],[2747,80,2127,82],[2748,4,2128,4],[2749,4,2129,4],[2749,17,2129,17,"create"],[2749,23,2129,23,"create"],[2749,24,2129,24,"auth"],[2749,28,2129,28],[2749,30,2129,30,"persistenceHierarchy"],[2749,50,2129,50],[2749,52,2129,52,"userKey"],[2749,59,2129,59],[2749,62,2129,62],[2749,72,2129,72],[2749,73,2129,73],[2749,98,2129,98],[2750,6,2130,8],[2750,10,2130,12],[2750,11,2130,13,"persistenceHierarchy"],[2750,31,2130,33],[2750,32,2130,34,"length"],[2750,38,2130,40],[2750,40,2130,42],[2751,8,2131,12],[2751,15,2131,19],[2751,19,2131,23,"PersistenceUserManager"],[2751,41,2131,45],[2751,42,2131,46,"_getInstance"],[2751,54,2131,58],[2751,55,2131,59,"inMemoryPersistence"],[2751,74,2131,78],[2751,75,2131,79],[2751,77,2131,81,"auth"],[2751,81,2131,85],[2751,83,2131,87,"userKey"],[2751,90,2131,94],[2751,91,2131,95],[2752,6,2132,8],[2753,6,2133,8],[2754,6,2134,8],[2754,12,2134,14,"availablePersistences"],[2754,33,2134,35],[2754,36,2134,38],[2754,37,2134,39],[2754,43,2134,45,"Promise"],[2754,50,2134,52],[2754,51,2134,53,"all"],[2754,54,2134,56],[2754,55,2134,57,"persistenceHierarchy"],[2754,75,2134,77],[2754,76,2134,78,"map"],[2754,79,2134,81],[2754,80,2134,82],[2754,86,2134,89,"persistence"],[2754,97,2134,100],[2754,101,2134,105],[2755,8,2135,12],[2755,12,2135,16],[2755,18,2135,22,"persistence"],[2755,29,2135,33],[2755,30,2135,34,"_isAvailable"],[2755,42,2135,46],[2755,43,2135,47],[2755,44,2135,48],[2755,46,2135,50],[2756,10,2136,16],[2756,17,2136,23,"persistence"],[2756,28,2136,34],[2757,8,2137,12],[2758,8,2138,12],[2758,15,2138,19,"undefined"],[2758,24,2138,28],[2759,6,2139,8],[2759,7,2139,9],[2759,8,2139,10],[2759,9,2139,11],[2759,11,2139,13,"filter"],[2759,17,2139,19],[2759,18,2139,20,"persistence"],[2759,29,2139,31],[2759,33,2139,35,"persistence"],[2759,44,2139,46],[2759,45,2139,47],[2760,6,2140,8],[2761,6,2141,8],[2761,10,2141,12,"selectedPersistence"],[2761,29,2141,31],[2761,32,2141,34,"availablePersistences"],[2761,53,2141,55],[2761,54,2141,56],[2761,55,2141,57],[2761,56,2141,58],[2761,60,2142,12,"_getInstance"],[2761,72,2142,24],[2761,73,2142,25,"inMemoryPersistence"],[2761,92,2142,44],[2761,93,2142,45],[2762,6,2143,8],[2762,12,2143,14,"key"],[2762,15,2143,17],[2762,18,2143,20,"_persistenceKeyName"],[2762,37,2143,39],[2762,38,2143,40,"userKey"],[2762,45,2143,47],[2762,47,2143,49,"auth"],[2762,51,2143,53],[2762,52,2143,54,"config"],[2762,58,2143,60],[2762,59,2143,61,"apiKey"],[2762,65,2143,67],[2762,67,2143,69,"auth"],[2762,71,2143,73],[2762,72,2143,74,"name"],[2762,76,2143,78],[2762,77,2143,79],[2763,6,2144,8],[2764,6,2145,8],[2765,6,2146,8],[2765,10,2146,12,"userToMigrate"],[2765,23,2146,25],[2765,26,2146,28],[2765,30,2146,32],[2766,6,2147,8],[2767,6,2148,8],[2768,6,2149,8],[2769,6,2150,8],[2769,11,2150,13],[2769,17,2150,19,"persistence"],[2769,28,2150,30],[2769,32,2150,34,"persistenceHierarchy"],[2769,52,2150,54],[2769,54,2150,56],[2770,8,2151,12],[2770,12,2151,16],[2771,10,2152,16],[2771,16,2152,22,"blob"],[2771,20,2152,26],[2771,23,2152,29],[2771,29,2152,35,"persistence"],[2771,40,2152,46],[2771,41,2152,47,"_get"],[2771,45,2152,51],[2771,46,2152,52,"key"],[2771,49,2152,55],[2771,50,2152,56],[2772,10,2153,16],[2772,14,2153,20,"blob"],[2772,18,2153,24],[2772,20,2153,26],[2773,12,2154,20],[2773,16,2154,24,"user"],[2773,20,2154,28],[2774,12,2155,20],[2774,16,2155,24],[2774,23,2155,31,"blob"],[2774,27,2155,35],[2774,32,2155,40],[2774,40,2155,48],[2774,42,2155,50],[2775,14,2156,24],[2775,20,2156,30,"response"],[2775,28,2156,38],[2775,31,2156,41],[2775,37,2156,47,"getAccountInfo"],[2775,51,2156,61],[2775,52,2156,62,"auth"],[2775,56,2156,66],[2775,58,2156,68],[2776,16,2157,28,"idToken"],[2776,23,2157,35],[2776,25,2157,37,"blob"],[2777,14,2158,24],[2777,15,2158,25],[2777,16,2158,26],[2777,17,2158,27,"catch"],[2777,22,2158,32],[2777,23,2158,33],[2777,29,2158,39,"undefined"],[2777,38,2158,48],[2777,39,2158,49],[2778,14,2159,24],[2778,18,2159,28],[2778,19,2159,29,"response"],[2778,27,2159,37],[2778,29,2159,39],[2779,16,2160,28],[2780,14,2161,24],[2781,14,2162,24,"user"],[2781,18,2162,28],[2781,21,2162,31],[2781,27,2162,37,"UserImpl"],[2781,35,2162,45],[2781,36,2162,46,"_fromGetAccountInfoResponse"],[2781,63,2162,73],[2781,64,2162,74,"auth"],[2781,68,2162,78],[2781,70,2162,80,"response"],[2781,78,2162,88],[2781,80,2162,90,"blob"],[2781,84,2162,94],[2781,85,2162,95],[2782,12,2163,20],[2782,13,2163,21],[2782,19,2164,25],[2783,14,2165,24,"user"],[2783,18,2165,28],[2783,21,2165,31,"UserImpl"],[2783,29,2165,39],[2783,30,2165,40,"_fromJSON"],[2783,39,2165,49],[2783,40,2165,50,"auth"],[2783,44,2165,54],[2783,46,2165,56,"blob"],[2783,50,2165,60],[2783,51,2165,61],[2783,52,2165,62],[2783,53,2165,63],[2784,12,2166,20],[2785,12,2167,20],[2785,16,2167,24,"persistence"],[2785,27,2167,35],[2785,32,2167,40,"selectedPersistence"],[2785,51,2167,59],[2785,53,2167,61],[2786,14,2168,24,"userToMigrate"],[2786,27,2168,37],[2786,30,2168,40,"user"],[2786,34,2168,44],[2787,12,2169,20],[2788,12,2170,20,"selectedPersistence"],[2788,31,2170,39],[2788,34,2170,42,"persistence"],[2788,45,2170,53],[2789,12,2171,20],[2790,10,2172,16],[2791,8,2173,12],[2791,9,2173,13],[2791,10,2174,12],[2791,16,2174,18],[2791,17,2174,20],[2792,6,2175,8],[2793,6,2176,8],[2794,6,2177,8],[2795,6,2178,8],[2795,12,2178,14,"migrationHierarchy"],[2795,30,2178,32],[2795,33,2178,35,"availablePersistences"],[2795,54,2178,56],[2795,55,2178,57,"filter"],[2795,61,2178,63],[2795,62,2178,64,"p"],[2795,63,2178,65],[2795,67,2178,69,"p"],[2795,68,2178,70],[2795,69,2178,71,"_shouldAllowMigration"],[2795,90,2178,92],[2795,91,2178,93],[2796,6,2179,8],[2797,6,2180,8],[2797,10,2180,12],[2797,11,2180,13,"selectedPersistence"],[2797,30,2180,32],[2797,31,2180,33,"_shouldAllowMigration"],[2797,52,2180,54],[2797,56,2181,12],[2797,57,2181,13,"migrationHierarchy"],[2797,75,2181,31],[2797,76,2181,32,"length"],[2797,82,2181,38],[2797,84,2181,40],[2798,8,2182,12],[2798,15,2182,19],[2798,19,2182,23,"PersistenceUserManager"],[2798,41,2182,45],[2798,42,2182,46,"selectedPersistence"],[2798,61,2182,65],[2798,63,2182,67,"auth"],[2798,67,2182,71],[2798,69,2182,73,"userKey"],[2798,76,2182,80],[2798,77,2182,81],[2799,6,2183,8],[2800,6,2184,8,"selectedPersistence"],[2800,25,2184,27],[2800,28,2184,30,"migrationHierarchy"],[2800,46,2184,48],[2800,47,2184,49],[2800,48,2184,50],[2800,49,2184,51],[2801,6,2185,8],[2801,10,2185,12,"userToMigrate"],[2801,23,2185,25],[2801,25,2185,27],[2802,8,2186,12],[2803,8,2187,12],[2804,8,2188,12],[2804,14,2188,18,"selectedPersistence"],[2804,33,2188,37],[2804,34,2188,38,"_set"],[2804,38,2188,42],[2804,39,2188,43,"key"],[2804,42,2188,46],[2804,44,2188,48,"userToMigrate"],[2804,57,2188,61],[2804,58,2188,62,"toJSON"],[2804,64,2188,68],[2804,65,2188,69],[2804,66,2188,70],[2804,67,2188,71],[2805,6,2189,8],[2806,6,2190,8],[2807,6,2191,8],[2808,6,2192,8],[2808,12,2192,14,"Promise"],[2808,19,2192,21],[2808,20,2192,22,"all"],[2808,23,2192,25],[2808,24,2192,26,"persistenceHierarchy"],[2808,44,2192,46],[2808,45,2192,47,"map"],[2808,48,2192,50],[2808,49,2192,51],[2808,55,2192,58,"persistence"],[2808,66,2192,69],[2808,70,2192,74],[2809,8,2193,12],[2809,12,2193,16,"persistence"],[2809,23,2193,27],[2809,28,2193,32,"selectedPersistence"],[2809,47,2193,51],[2809,49,2193,53],[2810,10,2194,16],[2810,14,2194,20],[2811,12,2195,20],[2811,18,2195,26,"persistence"],[2811,29,2195,37],[2811,30,2195,38,"_remove"],[2811,37,2195,45],[2811,38,2195,46,"key"],[2811,41,2195,49],[2811,42,2195,50],[2812,10,2196,16],[2812,11,2196,17],[2812,12,2197,16],[2812,18,2197,22],[2812,19,2197,24],[2813,8,2198,12],[2814,6,2199,8],[2814,7,2199,9],[2814,8,2199,10],[2814,9,2199,11],[2815,6,2200,8],[2815,13,2200,15],[2815,17,2200,19,"PersistenceUserManager"],[2815,39,2200,41],[2815,40,2200,42,"selectedPersistence"],[2815,59,2200,61],[2815,61,2200,63,"auth"],[2815,65,2200,67],[2815,67,2200,69,"userKey"],[2815,74,2200,76],[2815,75,2200,77],[2816,4,2201,4],[2817,2,2202,0],[2819,2,2204,0],[2820,0,2205,0],[2821,0,2206,0],[2822,0,2207,0],[2823,0,2208,0],[2824,0,2209,0],[2825,0,2210,0],[2826,0,2211,0],[2827,0,2212,0],[2828,0,2213,0],[2829,0,2214,0],[2830,0,2215,0],[2831,0,2216,0],[2832,0,2217,0],[2833,0,2218,0],[2834,0,2219,0],[2835,2,2220,0],[2836,0,2221,0],[2837,0,2222,0],[2838,2,2223,0],[2838,11,2223,9,"_getBrowserName"],[2838,26,2223,24,"_getBrowserName"],[2838,27,2223,25,"userAgent"],[2838,36,2223,34],[2838,38,2223,36],[2839,4,2224,4],[2839,10,2224,10,"ua"],[2839,12,2224,12],[2839,15,2224,15,"userAgent"],[2839,24,2224,24],[2839,25,2224,25,"toLowerCase"],[2839,36,2224,36],[2839,37,2224,37],[2839,38,2224,38],[2840,4,2225,4],[2840,8,2225,8,"ua"],[2840,10,2225,10],[2840,11,2225,11,"includes"],[2840,19,2225,19],[2840,20,2225,20],[2840,28,2225,28],[2840,29,2225,29],[2840,33,2225,33,"ua"],[2840,35,2225,35],[2840,36,2225,36,"includes"],[2840,44,2225,44],[2840,45,2225,45],[2840,51,2225,51],[2840,52,2225,52],[2840,56,2225,56,"ua"],[2840,58,2225,58],[2840,59,2225,59,"includes"],[2840,67,2225,67],[2840,68,2225,68],[2840,76,2225,76],[2840,77,2225,77],[2840,79,2225,79],[2841,6,2226,8],[2841,13,2226,15],[2841,20,2226,22],[2841,21,2226,23],[2842,4,2227,4],[2842,5,2227,5],[2842,11,2228,9],[2842,15,2228,13,"_isIEMobile"],[2842,26,2228,24],[2842,27,2228,25,"ua"],[2842,29,2228,27],[2842,30,2228,28],[2842,32,2228,30],[2843,6,2229,8],[2844,6,2230,8],[2844,13,2230,15],[2844,23,2230,25],[2844,24,2230,26],[2845,4,2231,4],[2845,5,2231,5],[2845,11,2232,9],[2845,15,2232,13,"ua"],[2845,17,2232,15],[2845,18,2232,16,"includes"],[2845,26,2232,24],[2845,27,2232,25],[2845,33,2232,31],[2845,34,2232,32],[2845,38,2232,36,"ua"],[2845,40,2232,38],[2845,41,2232,39,"includes"],[2845,49,2232,47],[2845,50,2232,48],[2845,60,2232,58],[2845,61,2232,59],[2845,63,2232,61],[2846,6,2233,8],[2846,13,2233,15],[2846,17,2233,19],[2846,18,2233,20],[2847,4,2234,4],[2847,5,2234,5],[2847,11,2235,9],[2847,15,2235,13,"ua"],[2847,17,2235,15],[2847,18,2235,16,"includes"],[2847,26,2235,24],[2847,27,2235,25],[2847,34,2235,32],[2847,35,2235,33],[2847,37,2235,35],[2848,6,2236,8],[2848,13,2236,15],[2848,19,2236,21],[2848,20,2236,22],[2849,4,2237,4],[2849,5,2237,5],[2849,11,2238,9],[2849,15,2238,13,"_isFirefox"],[2849,25,2238,23],[2849,26,2238,24,"ua"],[2849,28,2238,26],[2849,29,2238,27],[2849,31,2238,29],[2850,6,2239,8],[2850,13,2239,15],[2850,22,2239,24],[2850,23,2239,25],[2851,4,2240,4],[2851,5,2240,5],[2851,11,2241,9],[2851,15,2241,13,"ua"],[2851,17,2241,15],[2851,18,2241,16,"includes"],[2851,26,2241,24],[2851,27,2241,25],[2851,34,2241,32],[2851,35,2241,33],[2851,37,2241,35],[2852,6,2242,8],[2852,13,2242,15],[2852,19,2242,21],[2852,20,2242,22],[2853,4,2243,4],[2853,5,2243,5],[2853,11,2244,9],[2853,15,2244,13,"_isBlackBerry"],[2853,28,2244,26],[2853,29,2244,27,"ua"],[2853,31,2244,29],[2853,32,2244,30],[2853,34,2244,32],[2854,6,2245,8],[2855,6,2246,8],[2855,13,2246,15],[2855,25,2246,27],[2855,26,2246,28],[2856,4,2247,4],[2856,5,2247,5],[2856,11,2248,9],[2856,15,2248,13,"_isWebOS"],[2856,23,2248,21],[2856,24,2248,22,"ua"],[2856,26,2248,24],[2856,27,2248,25],[2856,29,2248,27],[2857,6,2249,8],[2858,6,2250,8],[2858,13,2250,15],[2858,20,2250,22],[2858,21,2250,23],[2859,4,2251,4],[2859,5,2251,5],[2859,11,2252,9],[2859,15,2252,13,"_isSafari"],[2859,24,2252,22],[2859,25,2252,23,"ua"],[2859,27,2252,25],[2859,28,2252,26],[2859,30,2252,28],[2860,6,2253,8],[2860,13,2253,15],[2860,21,2253,23],[2860,22,2253,24],[2861,4,2254,4],[2861,5,2254,5],[2861,11,2255,9],[2861,15,2255,13],[2861,16,2255,14,"ua"],[2861,18,2255,16],[2861,19,2255,17,"includes"],[2861,27,2255,25],[2861,28,2255,26],[2861,37,2255,35],[2861,38,2255,36],[2861,42,2255,40,"_isChromeIOS"],[2861,54,2255,52],[2861,55,2255,53,"ua"],[2861,57,2255,55],[2861,58,2255,56],[2861,63,2256,8],[2861,64,2256,9,"ua"],[2861,66,2256,11],[2861,67,2256,12,"includes"],[2861,75,2256,20],[2861,76,2256,21],[2861,83,2256,28],[2861,84,2256,29],[2861,86,2256,31],[2862,6,2257,8],[2862,13,2257,15],[2862,21,2257,23],[2862,22,2257,24],[2863,4,2258,4],[2863,5,2258,5],[2863,11,2259,9],[2863,15,2259,13,"_isAndroid"],[2863,25,2259,23],[2863,26,2259,24,"ua"],[2863,28,2259,26],[2863,29,2259,27],[2863,31,2259,29],[2864,6,2260,8],[2865,6,2261,8],[2865,13,2261,15],[2865,22,2261,24],[2865,23,2261,25],[2866,4,2262,4],[2866,5,2262,5],[2866,11,2263,9],[2867,6,2264,8],[2868,6,2265,8],[2868,12,2265,14,"re"],[2868,14,2265,16],[2868,17,2265,19],[2868,50,2265,52],[2869,6,2266,8],[2869,12,2266,14,"matches"],[2869,19,2266,21],[2869,22,2266,24,"userAgent"],[2869,31,2266,33],[2869,32,2266,34,"match"],[2869,37,2266,39],[2869,38,2266,40,"re"],[2869,40,2266,42],[2869,41,2266,43],[2870,6,2267,8],[2870,10,2267,12,"matches"],[2870,17,2267,19],[2870,19,2267,21,"length"],[2870,25,2267,27],[2870,30,2267,32],[2870,31,2267,33],[2870,33,2267,35],[2871,8,2268,12],[2871,15,2268,19,"matches"],[2871,22,2268,26],[2871,23,2268,27],[2871,24,2268,28],[2871,25,2268,29],[2872,6,2269,8],[2873,4,2270,4],[2874,4,2271,4],[2874,11,2271,11],[2874,18,2271,18],[2874,19,2271,19],[2875,2,2272,0],[2876,2,2273,0],[2876,11,2273,9,"_isFirefox"],[2876,21,2273,19,"_isFirefox"],[2876,22,2273,20,"ua"],[2876,24,2273,22],[2876,27,2273,25],[2876,31,2273,25,"getUA"],[2876,44,2273,30],[2876,45,2273,30,"getUA"],[2876,50,2273,30],[2876,52,2273,31],[2876,53,2273,32],[2876,55,2273,34],[2877,4,2274,4],[2877,11,2274,11],[2877,23,2274,23],[2877,24,2274,24,"test"],[2877,28,2274,28],[2877,29,2274,29,"ua"],[2877,31,2274,31],[2877,32,2274,32],[2878,2,2275,0],[2879,2,2276,0],[2879,11,2276,9,"_isSafari"],[2879,20,2276,18,"_isSafari"],[2879,21,2276,19,"userAgent"],[2879,30,2276,28],[2879,33,2276,31],[2879,37,2276,31,"getUA"],[2879,50,2276,36],[2879,51,2276,36,"getUA"],[2879,56,2276,36],[2879,58,2276,37],[2879,59,2276,38],[2879,61,2276,40],[2880,4,2277,4],[2880,10,2277,10,"ua"],[2880,12,2277,12],[2880,15,2277,15,"userAgent"],[2880,24,2277,24],[2880,25,2277,25,"toLowerCase"],[2880,36,2277,36],[2880,37,2277,37],[2880,38,2277,38],[2881,4,2278,4],[2881,11,2278,12,"ua"],[2881,13,2278,14],[2881,14,2278,15,"includes"],[2881,22,2278,23],[2881,23,2278,24],[2881,32,2278,33],[2881,33,2278,34],[2881,37,2279,8],[2881,38,2279,9,"ua"],[2881,40,2279,11],[2881,41,2279,12,"includes"],[2881,49,2279,20],[2881,50,2279,21],[2881,59,2279,30],[2881,60,2279,31],[2881,64,2280,8],[2881,65,2280,9,"ua"],[2881,67,2280,11],[2881,68,2280,12,"includes"],[2881,76,2280,20],[2881,77,2280,21],[2881,85,2280,29],[2881,86,2280,30],[2881,90,2281,8],[2881,91,2281,9,"ua"],[2881,93,2281,11],[2881,94,2281,12,"includes"],[2881,102,2281,20],[2881,103,2281,21],[2881,112,2281,30],[2881,113,2281,31],[2882,2,2282,0],[2883,2,2283,0],[2883,11,2283,9,"_isChromeIOS"],[2883,23,2283,21,"_isChromeIOS"],[2883,24,2283,22,"ua"],[2883,26,2283,24],[2883,29,2283,27],[2883,33,2283,27,"getUA"],[2883,46,2283,32],[2883,47,2283,32,"getUA"],[2883,52,2283,32],[2883,54,2283,33],[2883,55,2283,34],[2883,57,2283,36],[2884,4,2284,4],[2884,11,2284,11],[2884,21,2284,21],[2884,22,2284,22,"test"],[2884,26,2284,26],[2884,27,2284,27,"ua"],[2884,29,2284,29],[2884,30,2284,30],[2885,2,2285,0],[2886,2,2286,0],[2886,11,2286,9,"_isIEMobile"],[2886,22,2286,20,"_isIEMobile"],[2886,23,2286,21,"ua"],[2886,25,2286,23],[2886,28,2286,26],[2886,32,2286,26,"getUA"],[2886,45,2286,31],[2886,46,2286,31,"getUA"],[2886,51,2286,31],[2886,53,2286,32],[2886,54,2286,33],[2886,56,2286,35],[2887,4,2287,4],[2887,11,2287,11],[2887,22,2287,22],[2887,23,2287,23,"test"],[2887,27,2287,27],[2887,28,2287,28,"ua"],[2887,30,2287,30],[2887,31,2287,31],[2888,2,2288,0],[2889,2,2289,0],[2889,11,2289,9,"_isAndroid"],[2889,21,2289,19,"_isAndroid"],[2889,22,2289,20,"ua"],[2889,24,2289,22],[2889,27,2289,25],[2889,31,2289,25,"getUA"],[2889,44,2289,30],[2889,45,2289,30,"getUA"],[2889,50,2289,30],[2889,52,2289,31],[2889,53,2289,32],[2889,55,2289,34],[2890,4,2290,4],[2890,11,2290,11],[2890,21,2290,21],[2890,22,2290,22,"test"],[2890,26,2290,26],[2890,27,2290,27,"ua"],[2890,29,2290,29],[2890,30,2290,30],[2891,2,2291,0],[2892,2,2292,0],[2892,11,2292,9,"_isBlackBerry"],[2892,24,2292,22,"_isBlackBerry"],[2892,25,2292,23,"ua"],[2892,27,2292,25],[2892,30,2292,28],[2892,34,2292,28,"getUA"],[2892,47,2292,33],[2892,48,2292,33,"getUA"],[2892,53,2292,33],[2892,55,2292,34],[2892,56,2292,35],[2892,58,2292,37],[2893,4,2293,4],[2893,11,2293,11],[2893,24,2293,24],[2893,25,2293,25,"test"],[2893,29,2293,29],[2893,30,2293,30,"ua"],[2893,32,2293,32],[2893,33,2293,33],[2894,2,2294,0],[2895,2,2295,0],[2895,11,2295,9,"_isWebOS"],[2895,19,2295,17,"_isWebOS"],[2895,20,2295,18,"ua"],[2895,22,2295,20],[2895,25,2295,23],[2895,29,2295,23,"getUA"],[2895,42,2295,28],[2895,43,2295,28,"getUA"],[2895,48,2295,28],[2895,50,2295,29],[2895,51,2295,30],[2895,53,2295,32],[2896,4,2296,4],[2896,11,2296,11],[2896,19,2296,19],[2896,20,2296,20,"test"],[2896,24,2296,24],[2896,25,2296,25,"ua"],[2896,27,2296,27],[2896,28,2296,28],[2897,2,2297,0],[2898,2,2298,0],[2898,11,2298,9,"_isIOS"],[2898,17,2298,15,"_isIOS"],[2898,18,2298,16,"ua"],[2898,20,2298,18],[2898,23,2298,21],[2898,27,2298,21,"getUA"],[2898,40,2298,26],[2898,41,2298,26,"getUA"],[2898,46,2298,26],[2898,48,2298,27],[2898,49,2298,28],[2898,51,2298,30],[2899,4,2299,4],[2899,11,2299,12],[2899,30,2299,31],[2899,31,2299,32,"test"],[2899,35,2299,36],[2899,36,2299,37,"ua"],[2899,38,2299,39],[2899,39,2299,40],[2899,43,2300,9],[2899,55,2300,21],[2899,56,2300,22,"test"],[2899,60,2300,26],[2899,61,2300,27,"ua"],[2899,63,2300,29],[2899,64,2300,30],[2899,68,2300,34],[2899,77,2300,43],[2899,78,2300,44,"test"],[2899,82,2300,48],[2899,83,2300,49,"ua"],[2899,85,2300,51],[2899,86,2300,53],[2900,2,2301,0],[2901,2,2302,0],[2901,11,2302,9,"_isIOS7Or8"],[2901,21,2302,19,"_isIOS7Or8"],[2901,22,2302,20,"ua"],[2901,24,2302,22],[2901,27,2302,25],[2901,31,2302,25,"getUA"],[2901,44,2302,30],[2901,45,2302,30,"getUA"],[2901,50,2302,30],[2901,52,2302,31],[2901,53,2302,32],[2901,55,2302,34],[2902,4,2303,4],[2902,11,2303,12],[2902,41,2303,42],[2902,42,2303,43,"test"],[2902,46,2303,47],[2902,47,2303,48,"ua"],[2902,49,2303,50],[2902,50,2303,51],[2902,54,2304,8],[2902,84,2304,38],[2902,85,2304,39,"test"],[2902,89,2304,43],[2902,90,2304,44,"ua"],[2902,92,2304,46],[2902,93,2304,47],[2903,2,2305,0],[2904,2,2306,0],[2904,11,2306,9,"_isIOSStandalone"],[2904,27,2306,25,"_isIOSStandalone"],[2904,28,2306,26,"ua"],[2904,30,2306,28],[2904,33,2306,31],[2904,37,2306,31,"getUA"],[2904,50,2306,36],[2904,51,2306,36,"getUA"],[2904,56,2306,36],[2904,58,2306,37],[2904,59,2306,38],[2904,61,2306,40],[2905,4,2307,4],[2905,11,2307,11,"_isIOS"],[2905,17,2307,17],[2905,18,2307,18,"ua"],[2905,20,2307,20],[2905,21,2307,21],[2905,25,2307,25],[2905,26,2307,26],[2905,27,2307,27,"window"],[2905,33,2307,33],[2905,34,2307,34,"navigator"],[2905,43,2307,43],[2905,45,2307,45,"standalone"],[2905,55,2307,55],[2906,2,2308,0],[2907,2,2309,0],[2907,11,2309,9,"_isIE10"],[2907,18,2309,16,"_isIE10"],[2907,19,2309,16],[2907,21,2309,19],[2908,4,2310,4],[2908,11,2310,11],[2908,15,2310,11,"isIE"],[2908,28,2310,15],[2908,29,2310,15,"isIE"],[2908,33,2310,15],[2908,35,2310,16],[2908,36,2310,17],[2908,40,2310,21,"document"],[2908,48,2310,29],[2908,49,2310,30,"documentMode"],[2908,61,2310,42],[2908,66,2310,47],[2908,68,2310,49],[2909,2,2311,0],[2910,2,2312,0],[2910,11,2312,9,"_isMobileBrowser"],[2910,27,2312,25,"_isMobileBrowser"],[2910,28,2312,26,"ua"],[2910,30,2312,28],[2910,33,2312,31],[2910,37,2312,31,"getUA"],[2910,50,2312,36],[2910,51,2312,36,"getUA"],[2910,56,2312,36],[2910,58,2312,37],[2910,59,2312,38],[2910,61,2312,40],[2911,4,2313,4],[2912,4,2314,4],[2912,11,2314,12,"_isIOS"],[2912,17,2314,18],[2912,18,2314,19,"ua"],[2912,20,2314,21],[2912,21,2314,22],[2912,25,2315,8,"_isAndroid"],[2912,35,2315,18],[2912,36,2315,19,"ua"],[2912,38,2315,21],[2912,39,2315,22],[2912,43,2316,8,"_isWebOS"],[2912,51,2316,16],[2912,52,2316,17,"ua"],[2912,54,2316,19],[2912,55,2316,20],[2912,59,2317,8,"_isBlackBerry"],[2912,72,2317,21],[2912,73,2317,22,"ua"],[2912,75,2317,24],[2912,76,2317,25],[2912,80,2318,8],[2912,96,2318,24],[2912,97,2318,25,"test"],[2912,101,2318,29],[2912,102,2318,30,"ua"],[2912,104,2318,32],[2912,105,2318,33],[2912,109,2319,8,"_isIEMobile"],[2912,120,2319,19],[2912,121,2319,20,"ua"],[2912,123,2319,22],[2912,124,2319,23],[2913,2,2320,0],[2915,2,2322,0],[2916,0,2323,0],[2917,0,2324,0],[2918,0,2325,0],[2919,0,2326,0],[2920,0,2327,0],[2921,0,2328,0],[2922,0,2329,0],[2923,0,2330,0],[2924,0,2331,0],[2925,0,2332,0],[2926,0,2333,0],[2927,0,2334,0],[2928,0,2335,0],[2929,0,2336,0],[2930,0,2337,0],[2931,2,2338,0],[2932,0,2339,0],[2933,0,2340,0],[2934,2,2341,0],[2934,11,2341,9,"_getClientVersion"],[2934,28,2341,26,"_getClientVersion"],[2934,29,2341,27,"clientPlatform"],[2934,43,2341,41],[2934,45,2341,43,"frameworks"],[2934,55,2341,53],[2934,58,2341,56],[2934,60,2341,58],[2934,62,2341,60],[2935,4,2342,4],[2935,8,2342,8,"reportedPlatform"],[2935,24,2342,24],[2936,4,2343,4],[2936,12,2343,12,"clientPlatform"],[2936,26,2343,26],[2937,6,2344,8],[2937,11,2344,13],[2937,20,2344,22],[2937,21,2344,23],[2938,8,2345,12],[2939,8,2346,12,"reportedPlatform"],[2939,24,2346,28],[2939,27,2346,31,"_getBrowserName"],[2939,42,2346,46],[2939,43,2346,47],[2939,47,2346,47,"getUA"],[2939,60,2346,52],[2939,61,2346,52,"getUA"],[2939,66,2346,52],[2939,68,2346,53],[2939,69,2346,54],[2939,70,2346,55],[2940,8,2347,12],[2941,6,2348,8],[2941,11,2348,13],[2941,19,2348,21],[2941,20,2348,22],[2942,8,2349,12],[2943,8,2350,12],[2944,8,2351,12],[2945,8,2352,12,"reportedPlatform"],[2945,24,2352,28],[2945,27,2352,31],[2945,30,2352,34,"_getBrowserName"],[2945,45,2352,49],[2945,46,2352,50],[2945,50,2352,50,"getUA"],[2945,63,2352,55],[2945,64,2352,55,"getUA"],[2945,69,2352,55],[2945,71,2352,56],[2945,72,2352,57],[2945,73,2352,58],[2945,77,2352,62,"clientPlatform"],[2945,91,2352,76],[2945,93,2352,78],[2946,8,2353,12],[2947,6,2354,8],[2948,8,2355,12,"reportedPlatform"],[2948,24,2355,28],[2948,27,2355,31,"clientPlatform"],[2948,41,2355,45],[2949,4,2356,4],[2950,4,2357,4],[2950,10,2357,10,"reportedFrameworks"],[2950,28,2357,28],[2950,31,2357,31,"frameworks"],[2950,41,2357,41],[2950,42,2357,42,"length"],[2950,48,2357,48],[2950,51,2358,10,"frameworks"],[2950,61,2358,20],[2950,62,2358,21,"join"],[2950,66,2358,25],[2950,67,2358,26],[2950,70,2358,29],[2950,71,2358,30],[2950,74,2359,10],[2950,92,2359,28],[2950,93,2359,29],[2950,94,2359,30],[2951,4,2360,4],[2951,11,2360,11],[2951,14,2360,14,"reportedPlatform"],[2951,30,2360,30],[2951,34,2360,34],[2951,42,2360,42],[2951,43,2360,43],[2951,78,2360,78,"SDK_VERSION"],[2951,90,2360,89],[2951,91,2360,89,"SDK_VERSION"],[2951,102,2360,89],[2951,106,2360,93,"reportedFrameworks"],[2951,124,2360,111],[2951,126,2360,113],[2952,2,2361,0],[2954,2,2363,0],[2955,0,2364,0],[2956,0,2365,0],[2957,0,2366,0],[2958,0,2367,0],[2959,0,2368,0],[2960,0,2369,0],[2961,0,2370,0],[2962,0,2371,0],[2963,0,2372,0],[2964,0,2373,0],[2965,0,2374,0],[2966,0,2375,0],[2967,0,2376,0],[2968,0,2377,0],[2969,0,2378,0],[2970,2,2379,0],[2970,8,2379,6,"AuthMiddlewareQueue"],[2970,27,2379,25],[2970,28,2379,26],[2971,4,2380,4,"constructor"],[2971,15,2380,15,"constructor"],[2971,16,2380,16,"auth"],[2971,20,2380,20],[2971,22,2380,22],[2972,6,2381,8],[2972,10,2381,12],[2972,11,2381,13,"auth"],[2972,15,2381,17],[2972,18,2381,20,"auth"],[2972,22,2381,24],[2973,6,2382,8],[2973,10,2382,12],[2973,11,2382,13,"queue"],[2973,16,2382,18],[2973,19,2382,21],[2973,21,2382,23],[2974,4,2383,4],[2975,4,2384,4,"pushCallback"],[2975,16,2384,16,"pushCallback"],[2975,17,2384,17,"callback"],[2975,25,2384,25],[2975,27,2384,27,"onAbort"],[2975,34,2384,34],[2975,36,2384,36],[2976,6,2385,8],[2977,6,2386,8],[2978,6,2387,8],[2978,12,2387,14,"wrappedCallback"],[2978,27,2387,29],[2978,30,2387,33,"user"],[2978,34,2387,37],[2978,38,2387,42],[2978,42,2387,46,"Promise"],[2978,49,2387,53],[2978,50,2387,54],[2978,51,2387,55,"resolve"],[2978,58,2387,62],[2978,60,2387,64,"reject"],[2978,66,2387,70],[2978,71,2387,75],[2979,8,2388,12],[2979,12,2388,16],[2980,10,2389,16],[2980,16,2389,22,"result"],[2980,22,2389,28],[2980,25,2389,31,"callback"],[2980,33,2389,39],[2980,34,2389,40,"user"],[2980,38,2389,44],[2980,39,2389,45],[2981,10,2390,16],[2982,10,2391,16],[2983,10,2392,16,"resolve"],[2983,17,2392,23],[2983,18,2392,24,"result"],[2983,24,2392,30],[2983,25,2392,31],[2984,8,2393,12],[2984,9,2393,13],[2984,10,2394,12],[2984,17,2394,19,"e"],[2984,18,2394,20],[2984,20,2394,22],[2985,10,2395,16],[2986,10,2396,16,"reject"],[2986,16,2396,22],[2986,17,2396,23,"e"],[2986,18,2396,24],[2986,19,2396,25],[2987,8,2397,12],[2988,6,2398,8],[2988,7,2398,9],[2988,8,2398,10],[2989,6,2399,8],[2990,6,2400,8,"wrappedCallback"],[2990,21,2400,23],[2990,22,2400,24,"onAbort"],[2990,29,2400,31],[2990,32,2400,34,"onAbort"],[2990,39,2400,41],[2991,6,2401,8],[2991,10,2401,12],[2991,11,2401,13,"queue"],[2991,16,2401,18],[2991,17,2401,19,"push"],[2991,21,2401,23],[2991,22,2401,24,"wrappedCallback"],[2991,37,2401,39],[2991,38,2401,40],[2992,6,2402,8],[2992,12,2402,14,"index"],[2992,17,2402,19],[2992,20,2402,22],[2992,24,2402,26],[2992,25,2402,27,"queue"],[2992,30,2402,32],[2992,31,2402,33,"length"],[2992,37,2402,39],[2992,40,2402,42],[2992,41,2402,43],[2993,6,2403,8],[2993,13,2403,15],[2993,19,2403,21],[2994,8,2404,12],[2995,8,2405,12],[2996,8,2406,12],[2996,12,2406,16],[2996,13,2406,17,"queue"],[2996,18,2406,22],[2996,19,2406,23,"index"],[2996,24,2406,28],[2996,25,2406,29],[2996,28,2406,32],[2996,34,2406,38,"Promise"],[2996,41,2406,45],[2996,42,2406,46,"resolve"],[2996,49,2406,53],[2996,50,2406,54],[2996,51,2406,55],[2997,6,2407,8],[2997,7,2407,9],[2998,4,2408,4],[2999,4,2409,4],[2999,10,2409,10,"runMiddleware"],[2999,23,2409,23,"runMiddleware"],[2999,24,2409,24,"nextUser"],[2999,32,2409,32],[2999,34,2409,34],[3000,6,2410,8],[3000,10,2410,12],[3000,14,2410,16],[3000,15,2410,17,"auth"],[3000,19,2410,21],[3000,20,2410,22,"currentUser"],[3000,31,2410,33],[3000,36,2410,38,"nextUser"],[3000,44,2410,46],[3000,46,2410,48],[3001,8,2411,12],[3002,6,2412,8],[3003,6,2413,8],[3004,6,2414,8],[3005,6,2415,8],[3005,12,2415,14,"onAbortStack"],[3005,24,2415,26],[3005,27,2415,29],[3005,29,2415,31],[3006,6,2416,8],[3006,10,2416,12],[3007,8,2417,12],[3007,13,2417,17],[3007,19,2417,23,"beforeStateCallback"],[3007,38,2417,42],[3007,42,2417,46],[3007,46,2417,50],[3007,47,2417,51,"queue"],[3007,52,2417,56],[3007,54,2417,58],[3008,10,2418,16],[3008,16,2418,22,"beforeStateCallback"],[3008,35,2418,41],[3008,36,2418,42,"nextUser"],[3008,44,2418,50],[3008,45,2418,51],[3009,10,2419,16],[3010,10,2420,16],[3010,14,2420,20,"beforeStateCallback"],[3010,33,2420,39],[3010,34,2420,40,"onAbort"],[3010,41,2420,47],[3010,43,2420,49],[3011,12,2421,20,"onAbortStack"],[3011,24,2421,32],[3011,25,2421,33,"push"],[3011,29,2421,37],[3011,30,2421,38,"beforeStateCallback"],[3011,49,2421,57],[3011,50,2421,58,"onAbort"],[3011,57,2421,65],[3011,58,2421,66],[3012,10,2422,16],[3013,8,2423,12],[3014,6,2424,8],[3014,7,2424,9],[3014,8,2425,8],[3014,15,2425,15,"e"],[3014,16,2425,16],[3014,18,2425,18],[3015,8,2426,12],[3016,8,2427,12],[3017,8,2428,12,"onAbortStack"],[3017,20,2428,24],[3017,21,2428,25,"reverse"],[3017,28,2428,32],[3017,29,2428,33],[3017,30,2428,34],[3018,8,2429,12],[3018,13,2429,17],[3018,19,2429,23,"onAbort"],[3018,26,2429,30],[3018,30,2429,34,"onAbortStack"],[3018,42,2429,46],[3018,44,2429,48],[3019,10,2430,16],[3019,14,2430,20],[3020,12,2431,20,"onAbort"],[3020,19,2431,27],[3020,20,2431,28],[3020,21,2431,29],[3021,10,2432,16],[3021,11,2432,17],[3021,12,2433,16],[3021,19,2433,23,"_"],[3021,20,2433,24],[3021,22,2433,26],[3022,12,2434,20],[3023,10,2434,20],[3024,8,2436,12],[3025,8,2437,12],[3025,14,2437,18],[3025,18,2437,22],[3025,19,2437,23,"auth"],[3025,23,2437,27],[3025,24,2437,28,"_errorFactory"],[3025,37,2437,41],[3025,38,2437,42,"create"],[3025,44,2437,48],[3025,45,2437,49],[3025,60,2437,64],[3025,61,2437,65],[3025,96,2437,100],[3026,10,2438,16,"originalMessage"],[3026,25,2438,31],[3026,27,2438,33,"e"],[3026,28,2438,34],[3026,30,2438,36,"message"],[3027,8,2439,12],[3027,9,2439,13],[3027,10,2439,14],[3028,6,2440,8],[3029,4,2441,4],[3030,2,2442,0],[3032,2,2444,0],[3033,0,2445,0],[3034,0,2446,0],[3035,0,2447,0],[3036,0,2448,0],[3037,0,2449,0],[3038,0,2450,0],[3039,0,2451,0],[3040,0,2452,0],[3041,0,2453,0],[3042,0,2454,0],[3043,0,2455,0],[3044,0,2456,0],[3045,0,2457,0],[3046,0,2458,0],[3047,0,2459,0],[3048,2,2460,0],[3049,0,2461,0],[3050,0,2462,0],[3051,0,2463,0],[3052,0,2464,0],[3053,0,2465,0],[3054,0,2466,0],[3055,2,2467,0],[3055,17,2467,15,"_getPasswordPolicy"],[3055,35,2467,33,"_getPasswordPolicy"],[3055,36,2467,34,"auth"],[3055,40,2467,38],[3055,42,2467,40,"request"],[3055,49,2467,47],[3055,52,2467,50],[3055,53,2467,51],[3055,54,2467,52],[3055,56,2467,54],[3056,4,2468,4],[3056,11,2468,11,"_performApiRequest"],[3056,29,2468,29],[3056,30,2468,30,"auth"],[3056,34,2468,34],[3056,36,2468,36],[3056,41,2468,41],[3056,42,2468,42],[3056,64,2468,64],[3056,84,2468,84],[3056,85,2468,85],[3056,121,2468,121,"_addTidIfNecessary"],[3056,139,2468,139],[3056,140,2468,140,"auth"],[3056,144,2468,144],[3056,146,2468,146,"request"],[3056,153,2468,153],[3056,154,2468,154],[3056,155,2468,155],[3057,2,2469,0],[3059,2,2471,0],[3060,0,2472,0],[3061,0,2473,0],[3062,0,2474,0],[3063,0,2475,0],[3064,0,2476,0],[3065,0,2477,0],[3066,0,2478,0],[3067,0,2479,0],[3068,0,2480,0],[3069,0,2481,0],[3070,0,2482,0],[3071,0,2483,0],[3072,0,2484,0],[3073,0,2485,0],[3074,0,2486,0],[3075,2,2487,0],[3076,2,2488,0],[3076,8,2488,6,"MINIMUM_MIN_PASSWORD_LENGTH"],[3076,35,2488,33],[3076,38,2488,36],[3076,39,2488,37],[3077,2,2489,0],[3078,0,2490,0],[3079,0,2491,0],[3080,0,2492,0],[3081,0,2493,0],[3082,2,2494,0],[3082,8,2494,6,"PasswordPolicyImpl"],[3082,26,2494,24],[3082,27,2494,25],[3083,4,2495,4,"constructor"],[3083,15,2495,15,"constructor"],[3083,16,2495,16,"response"],[3083,24,2495,24],[3083,26,2495,26],[3084,6,2496,8],[3085,6,2497,8],[3085,12,2497,14,"responseOptions"],[3085,27,2497,29],[3085,30,2497,32,"response"],[3085,38,2497,40],[3085,39,2497,41,"customStrengthOptions"],[3085,60,2497,62],[3086,6,2498,8],[3086,10,2498,12],[3086,11,2498,13,"customStrengthOptions"],[3086,32,2498,34],[3086,35,2498,37],[3086,36,2498,38],[3086,37,2498,39],[3087,6,2499,8],[3088,6,2500,8],[3088,10,2500,12],[3088,11,2500,13,"customStrengthOptions"],[3088,32,2500,34],[3088,33,2500,35,"minPasswordLength"],[3088,50,2500,52],[3088,53,2501,12,"responseOptions"],[3088,68,2501,27],[3088,69,2501,28,"minPasswordLength"],[3088,86,2501,45],[3088,90,2501,49,"MINIMUM_MIN_PASSWORD_LENGTH"],[3088,117,2501,76],[3089,6,2502,8],[3089,10,2502,12,"responseOptions"],[3089,25,2502,27],[3089,26,2502,28,"maxPasswordLength"],[3089,43,2502,45],[3089,45,2502,47],[3090,8,2503,12],[3090,12,2503,16],[3090,13,2503,17,"customStrengthOptions"],[3090,34,2503,38],[3090,35,2503,39,"maxPasswordLength"],[3090,52,2503,56],[3090,55,2504,16,"responseOptions"],[3090,70,2504,31],[3090,71,2504,32,"maxPasswordLength"],[3090,88,2504,49],[3091,6,2505,8],[3092,6,2506,8],[3092,10,2506,12,"responseOptions"],[3092,25,2506,27],[3092,26,2506,28,"containsLowercaseCharacter"],[3092,52,2506,54],[3092,57,2506,59,"undefined"],[3092,66,2506,68],[3092,68,2506,70],[3093,8,2507,12],[3093,12,2507,16],[3093,13,2507,17,"customStrengthOptions"],[3093,34,2507,38],[3093,35,2507,39,"containsLowercaseLetter"],[3093,58,2507,62],[3093,61,2508,16,"responseOptions"],[3093,76,2508,31],[3093,77,2508,32,"containsLowercaseCharacter"],[3093,103,2508,58],[3094,6,2509,8],[3095,6,2510,8],[3095,10,2510,12,"responseOptions"],[3095,25,2510,27],[3095,26,2510,28,"containsUppercaseCharacter"],[3095,52,2510,54],[3095,57,2510,59,"undefined"],[3095,66,2510,68],[3095,68,2510,70],[3096,8,2511,12],[3096,12,2511,16],[3096,13,2511,17,"customStrengthOptions"],[3096,34,2511,38],[3096,35,2511,39,"containsUppercaseLetter"],[3096,58,2511,62],[3096,61,2512,16,"responseOptions"],[3096,76,2512,31],[3096,77,2512,32,"containsUppercaseCharacter"],[3096,103,2512,58],[3097,6,2513,8],[3098,6,2514,8],[3098,10,2514,12,"responseOptions"],[3098,25,2514,27],[3098,26,2514,28,"containsNumericCharacter"],[3098,50,2514,52],[3098,55,2514,57,"undefined"],[3098,64,2514,66],[3098,66,2514,68],[3099,8,2515,12],[3099,12,2515,16],[3099,13,2515,17,"customStrengthOptions"],[3099,34,2515,38],[3099,35,2515,39,"containsNumericCharacter"],[3099,59,2515,63],[3099,62,2516,16,"responseOptions"],[3099,77,2516,31],[3099,78,2516,32,"containsNumericCharacter"],[3099,102,2516,56],[3100,6,2517,8],[3101,6,2518,8],[3101,10,2518,12,"responseOptions"],[3101,25,2518,27],[3101,26,2518,28,"containsNonAlphanumericCharacter"],[3101,58,2518,60],[3101,63,2518,65,"undefined"],[3101,72,2518,74],[3101,74,2518,76],[3102,8,2519,12],[3102,12,2519,16],[3102,13,2519,17,"customStrengthOptions"],[3102,34,2519,38],[3102,35,2519,39,"containsNonAlphanumericCharacter"],[3102,67,2519,71],[3102,70,2520,16,"responseOptions"],[3102,85,2520,31],[3102,86,2520,32,"containsNonAlphanumericCharacter"],[3102,118,2520,64],[3103,6,2521,8],[3104,6,2522,8],[3104,10,2522,12],[3104,11,2522,13,"enforcementState"],[3104,27,2522,29],[3104,30,2522,32,"response"],[3104,38,2522,40],[3104,39,2522,41,"enforcementState"],[3104,55,2522,57],[3105,6,2523,8],[3105,10,2523,12],[3105,14,2523,16],[3105,15,2523,17,"enforcementState"],[3105,31,2523,33],[3105,36,2523,38],[3105,67,2523,69],[3105,69,2523,71],[3106,8,2524,12],[3106,12,2524,16],[3106,13,2524,17,"enforcementState"],[3106,29,2524,33],[3106,32,2524,36],[3106,37,2524,41],[3107,6,2525,8],[3108,6,2526,8],[3109,6,2527,8],[3109,10,2527,12],[3109,11,2527,13,"allowedNonAlphanumericCharacters"],[3109,43,2527,45],[3109,46,2528,12,"response"],[3109,54,2528,20],[3109,55,2528,21,"allowedNonAlphanumericCharacters"],[3109,87,2528,53],[3109,89,2528,55,"join"],[3109,93,2528,59],[3109,94,2528,60],[3109,96,2528,62],[3109,97,2528,63],[3109,101,2528,67],[3109,103,2528,69],[3110,6,2529,8],[3110,10,2529,12],[3110,11,2529,13,"forceUpgradeOnSignin"],[3110,31,2529,33],[3110,34,2529,36,"response"],[3110,42,2529,44],[3110,43,2529,45,"forceUpgradeOnSignin"],[3110,63,2529,65],[3110,67,2529,69],[3110,72,2529,74],[3111,6,2530,8],[3111,10,2530,12],[3111,11,2530,13,"schemaVersion"],[3111,24,2530,26],[3111,27,2530,29,"response"],[3111,35,2530,37],[3111,36,2530,38,"schemaVersion"],[3111,49,2530,51],[3112,4,2531,4],[3113,4,2532,4,"validatePassword"],[3113,20,2532,20,"validatePassword"],[3113,21,2532,21,"password"],[3113,29,2532,29],[3113,31,2532,31],[3114,6,2533,8],[3114,12,2533,14,"status"],[3114,18,2533,20],[3114,21,2533,23],[3115,8,2534,12,"isValid"],[3115,15,2534,19],[3115,17,2534,21],[3115,21,2534,25],[3116,8,2535,12,"passwordPolicy"],[3116,22,2535,26],[3116,24,2535,28],[3117,6,2536,8],[3117,7,2536,9],[3118,6,2537,8],[3119,6,2538,8],[3119,10,2538,12],[3119,11,2538,13,"validatePasswordLengthOptions"],[3119,40,2538,42],[3119,41,2538,43,"password"],[3119,49,2538,51],[3119,51,2538,53,"status"],[3119,57,2538,59],[3119,58,2538,60],[3120,6,2539,8],[3120,10,2539,12],[3120,11,2539,13,"validatePasswordCharacterOptions"],[3120,43,2539,45],[3120,44,2539,46,"password"],[3120,52,2539,54],[3120,54,2539,56,"status"],[3120,60,2539,62],[3120,61,2539,63],[3121,6,2540,8],[3122,6,2541,8,"status"],[3122,12,2541,14],[3122,13,2541,15,"isValid"],[3122,20,2541,22],[3122,25,2541,27,"status"],[3122,31,2541,33],[3122,32,2541,34,"isValid"],[3122,39,2541,41],[3122,42,2541,44,"status"],[3122,48,2541,50],[3122,49,2541,51,"meetsMinPasswordLength"],[3122,71,2541,73],[3122,75,2541,77],[3122,79,2541,81],[3122,80,2541,82],[3123,6,2542,8,"status"],[3123,12,2542,14],[3123,13,2542,15,"isValid"],[3123,20,2542,22],[3123,25,2542,27,"status"],[3123,31,2542,33],[3123,32,2542,34,"isValid"],[3123,39,2542,41],[3123,42,2542,44,"status"],[3123,48,2542,50],[3123,49,2542,51,"meetsMaxPasswordLength"],[3123,71,2542,73],[3123,75,2542,77],[3123,79,2542,81],[3123,80,2542,82],[3124,6,2543,8,"status"],[3124,12,2543,14],[3124,13,2543,15,"isValid"],[3124,20,2543,22],[3124,25,2543,27,"status"],[3124,31,2543,33],[3124,32,2543,34,"isValid"],[3124,39,2543,41],[3124,42,2543,44,"status"],[3124,48,2543,50],[3124,49,2543,51,"containsLowercaseLetter"],[3124,72,2543,74],[3124,76,2543,78],[3124,80,2543,82],[3124,81,2543,83],[3125,6,2544,8,"status"],[3125,12,2544,14],[3125,13,2544,15,"isValid"],[3125,20,2544,22],[3125,25,2544,27,"status"],[3125,31,2544,33],[3125,32,2544,34,"isValid"],[3125,39,2544,41],[3125,42,2544,44,"status"],[3125,48,2544,50],[3125,49,2544,51,"containsUppercaseLetter"],[3125,72,2544,74],[3125,76,2544,78],[3125,80,2544,82],[3125,81,2544,83],[3126,6,2545,8,"status"],[3126,12,2545,14],[3126,13,2545,15,"isValid"],[3126,20,2545,22],[3126,25,2545,27,"status"],[3126,31,2545,33],[3126,32,2545,34,"isValid"],[3126,39,2545,41],[3126,42,2545,44,"status"],[3126,48,2545,50],[3126,49,2545,51,"containsNumericCharacter"],[3126,73,2545,75],[3126,77,2545,79],[3126,81,2545,83],[3126,82,2545,84],[3127,6,2546,8,"status"],[3127,12,2546,14],[3127,13,2546,15,"isValid"],[3127,20,2546,22],[3127,25,2546,27,"status"],[3127,31,2546,33],[3127,32,2546,34,"isValid"],[3127,39,2546,41],[3127,42,2546,44,"status"],[3127,48,2546,50],[3127,49,2546,51,"containsNonAlphanumericCharacter"],[3127,81,2546,83],[3127,85,2546,87],[3127,89,2546,91],[3127,90,2546,92],[3128,6,2547,8],[3128,13,2547,15,"status"],[3128,19,2547,21],[3129,4,2548,4],[3130,4,2549,4],[3131,0,2550,0],[3132,0,2551,0],[3133,0,2552,0],[3134,0,2553,0],[3135,0,2554,0],[3136,4,2555,4,"validatePasswordLengthOptions"],[3136,33,2555,33,"validatePasswordLengthOptions"],[3136,34,2555,34,"password"],[3136,42,2555,42],[3136,44,2555,44,"status"],[3136,50,2555,50],[3136,52,2555,52],[3137,6,2556,8],[3137,12,2556,14,"minPasswordLength"],[3137,29,2556,31],[3137,32,2556,34],[3137,36,2556,38],[3137,37,2556,39,"customStrengthOptions"],[3137,58,2556,60],[3137,59,2556,61,"minPasswordLength"],[3137,76,2556,78],[3138,6,2557,8],[3138,12,2557,14,"maxPasswordLength"],[3138,29,2557,31],[3138,32,2557,34],[3138,36,2557,38],[3138,37,2557,39,"customStrengthOptions"],[3138,58,2557,60],[3138,59,2557,61,"maxPasswordLength"],[3138,76,2557,78],[3139,6,2558,8],[3139,10,2558,12,"minPasswordLength"],[3139,27,2558,29],[3139,29,2558,31],[3140,8,2559,12,"status"],[3140,14,2559,18],[3140,15,2559,19,"meetsMinPasswordLength"],[3140,37,2559,41],[3140,40,2559,44,"password"],[3140,48,2559,52],[3140,49,2559,53,"length"],[3140,55,2559,59],[3140,59,2559,63,"minPasswordLength"],[3140,76,2559,80],[3141,6,2560,8],[3142,6,2561,8],[3142,10,2561,12,"maxPasswordLength"],[3142,27,2561,29],[3142,29,2561,31],[3143,8,2562,12,"status"],[3143,14,2562,18],[3143,15,2562,19,"meetsMaxPasswordLength"],[3143,37,2562,41],[3143,40,2562,44,"password"],[3143,48,2562,52],[3143,49,2562,53,"length"],[3143,55,2562,59],[3143,59,2562,63,"maxPasswordLength"],[3143,76,2562,80],[3144,6,2563,8],[3145,4,2564,4],[3146,4,2565,4],[3147,0,2566,0],[3148,0,2567,0],[3149,0,2568,0],[3150,0,2569,0],[3151,0,2570,0],[3152,4,2571,4,"validatePasswordCharacterOptions"],[3152,36,2571,36,"validatePasswordCharacterOptions"],[3152,37,2571,37,"password"],[3152,45,2571,45],[3152,47,2571,47,"status"],[3152,53,2571,53],[3152,55,2571,55],[3153,6,2572,8],[3154,6,2573,8],[3154,10,2573,12],[3154,11,2573,13,"updatePasswordCharacterOptionsStatuses"],[3154,49,2573,51],[3154,50,2573,52,"status"],[3154,56,2573,58],[3154,58,2574,8],[3154,91,2574,42],[3154,96,2574,47],[3154,98,2575,8],[3154,131,2575,42],[3154,136,2575,47],[3154,138,2576,8],[3154,169,2576,40],[3154,174,2576,45],[3154,176,2577,8],[3154,215,2577,48],[3154,220,2577,53],[3154,221,2577,54],[3155,6,2578,8],[3155,10,2578,12,"passwordChar"],[3155,22,2578,24],[3156,6,2579,8],[3156,11,2579,13],[3156,15,2579,17,"i"],[3156,16,2579,18],[3156,19,2579,21],[3156,20,2579,22],[3156,22,2579,24,"i"],[3156,23,2579,25],[3156,26,2579,28,"password"],[3156,34,2579,36],[3156,35,2579,37,"length"],[3156,41,2579,43],[3156,43,2579,45,"i"],[3156,44,2579,46],[3156,46,2579,48],[3156,48,2579,50],[3157,8,2580,12,"passwordChar"],[3157,20,2580,24],[3157,23,2580,27,"password"],[3157,31,2580,35],[3157,32,2580,36,"charAt"],[3157,38,2580,42],[3157,39,2580,43,"i"],[3157,40,2580,44],[3157,41,2580,45],[3158,8,2581,12],[3158,12,2581,16],[3158,13,2581,17,"updatePasswordCharacterOptionsStatuses"],[3158,51,2581,55],[3158,52,2581,56,"status"],[3158,58,2581,62],[3158,60,2582,12],[3158,93,2582,46,"passwordChar"],[3158,105,2582,58],[3158,109,2582,62],[3158,112,2582,65],[3158,116,2583,16,"passwordChar"],[3158,128,2583,28],[3158,132,2583,32],[3158,135,2583,35],[3158,137,2584,12],[3158,170,2584,46,"passwordChar"],[3158,182,2584,58],[3158,186,2584,62],[3158,189,2584,65],[3158,193,2585,16,"passwordChar"],[3158,205,2585,28],[3158,209,2585,32],[3158,212,2585,35],[3158,214,2586,12],[3158,245,2586,44,"passwordChar"],[3158,257,2586,56],[3158,261,2586,60],[3158,264,2586,63],[3158,268,2587,16,"passwordChar"],[3158,280,2587,28],[3158,284,2587,32],[3158,287,2587,35],[3158,289,2588,12],[3158,328,2588,52],[3158,332,2588,56],[3158,333,2588,57,"allowedNonAlphanumericCharacters"],[3158,365,2588,89],[3158,366,2588,90,"includes"],[3158,374,2588,98],[3158,375,2588,99,"passwordChar"],[3158,387,2588,111],[3158,388,2588,112],[3158,389,2588,113],[3159,6,2589,8],[3160,4,2590,4],[3161,4,2591,4],[3162,0,2592,0],[3163,0,2593,0],[3164,0,2594,0],[3165,0,2595,0],[3166,0,2596,0],[3167,0,2597,0],[3168,0,2598,0],[3169,0,2599,0],[3170,0,2600,0],[3171,0,2601,0],[3172,4,2602,4,"updatePasswordCharacterOptionsStatuses"],[3172,42,2602,42,"updatePasswordCharacterOptionsStatuses"],[3172,43,2602,43,"status"],[3172,49,2602,49],[3172,51,2602,51,"containsLowercaseCharacter"],[3172,77,2602,77],[3172,79,2602,79,"containsUppercaseCharacter"],[3172,105,2602,105],[3172,107,2602,107,"containsNumericCharacter"],[3172,131,2602,131],[3172,133,2602,133,"containsNonAlphanumericCharacter"],[3172,165,2602,165],[3172,167,2602,167],[3173,6,2603,8],[3173,10,2603,12],[3173,14,2603,16],[3173,15,2603,17,"customStrengthOptions"],[3173,36,2603,38],[3173,37,2603,39,"containsLowercaseLetter"],[3173,60,2603,62],[3173,62,2603,64],[3174,8,2604,12,"status"],[3174,14,2604,18],[3174,15,2604,19,"containsLowercaseLetter"],[3174,38,2604,42],[3174,43,2604,47,"status"],[3174,49,2604,53],[3174,50,2604,54,"containsLowercaseLetter"],[3174,73,2604,77],[3174,76,2604,80,"containsLowercaseCharacter"],[3174,102,2604,106],[3174,103,2604,107],[3175,6,2605,8],[3176,6,2606,8],[3176,10,2606,12],[3176,14,2606,16],[3176,15,2606,17,"customStrengthOptions"],[3176,36,2606,38],[3176,37,2606,39,"containsUppercaseLetter"],[3176,60,2606,62],[3176,62,2606,64],[3177,8,2607,12,"status"],[3177,14,2607,18],[3177,15,2607,19,"containsUppercaseLetter"],[3177,38,2607,42],[3177,43,2607,47,"status"],[3177,49,2607,53],[3177,50,2607,54,"containsUppercaseLetter"],[3177,73,2607,77],[3177,76,2607,80,"containsUppercaseCharacter"],[3177,102,2607,106],[3177,103,2607,107],[3178,6,2608,8],[3179,6,2609,8],[3179,10,2609,12],[3179,14,2609,16],[3179,15,2609,17,"customStrengthOptions"],[3179,36,2609,38],[3179,37,2609,39,"containsNumericCharacter"],[3179,61,2609,63],[3179,63,2609,65],[3180,8,2610,12,"status"],[3180,14,2610,18],[3180,15,2610,19,"containsNumericCharacter"],[3180,39,2610,43],[3180,44,2610,48,"status"],[3180,50,2610,54],[3180,51,2610,55,"containsNumericCharacter"],[3180,75,2610,79],[3180,78,2610,82,"containsNumericCharacter"],[3180,102,2610,106],[3180,103,2610,107],[3181,6,2611,8],[3182,6,2612,8],[3182,10,2612,12],[3182,14,2612,16],[3182,15,2612,17,"customStrengthOptions"],[3182,36,2612,38],[3182,37,2612,39,"containsNonAlphanumericCharacter"],[3182,69,2612,71],[3182,71,2612,73],[3183,8,2613,12,"status"],[3183,14,2613,18],[3183,15,2613,19,"containsNonAlphanumericCharacter"],[3183,47,2613,51],[3183,52,2613,56,"status"],[3183,58,2613,62],[3183,59,2613,63,"containsNonAlphanumericCharacter"],[3183,91,2613,95],[3183,94,2613,98,"containsNonAlphanumericCharacter"],[3183,126,2613,130],[3183,127,2613,131],[3184,6,2614,8],[3185,4,2615,4],[3186,2,2616,0],[3188,2,2618,0],[3189,0,2619,0],[3190,0,2620,0],[3191,0,2621,0],[3192,0,2622,0],[3193,0,2623,0],[3194,0,2624,0],[3195,0,2625,0],[3196,0,2626,0],[3197,0,2627,0],[3198,0,2628,0],[3199,0,2629,0],[3200,0,2630,0],[3201,0,2631,0],[3202,0,2632,0],[3203,0,2633,0],[3204,2,2634,0],[3204,8,2634,6,"AuthImpl"],[3204,16,2634,14],[3204,17,2634,15],[3205,4,2635,4,"constructor"],[3205,15,2635,15,"constructor"],[3205,16,2635,16,"app"],[3205,19,2635,19],[3205,21,2635,21,"heartbeatServiceProvider"],[3205,45,2635,45],[3205,47,2635,47,"appCheckServiceProvider"],[3205,70,2635,70],[3205,72,2635,72,"config"],[3205,78,2635,78],[3205,80,2635,80],[3206,6,2636,8],[3206,10,2636,12],[3206,11,2636,13,"app"],[3206,14,2636,16],[3206,17,2636,19,"app"],[3206,20,2636,22],[3207,6,2637,8],[3207,10,2637,12],[3207,11,2637,13,"heartbeatServiceProvider"],[3207,35,2637,37],[3207,38,2637,40,"heartbeatServiceProvider"],[3207,62,2637,64],[3208,6,2638,8],[3208,10,2638,12],[3208,11,2638,13,"appCheckServiceProvider"],[3208,34,2638,36],[3208,37,2638,39,"appCheckServiceProvider"],[3208,60,2638,62],[3209,6,2639,8],[3209,10,2639,12],[3209,11,2639,13,"config"],[3209,17,2639,19],[3209,20,2639,22,"config"],[3209,26,2639,28],[3210,6,2640,8],[3210,10,2640,12],[3210,11,2640,13,"currentUser"],[3210,22,2640,24],[3210,25,2640,27],[3210,29,2640,31],[3211,6,2641,8],[3211,10,2641,12],[3211,11,2641,13,"emulatorConfig"],[3211,25,2641,27],[3211,28,2641,30],[3211,32,2641,34],[3212,6,2642,8],[3212,10,2642,12],[3212,11,2642,13,"operations"],[3212,21,2642,23],[3212,24,2642,26,"Promise"],[3212,31,2642,33],[3212,32,2642,34,"resolve"],[3212,39,2642,41],[3212,40,2642,42],[3212,41,2642,43],[3213,6,2643,8],[3213,10,2643,12],[3213,11,2643,13,"authStateSubscription"],[3213,32,2643,34],[3213,35,2643,37],[3213,39,2643,41,"Subscription"],[3213,51,2643,53],[3213,52,2643,54],[3213,56,2643,58],[3213,57,2643,59],[3214,6,2644,8],[3214,10,2644,12],[3214,11,2644,13,"idTokenSubscription"],[3214,30,2644,32],[3214,33,2644,35],[3214,37,2644,39,"Subscription"],[3214,49,2644,51],[3214,50,2644,52],[3214,54,2644,56],[3214,55,2644,57],[3215,6,2645,8],[3215,10,2645,12],[3215,11,2645,13,"beforeStateQueue"],[3215,27,2645,29],[3215,30,2645,32],[3215,34,2645,36,"AuthMiddlewareQueue"],[3215,53,2645,55],[3215,54,2645,56],[3215,58,2645,60],[3215,59,2645,61],[3216,6,2646,8],[3216,10,2646,12],[3216,11,2646,13,"redirectUser"],[3216,23,2646,25],[3216,26,2646,28],[3216,30,2646,32],[3217,6,2647,8],[3217,10,2647,12],[3217,11,2647,13,"isProactiveRefreshEnabled"],[3217,36,2647,38],[3217,39,2647,41],[3217,44,2647,46],[3218,6,2648,8],[3218,10,2648,12],[3218,11,2648,13,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[3218,50,2648,52],[3218,53,2648,55],[3218,54,2648,56],[3219,6,2649,8],[3220,6,2650,8],[3221,6,2651,8],[3221,10,2651,12],[3221,11,2651,13,"_canInitEmulator"],[3221,27,2651,29],[3221,30,2651,32],[3221,34,2651,36],[3222,6,2652,8],[3222,10,2652,12],[3222,11,2652,13,"_isInitialized"],[3222,25,2652,27],[3222,28,2652,30],[3222,33,2652,35],[3223,6,2653,8],[3223,10,2653,12],[3223,11,2653,13,"_deleted"],[3223,19,2653,21],[3223,22,2653,24],[3223,27,2653,29],[3224,6,2654,8],[3224,10,2654,12],[3224,11,2654,13,"_initializationPromise"],[3224,33,2654,35],[3224,36,2654,38],[3224,40,2654,42],[3225,6,2655,8],[3225,10,2655,12],[3225,11,2655,13,"_popupRedirectResolver"],[3225,33,2655,35],[3225,36,2655,38],[3225,40,2655,42],[3226,6,2656,8],[3226,10,2656,12],[3226,11,2656,13,"_errorFactory"],[3226,24,2656,26],[3226,27,2656,29,"_DEFAULT_AUTH_ERROR_FACTORY"],[3226,54,2656,56],[3227,6,2657,8],[3227,10,2657,12],[3227,11,2657,13,"_agentRecaptchaConfig"],[3227,32,2657,34],[3227,35,2657,37],[3227,39,2657,41],[3228,6,2658,8],[3228,10,2658,12],[3228,11,2658,13,"_tenantRecaptchaConfigs"],[3228,34,2658,36],[3228,37,2658,39],[3228,38,2658,40],[3228,39,2658,41],[3229,6,2659,8],[3229,10,2659,12],[3229,11,2659,13,"_projectPasswordPolicy"],[3229,33,2659,35],[3229,36,2659,38],[3229,40,2659,42],[3230,6,2660,8],[3230,10,2660,12],[3230,11,2660,13,"_tenantPasswordPolicies"],[3230,34,2660,36],[3230,37,2660,39],[3230,38,2660,40],[3230,39,2660,41],[3231,6,2661,8],[3231,10,2661,12],[3231,11,2661,13,"_resolvePersistenceManagerAvailable"],[3231,46,2661,48],[3231,49,2661,51,"undefined"],[3231,58,2661,60],[3232,6,2662,8],[3233,6,2663,8],[3234,6,2664,8],[3235,6,2665,8],[3235,10,2665,12],[3235,11,2665,13,"lastNotifiedUid"],[3235,26,2665,28],[3235,29,2665,31,"undefined"],[3235,38,2665,40],[3236,6,2666,8],[3236,10,2666,12],[3236,11,2666,13,"languageCode"],[3236,23,2666,25],[3236,26,2666,28],[3236,30,2666,32],[3237,6,2667,8],[3237,10,2667,12],[3237,11,2667,13,"tenantId"],[3237,19,2667,21],[3237,22,2667,24],[3237,26,2667,28],[3238,6,2668,8],[3238,10,2668,12],[3238,11,2668,13,"settings"],[3238,19,2668,21],[3238,22,2668,24],[3239,8,2668,26,"appVerificationDisabledForTesting"],[3239,41,2668,59],[3239,43,2668,61],[3240,6,2668,67],[3240,7,2668,68],[3241,6,2669,8],[3241,10,2669,12],[3241,11,2669,13,"frameworks"],[3241,21,2669,23],[3241,24,2669,26],[3241,26,2669,28],[3242,6,2670,8],[3242,10,2670,12],[3242,11,2670,13,"name"],[3242,15,2670,17],[3242,18,2670,20,"app"],[3242,21,2670,23],[3242,22,2670,24,"name"],[3242,26,2670,28],[3243,6,2671,8],[3243,10,2671,12],[3243,11,2671,13,"clientVersion"],[3243,24,2671,26],[3243,27,2671,29,"config"],[3243,33,2671,35],[3243,34,2671,36,"sdkClientVersion"],[3243,50,2671,52],[3244,6,2672,8],[3245,6,2673,8],[3246,6,2674,8],[3246,10,2674,12],[3246,11,2674,13,"_persistenceManagerAvailable"],[3246,39,2674,41],[3246,42,2674,44],[3246,46,2674,48,"Promise"],[3246,53,2674,55],[3246,54,2674,56,"resolve"],[3246,61,2674,63],[3246,65,2674,68],[3246,69,2674,72],[3246,70,2674,73,"_resolvePersistenceManagerAvailable"],[3246,105,2674,108],[3246,108,2674,111,"resolve"],[3246,115,2674,119],[3246,116,2674,120],[3247,4,2675,4],[3248,4,2676,4,"_initializeWithPersistence"],[3248,30,2676,30,"_initializeWithPersistence"],[3248,31,2676,31,"persistenceHierarchy"],[3248,51,2676,51],[3248,53,2676,53,"popupRedirectResolver"],[3248,74,2676,74],[3248,76,2676,76],[3249,6,2677,8],[3249,10,2677,12,"popupRedirectResolver"],[3249,31,2677,33],[3249,33,2677,35],[3250,8,2678,12],[3250,12,2678,16],[3250,13,2678,17,"_popupRedirectResolver"],[3250,35,2678,39],[3250,38,2678,42,"_getInstance"],[3250,50,2678,54],[3250,51,2678,55,"popupRedirectResolver"],[3250,72,2678,76],[3250,73,2678,77],[3251,6,2679,8],[3252,6,2680,8],[3253,6,2681,8],[3254,6,2682,8],[3254,10,2682,12],[3254,11,2682,13,"_initializationPromise"],[3254,33,2682,35],[3254,36,2682,38],[3254,40,2682,42],[3254,41,2682,43,"queue"],[3254,46,2682,48],[3254,47,2682,49],[3254,59,2682,61],[3255,8,2683,12],[3255,12,2683,16],[3255,16,2683,20],[3255,17,2683,21,"_deleted"],[3255,25,2683,29],[3255,27,2683,31],[3256,10,2684,16],[3257,8,2685,12],[3258,8,2686,12],[3258,12,2686,16],[3258,13,2686,17,"persistenceManager"],[3258,31,2686,35],[3258,34,2686,38],[3258,40,2686,44,"PersistenceUserManager"],[3258,62,2686,66],[3258,63,2686,67,"create"],[3258,69,2686,73],[3258,70,2686,74],[3258,74,2686,78],[3258,76,2686,80,"persistenceHierarchy"],[3258,96,2686,100],[3258,97,2686,101],[3259,8,2687,12],[3259,12,2687,16],[3259,13,2687,17,"_resolvePersistenceManagerAvailable"],[3259,48,2687,52],[3259,51,2687,55],[3259,52,2687,56],[3260,8,2688,12],[3260,12,2688,16],[3260,16,2688,20],[3260,17,2688,21,"_deleted"],[3260,25,2688,29],[3260,27,2688,31],[3261,10,2689,16],[3262,8,2690,12],[3263,8,2691,12],[3264,8,2692,12],[3265,8,2693,12],[3265,12,2693,16],[3265,16,2693,20],[3265,17,2693,21,"_popupRedirectResolver"],[3265,39,2693,43],[3265,41,2693,45,"_shouldInitProactively"],[3265,63,2693,67],[3265,65,2693,69],[3266,10,2694,16],[3267,10,2695,16],[3267,14,2695,20],[3268,12,2696,20],[3268,18,2696,26],[3268,22,2696,30],[3268,23,2696,31,"_popupRedirectResolver"],[3268,45,2696,53],[3268,46,2696,54,"_initialize"],[3268,57,2696,65],[3268,58,2696,66],[3268,62,2696,70],[3268,63,2696,71],[3269,10,2697,16],[3269,11,2697,17],[3269,12,2698,16],[3269,19,2698,23,"e"],[3269,20,2698,24],[3269,22,2698,26],[3270,12,2699,20],[3271,10,2699,20],[3272,8,2701,12],[3273,8,2702,12],[3273,14,2702,18],[3273,18,2702,22],[3273,19,2702,23,"initializeCurrentUser"],[3273,40,2702,44],[3273,41,2702,45,"popupRedirectResolver"],[3273,62,2702,66],[3273,63,2702,67],[3274,8,2703,12],[3274,12,2703,16],[3274,13,2703,17,"lastNotifiedUid"],[3274,28,2703,32],[3274,31,2703,35],[3274,35,2703,39],[3274,36,2703,40,"currentUser"],[3274,47,2703,51],[3274,49,2703,53,"uid"],[3274,52,2703,56],[3274,56,2703,60],[3274,60,2703,64],[3275,8,2704,12],[3275,12,2704,16],[3275,16,2704,20],[3275,17,2704,21,"_deleted"],[3275,25,2704,29],[3275,27,2704,31],[3276,10,2705,16],[3277,8,2706,12],[3278,8,2707,12],[3278,12,2707,16],[3278,13,2707,17,"_isInitialized"],[3278,27,2707,31],[3278,30,2707,34],[3278,34,2707,38],[3279,6,2708,8],[3279,7,2708,9],[3279,8,2708,10],[3280,6,2709,8],[3280,13,2709,15],[3280,17,2709,19],[3280,18,2709,20,"_initializationPromise"],[3280,40,2709,42],[3281,4,2710,4],[3282,4,2711,4],[3283,0,2712,0],[3284,0,2713,0],[3285,4,2714,4],[3285,10,2714,10,"_onStorageEvent"],[3285,25,2714,25,"_onStorageEvent"],[3285,26,2714,25],[3285,28,2714,28],[3286,6,2715,8],[3286,10,2715,12],[3286,14,2715,16],[3286,15,2715,17,"_deleted"],[3286,23,2715,25],[3286,25,2715,27],[3287,8,2716,12],[3288,6,2717,8],[3289,6,2718,8],[3289,12,2718,14,"user"],[3289,16,2718,18],[3289,19,2718,21],[3289,25,2718,27],[3289,29,2718,31],[3289,30,2718,32,"assertedPersistence"],[3289,49,2718,51],[3289,50,2718,52,"getCurrentUser"],[3289,64,2718,66],[3289,65,2718,67],[3289,66,2718,68],[3290,6,2719,8],[3290,10,2719,12],[3290,11,2719,13],[3290,15,2719,17],[3290,16,2719,18,"currentUser"],[3290,27,2719,29],[3290,31,2719,33],[3290,32,2719,34,"user"],[3290,36,2719,38],[3290,38,2719,40],[3291,8,2720,12],[3292,8,2721,12],[3293,6,2722,8],[3294,6,2723,8],[3295,6,2724,8],[3295,10,2724,12],[3295,14,2724,16],[3295,15,2724,17,"currentUser"],[3295,26,2724,28],[3295,30,2724,32,"user"],[3295,34,2724,36],[3295,38,2724,40],[3295,42,2724,44],[3295,43,2724,45,"currentUser"],[3295,54,2724,56],[3295,55,2724,57,"uid"],[3295,58,2724,60],[3295,63,2724,65,"user"],[3295,67,2724,69],[3295,68,2724,70,"uid"],[3295,71,2724,73],[3295,73,2724,75],[3296,8,2725,12],[3297,8,2726,12],[3297,12,2726,16],[3297,13,2726,17,"_currentUser"],[3297,25,2726,29],[3297,26,2726,30,"_assign"],[3297,33,2726,37],[3297,34,2726,38,"user"],[3297,38,2726,42],[3297,39,2726,43],[3298,8,2727,12],[3299,8,2728,12],[3300,8,2729,12],[3300,14,2729,18],[3300,18,2729,22],[3300,19,2729,23,"currentUser"],[3300,30,2729,34],[3300,31,2729,35,"getIdToken"],[3300,41,2729,45],[3300,42,2729,46],[3300,43,2729,47],[3301,8,2730,12],[3302,6,2731,8],[3303,6,2732,8],[3304,6,2733,8],[3305,6,2734,8],[3305,12,2734,14],[3305,16,2734,18],[3305,17,2734,19,"_updateCurrentUser"],[3305,35,2734,37],[3305,36,2734,38,"user"],[3305,40,2734,42],[3305,42,2734,44],[3305,72,2734,75],[3305,76,2734,79],[3305,77,2734,80],[3306,4,2735,4],[3307,4,2736,4],[3307,10,2736,10,"initializeCurrentUserFromIdToken"],[3307,42,2736,42,"initializeCurrentUserFromIdToken"],[3307,43,2736,43,"idToken"],[3307,50,2736,50],[3307,52,2736,52],[3308,6,2737,8],[3308,10,2737,12],[3309,8,2738,12],[3309,14,2738,18,"response"],[3309,22,2738,26],[3309,25,2738,29],[3309,31,2738,35,"getAccountInfo"],[3309,45,2738,49],[3309,46,2738,50],[3309,50,2738,54],[3309,52,2738,56],[3310,10,2738,58,"idToken"],[3311,8,2738,66],[3311,9,2738,67],[3311,10,2738,68],[3312,8,2739,12],[3312,14,2739,18,"user"],[3312,18,2739,22],[3312,21,2739,25],[3312,27,2739,31,"UserImpl"],[3312,35,2739,39],[3312,36,2739,40,"_fromGetAccountInfoResponse"],[3312,63,2739,67],[3312,64,2739,68],[3312,68,2739,72],[3312,70,2739,74,"response"],[3312,78,2739,82],[3312,80,2739,84,"idToken"],[3312,87,2739,91],[3312,88,2739,92],[3313,8,2740,12],[3313,14,2740,18],[3313,18,2740,22],[3313,19,2740,23,"directlySetCurrentUser"],[3313,41,2740,45],[3313,42,2740,46,"user"],[3313,46,2740,50],[3313,47,2740,51],[3314,6,2741,8],[3314,7,2741,9],[3314,8,2742,8],[3314,15,2742,15,"err"],[3314,18,2742,18],[3314,20,2742,20],[3315,8,2743,12,"console"],[3315,15,2743,19],[3315,16,2743,20,"warn"],[3315,20,2743,24],[3315,21,2743,25],[3315,89,2743,93],[3315,91,2743,95,"err"],[3315,94,2743,98],[3315,95,2743,99],[3316,8,2744,12],[3316,14,2744,18],[3316,18,2744,22],[3316,19,2744,23,"directlySetCurrentUser"],[3316,41,2744,45],[3316,42,2744,46],[3316,46,2744,50],[3316,47,2744,51],[3317,6,2745,8],[3318,4,2746,4],[3319,4,2747,4],[3319,10,2747,10,"initializeCurrentUser"],[3319,31,2747,31,"initializeCurrentUser"],[3319,32,2747,32,"popupRedirectResolver"],[3319,53,2747,53],[3319,55,2747,55],[3320,6,2748,8],[3320,10,2748,12],[3320,14,2748,12,"_isFirebaseServerApp"],[3320,26,2748,32],[3320,27,2748,32,"_isFirebaseServerApp"],[3320,47,2748,32],[3320,49,2748,33],[3320,53,2748,37],[3320,54,2748,38,"app"],[3320,57,2748,41],[3320,58,2748,42],[3320,60,2748,44],[3321,8,2749,12],[3321,14,2749,18,"idToken"],[3321,21,2749,25],[3321,24,2749,28],[3321,28,2749,32],[3321,29,2749,33,"app"],[3321,32,2749,36],[3321,33,2749,37,"settings"],[3321,41,2749,45],[3321,42,2749,46,"authIdToken"],[3321,53,2749,57],[3322,8,2750,12],[3322,12,2750,16,"idToken"],[3322,19,2750,23],[3322,21,2750,25],[3323,10,2751,16],[3324,10,2752,16],[3325,10,2753,16],[3325,17,2753,23],[3325,21,2753,27,"Promise"],[3325,28,2753,34],[3325,29,2753,35,"resolve"],[3325,36,2753,42],[3325,40,2753,46],[3326,12,2754,20,"setTimeout"],[3326,22,2754,30],[3326,23,2754,31],[3326,29,2754,37],[3326,33,2754,41],[3326,34,2754,42,"initializeCurrentUserFromIdToken"],[3326,66,2754,74],[3326,67,2754,75,"idToken"],[3326,74,2754,82],[3326,75,2754,83],[3326,76,2754,84,"then"],[3326,80,2754,88],[3326,81,2754,89,"resolve"],[3326,88,2754,96],[3326,90,2754,98,"resolve"],[3326,97,2754,105],[3326,98,2754,106],[3326,99,2754,107],[3327,10,2755,16],[3327,11,2755,17],[3327,12,2755,18],[3328,8,2756,12],[3328,9,2756,13],[3328,15,2757,17],[3329,10,2758,16],[3329,17,2758,23],[3329,21,2758,27],[3329,22,2758,28,"directlySetCurrentUser"],[3329,44,2758,50],[3329,45,2758,51],[3329,49,2758,55],[3329,50,2758,56],[3330,8,2759,12],[3331,6,2760,8],[3332,6,2761,8],[3333,6,2762,8],[3333,12,2762,14,"previouslyStoredUser"],[3333,32,2762,34],[3333,35,2762,38],[3333,41,2762,44],[3333,45,2762,48],[3333,46,2762,49,"assertedPersistence"],[3333,65,2762,68],[3333,66,2762,69,"getCurrentUser"],[3333,80,2762,83],[3333,81,2762,84],[3333,82,2762,86],[3334,6,2763,8],[3334,10,2763,12,"futureCurrentUser"],[3334,27,2763,29],[3334,30,2763,32,"previouslyStoredUser"],[3334,50,2763,52],[3335,6,2764,8],[3335,10,2764,12,"needsTocheckMiddleware"],[3335,32,2764,34],[3335,35,2764,37],[3335,40,2764,42],[3336,6,2765,8],[3336,10,2765,12,"popupRedirectResolver"],[3336,31,2765,33],[3336,35,2765,37],[3336,39,2765,41],[3336,40,2765,42,"config"],[3336,46,2765,48],[3336,47,2765,49,"authDomain"],[3336,57,2765,59],[3336,59,2765,61],[3337,8,2766,12],[3337,14,2766,18],[3337,18,2766,22],[3337,19,2766,23,"getOrInitRedirectPersistenceManager"],[3337,54,2766,58],[3337,55,2766,59],[3337,56,2766,60],[3338,8,2767,12],[3338,14,2767,18,"redirectUserEventId"],[3338,33,2767,37],[3338,36,2767,40],[3338,40,2767,44],[3338,41,2767,45,"redirectUser"],[3338,53,2767,57],[3338,55,2767,59,"_redirectEventId"],[3338,71,2767,75],[3339,8,2768,12],[3339,14,2768,18,"storedUserEventId"],[3339,31,2768,35],[3339,34,2768,38,"futureCurrentUser"],[3339,51,2768,55],[3339,53,2768,57,"_redirectEventId"],[3339,69,2768,73],[3340,8,2769,12],[3340,14,2769,18,"result"],[3340,20,2769,24],[3340,23,2769,27],[3340,29,2769,33],[3340,33,2769,37],[3340,34,2769,38,"tryRedirectSignIn"],[3340,51,2769,55],[3340,52,2769,56,"popupRedirectResolver"],[3340,73,2769,77],[3340,74,2769,78],[3341,8,2770,12],[3342,8,2771,12],[3343,8,2772,12],[3344,8,2773,12],[3345,8,2774,12],[3345,12,2774,16],[3345,13,2774,17],[3345,14,2774,18,"redirectUserEventId"],[3345,33,2774,37],[3345,37,2774,41,"redirectUserEventId"],[3345,56,2774,60],[3345,61,2774,65,"storedUserEventId"],[3345,78,2774,82],[3345,83,2775,16,"result"],[3345,89,2775,22],[3345,91,2775,24,"user"],[3345,95,2775,28],[3345,97,2775,30],[3346,10,2776,16,"futureCurrentUser"],[3346,27,2776,33],[3346,30,2776,36,"result"],[3346,36,2776,42],[3346,37,2776,43,"user"],[3346,41,2776,47],[3347,10,2777,16,"needsTocheckMiddleware"],[3347,32,2777,38],[3347,35,2777,41],[3347,39,2777,45],[3348,8,2778,12],[3349,6,2779,8],[3350,6,2780,8],[3351,6,2781,8],[3351,10,2781,12],[3351,11,2781,13,"futureCurrentUser"],[3351,28,2781,30],[3351,30,2781,32],[3352,8,2782,12],[3352,15,2782,19],[3352,19,2782,23],[3352,20,2782,24,"directlySetCurrentUser"],[3352,42,2782,46],[3352,43,2782,47],[3352,47,2782,51],[3352,48,2782,52],[3353,6,2783,8],[3354,6,2784,8],[3354,10,2784,12],[3354,11,2784,13,"futureCurrentUser"],[3354,28,2784,30],[3354,29,2784,31,"_redirectEventId"],[3354,45,2784,47],[3354,47,2784,49],[3355,8,2785,12],[3356,8,2786,12],[3357,8,2787,12],[3357,12,2787,16,"needsTocheckMiddleware"],[3357,34,2787,38],[3357,36,2787,40],[3358,10,2788,16],[3358,14,2788,20],[3359,12,2789,20],[3359,18,2789,26],[3359,22,2789,30],[3359,23,2789,31,"beforeStateQueue"],[3359,39,2789,47],[3359,40,2789,48,"runMiddleware"],[3359,53,2789,61],[3359,54,2789,62,"futureCurrentUser"],[3359,71,2789,79],[3359,72,2789,80],[3360,10,2790,16],[3360,11,2790,17],[3360,12,2791,16],[3360,19,2791,23,"e"],[3360,20,2791,24],[3360,22,2791,26],[3361,12,2792,20,"futureCurrentUser"],[3361,29,2792,37],[3361,32,2792,40,"previouslyStoredUser"],[3361,52,2792,60],[3362,12,2793,20],[3363,12,2794,20],[3364,12,2795,20],[3364,16,2795,24],[3364,17,2795,25,"_popupRedirectResolver"],[3364,39,2795,47],[3364,40,2795,48,"_overrideRedirectResult"],[3364,63,2795,71],[3364,64,2795,72],[3364,68,2795,76],[3364,70,2795,78],[3364,76,2795,84,"Promise"],[3364,83,2795,91],[3364,84,2795,92,"reject"],[3364,90,2795,98],[3364,91,2795,99,"e"],[3364,92,2795,100],[3364,93,2795,101],[3364,94,2795,102],[3365,10,2796,16],[3366,8,2797,12],[3367,8,2798,12],[3367,12,2798,16,"futureCurrentUser"],[3367,29,2798,33],[3367,31,2798,35],[3368,10,2799,16],[3368,17,2799,23],[3368,21,2799,27],[3368,22,2799,28,"reloadAndSetCurrentUserOrClear"],[3368,52,2799,58],[3368,53,2799,59,"futureCurrentUser"],[3368,70,2799,76],[3368,71,2799,77],[3369,8,2800,12],[3369,9,2800,13],[3369,15,2801,17],[3370,10,2802,16],[3370,17,2802,23],[3370,21,2802,27],[3370,22,2802,28,"directlySetCurrentUser"],[3370,44,2802,50],[3370,45,2802,51],[3370,49,2802,55],[3370,50,2802,56],[3371,8,2803,12],[3372,6,2804,8],[3373,6,2805,8,"_assert"],[3373,13,2805,15],[3373,14,2805,16],[3373,18,2805,20],[3373,19,2805,21,"_popupRedirectResolver"],[3373,41,2805,43],[3373,43,2805,45],[3373,47,2805,49],[3373,49,2805,51],[3373,65,2805,67],[3373,66,2805,68],[3373,100,2805,102],[3373,101,2805,103],[3374,6,2806,8],[3374,12,2806,14],[3374,16,2806,18],[3374,17,2806,19,"getOrInitRedirectPersistenceManager"],[3374,52,2806,54],[3374,53,2806,55],[3374,54,2806,56],[3375,6,2807,8],[3376,6,2808,8],[3377,6,2809,8],[3378,6,2810,8],[3378,10,2810,12],[3378,14,2810,16],[3378,15,2810,17,"redirectUser"],[3378,27,2810,29],[3378,31,2811,12],[3378,35,2811,16],[3378,36,2811,17,"redirectUser"],[3378,48,2811,29],[3378,49,2811,30,"_redirectEventId"],[3378,65,2811,46],[3378,70,2811,51,"futureCurrentUser"],[3378,87,2811,68],[3378,88,2811,69,"_redirectEventId"],[3378,104,2811,85],[3378,106,2811,87],[3379,8,2812,12],[3379,15,2812,19],[3379,19,2812,23],[3379,20,2812,24,"directlySetCurrentUser"],[3379,42,2812,46],[3379,43,2812,47,"futureCurrentUser"],[3379,60,2812,64],[3379,61,2812,65],[3380,6,2813,8],[3381,6,2814,8],[3381,13,2814,15],[3381,17,2814,19],[3381,18,2814,20,"reloadAndSetCurrentUserOrClear"],[3381,48,2814,50],[3381,49,2814,51,"futureCurrentUser"],[3381,66,2814,68],[3381,67,2814,69],[3382,4,2815,4],[3383,4,2816,4],[3383,10,2816,10,"tryRedirectSignIn"],[3383,27,2816,27,"tryRedirectSignIn"],[3383,28,2816,28,"redirectResolver"],[3383,44,2816,44],[3383,46,2816,46],[3384,6,2817,8],[3385,6,2818,8],[3386,6,2819,8],[3387,6,2820,8],[3388,6,2821,8],[3389,6,2822,8],[3390,6,2823,8],[3391,6,2824,8],[3392,6,2825,8],[3393,6,2826,8],[3394,6,2827,8],[3395,6,2828,8],[3396,6,2829,8],[3397,6,2830,8],[3398,6,2831,8],[3399,6,2832,8],[3399,10,2832,12,"result"],[3399,16,2832,18],[3399,19,2832,21],[3399,23,2832,25],[3400,6,2833,8],[3400,10,2833,12],[3401,8,2834,12],[3402,8,2835,12],[3403,8,2836,12,"result"],[3403,14,2836,18],[3403,17,2836,21],[3403,23,2836,27],[3403,27,2836,31],[3403,28,2836,32,"_popupRedirectResolver"],[3403,50,2836,54],[3403,51,2836,55,"_completeRedirectFn"],[3403,70,2836,74],[3403,71,2836,75],[3403,75,2836,79],[3403,77,2836,81,"redirectResolver"],[3403,93,2836,97],[3403,95,2836,99],[3403,99,2836,103],[3403,100,2836,104],[3404,6,2837,8],[3404,7,2837,9],[3404,8,2838,8],[3404,15,2838,15,"e"],[3404,16,2838,16],[3404,18,2838,18],[3405,8,2839,12],[3406,8,2840,12],[3407,8,2841,12],[3407,14,2841,18],[3407,18,2841,22],[3407,19,2841,23,"_setRedirectUser"],[3407,35,2841,39],[3407,36,2841,40],[3407,40,2841,44],[3407,41,2841,45],[3408,6,2842,8],[3409,6,2843,8],[3409,13,2843,15,"result"],[3409,19,2843,21],[3410,4,2844,4],[3411,4,2845,4],[3411,10,2845,10,"reloadAndSetCurrentUserOrClear"],[3411,40,2845,40,"reloadAndSetCurrentUserOrClear"],[3411,41,2845,41,"user"],[3411,45,2845,45],[3411,47,2845,47],[3412,6,2846,8],[3412,10,2846,12],[3413,8,2847,12],[3413,14,2847,18,"_reloadWithoutSaving"],[3413,34,2847,38],[3413,35,2847,39,"user"],[3413,39,2847,43],[3413,40,2847,44],[3414,6,2848,8],[3414,7,2848,9],[3414,8,2849,8],[3414,15,2849,15,"e"],[3414,16,2849,16],[3414,18,2849,18],[3415,8,2850,12],[3415,12,2850,16,"e"],[3415,13,2850,17],[3415,15,2850,19,"code"],[3415,19,2850,23],[3415,24,2851,16],[3415,32,2851,24],[3415,56,2851,48],[3415,57,2851,49],[3415,101,2851,93],[3415,103,2851,95],[3416,10,2852,16],[3417,10,2853,16],[3418,10,2854,16],[3418,17,2854,23],[3418,21,2854,27],[3418,22,2854,28,"directlySetCurrentUser"],[3418,44,2854,50],[3418,45,2854,51],[3418,49,2854,55],[3418,50,2854,56],[3419,8,2855,12],[3420,6,2856,8],[3421,6,2857,8],[3421,13,2857,15],[3421,17,2857,19],[3421,18,2857,20,"directlySetCurrentUser"],[3421,40,2857,42],[3421,41,2857,43,"user"],[3421,45,2857,47],[3421,46,2857,48],[3422,4,2858,4],[3423,4,2859,4,"useDeviceLanguage"],[3423,21,2859,21,"useDeviceLanguage"],[3423,22,2859,21],[3423,24,2859,24],[3424,6,2860,8],[3424,10,2860,12],[3424,11,2860,13,"languageCode"],[3424,23,2860,25],[3424,26,2860,28,"_getUserLanguage"],[3424,42,2860,44],[3424,43,2860,45],[3424,44,2860,46],[3425,4,2861,4],[3426,4,2862,4],[3426,10,2862,10,"_delete"],[3426,17,2862,17,"_delete"],[3426,18,2862,17],[3426,20,2862,20],[3427,6,2863,8],[3427,10,2863,12],[3427,11,2863,13,"_deleted"],[3427,19,2863,21],[3427,22,2863,24],[3427,26,2863,28],[3428,4,2864,4],[3429,4,2865,4],[3429,10,2865,10,"updateCurrentUser"],[3429,27,2865,27,"updateCurrentUser"],[3429,28,2865,28,"userExtern"],[3429,38,2865,38],[3429,40,2865,40],[3430,6,2866,8],[3430,10,2866,12],[3430,14,2866,12,"_isFirebaseServerApp"],[3430,26,2866,32],[3430,27,2866,32,"_isFirebaseServerApp"],[3430,47,2866,32],[3430,49,2866,33],[3430,53,2866,37],[3430,54,2866,38,"app"],[3430,57,2866,41],[3430,58,2866,42],[3430,60,2866,44],[3431,8,2867,12],[3431,15,2867,19,"Promise"],[3431,22,2867,26],[3431,23,2867,27,"reject"],[3431,29,2867,33],[3431,30,2867,34,"_serverAppCurrentUserOperationNotSupportedError"],[3431,77,2867,81],[3431,78,2867,82],[3431,82,2867,86],[3431,83,2867,87],[3431,84,2867,88],[3432,6,2868,8],[3433,6,2869,8],[3434,6,2870,8],[3435,6,2871,8],[3435,12,2871,14,"user"],[3435,16,2871,18],[3435,19,2871,21,"userExtern"],[3435,29,2871,31],[3435,32,2872,14],[3435,36,2872,14,"getModularInstance"],[3435,49,2872,32],[3435,50,2872,32,"getModularInstance"],[3435,68,2872,32],[3435,70,2872,33,"userExtern"],[3435,80,2872,43],[3435,81,2872,44],[3435,84,2873,14],[3435,88,2873,18],[3436,6,2874,8],[3436,10,2874,12,"user"],[3436,14,2874,16],[3436,16,2874,18],[3437,8,2875,12,"_assert"],[3437,15,2875,19],[3437,16,2875,20,"user"],[3437,20,2875,24],[3437,21,2875,25,"auth"],[3437,25,2875,29],[3437,26,2875,30,"config"],[3437,32,2875,36],[3437,33,2875,37,"apiKey"],[3437,39,2875,43],[3437,44,2875,48],[3437,48,2875,52],[3437,49,2875,53,"config"],[3437,55,2875,59],[3437,56,2875,60,"apiKey"],[3437,62,2875,66],[3437,64,2875,68],[3437,68,2875,72],[3437,70,2875,74],[3437,90,2875,94],[3437,91,2875,95],[3437,123,2875,127],[3437,124,2875,128],[3438,6,2876,8],[3439,6,2877,8],[3439,13,2877,15],[3439,17,2877,19],[3439,18,2877,20,"_updateCurrentUser"],[3439,36,2877,38],[3439,37,2877,39,"user"],[3439,41,2877,43],[3439,45,2877,47,"user"],[3439,49,2877,51],[3439,50,2877,52,"_clone"],[3439,56,2877,58],[3439,57,2877,59],[3439,61,2877,63],[3439,62,2877,64],[3439,63,2877,65],[3440,4,2878,4],[3441,4,2879,4],[3441,10,2879,10,"_updateCurrentUser"],[3441,28,2879,28,"_updateCurrentUser"],[3441,29,2879,29,"user"],[3441,33,2879,33],[3441,35,2879,35,"skipBeforeStateCallbacks"],[3441,59,2879,59],[3441,62,2879,62],[3441,67,2879,67],[3441,69,2879,69],[3442,6,2880,8],[3442,10,2880,12],[3442,14,2880,16],[3442,15,2880,17,"_deleted"],[3442,23,2880,25],[3442,25,2880,27],[3443,8,2881,12],[3444,6,2882,8],[3445,6,2883,8],[3445,10,2883,12,"user"],[3445,14,2883,16],[3445,16,2883,18],[3446,8,2884,12,"_assert"],[3446,15,2884,19],[3446,16,2884,20],[3446,20,2884,24],[3446,21,2884,25,"tenantId"],[3446,29,2884,33],[3446,34,2884,38,"user"],[3446,38,2884,42],[3446,39,2884,43,"tenantId"],[3446,47,2884,51],[3446,49,2884,53],[3446,53,2884,57],[3446,55,2884,59],[3446,75,2884,79],[3446,76,2884,80],[3446,114,2884,118],[3446,115,2884,119],[3447,6,2885,8],[3448,6,2886,8],[3448,10,2886,12],[3448,11,2886,13,"skipBeforeStateCallbacks"],[3448,35,2886,37],[3448,37,2886,39],[3449,8,2887,12],[3449,14,2887,18],[3449,18,2887,22],[3449,19,2887,23,"beforeStateQueue"],[3449,35,2887,39],[3449,36,2887,40,"runMiddleware"],[3449,49,2887,53],[3449,50,2887,54,"user"],[3449,54,2887,58],[3449,55,2887,59],[3450,6,2888,8],[3451,6,2889,8],[3451,13,2889,15],[3451,17,2889,19],[3451,18,2889,20,"queue"],[3451,23,2889,25],[3451,24,2889,26],[3451,36,2889,38],[3452,8,2890,12],[3452,14,2890,18],[3452,18,2890,22],[3452,19,2890,23,"directlySetCurrentUser"],[3452,41,2890,45],[3452,42,2890,46,"user"],[3452,46,2890,50],[3452,47,2890,51],[3453,8,2891,12],[3453,12,2891,16],[3453,13,2891,17,"notifyAuthListeners"],[3453,32,2891,36],[3453,33,2891,37],[3453,34,2891,38],[3454,6,2892,8],[3454,7,2892,9],[3454,8,2892,10],[3455,4,2893,4],[3456,4,2894,4],[3456,10,2894,10,"signOut"],[3456,17,2894,17,"signOut"],[3456,18,2894,17],[3456,20,2894,20],[3457,6,2895,8],[3457,10,2895,12],[3457,14,2895,12,"_isFirebaseServerApp"],[3457,26,2895,32],[3457,27,2895,32,"_isFirebaseServerApp"],[3457,47,2895,32],[3457,49,2895,33],[3457,53,2895,37],[3457,54,2895,38,"app"],[3457,57,2895,41],[3457,58,2895,42],[3457,60,2895,44],[3458,8,2896,12],[3458,15,2896,19,"Promise"],[3458,22,2896,26],[3458,23,2896,27,"reject"],[3458,29,2896,33],[3458,30,2896,34,"_serverAppCurrentUserOperationNotSupportedError"],[3458,77,2896,81],[3458,78,2896,82],[3458,82,2896,86],[3458,83,2896,87],[3458,84,2896,88],[3459,6,2897,8],[3460,6,2898,8],[3461,6,2899,8],[3461,12,2899,14],[3461,16,2899,18],[3461,17,2899,19,"beforeStateQueue"],[3461,33,2899,35],[3461,34,2899,36,"runMiddleware"],[3461,47,2899,49],[3461,48,2899,50],[3461,52,2899,54],[3461,53,2899,55],[3462,6,2900,8],[3463,6,2901,8],[3463,10,2901,12],[3463,14,2901,16],[3463,15,2901,17,"redirectPersistenceManager"],[3463,41,2901,43],[3463,45,2901,47],[3463,49,2901,51],[3463,50,2901,52,"_popupRedirectResolver"],[3463,72,2901,74],[3463,74,2901,76],[3464,8,2902,12],[3464,14,2902,18],[3464,18,2902,22],[3464,19,2902,23,"_setRedirectUser"],[3464,35,2902,39],[3464,36,2902,40],[3464,40,2902,44],[3464,41,2902,45],[3465,6,2903,8],[3466,6,2904,8],[3467,6,2905,8],[3468,6,2906,8],[3468,13,2906,15],[3468,17,2906,19],[3468,18,2906,20,"_updateCurrentUser"],[3468,36,2906,38],[3468,37,2906,39],[3468,41,2906,43],[3468,43,2906,45],[3468,73,2906,76],[3468,77,2906,80],[3468,78,2906,81],[3469,4,2907,4],[3470,4,2908,4,"setPersistence"],[3470,18,2908,18,"setPersistence"],[3470,19,2908,19,"persistence"],[3470,30,2908,30],[3470,32,2908,32],[3471,6,2909,8],[3471,10,2909,12],[3471,14,2909,12,"_isFirebaseServerApp"],[3471,26,2909,32],[3471,27,2909,32,"_isFirebaseServerApp"],[3471,47,2909,32],[3471,49,2909,33],[3471,53,2909,37],[3471,54,2909,38,"app"],[3471,57,2909,41],[3471,58,2909,42],[3471,60,2909,44],[3472,8,2910,12],[3472,15,2910,19,"Promise"],[3472,22,2910,26],[3472,23,2910,27,"reject"],[3472,29,2910,33],[3472,30,2910,34,"_serverAppCurrentUserOperationNotSupportedError"],[3472,77,2910,81],[3472,78,2910,82],[3472,82,2910,86],[3472,83,2910,87],[3472,84,2910,88],[3473,6,2911,8],[3474,6,2912,8],[3474,13,2912,15],[3474,17,2912,19],[3474,18,2912,20,"queue"],[3474,23,2912,25],[3474,24,2912,26],[3474,36,2912,38],[3475,8,2913,12],[3475,14,2913,18],[3475,18,2913,22],[3475,19,2913,23,"assertedPersistence"],[3475,38,2913,42],[3475,39,2913,43,"setPersistence"],[3475,53,2913,57],[3475,54,2913,58,"_getInstance"],[3475,66,2913,70],[3475,67,2913,71,"persistence"],[3475,78,2913,82],[3475,79,2913,83],[3475,80,2913,84],[3476,6,2914,8],[3476,7,2914,9],[3476,8,2914,10],[3477,4,2915,4],[3478,4,2916,4,"_getRecaptchaConfig"],[3478,23,2916,23,"_getRecaptchaConfig"],[3478,24,2916,23],[3478,26,2916,26],[3479,6,2917,8],[3479,10,2917,12],[3479,14,2917,16],[3479,15,2917,17,"tenantId"],[3479,23,2917,25],[3479,27,2917,29],[3479,31,2917,33],[3479,33,2917,35],[3480,8,2918,12],[3480,15,2918,19],[3480,19,2918,23],[3480,20,2918,24,"_agentRecaptchaConfig"],[3480,41,2918,45],[3481,6,2919,8],[3481,7,2919,9],[3481,13,2920,13],[3482,8,2921,12],[3482,15,2921,19],[3482,19,2921,23],[3482,20,2921,24,"_tenantRecaptchaConfigs"],[3482,43,2921,47],[3482,44,2921,48],[3482,48,2921,52],[3482,49,2921,53,"tenantId"],[3482,57,2921,61],[3482,58,2921,62],[3483,6,2922,8],[3484,4,2923,4],[3485,4,2924,4],[3485,10,2924,10,"validatePassword"],[3485,26,2924,26,"validatePassword"],[3485,27,2924,27,"password"],[3485,35,2924,35],[3485,37,2924,37],[3486,6,2925,8],[3486,10,2925,12],[3486,11,2925,13],[3486,15,2925,17],[3486,16,2925,18,"_getPasswordPolicyInternal"],[3486,42,2925,44],[3486,43,2925,45],[3486,44,2925,46],[3486,46,2925,48],[3487,8,2926,12],[3487,14,2926,18],[3487,18,2926,22],[3487,19,2926,23,"_updatePasswordPolicy"],[3487,40,2926,44],[3487,41,2926,45],[3487,42,2926,46],[3488,6,2927,8],[3489,6,2928,8],[3490,6,2929,8],[3490,12,2929,14,"passwordPolicy"],[3490,26,2929,28],[3490,29,2929,31],[3490,33,2929,35],[3490,34,2929,36,"_getPasswordPolicyInternal"],[3490,60,2929,62],[3490,61,2929,63],[3490,62,2929,64],[3491,6,2930,8],[3492,6,2931,8],[3493,6,2932,8],[3493,10,2932,12,"passwordPolicy"],[3493,24,2932,26],[3493,25,2932,27,"schemaVersion"],[3493,38,2932,40],[3493,43,2933,12],[3493,47,2933,16],[3493,48,2933,17,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[3493,87,2933,56],[3493,89,2933,58],[3494,8,2934,12],[3494,15,2934,19,"Promise"],[3494,22,2934,26],[3494,23,2934,27,"reject"],[3494,29,2934,33],[3494,30,2934,34],[3494,34,2934,38],[3494,35,2934,39,"_errorFactory"],[3494,48,2934,52],[3494,49,2934,53,"create"],[3494,55,2934,59],[3494,56,2934,60],[3494,100,2934,104],[3494,101,2934,105],[3494,165,2934,169],[3494,166,2934,170],[3494,167,2934,171],[3494,168,2934,172],[3494,169,2934,173],[3495,6,2935,8],[3496,6,2936,8],[3496,13,2936,15,"passwordPolicy"],[3496,27,2936,29],[3496,28,2936,30,"validatePassword"],[3496,44,2936,46],[3496,45,2936,47,"password"],[3496,53,2936,55],[3496,54,2936,56],[3497,4,2937,4],[3498,4,2938,4,"_getPasswordPolicyInternal"],[3498,30,2938,30,"_getPasswordPolicyInternal"],[3498,31,2938,30],[3498,33,2938,33],[3499,6,2939,8],[3499,10,2939,12],[3499,14,2939,16],[3499,15,2939,17,"tenantId"],[3499,23,2939,25],[3499,28,2939,30],[3499,32,2939,34],[3499,34,2939,36],[3500,8,2940,12],[3500,15,2940,19],[3500,19,2940,23],[3500,20,2940,24,"_projectPasswordPolicy"],[3500,42,2940,46],[3501,6,2941,8],[3501,7,2941,9],[3501,13,2942,13],[3502,8,2943,12],[3502,15,2943,19],[3502,19,2943,23],[3502,20,2943,24,"_tenantPasswordPolicies"],[3502,43,2943,47],[3502,44,2943,48],[3502,48,2943,52],[3502,49,2943,53,"tenantId"],[3502,57,2943,61],[3502,58,2943,62],[3503,6,2944,8],[3504,4,2945,4],[3505,4,2946,4],[3505,10,2946,10,"_updatePasswordPolicy"],[3505,31,2946,31,"_updatePasswordPolicy"],[3505,32,2946,31],[3505,34,2946,34],[3506,6,2947,8],[3506,12,2947,14,"response"],[3506,20,2947,22],[3506,23,2947,25],[3506,29,2947,31,"_getPasswordPolicy"],[3506,47,2947,49],[3506,48,2947,50],[3506,52,2947,54],[3506,53,2947,55],[3507,6,2948,8],[3507,12,2948,14,"passwordPolicy"],[3507,26,2948,28],[3507,29,2948,31],[3507,33,2948,35,"PasswordPolicyImpl"],[3507,51,2948,53],[3507,52,2948,54,"response"],[3507,60,2948,62],[3507,61,2948,63],[3508,6,2949,8],[3508,10,2949,12],[3508,14,2949,16],[3508,15,2949,17,"tenantId"],[3508,23,2949,25],[3508,28,2949,30],[3508,32,2949,34],[3508,34,2949,36],[3509,8,2950,12],[3509,12,2950,16],[3509,13,2950,17,"_projectPasswordPolicy"],[3509,35,2950,39],[3509,38,2950,42,"passwordPolicy"],[3509,52,2950,56],[3510,6,2951,8],[3510,7,2951,9],[3510,13,2952,13],[3511,8,2953,12],[3511,12,2953,16],[3511,13,2953,17,"_tenantPasswordPolicies"],[3511,36,2953,40],[3511,37,2953,41],[3511,41,2953,45],[3511,42,2953,46,"tenantId"],[3511,50,2953,54],[3511,51,2953,55],[3511,54,2953,58,"passwordPolicy"],[3511,68,2953,72],[3512,6,2954,8],[3513,4,2955,4],[3514,4,2956,4,"_getPersistenceType"],[3514,23,2956,23,"_getPersistenceType"],[3514,24,2956,23],[3514,26,2956,26],[3515,6,2957,8],[3515,13,2957,15],[3515,17,2957,19],[3515,18,2957,20,"assertedPersistence"],[3515,37,2957,39],[3515,38,2957,40,"persistence"],[3515,49,2957,51],[3515,50,2957,52,"type"],[3515,54,2957,56],[3516,4,2958,4],[3517,4,2959,4,"_getPersistence"],[3517,19,2959,19,"_getPersistence"],[3517,20,2959,19],[3517,22,2959,22],[3518,6,2960,8],[3518,13,2960,15],[3518,17,2960,19],[3518,18,2960,20,"assertedPersistence"],[3518,37,2960,39],[3518,38,2960,40,"persistence"],[3518,49,2960,51],[3519,4,2961,4],[3520,4,2962,4,"_updateErrorMap"],[3520,19,2962,19,"_updateErrorMap"],[3520,20,2962,20,"errorMap"],[3520,28,2962,28],[3520,30,2962,30],[3521,6,2963,8],[3521,10,2963,12],[3521,11,2963,13,"_errorFactory"],[3521,24,2963,26],[3521,27,2963,29],[3521,31,2963,33,"ErrorFactory"],[3521,44,2963,45],[3521,45,2963,45,"ErrorFactory"],[3521,57,2963,45],[3521,58,2963,46],[3521,64,2963,52],[3521,66,2963,54],[3521,76,2963,64],[3521,78,2963,66,"errorMap"],[3521,86,2963,74],[3521,87,2963,75],[3521,88,2963,76],[3521,89,2963,77],[3522,4,2964,4],[3523,4,2965,4,"onAuthStateChanged"],[3523,22,2965,22,"onAuthStateChanged"],[3523,23,2965,23,"nextOrObserver"],[3523,37,2965,37],[3523,39,2965,39,"error"],[3523,44,2965,44],[3523,46,2965,46,"completed"],[3523,55,2965,55],[3523,57,2965,57],[3524,6,2966,8],[3524,13,2966,15],[3524,17,2966,19],[3524,18,2966,20,"registerStateListener"],[3524,39,2966,41],[3524,40,2966,42],[3524,44,2966,46],[3524,45,2966,47,"authStateSubscription"],[3524,66,2966,68],[3524,68,2966,70,"nextOrObserver"],[3524,82,2966,84],[3524,84,2966,86,"error"],[3524,89,2966,91],[3524,91,2966,93,"completed"],[3524,100,2966,102],[3524,101,2966,103],[3525,4,2967,4],[3526,4,2968,4,"beforeAuthStateChanged"],[3526,26,2968,26,"beforeAuthStateChanged"],[3526,27,2968,27,"callback"],[3526,35,2968,35],[3526,37,2968,37,"onAbort"],[3526,44,2968,44],[3526,46,2968,46],[3527,6,2969,8],[3527,13,2969,15],[3527,17,2969,19],[3527,18,2969,20,"beforeStateQueue"],[3527,34,2969,36],[3527,35,2969,37,"pushCallback"],[3527,47,2969,49],[3527,48,2969,50,"callback"],[3527,56,2969,58],[3527,58,2969,60,"onAbort"],[3527,65,2969,67],[3527,66,2969,68],[3528,4,2970,4],[3529,4,2971,4,"onIdTokenChanged"],[3529,20,2971,20,"onIdTokenChanged"],[3529,21,2971,21,"nextOrObserver"],[3529,35,2971,35],[3529,37,2971,37,"error"],[3529,42,2971,42],[3529,44,2971,44,"completed"],[3529,53,2971,53],[3529,55,2971,55],[3530,6,2972,8],[3530,13,2972,15],[3530,17,2972,19],[3530,18,2972,20,"registerStateListener"],[3530,39,2972,41],[3530,40,2972,42],[3530,44,2972,46],[3530,45,2972,47,"idTokenSubscription"],[3530,64,2972,66],[3530,66,2972,68,"nextOrObserver"],[3530,80,2972,82],[3530,82,2972,84,"error"],[3530,87,2972,89],[3530,89,2972,91,"completed"],[3530,98,2972,100],[3530,99,2972,101],[3531,4,2973,4],[3532,4,2974,4,"authStateReady"],[3532,18,2974,18,"authStateReady"],[3532,19,2974,18],[3532,21,2974,21],[3533,6,2975,8],[3533,13,2975,15],[3533,17,2975,19,"Promise"],[3533,24,2975,26],[3533,25,2975,27],[3533,26,2975,28,"resolve"],[3533,33,2975,35],[3533,35,2975,37,"reject"],[3533,41,2975,43],[3533,46,2975,48],[3534,8,2976,12],[3534,12,2976,16],[3534,16,2976,20],[3534,17,2976,21,"currentUser"],[3534,28,2976,32],[3534,30,2976,34],[3535,10,2977,16,"resolve"],[3535,17,2977,23],[3535,18,2977,24],[3535,19,2977,25],[3536,8,2978,12],[3536,9,2978,13],[3536,15,2979,17],[3537,10,2980,16],[3537,16,2980,22,"unsubscribe"],[3537,27,2980,33],[3537,30,2980,36],[3537,34,2980,40],[3537,35,2980,41,"onAuthStateChanged"],[3537,53,2980,59],[3537,54,2980,60],[3537,60,2980,66],[3538,12,2981,20,"unsubscribe"],[3538,23,2981,31],[3538,24,2981,32],[3538,25,2981,33],[3539,12,2982,20,"resolve"],[3539,19,2982,27],[3539,20,2982,28],[3539,21,2982,29],[3540,10,2983,16],[3540,11,2983,17],[3540,13,2983,19,"reject"],[3540,19,2983,25],[3540,20,2983,26],[3541,8,2984,12],[3542,6,2985,8],[3542,7,2985,9],[3542,8,2985,10],[3543,4,2986,4],[3544,4,2987,4],[3545,0,2988,0],[3546,0,2989,0],[3547,4,2990,4],[3547,10,2990,10,"revokeAccessToken"],[3547,27,2990,27,"revokeAccessToken"],[3547,28,2990,28,"token"],[3547,33,2990,33],[3547,35,2990,35],[3548,6,2991,8],[3548,10,2991,12],[3548,14,2991,16],[3548,15,2991,17,"currentUser"],[3548,26,2991,28],[3548,28,2991,30],[3549,8,2992,12],[3549,14,2992,18,"idToken"],[3549,21,2992,25],[3549,24,2992,28],[3549,30,2992,34],[3549,34,2992,38],[3549,35,2992,39,"currentUser"],[3549,46,2992,50],[3549,47,2992,51,"getIdToken"],[3549,57,2992,61],[3549,58,2992,62],[3549,59,2992,63],[3550,8,2993,12],[3551,8,2994,12],[3551,14,2994,18,"request"],[3551,21,2994,25],[3551,24,2994,28],[3552,10,2995,16,"providerId"],[3552,20,2995,26],[3552,22,2995,28],[3552,33,2995,39],[3553,10,2996,16,"tokenType"],[3553,19,2996,25],[3553,21,2996,27],[3553,35,2996,41],[3553,36,2996,42],[3554,10,2997,16,"token"],[3554,15,2997,21],[3555,10,2998,16,"idToken"],[3556,8,2999,12],[3556,9,2999,13],[3557,8,3000,12],[3557,12,3000,16],[3557,16,3000,20],[3557,17,3000,21,"tenantId"],[3557,25,3000,29],[3557,29,3000,33],[3557,33,3000,37],[3557,35,3000,39],[3558,10,3001,16,"request"],[3558,17,3001,23],[3558,18,3001,24,"tenantId"],[3558,26,3001,32],[3558,29,3001,35],[3558,33,3001,39],[3558,34,3001,40,"tenantId"],[3558,42,3001,48],[3559,8,3002,12],[3560,8,3003,12],[3560,14,3003,18,"revokeToken"],[3560,25,3003,29],[3560,26,3003,30],[3560,30,3003,34],[3560,32,3003,36,"request"],[3560,39,3003,43],[3560,40,3003,44],[3561,6,3004,8],[3562,4,3005,4],[3563,4,3006,4,"toJSON"],[3563,10,3006,10,"toJSON"],[3563,11,3006,10],[3563,13,3006,13],[3564,6,3007,8],[3564,13,3007,15],[3565,8,3008,12,"apiKey"],[3565,14,3008,18],[3565,16,3008,20],[3565,20,3008,24],[3565,21,3008,25,"config"],[3565,27,3008,31],[3565,28,3008,32,"apiKey"],[3565,34,3008,38],[3566,8,3009,12,"authDomain"],[3566,18,3009,22],[3566,20,3009,24],[3566,24,3009,28],[3566,25,3009,29,"config"],[3566,31,3009,35],[3566,32,3009,36,"authDomain"],[3566,42,3009,46],[3567,8,3010,12,"appName"],[3567,15,3010,19],[3567,17,3010,21],[3567,21,3010,25],[3567,22,3010,26,"name"],[3567,26,3010,30],[3568,8,3011,12,"currentUser"],[3568,19,3011,23],[3568,21,3011,25],[3568,25,3011,29],[3568,26,3011,30,"_currentUser"],[3568,38,3011,42],[3568,40,3011,44,"toJSON"],[3568,46,3011,50],[3568,47,3011,51],[3569,6,3012,8],[3569,7,3012,9],[3570,4,3013,4],[3571,4,3014,4],[3571,10,3014,10,"_setRedirectUser"],[3571,26,3014,26,"_setRedirectUser"],[3571,27,3014,27,"user"],[3571,31,3014,31],[3571,33,3014,33,"popupRedirectResolver"],[3571,54,3014,54],[3571,56,3014,56],[3572,6,3015,8],[3572,12,3015,14,"redirectManager"],[3572,27,3015,29],[3572,30,3015,32],[3572,36,3015,38],[3572,40,3015,42],[3572,41,3015,43,"getOrInitRedirectPersistenceManager"],[3572,76,3015,78],[3572,77,3015,79,"popupRedirectResolver"],[3572,98,3015,100],[3572,99,3015,101],[3573,6,3016,8],[3573,13,3016,15,"user"],[3573,17,3016,19],[3573,22,3016,24],[3573,26,3016,28],[3573,29,3017,14,"redirectManager"],[3573,44,3017,29],[3573,45,3017,30,"removeCurrentUser"],[3573,62,3017,47],[3573,63,3017,48],[3573,64,3017,49],[3573,67,3018,14,"redirectManager"],[3573,82,3018,29],[3573,83,3018,30,"setCurrentUser"],[3573,97,3018,44],[3573,98,3018,45,"user"],[3573,102,3018,49],[3573,103,3018,50],[3574,4,3019,4],[3575,4,3020,4],[3575,10,3020,10,"getOrInitRedirectPersistenceManager"],[3575,45,3020,45,"getOrInitRedirectPersistenceManager"],[3575,46,3020,46,"popupRedirectResolver"],[3575,67,3020,67],[3575,69,3020,69],[3576,6,3021,8],[3576,10,3021,12],[3576,11,3021,13],[3576,15,3021,17],[3576,16,3021,18,"redirectPersistenceManager"],[3576,42,3021,44],[3576,44,3021,46],[3577,8,3022,12],[3577,14,3022,18,"resolver"],[3577,22,3022,26],[3577,25,3022,30,"popupRedirectResolver"],[3577,46,3022,51],[3577,50,3022,55,"_getInstance"],[3577,62,3022,67],[3577,63,3022,68,"popupRedirectResolver"],[3577,84,3022,89],[3577,85,3022,90],[3577,89,3023,16],[3577,93,3023,20],[3577,94,3023,21,"_popupRedirectResolver"],[3577,116,3023,43],[3578,8,3024,12,"_assert"],[3578,15,3024,19],[3578,16,3024,20,"resolver"],[3578,24,3024,28],[3578,26,3024,30],[3578,30,3024,34],[3578,32,3024,36],[3578,48,3024,52],[3578,49,3024,53],[3578,83,3024,87],[3578,84,3024,88],[3579,8,3025,12],[3579,12,3025,16],[3579,13,3025,17,"redirectPersistenceManager"],[3579,39,3025,43],[3579,42,3025,46],[3579,48,3025,52,"PersistenceUserManager"],[3579,70,3025,74],[3579,71,3025,75,"create"],[3579,77,3025,81],[3579,78,3025,82],[3579,82,3025,86],[3579,84,3025,88],[3579,85,3025,89,"_getInstance"],[3579,97,3025,101],[3579,98,3025,102,"resolver"],[3579,106,3025,110],[3579,107,3025,111,"_redirectPersistence"],[3579,127,3025,131],[3579,128,3025,132],[3579,129,3025,133],[3579,131,3025,135],[3579,145,3025,149],[3579,146,3025,150],[3579,173,3025,177],[3579,174,3025,178],[3580,8,3026,12],[3580,12,3026,16],[3580,13,3026,17,"redirectUser"],[3580,25,3026,29],[3580,28,3027,16],[3580,34,3027,22],[3580,38,3027,26],[3580,39,3027,27,"redirectPersistenceManager"],[3580,65,3027,53],[3580,66,3027,54,"getCurrentUser"],[3580,80,3027,68],[3580,81,3027,69],[3580,82,3027,70],[3581,6,3028,8],[3582,6,3029,8],[3582,13,3029,15],[3582,17,3029,19],[3582,18,3029,20,"redirectPersistenceManager"],[3582,44,3029,46],[3583,4,3030,4],[3584,4,3031,4],[3584,10,3031,10,"_redirectUserForId"],[3584,28,3031,28,"_redirectUserForId"],[3584,29,3031,29,"id"],[3584,31,3031,31],[3584,33,3031,33],[3585,6,3032,8],[3586,6,3033,8],[3587,6,3034,8],[3587,10,3034,12],[3587,14,3034,16],[3587,15,3034,17,"_isInitialized"],[3587,29,3034,31],[3587,31,3034,33],[3588,8,3035,12],[3588,14,3035,18],[3588,18,3035,22],[3588,19,3035,23,"queue"],[3588,24,3035,28],[3588,25,3035,29],[3588,37,3035,41],[3588,38,3035,43],[3588,39,3035,44],[3588,40,3035,45],[3589,6,3036,8],[3590,6,3037,8],[3590,10,3037,12],[3590,14,3037,16],[3590,15,3037,17,"_currentUser"],[3590,27,3037,29],[3590,29,3037,31,"_redirectEventId"],[3590,45,3037,47],[3590,50,3037,52,"id"],[3590,52,3037,54],[3590,54,3037,56],[3591,8,3038,12],[3591,15,3038,19],[3591,19,3038,23],[3591,20,3038,24,"_currentUser"],[3591,32,3038,36],[3592,6,3039,8],[3593,6,3040,8],[3593,10,3040,12],[3593,14,3040,16],[3593,15,3040,17,"redirectUser"],[3593,27,3040,29],[3593,29,3040,31,"_redirectEventId"],[3593,45,3040,47],[3593,50,3040,52,"id"],[3593,52,3040,54],[3593,54,3040,56],[3594,8,3041,12],[3594,15,3041,19],[3594,19,3041,23],[3594,20,3041,24,"redirectUser"],[3594,32,3041,36],[3595,6,3042,8],[3596,6,3043,8],[3596,13,3043,15],[3596,17,3043,19],[3597,4,3044,4],[3598,4,3045,4],[3598,10,3045,10,"_persistUserIfCurrent"],[3598,31,3045,31,"_persistUserIfCurrent"],[3598,32,3045,32,"user"],[3598,36,3045,36],[3598,38,3045,38],[3599,6,3046,8],[3599,10,3046,12,"user"],[3599,14,3046,16],[3599,19,3046,21],[3599,23,3046,25],[3599,24,3046,26,"currentUser"],[3599,35,3046,37],[3599,37,3046,39],[3600,8,3047,12],[3600,15,3047,19],[3600,19,3047,23],[3600,20,3047,24,"queue"],[3600,25,3047,29],[3600,26,3047,30],[3600,38,3047,42],[3600,42,3047,46],[3600,43,3047,47,"directlySetCurrentUser"],[3600,65,3047,69],[3600,66,3047,70,"user"],[3600,70,3047,74],[3600,71,3047,75],[3600,72,3047,76],[3601,6,3048,8],[3602,4,3049,4],[3603,4,3050,4],[3604,4,3051,4,"_notifyListenersIfCurrent"],[3604,29,3051,29,"_notifyListenersIfCurrent"],[3604,30,3051,30,"user"],[3604,34,3051,34],[3604,36,3051,36],[3605,6,3052,8],[3605,10,3052,12,"user"],[3605,14,3052,16],[3605,19,3052,21],[3605,23,3052,25],[3605,24,3052,26,"currentUser"],[3605,35,3052,37],[3605,37,3052,39],[3606,8,3053,12],[3606,12,3053,16],[3606,13,3053,17,"notifyAuthListeners"],[3606,32,3053,36],[3606,33,3053,37],[3606,34,3053,38],[3607,6,3054,8],[3608,4,3055,4],[3609,4,3056,4,"_key"],[3609,8,3056,8,"_key"],[3609,9,3056,8],[3609,11,3056,11],[3610,6,3057,8],[3610,13,3057,15],[3610,16,3057,18],[3610,20,3057,22],[3610,21,3057,23,"config"],[3610,27,3057,29],[3610,28,3057,30,"authDomain"],[3610,38,3057,40],[3610,42,3057,44],[3610,46,3057,48],[3610,47,3057,49,"config"],[3610,53,3057,55],[3610,54,3057,56,"apiKey"],[3610,60,3057,62],[3610,64,3057,66],[3610,68,3057,70],[3610,69,3057,71,"name"],[3610,73,3057,75],[3610,75,3057,77],[3611,4,3058,4],[3612,4,3059,4,"_startProactiveRefresh"],[3612,26,3059,26,"_startProactiveRefresh"],[3612,27,3059,26],[3612,29,3059,29],[3613,6,3060,8],[3613,10,3060,12],[3613,11,3060,13,"isProactiveRefreshEnabled"],[3613,36,3060,38],[3613,39,3060,41],[3613,43,3060,45],[3614,6,3061,8],[3614,10,3061,12],[3614,14,3061,16],[3614,15,3061,17,"currentUser"],[3614,26,3061,28],[3614,28,3061,30],[3615,8,3062,12],[3615,12,3062,16],[3615,13,3062,17,"_currentUser"],[3615,25,3062,29],[3615,26,3062,30,"_startProactiveRefresh"],[3615,48,3062,52],[3615,49,3062,53],[3615,50,3062,54],[3616,6,3063,8],[3617,4,3064,4],[3618,4,3065,4,"_stopProactiveRefresh"],[3618,25,3065,25,"_stopProactiveRefresh"],[3618,26,3065,25],[3618,28,3065,28],[3619,6,3066,8],[3619,10,3066,12],[3619,11,3066,13,"isProactiveRefreshEnabled"],[3619,36,3066,38],[3619,39,3066,41],[3619,44,3066,46],[3620,6,3067,8],[3620,10,3067,12],[3620,14,3067,16],[3620,15,3067,17,"currentUser"],[3620,26,3067,28],[3620,28,3067,30],[3621,8,3068,12],[3621,12,3068,16],[3621,13,3068,17,"_currentUser"],[3621,25,3068,29],[3621,26,3068,30,"_stopProactiveRefresh"],[3621,47,3068,51],[3621,48,3068,52],[3621,49,3068,53],[3622,6,3069,8],[3623,4,3070,4],[3624,4,3071,4],[3625,4,3072,4],[3625,8,3072,8,"_currentUser"],[3625,20,3072,20,"_currentUser"],[3625,21,3072,20],[3625,23,3072,23],[3626,6,3073,8],[3626,13,3073,15],[3626,17,3073,19],[3626,18,3073,20,"currentUser"],[3626,29,3073,31],[3627,4,3074,4],[3628,4,3075,4,"notifyAuthListeners"],[3628,23,3075,23,"notifyAuthListeners"],[3628,24,3075,23],[3628,26,3075,26],[3629,6,3076,8],[3629,10,3076,12],[3629,11,3076,13],[3629,15,3076,17],[3629,16,3076,18,"_isInitialized"],[3629,30,3076,32],[3629,32,3076,34],[3630,8,3077,12],[3631,6,3078,8],[3632,6,3079,8],[3632,10,3079,12],[3632,11,3079,13,"idTokenSubscription"],[3632,30,3079,32],[3632,31,3079,33,"next"],[3632,35,3079,37],[3632,36,3079,38],[3632,40,3079,42],[3632,41,3079,43,"currentUser"],[3632,52,3079,54],[3632,53,3079,55],[3633,6,3080,8],[3633,12,3080,14,"currentUid"],[3633,22,3080,24],[3633,25,3080,27],[3633,29,3080,31],[3633,30,3080,32,"currentUser"],[3633,41,3080,43],[3633,43,3080,45,"uid"],[3633,46,3080,48],[3633,50,3080,52],[3633,54,3080,56],[3634,6,3081,8],[3634,10,3081,12],[3634,14,3081,16],[3634,15,3081,17,"lastNotifiedUid"],[3634,30,3081,32],[3634,35,3081,37,"currentUid"],[3634,45,3081,47],[3634,47,3081,49],[3635,8,3082,12],[3635,12,3082,16],[3635,13,3082,17,"lastNotifiedUid"],[3635,28,3082,32],[3635,31,3082,35,"currentUid"],[3635,41,3082,45],[3636,8,3083,12],[3636,12,3083,16],[3636,13,3083,17,"authStateSubscription"],[3636,34,3083,38],[3636,35,3083,39,"next"],[3636,39,3083,43],[3636,40,3083,44],[3636,44,3083,48],[3636,45,3083,49,"currentUser"],[3636,56,3083,60],[3636,57,3083,61],[3637,6,3084,8],[3638,4,3085,4],[3639,4,3086,4,"registerStateListener"],[3639,25,3086,25,"registerStateListener"],[3639,26,3086,26,"subscription"],[3639,38,3086,38],[3639,40,3086,40,"nextOrObserver"],[3639,54,3086,54],[3639,56,3086,56,"error"],[3639,61,3086,61],[3639,63,3086,63,"completed"],[3639,72,3086,72],[3639,74,3086,74],[3640,6,3087,8],[3640,10,3087,12],[3640,14,3087,16],[3640,15,3087,17,"_deleted"],[3640,23,3087,25],[3640,25,3087,27],[3641,8,3088,12],[3641,15,3088,19],[3641,21,3088,25],[3641,22,3088,27],[3641,23,3088,28],[3642,6,3089,8],[3643,6,3090,8],[3643,12,3090,14,"cb"],[3643,14,3090,16],[3643,17,3090,19],[3643,24,3090,26,"nextOrObserver"],[3643,38,3090,40],[3643,43,3090,45],[3643,53,3090,55],[3643,56,3091,14,"nextOrObserver"],[3643,70,3091,28],[3643,73,3092,14,"nextOrObserver"],[3643,87,3092,28],[3643,88,3092,29,"next"],[3643,92,3092,33],[3643,93,3092,34,"bind"],[3643,97,3092,38],[3643,98,3092,39,"nextOrObserver"],[3643,112,3092,53],[3643,113,3092,54],[3644,6,3093,8],[3644,10,3093,12,"isUnsubscribed"],[3644,24,3093,26],[3644,27,3093,29],[3644,32,3093,34],[3645,6,3094,8],[3645,12,3094,14,"promise"],[3645,19,3094,21],[3645,22,3094,24],[3645,26,3094,28],[3645,27,3094,29,"_isInitialized"],[3645,41,3094,43],[3645,44,3095,14,"Promise"],[3645,51,3095,21],[3645,52,3095,22,"resolve"],[3645,59,3095,29],[3645,60,3095,30],[3645,61,3095,31],[3645,64,3096,14],[3645,68,3096,18],[3645,69,3096,19,"_initializationPromise"],[3645,91,3096,41],[3646,6,3097,8,"_assert"],[3646,13,3097,15],[3646,14,3097,16,"promise"],[3646,21,3097,23],[3646,23,3097,25],[3646,27,3097,29],[3646,29,3097,31],[3646,45,3097,47],[3646,46,3097,48],[3646,80,3097,82],[3646,81,3097,83],[3647,6,3098,8],[3648,6,3099,8],[3649,6,3100,8,"promise"],[3649,13,3100,15],[3649,14,3100,16,"then"],[3649,18,3100,20],[3649,19,3100,21],[3649,25,3100,27],[3650,8,3101,12],[3650,12,3101,16,"isUnsubscribed"],[3650,26,3101,30],[3650,28,3101,32],[3651,10,3102,16],[3652,8,3103,12],[3653,8,3104,12,"cb"],[3653,10,3104,14],[3653,11,3104,15],[3653,15,3104,19],[3653,16,3104,20,"currentUser"],[3653,27,3104,31],[3653,28,3104,32],[3654,6,3105,8],[3654,7,3105,9],[3654,8,3105,10],[3655,6,3106,8],[3655,10,3106,12],[3655,17,3106,19,"nextOrObserver"],[3655,31,3106,33],[3655,36,3106,38],[3655,46,3106,48],[3655,48,3106,50],[3656,8,3107,12],[3656,14,3107,18,"unsubscribe"],[3656,25,3107,29],[3656,28,3107,32,"subscription"],[3656,40,3107,44],[3656,41,3107,45,"addObserver"],[3656,52,3107,56],[3656,53,3107,57,"nextOrObserver"],[3656,67,3107,71],[3656,69,3107,73,"error"],[3656,74,3107,78],[3656,76,3107,80,"completed"],[3656,85,3107,89],[3656,86,3107,90],[3657,8,3108,12],[3657,15,3108,19],[3657,21,3108,25],[3658,10,3109,16,"isUnsubscribed"],[3658,24,3109,30],[3658,27,3109,33],[3658,31,3109,37],[3659,10,3110,16,"unsubscribe"],[3659,21,3110,27],[3659,22,3110,28],[3659,23,3110,29],[3660,8,3111,12],[3660,9,3111,13],[3661,6,3112,8],[3661,7,3112,9],[3661,13,3113,13],[3662,8,3114,12],[3662,14,3114,18,"unsubscribe"],[3662,25,3114,29],[3662,28,3114,32,"subscription"],[3662,40,3114,44],[3662,41,3114,45,"addObserver"],[3662,52,3114,56],[3662,53,3114,57,"nextOrObserver"],[3662,67,3114,71],[3662,68,3114,72],[3663,8,3115,12],[3663,15,3115,19],[3663,21,3115,25],[3664,10,3116,16,"isUnsubscribed"],[3664,24,3116,30],[3664,27,3116,33],[3664,31,3116,37],[3665,10,3117,16,"unsubscribe"],[3665,21,3117,27],[3665,22,3117,28],[3665,23,3117,29],[3666,8,3118,12],[3666,9,3118,13],[3667,6,3119,8],[3668,4,3120,4],[3669,4,3121,4],[3670,0,3122,0],[3671,0,3123,0],[3672,0,3124,0],[3673,0,3125,0],[3674,4,3126,4],[3674,10,3126,10,"directlySetCurrentUser"],[3674,32,3126,32,"directlySetCurrentUser"],[3674,33,3126,33,"user"],[3674,37,3126,37],[3674,39,3126,39],[3675,6,3127,8],[3675,10,3127,12],[3675,14,3127,16],[3675,15,3127,17,"currentUser"],[3675,26,3127,28],[3675,30,3127,32],[3675,34,3127,36],[3675,35,3127,37,"currentUser"],[3675,46,3127,48],[3675,51,3127,53,"user"],[3675,55,3127,57],[3675,57,3127,59],[3676,8,3128,12],[3676,12,3128,16],[3676,13,3128,17,"_currentUser"],[3676,25,3128,29],[3676,26,3128,30,"_stopProactiveRefresh"],[3676,47,3128,51],[3676,48,3128,52],[3676,49,3128,53],[3677,6,3129,8],[3678,6,3130,8],[3678,10,3130,12,"user"],[3678,14,3130,16],[3678,18,3130,20],[3678,22,3130,24],[3678,23,3130,25,"isProactiveRefreshEnabled"],[3678,48,3130,50],[3678,50,3130,52],[3679,8,3131,12,"user"],[3679,12,3131,16],[3679,13,3131,17,"_startProactiveRefresh"],[3679,35,3131,39],[3679,36,3131,40],[3679,37,3131,41],[3680,6,3132,8],[3681,6,3133,8],[3681,10,3133,12],[3681,11,3133,13,"currentUser"],[3681,22,3133,24],[3681,25,3133,27,"user"],[3681,29,3133,31],[3682,6,3134,8],[3682,10,3134,12,"user"],[3682,14,3134,16],[3682,16,3134,18],[3683,8,3135,12],[3683,14,3135,18],[3683,18,3135,22],[3683,19,3135,23,"assertedPersistence"],[3683,38,3135,42],[3683,39,3135,43,"setCurrentUser"],[3683,53,3135,57],[3683,54,3135,58,"user"],[3683,58,3135,62],[3683,59,3135,63],[3684,6,3136,8],[3684,7,3136,9],[3684,13,3137,13],[3685,8,3138,12],[3685,14,3138,18],[3685,18,3138,22],[3685,19,3138,23,"assertedPersistence"],[3685,38,3138,42],[3685,39,3138,43,"removeCurrentUser"],[3685,56,3138,60],[3685,57,3138,61],[3685,58,3138,62],[3686,6,3139,8],[3687,4,3140,4],[3688,4,3141,4,"queue"],[3688,9,3141,9,"queue"],[3688,10,3141,10,"action"],[3688,16,3141,16],[3688,18,3141,18],[3689,6,3142,8],[3690,6,3143,8],[3691,6,3144,8],[3691,10,3144,12],[3691,11,3144,13,"operations"],[3691,21,3144,23],[3691,24,3144,26],[3691,28,3144,30],[3691,29,3144,31,"operations"],[3691,39,3144,41],[3691,40,3144,42,"then"],[3691,44,3144,46],[3691,45,3144,47,"action"],[3691,51,3144,53],[3691,53,3144,55,"action"],[3691,59,3144,61],[3691,60,3144,62],[3692,6,3145,8],[3692,13,3145,15],[3692,17,3145,19],[3692,18,3145,20,"operations"],[3692,28,3145,30],[3693,4,3146,4],[3694,4,3147,4],[3694,8,3147,8,"assertedPersistence"],[3694,27,3147,27,"assertedPersistence"],[3694,28,3147,27],[3694,30,3147,30],[3695,6,3148,8,"_assert"],[3695,13,3148,15],[3695,14,3148,16],[3695,18,3148,20],[3695,19,3148,21,"persistenceManager"],[3695,37,3148,39],[3695,39,3148,41],[3695,43,3148,45],[3695,45,3148,47],[3695,61,3148,63],[3695,62,3148,64],[3695,96,3148,98],[3695,97,3148,99],[3696,6,3149,8],[3696,13,3149,15],[3696,17,3149,19],[3696,18,3149,20,"persistenceManager"],[3696,36,3149,38],[3697,4,3150,4],[3698,4,3151,4,"_logFramework"],[3698,17,3151,17,"_logFramework"],[3698,18,3151,18,"framework"],[3698,27,3151,27],[3698,29,3151,29],[3699,6,3152,8],[3699,10,3152,12],[3699,11,3152,13,"framework"],[3699,20,3152,22],[3699,24,3152,26],[3699,28,3152,30],[3699,29,3152,31,"frameworks"],[3699,39,3152,41],[3699,40,3152,42,"includes"],[3699,48,3152,50],[3699,49,3152,51,"framework"],[3699,58,3152,60],[3699,59,3152,61],[3699,61,3152,63],[3700,8,3153,12],[3701,6,3154,8],[3702,6,3155,8],[3702,10,3155,12],[3702,11,3155,13,"frameworks"],[3702,21,3155,23],[3702,22,3155,24,"push"],[3702,26,3155,28],[3702,27,3155,29,"framework"],[3702,36,3155,38],[3702,37,3155,39],[3703,6,3156,8],[3704,6,3157,8],[3705,6,3158,8],[3705,10,3158,12],[3705,11,3158,13,"frameworks"],[3705,21,3158,23],[3705,22,3158,24,"sort"],[3705,26,3158,28],[3705,27,3158,29],[3705,28,3158,30],[3706,6,3159,8],[3706,10,3159,12],[3706,11,3159,13,"clientVersion"],[3706,24,3159,26],[3706,27,3159,29,"_getClientVersion"],[3706,44,3159,46],[3706,45,3159,47],[3706,49,3159,51],[3706,50,3159,52,"config"],[3706,56,3159,58],[3706,57,3159,59,"clientPlatform"],[3706,71,3159,73],[3706,73,3159,75],[3706,77,3159,79],[3706,78,3159,80,"_getFrameworks"],[3706,92,3159,94],[3706,93,3159,95],[3706,94,3159,96],[3706,95,3159,97],[3707,4,3160,4],[3708,4,3161,4,"_getFrameworks"],[3708,18,3161,18,"_getFrameworks"],[3708,19,3161,18],[3708,21,3161,21],[3709,6,3162,8],[3709,13,3162,15],[3709,17,3162,19],[3709,18,3162,20,"frameworks"],[3709,28,3162,30],[3710,4,3163,4],[3711,4,3164,4],[3711,10,3164,10,"_getAdditionalHeaders"],[3711,31,3164,31,"_getAdditionalHeaders"],[3711,32,3164,31],[3711,34,3164,34],[3712,6,3165,8],[3713,6,3166,8],[3713,12,3166,14,"headers"],[3713,19,3166,21],[3713,22,3166,24],[3714,8,3167,12],[3714,9,3167,13],[3714,27,3167,31],[3714,28,3167,32],[3714,64,3167,68],[3714,68,3167,72],[3714,69,3167,73,"clientVersion"],[3715,6,3168,8],[3715,7,3168,9],[3716,6,3169,8],[3716,10,3169,12],[3716,14,3169,16],[3716,15,3169,17,"app"],[3716,18,3169,20],[3716,19,3169,21,"options"],[3716,26,3169,28],[3716,27,3169,29,"appId"],[3716,32,3169,34],[3716,34,3169,36],[3717,8,3170,12,"headers"],[3717,15,3170,19],[3717,16,3170,20],[3717,34,3170,38],[3717,35,3170,39],[3717,69,3170,73],[3717,72,3170,76],[3717,76,3170,80],[3717,77,3170,81,"app"],[3717,80,3170,84],[3717,81,3170,85,"options"],[3717,88,3170,92],[3717,89,3170,93,"appId"],[3717,94,3170,98],[3718,6,3171,8],[3719,6,3172,8],[3720,6,3173,8],[3720,12,3173,14,"heartbeatsHeader"],[3720,28,3173,30],[3720,31,3173,33],[3720,37,3173,39],[3720,41,3173,43],[3720,42,3173,44,"heartbeatServiceProvider"],[3720,66,3173,68],[3720,67,3174,13,"getImmediate"],[3720,79,3174,25],[3720,80,3174,26],[3721,8,3175,12,"optional"],[3721,16,3175,20],[3721,18,3175,22],[3722,6,3176,8],[3722,7,3176,9],[3722,8,3176,10],[3722,10,3177,14,"getHeartbeatsHeader"],[3722,29,3177,33],[3722,30,3177,34],[3722,31,3177,35],[3723,6,3178,8],[3723,10,3178,12,"heartbeatsHeader"],[3723,26,3178,28],[3723,28,3178,30],[3724,8,3179,12,"headers"],[3724,15,3179,19],[3724,16,3179,20],[3724,35,3179,39],[3724,36,3179,40],[3724,71,3179,75],[3724,74,3179,78,"heartbeatsHeader"],[3724,90,3179,94],[3725,6,3180,8],[3726,6,3181,8],[3727,6,3182,8],[3727,12,3182,14,"appCheckToken"],[3727,25,3182,27],[3727,28,3182,30],[3727,34,3182,36],[3727,38,3182,40],[3727,39,3182,41,"_getAppCheckToken"],[3727,56,3182,58],[3727,57,3182,59],[3727,58,3182,60],[3728,6,3183,8],[3728,10,3183,12,"appCheckToken"],[3728,23,3183,25],[3728,25,3183,27],[3729,8,3184,12,"headers"],[3729,15,3184,19],[3729,16,3184,20],[3729,37,3184,41],[3729,38,3184,42],[3729,76,3184,80],[3729,79,3184,83,"appCheckToken"],[3729,92,3184,96],[3730,6,3185,8],[3731,6,3186,8],[3731,13,3186,15,"headers"],[3731,20,3186,22],[3732,4,3187,4],[3733,4,3188,4],[3733,10,3188,10,"_getAppCheckToken"],[3733,27,3188,27,"_getAppCheckToken"],[3733,28,3188,27],[3733,30,3188,30],[3734,6,3189,8],[3734,10,3189,12],[3734,14,3189,12,"_isFirebaseServerApp"],[3734,26,3189,32],[3734,27,3189,32,"_isFirebaseServerApp"],[3734,47,3189,32],[3734,49,3189,33],[3734,53,3189,37],[3734,54,3189,38,"app"],[3734,57,3189,41],[3734,58,3189,42],[3734,62,3189,46],[3734,66,3189,50],[3734,67,3189,51,"app"],[3734,70,3189,54],[3734,71,3189,55,"settings"],[3734,79,3189,63],[3734,80,3189,64,"appCheckToken"],[3734,93,3189,77],[3734,95,3189,79],[3735,8,3190,12],[3735,15,3190,19],[3735,19,3190,23],[3735,20,3190,24,"app"],[3735,23,3190,27],[3735,24,3190,28,"settings"],[3735,32,3190,36],[3735,33,3190,37,"appCheckToken"],[3735,46,3190,50],[3736,6,3191,8],[3737,6,3192,8],[3737,12,3192,14,"appCheckTokenResult"],[3737,31,3192,33],[3737,34,3192,36],[3737,40,3192,42],[3737,44,3192,46],[3737,45,3192,47,"appCheckServiceProvider"],[3737,68,3192,70],[3737,69,3193,13,"getImmediate"],[3737,81,3193,25],[3737,82,3193,26],[3738,8,3193,28,"optional"],[3738,16,3193,36],[3738,18,3193,38],[3739,6,3193,43],[3739,7,3193,44],[3739,8,3193,45],[3739,10,3194,14,"getToken"],[3739,18,3194,22],[3739,19,3194,23],[3739,20,3194,24],[3740,6,3195,8],[3740,10,3195,12,"appCheckTokenResult"],[3740,29,3195,31],[3740,31,3195,33,"error"],[3740,36,3195,38],[3740,38,3195,40],[3741,8,3196,12],[3742,8,3197,12],[3743,8,3198,12],[3744,8,3199,12],[3745,8,3200,12,"_logWarn"],[3745,16,3200,20],[3745,17,3200,21],[3745,60,3200,64,"appCheckTokenResult"],[3745,79,3200,83],[3745,80,3200,84,"error"],[3745,85,3200,89],[3745,87,3200,91],[3745,88,3200,92],[3746,6,3201,8],[3747,6,3202,8],[3747,13,3202,15,"appCheckTokenResult"],[3747,32,3202,34],[3747,34,3202,36,"token"],[3747,39,3202,41],[3748,4,3203,4],[3749,2,3204,0],[3750,2,3205,0],[3751,0,3206,0],[3752,0,3207,0],[3753,0,3208,0],[3754,0,3209,0],[3755,0,3210,0],[3756,2,3211,0],[3756,11,3211,9,"_castAuth"],[3756,20,3211,18,"_castAuth"],[3756,21,3211,19,"auth"],[3756,25,3211,23],[3756,27,3211,25],[3757,4,3212,4],[3757,11,3212,11],[3757,15,3212,11,"getModularInstance"],[3757,28,3212,29],[3757,29,3212,29,"getModularInstance"],[3757,47,3212,29],[3757,49,3212,30,"auth"],[3757,53,3212,34],[3757,54,3212,35],[3758,2,3213,0],[3759,2,3214,0],[3760,2,3215,0],[3760,8,3215,6,"Subscription"],[3760,20,3215,18],[3760,21,3215,19],[3761,4,3216,4,"constructor"],[3761,15,3216,15,"constructor"],[3761,16,3216,16,"auth"],[3761,20,3216,20],[3761,22,3216,22],[3762,6,3217,8],[3762,10,3217,12],[3762,11,3217,13,"auth"],[3762,15,3217,17],[3762,18,3217,20,"auth"],[3762,22,3217,24],[3763,6,3218,8],[3763,10,3218,12],[3763,11,3218,13,"observer"],[3763,19,3218,21],[3763,22,3218,24],[3763,26,3218,28],[3764,6,3219,8],[3764,10,3219,12],[3764,11,3219,13,"addObserver"],[3764,22,3219,24],[3764,25,3219,27],[3764,29,3219,27,"createSubscribe"],[3764,42,3219,42],[3764,43,3219,42,"createSubscribe"],[3764,58,3219,42],[3764,60,3219,43,"observer"],[3764,68,3219,51],[3764,72,3219,56],[3764,76,3219,60],[3764,77,3219,61,"observer"],[3764,85,3219,69],[3764,88,3219,72,"observer"],[3764,96,3219,81],[3764,97,3219,82],[3765,4,3220,4],[3766,4,3221,4],[3766,8,3221,8,"next"],[3766,12,3221,12,"next"],[3766,13,3221,12],[3766,15,3221,15],[3767,6,3222,8,"_assert"],[3767,13,3222,15],[3767,14,3222,16],[3767,18,3222,20],[3767,19,3222,21,"observer"],[3767,27,3222,29],[3767,29,3222,31],[3767,33,3222,35],[3767,34,3222,36,"auth"],[3767,38,3222,40],[3767,40,3222,42],[3767,56,3222,58],[3767,57,3222,59],[3767,91,3222,93],[3767,92,3222,94],[3768,6,3223,8],[3768,13,3223,15],[3768,17,3223,19],[3768,18,3223,20,"observer"],[3768,26,3223,28],[3768,27,3223,29,"next"],[3768,31,3223,33],[3768,32,3223,34,"bind"],[3768,36,3223,38],[3768,37,3223,39],[3768,41,3223,43],[3768,42,3223,44,"observer"],[3768,50,3223,52],[3768,51,3223,53],[3769,4,3224,4],[3770,2,3225,0],[3772,2,3227,0],[3773,0,3228,0],[3774,0,3229,0],[3775,0,3230,0],[3776,0,3231,0],[3777,0,3232,0],[3778,0,3233,0],[3779,0,3234,0],[3780,0,3235,0],[3781,0,3236,0],[3782,0,3237,0],[3783,0,3238,0],[3784,0,3239,0],[3785,0,3240,0],[3786,0,3241,0],[3787,0,3242,0],[3788,2,3243,0],[3788,6,3243,4,"externalJSProvider"],[3788,24,3243,22],[3788,27,3243,25],[3789,4,3244,4],[3789,10,3244,10,"loadJS"],[3789,16,3244,16,"loadJS"],[3789,17,3244,16],[3789,19,3244,19],[3790,6,3245,8],[3790,12,3245,14],[3790,16,3245,18,"Error"],[3790,21,3245,23],[3790,22,3245,24],[3790,55,3245,57],[3790,56,3245,58],[3791,4,3246,4],[3791,5,3246,5],[3792,4,3247,4,"recaptchaV2Script"],[3792,21,3247,21],[3792,23,3247,23],[3792,25,3247,25],[3793,4,3248,4,"recaptchaEnterpriseScript"],[3793,29,3248,29],[3793,31,3248,31],[3793,33,3248,33],[3794,4,3249,4,"gapiScript"],[3794,14,3249,14],[3794,16,3249,16],[3795,2,3250,0],[3795,3,3250,1],[3796,2,3251,0],[3796,11,3251,9,"_setExternalJSProvider"],[3796,33,3251,31,"_setExternalJSProvider"],[3796,34,3251,32,"p"],[3796,35,3251,33],[3796,37,3251,35],[3797,4,3252,4,"externalJSProvider"],[3797,22,3252,22],[3797,25,3252,25,"p"],[3797,26,3252,26],[3798,2,3253,0],[3799,2,3254,0],[3799,11,3254,9,"_loadJS"],[3799,18,3254,16,"_loadJS"],[3799,19,3254,17,"url"],[3799,22,3254,20],[3799,24,3254,22],[3800,4,3255,4],[3800,11,3255,11,"externalJSProvider"],[3800,29,3255,29],[3800,30,3255,30,"loadJS"],[3800,36,3255,36],[3800,37,3255,37,"url"],[3800,40,3255,40],[3800,41,3255,41],[3801,2,3256,0],[3802,2,3257,0],[3802,11,3257,9,"_recaptchaV2ScriptUrl"],[3802,32,3257,30,"_recaptchaV2ScriptUrl"],[3802,33,3257,30],[3802,35,3257,33],[3803,4,3258,4],[3803,11,3258,11,"externalJSProvider"],[3803,29,3258,29],[3803,30,3258,30,"recaptchaV2Script"],[3803,47,3258,47],[3804,2,3259,0],[3805,2,3260,0],[3805,11,3260,9,"_recaptchaEnterpriseScriptUrl"],[3805,40,3260,38,"_recaptchaEnterpriseScriptUrl"],[3805,41,3260,38],[3805,43,3260,41],[3806,4,3261,4],[3806,11,3261,11,"externalJSProvider"],[3806,29,3261,29],[3806,30,3261,30,"recaptchaEnterpriseScript"],[3806,55,3261,55],[3807,2,3262,0],[3808,2,3263,0],[3808,11,3263,9,"_gapiScriptUrl"],[3808,25,3263,23,"_gapiScriptUrl"],[3808,26,3263,23],[3808,28,3263,26],[3809,4,3264,4],[3809,11,3264,11,"externalJSProvider"],[3809,29,3264,29],[3809,30,3264,30,"gapiScript"],[3809,40,3264,40],[3810,2,3265,0],[3811,2,3266,0],[3811,11,3266,9,"_generateCallbackName"],[3811,32,3266,30,"_generateCallbackName"],[3811,33,3266,31,"prefix"],[3811,39,3266,37],[3811,41,3266,39],[3812,4,3267,4],[3812,11,3267,11],[3812,16,3267,16,"prefix"],[3812,22,3267,22],[3812,25,3267,25,"Math"],[3812,29,3267,29],[3812,30,3267,30,"floor"],[3812,35,3267,35],[3812,36,3267,36,"Math"],[3812,40,3267,40],[3812,41,3267,41,"random"],[3812,47,3267,47],[3812,48,3267,48],[3812,49,3267,49],[3812,52,3267,52],[3812,59,3267,59],[3812,60,3267,60],[3812,62,3267,62],[3813,2,3268,0],[3815,2,3270,0],[3816,0,3271,0],[3817,0,3272,0],[3818,0,3273,0],[3819,0,3274,0],[3820,0,3275,0],[3821,0,3276,0],[3822,0,3277,0],[3823,0,3278,0],[3824,0,3279,0],[3825,0,3280,0],[3826,0,3281,0],[3827,0,3282,0],[3828,0,3283,0],[3829,0,3284,0],[3830,0,3285,0],[3831,2,3286,0],[3831,8,3286,6,"_SOLVE_TIME_MS"],[3831,22,3286,20],[3831,25,3286,23],[3831,28,3286,26],[3832,2,3287,0],[3832,8,3287,6,"_EXPIRATION_TIME_MS"],[3832,27,3287,25],[3832,30,3287,28],[3832,35,3287,33],[3833,2,3288,0],[3833,8,3288,6,"_WIDGET_ID_START"],[3833,24,3288,22],[3833,27,3288,25],[3833,40,3288,38],[3834,2,3289,0],[3834,8,3289,6,"MockReCaptcha"],[3834,21,3289,19],[3834,22,3289,20],[3835,4,3290,4,"constructor"],[3835,15,3290,15,"constructor"],[3835,16,3290,16,"auth"],[3835,20,3290,20],[3835,22,3290,22],[3836,6,3291,8],[3836,10,3291,12],[3836,11,3291,13,"auth"],[3836,15,3291,17],[3836,18,3291,20,"auth"],[3836,22,3291,24],[3837,6,3292,8],[3837,10,3292,12],[3837,11,3292,13,"counter"],[3837,18,3292,20],[3837,21,3292,23,"_WIDGET_ID_START"],[3837,37,3292,39],[3838,6,3293,8],[3838,10,3293,12],[3838,11,3293,13,"_widgets"],[3838,19,3293,21],[3838,22,3293,24],[3838,26,3293,28,"Map"],[3838,29,3293,31],[3838,30,3293,32],[3838,31,3293,33],[3839,4,3294,4],[3840,4,3295,4,"render"],[3840,10,3295,10,"render"],[3840,11,3295,11,"container"],[3840,20,3295,20],[3840,22,3295,22,"parameters"],[3840,32,3295,32],[3840,34,3295,34],[3841,6,3296,8],[3841,12,3296,14,"id"],[3841,14,3296,16],[3841,17,3296,19],[3841,21,3296,23],[3841,22,3296,24,"counter"],[3841,29,3296,31],[3842,6,3297,8],[3842,10,3297,12],[3842,11,3297,13,"_widgets"],[3842,19,3297,21],[3842,20,3297,22,"set"],[3842,23,3297,25],[3842,24,3297,26,"id"],[3842,26,3297,28],[3842,28,3297,30],[3842,32,3297,34,"MockWidget"],[3842,42,3297,44],[3842,43,3297,45,"container"],[3842,52,3297,54],[3842,54,3297,56],[3842,58,3297,60],[3842,59,3297,61,"auth"],[3842,63,3297,65],[3842,64,3297,66,"name"],[3842,68,3297,70],[3842,70,3297,72,"parameters"],[3842,80,3297,82],[3842,84,3297,86],[3842,85,3297,87],[3842,86,3297,88],[3842,87,3297,89],[3842,88,3297,90],[3843,6,3298,8],[3843,10,3298,12],[3843,11,3298,13,"counter"],[3843,18,3298,20],[3843,20,3298,22],[3844,6,3299,8],[3844,13,3299,15,"id"],[3844,15,3299,17],[3845,4,3300,4],[3846,4,3301,4,"reset"],[3846,9,3301,9,"reset"],[3846,10,3301,10,"optWidgetId"],[3846,21,3301,21],[3846,23,3301,23],[3847,6,3302,8],[3847,12,3302,14,"id"],[3847,14,3302,16],[3847,17,3302,19,"optWidgetId"],[3847,28,3302,30],[3847,32,3302,34,"_WIDGET_ID_START"],[3847,48,3302,50],[3848,6,3303,8],[3848,11,3303,13],[3848,15,3303,17],[3848,16,3303,18,"_widgets"],[3848,24,3303,26],[3848,25,3303,27,"get"],[3848,28,3303,30],[3848,29,3303,31,"id"],[3848,31,3303,33],[3848,32,3303,34],[3848,34,3303,36,"delete"],[3848,40,3303,42],[3848,41,3303,43],[3848,42,3303,44],[3849,6,3304,8],[3849,10,3304,12],[3849,11,3304,13,"_widgets"],[3849,19,3304,21],[3849,20,3304,22,"delete"],[3849,26,3304,28],[3849,27,3304,29,"id"],[3849,29,3304,31],[3849,30,3304,32],[3850,4,3305,4],[3851,4,3306,4,"getResponse"],[3851,15,3306,15,"getResponse"],[3851,16,3306,16,"optWidgetId"],[3851,27,3306,27],[3851,29,3306,29],[3852,6,3307,8],[3852,12,3307,14,"id"],[3852,14,3307,16],[3852,17,3307,19,"optWidgetId"],[3852,28,3307,30],[3852,32,3307,34,"_WIDGET_ID_START"],[3852,48,3307,50],[3853,6,3308,8],[3853,13,3308,15],[3853,17,3308,19],[3853,18,3308,20,"_widgets"],[3853,26,3308,28],[3853,27,3308,29,"get"],[3853,30,3308,32],[3853,31,3308,33,"id"],[3853,33,3308,35],[3853,34,3308,36],[3853,36,3308,38,"getResponse"],[3853,47,3308,49],[3853,48,3308,50],[3853,49,3308,51],[3853,53,3308,55],[3853,55,3308,57],[3854,4,3309,4],[3855,4,3310,4],[3855,10,3310,10,"execute"],[3855,17,3310,17,"execute"],[3855,18,3310,18,"optWidgetId"],[3855,29,3310,29],[3855,31,3310,31],[3856,6,3311,8],[3856,12,3311,14,"id"],[3856,14,3311,16],[3856,17,3311,19,"optWidgetId"],[3856,28,3311,30],[3856,32,3311,34,"_WIDGET_ID_START"],[3856,48,3311,50],[3857,6,3312,8],[3857,11,3312,13],[3857,15,3312,17],[3857,16,3312,18,"_widgets"],[3857,24,3312,26],[3857,25,3312,27,"get"],[3857,28,3312,30],[3857,29,3312,31,"id"],[3857,31,3312,33],[3857,32,3312,34],[3857,34,3312,36,"execute"],[3857,41,3312,43],[3857,42,3312,44],[3857,43,3312,45],[3858,6,3313,8],[3858,13,3313,15],[3858,15,3313,17],[3859,4,3314,4],[3860,2,3315,0],[3861,2,3316,0],[3861,8,3316,6,"MockGreCAPTCHATopLevel"],[3861,30,3316,28],[3861,31,3316,29],[3862,4,3317,4,"constructor"],[3862,15,3317,15,"constructor"],[3862,16,3317,15],[3862,18,3317,18],[3863,6,3318,8],[3863,10,3318,12],[3863,11,3318,13,"enterprise"],[3863,21,3318,23],[3863,24,3318,26],[3863,28,3318,30,"MockGreCAPTCHA"],[3863,42,3318,44],[3863,43,3318,45],[3863,44,3318,46],[3864,4,3319,4],[3865,4,3320,4,"ready"],[3865,9,3320,9,"ready"],[3865,10,3320,10,"callback"],[3865,18,3320,18],[3865,20,3320,20],[3866,6,3321,8,"callback"],[3866,14,3321,16],[3866,15,3321,17],[3866,16,3321,18],[3867,4,3322,4],[3868,4,3323,4,"execute"],[3868,11,3323,11,"execute"],[3869,4,3324,4],[3870,4,3325,4,"_siteKey"],[3870,12,3325,12],[3870,14,3325,14,"_options"],[3870,22,3325,22],[3870,24,3325,24],[3871,6,3326,8],[3871,13,3326,15,"Promise"],[3871,20,3326,22],[3871,21,3326,23,"resolve"],[3871,28,3326,30],[3871,29,3326,31],[3871,36,3326,38],[3871,37,3326,39],[3872,4,3327,4],[3873,4,3328,4,"render"],[3873,10,3328,10,"render"],[3874,4,3329,4],[3875,4,3330,4,"_container"],[3875,14,3330,14],[3875,16,3330,16,"_parameters"],[3875,27,3330,27],[3875,29,3330,29],[3876,6,3331,8],[3876,13,3331,15],[3876,15,3331,17],[3877,4,3332,4],[3878,2,3333,0],[3879,2,3334,0],[3879,8,3334,6,"MockGreCAPTCHA"],[3879,22,3334,20],[3879,23,3334,21],[3880,4,3335,4,"ready"],[3880,9,3335,9,"ready"],[3880,10,3335,10,"callback"],[3880,18,3335,18],[3880,20,3335,20],[3881,6,3336,8,"callback"],[3881,14,3336,16],[3881,15,3336,17],[3881,16,3336,18],[3882,4,3337,4],[3883,4,3338,4,"execute"],[3883,11,3338,11,"execute"],[3884,4,3339,4],[3885,4,3340,4,"_siteKey"],[3885,12,3340,12],[3885,14,3340,14,"_options"],[3885,22,3340,22],[3885,24,3340,24],[3886,6,3341,8],[3886,13,3341,15,"Promise"],[3886,20,3341,22],[3886,21,3341,23,"resolve"],[3886,28,3341,30],[3886,29,3341,31],[3886,36,3341,38],[3886,37,3341,39],[3887,4,3342,4],[3888,4,3343,4,"render"],[3888,10,3343,10,"render"],[3889,4,3344,4],[3890,4,3345,4,"_container"],[3890,14,3345,14],[3890,16,3345,16,"_parameters"],[3890,27,3345,27],[3890,29,3345,29],[3891,6,3346,8],[3891,13,3346,15],[3891,15,3346,17],[3892,4,3347,4],[3893,2,3348,0],[3894,2,3349,0],[3894,8,3349,6,"MockWidget"],[3894,18,3349,16],[3894,19,3349,17],[3895,4,3350,4,"constructor"],[3895,15,3350,15,"constructor"],[3895,16,3350,16,"containerOrId"],[3895,29,3350,29],[3895,31,3350,31,"appName"],[3895,38,3350,38],[3895,40,3350,40,"params"],[3895,46,3350,46],[3895,48,3350,48],[3896,6,3351,8],[3896,10,3351,12],[3896,11,3351,13,"params"],[3896,17,3351,19],[3896,20,3351,22,"params"],[3896,26,3351,28],[3897,6,3352,8],[3897,10,3352,12],[3897,11,3352,13,"timerId"],[3897,18,3352,20],[3897,21,3352,23],[3897,25,3352,27],[3898,6,3353,8],[3898,10,3353,12],[3898,11,3353,13,"deleted"],[3898,18,3353,20],[3898,21,3353,23],[3898,26,3353,28],[3899,6,3354,8],[3899,10,3354,12],[3899,11,3354,13,"responseToken"],[3899,24,3354,26],[3899,27,3354,29],[3899,31,3354,33],[3900,6,3355,8],[3900,10,3355,12],[3900,11,3355,13,"clickHandler"],[3900,23,3355,25],[3900,26,3355,28],[3900,32,3355,34],[3901,8,3356,12],[3901,12,3356,16],[3901,13,3356,17,"execute"],[3901,20,3356,24],[3901,21,3356,25],[3901,22,3356,26],[3902,6,3357,8],[3902,7,3357,9],[3903,6,3358,8],[3903,12,3358,14,"container"],[3903,21,3358,23],[3903,24,3358,26],[3903,31,3358,33,"containerOrId"],[3903,44,3358,46],[3903,49,3358,51],[3903,57,3358,59],[3903,60,3359,14,"document"],[3903,68,3359,22],[3903,69,3359,23,"getElementById"],[3903,83,3359,37],[3903,84,3359,38,"containerOrId"],[3903,97,3359,51],[3903,98,3359,52],[3903,101,3360,14,"containerOrId"],[3903,114,3360,27],[3904,6,3361,8,"_assert"],[3904,13,3361,15],[3904,14,3361,16,"container"],[3904,23,3361,25],[3904,25,3361,27],[3904,41,3361,43],[3904,42,3361,44],[3904,78,3361,80],[3905,8,3361,82,"appName"],[3906,6,3361,90],[3906,7,3361,91],[3906,8,3361,92],[3907,6,3362,8],[3907,10,3362,12],[3907,11,3362,13,"container"],[3907,20,3362,22],[3907,23,3362,25,"container"],[3907,32,3362,34],[3908,6,3363,8],[3908,10,3363,12],[3908,11,3363,13,"isVisible"],[3908,20,3363,22],[3908,23,3363,25],[3908,27,3363,29],[3908,28,3363,30,"params"],[3908,34,3363,36],[3908,35,3363,37,"size"],[3908,39,3363,41],[3908,44,3363,46],[3908,55,3363,57],[3909,6,3364,8],[3909,10,3364,12],[3909,14,3364,16],[3909,15,3364,17,"isVisible"],[3909,24,3364,26],[3909,26,3364,28],[3910,8,3365,12],[3910,12,3365,16],[3910,13,3365,17,"execute"],[3910,20,3365,24],[3910,21,3365,25],[3910,22,3365,26],[3911,6,3366,8],[3911,7,3366,9],[3911,13,3367,13],[3912,8,3368,12],[3912,12,3368,16],[3912,13,3368,17,"container"],[3912,22,3368,26],[3912,23,3368,27,"addEventListener"],[3912,39,3368,43],[3912,40,3368,44],[3912,47,3368,51],[3912,49,3368,53],[3912,53,3368,57],[3912,54,3368,58,"clickHandler"],[3912,66,3368,70],[3912,67,3368,71],[3913,6,3369,8],[3914,4,3370,4],[3915,4,3371,4,"getResponse"],[3915,15,3371,15,"getResponse"],[3915,16,3371,15],[3915,18,3371,18],[3916,6,3372,8],[3916,10,3372,12],[3916,11,3372,13,"checkIfDeleted"],[3916,25,3372,27],[3916,26,3372,28],[3916,27,3372,29],[3917,6,3373,8],[3917,13,3373,15],[3917,17,3373,19],[3917,18,3373,20,"responseToken"],[3917,31,3373,33],[3918,4,3374,4],[3919,4,3375,4,"delete"],[3919,10,3375,10,"delete"],[3919,11,3375,10],[3919,13,3375,13],[3920,6,3376,8],[3920,10,3376,12],[3920,11,3376,13,"checkIfDeleted"],[3920,25,3376,27],[3920,26,3376,28],[3920,27,3376,29],[3921,6,3377,8],[3921,10,3377,12],[3921,11,3377,13,"deleted"],[3921,18,3377,20],[3921,21,3377,23],[3921,25,3377,27],[3922,6,3378,8],[3922,10,3378,12],[3922,14,3378,16],[3922,15,3378,17,"timerId"],[3922,22,3378,24],[3922,24,3378,26],[3923,8,3379,12,"clearTimeout"],[3923,20,3379,24],[3923,21,3379,25],[3923,25,3379,29],[3923,26,3379,30,"timerId"],[3923,33,3379,37],[3923,34,3379,38],[3924,8,3380,12],[3924,12,3380,16],[3924,13,3380,17,"timerId"],[3924,20,3380,24],[3924,23,3380,27],[3924,27,3380,31],[3925,6,3381,8],[3926,6,3382,8],[3926,10,3382,12],[3926,11,3382,13,"container"],[3926,20,3382,22],[3926,21,3382,23,"removeEventListener"],[3926,40,3382,42],[3926,41,3382,43],[3926,48,3382,50],[3926,50,3382,52],[3926,54,3382,56],[3926,55,3382,57,"clickHandler"],[3926,67,3382,69],[3926,68,3382,70],[3927,4,3383,4],[3928,4,3384,4,"execute"],[3928,11,3384,11,"execute"],[3928,12,3384,11],[3928,14,3384,14],[3929,6,3385,8],[3929,10,3385,12],[3929,11,3385,13,"checkIfDeleted"],[3929,25,3385,27],[3929,26,3385,28],[3929,27,3385,29],[3930,6,3386,8],[3930,10,3386,12],[3930,14,3386,16],[3930,15,3386,17,"timerId"],[3930,22,3386,24],[3930,24,3386,26],[3931,8,3387,12],[3932,6,3388,8],[3933,6,3389,8],[3933,10,3389,12],[3933,11,3389,13,"timerId"],[3933,18,3389,20],[3933,21,3389,23,"window"],[3933,27,3389,29],[3933,28,3389,30,"setTimeout"],[3933,38,3389,40],[3933,39,3389,41],[3933,45,3389,47],[3934,8,3390,12],[3934,12,3390,16],[3934,13,3390,17,"responseToken"],[3934,26,3390,30],[3934,29,3390,33,"generateRandomAlphaNumericString"],[3934,61,3390,65],[3934,62,3390,66],[3934,64,3390,68],[3934,65,3390,69],[3935,8,3391,12],[3935,14,3391,18],[3936,10,3391,20,"callback"],[3936,18,3391,28],[3937,10,3391,30],[3937,28,3391,48],[3937,30,3391,50,"expiredCallback"],[3938,8,3391,66],[3938,9,3391,67],[3938,12,3391,70],[3938,16,3391,74],[3938,17,3391,75,"params"],[3938,23,3391,81],[3939,8,3392,12],[3939,12,3392,16,"callback"],[3939,20,3392,24],[3939,22,3392,26],[3940,10,3393,16],[3940,14,3393,20],[3941,12,3394,20,"callback"],[3941,20,3394,28],[3941,21,3394,29],[3941,25,3394,33],[3941,26,3394,34,"responseToken"],[3941,39,3394,47],[3941,40,3394,48],[3942,10,3395,16],[3942,11,3395,17],[3942,12,3396,16],[3942,19,3396,23,"e"],[3942,20,3396,24],[3942,22,3396,26],[3942,23,3396,28],[3943,8,3397,12],[3944,8,3398,12],[3944,12,3398,16],[3944,13,3398,17,"timerId"],[3944,20,3398,24],[3944,23,3398,27,"window"],[3944,29,3398,33],[3944,30,3398,34,"setTimeout"],[3944,40,3398,44],[3944,41,3398,45],[3944,47,3398,51],[3945,10,3399,16],[3945,14,3399,20],[3945,15,3399,21,"timerId"],[3945,22,3399,28],[3945,25,3399,31],[3945,29,3399,35],[3946,10,3400,16],[3946,14,3400,20],[3946,15,3400,21,"responseToken"],[3946,28,3400,34],[3946,31,3400,37],[3946,35,3400,41],[3947,10,3401,16],[3947,14,3401,20,"expiredCallback"],[3947,29,3401,35],[3947,31,3401,37],[3948,12,3402,20],[3948,16,3402,24],[3949,14,3403,24,"expiredCallback"],[3949,29,3403,39],[3949,30,3403,40],[3949,31,3403,41],[3950,12,3404,20],[3950,13,3404,21],[3950,14,3405,20],[3950,21,3405,27,"e"],[3950,22,3405,28],[3950,24,3405,30],[3950,25,3405,32],[3951,10,3406,16],[3952,10,3407,16],[3952,14,3407,20],[3952,18,3407,24],[3952,19,3407,25,"isVisible"],[3952,28,3407,34],[3952,30,3407,36],[3953,12,3408,20],[3953,16,3408,24],[3953,17,3408,25,"execute"],[3953,24,3408,32],[3953,25,3408,33],[3953,26,3408,34],[3954,10,3409,16],[3955,8,3410,12],[3955,9,3410,13],[3955,11,3410,15,"_EXPIRATION_TIME_MS"],[3955,30,3410,34],[3955,31,3410,35],[3956,6,3411,8],[3956,7,3411,9],[3956,9,3411,11,"_SOLVE_TIME_MS"],[3956,23,3411,25],[3956,24,3411,26],[3957,4,3412,4],[3958,4,3413,4,"checkIfDeleted"],[3958,18,3413,18,"checkIfDeleted"],[3958,19,3413,18],[3958,21,3413,21],[3959,6,3414,8],[3959,10,3414,12],[3959,14,3414,16],[3959,15,3414,17,"deleted"],[3959,22,3414,24],[3959,24,3414,26],[3960,8,3415,12],[3960,14,3415,18],[3960,18,3415,22,"Error"],[3960,23,3415,27],[3960,24,3415,28],[3960,61,3415,65],[3960,62,3415,66],[3961,6,3416,8],[3962,4,3417,4],[3963,2,3418,0],[3964,2,3419,0],[3964,11,3419,9,"generateRandomAlphaNumericString"],[3964,43,3419,41,"generateRandomAlphaNumericString"],[3964,44,3419,42,"len"],[3964,47,3419,45],[3964,49,3419,47],[3965,4,3420,4],[3965,10,3420,10,"chars"],[3965,15,3420,15],[3965,18,3420,18],[3965,20,3420,20],[3966,4,3421,4],[3966,10,3421,10,"allowedChars"],[3966,22,3421,22],[3966,25,3421,25],[3966,89,3421,89],[3967,4,3422,4],[3967,9,3422,9],[3967,13,3422,13,"i"],[3967,14,3422,14],[3967,17,3422,17],[3967,18,3422,18],[3967,20,3422,20,"i"],[3967,21,3422,21],[3967,24,3422,24,"len"],[3967,27,3422,27],[3967,29,3422,29,"i"],[3967,30,3422,30],[3967,32,3422,32],[3967,34,3422,34],[3968,6,3423,8,"chars"],[3968,11,3423,13],[3968,12,3423,14,"push"],[3968,16,3423,18],[3968,17,3423,19,"allowedChars"],[3968,29,3423,31],[3968,30,3423,32,"charAt"],[3968,36,3423,38],[3968,37,3423,39,"Math"],[3968,41,3423,43],[3968,42,3423,44,"floor"],[3968,47,3423,49],[3968,48,3423,50,"Math"],[3968,52,3423,54],[3968,53,3423,55,"random"],[3968,59,3423,61],[3968,60,3423,62],[3968,61,3423,63],[3968,64,3423,66,"allowedChars"],[3968,76,3423,78],[3968,77,3423,79,"length"],[3968,83,3423,85],[3968,84,3423,86],[3968,85,3423,87],[3968,86,3423,88],[3969,4,3424,4],[3970,4,3425,4],[3970,11,3425,11,"chars"],[3970,16,3425,16],[3970,17,3425,17,"join"],[3970,21,3425,21],[3970,22,3425,22],[3970,24,3425,24],[3970,25,3425,25],[3971,2,3426,0],[3973,2,3428,0],[3974,2,3429,0],[3974,8,3429,6,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3974,42,3429,40],[3974,45,3429,43],[3974,67,3429,65],[3975,2,3430,0],[3975,8,3430,6,"FAKE_TOKEN"],[3975,18,3430,16],[3975,21,3430,19],[3975,35,3430,33],[3976,2,3431,0],[3976,8,3431,6,"RecaptchaEnterpriseVerifier"],[3976,35,3431,33],[3976,36,3431,34],[3977,4,3432,4],[3978,0,3433,0],[3979,0,3434,0],[3980,0,3435,0],[3981,0,3436,0],[3982,4,3437,4,"constructor"],[3982,15,3437,15,"constructor"],[3982,16,3437,16,"authExtern"],[3982,26,3437,26],[3982,28,3437,28],[3983,6,3438,8],[3984,0,3439,0],[3985,0,3440,0],[3986,6,3441,8],[3986,10,3441,12],[3986,11,3441,13,"type"],[3986,15,3441,17],[3986,18,3441,20,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3986,52,3441,54],[3987,6,3442,8],[3987,10,3442,12],[3987,11,3442,13,"auth"],[3987,15,3442,17],[3987,18,3442,20,"_castAuth"],[3987,27,3442,29],[3987,28,3442,30,"authExtern"],[3987,38,3442,40],[3987,39,3442,41],[3988,4,3443,4],[3989,4,3444,4],[3990,0,3445,0],[3991,0,3446,0],[3992,0,3447,0],[3993,0,3448,0],[3994,4,3449,4],[3994,10,3449,10,"verify"],[3994,16,3449,16,"verify"],[3994,17,3449,17,"action"],[3994,23,3449,23],[3994,26,3449,26],[3994,34,3449,34],[3994,36,3449,36,"forceRefresh"],[3994,48,3449,48],[3994,51,3449,51],[3994,56,3449,56],[3994,58,3449,58],[3995,6,3450,8],[3995,21,3450,23,"retrieveSiteKey"],[3995,36,3450,38,"retrieveSiteKey"],[3995,37,3450,39,"auth"],[3995,41,3450,43],[3995,43,3450,45],[3996,8,3451,12],[3996,12,3451,16],[3996,13,3451,17,"forceRefresh"],[3996,25,3451,29],[3996,27,3451,31],[3997,10,3452,16],[3997,14,3452,20,"auth"],[3997,18,3452,24],[3997,19,3452,25,"tenantId"],[3997,27,3452,33],[3997,31,3452,37],[3997,35,3452,41],[3997,39,3452,45,"auth"],[3997,43,3452,49],[3997,44,3452,50,"_agentRecaptchaConfig"],[3997,65,3452,71],[3997,69,3452,75],[3997,73,3452,79],[3997,75,3452,81],[3998,12,3453,20],[3998,19,3453,27,"auth"],[3998,23,3453,31],[3998,24,3453,32,"_agentRecaptchaConfig"],[3998,45,3453,53],[3998,46,3453,54,"siteKey"],[3998,53,3453,61],[3999,10,3454,16],[4000,10,3455,16],[4000,14,3455,20,"auth"],[4000,18,3455,24],[4000,19,3455,25,"tenantId"],[4000,27,3455,33],[4000,31,3455,37],[4000,35,3455,41],[4000,39,3456,20,"auth"],[4000,43,3456,24],[4000,44,3456,25,"_tenantRecaptchaConfigs"],[4000,67,3456,48],[4000,68,3456,49,"auth"],[4000,72,3456,53],[4000,73,3456,54,"tenantId"],[4000,81,3456,62],[4000,82,3456,63],[4000,87,3456,68,"undefined"],[4000,96,3456,77],[4000,98,3456,79],[4001,12,3457,20],[4001,19,3457,27,"auth"],[4001,23,3457,31],[4001,24,3457,32,"_tenantRecaptchaConfigs"],[4001,47,3457,55],[4001,48,3457,56,"auth"],[4001,52,3457,60],[4001,53,3457,61,"tenantId"],[4001,61,3457,69],[4001,62,3457,70],[4001,63,3457,71,"siteKey"],[4001,70,3457,78],[4002,10,3458,16],[4003,8,3459,12],[4004,8,3460,12],[4004,15,3460,19],[4004,19,3460,23,"Promise"],[4004,26,3460,30],[4004,27,3460,31],[4004,34,3460,38,"resolve"],[4004,41,3460,45],[4004,43,3460,47,"reject"],[4004,49,3460,53],[4004,54,3460,58],[4005,10,3461,16,"getRecaptchaConfig"],[4005,28,3461,34],[4005,29,3461,35,"auth"],[4005,33,3461,39],[4005,35,3461,41],[4006,12,3462,20,"clientType"],[4006,22,3462,30],[4006,24,3462,32],[4006,41,3462,49],[4006,42,3462,50],[4007,12,3463,20,"version"],[4007,19,3463,27],[4007,21,3463,29],[4007,43,3463,51],[4007,44,3463,52],[4008,10,3464,16],[4008,11,3464,17],[4008,12,3464,18],[4008,13,3465,21,"then"],[4008,17,3465,25],[4008,18,3465,26,"response"],[4008,26,3465,34],[4008,30,3465,38],[4009,12,3466,20],[4009,16,3466,24,"response"],[4009,24,3466,32],[4009,25,3466,33,"recaptchaKey"],[4009,37,3466,45],[4009,42,3466,50,"undefined"],[4009,51,3466,59],[4009,53,3466,61],[4010,14,3467,24,"reject"],[4010,20,3467,30],[4010,21,3467,31],[4010,25,3467,35,"Error"],[4010,30,3467,40],[4010,31,3467,41],[4010,72,3467,82],[4010,73,3467,83],[4010,74,3467,84],[4011,12,3468,20],[4011,13,3468,21],[4011,19,3469,25],[4012,14,3470,24],[4012,20,3470,30,"config"],[4012,26,3470,36],[4012,29,3470,39],[4012,33,3470,43,"RecaptchaConfig"],[4012,48,3470,58],[4012,49,3470,59,"response"],[4012,57,3470,67],[4012,58,3470,68],[4013,14,3471,24],[4013,18,3471,28,"auth"],[4013,22,3471,32],[4013,23,3471,33,"tenantId"],[4013,31,3471,41],[4013,35,3471,45],[4013,39,3471,49],[4013,41,3471,51],[4014,16,3472,28,"auth"],[4014,20,3472,32],[4014,21,3472,33,"_agentRecaptchaConfig"],[4014,42,3472,54],[4014,45,3472,57,"config"],[4014,51,3472,63],[4015,14,3473,24],[4015,15,3473,25],[4015,21,3474,29],[4016,16,3475,28,"auth"],[4016,20,3475,32],[4016,21,3475,33,"_tenantRecaptchaConfigs"],[4016,44,3475,56],[4016,45,3475,57,"auth"],[4016,49,3475,61],[4016,50,3475,62,"tenantId"],[4016,58,3475,70],[4016,59,3475,71],[4016,62,3475,74,"config"],[4016,68,3475,80],[4017,14,3476,24],[4018,14,3477,24],[4018,21,3477,31,"resolve"],[4018,28,3477,38],[4018,29,3477,39,"config"],[4018,35,3477,45],[4018,36,3477,46,"siteKey"],[4018,43,3477,53],[4018,44,3477,54],[4019,12,3478,20],[4020,10,3479,16],[4020,11,3479,17],[4020,12,3479,18],[4020,13,3480,21,"catch"],[4020,18,3480,26],[4020,19,3480,27,"error"],[4020,24,3480,32],[4020,28,3480,36],[4021,12,3481,20,"reject"],[4021,18,3481,26],[4021,19,3481,27,"error"],[4021,24,3481,32],[4021,25,3481,33],[4022,10,3482,16],[4022,11,3482,17],[4022,12,3482,18],[4023,8,3483,12],[4023,9,3483,13],[4023,10,3483,14],[4024,6,3484,8],[4025,6,3485,8],[4025,15,3485,17,"retrieveRecaptchaToken"],[4025,37,3485,39,"retrieveRecaptchaToken"],[4025,38,3485,40,"siteKey"],[4025,45,3485,47],[4025,47,3485,49,"resolve"],[4025,54,3485,56],[4025,56,3485,58,"reject"],[4025,62,3485,64],[4025,64,3485,66],[4026,8,3486,12],[4026,14,3486,18,"grecaptcha"],[4026,24,3486,28],[4026,27,3486,31,"window"],[4026,33,3486,37],[4026,34,3486,38,"grecaptcha"],[4026,44,3486,48],[4027,8,3487,12],[4027,12,3487,16,"isEnterprise"],[4027,24,3487,28],[4027,25,3487,29,"grecaptcha"],[4027,35,3487,39],[4027,36,3487,40],[4027,38,3487,42],[4028,10,3488,16,"grecaptcha"],[4028,20,3488,26],[4028,21,3488,27,"enterprise"],[4028,31,3488,37],[4028,32,3488,38,"ready"],[4028,37,3488,43],[4028,38,3488,44],[4028,44,3488,50],[4029,12,3489,20,"grecaptcha"],[4029,22,3489,30],[4029,23,3489,31,"enterprise"],[4029,33,3489,41],[4029,34,3490,25,"execute"],[4029,41,3490,32],[4029,42,3490,33,"siteKey"],[4029,49,3490,40],[4029,51,3490,42],[4030,14,3490,44,"action"],[4031,12,3490,51],[4031,13,3490,52],[4031,14,3490,53],[4031,15,3491,25,"then"],[4031,19,3491,29],[4031,20,3491,30,"token"],[4031,25,3491,35],[4031,29,3491,39],[4032,14,3492,24,"resolve"],[4032,21,3492,31],[4032,22,3492,32,"token"],[4032,27,3492,37],[4032,28,3492,38],[4033,12,3493,20],[4033,13,3493,21],[4033,14,3493,22],[4033,15,3494,25,"catch"],[4033,20,3494,30],[4033,21,3494,31],[4033,27,3494,37],[4034,14,3495,24,"resolve"],[4034,21,3495,31],[4034,22,3495,32,"FAKE_TOKEN"],[4034,32,3495,42],[4034,33,3495,43],[4035,12,3496,20],[4035,13,3496,21],[4035,14,3496,22],[4036,10,3497,16],[4036,11,3497,17],[4036,12,3497,18],[4037,8,3498,12],[4037,9,3498,13],[4037,15,3499,17],[4038,10,3500,16,"reject"],[4038,16,3500,22],[4038,17,3500,23,"Error"],[4038,22,3500,28],[4038,23,3500,29],[4038,63,3500,69],[4038,64,3500,70],[4038,65,3500,71],[4039,8,3501,12],[4040,6,3502,8],[4041,6,3503,8],[4042,6,3504,8],[4042,10,3504,12],[4042,14,3504,16],[4042,15,3504,17,"auth"],[4042,19,3504,21],[4042,20,3504,22,"settings"],[4042,28,3504,30],[4042,29,3504,31,"appVerificationDisabledForTesting"],[4042,62,3504,64],[4042,64,3504,66],[4043,8,3505,12],[4043,14,3505,18,"mockRecaptcha"],[4043,27,3505,31],[4043,30,3505,34],[4043,34,3505,38,"MockGreCAPTCHATopLevel"],[4043,56,3505,60],[4043,57,3505,61],[4043,58,3505,62],[4044,8,3506,12],[4044,15,3506,19,"mockRecaptcha"],[4044,28,3506,32],[4044,29,3506,33,"execute"],[4044,36,3506,40],[4044,37,3506,41],[4044,46,3506,50],[4044,48,3506,52],[4045,10,3506,54,"action"],[4045,16,3506,60],[4045,18,3506,62],[4046,8,3506,71],[4046,9,3506,72],[4046,10,3506,73],[4047,6,3507,8],[4048,6,3508,8],[4048,13,3508,15],[4048,17,3508,19,"Promise"],[4048,24,3508,26],[4048,25,3508,27],[4048,26,3508,28,"resolve"],[4048,33,3508,35],[4048,35,3508,37,"reject"],[4048,41,3508,43],[4048,46,3508,48],[4049,8,3509,12,"retrieveSiteKey"],[4049,23,3509,27],[4049,24,3509,28],[4049,28,3509,32],[4049,29,3509,33,"auth"],[4049,33,3509,37],[4049,34,3509,38],[4049,35,3510,17,"then"],[4049,39,3510,21],[4049,40,3510,22,"siteKey"],[4049,47,3510,29],[4049,51,3510,33],[4050,10,3511,16],[4050,14,3511,20],[4050,15,3511,21,"forceRefresh"],[4050,27,3511,33],[4050,31,3511,37,"isEnterprise"],[4050,43,3511,49],[4050,44,3511,50,"window"],[4050,50,3511,56],[4050,51,3511,57,"grecaptcha"],[4050,61,3511,67],[4050,62,3511,68],[4050,64,3511,70],[4051,12,3512,20,"retrieveRecaptchaToken"],[4051,34,3512,42],[4051,35,3512,43,"siteKey"],[4051,42,3512,50],[4051,44,3512,52,"resolve"],[4051,51,3512,59],[4051,53,3512,61,"reject"],[4051,59,3512,67],[4051,60,3512,68],[4052,10,3513,16],[4052,11,3513,17],[4052,17,3514,21],[4053,12,3515,20],[4053,16,3515,24],[4053,23,3515,31,"window"],[4053,29,3515,37],[4053,34,3515,42],[4053,45,3515,53],[4053,47,3515,55],[4054,14,3516,24,"reject"],[4054,20,3516,30],[4054,21,3516,31],[4054,25,3516,35,"Error"],[4054,30,3516,40],[4054,31,3516,41],[4054,79,3516,89],[4054,80,3516,90],[4054,81,3516,91],[4055,14,3517,24],[4056,12,3518,20],[4057,12,3519,20],[4057,16,3519,24,"url"],[4057,19,3519,27],[4057,22,3519,30,"_recaptchaEnterpriseScriptUrl"],[4057,51,3519,59],[4057,52,3519,60],[4057,53,3519,61],[4058,12,3520,20],[4058,16,3520,24,"url"],[4058,19,3520,27],[4058,20,3520,28,"length"],[4058,26,3520,34],[4058,31,3520,39],[4058,32,3520,40],[4058,34,3520,42],[4059,14,3521,24,"url"],[4059,17,3521,27],[4059,21,3521,31,"siteKey"],[4059,28,3521,38],[4060,12,3522,20],[4061,12,3523,20,"_loadJS"],[4061,19,3523,27],[4061,20,3523,28,"url"],[4061,23,3523,31],[4061,24,3523,32],[4061,25,3524,25,"then"],[4061,29,3524,29],[4061,30,3524,30],[4061,36,3524,36],[4062,14,3525,24,"retrieveRecaptchaToken"],[4062,36,3525,46],[4062,37,3525,47,"siteKey"],[4062,44,3525,54],[4062,46,3525,56,"resolve"],[4062,53,3525,63],[4062,55,3525,65,"reject"],[4062,61,3525,71],[4062,62,3525,72],[4063,12,3526,20],[4063,13,3526,21],[4063,14,3526,22],[4063,15,3527,25,"catch"],[4063,20,3527,30],[4063,21,3527,31,"error"],[4063,26,3527,36],[4063,30,3527,40],[4064,14,3528,24,"reject"],[4064,20,3528,30],[4064,21,3528,31,"error"],[4064,26,3528,36],[4064,27,3528,37],[4065,12,3529,20],[4065,13,3529,21],[4065,14,3529,22],[4066,10,3530,16],[4067,8,3531,12],[4067,9,3531,13],[4067,10,3531,14],[4067,11,3532,17,"catch"],[4067,16,3532,22],[4067,17,3532,23,"error"],[4067,22,3532,28],[4067,26,3532,32],[4068,10,3533,16,"reject"],[4068,16,3533,22],[4068,17,3533,23,"error"],[4068,22,3533,28],[4068,23,3533,29],[4069,8,3534,12],[4069,9,3534,13],[4069,10,3534,14],[4070,6,3535,8],[4070,7,3535,9],[4070,8,3535,10],[4071,4,3536,4],[4072,2,3537,0],[4073,2,3538,0],[4073,17,3538,15,"injectRecaptchaFields"],[4073,38,3538,36,"injectRecaptchaFields"],[4073,39,3538,37,"auth"],[4073,43,3538,41],[4073,45,3538,43,"request"],[4073,52,3538,50],[4073,54,3538,52,"action"],[4073,60,3538,58],[4073,62,3538,60,"isCaptchaResp"],[4073,75,3538,73],[4073,78,3538,76],[4073,83,3538,81],[4073,85,3538,83,"isFakeToken"],[4073,96,3538,94],[4073,99,3538,97],[4073,104,3538,102],[4073,106,3538,104],[4074,4,3539,4],[4074,10,3539,10,"verifier"],[4074,18,3539,18],[4074,21,3539,21],[4074,25,3539,25,"RecaptchaEnterpriseVerifier"],[4074,52,3539,52],[4074,53,3539,53,"auth"],[4074,57,3539,57],[4074,58,3539,58],[4075,4,3540,4],[4075,8,3540,8,"captchaResponse"],[4075,23,3540,23],[4076,4,3541,4],[4076,8,3541,8,"isFakeToken"],[4076,19,3541,19],[4076,21,3541,21],[4077,6,3542,8,"captchaResponse"],[4077,21,3542,23],[4077,24,3542,26,"FAKE_TOKEN"],[4077,34,3542,36],[4078,4,3543,4],[4078,5,3543,5],[4078,11,3544,9],[4079,6,3545,8],[4079,10,3545,12],[4080,8,3546,12,"captchaResponse"],[4080,23,3546,27],[4080,26,3546,30],[4080,32,3546,36,"verifier"],[4080,40,3546,44],[4080,41,3546,45,"verify"],[4080,47,3546,51],[4080,48,3546,52,"action"],[4080,54,3546,58],[4080,55,3546,59],[4081,6,3547,8],[4081,7,3547,9],[4081,8,3548,8],[4081,15,3548,15,"error"],[4081,20,3548,20],[4081,22,3548,22],[4082,8,3549,12,"captchaResponse"],[4082,23,3549,27],[4082,26,3549,30],[4082,32,3549,36,"verifier"],[4082,40,3549,44],[4082,41,3549,45,"verify"],[4082,47,3549,51],[4082,48,3549,52,"action"],[4082,54,3549,58],[4082,56,3549,60],[4082,60,3549,64],[4082,61,3549,65],[4083,6,3550,8],[4084,4,3551,4],[4085,4,3552,4],[4085,10,3552,10,"newRequest"],[4085,20,3552,20],[4085,23,3552,20,"Object"],[4085,29,3552,20],[4085,30,3552,20,"assign"],[4085,36,3552,20],[4085,41,3552,28,"request"],[4085,48,3552,35],[4085,49,3552,37],[4086,4,3553,4],[4086,8,3553,8,"action"],[4086,14,3553,14],[4086,19,3553,19],[4086,37,3553,37],[4086,38,3553,38],[4086,86,3554,8,"action"],[4086,92,3554,14],[4086,97,3554,19],[4086,111,3554,33],[4086,112,3554,34],[4086,154,3554,76],[4087,6,3555,8],[4087,10,3555,12],[4087,31,3555,33],[4087,35,3555,37,"newRequest"],[4087,45,3555,47],[4087,47,3555,49],[4088,8,3556,12],[4088,14,3556,18,"phoneNumber"],[4088,25,3556,29],[4088,28,3556,32,"newRequest"],[4088,38,3556,42],[4088,39,3556,43,"phoneEnrollmentInfo"],[4088,58,3556,62],[4088,59,3556,63,"phoneNumber"],[4088,70,3556,74],[4089,8,3557,12],[4089,14,3557,18,"recaptchaToken"],[4089,28,3557,32],[4089,31,3557,35,"newRequest"],[4089,41,3557,45],[4089,42,3557,46,"phoneEnrollmentInfo"],[4089,61,3557,65],[4089,62,3557,66,"recaptchaToken"],[4089,76,3557,80],[4090,8,3558,12,"Object"],[4090,14,3558,18],[4090,15,3558,19,"assign"],[4090,21,3558,25],[4090,22,3558,26,"newRequest"],[4090,32,3558,36],[4090,34,3558,38],[4091,10,3559,16],[4091,31,3559,37],[4091,33,3559,39],[4092,12,3560,20,"phoneNumber"],[4092,23,3560,31],[4093,12,3561,20,"recaptchaToken"],[4093,26,3561,34],[4094,12,3562,20,"captchaResponse"],[4094,27,3562,35],[4095,12,3563,20],[4095,24,3563,32],[4095,26,3563,34],[4095,43,3563,51],[4095,44,3563,52],[4096,12,3564,20],[4096,30,3564,38],[4096,32,3564,40],[4096,54,3564,62],[4096,55,3564,63],[4097,10,3565,16],[4098,8,3566,12],[4098,9,3566,13],[4098,10,3566,14],[4099,6,3567,8],[4099,7,3567,9],[4099,13,3568,13],[4099,17,3568,17],[4099,34,3568,34],[4099,38,3568,38,"newRequest"],[4099,48,3568,48],[4099,50,3568,50],[4100,8,3569,12],[4100,14,3569,18,"recaptchaToken"],[4100,28,3569,32],[4100,31,3569,35,"newRequest"],[4100,41,3569,45],[4100,42,3569,46,"phoneSignInInfo"],[4100,57,3569,61],[4100,58,3569,62,"recaptchaToken"],[4100,72,3569,76],[4101,8,3570,12,"Object"],[4101,14,3570,18],[4101,15,3570,19,"assign"],[4101,21,3570,25],[4101,22,3570,26,"newRequest"],[4101,32,3570,36],[4101,34,3570,38],[4102,10,3571,16],[4102,27,3571,33],[4102,29,3571,35],[4103,12,3572,20,"recaptchaToken"],[4103,26,3572,34],[4104,12,3573,20,"captchaResponse"],[4104,27,3573,35],[4105,12,3574,20],[4105,24,3574,32],[4105,26,3574,34],[4105,43,3574,51],[4105,44,3574,52],[4106,12,3575,20],[4106,30,3575,38],[4106,32,3575,40],[4106,54,3575,62],[4106,55,3575,63],[4107,10,3576,16],[4108,8,3577,12],[4108,9,3577,13],[4108,10,3577,14],[4109,6,3578,8],[4110,6,3579,8],[4110,13,3579,15,"newRequest"],[4110,23,3579,25],[4111,4,3580,4],[4112,4,3581,4],[4112,8,3581,8],[4112,9,3581,9,"isCaptchaResp"],[4112,22,3581,22],[4112,24,3581,24],[4113,6,3582,8,"Object"],[4113,12,3582,14],[4113,13,3582,15,"assign"],[4113,19,3582,21],[4113,20,3582,22,"newRequest"],[4113,30,3582,32],[4113,32,3582,34],[4114,8,3582,36,"captchaResponse"],[4115,6,3582,52],[4115,7,3582,53],[4115,8,3582,54],[4116,4,3583,4],[4116,5,3583,5],[4116,11,3584,9],[4117,6,3585,8,"Object"],[4117,12,3585,14],[4117,13,3585,15,"assign"],[4117,19,3585,21],[4117,20,3585,22,"newRequest"],[4117,30,3585,32],[4117,32,3585,34],[4118,8,3585,36],[4118,21,3585,49],[4118,23,3585,51,"captchaResponse"],[4119,6,3585,67],[4119,7,3585,68],[4119,8,3585,69],[4120,4,3586,4],[4121,4,3587,4,"Object"],[4121,10,3587,10],[4121,11,3587,11,"assign"],[4121,17,3587,17],[4121,18,3587,18,"newRequest"],[4121,28,3587,28],[4121,30,3587,30],[4122,6,3587,32],[4122,18,3587,44],[4122,20,3587,46],[4122,37,3587,63],[4122,38,3587,64],[4123,4,3587,94],[4123,5,3587,95],[4123,6,3587,96],[4124,4,3588,4,"Object"],[4124,10,3588,10],[4124,11,3588,11,"assign"],[4124,17,3588,17],[4124,18,3588,18,"newRequest"],[4124,28,3588,28],[4124,30,3588,30],[4125,6,3589,8],[4125,24,3589,26],[4125,26,3589,28],[4125,48,3589,50],[4125,49,3589,51],[4126,4,3590,4],[4126,5,3590,5],[4126,6,3590,6],[4127,4,3591,4],[4127,11,3591,11,"newRequest"],[4127,21,3591,21],[4128,2,3592,0],[4129,2,3593,0],[4129,17,3593,15,"handleRecaptchaFlow"],[4129,36,3593,34,"handleRecaptchaFlow"],[4129,37,3593,35,"authInstance"],[4129,49,3593,47],[4129,51,3593,49,"request"],[4129,58,3593,56],[4129,60,3593,58,"actionName"],[4129,70,3593,68],[4129,72,3593,70,"actionMethod"],[4129,84,3593,82],[4129,86,3593,84,"recaptchaAuthProvider"],[4129,107,3593,105],[4129,109,3593,107],[4130,4,3594,4],[4130,8,3594,8,"recaptchaAuthProvider"],[4130,29,3594,29],[4130,34,3594,34],[4130,59,3594,59],[4130,60,3594,60],[4130,113,3594,113],[4131,6,3595,8],[4131,10,3595,12,"authInstance"],[4131,22,3595,24],[4131,23,3596,13,"_getRecaptchaConfig"],[4131,42,3596,32],[4131,43,3596,33],[4131,44,3596,34],[4131,46,3597,14,"isProviderEnabled"],[4131,63,3597,31],[4131,64,3597,32],[4131,89,3597,57],[4131,90,3597,58],[4131,141,3597,109],[4131,142,3597,110],[4131,144,3597,112],[4132,8,3598,12],[4132,14,3598,18,"requestWithRecaptcha"],[4132,34,3598,38],[4132,37,3598,41],[4132,43,3598,47,"injectRecaptchaFields"],[4132,64,3598,68],[4132,65,3598,69,"authInstance"],[4132,77,3598,81],[4132,79,3598,83,"request"],[4132,86,3598,90],[4132,88,3598,92,"actionName"],[4132,98,3598,102],[4132,100,3598,104,"actionName"],[4132,110,3598,114],[4132,115,3598,119],[4132,127,3598,131],[4132,128,3598,132],[4132,166,3598,170],[4132,167,3598,171],[4133,8,3599,12],[4133,15,3599,19,"actionMethod"],[4133,27,3599,31],[4133,28,3599,32,"authInstance"],[4133,40,3599,44],[4133,42,3599,46,"requestWithRecaptcha"],[4133,62,3599,66],[4133,63,3599,67],[4134,6,3600,8],[4134,7,3600,9],[4134,13,3601,13],[4135,8,3602,12],[4135,15,3602,19,"actionMethod"],[4135,27,3602,31],[4135,28,3602,32,"authInstance"],[4135,40,3602,44],[4135,42,3602,46,"request"],[4135,49,3602,53],[4135,50,3602,54],[4135,51,3602,55,"catch"],[4135,56,3602,60],[4135,57,3602,61],[4135,63,3602,68,"error"],[4135,68,3602,73],[4135,72,3602,78],[4136,10,3603,16],[4136,14,3603,20,"error"],[4136,19,3603,25],[4136,20,3603,26,"code"],[4136,24,3603,30],[4136,29,3603,35],[4136,37,3603,43],[4136,62,3603,68],[4136,63,3603,69],[4136,108,3603,114],[4136,110,3603,116],[4137,12,3604,20,"console"],[4137,19,3604,27],[4137,20,3604,28,"log"],[4137,23,3604,31],[4137,24,3604,32],[4137,27,3604,35,"actionName"],[4137,37,3604,45],[4137,163,3604,171],[4137,164,3604,172],[4138,12,3605,20],[4138,18,3605,26,"requestWithRecaptcha"],[4138,38,3605,46],[4138,41,3605,49],[4138,47,3605,55,"injectRecaptchaFields"],[4138,68,3605,76],[4138,69,3605,77,"authInstance"],[4138,81,3605,89],[4138,83,3605,91,"request"],[4138,90,3605,98],[4138,92,3605,100,"actionName"],[4138,102,3605,110],[4138,104,3605,112,"actionName"],[4138,114,3605,122],[4138,119,3605,127],[4138,131,3605,139],[4138,132,3605,140],[4138,170,3605,178],[4138,171,3605,179],[4139,12,3606,20],[4139,19,3606,27,"actionMethod"],[4139,31,3606,39],[4139,32,3606,40,"authInstance"],[4139,44,3606,52],[4139,46,3606,54,"requestWithRecaptcha"],[4139,66,3606,74],[4139,67,3606,75],[4140,10,3607,16],[4140,11,3607,17],[4140,17,3608,21],[4141,12,3609,20],[4141,19,3609,27,"Promise"],[4141,26,3609,34],[4141,27,3609,35,"reject"],[4141,33,3609,41],[4141,34,3609,42,"error"],[4141,39,3609,47],[4141,40,3609,48],[4142,10,3610,16],[4143,8,3611,12],[4143,9,3611,13],[4143,10,3611,14],[4144,6,3612,8],[4145,4,3613,4],[4145,5,3613,5],[4145,11,3614,9],[4145,15,3614,13,"recaptchaAuthProvider"],[4145,36,3614,34],[4145,41,3614,39],[4145,57,3614,55],[4145,58,3614,56],[4145,102,3614,100],[4146,6,3615,8],[4146,10,3615,12,"authInstance"],[4146,22,3615,24],[4146,23,3616,13,"_getRecaptchaConfig"],[4146,42,3616,32],[4146,43,3616,33],[4146,44,3616,34],[4146,46,3617,14,"isProviderEnabled"],[4146,63,3617,31],[4146,64,3617,32],[4146,80,3617,48],[4146,81,3617,49],[4146,123,3617,91],[4146,124,3617,92],[4146,126,3617,94],[4147,8,3618,12],[4147,14,3618,18,"requestWithRecaptcha"],[4147,34,3618,38],[4147,37,3618,41],[4147,43,3618,47,"injectRecaptchaFields"],[4147,64,3618,68],[4147,65,3618,69,"authInstance"],[4147,77,3618,81],[4147,79,3618,83,"request"],[4147,86,3618,90],[4147,88,3618,92,"actionName"],[4147,98,3618,102],[4147,99,3618,103],[4148,8,3619,12],[4148,15,3619,19,"actionMethod"],[4148,27,3619,31],[4148,28,3619,32,"authInstance"],[4148,40,3619,44],[4148,42,3619,46,"requestWithRecaptcha"],[4148,62,3619,66],[4148,63,3619,67],[4148,64,3619,68,"catch"],[4148,69,3619,73],[4148,70,3619,74],[4148,76,3619,81,"error"],[4148,81,3619,86],[4148,85,3619,91],[4149,10,3620,16],[4149,14,3620,20,"authInstance"],[4149,26,3620,32],[4149,27,3621,21,"_getRecaptchaConfig"],[4149,46,3621,40],[4149,47,3621,41],[4149,48,3621,42],[4149,50,3622,22,"getProviderEnforcementState"],[4149,77,3622,49],[4149,78,3622,50],[4149,94,3622,66],[4149,95,3622,67],[4149,137,3622,109],[4149,138,3622,110],[4149,143,3622,115],[4149,150,3622,122],[4149,151,3622,123],[4149,181,3622,153],[4150,12,3623,20],[4151,12,3624,20],[4151,16,3624,24,"error"],[4151,21,3624,29],[4151,22,3624,30,"code"],[4151,26,3624,34],[4151,31,3624,39],[4151,39,3624,47],[4151,64,3624,72],[4151,65,3624,73],[4151,110,3624,118],[4151,114,3625,24,"error"],[4151,119,3625,29],[4151,120,3625,30,"code"],[4151,124,3625,34],[4151,129,3625,39],[4151,137,3625,47],[4151,161,3625,71],[4151,162,3625,72],[4151,206,3625,116],[4151,208,3625,118],[4152,14,3626,24,"console"],[4152,21,3626,31],[4152,22,3626,32,"log"],[4152,25,3626,35],[4152,26,3626,36],[4152,136,3626,146,"actionName"],[4152,146,3626,156],[4152,154,3626,164],[4152,155,3626,165],[4153,14,3627,24],[4154,14,3628,24],[4155,14,3629,24],[4156,14,3630,24],[4156,20,3630,30,"requestWithRecaptchaFields"],[4156,46,3630,56],[4156,49,3630,59],[4156,55,3630,65,"injectRecaptchaFields"],[4156,76,3630,86],[4156,77,3630,87,"authInstance"],[4156,89,3630,99],[4156,91,3630,101,"request"],[4156,98,3630,108],[4156,100,3630,110,"actionName"],[4156,110,3630,120],[4156,112,3630,122],[4156,117,3630,127],[4157,14,3630,129],[4158,14,3631,24],[4158,18,3631,28],[4158,19,3631,29],[4159,14,3632,24],[4159,15,3632,25],[4160,14,3633,24],[4161,14,3634,24],[4161,21,3634,31,"actionMethod"],[4161,33,3634,43],[4161,34,3634,44,"authInstance"],[4161,46,3634,56],[4161,48,3634,58,"requestWithRecaptchaFields"],[4161,74,3634,84],[4161,75,3634,85],[4162,12,3635,20],[4163,10,3636,16],[4164,10,3637,16],[4165,10,3638,16],[4165,17,3638,23,"Promise"],[4165,24,3638,30],[4165,25,3638,31,"reject"],[4165,31,3638,37],[4165,32,3638,38,"error"],[4165,37,3638,43],[4165,38,3638,44],[4166,8,3639,12],[4166,9,3639,13],[4166,10,3639,14],[4167,6,3640,8],[4167,7,3640,9],[4167,13,3641,13],[4168,8,3642,12],[4169,8,3643,12],[4169,14,3643,18,"requestWithRecaptchaFields"],[4169,40,3643,44],[4169,43,3643,47],[4169,49,3643,53,"injectRecaptchaFields"],[4169,70,3643,74],[4169,71,3643,75,"authInstance"],[4169,83,3643,87],[4169,85,3643,89,"request"],[4169,92,3643,96],[4169,94,3643,98,"actionName"],[4169,104,3643,108],[4169,106,3643,110],[4169,111,3643,115],[4170,8,3643,117],[4171,8,3644,12],[4171,12,3644,16],[4171,13,3644,17],[4172,8,3645,12],[4172,9,3645,13],[4173,8,3646,12],[4174,8,3647,12],[4174,15,3647,19,"actionMethod"],[4174,27,3647,31],[4174,28,3647,32,"authInstance"],[4174,40,3647,44],[4174,42,3647,46,"requestWithRecaptchaFields"],[4174,68,3647,72],[4174,69,3647,73],[4175,6,3648,8],[4176,4,3649,4],[4176,5,3649,5],[4176,11,3650,9],[4177,6,3651,8],[4177,13,3651,15,"Promise"],[4177,20,3651,22],[4177,21,3651,23,"reject"],[4177,27,3651,29],[4177,28,3651,30,"recaptchaAuthProvider"],[4177,49,3651,51],[4177,52,3651,54],[4177,81,3651,83],[4177,82,3651,84],[4178,4,3652,4],[4179,2,3653,0],[4180,2,3654,0],[4180,17,3654,15,"_initializeRecaptchaConfig"],[4180,43,3654,41,"_initializeRecaptchaConfig"],[4180,44,3654,42,"auth"],[4180,48,3654,46],[4180,50,3654,48],[4181,4,3655,4],[4181,10,3655,10,"authInternal"],[4181,22,3655,22],[4181,25,3655,25,"_castAuth"],[4181,34,3655,34],[4181,35,3655,35,"auth"],[4181,39,3655,39],[4181,40,3655,40],[4182,4,3656,4],[4182,10,3656,10,"response"],[4182,18,3656,18],[4182,21,3656,21],[4182,27,3656,27,"getRecaptchaConfig"],[4182,45,3656,45],[4182,46,3656,46,"authInternal"],[4182,58,3656,58],[4182,60,3656,60],[4183,6,3657,8,"clientType"],[4183,16,3657,18],[4183,18,3657,20],[4183,35,3657,37],[4183,36,3657,38],[4184,6,3658,8,"version"],[4184,13,3658,15],[4184,15,3658,17],[4184,37,3658,39],[4184,38,3658,40],[4185,4,3659,4],[4185,5,3659,5],[4185,6,3659,6],[4186,4,3660,4],[4186,10,3660,10,"config"],[4186,16,3660,16],[4186,19,3660,19],[4186,23,3660,23,"RecaptchaConfig"],[4186,38,3660,38],[4186,39,3660,39,"response"],[4186,47,3660,47],[4186,48,3660,48],[4187,4,3661,4],[4187,8,3661,8,"authInternal"],[4187,20,3661,20],[4187,21,3661,21,"tenantId"],[4187,29,3661,29],[4187,33,3661,33],[4187,37,3661,37],[4187,39,3661,39],[4188,6,3662,8,"authInternal"],[4188,18,3662,20],[4188,19,3662,21,"_agentRecaptchaConfig"],[4188,40,3662,42],[4188,43,3662,45,"config"],[4188,49,3662,51],[4189,4,3663,4],[4189,5,3663,5],[4189,11,3664,9],[4190,6,3665,8,"authInternal"],[4190,18,3665,20],[4190,19,3665,21,"_tenantRecaptchaConfigs"],[4190,42,3665,44],[4190,43,3665,45,"authInternal"],[4190,55,3665,57],[4190,56,3665,58,"tenantId"],[4190,64,3665,66],[4190,65,3665,67],[4190,68,3665,70,"config"],[4190,74,3665,76],[4191,4,3666,4],[4192,4,3667,4],[4192,8,3667,8,"config"],[4192,14,3667,14],[4192,15,3667,15,"isAnyProviderEnabled"],[4192,35,3667,35],[4192,36,3667,36],[4192,37,3667,37],[4192,39,3667,39],[4193,6,3668,8],[4193,12,3668,14,"verifier"],[4193,20,3668,22],[4193,23,3668,25],[4193,27,3668,29,"RecaptchaEnterpriseVerifier"],[4193,54,3668,56],[4193,55,3668,57,"authInternal"],[4193,67,3668,69],[4193,68,3668,70],[4194,6,3669,8],[4194,11,3669,13,"verifier"],[4194,19,3669,21],[4194,20,3669,22,"verify"],[4194,26,3669,28],[4194,27,3669,29],[4194,28,3669,30],[4195,4,3670,4],[4196,2,3671,0],[4198,2,3673,0],[4199,0,3674,0],[4200,0,3675,0],[4201,0,3676,0],[4202,0,3677,0],[4203,0,3678,0],[4204,0,3679,0],[4205,0,3680,0],[4206,0,3681,0],[4207,0,3682,0],[4208,0,3683,0],[4209,0,3684,0],[4210,0,3685,0],[4211,0,3686,0],[4212,0,3687,0],[4213,0,3688,0],[4214,2,3689,0],[4215,0,3690,0],[4216,0,3691,0],[4217,0,3692,0],[4218,0,3693,0],[4219,0,3694,0],[4220,0,3695,0],[4221,0,3696,0],[4222,0,3697,0],[4223,0,3698,0],[4224,0,3699,0],[4225,0,3700,0],[4226,0,3701,0],[4227,0,3702,0],[4228,0,3703,0],[4229,0,3704,0],[4230,0,3705,0],[4231,0,3706,0],[4232,0,3707,0],[4233,0,3708,0],[4234,0,3709,0],[4235,0,3710,0],[4236,0,3711,0],[4237,0,3712,0],[4238,0,3713,0],[4239,2,3714,0],[4239,11,3714,9,"initializeAuth"],[4239,25,3714,23,"initializeAuth"],[4239,26,3714,24,"app"],[4239,29,3714,27],[4239,31,3714,29,"deps"],[4239,35,3714,33],[4239,37,3714,35],[4240,4,3715,4],[4240,10,3715,10,"provider"],[4240,18,3715,18],[4240,21,3715,21],[4240,25,3715,21,"_getProvider"],[4240,37,3715,33],[4240,38,3715,33,"_getProvider"],[4240,50,3715,33],[4240,52,3715,34,"app"],[4240,55,3715,37],[4240,57,3715,39],[4240,63,3715,45],[4240,64,3715,46],[4241,4,3716,4],[4241,8,3716,8,"provider"],[4241,16,3716,16],[4241,17,3716,17,"isInitialized"],[4241,30,3716,30],[4241,31,3716,31],[4241,32,3716,32],[4241,34,3716,34],[4242,6,3717,8],[4242,12,3717,14,"auth"],[4242,16,3717,18],[4242,19,3717,21,"provider"],[4242,27,3717,29],[4242,28,3717,30,"getImmediate"],[4242,40,3717,42],[4242,41,3717,43],[4242,42,3717,44],[4243,6,3718,8],[4243,12,3718,14,"initialOptions"],[4243,26,3718,28],[4243,29,3718,31,"provider"],[4243,37,3718,39],[4243,38,3718,40,"getOptions"],[4243,48,3718,50],[4243,49,3718,51],[4243,50,3718,52],[4244,6,3719,8],[4244,10,3719,12],[4244,14,3719,12,"deepEqual"],[4244,27,3719,21],[4244,28,3719,21,"deepEqual"],[4244,37,3719,21],[4244,39,3719,22,"initialOptions"],[4244,53,3719,36],[4244,55,3719,38,"deps"],[4244,59,3719,42],[4244,63,3719,46],[4244,64,3719,47],[4244,65,3719,48],[4244,66,3719,49],[4244,68,3719,51],[4245,8,3720,12],[4245,15,3720,19,"auth"],[4245,19,3720,23],[4246,6,3721,8],[4246,7,3721,9],[4246,13,3722,13],[4247,8,3723,12,"_fail"],[4247,13,3723,17],[4247,14,3723,18,"auth"],[4247,18,3723,22],[4247,20,3723,24],[4247,41,3723,45],[4247,42,3723,46],[4247,81,3723,85],[4247,82,3723,86],[4248,6,3724,8],[4249,4,3725,4],[4250,4,3726,4],[4250,10,3726,10,"auth"],[4250,14,3726,14],[4250,17,3726,17,"provider"],[4250,25,3726,25],[4250,26,3726,26,"initialize"],[4250,36,3726,36],[4250,37,3726,37],[4251,6,3726,39,"options"],[4251,13,3726,46],[4251,15,3726,48,"deps"],[4252,4,3726,53],[4252,5,3726,54],[4252,6,3726,55],[4253,4,3727,4],[4253,11,3727,11,"auth"],[4253,15,3727,15],[4254,2,3728,0],[4255,2,3729,0],[4255,11,3729,9,"_initializeAuthInstance"],[4255,34,3729,32,"_initializeAuthInstance"],[4255,35,3729,33,"auth"],[4255,39,3729,37],[4255,41,3729,39,"deps"],[4255,45,3729,43],[4255,47,3729,45],[4256,4,3730,4],[4256,10,3730,10,"persistence"],[4256,21,3730,21],[4256,24,3730,24,"deps"],[4256,28,3730,28],[4256,30,3730,30,"persistence"],[4256,41,3730,41],[4256,45,3730,45],[4256,47,3730,47],[4257,4,3731,4],[4257,10,3731,10,"hierarchy"],[4257,19,3731,19],[4257,22,3731,22],[4257,23,3731,23,"Array"],[4257,28,3731,28],[4257,29,3731,29,"isArray"],[4257,36,3731,36],[4257,37,3731,37,"persistence"],[4257,48,3731,48],[4257,49,3731,49],[4257,52,3731,52,"persistence"],[4257,63,3731,63],[4257,66,3731,66],[4257,67,3731,67,"persistence"],[4257,78,3731,78],[4257,79,3731,79],[4257,81,3731,81,"map"],[4257,84,3731,84],[4257,85,3731,85,"_getInstance"],[4257,97,3731,97],[4257,98,3731,98],[4258,4,3732,4],[4258,8,3732,8,"deps"],[4258,12,3732,12],[4258,14,3732,14,"errorMap"],[4258,22,3732,22],[4258,24,3732,24],[4259,6,3733,8,"auth"],[4259,10,3733,12],[4259,11,3733,13,"_updateErrorMap"],[4259,26,3733,28],[4259,27,3733,29,"deps"],[4259,31,3733,33],[4259,32,3733,34,"errorMap"],[4259,40,3733,42],[4259,41,3733,43],[4260,4,3734,4],[4261,4,3735,4],[4262,4,3736,4],[4263,4,3737,4],[4264,4,3738,4,"auth"],[4264,8,3738,8],[4264,9,3738,9,"_initializeWithPersistence"],[4264,35,3738,35],[4264,36,3738,36,"hierarchy"],[4264,45,3738,45],[4264,47,3738,47,"deps"],[4264,51,3738,51],[4264,53,3738,53,"popupRedirectResolver"],[4264,74,3738,74],[4264,75,3738,75],[4265,2,3739,0],[4267,2,3741,0],[4268,0,3742,0],[4269,0,3743,0],[4270,0,3744,0],[4271,0,3745,0],[4272,0,3746,0],[4273,0,3747,0],[4274,0,3748,0],[4275,0,3749,0],[4276,0,3750,0],[4277,0,3751,0],[4278,0,3752,0],[4279,0,3753,0],[4280,0,3754,0],[4281,0,3755,0],[4282,0,3756,0],[4283,0,3757,0],[4284,0,3758,0],[4285,0,3759,0],[4286,0,3760,0],[4287,0,3761,0],[4288,0,3762,0],[4289,2,3763,0],[4289,11,3763,9,"connectAuthEmulator"],[4289,30,3763,28,"connectAuthEmulator"],[4289,31,3763,29,"auth"],[4289,35,3763,33],[4289,37,3763,35,"url"],[4289,40,3763,38],[4289,42,3763,40,"options"],[4289,49,3763,47],[4289,51,3763,49],[4290,4,3764,4],[4290,10,3764,10,"authInternal"],[4290,22,3764,22],[4290,25,3764,25,"_castAuth"],[4290,34,3764,34],[4290,35,3764,35,"auth"],[4290,39,3764,39],[4290,40,3764,40],[4291,4,3765,4,"_assert"],[4291,11,3765,11],[4291,12,3765,12],[4291,26,3765,26],[4291,27,3765,27,"test"],[4291,31,3765,31],[4291,32,3765,32,"url"],[4291,35,3765,35],[4291,36,3765,36],[4291,38,3765,38,"authInternal"],[4291,50,3765,50],[4291,52,3765,52],[4291,77,3765,77],[4291,78,3765,78],[4291,121,3765,121],[4291,122,3765,122],[4292,4,3766,4],[4292,10,3766,10,"disableWarnings"],[4292,25,3766,25],[4292,28,3766,28],[4292,29,3766,29],[4292,30,3766,30,"options"],[4292,37,3766,37],[4292,39,3766,39,"disableWarnings"],[4292,54,3766,54],[4293,4,3767,4],[4293,10,3767,10,"protocol"],[4293,18,3767,18],[4293,21,3767,21,"extractProtocol"],[4293,36,3767,36],[4293,37,3767,37,"url"],[4293,40,3767,40],[4293,41,3767,41],[4294,4,3768,4],[4294,10,3768,10],[4295,6,3768,12,"host"],[4295,10,3768,16],[4296,6,3768,18,"port"],[4297,4,3768,23],[4297,5,3768,24],[4297,8,3768,27,"extractHostAndPort"],[4297,26,3768,45],[4297,27,3768,46,"url"],[4297,30,3768,49],[4297,31,3768,50],[4298,4,3769,4],[4298,10,3769,10,"portStr"],[4298,17,3769,17],[4298,20,3769,20,"port"],[4298,24,3769,24],[4298,29,3769,29],[4298,33,3769,33],[4298,36,3769,36],[4298,38,3769,38],[4298,41,3769,41],[4298,45,3769,45,"port"],[4298,49,3769,49],[4298,51,3769,51],[4299,4,3770,4],[4300,4,3771,4],[4300,10,3771,10,"emulator"],[4300,18,3771,18],[4300,21,3771,21],[4301,6,3771,23,"url"],[4301,9,3771,26],[4301,11,3771,28],[4301,14,3771,31,"protocol"],[4301,22,3771,39],[4301,27,3771,44,"host"],[4301,31,3771,48],[4301,34,3771,51,"portStr"],[4301,41,3771,58],[4302,4,3771,62],[4302,5,3771,63],[4303,4,3772,4],[4303,10,3772,10,"emulatorConfig"],[4303,24,3772,24],[4303,27,3772,27,"Object"],[4303,33,3772,33],[4303,34,3772,34,"freeze"],[4303,40,3772,40],[4303,41,3772,41],[4304,6,3773,8,"host"],[4304,10,3773,12],[4305,6,3774,8,"port"],[4305,10,3774,12],[4306,6,3775,8,"protocol"],[4306,14,3775,16],[4306,16,3775,18,"protocol"],[4306,24,3775,26],[4306,25,3775,27,"replace"],[4306,32,3775,34],[4306,33,3775,35],[4306,36,3775,38],[4306,38,3775,40],[4306,40,3775,42],[4306,41,3775,43],[4307,6,3776,8,"options"],[4307,13,3776,15],[4307,15,3776,17,"Object"],[4307,21,3776,23],[4307,22,3776,24,"freeze"],[4307,28,3776,30],[4307,29,3776,31],[4308,8,3776,33,"disableWarnings"],[4309,6,3776,49],[4309,7,3776,50],[4310,4,3777,4],[4310,5,3777,5],[4310,6,3777,6],[4311,4,3778,4],[4312,4,3779,4],[4312,8,3779,8],[4312,9,3779,9,"authInternal"],[4312,21,3779,21],[4312,22,3779,22,"_canInitEmulator"],[4312,38,3779,38],[4312,40,3779,40],[4313,6,3780,8],[4314,6,3781,8],[4315,6,3782,8,"_assert"],[4315,13,3782,15],[4315,14,3782,16,"authInternal"],[4315,26,3782,28],[4315,27,3782,29,"config"],[4315,33,3782,35],[4315,34,3782,36,"emulator"],[4315,42,3782,44],[4315,46,3782,48,"authInternal"],[4315,58,3782,60],[4315,59,3782,61,"emulatorConfig"],[4315,73,3782,75],[4315,75,3782,77,"authInternal"],[4315,87,3782,89],[4315,89,3782,91],[4315,113,3782,115],[4315,114,3782,116],[4315,156,3782,158],[4315,157,3782,159],[4316,6,3783,8],[4317,6,3784,8],[4318,6,3785,8,"_assert"],[4318,13,3785,15],[4318,14,3785,16],[4318,18,3785,16,"deepEqual"],[4318,31,3785,25],[4318,32,3785,25,"deepEqual"],[4318,41,3785,25],[4318,43,3785,26,"emulator"],[4318,51,3785,34],[4318,53,3785,36,"authInternal"],[4318,65,3785,48],[4318,66,3785,49,"config"],[4318,72,3785,55],[4318,73,3785,56,"emulator"],[4318,81,3785,64],[4318,82,3785,65],[4318,86,3786,12],[4318,90,3786,12,"deepEqual"],[4318,103,3786,21],[4318,104,3786,21,"deepEqual"],[4318,113,3786,21],[4318,115,3786,22,"emulatorConfig"],[4318,129,3786,36],[4318,131,3786,38,"authInternal"],[4318,143,3786,50],[4318,144,3786,51,"emulatorConfig"],[4318,158,3786,65],[4318,159,3786,66],[4318,161,3786,68,"authInternal"],[4318,173,3786,80],[4318,175,3786,82],[4318,199,3786,106],[4318,200,3786,107],[4318,242,3786,149],[4318,243,3786,150],[4319,6,3787,8],[4320,6,3788,8],[4321,6,3789,8],[4322,4,3790,4],[4323,4,3791,4,"authInternal"],[4323,16,3791,16],[4323,17,3791,17,"config"],[4323,23,3791,23],[4323,24,3791,24,"emulator"],[4323,32,3791,32],[4323,35,3791,35,"emulator"],[4323,43,3791,43],[4324,4,3792,4,"authInternal"],[4324,16,3792,16],[4324,17,3792,17,"emulatorConfig"],[4324,31,3792,31],[4324,34,3792,34,"emulatorConfig"],[4324,48,3792,48],[4325,4,3793,4,"authInternal"],[4325,16,3793,16],[4325,17,3793,17,"settings"],[4325,25,3793,25],[4325,26,3793,26,"appVerificationDisabledForTesting"],[4325,59,3793,59],[4325,62,3793,62],[4325,66,3793,66],[4326,4,3794,4],[4327,4,3795,4],[4327,8,3795,8],[4327,12,3795,8,"isCloudWorkstation"],[4327,25,3795,26],[4327,26,3795,26,"isCloudWorkstation"],[4327,44,3795,26],[4327,46,3795,27,"host"],[4327,50,3795,31],[4327,51,3795,32],[4327,53,3795,34],[4328,6,3796,8],[4328,11,3796,13],[4328,15,3796,13,"pingServer"],[4328,28,3796,23],[4328,29,3796,23,"pingServer"],[4328,39,3796,23],[4328,41,3796,24],[4328,44,3796,27,"protocol"],[4328,52,3796,35],[4328,57,3796,40,"host"],[4328,61,3796,44],[4328,64,3796,47,"portStr"],[4328,71,3796,54],[4328,73,3796,56],[4328,74,3796,57],[4329,6,3797,8],[4329,10,3797,8,"updateEmulatorBanner"],[4329,23,3797,28],[4329,24,3797,28,"updateEmulatorBanner"],[4329,44,3797,28],[4329,46,3797,29],[4329,52,3797,35],[4329,54,3797,37],[4329,58,3797,41],[4329,59,3797,42],[4330,4,3798,4],[4330,5,3798,5],[4330,11,3799,9],[4330,15,3799,13],[4330,16,3799,14,"disableWarnings"],[4330,31,3799,29],[4330,33,3799,31],[4331,6,3800,8,"emitEmulatorWarning"],[4331,25,3800,27],[4331,26,3800,28],[4331,27,3800,29],[4332,4,3801,4],[4333,2,3802,0],[4334,2,3803,0],[4334,11,3803,9,"extractProtocol"],[4334,26,3803,24,"extractProtocol"],[4334,27,3803,25,"url"],[4334,30,3803,28],[4334,32,3803,30],[4335,4,3804,4],[4335,10,3804,10,"protocolEnd"],[4335,21,3804,21],[4335,24,3804,24,"url"],[4335,27,3804,27],[4335,28,3804,28,"indexOf"],[4335,35,3804,35],[4335,36,3804,36],[4335,39,3804,39],[4335,40,3804,40],[4336,4,3805,4],[4336,11,3805,11,"protocolEnd"],[4336,22,3805,22],[4336,25,3805,25],[4336,26,3805,26],[4336,29,3805,29],[4336,31,3805,31],[4336,34,3805,34,"url"],[4336,37,3805,37],[4336,38,3805,38,"substr"],[4336,44,3805,44],[4336,45,3805,45],[4336,46,3805,46],[4336,48,3805,48,"protocolEnd"],[4336,59,3805,59],[4336,62,3805,62],[4336,63,3805,63],[4336,64,3805,64],[4337,2,3806,0],[4338,2,3807,0],[4338,11,3807,9,"extractHostAndPort"],[4338,29,3807,27,"extractHostAndPort"],[4338,30,3807,28,"url"],[4338,33,3807,31],[4338,35,3807,33],[4339,4,3808,4],[4339,10,3808,10,"protocol"],[4339,18,3808,18],[4339,21,3808,21,"extractProtocol"],[4339,36,3808,36],[4339,37,3808,37,"url"],[4339,40,3808,40],[4339,41,3808,41],[4340,4,3809,4],[4340,10,3809,10,"authority"],[4340,19,3809,19],[4340,22,3809,22],[4340,40,3809,40],[4340,41,3809,41,"exec"],[4340,45,3809,45],[4340,46,3809,46,"url"],[4340,49,3809,49],[4340,50,3809,50,"substr"],[4340,56,3809,56],[4340,57,3809,57,"protocol"],[4340,65,3809,65],[4340,66,3809,66,"length"],[4340,72,3809,72],[4340,73,3809,73],[4340,74,3809,74],[4340,75,3809,75],[4340,76,3809,76],[4341,4,3810,4],[4341,8,3810,8],[4341,9,3810,9,"authority"],[4341,18,3810,18],[4341,20,3810,20],[4342,6,3811,8],[4342,13,3811,15],[4343,8,3811,17,"host"],[4343,12,3811,21],[4343,14,3811,23],[4343,16,3811,25],[4344,8,3811,27,"port"],[4344,12,3811,31],[4344,14,3811,33],[4345,6,3811,38],[4345,7,3811,39],[4346,4,3812,4],[4347,4,3813,4],[4347,10,3813,10,"hostAndPort"],[4347,21,3813,21],[4347,24,3813,24,"authority"],[4347,33,3813,33],[4347,34,3813,34],[4347,35,3813,35],[4347,36,3813,36],[4347,37,3813,37,"split"],[4347,42,3813,42],[4347,43,3813,43],[4347,46,3813,46],[4347,47,3813,47],[4347,48,3813,48,"pop"],[4347,51,3813,51],[4347,52,3813,52],[4347,53,3813,53],[4347,57,3813,57],[4347,59,3813,59],[4347,60,3813,60],[4347,61,3813,61],[4348,4,3814,4],[4348,10,3814,10,"bracketedIPv6"],[4348,23,3814,23],[4348,26,3814,26],[4348,46,3814,46],[4348,47,3814,47,"exec"],[4348,51,3814,51],[4348,52,3814,52,"hostAndPort"],[4348,63,3814,63],[4348,64,3814,64],[4349,4,3815,4],[4349,8,3815,8,"bracketedIPv6"],[4349,21,3815,21],[4349,23,3815,23],[4350,6,3816,8],[4350,12,3816,14,"host"],[4350,16,3816,18],[4350,19,3816,21,"bracketedIPv6"],[4350,32,3816,34],[4350,33,3816,35],[4350,34,3816,36],[4350,35,3816,37],[4351,6,3817,8],[4351,13,3817,15],[4352,8,3817,17,"host"],[4352,12,3817,21],[4353,8,3817,23,"port"],[4353,12,3817,27],[4353,14,3817,29,"parsePort"],[4353,23,3817,38],[4353,24,3817,39,"hostAndPort"],[4353,35,3817,50],[4353,36,3817,51,"substr"],[4353,42,3817,57],[4353,43,3817,58,"host"],[4353,47,3817,62],[4353,48,3817,63,"length"],[4353,54,3817,69],[4353,57,3817,72],[4353,58,3817,73],[4353,59,3817,74],[4354,6,3817,76],[4354,7,3817,77],[4355,4,3818,4],[4355,5,3818,5],[4355,11,3819,9],[4356,6,3820,8],[4356,12,3820,14],[4356,13,3820,15,"host"],[4356,17,3820,19],[4356,19,3820,21,"port"],[4356,23,3820,25],[4356,24,3820,26],[4356,27,3820,29,"hostAndPort"],[4356,38,3820,40],[4356,39,3820,41,"split"],[4356,44,3820,46],[4356,45,3820,47],[4356,48,3820,50],[4356,49,3820,51],[4357,6,3821,8],[4357,13,3821,15],[4358,8,3821,17,"host"],[4358,12,3821,21],[4359,8,3821,23,"port"],[4359,12,3821,27],[4359,14,3821,29,"parsePort"],[4359,23,3821,38],[4359,24,3821,39,"port"],[4359,28,3821,43],[4360,6,3821,45],[4360,7,3821,46],[4361,4,3822,4],[4362,2,3823,0],[4363,2,3824,0],[4363,11,3824,9,"parsePort"],[4363,20,3824,18,"parsePort"],[4363,21,3824,19,"portStr"],[4363,28,3824,26],[4363,30,3824,28],[4364,4,3825,4],[4364,8,3825,8],[4364,9,3825,9,"portStr"],[4364,16,3825,16],[4364,18,3825,18],[4365,6,3826,8],[4365,13,3826,15],[4365,17,3826,19],[4366,4,3827,4],[4367,4,3828,4],[4367,10,3828,10,"port"],[4367,14,3828,14],[4367,17,3828,17,"Number"],[4367,23,3828,23],[4367,24,3828,24,"portStr"],[4367,31,3828,31],[4367,32,3828,32],[4368,4,3829,4],[4368,8,3829,8,"isNaN"],[4368,13,3829,13],[4368,14,3829,14,"port"],[4368,18,3829,18],[4368,19,3829,19],[4368,21,3829,21],[4369,6,3830,8],[4369,13,3830,15],[4369,17,3830,19],[4370,4,3831,4],[4371,4,3832,4],[4371,11,3832,11,"port"],[4371,15,3832,15],[4372,2,3833,0],[4373,2,3834,0],[4373,11,3834,9,"emitEmulatorWarning"],[4373,30,3834,28,"emitEmulatorWarning"],[4373,31,3834,28],[4373,33,3834,31],[4374,4,3835,4],[4374,13,3835,13,"attachBanner"],[4374,25,3835,25,"attachBanner"],[4374,26,3835,25],[4374,28,3835,28],[4375,6,3836,8],[4375,12,3836,14,"el"],[4375,14,3836,16],[4375,17,3836,19,"document"],[4375,25,3836,27],[4375,26,3836,28,"createElement"],[4375,39,3836,41],[4375,40,3836,42],[4375,43,3836,45],[4375,44,3836,46],[4376,6,3837,8],[4376,12,3837,14,"sty"],[4376,15,3837,17],[4376,18,3837,20,"el"],[4376,20,3837,22],[4376,21,3837,23,"style"],[4376,26,3837,28],[4377,6,3838,8,"el"],[4377,8,3838,10],[4377,9,3838,11,"innerText"],[4377,18,3838,20],[4377,21,3839,12],[4377,88,3839,79],[4378,6,3840,8,"sty"],[4378,9,3840,11],[4378,10,3840,12,"position"],[4378,18,3840,20],[4378,21,3840,23],[4378,28,3840,30],[4379,6,3841,8,"sty"],[4379,9,3841,11],[4379,10,3841,12,"width"],[4379,15,3841,17],[4379,18,3841,20],[4379,24,3841,26],[4380,6,3842,8,"sty"],[4380,9,3842,11],[4380,10,3842,12,"backgroundColor"],[4380,25,3842,27],[4380,28,3842,30],[4380,37,3842,39],[4381,6,3843,8,"sty"],[4381,9,3843,11],[4381,10,3843,12,"border"],[4381,16,3843,18],[4381,19,3843,21],[4381,39,3843,41],[4382,6,3844,8,"sty"],[4382,9,3844,11],[4382,10,3844,12,"color"],[4382,15,3844,17],[4382,18,3844,20],[4382,27,3844,29],[4383,6,3845,8,"sty"],[4383,9,3845,11],[4383,10,3845,12,"bottom"],[4383,16,3845,18],[4383,19,3845,21],[4383,24,3845,26],[4384,6,3846,8,"sty"],[4384,9,3846,11],[4384,10,3846,12,"left"],[4384,14,3846,16],[4384,17,3846,19],[4384,22,3846,24],[4385,6,3847,8,"sty"],[4385,9,3847,11],[4385,10,3847,12,"margin"],[4385,16,3847,18],[4385,19,3847,21],[4385,24,3847,26],[4386,6,3848,8,"sty"],[4386,9,3848,11],[4386,10,3848,12,"zIndex"],[4386,16,3848,18],[4386,19,3848,21],[4386,26,3848,28],[4387,6,3849,8,"sty"],[4387,9,3849,11],[4387,10,3849,12,"textAlign"],[4387,19,3849,21],[4387,22,3849,24],[4387,30,3849,32],[4388,6,3850,8,"el"],[4388,8,3850,10],[4388,9,3850,11,"classList"],[4388,18,3850,20],[4388,19,3850,21,"add"],[4388,22,3850,24],[4388,23,3850,25],[4388,50,3850,52],[4388,51,3850,53],[4389,6,3851,8,"document"],[4389,14,3851,16],[4389,15,3851,17,"body"],[4389,19,3851,21],[4389,20,3851,22,"appendChild"],[4389,31,3851,33],[4389,32,3851,34,"el"],[4389,34,3851,36],[4389,35,3851,37],[4390,4,3852,4],[4391,4,3853,4],[4391,8,3853,8],[4391,15,3853,15,"console"],[4391,22,3853,22],[4391,27,3853,27],[4391,38,3853,38],[4391,42,3853,42],[4391,49,3853,49,"console"],[4391,56,3853,56],[4391,57,3853,57,"info"],[4391,61,3853,61],[4391,66,3853,66],[4391,76,3853,76],[4391,78,3853,78],[4392,6,3854,8,"console"],[4392,13,3854,15],[4392,14,3854,16,"info"],[4392,18,3854,20],[4392,19,3854,21],[4392,62,3854,64],[4392,65,3855,12],[4392,126,3855,73],[4392,129,3856,12],[4392,155,3856,38],[4392,156,3856,39],[4393,4,3857,4],[4394,4,3858,4],[4394,8,3858,8],[4394,15,3858,15,"window"],[4394,21,3858,21],[4394,26,3858,26],[4394,37,3858,37],[4394,41,3858,41],[4394,48,3858,48,"document"],[4394,56,3858,56],[4394,61,3858,61],[4394,72,3858,72],[4394,74,3858,74],[4395,6,3859,8],[4395,10,3859,12,"document"],[4395,18,3859,20],[4395,19,3859,21,"readyState"],[4395,29,3859,31],[4395,34,3859,36],[4395,43,3859,45],[4395,45,3859,47],[4396,8,3860,12,"window"],[4396,14,3860,18],[4396,15,3860,19,"addEventListener"],[4396,31,3860,35],[4396,32,3860,36],[4396,50,3860,54],[4396,52,3860,56,"attachBanner"],[4396,64,3860,68],[4396,65,3860,69],[4397,6,3861,8],[4397,7,3861,9],[4397,13,3862,13],[4398,8,3863,12,"attachBanner"],[4398,20,3863,24],[4398,21,3863,25],[4398,22,3863,26],[4399,6,3864,8],[4400,4,3865,4],[4401,2,3866,0],[4403,2,3868,0],[4404,0,3869,0],[4405,0,3870,0],[4406,0,3871,0],[4407,0,3872,0],[4408,0,3873,0],[4409,0,3874,0],[4410,0,3875,0],[4411,0,3876,0],[4412,0,3877,0],[4413,0,3878,0],[4414,0,3879,0],[4415,0,3880,0],[4416,0,3881,0],[4417,0,3882,0],[4418,0,3883,0],[4419,2,3884,0],[4420,0,3885,0],[4421,0,3886,0],[4422,0,3887,0],[4423,0,3888,0],[4424,0,3889,0],[4425,0,3890,0],[4426,0,3891,0],[4427,2,3892,0],[4427,8,3892,6,"AuthCredential"],[4427,22,3892,20],[4427,23,3892,21],[4428,4,3893,4],[4429,4,3894,4,"constructor"],[4429,15,3894,15,"constructor"],[4430,4,3895,4],[4431,0,3896,0],[4432,0,3897,0],[4433,0,3898,0],[4434,0,3899,0],[4435,0,3900,0],[4436,4,3901,4,"providerId"],[4436,14,3901,14],[4437,4,3902,4],[4438,0,3903,0],[4439,0,3904,0],[4440,0,3905,0],[4441,0,3906,0],[4442,0,3907,0],[4443,0,3908,0],[4444,0,3909,0],[4445,4,3910,4,"signInMethod"],[4445,16,3910,16],[4445,18,3910,18],[4446,6,3911,8],[4446,10,3911,12],[4446,11,3911,13,"providerId"],[4446,21,3911,23],[4446,24,3911,26,"providerId"],[4446,34,3911,36],[4447,6,3912,8],[4447,10,3912,12],[4447,11,3912,13,"signInMethod"],[4447,23,3912,25],[4447,26,3912,28,"signInMethod"],[4447,38,3912,40],[4448,4,3913,4],[4449,4,3914,4],[4450,0,3915,0],[4451,0,3916,0],[4452,0,3917,0],[4453,0,3918,0],[4454,4,3919,4,"toJSON"],[4454,10,3919,10,"toJSON"],[4454,11,3919,10],[4454,13,3919,13],[4455,6,3920,8],[4455,13,3920,15,"debugFail"],[4455,22,3920,24],[4455,23,3920,25],[4455,40,3920,42],[4455,41,3920,43],[4456,4,3921,4],[4457,4,3922,4],[4458,4,3923,4,"_getIdTokenResponse"],[4458,23,3923,23,"_getIdTokenResponse"],[4458,24,3923,24,"_auth"],[4458,29,3923,29],[4458,31,3923,31],[4459,6,3924,8],[4459,13,3924,15,"debugFail"],[4459,22,3924,24],[4459,23,3924,25],[4459,40,3924,42],[4459,41,3924,43],[4460,4,3925,4],[4461,4,3926,4],[4462,4,3927,4,"_linkToIdToken"],[4462,18,3927,18,"_linkToIdToken"],[4462,19,3927,19,"_auth"],[4462,24,3927,24],[4462,26,3927,26,"_idToken"],[4462,34,3927,34],[4462,36,3927,36],[4463,6,3928,8],[4463,13,3928,15,"debugFail"],[4463,22,3928,24],[4463,23,3928,25],[4463,40,3928,42],[4463,41,3928,43],[4464,4,3929,4],[4465,4,3930,4],[4466,4,3931,4,"_getReauthenticationResolver"],[4466,32,3931,32,"_getReauthenticationResolver"],[4466,33,3931,33,"_auth"],[4466,38,3931,38],[4466,40,3931,40],[4467,6,3932,8],[4467,13,3932,15,"debugFail"],[4467,22,3932,24],[4467,23,3932,25],[4467,40,3932,42],[4467,41,3932,43],[4468,4,3933,4],[4469,2,3934,0],[4471,2,3936,0],[4472,0,3937,0],[4473,0,3938,0],[4474,0,3939,0],[4475,0,3940,0],[4476,0,3941,0],[4477,0,3942,0],[4478,0,3943,0],[4479,0,3944,0],[4480,0,3945,0],[4481,0,3946,0],[4482,0,3947,0],[4483,0,3948,0],[4484,0,3949,0],[4485,0,3950,0],[4486,0,3951,0],[4487,2,3952,0],[4487,17,3952,15,"resetPassword"],[4487,30,3952,28,"resetPassword"],[4487,31,3952,29,"auth"],[4487,35,3952,33],[4487,37,3952,35,"request"],[4487,44,3952,42],[4487,46,3952,44],[4488,4,3953,4],[4488,11,3953,11,"_performApiRequest"],[4488,29,3953,29],[4488,30,3953,30,"auth"],[4488,34,3953,34],[4488,36,3953,36],[4488,42,3953,42],[4488,43,3953,43],[4488,66,3953,66],[4488,94,3953,94],[4488,95,3953,95],[4488,126,3953,126,"_addTidIfNecessary"],[4488,144,3953,144],[4488,145,3953,145,"auth"],[4488,149,3953,149],[4488,151,3953,151,"request"],[4488,158,3953,158],[4488,159,3953,159],[4488,160,3953,160],[4489,2,3954,0],[4490,2,3955,0],[4490,17,3955,15,"updateEmailPassword"],[4490,36,3955,34,"updateEmailPassword"],[4490,37,3955,35,"auth"],[4490,41,3955,39],[4490,43,3955,41,"request"],[4490,50,3955,48],[4490,52,3955,50],[4491,4,3956,4],[4491,11,3956,11,"_performApiRequest"],[4491,29,3956,29],[4491,30,3956,30,"auth"],[4491,34,3956,34],[4491,36,3956,36],[4491,42,3956,42],[4491,43,3956,43],[4491,66,3956,66],[4491,87,3956,87],[4491,88,3956,88],[4491,121,3956,121,"request"],[4491,128,3956,128],[4491,129,3956,129],[4492,2,3957,0],[4493,2,3958,0],[4494,2,3959,0],[4495,2,3960,0],[4495,17,3960,15,"linkEmailPassword"],[4495,34,3960,32,"linkEmailPassword"],[4495,35,3960,33,"auth"],[4495,39,3960,37],[4495,41,3960,39,"request"],[4495,48,3960,46],[4495,50,3960,48],[4496,4,3961,4],[4496,11,3961,11,"_performApiRequest"],[4496,29,3961,29],[4496,30,3961,30,"auth"],[4496,34,3961,34],[4496,36,3961,36],[4496,42,3961,42],[4496,43,3961,43],[4496,66,3961,66],[4496,87,3961,87],[4496,88,3961,88],[4496,112,3961,112,"request"],[4496,119,3961,119],[4496,120,3961,120],[4497,2,3962,0],[4498,2,3963,0],[4498,17,3963,15,"applyActionCode$1"],[4498,34,3963,32,"applyActionCode$1"],[4498,35,3963,33,"auth"],[4498,39,3963,37],[4498,41,3963,39,"request"],[4498,48,3963,46],[4498,50,3963,48],[4499,4,3964,4],[4499,11,3964,11,"_performApiRequest"],[4499,29,3964,29],[4499,30,3964,30,"auth"],[4499,34,3964,34],[4499,36,3964,36],[4499,42,3964,42],[4499,43,3964,43],[4499,66,3964,66],[4499,87,3964,87],[4499,88,3964,88],[4499,121,3964,121,"_addTidIfNecessary"],[4499,139,3964,139],[4499,140,3964,140,"auth"],[4499,144,3964,144],[4499,146,3964,146,"request"],[4499,153,3964,153],[4499,154,3964,154],[4499,155,3964,155],[4500,2,3965,0],[4502,2,3967,0],[4503,0,3968,0],[4504,0,3969,0],[4505,0,3970,0],[4506,0,3971,0],[4507,0,3972,0],[4508,0,3973,0],[4509,0,3974,0],[4510,0,3975,0],[4511,0,3976,0],[4512,0,3977,0],[4513,0,3978,0],[4514,0,3979,0],[4515,0,3980,0],[4516,0,3981,0],[4517,0,3982,0],[4518,2,3983,0],[4518,17,3983,15,"signInWithPassword"],[4518,35,3983,33,"signInWithPassword"],[4518,36,3983,34,"auth"],[4518,40,3983,38],[4518,42,3983,40,"request"],[4518,49,3983,47],[4518,51,3983,49],[4519,4,3984,4],[4519,11,3984,11,"_performSignInRequest"],[4519,32,3984,32],[4519,33,3984,33,"auth"],[4519,37,3984,37],[4519,39,3984,39],[4519,45,3984,45],[4519,46,3984,46],[4519,69,3984,69],[4519,102,3984,102],[4519,103,3984,103],[4519,141,3984,141,"_addTidIfNecessary"],[4519,159,3984,159],[4519,160,3984,160,"auth"],[4519,164,3984,164],[4519,166,3984,166,"request"],[4519,173,3984,173],[4519,174,3984,174],[4519,175,3984,175],[4520,2,3985,0],[4521,2,3986,0],[4521,17,3986,15,"sendOobCode"],[4521,28,3986,26,"sendOobCode"],[4521,29,3986,27,"auth"],[4521,33,3986,31],[4521,35,3986,33,"request"],[4521,42,3986,40],[4521,44,3986,42],[4522,4,3987,4],[4522,11,3987,11,"_performApiRequest"],[4522,29,3987,29],[4522,30,3987,30,"auth"],[4522,34,3987,34],[4522,36,3987,36],[4522,42,3987,42],[4522,43,3987,43],[4522,66,3987,66],[4522,92,3987,92],[4522,93,3987,93],[4522,123,3987,123,"_addTidIfNecessary"],[4522,141,3987,141],[4522,142,3987,142,"auth"],[4522,146,3987,146],[4522,148,3987,148,"request"],[4522,155,3987,155],[4522,156,3987,156],[4522,157,3987,157],[4523,2,3988,0],[4524,2,3989,0],[4524,17,3989,15,"sendEmailVerification$1"],[4524,40,3989,38,"sendEmailVerification$1"],[4524,41,3989,39,"auth"],[4524,45,3989,43],[4524,47,3989,45,"request"],[4524,54,3989,52],[4524,56,3989,54],[4525,4,3990,4],[4525,11,3990,11,"sendOobCode"],[4525,22,3990,22],[4525,23,3990,23,"auth"],[4525,27,3990,27],[4525,29,3990,29,"request"],[4525,36,3990,36],[4525,37,3990,37],[4526,2,3991,0],[4527,2,3992,0],[4527,17,3992,15,"sendPasswordResetEmail$1"],[4527,41,3992,39,"sendPasswordResetEmail$1"],[4527,42,3992,40,"auth"],[4527,46,3992,44],[4527,48,3992,46,"request"],[4527,55,3992,53],[4527,57,3992,55],[4528,4,3993,4],[4528,11,3993,11,"sendOobCode"],[4528,22,3993,22],[4528,23,3993,23,"auth"],[4528,27,3993,27],[4528,29,3993,29,"request"],[4528,36,3993,36],[4528,37,3993,37],[4529,2,3994,0],[4530,2,3995,0],[4530,17,3995,15,"sendSignInLinkToEmail$1"],[4530,40,3995,38,"sendSignInLinkToEmail$1"],[4530,41,3995,39,"auth"],[4530,45,3995,43],[4530,47,3995,45,"request"],[4530,54,3995,52],[4530,56,3995,54],[4531,4,3996,4],[4531,11,3996,11,"sendOobCode"],[4531,22,3996,22],[4531,23,3996,23,"auth"],[4531,27,3996,27],[4531,29,3996,29,"request"],[4531,36,3996,36],[4531,37,3996,37],[4532,2,3997,0],[4533,2,3998,0],[4533,17,3998,15,"verifyAndChangeEmail"],[4533,37,3998,35,"verifyAndChangeEmail"],[4533,38,3998,36,"auth"],[4533,42,3998,40],[4533,44,3998,42,"request"],[4533,51,3998,49],[4533,53,3998,51],[4534,4,3999,4],[4534,11,3999,11,"sendOobCode"],[4534,22,3999,22],[4534,23,3999,23,"auth"],[4534,27,3999,27],[4534,29,3999,29,"request"],[4534,36,3999,36],[4534,37,3999,37],[4535,2,4000,0],[4537,2,4002,0],[4538,0,4003,0],[4539,0,4004,0],[4540,0,4005,0],[4541,0,4006,0],[4542,0,4007,0],[4543,0,4008,0],[4544,0,4009,0],[4545,0,4010,0],[4546,0,4011,0],[4547,0,4012,0],[4548,0,4013,0],[4549,0,4014,0],[4550,0,4015,0],[4551,0,4016,0],[4552,0,4017,0],[4553,2,4018,0],[4553,17,4018,15,"signInWithEmailLink$1"],[4553,38,4018,36,"signInWithEmailLink$1"],[4553,39,4018,37,"auth"],[4553,43,4018,41],[4553,45,4018,43,"request"],[4553,52,4018,50],[4553,54,4018,52],[4554,4,4019,4],[4554,11,4019,11,"_performSignInRequest"],[4554,32,4019,32],[4554,33,4019,33,"auth"],[4554,37,4019,37],[4554,39,4019,39],[4554,45,4019,45],[4554,46,4019,46],[4554,69,4019,69],[4554,103,4019,103],[4554,104,4019,104],[4554,144,4019,144,"_addTidIfNecessary"],[4554,162,4019,162],[4554,163,4019,163,"auth"],[4554,167,4019,167],[4554,169,4019,169,"request"],[4554,176,4019,176],[4554,177,4019,177],[4554,178,4019,178],[4555,2,4020,0],[4556,2,4021,0],[4556,17,4021,15,"signInWithEmailLinkForLinking"],[4556,46,4021,44,"signInWithEmailLinkForLinking"],[4556,47,4021,45,"auth"],[4556,51,4021,49],[4556,53,4021,51,"request"],[4556,60,4021,58],[4556,62,4021,60],[4557,4,4022,4],[4557,11,4022,11,"_performSignInRequest"],[4557,32,4022,32],[4557,33,4022,33,"auth"],[4557,37,4022,37],[4557,39,4022,39],[4557,45,4022,45],[4557,46,4022,46],[4557,69,4022,69],[4557,103,4022,103],[4557,104,4022,104],[4557,144,4022,144,"_addTidIfNecessary"],[4557,162,4022,162],[4557,163,4022,163,"auth"],[4557,167,4022,167],[4557,169,4022,169,"request"],[4557,176,4022,176],[4557,177,4022,177],[4557,178,4022,178],[4558,2,4023,0],[4560,2,4025,0],[4561,0,4026,0],[4562,0,4027,0],[4563,0,4028,0],[4564,0,4029,0],[4565,0,4030,0],[4566,0,4031,0],[4567,0,4032,0],[4568,0,4033,0],[4569,0,4034,0],[4570,0,4035,0],[4571,0,4036,0],[4572,0,4037,0],[4573,0,4038,0],[4574,0,4039,0],[4575,0,4040,0],[4576,2,4041,0],[4577,0,4042,0],[4578,0,4043,0],[4579,0,4044,0],[4580,0,4045,0],[4581,0,4046,0],[4582,0,4047,0],[4583,0,4048,0],[4584,0,4049,0],[4585,0,4050,0],[4586,2,4051,0],[4586,8,4051,6,"EmailAuthCredential"],[4586,27,4051,25],[4586,36,4051,34,"AuthCredential"],[4586,50,4051,48],[4586,51,4051,49],[4587,4,4052,4],[4588,4,4053,4,"constructor"],[4588,15,4053,15,"constructor"],[4588,16,4054,4],[4589,4,4055,4,"_email"],[4589,10,4055,10],[4589,12,4056,4],[4590,4,4057,4,"_password"],[4590,13,4057,13],[4590,15,4057,15,"signInMethod"],[4590,27,4057,27],[4590,29,4058,4],[4591,4,4059,4,"_tenantId"],[4591,13,4059,13],[4591,16,4059,16],[4591,20,4059,20],[4591,22,4059,22],[4592,6,4060,8],[4592,11,4060,13],[4592,12,4060,14],[4592,22,4060,24],[4592,23,4060,25],[4592,50,4060,52,"signInMethod"],[4592,62,4060,64],[4592,63,4060,65],[4593,6,4061,8],[4593,10,4061,12],[4593,11,4061,13,"_email"],[4593,17,4061,19],[4593,20,4061,22,"_email"],[4593,26,4061,28],[4594,6,4062,8],[4594,10,4062,12],[4594,11,4062,13,"_password"],[4594,20,4062,22],[4594,23,4062,25,"_password"],[4594,32,4062,34],[4595,6,4063,8],[4595,10,4063,12],[4595,11,4063,13,"_tenantId"],[4595,20,4063,22],[4595,23,4063,25,"_tenantId"],[4595,32,4063,34],[4596,4,4064,4],[4597,4,4065,4],[4598,4,4066,4],[4598,11,4066,11,"_fromEmailAndPassword"],[4598,32,4066,32,"_fromEmailAndPassword"],[4598,33,4066,33,"email"],[4598,38,4066,38],[4598,40,4066,40,"password"],[4598,48,4066,48],[4598,50,4066,50],[4599,6,4067,8],[4599,13,4067,15],[4599,17,4067,19,"EmailAuthCredential"],[4599,36,4067,38],[4599,37,4067,39,"email"],[4599,42,4067,44],[4599,44,4067,46,"password"],[4599,52,4067,54],[4599,54,4067,56],[4599,64,4067,66],[4599,65,4067,67],[4599,98,4067,100],[4599,99,4067,101],[4600,4,4068,4],[4601,4,4069,4],[4602,4,4070,4],[4602,11,4070,11,"_fromEmailAndCode"],[4602,28,4070,28,"_fromEmailAndCode"],[4602,29,4070,29,"email"],[4602,34,4070,34],[4602,36,4070,36,"oobCode"],[4602,43,4070,43],[4602,45,4070,45,"tenantId"],[4602,53,4070,53],[4602,56,4070,56],[4602,60,4070,60],[4602,62,4070,62],[4603,6,4071,8],[4603,13,4071,15],[4603,17,4071,19,"EmailAuthCredential"],[4603,36,4071,38],[4603,37,4071,39,"email"],[4603,42,4071,44],[4603,44,4071,46,"oobCode"],[4603,51,4071,53],[4603,53,4071,55],[4603,64,4071,66],[4603,65,4071,67],[4603,96,4071,98,"tenantId"],[4603,104,4071,106],[4603,105,4071,107],[4604,4,4072,4],[4605,4,4073,4],[4606,4,4074,4,"toJSON"],[4606,10,4074,10,"toJSON"],[4606,11,4074,10],[4606,13,4074,13],[4607,6,4075,8],[4607,13,4075,15],[4608,8,4076,12,"email"],[4608,13,4076,17],[4608,15,4076,19],[4608,19,4076,23],[4608,20,4076,24,"_email"],[4608,26,4076,30],[4609,8,4077,12,"password"],[4609,16,4077,20],[4609,18,4077,22],[4609,22,4077,26],[4609,23,4077,27,"_password"],[4609,32,4077,36],[4610,8,4078,12,"signInMethod"],[4610,20,4078,24],[4610,22,4078,26],[4610,26,4078,30],[4610,27,4078,31,"signInMethod"],[4610,39,4078,43],[4611,8,4079,12,"tenantId"],[4611,16,4079,20],[4611,18,4079,22],[4611,22,4079,26],[4611,23,4079,27,"_tenantId"],[4612,6,4080,8],[4612,7,4080,9],[4613,4,4081,4],[4614,4,4082,4],[4615,0,4083,0],[4616,0,4084,0],[4617,0,4085,0],[4618,0,4086,0],[4619,0,4087,0],[4620,0,4088,0],[4621,0,4089,0],[4622,4,4090,4],[4622,11,4090,11,"fromJSON"],[4622,19,4090,19,"fromJSON"],[4622,20,4090,20,"json"],[4622,24,4090,24],[4622,26,4090,26],[4623,6,4091,8],[4623,12,4091,14,"obj"],[4623,15,4091,17],[4623,18,4091,20],[4623,25,4091,27,"json"],[4623,29,4091,31],[4623,34,4091,36],[4623,42,4091,44],[4623,45,4091,47,"JSON"],[4623,49,4091,51],[4623,50,4091,52,"parse"],[4623,55,4091,57],[4623,56,4091,58,"json"],[4623,60,4091,62],[4623,61,4091,63],[4623,64,4091,66,"json"],[4623,68,4091,70],[4624,6,4092,8],[4624,10,4092,12,"obj"],[4624,13,4092,15],[4624,15,4092,17,"email"],[4624,20,4092,22],[4624,24,4092,26,"obj"],[4624,27,4092,29],[4624,29,4092,31,"password"],[4624,37,4092,39],[4624,39,4092,41],[4625,8,4093,12],[4625,12,4093,16,"obj"],[4625,15,4093,19],[4625,16,4093,20,"signInMethod"],[4625,28,4093,32],[4625,33,4093,37],[4625,43,4093,47],[4625,44,4093,48],[4625,79,4093,83],[4626,10,4094,16],[4626,17,4094,23],[4626,21,4094,27],[4626,22,4094,28,"_fromEmailAndPassword"],[4626,43,4094,49],[4626,44,4094,50,"obj"],[4626,47,4094,53],[4626,48,4094,54,"email"],[4626,53,4094,59],[4626,55,4094,61,"obj"],[4626,58,4094,64],[4626,59,4094,65,"password"],[4626,67,4094,73],[4626,68,4094,74],[4627,8,4095,12],[4627,9,4095,13],[4627,15,4096,17],[4627,19,4096,21,"obj"],[4627,22,4096,24],[4627,23,4096,25,"signInMethod"],[4627,35,4096,37],[4627,40,4096,42],[4627,51,4096,53],[4627,52,4096,54],[4627,83,4096,85],[4628,10,4097,16],[4628,17,4097,23],[4628,21,4097,27],[4628,22,4097,28,"_fromEmailAndCode"],[4628,39,4097,45],[4628,40,4097,46,"obj"],[4628,43,4097,49],[4628,44,4097,50,"email"],[4628,49,4097,55],[4628,51,4097,57,"obj"],[4628,54,4097,60],[4628,55,4097,61,"password"],[4628,63,4097,69],[4628,65,4097,71,"obj"],[4628,68,4097,74],[4628,69,4097,75,"tenantId"],[4628,77,4097,83],[4628,78,4097,84],[4629,8,4098,12],[4630,6,4099,8],[4631,6,4100,8],[4631,13,4100,15],[4631,17,4100,19],[4632,4,4101,4],[4633,4,4102,4],[4634,4,4103,4],[4634,10,4103,10,"_getIdTokenResponse"],[4634,29,4103,29,"_getIdTokenResponse"],[4634,30,4103,30,"auth"],[4634,34,4103,34],[4634,36,4103,36],[4635,6,4104,8],[4635,14,4104,16],[4635,18,4104,20],[4635,19,4104,21,"signInMethod"],[4635,31,4104,33],[4636,8,4105,12],[4636,13,4105,17],[4636,23,4105,27],[4636,24,4105,28],[4637,10,4106,16],[4637,16,4106,22,"request"],[4637,23,4106,29],[4637,26,4106,32],[4638,12,4107,20,"returnSecureToken"],[4638,29,4107,37],[4638,31,4107,39],[4638,35,4107,43],[4639,12,4108,20,"email"],[4639,17,4108,25],[4639,19,4108,27],[4639,23,4108,31],[4639,24,4108,32,"_email"],[4639,30,4108,38],[4640,12,4109,20,"password"],[4640,20,4109,28],[4640,22,4109,30],[4640,26,4109,34],[4640,27,4109,35,"_password"],[4640,36,4109,44],[4641,12,4110,20,"clientType"],[4641,22,4110,30],[4641,24,4110,32],[4641,41,4110,49],[4641,42,4110,50],[4642,10,4111,16],[4642,11,4111,17],[4643,10,4112,16],[4643,17,4112,23,"handleRecaptchaFlow"],[4643,36,4112,42],[4643,37,4112,43,"auth"],[4643,41,4112,47],[4643,43,4112,49,"request"],[4643,50,4112,56],[4643,52,4112,58],[4643,72,4112,78],[4643,73,4112,79],[4643,122,4112,128,"signInWithPassword"],[4643,140,4112,146],[4643,142,4112,148],[4643,167,4112,173],[4643,168,4112,174],[4643,219,4112,225],[4643,220,4112,226],[4644,8,4113,12],[4644,13,4113,17],[4644,24,4113,28],[4644,25,4113,29],[4645,10,4114,16],[4645,17,4114,23,"signInWithEmailLink$1"],[4645,38,4114,44],[4645,39,4114,45,"auth"],[4645,43,4114,49],[4645,45,4114,51],[4646,12,4115,20,"email"],[4646,17,4115,25],[4646,19,4115,27],[4646,23,4115,31],[4646,24,4115,32,"_email"],[4646,30,4115,38],[4647,12,4116,20,"oobCode"],[4647,19,4116,27],[4647,21,4116,29],[4647,25,4116,33],[4647,26,4116,34,"_password"],[4648,10,4117,16],[4648,11,4117,17],[4648,12,4117,18],[4649,8,4118,12],[4650,10,4119,16,"_fail"],[4650,15,4119,21],[4650,16,4119,22,"auth"],[4650,20,4119,26],[4650,22,4119,28],[4650,38,4119,44],[4650,39,4119,45],[4650,73,4119,79],[4650,74,4119,80],[4651,6,4120,8],[4652,4,4121,4],[4653,4,4122,4],[4654,4,4123,4],[4654,10,4123,10,"_linkToIdToken"],[4654,24,4123,24,"_linkToIdToken"],[4654,25,4123,25,"auth"],[4654,29,4123,29],[4654,31,4123,31,"idToken"],[4654,38,4123,38],[4654,40,4123,40],[4655,6,4124,8],[4655,14,4124,16],[4655,18,4124,20],[4655,19,4124,21,"signInMethod"],[4655,31,4124,33],[4656,8,4125,12],[4656,13,4125,17],[4656,23,4125,27],[4656,24,4125,28],[4657,10,4126,16],[4657,16,4126,22,"request"],[4657,23,4126,29],[4657,26,4126,32],[4658,12,4127,20,"idToken"],[4658,19,4127,27],[4659,12,4128,20,"returnSecureToken"],[4659,29,4128,37],[4659,31,4128,39],[4659,35,4128,43],[4660,12,4129,20,"email"],[4660,17,4129,25],[4660,19,4129,27],[4660,23,4129,31],[4660,24,4129,32,"_email"],[4660,30,4129,38],[4661,12,4130,20,"password"],[4661,20,4130,28],[4661,22,4130,30],[4661,26,4130,34],[4661,27,4130,35,"_password"],[4661,36,4130,44],[4662,12,4131,20,"clientType"],[4662,22,4131,30],[4662,24,4131,32],[4662,41,4131,49],[4662,42,4131,50],[4663,10,4132,16],[4663,11,4132,17],[4664,10,4133,16],[4664,17,4133,23,"handleRecaptchaFlow"],[4664,36,4133,42],[4664,37,4133,43,"auth"],[4664,41,4133,47],[4664,43,4133,49,"request"],[4664,50,4133,56],[4664,52,4133,58],[4664,68,4133,74],[4664,69,4133,75],[4664,113,4133,119,"linkEmailPassword"],[4664,130,4133,136],[4664,132,4133,138],[4664,157,4133,163],[4664,158,4133,164],[4664,209,4133,215],[4664,210,4133,216],[4665,8,4134,12],[4665,13,4134,17],[4665,24,4134,28],[4665,25,4134,29],[4666,10,4135,16],[4666,17,4135,23,"signInWithEmailLinkForLinking"],[4666,46,4135,52],[4666,47,4135,53,"auth"],[4666,51,4135,57],[4666,53,4135,59],[4667,12,4136,20,"idToken"],[4667,19,4136,27],[4668,12,4137,20,"email"],[4668,17,4137,25],[4668,19,4137,27],[4668,23,4137,31],[4668,24,4137,32,"_email"],[4668,30,4137,38],[4669,12,4138,20,"oobCode"],[4669,19,4138,27],[4669,21,4138,29],[4669,25,4138,33],[4669,26,4138,34,"_password"],[4670,10,4139,16],[4670,11,4139,17],[4670,12,4139,18],[4671,8,4140,12],[4672,10,4141,16,"_fail"],[4672,15,4141,21],[4672,16,4141,22,"auth"],[4672,20,4141,26],[4672,22,4141,28],[4672,38,4141,44],[4672,39,4141,45],[4672,73,4141,79],[4672,74,4141,80],[4673,6,4142,8],[4674,4,4143,4],[4675,4,4144,4],[4676,4,4145,4,"_getReauthenticationResolver"],[4676,32,4145,32,"_getReauthenticationResolver"],[4676,33,4145,33,"auth"],[4676,37,4145,37],[4676,39,4145,39],[4677,6,4146,8],[4677,13,4146,15],[4677,17,4146,19],[4677,18,4146,20,"_getIdTokenResponse"],[4677,37,4146,39],[4677,38,4146,40,"auth"],[4677,42,4146,44],[4677,43,4146,45],[4678,4,4147,4],[4679,2,4148,0],[4681,2,4150,0],[4682,0,4151,0],[4683,0,4152,0],[4684,0,4153,0],[4685,0,4154,0],[4686,0,4155,0],[4687,0,4156,0],[4688,0,4157,0],[4689,0,4158,0],[4690,0,4159,0],[4691,0,4160,0],[4692,0,4161,0],[4693,0,4162,0],[4694,0,4163,0],[4695,0,4164,0],[4696,0,4165,0],[4697,2,4166,0],[4697,17,4166,15,"signInWithIdp"],[4697,30,4166,28,"signInWithIdp"],[4697,31,4166,29,"auth"],[4697,35,4166,33],[4697,37,4166,35,"request"],[4697,44,4166,42],[4697,46,4166,44],[4698,4,4167,4],[4698,11,4167,11,"_performSignInRequest"],[4698,32,4167,32],[4698,33,4167,33,"auth"],[4698,37,4167,37],[4698,39,4167,39],[4698,45,4167,45],[4698,46,4167,46],[4698,69,4167,69],[4698,97,4167,97],[4698,98,4167,98],[4698,131,4167,131,"_addTidIfNecessary"],[4698,149,4167,149],[4698,150,4167,150,"auth"],[4698,154,4167,154],[4698,156,4167,156,"request"],[4698,163,4167,163],[4698,164,4167,164],[4698,165,4167,165],[4699,2,4168,0],[4701,2,4170,0],[4702,0,4171,0],[4703,0,4172,0],[4704,0,4173,0],[4705,0,4174,0],[4706,0,4175,0],[4707,0,4176,0],[4708,0,4177,0],[4709,0,4178,0],[4710,0,4179,0],[4711,0,4180,0],[4712,0,4181,0],[4713,0,4182,0],[4714,0,4183,0],[4715,0,4184,0],[4716,0,4185,0],[4717,2,4186,0],[4717,8,4186,6,"IDP_REQUEST_URI$1"],[4717,25,4186,23],[4717,28,4186,26],[4717,46,4186,44],[4718,2,4187,0],[4719,0,4188,0],[4720,0,4189,0],[4721,0,4190,0],[4722,0,4191,0],[4723,0,4192,0],[4724,0,4193,0],[4725,0,4194,0],[4726,2,4195,0],[4726,8,4195,6,"OAuthCredential"],[4726,23,4195,21],[4726,32,4195,30,"AuthCredential"],[4726,46,4195,44],[4726,47,4195,45],[4727,4,4196,4,"constructor"],[4727,15,4196,15,"constructor"],[4727,16,4196,15],[4727,18,4196,18],[4728,6,4197,8],[4728,11,4197,13],[4728,12,4197,14],[4728,15,4197,17,"arguments"],[4728,24,4197,26],[4728,25,4197,27],[4729,6,4198,8],[4729,10,4198,12],[4729,11,4198,13,"pendingToken"],[4729,23,4198,25],[4729,26,4198,28],[4729,30,4198,32],[4730,4,4199,4],[4731,4,4200,4],[4732,4,4201,4],[4732,11,4201,11,"_fromParams"],[4732,22,4201,22,"_fromParams"],[4732,23,4201,23,"params"],[4732,29,4201,29],[4732,31,4201,31],[4733,6,4202,8],[4733,12,4202,14,"cred"],[4733,16,4202,18],[4733,19,4202,21],[4733,23,4202,25,"OAuthCredential"],[4733,38,4202,40],[4733,39,4202,41,"params"],[4733,45,4202,47],[4733,46,4202,48,"providerId"],[4733,56,4202,58],[4733,58,4202,60,"params"],[4733,64,4202,66],[4733,65,4202,67,"signInMethod"],[4733,77,4202,79],[4733,78,4202,80],[4734,6,4203,8],[4734,10,4203,12,"params"],[4734,16,4203,18],[4734,17,4203,19,"idToken"],[4734,24,4203,26],[4734,28,4203,30,"params"],[4734,34,4203,36],[4734,35,4203,37,"accessToken"],[4734,46,4203,48],[4734,48,4203,50],[4735,8,4204,12],[4736,8,4205,12],[4736,12,4205,16,"params"],[4736,18,4205,22],[4736,19,4205,23,"idToken"],[4736,26,4205,30],[4736,28,4205,32],[4737,10,4206,16,"cred"],[4737,14,4206,20],[4737,15,4206,21,"idToken"],[4737,22,4206,28],[4737,25,4206,31,"params"],[4737,31,4206,37],[4737,32,4206,38,"idToken"],[4737,39,4206,45],[4738,8,4207,12],[4739,8,4208,12],[4739,12,4208,16,"params"],[4739,18,4208,22],[4739,19,4208,23,"accessToken"],[4739,30,4208,34],[4739,32,4208,36],[4740,10,4209,16,"cred"],[4740,14,4209,20],[4740,15,4209,21,"accessToken"],[4740,26,4209,32],[4740,29,4209,35,"params"],[4740,35,4209,41],[4740,36,4209,42,"accessToken"],[4740,47,4209,53],[4741,8,4210,12],[4742,8,4211,12],[4743,8,4212,12],[4743,12,4212,16,"params"],[4743,18,4212,22],[4743,19,4212,23,"nonce"],[4743,24,4212,28],[4743,28,4212,32],[4743,29,4212,33,"params"],[4743,35,4212,39],[4743,36,4212,40,"pendingToken"],[4743,48,4212,52],[4743,50,4212,54],[4744,10,4213,16,"cred"],[4744,14,4213,20],[4744,15,4213,21,"nonce"],[4744,20,4213,26],[4744,23,4213,29,"params"],[4744,29,4213,35],[4744,30,4213,36,"nonce"],[4744,35,4213,41],[4745,8,4214,12],[4746,8,4215,12],[4746,12,4215,16,"params"],[4746,18,4215,22],[4746,19,4215,23,"pendingToken"],[4746,31,4215,35],[4746,33,4215,37],[4747,10,4216,16,"cred"],[4747,14,4216,20],[4747,15,4216,21,"pendingToken"],[4747,27,4216,33],[4747,30,4216,36,"params"],[4747,36,4216,42],[4747,37,4216,43,"pendingToken"],[4747,49,4216,55],[4748,8,4217,12],[4749,6,4218,8],[4749,7,4218,9],[4749,13,4219,13],[4749,17,4219,17,"params"],[4749,23,4219,23],[4749,24,4219,24,"oauthToken"],[4749,34,4219,34],[4749,38,4219,38,"params"],[4749,44,4219,44],[4749,45,4219,45,"oauthTokenSecret"],[4749,61,4219,61],[4749,63,4219,63],[4750,8,4220,12],[4751,8,4221,12,"cred"],[4751,12,4221,16],[4751,13,4221,17,"accessToken"],[4751,24,4221,28],[4751,27,4221,31,"params"],[4751,33,4221,37],[4751,34,4221,38,"oauthToken"],[4751,44,4221,48],[4752,8,4222,12,"cred"],[4752,12,4222,16],[4752,13,4222,17,"secret"],[4752,19,4222,23],[4752,22,4222,26,"params"],[4752,28,4222,32],[4752,29,4222,33,"oauthTokenSecret"],[4752,45,4222,49],[4753,6,4223,8],[4753,7,4223,9],[4753,13,4224,13],[4754,8,4225,12,"_fail"],[4754,13,4225,17],[4754,14,4225,18],[4754,30,4225,34],[4754,31,4225,35],[4754,65,4225,69],[4754,66,4225,70],[4755,6,4226,8],[4756,6,4227,8],[4756,13,4227,15,"cred"],[4756,17,4227,19],[4757,4,4228,4],[4758,4,4229,4],[4759,4,4230,4,"toJSON"],[4759,10,4230,10,"toJSON"],[4759,11,4230,10],[4759,13,4230,13],[4760,6,4231,8],[4760,13,4231,15],[4761,8,4232,12,"idToken"],[4761,15,4232,19],[4761,17,4232,21],[4761,21,4232,25],[4761,22,4232,26,"idToken"],[4761,29,4232,33],[4762,8,4233,12,"accessToken"],[4762,19,4233,23],[4762,21,4233,25],[4762,25,4233,29],[4762,26,4233,30,"accessToken"],[4762,37,4233,41],[4763,8,4234,12,"secret"],[4763,14,4234,18],[4763,16,4234,20],[4763,20,4234,24],[4763,21,4234,25,"secret"],[4763,27,4234,31],[4764,8,4235,12,"nonce"],[4764,13,4235,17],[4764,15,4235,19],[4764,19,4235,23],[4764,20,4235,24,"nonce"],[4764,25,4235,29],[4765,8,4236,12,"pendingToken"],[4765,20,4236,24],[4765,22,4236,26],[4765,26,4236,30],[4765,27,4236,31,"pendingToken"],[4765,39,4236,43],[4766,8,4237,12,"providerId"],[4766,18,4237,22],[4766,20,4237,24],[4766,24,4237,28],[4766,25,4237,29,"providerId"],[4766,35,4237,39],[4767,8,4238,12,"signInMethod"],[4767,20,4238,24],[4767,22,4238,26],[4767,26,4238,30],[4767,27,4238,31,"signInMethod"],[4768,6,4239,8],[4768,7,4239,9],[4769,4,4240,4],[4770,4,4241,4],[4771,0,4242,0],[4772,0,4243,0],[4773,0,4244,0],[4774,0,4245,0],[4775,0,4246,0],[4776,0,4247,0],[4777,0,4248,0],[4778,0,4249,0],[4779,4,4250,4],[4779,11,4250,11,"fromJSON"],[4779,19,4250,19,"fromJSON"],[4779,20,4250,20,"json"],[4779,24,4250,24],[4779,26,4250,26],[4780,6,4251,8],[4780,12,4251,14,"obj"],[4780,15,4251,17],[4780,18,4251,20],[4780,25,4251,27,"json"],[4780,29,4251,31],[4780,34,4251,36],[4780,42,4251,44],[4780,45,4251,47,"JSON"],[4780,49,4251,51],[4780,50,4251,52,"parse"],[4780,55,4251,57],[4780,56,4251,58,"json"],[4780,60,4251,62],[4780,61,4251,63],[4780,64,4251,66,"json"],[4780,68,4251,70],[4781,6,4252,8],[4781,12,4252,14],[4782,10,4252,16,"providerId"],[4782,20,4252,26],[4783,10,4252,28,"signInMethod"],[4784,8,4252,50],[4784,9,4252,51],[4784,12,4252,54,"obj"],[4784,15,4252,57],[4785,8,4252,45,"rest"],[4785,12,4252,49],[4785,19,4252,49,"_objectWithoutPropertiesLoose"],[4785,48,4252,49],[4785,49,4252,49,"default"],[4785,56,4252,49],[4785,58,4252,54,"obj"],[4785,61,4252,57],[4785,63,4252,57,"_excluded3"],[4785,73,4252,57],[4786,6,4253,8],[4786,10,4253,12],[4786,11,4253,13,"providerId"],[4786,21,4253,23],[4786,25,4253,27],[4786,26,4253,28,"signInMethod"],[4786,38,4253,40],[4786,40,4253,42],[4787,8,4254,12],[4787,15,4254,19],[4787,19,4254,23],[4788,6,4255,8],[4789,6,4256,8],[4789,12,4256,14,"cred"],[4789,16,4256,18],[4789,19,4256,21],[4789,23,4256,25,"OAuthCredential"],[4789,38,4256,40],[4789,39,4256,41,"providerId"],[4789,49,4256,51],[4789,51,4256,53,"signInMethod"],[4789,63,4256,65],[4789,64,4256,66],[4790,6,4257,8,"cred"],[4790,10,4257,12],[4790,11,4257,13,"idToken"],[4790,18,4257,20],[4790,21,4257,23,"rest"],[4790,25,4257,27],[4790,26,4257,28,"idToken"],[4790,33,4257,35],[4790,37,4257,39,"undefined"],[4790,46,4257,48],[4791,6,4258,8,"cred"],[4791,10,4258,12],[4791,11,4258,13,"accessToken"],[4791,22,4258,24],[4791,25,4258,27,"rest"],[4791,29,4258,31],[4791,30,4258,32,"accessToken"],[4791,41,4258,43],[4791,45,4258,47,"undefined"],[4791,54,4258,56],[4792,6,4259,8,"cred"],[4792,10,4259,12],[4792,11,4259,13,"secret"],[4792,17,4259,19],[4792,20,4259,22,"rest"],[4792,24,4259,26],[4792,25,4259,27,"secret"],[4792,31,4259,33],[4793,6,4260,8,"cred"],[4793,10,4260,12],[4793,11,4260,13,"nonce"],[4793,16,4260,18],[4793,19,4260,21,"rest"],[4793,23,4260,25],[4793,24,4260,26,"nonce"],[4793,29,4260,31],[4794,6,4261,8,"cred"],[4794,10,4261,12],[4794,11,4261,13,"pendingToken"],[4794,23,4261,25],[4794,26,4261,28,"rest"],[4794,30,4261,32],[4794,31,4261,33,"pendingToken"],[4794,43,4261,45],[4794,47,4261,49],[4794,51,4261,53],[4795,6,4262,8],[4795,13,4262,15,"cred"],[4795,17,4262,19],[4796,4,4263,4],[4797,4,4264,4],[4798,4,4265,4,"_getIdTokenResponse"],[4798,23,4265,23,"_getIdTokenResponse"],[4798,24,4265,24,"auth"],[4798,28,4265,28],[4798,30,4265,30],[4799,6,4266,8],[4799,12,4266,14,"request"],[4799,19,4266,21],[4799,22,4266,24],[4799,26,4266,28],[4799,27,4266,29,"buildRequest"],[4799,39,4266,41],[4799,40,4266,42],[4799,41,4266,43],[4800,6,4267,8],[4800,13,4267,15,"signInWithIdp"],[4800,26,4267,28],[4800,27,4267,29,"auth"],[4800,31,4267,33],[4800,33,4267,35,"request"],[4800,40,4267,42],[4800,41,4267,43],[4801,4,4268,4],[4802,4,4269,4],[4803,4,4270,4,"_linkToIdToken"],[4803,18,4270,18,"_linkToIdToken"],[4803,19,4270,19,"auth"],[4803,23,4270,23],[4803,25,4270,25,"idToken"],[4803,32,4270,32],[4803,34,4270,34],[4804,6,4271,8],[4804,12,4271,14,"request"],[4804,19,4271,21],[4804,22,4271,24],[4804,26,4271,28],[4804,27,4271,29,"buildRequest"],[4804,39,4271,41],[4804,40,4271,42],[4804,41,4271,43],[4805,6,4272,8,"request"],[4805,13,4272,15],[4805,14,4272,16,"idToken"],[4805,21,4272,23],[4805,24,4272,26,"idToken"],[4805,31,4272,33],[4806,6,4273,8],[4806,13,4273,15,"signInWithIdp"],[4806,26,4273,28],[4806,27,4273,29,"auth"],[4806,31,4273,33],[4806,33,4273,35,"request"],[4806,40,4273,42],[4806,41,4273,43],[4807,4,4274,4],[4808,4,4275,4],[4809,4,4276,4,"_getReauthenticationResolver"],[4809,32,4276,32,"_getReauthenticationResolver"],[4809,33,4276,33,"auth"],[4809,37,4276,37],[4809,39,4276,39],[4810,6,4277,8],[4810,12,4277,14,"request"],[4810,19,4277,21],[4810,22,4277,24],[4810,26,4277,28],[4810,27,4277,29,"buildRequest"],[4810,39,4277,41],[4810,40,4277,42],[4810,41,4277,43],[4811,6,4278,8,"request"],[4811,13,4278,15],[4811,14,4278,16,"autoCreate"],[4811,24,4278,26],[4811,27,4278,29],[4811,32,4278,34],[4812,6,4279,8],[4812,13,4279,15,"signInWithIdp"],[4812,26,4279,28],[4812,27,4279,29,"auth"],[4812,31,4279,33],[4812,33,4279,35,"request"],[4812,40,4279,42],[4812,41,4279,43],[4813,4,4280,4],[4814,4,4281,4,"buildRequest"],[4814,16,4281,16,"buildRequest"],[4814,17,4281,16],[4814,19,4281,19],[4815,6,4282,8],[4815,12,4282,14,"request"],[4815,19,4282,21],[4815,22,4282,24],[4816,8,4283,12,"requestUri"],[4816,18,4283,22],[4816,20,4283,24,"IDP_REQUEST_URI$1"],[4816,37,4283,41],[4817,8,4284,12,"returnSecureToken"],[4817,25,4284,29],[4817,27,4284,31],[4818,6,4285,8],[4818,7,4285,9],[4819,6,4286,8],[4819,10,4286,12],[4819,14,4286,16],[4819,15,4286,17,"pendingToken"],[4819,27,4286,29],[4819,29,4286,31],[4820,8,4287,12,"request"],[4820,15,4287,19],[4820,16,4287,20,"pendingToken"],[4820,28,4287,32],[4820,31,4287,35],[4820,35,4287,39],[4820,36,4287,40,"pendingToken"],[4820,48,4287,52],[4821,6,4288,8],[4821,7,4288,9],[4821,13,4289,13],[4822,8,4290,12],[4822,14,4290,18,"postBody"],[4822,22,4290,26],[4822,25,4290,29],[4822,26,4290,30],[4822,27,4290,31],[4823,8,4291,12],[4823,12,4291,16],[4823,16,4291,20],[4823,17,4291,21,"idToken"],[4823,24,4291,28],[4823,26,4291,30],[4824,10,4292,16,"postBody"],[4824,18,4292,24],[4824,19,4292,25],[4824,29,4292,35],[4824,30,4292,36],[4824,33,4292,39],[4824,37,4292,43],[4824,38,4292,44,"idToken"],[4824,45,4292,51],[4825,8,4293,12],[4826,8,4294,12],[4826,12,4294,16],[4826,16,4294,20],[4826,17,4294,21,"accessToken"],[4826,28,4294,32],[4826,30,4294,34],[4827,10,4295,16,"postBody"],[4827,18,4295,24],[4827,19,4295,25],[4827,33,4295,39],[4827,34,4295,40],[4827,37,4295,43],[4827,41,4295,47],[4827,42,4295,48,"accessToken"],[4827,53,4295,59],[4828,8,4296,12],[4829,8,4297,12],[4829,12,4297,16],[4829,16,4297,20],[4829,17,4297,21,"secret"],[4829,23,4297,27],[4829,25,4297,29],[4830,10,4298,16,"postBody"],[4830,18,4298,24],[4830,19,4298,25],[4830,39,4298,45],[4830,40,4298,46],[4830,43,4298,49],[4830,47,4298,53],[4830,48,4298,54,"secret"],[4830,54,4298,60],[4831,8,4299,12],[4832,8,4300,12,"postBody"],[4832,16,4300,20],[4832,17,4300,21],[4832,29,4300,33],[4832,30,4300,34],[4832,33,4300,37],[4832,37,4300,41],[4832,38,4300,42,"providerId"],[4832,48,4300,52],[4833,8,4301,12],[4833,12,4301,16],[4833,16,4301,20],[4833,17,4301,21,"nonce"],[4833,22,4301,26],[4833,26,4301,30],[4833,27,4301,31],[4833,31,4301,35],[4833,32,4301,36,"pendingToken"],[4833,44,4301,48],[4833,46,4301,50],[4834,10,4302,16,"postBody"],[4834,18,4302,24],[4834,19,4302,25],[4834,26,4302,32],[4834,27,4302,33],[4834,30,4302,36],[4834,34,4302,40],[4834,35,4302,41,"nonce"],[4834,40,4302,46],[4835,8,4303,12],[4836,8,4304,12,"request"],[4836,15,4304,19],[4836,16,4304,20,"postBody"],[4836,24,4304,28],[4836,27,4304,31],[4836,31,4304,31,"querystring"],[4836,44,4304,42],[4836,45,4304,42,"querystring"],[4836,56,4304,42],[4836,58,4304,43,"postBody"],[4836,66,4304,51],[4836,67,4304,52],[4837,6,4305,8],[4838,6,4306,8],[4838,13,4306,15,"request"],[4838,20,4306,22],[4839,4,4307,4],[4840,2,4308,0],[4842,2,4310,0],[4843,0,4311,0],[4844,0,4312,0],[4845,0,4313,0],[4846,0,4314,0],[4847,0,4315,0],[4848,0,4316,0],[4849,0,4317,0],[4850,0,4318,0],[4851,0,4319,0],[4852,0,4320,0],[4853,0,4321,0],[4854,0,4322,0],[4855,0,4323,0],[4856,0,4324,0],[4857,0,4325,0],[4858,2,4326,0],[4858,17,4326,15,"sendPhoneVerificationCode"],[4858,42,4326,40,"sendPhoneVerificationCode"],[4858,43,4326,41,"auth"],[4858,47,4326,45],[4858,49,4326,47,"request"],[4858,56,4326,54],[4858,58,4326,56],[4859,4,4327,4],[4859,11,4327,11,"_performApiRequest"],[4859,29,4327,29],[4859,30,4327,30,"auth"],[4859,34,4327,34],[4859,36,4327,36],[4859,42,4327,42],[4859,43,4327,43],[4859,66,4327,66],[4859,101,4327,101],[4859,102,4327,102],[4859,141,4327,141,"_addTidIfNecessary"],[4859,159,4327,159],[4859,160,4327,160,"auth"],[4859,164,4327,164],[4859,166,4327,166,"request"],[4859,173,4327,173],[4859,174,4327,174],[4859,175,4327,175],[4860,2,4328,0],[4861,2,4329,0],[4861,17,4329,15,"signInWithPhoneNumber$1"],[4861,40,4329,38,"signInWithPhoneNumber$1"],[4861,41,4329,39,"auth"],[4861,45,4329,43],[4861,47,4329,45,"request"],[4861,54,4329,52],[4861,56,4329,54],[4862,4,4330,4],[4862,11,4330,11,"_performSignInRequest"],[4862,32,4330,32],[4862,33,4330,33,"auth"],[4862,37,4330,37],[4862,39,4330,39],[4862,45,4330,45],[4862,46,4330,46],[4862,69,4330,69],[4862,105,4330,105],[4862,106,4330,106],[4862,148,4330,148,"_addTidIfNecessary"],[4862,166,4330,166],[4862,167,4330,167,"auth"],[4862,171,4330,171],[4862,173,4330,173,"request"],[4862,180,4330,180],[4862,181,4330,181],[4862,182,4330,182],[4863,2,4331,0],[4864,2,4332,0],[4864,17,4332,15,"linkWithPhoneNumber$1"],[4864,38,4332,36,"linkWithPhoneNumber$1"],[4864,39,4332,37,"auth"],[4864,43,4332,41],[4864,45,4332,43,"request"],[4864,52,4332,50],[4864,54,4332,52],[4865,4,4333,4],[4865,10,4333,10,"response"],[4865,18,4333,18],[4865,21,4333,21],[4865,27,4333,27,"_performSignInRequest"],[4865,48,4333,48],[4865,49,4333,49,"auth"],[4865,53,4333,53],[4865,55,4333,55],[4865,61,4333,61],[4865,62,4333,62],[4865,85,4333,85],[4865,121,4333,121],[4865,122,4333,122],[4865,164,4333,164,"_addTidIfNecessary"],[4865,182,4333,182],[4865,183,4333,183,"auth"],[4865,187,4333,187],[4865,189,4333,189,"request"],[4865,196,4333,196],[4865,197,4333,197],[4865,198,4333,198],[4866,4,4334,4],[4866,8,4334,8,"response"],[4866,16,4334,16],[4866,17,4334,17,"temporaryProof"],[4866,31,4334,31],[4866,33,4334,33],[4867,6,4335,8],[4867,12,4335,14,"_makeTaggedError"],[4867,28,4335,30],[4867,29,4335,31,"auth"],[4867,33,4335,35],[4867,35,4335,37],[4867,77,4335,79],[4867,78,4335,80],[4867,117,4335,119,"response"],[4867,125,4335,127],[4867,126,4335,128],[4868,4,4336,4],[4869,4,4337,4],[4869,11,4337,11,"response"],[4869,19,4337,19],[4870,2,4338,0],[4871,2,4339,0],[4871,8,4339,6,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4871,51,4339,49],[4871,54,4339,52],[4872,4,4340,4],[4872,5,4340,5],[4872,21,4340,21],[4872,22,4340,22],[4872,57,4340,57],[4872,73,4340,73],[4872,74,4340,74],[4873,2,4341,0],[4873,3,4341,1],[4874,2,4342,0],[4874,17,4342,15,"verifyPhoneNumberForExisting"],[4874,45,4342,43,"verifyPhoneNumberForExisting"],[4874,46,4342,44,"auth"],[4874,50,4342,48],[4874,52,4342,50,"request"],[4874,59,4342,57],[4874,61,4342,59],[4875,4,4343,4],[4875,10,4343,10,"apiRequest"],[4875,20,4343,20],[4875,23,4343,20,"Object"],[4875,29,4343,20],[4875,30,4343,20,"assign"],[4875,36,4343,20],[4875,41,4344,11,"request"],[4875,48,4344,18],[4876,6,4345,8,"operation"],[4876,15,4345,17],[4876,17,4345,19],[4877,4,4345,27],[4877,6,4346,5],[4878,4,4347,4],[4878,11,4347,11,"_performSignInRequest"],[4878,32,4347,32],[4878,33,4347,33,"auth"],[4878,37,4347,37],[4878,39,4347,39],[4878,45,4347,45],[4878,46,4347,46],[4878,69,4347,69],[4878,105,4347,105],[4878,106,4347,106],[4878,148,4347,148,"_addTidIfNecessary"],[4878,166,4347,166],[4878,167,4347,167,"auth"],[4878,171,4347,171],[4878,173,4347,173,"apiRequest"],[4878,183,4347,183],[4878,184,4347,184],[4878,186,4347,186,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4878,229,4347,229],[4878,230,4347,230],[4879,2,4348,0],[4881,2,4350,0],[4882,0,4351,0],[4883,0,4352,0],[4884,0,4353,0],[4885,0,4354,0],[4886,0,4355,0],[4887,0,4356,0],[4888,0,4357,0],[4889,0,4358,0],[4890,0,4359,0],[4891,0,4360,0],[4892,0,4361,0],[4893,0,4362,0],[4894,0,4363,0],[4895,0,4364,0],[4896,0,4365,0],[4897,2,4366,0],[4898,0,4367,0],[4899,0,4368,0],[4900,0,4369,0],[4901,0,4370,0],[4902,2,4371,0],[4902,8,4371,6,"PhoneAuthCredential"],[4902,27,4371,25],[4902,36,4371,34,"AuthCredential"],[4902,50,4371,48],[4902,51,4371,49],[4903,4,4372,4,"constructor"],[4903,15,4372,15,"constructor"],[4903,16,4372,16,"params"],[4903,22,4372,22],[4903,24,4372,24],[4904,6,4373,8],[4904,11,4373,13],[4904,12,4373,14],[4904,19,4373,21],[4904,20,4373,22],[4904,44,4373,46],[4904,51,4373,53],[4904,52,4373,54],[4904,76,4373,78],[4904,77,4373,79],[4905,6,4374,8],[4905,10,4374,12],[4905,11,4374,13,"params"],[4905,17,4374,19],[4905,20,4374,22,"params"],[4905,26,4374,28],[4906,4,4375,4],[4907,4,4376,4],[4908,4,4377,4],[4908,11,4377,11,"_fromVerification"],[4908,28,4377,28,"_fromVerification"],[4908,29,4377,29,"verificationId"],[4908,43,4377,43],[4908,45,4377,45,"verificationCode"],[4908,61,4377,61],[4908,63,4377,63],[4909,6,4378,8],[4909,13,4378,15],[4909,17,4378,19,"PhoneAuthCredential"],[4909,36,4378,38],[4909,37,4378,39],[4910,8,4378,41,"verificationId"],[4910,22,4378,55],[4911,8,4378,57,"verificationCode"],[4912,6,4378,74],[4912,7,4378,75],[4912,8,4378,76],[4913,4,4379,4],[4914,4,4380,4],[4915,4,4381,4],[4915,11,4381,11,"_fromTokenResponse"],[4915,29,4381,29,"_fromTokenResponse"],[4915,30,4381,30,"phoneNumber"],[4915,41,4381,41],[4915,43,4381,43,"temporaryProof"],[4915,57,4381,57],[4915,59,4381,59],[4916,6,4382,8],[4916,13,4382,15],[4916,17,4382,19,"PhoneAuthCredential"],[4916,36,4382,38],[4916,37,4382,39],[4917,8,4382,41,"phoneNumber"],[4917,19,4382,52],[4918,8,4382,54,"temporaryProof"],[4919,6,4382,69],[4919,7,4382,70],[4919,8,4382,71],[4920,4,4383,4],[4921,4,4384,4],[4922,4,4385,4,"_getIdTokenResponse"],[4922,23,4385,23,"_getIdTokenResponse"],[4922,24,4385,24,"auth"],[4922,28,4385,28],[4922,30,4385,30],[4923,6,4386,8],[4923,13,4386,15,"signInWithPhoneNumber$1"],[4923,36,4386,38],[4923,37,4386,39,"auth"],[4923,41,4386,43],[4923,43,4386,45],[4923,47,4386,49],[4923,48,4386,50,"_makeVerificationRequest"],[4923,72,4386,74],[4923,73,4386,75],[4923,74,4386,76],[4923,75,4386,77],[4924,4,4387,4],[4925,4,4388,4],[4926,4,4389,4,"_linkToIdToken"],[4926,18,4389,18,"_linkToIdToken"],[4926,19,4389,19,"auth"],[4926,23,4389,23],[4926,25,4389,25,"idToken"],[4926,32,4389,32],[4926,34,4389,34],[4927,6,4390,8],[4927,13,4390,15,"linkWithPhoneNumber$1"],[4927,34,4390,36],[4927,35,4390,37,"auth"],[4927,39,4390,41],[4927,41,4390,41,"Object"],[4927,47,4390,41],[4927,48,4390,41,"assign"],[4927,54,4390,41],[4928,8,4391,12,"idToken"],[4929,6,4391,19],[4929,9,4392,15],[4929,13,4392,19],[4929,14,4392,20,"_makeVerificationRequest"],[4929,38,4392,44],[4929,39,4392,45],[4929,40,4392,46],[4929,41,4393,9],[4929,42,4393,10],[4930,4,4394,4],[4931,4,4395,4],[4932,4,4396,4,"_getReauthenticationResolver"],[4932,32,4396,32,"_getReauthenticationResolver"],[4932,33,4396,33,"auth"],[4932,37,4396,37],[4932,39,4396,39],[4933,6,4397,8],[4933,13,4397,15,"verifyPhoneNumberForExisting"],[4933,41,4397,43],[4933,42,4397,44,"auth"],[4933,46,4397,48],[4933,48,4397,50],[4933,52,4397,54],[4933,53,4397,55,"_makeVerificationRequest"],[4933,77,4397,79],[4933,78,4397,80],[4933,79,4397,81],[4933,80,4397,82],[4934,4,4398,4],[4935,4,4399,4],[4936,4,4400,4,"_makeVerificationRequest"],[4936,28,4400,28,"_makeVerificationRequest"],[4936,29,4400,28],[4936,31,4400,31],[4937,6,4401,8],[4937,12,4401,14],[4938,8,4401,16,"temporaryProof"],[4938,22,4401,30],[4939,8,4401,32,"phoneNumber"],[4939,19,4401,43],[4940,8,4401,45,"verificationId"],[4940,22,4401,59],[4941,8,4401,61,"verificationCode"],[4942,6,4401,78],[4942,7,4401,79],[4942,10,4401,82],[4942,14,4401,86],[4942,15,4401,87,"params"],[4942,21,4401,93],[4943,6,4402,8],[4943,10,4402,12,"temporaryProof"],[4943,24,4402,26],[4943,28,4402,30,"phoneNumber"],[4943,39,4402,41],[4943,41,4402,43],[4944,8,4403,12],[4944,15,4403,19],[4945,10,4403,21,"temporaryProof"],[4945,24,4403,35],[4946,10,4403,37,"phoneNumber"],[4947,8,4403,49],[4947,9,4403,50],[4948,6,4404,8],[4949,6,4405,8],[4949,13,4405,15],[4950,8,4406,12,"sessionInfo"],[4950,19,4406,23],[4950,21,4406,25,"verificationId"],[4950,35,4406,39],[4951,8,4407,12,"code"],[4951,12,4407,16],[4951,14,4407,18,"verificationCode"],[4952,6,4408,8],[4952,7,4408,9],[4953,4,4409,4],[4954,4,4410,4],[4955,4,4411,4,"toJSON"],[4955,10,4411,10,"toJSON"],[4955,11,4411,10],[4955,13,4411,13],[4956,6,4412,8],[4956,12,4412,14,"obj"],[4956,15,4412,17],[4956,18,4412,20],[4957,8,4413,12,"providerId"],[4957,18,4413,22],[4957,20,4413,24],[4957,24,4413,28],[4957,25,4413,29,"providerId"],[4958,6,4414,8],[4958,7,4414,9],[4959,6,4415,8],[4959,10,4415,12],[4959,14,4415,16],[4959,15,4415,17,"params"],[4959,21,4415,23],[4959,22,4415,24,"phoneNumber"],[4959,33,4415,35],[4959,35,4415,37],[4960,8,4416,12,"obj"],[4960,11,4416,15],[4960,12,4416,16,"phoneNumber"],[4960,23,4416,27],[4960,26,4416,30],[4960,30,4416,34],[4960,31,4416,35,"params"],[4960,37,4416,41],[4960,38,4416,42,"phoneNumber"],[4960,49,4416,53],[4961,6,4417,8],[4962,6,4418,8],[4962,10,4418,12],[4962,14,4418,16],[4962,15,4418,17,"params"],[4962,21,4418,23],[4962,22,4418,24,"temporaryProof"],[4962,36,4418,38],[4962,38,4418,40],[4963,8,4419,12,"obj"],[4963,11,4419,15],[4963,12,4419,16,"temporaryProof"],[4963,26,4419,30],[4963,29,4419,33],[4963,33,4419,37],[4963,34,4419,38,"params"],[4963,40,4419,44],[4963,41,4419,45,"temporaryProof"],[4963,55,4419,59],[4964,6,4420,8],[4965,6,4421,8],[4965,10,4421,12],[4965,14,4421,16],[4965,15,4421,17,"params"],[4965,21,4421,23],[4965,22,4421,24,"verificationCode"],[4965,38,4421,40],[4965,40,4421,42],[4966,8,4422,12,"obj"],[4966,11,4422,15],[4966,12,4422,16,"verificationCode"],[4966,28,4422,32],[4966,31,4422,35],[4966,35,4422,39],[4966,36,4422,40,"params"],[4966,42,4422,46],[4966,43,4422,47,"verificationCode"],[4966,59,4422,63],[4967,6,4423,8],[4968,6,4424,8],[4968,10,4424,12],[4968,14,4424,16],[4968,15,4424,17,"params"],[4968,21,4424,23],[4968,22,4424,24,"verificationId"],[4968,36,4424,38],[4968,38,4424,40],[4969,8,4425,12,"obj"],[4969,11,4425,15],[4969,12,4425,16,"verificationId"],[4969,26,4425,30],[4969,29,4425,33],[4969,33,4425,37],[4969,34,4425,38,"params"],[4969,40,4425,44],[4969,41,4425,45,"verificationId"],[4969,55,4425,59],[4970,6,4426,8],[4971,6,4427,8],[4971,13,4427,15,"obj"],[4971,16,4427,18],[4972,4,4428,4],[4973,4,4429,4],[4974,4,4430,4],[4974,11,4430,11,"fromJSON"],[4974,19,4430,19,"fromJSON"],[4974,20,4430,20,"json"],[4974,24,4430,24],[4974,26,4430,26],[4975,6,4431,8],[4975,10,4431,12],[4975,17,4431,19,"json"],[4975,21,4431,23],[4975,26,4431,28],[4975,34,4431,36],[4975,36,4431,38],[4976,8,4432,12,"json"],[4976,12,4432,16],[4976,15,4432,19,"JSON"],[4976,19,4432,23],[4976,20,4432,24,"parse"],[4976,25,4432,29],[4976,26,4432,30,"json"],[4976,30,4432,34],[4976,31,4432,35],[4977,6,4433,8],[4978,6,4434,8],[4978,12,4434,14],[4979,8,4434,16,"verificationId"],[4979,22,4434,30],[4980,8,4434,32,"verificationCode"],[4980,24,4434,48],[4981,8,4434,50,"phoneNumber"],[4981,19,4434,61],[4982,8,4434,63,"temporaryProof"],[4983,6,4434,78],[4983,7,4434,79],[4983,10,4434,82,"json"],[4983,14,4434,86],[4984,6,4435,8],[4984,10,4435,12],[4984,11,4435,13,"verificationCode"],[4984,27,4435,29],[4984,31,4436,12],[4984,32,4436,13,"verificationId"],[4984,46,4436,27],[4984,50,4437,12],[4984,51,4437,13,"phoneNumber"],[4984,62,4437,24],[4984,66,4438,12],[4984,67,4438,13,"temporaryProof"],[4984,81,4438,27],[4984,83,4438,29],[4985,8,4439,12],[4985,15,4439,19],[4985,19,4439,23],[4986,6,4440,8],[4987,6,4441,8],[4987,13,4441,15],[4987,17,4441,19,"PhoneAuthCredential"],[4987,36,4441,38],[4987,37,4441,39],[4988,8,4442,12,"verificationId"],[4988,22,4442,26],[4989,8,4443,12,"verificationCode"],[4989,24,4443,28],[4990,8,4444,12,"phoneNumber"],[4990,19,4444,23],[4991,8,4445,12,"temporaryProof"],[4992,6,4446,8],[4992,7,4446,9],[4992,8,4446,10],[4993,4,4447,4],[4994,2,4448,0],[4996,2,4450,0],[4997,0,4451,0],[4998,0,4452,0],[4999,0,4453,0],[5000,0,4454,0],[5001,0,4455,0],[5002,0,4456,0],[5003,0,4457,0],[5004,0,4458,0],[5005,0,4459,0],[5006,0,4460,0],[5007,0,4461,0],[5008,0,4462,0],[5009,0,4463,0],[5010,0,4464,0],[5011,0,4465,0],[5012,2,4466,0],[5013,0,4467,0],[5014,0,4468,0],[5015,0,4469,0],[5016,0,4470,0],[5017,2,4471,0],[5017,11,4471,9,"parseMode"],[5017,20,4471,18,"parseMode"],[5017,21,4471,19,"mode"],[5017,25,4471,23],[5017,27,4471,25],[5018,4,4472,4],[5018,12,4472,12,"mode"],[5018,16,4472,16],[5019,6,4473,8],[5019,11,4473,13],[5019,25,4473,27],[5020,8,4474,12],[5020,15,4474,19],[5020,30,4474,34],[5020,31,4474,35],[5021,6,4475,8],[5021,11,4475,13],[5021,26,4475,28],[5022,8,4476,12],[5022,15,4476,19],[5022,31,4476,35],[5022,32,4476,36],[5023,6,4477,8],[5023,11,4477,13],[5023,19,4477,21],[5024,8,4478,12],[5024,15,4478,19],[5024,29,4478,33],[5024,30,4478,34],[5025,6,4479,8],[5025,11,4479,13],[5025,24,4479,26],[5026,8,4480,12],[5026,15,4480,19],[5026,29,4480,33],[5026,30,4480,34],[5027,6,4481,8],[5027,11,4481,13],[5027,33,4481,35],[5028,8,4482,12],[5028,15,4482,19],[5028,40,4482,44],[5028,41,4482,45],[5029,6,4483,8],[5029,11,4483,13],[5029,39,4483,41],[5030,8,4484,12],[5030,15,4484,19],[5030,46,4484,50],[5030,47,4484,51],[5031,6,4485,8],[5032,8,4486,12],[5032,15,4486,19],[5032,19,4486,23],[5033,4,4487,4],[5034,2,4488,0],[5035,2,4489,0],[5036,0,4490,0],[5037,0,4491,0],[5038,0,4492,0],[5039,0,4493,0],[5040,2,4494,0],[5040,11,4494,9,"parseDeepLink"],[5040,24,4494,22,"parseDeepLink"],[5040,25,4494,23,"url"],[5040,28,4494,26],[5040,30,4494,28],[5041,4,4495,4],[5041,10,4495,10,"link"],[5041,14,4495,14],[5041,17,4495,17],[5041,21,4495,17,"querystringDecode"],[5041,34,4495,34],[5041,35,4495,34,"querystringDecode"],[5041,52,4495,34],[5041,54,4495,35],[5041,58,4495,35,"extractQuerystring"],[5041,71,4495,53],[5041,72,4495,53,"extractQuerystring"],[5041,90,4495,53],[5041,92,4495,54,"url"],[5041,95,4495,57],[5041,96,4495,58],[5041,97,4495,59],[5041,98,4495,60],[5041,104,4495,66],[5041,105,4495,67],[5042,4,4496,4],[5043,4,4497,4],[5043,10,4497,10,"doubleDeepLink"],[5043,24,4497,24],[5043,27,4497,27,"link"],[5043,31,4497,31],[5043,34,4498,10],[5043,38,4498,10,"querystringDecode"],[5043,51,4498,27],[5043,52,4498,27,"querystringDecode"],[5043,69,4498,27],[5043,71,4498,28],[5043,75,4498,28,"extractQuerystring"],[5043,88,4498,46],[5043,89,4498,46,"extractQuerystring"],[5043,107,4498,46],[5043,109,4498,47,"link"],[5043,113,4498,51],[5043,114,4498,52],[5043,115,4498,53],[5043,116,4498,54],[5043,130,4498,68],[5043,131,4498,69],[5043,134,4499,10],[5043,138,4499,14],[5044,4,4500,4],[5045,4,4501,4],[5045,10,4501,10,"iOSDeepLink"],[5045,21,4501,21],[5045,24,4501,24],[5045,28,4501,24,"querystringDecode"],[5045,41,4501,41],[5045,42,4501,41,"querystringDecode"],[5045,59,4501,41],[5045,61,4501,42],[5045,65,4501,42,"extractQuerystring"],[5045,78,4501,60],[5045,79,4501,60,"extractQuerystring"],[5045,97,4501,60],[5045,99,4501,61,"url"],[5045,102,4501,64],[5045,103,4501,65],[5045,104,4501,66],[5045,105,4501,67],[5045,119,4501,81],[5045,120,4501,82],[5046,4,4502,4],[5046,10,4502,10,"iOSDoubleDeepLink"],[5046,27,4502,27],[5046,30,4502,30,"iOSDeepLink"],[5046,41,4502,41],[5046,44,4503,10],[5046,48,4503,10,"querystringDecode"],[5046,61,4503,27],[5046,62,4503,27,"querystringDecode"],[5046,79,4503,27],[5046,81,4503,28],[5046,85,4503,28,"extractQuerystring"],[5046,98,4503,46],[5046,99,4503,46,"extractQuerystring"],[5046,117,4503,46],[5046,119,4503,47,"iOSDeepLink"],[5046,130,4503,58],[5046,131,4503,59],[5046,132,4503,60],[5046,133,4503,61],[5046,139,4503,67],[5046,140,4503,68],[5046,143,4504,10],[5046,147,4504,14],[5047,4,4505,4],[5047,11,4505,11,"iOSDoubleDeepLink"],[5047,28,4505,28],[5047,32,4505,32,"iOSDeepLink"],[5047,43,4505,43],[5047,47,4505,47,"doubleDeepLink"],[5047,61,4505,61],[5047,65,4505,65,"link"],[5047,69,4505,69],[5047,73,4505,73,"url"],[5047,76,4505,76],[5048,2,4506,0],[5049,2,4507,0],[5050,0,4508,0],[5051,0,4509,0],[5052,0,4510,0],[5053,0,4511,0],[5054,0,4512,0],[5055,2,4513,0],[5055,8,4513,6,"ActionCodeURL"],[5055,21,4513,19],[5055,22,4513,20],[5056,4,4514,4],[5057,0,4515,0],[5058,0,4516,0],[5059,0,4517,0],[5060,0,4518,0],[5061,0,4519,0],[5062,4,4520,4,"constructor"],[5062,15,4520,15,"constructor"],[5062,16,4520,16,"actionLink"],[5062,26,4520,26],[5062,28,4520,28],[5063,6,4521,8],[5063,12,4521,14,"searchParams"],[5063,24,4521,26],[5063,27,4521,29],[5063,31,4521,29,"querystringDecode"],[5063,44,4521,46],[5063,45,4521,46,"querystringDecode"],[5063,62,4521,46],[5063,64,4521,47],[5063,68,4521,47,"extractQuerystring"],[5063,81,4521,65],[5063,82,4521,65,"extractQuerystring"],[5063,100,4521,65],[5063,102,4521,66,"actionLink"],[5063,112,4521,76],[5063,113,4521,77],[5063,114,4521,78],[5064,6,4522,8],[5064,12,4522,14,"apiKey"],[5064,18,4522,20],[5064,21,4522,23,"searchParams"],[5064,33,4522,35],[5064,34,4522,36],[5064,42,4522,44],[5064,43,4522,45],[5064,68,4522,70],[5064,72,4522,74],[5064,76,4522,78],[5065,6,4523,8],[5065,12,4523,14,"code"],[5065,16,4523,18],[5065,19,4523,21,"searchParams"],[5065,31,4523,33],[5065,32,4523,34],[5065,41,4523,43],[5065,42,4523,44],[5065,64,4523,66],[5065,68,4523,70],[5065,72,4523,74],[5066,6,4524,8],[5066,12,4524,14,"operation"],[5066,21,4524,23],[5066,24,4524,26,"parseMode"],[5066,33,4524,35],[5066,34,4524,36,"searchParams"],[5066,46,4524,48],[5066,47,4524,49],[5066,53,4524,55],[5066,54,4524,56],[5066,76,4524,78],[5066,80,4524,82],[5066,84,4524,86],[5066,85,4524,87],[5067,6,4525,8],[5068,6,4526,8,"_assert"],[5068,13,4526,15],[5068,14,4526,16,"apiKey"],[5068,20,4526,22],[5068,24,4526,26,"code"],[5068,28,4526,30],[5068,32,4526,34,"operation"],[5068,41,4526,43],[5068,43,4526,45],[5068,59,4526,61],[5068,60,4526,62],[5068,94,4526,96],[5068,95,4526,97],[5069,6,4527,8],[5069,10,4527,12],[5069,11,4527,13,"apiKey"],[5069,17,4527,19],[5069,20,4527,22,"apiKey"],[5069,26,4527,28],[5070,6,4528,8],[5070,10,4528,12],[5070,11,4528,13,"operation"],[5070,20,4528,22],[5070,23,4528,25,"operation"],[5070,32,4528,34],[5071,6,4529,8],[5071,10,4529,12],[5071,11,4529,13,"code"],[5071,15,4529,17],[5071,18,4529,20,"code"],[5071,22,4529,24],[5072,6,4530,8],[5072,10,4530,12],[5072,11,4530,13,"continueUrl"],[5072,22,4530,24],[5072,25,4530,27,"searchParams"],[5072,37,4530,39],[5072,38,4530,40],[5072,51,4530,53],[5072,52,4530,54],[5072,82,4530,84],[5072,86,4530,88],[5072,90,4530,92],[5073,6,4531,8],[5073,10,4531,12],[5073,11,4531,13,"languageCode"],[5073,23,4531,25],[5073,26,4531,28,"searchParams"],[5073,38,4531,40],[5073,39,4531,41],[5073,45,4531,47],[5073,46,4531,48],[5073,77,4531,79],[5073,81,4531,83],[5073,85,4531,87],[5074,6,4532,8],[5074,10,4532,12],[5074,11,4532,13,"tenantId"],[5074,19,4532,21],[5074,22,4532,24,"searchParams"],[5074,34,4532,36],[5074,35,4532,37],[5074,45,4532,47],[5074,46,4532,48],[5074,73,4532,75],[5074,77,4532,79],[5074,81,4532,83],[5075,4,4533,4],[5076,4,4534,4],[5077,0,4535,0],[5078,0,4536,0],[5079,0,4537,0],[5080,0,4538,0],[5081,0,4539,0],[5082,0,4540,0],[5083,0,4541,0],[5084,0,4542,0],[5085,4,4543,4],[5085,11,4543,11,"parseLink"],[5085,20,4543,20,"parseLink"],[5085,21,4543,21,"link"],[5085,25,4543,25],[5085,27,4543,27],[5086,6,4544,8],[5086,12,4544,14,"actionLink"],[5086,22,4544,24],[5086,25,4544,27,"parseDeepLink"],[5086,38,4544,40],[5086,39,4544,41,"link"],[5086,43,4544,45],[5086,44,4544,46],[5087,6,4545,8],[5087,10,4545,12],[5088,8,4546,12],[5088,15,4546,19],[5088,19,4546,23,"ActionCodeURL"],[5088,32,4546,36],[5088,33,4546,37,"actionLink"],[5088,43,4546,47],[5088,44,4546,48],[5089,6,4547,8],[5089,7,4547,9],[5089,8,4548,8],[5089,14,4548,14],[5090,8,4549,12],[5090,15,4549,19],[5090,19,4549,23],[5091,6,4550,8],[5092,4,4551,4],[5093,2,4552,0],[5094,2,4553,0],[5095,0,4554,0],[5096,0,4555,0],[5097,0,4556,0],[5098,0,4557,0],[5099,0,4558,0],[5100,2,4559,0],[5100,11,4559,9,"parseActionCodeURL"],[5100,29,4559,27,"parseActionCodeURL"],[5100,30,4559,28,"link"],[5100,34,4559,32],[5100,36,4559,34],[5101,4,4560,4],[5101,11,4560,11,"ActionCodeURL"],[5101,24,4560,24],[5101,25,4560,25,"parseLink"],[5101,34,4560,34],[5101,35,4560,35,"link"],[5101,39,4560,39],[5101,40,4560,40],[5102,2,4561,0],[5104,2,4563,0],[5105,0,4564,0],[5106,0,4565,0],[5107,0,4566,0],[5108,0,4567,0],[5109,0,4568,0],[5110,0,4569,0],[5111,0,4570,0],[5112,0,4571,0],[5113,0,4572,0],[5114,0,4573,0],[5115,0,4574,0],[5116,0,4575,0],[5117,0,4576,0],[5118,0,4577,0],[5119,0,4578,0],[5120,2,4579,0],[5121,0,4580,0],[5122,0,4581,0],[5123,0,4582,0],[5124,0,4583,0],[5125,2,4584,0],[5125,8,4584,6,"EmailAuthProvider"],[5125,25,4584,23],[5125,26,4584,24],[5126,4,4585,4,"constructor"],[5126,15,4585,15,"constructor"],[5126,16,4585,15],[5126,18,4585,18],[5127,6,4586,8],[5128,0,4587,0],[5129,0,4588,0],[5130,6,4589,8],[5130,10,4589,12],[5130,11,4589,13,"providerId"],[5130,21,4589,23],[5130,24,4589,26,"EmailAuthProvider"],[5130,41,4589,43],[5130,42,4589,44,"PROVIDER_ID"],[5130,53,4589,55],[5131,4,4590,4],[5132,4,4591,4],[5133,0,4592,0],[5134,0,4593,0],[5135,0,4594,0],[5136,0,4595,0],[5137,0,4596,0],[5138,0,4597,0],[5139,0,4598,0],[5140,0,4599,0],[5141,0,4600,0],[5142,0,4601,0],[5143,0,4602,0],[5144,0,4603,0],[5145,0,4604,0],[5146,0,4605,0],[5147,0,4606,0],[5148,0,4607,0],[5149,0,4608,0],[5150,4,4609,4],[5150,11,4609,11,"credential"],[5150,21,4609,21,"credential"],[5150,22,4609,22,"email"],[5150,27,4609,27],[5150,29,4609,29,"password"],[5150,37,4609,37],[5150,39,4609,39],[5151,6,4610,8],[5151,13,4610,15,"EmailAuthCredential"],[5151,32,4610,34],[5151,33,4610,35,"_fromEmailAndPassword"],[5151,54,4610,56],[5151,55,4610,57,"email"],[5151,60,4610,62],[5151,62,4610,64,"password"],[5151,70,4610,72],[5151,71,4610,73],[5152,4,4611,4],[5153,4,4612,4],[5154,0,4613,0],[5155,0,4614,0],[5156,0,4615,0],[5157,0,4616,0],[5158,0,4617,0],[5159,0,4618,0],[5160,0,4619,0],[5161,0,4620,0],[5162,0,4621,0],[5163,0,4622,0],[5164,0,4623,0],[5165,0,4624,0],[5166,0,4625,0],[5167,0,4626,0],[5168,0,4627,0],[5169,0,4628,0],[5170,0,4629,0],[5171,0,4630,0],[5172,0,4631,0],[5173,0,4632,0],[5174,0,4633,0],[5175,4,4634,4],[5175,11,4634,11,"credentialWithLink"],[5175,29,4634,29,"credentialWithLink"],[5175,30,4634,30,"email"],[5175,35,4634,35],[5175,37,4634,37,"emailLink"],[5175,46,4634,46],[5175,48,4634,48],[5176,6,4635,8],[5176,12,4635,14,"actionCodeUrl"],[5176,25,4635,27],[5176,28,4635,30,"ActionCodeURL"],[5176,41,4635,43],[5176,42,4635,44,"parseLink"],[5176,51,4635,53],[5176,52,4635,54,"emailLink"],[5176,61,4635,63],[5176,62,4635,64],[5177,6,4636,8,"_assert"],[5177,13,4636,15],[5177,14,4636,16,"actionCodeUrl"],[5177,27,4636,29],[5177,29,4636,31],[5177,45,4636,47],[5177,46,4636,48],[5177,80,4636,82],[5177,81,4636,83],[5178,6,4637,8],[5178,13,4637,15,"EmailAuthCredential"],[5178,32,4637,34],[5178,33,4637,35,"_fromEmailAndCode"],[5178,50,4637,52],[5178,51,4637,53,"email"],[5178,56,4637,58],[5178,58,4637,60,"actionCodeUrl"],[5178,71,4637,73],[5178,72,4637,74,"code"],[5178,76,4637,78],[5178,78,4637,80,"actionCodeUrl"],[5178,91,4637,93],[5178,92,4637,94,"tenantId"],[5178,100,4637,102],[5178,101,4637,103],[5179,4,4638,4],[5180,2,4639,0],[5181,2,4640,0],[5182,0,4641,0],[5183,0,4642,0],[5184,2,4643,0,"EmailAuthProvider"],[5184,19,4643,17],[5184,20,4643,18,"PROVIDER_ID"],[5184,31,4643,29],[5184,34,4643,32],[5184,44,4643,42],[5184,45,4643,43],[5185,2,4644,0],[5186,0,4645,0],[5187,0,4646,0],[5188,2,4647,0,"EmailAuthProvider"],[5188,19,4647,17],[5188,20,4647,18,"EMAIL_PASSWORD_SIGN_IN_METHOD"],[5188,49,4647,47],[5188,52,4647,50],[5188,62,4647,60],[5188,63,4647,61],[5189,2,4648,0],[5190,0,4649,0],[5191,0,4650,0],[5192,2,4651,0,"EmailAuthProvider"],[5192,19,4651,17],[5192,20,4651,18,"EMAIL_LINK_SIGN_IN_METHOD"],[5192,45,4651,43],[5192,48,4651,46],[5192,59,4651,57],[5192,60,4651,58],[5194,2,4653,0],[5195,0,4654,0],[5196,0,4655,0],[5197,0,4656,0],[5198,0,4657,0],[5199,0,4658,0],[5200,0,4659,0],[5201,0,4660,0],[5202,0,4661,0],[5203,0,4662,0],[5204,0,4663,0],[5205,0,4664,0],[5206,0,4665,0],[5207,0,4666,0],[5208,0,4667,0],[5209,0,4668,0],[5210,2,4669,0],[5211,0,4670,0],[5212,0,4671,0],[5213,0,4672,0],[5214,0,4673,0],[5215,0,4674,0],[5216,0,4675,0],[5217,2,4676,0],[5217,8,4676,6,"FederatedAuthProvider"],[5217,29,4676,27],[5217,30,4676,28],[5218,4,4677,4],[5219,0,4678,0],[5220,0,4679,0],[5221,0,4680,0],[5222,0,4681,0],[5223,4,4682,4,"constructor"],[5223,15,4682,15,"constructor"],[5223,16,4682,16,"providerId"],[5223,26,4682,26],[5223,28,4682,28],[5224,6,4683,8],[5224,10,4683,12],[5224,11,4683,13,"providerId"],[5224,21,4683,23],[5224,24,4683,26,"providerId"],[5224,34,4683,36],[5225,6,4684,8],[5226,6,4685,8],[5226,10,4685,12],[5226,11,4685,13,"defaultLanguageCode"],[5226,30,4685,32],[5226,33,4685,35],[5226,37,4685,39],[5227,6,4686,8],[5228,6,4687,8],[5228,10,4687,12],[5228,11,4687,13,"customParameters"],[5228,27,4687,29],[5228,30,4687,32],[5228,31,4687,33],[5228,32,4687,34],[5229,4,4688,4],[5230,4,4689,4],[5231,0,4690,0],[5232,0,4691,0],[5233,0,4692,0],[5234,0,4693,0],[5235,4,4694,4,"setDefaultLanguage"],[5235,22,4694,22,"setDefaultLanguage"],[5235,23,4694,23,"languageCode"],[5235,35,4694,35],[5235,37,4694,37],[5236,6,4695,8],[5236,10,4695,12],[5236,11,4695,13,"defaultLanguageCode"],[5236,30,4695,32],[5236,33,4695,35,"languageCode"],[5236,45,4695,47],[5237,4,4696,4],[5238,4,4697,4],[5239,0,4698,0],[5240,0,4699,0],[5241,0,4700,0],[5242,0,4701,0],[5243,0,4702,0],[5244,0,4703,0],[5245,0,4704,0],[5246,0,4705,0],[5247,0,4706,0],[5248,4,4707,4,"setCustomParameters"],[5248,23,4707,23,"setCustomParameters"],[5248,24,4707,24,"customOAuthParameters"],[5248,45,4707,45],[5248,47,4707,47],[5249,6,4708,8],[5249,10,4708,12],[5249,11,4708,13,"customParameters"],[5249,27,4708,29],[5249,30,4708,32,"customOAuthParameters"],[5249,51,4708,53],[5250,6,4709,8],[5250,13,4709,15],[5250,17,4709,19],[5251,4,4710,4],[5252,4,4711,4],[5253,0,4712,0],[5254,0,4713,0],[5255,4,4714,4,"getCustomParameters"],[5255,23,4714,23,"getCustomParameters"],[5255,24,4714,23],[5255,26,4714,26],[5256,6,4715,8],[5256,13,4715,15],[5256,17,4715,19],[5256,18,4715,20,"customParameters"],[5256,34,4715,36],[5257,4,4716,4],[5258,2,4717,0],[5260,2,4719,0],[5261,0,4720,0],[5262,0,4721,0],[5263,0,4722,0],[5264,0,4723,0],[5265,0,4724,0],[5266,0,4725,0],[5267,0,4726,0],[5268,0,4727,0],[5269,0,4728,0],[5270,0,4729,0],[5271,0,4730,0],[5272,0,4731,0],[5273,0,4732,0],[5274,0,4733,0],[5275,0,4734,0],[5276,2,4735,0],[5277,0,4736,0],[5278,0,4737,0],[5279,0,4738,0],[5280,0,4739,0],[5281,0,4740,0],[5282,2,4741,0],[5282,8,4741,6,"BaseOAuthProvider"],[5282,25,4741,23],[5282,34,4741,32,"FederatedAuthProvider"],[5282,55,4741,53],[5282,56,4741,54],[5283,4,4742,4,"constructor"],[5283,15,4742,15,"constructor"],[5283,16,4742,15],[5283,18,4742,18],[5284,6,4743,8],[5284,11,4743,13],[5284,12,4743,14],[5284,15,4743,17,"arguments"],[5284,24,4743,26],[5284,25,4743,27],[5285,6,4744,8],[5286,6,4745,8],[5286,10,4745,12],[5286,11,4745,13,"scopes"],[5286,17,4745,19],[5286,20,4745,22],[5286,22,4745,24],[5287,4,4746,4],[5288,4,4747,4],[5289,0,4748,0],[5290,0,4749,0],[5291,0,4750,0],[5292,0,4751,0],[5293,4,4752,4,"addScope"],[5293,12,4752,12,"addScope"],[5293,13,4752,13,"scope"],[5293,18,4752,18],[5293,20,4752,20],[5294,6,4753,8],[5295,6,4754,8],[5295,10,4754,12],[5295,11,4754,13],[5295,15,4754,17],[5295,16,4754,18,"scopes"],[5295,22,4754,24],[5295,23,4754,25,"includes"],[5295,31,4754,33],[5295,32,4754,34,"scope"],[5295,37,4754,39],[5295,38,4754,40],[5295,40,4754,42],[5296,8,4755,12],[5296,12,4755,16],[5296,13,4755,17,"scopes"],[5296,19,4755,23],[5296,20,4755,24,"push"],[5296,24,4755,28],[5296,25,4755,29,"scope"],[5296,30,4755,34],[5296,31,4755,35],[5297,6,4756,8],[5298,6,4757,8],[5298,13,4757,15],[5298,17,4757,19],[5299,4,4758,4],[5300,4,4759,4],[5301,0,4760,0],[5302,0,4761,0],[5303,4,4762,4,"getScopes"],[5303,13,4762,13,"getScopes"],[5303,14,4762,13],[5303,16,4762,16],[5304,6,4763,8],[5304,13,4763,15],[5304,14,4763,16],[5304,17,4763,19],[5304,21,4763,23],[5304,22,4763,24,"scopes"],[5304,28,4763,30],[5304,29,4763,31],[5305,4,4764,4],[5306,2,4765,0],[5307,2,4766,0],[5308,0,4767,0],[5309,0,4768,0],[5310,0,4769,0],[5311,0,4770,0],[5312,0,4771,0],[5313,0,4772,0],[5314,0,4773,0],[5315,0,4774,0],[5316,0,4775,0],[5317,0,4776,0],[5318,0,4777,0],[5319,0,4778,0],[5320,0,4779,0],[5321,0,4780,0],[5322,0,4781,0],[5323,0,4782,0],[5324,0,4783,0],[5325,0,4784,0],[5326,0,4785,0],[5327,0,4786,0],[5328,0,4787,0],[5329,0,4788,0],[5330,0,4789,0],[5331,0,4790,0],[5332,0,4791,0],[5333,0,4792,0],[5334,0,4793,0],[5335,0,4794,0],[5336,0,4795,0],[5337,0,4796,0],[5338,0,4797,0],[5339,0,4798,0],[5340,0,4799,0],[5341,0,4800,0],[5342,0,4801,0],[5343,0,4802,0],[5344,0,4803,0],[5345,0,4804,0],[5346,0,4805,0],[5347,2,4806,0],[5347,8,4806,6,"OAuthProvider"],[5347,21,4806,19],[5347,30,4806,28,"BaseOAuthProvider"],[5347,47,4806,45],[5347,48,4806,46],[5348,4,4807,4],[5349,0,4808,0],[5350,0,4809,0],[5351,0,4810,0],[5352,4,4811,4],[5352,11,4811,11,"credentialFromJSON"],[5352,29,4811,29,"credentialFromJSON"],[5352,30,4811,30,"json"],[5352,34,4811,34],[5352,36,4811,36],[5353,6,4812,8],[5353,12,4812,14,"obj"],[5353,15,4812,17],[5353,18,4812,20],[5353,25,4812,27,"json"],[5353,29,4812,31],[5353,34,4812,36],[5353,42,4812,44],[5353,45,4812,47,"JSON"],[5353,49,4812,51],[5353,50,4812,52,"parse"],[5353,55,4812,57],[5353,56,4812,58,"json"],[5353,60,4812,62],[5353,61,4812,63],[5353,64,4812,66,"json"],[5353,68,4812,70],[5354,6,4813,8,"_assert"],[5354,13,4813,15],[5354,14,4813,16],[5354,26,4813,28],[5354,30,4813,32,"obj"],[5354,33,4813,35],[5354,37,4813,39],[5354,51,4813,53],[5354,55,4813,57,"obj"],[5354,58,4813,60],[5354,60,4813,62],[5354,76,4813,78],[5354,77,4813,79],[5354,111,4813,113],[5354,112,4813,114],[5355,6,4814,8],[5355,13,4814,15,"OAuthCredential"],[5355,28,4814,30],[5355,29,4814,31,"_fromParams"],[5355,40,4814,42],[5355,41,4814,43,"obj"],[5355,44,4814,46],[5355,45,4814,47],[5356,4,4815,4],[5357,4,4816,4],[5358,0,4817,0],[5359,0,4818,0],[5360,0,4819,0],[5361,0,4820,0],[5362,0,4821,0],[5363,0,4822,0],[5364,0,4823,0],[5365,0,4824,0],[5366,0,4825,0],[5367,0,4826,0],[5368,0,4827,0],[5369,0,4828,0],[5370,0,4829,0],[5371,0,4830,0],[5372,0,4831,0],[5373,0,4832,0],[5374,0,4833,0],[5375,0,4834,0],[5376,0,4835,0],[5377,0,4836,0],[5378,4,4837,4,"credential"],[5378,14,4837,14,"credential"],[5378,15,4837,15,"params"],[5378,21,4837,21],[5378,23,4837,23],[5379,6,4838,8],[5379,13,4838,15],[5379,17,4838,19],[5379,18,4838,20,"_credential"],[5379,29,4838,31],[5379,30,4838,31,"Object"],[5379,36,4838,31],[5379,37,4838,31,"assign"],[5379,43,4838,31],[5379,48,4838,37,"params"],[5379,54,4838,43],[5380,8,4838,45,"nonce"],[5380,13,4838,50],[5380,15,4838,52,"params"],[5380,21,4838,58],[5380,22,4838,59,"rawNonce"],[5381,6,4838,67],[5381,8,4838,69],[5381,9,4838,70],[5382,4,4839,4],[5383,4,4840,4],[5384,4,4841,4,"_credential"],[5384,15,4841,15,"_credential"],[5384,16,4841,16,"params"],[5384,22,4841,22],[5384,24,4841,24],[5385,6,4842,8,"_assert"],[5385,13,4842,15],[5385,14,4842,16,"params"],[5385,20,4842,22],[5385,21,4842,23,"idToken"],[5385,28,4842,30],[5385,32,4842,34,"params"],[5385,38,4842,40],[5385,39,4842,41,"accessToken"],[5385,50,4842,52],[5385,52,4842,54],[5385,68,4842,70],[5385,69,4842,71],[5385,103,4842,105],[5385,104,4842,106],[5386,6,4843,8],[5387,6,4844,8],[5387,13,4844,15,"OAuthCredential"],[5387,28,4844,30],[5387,29,4844,31,"_fromParams"],[5387,40,4844,42],[5387,41,4844,42,"Object"],[5387,47,4844,42],[5387,48,4844,42,"assign"],[5387,54,4844,42],[5387,59,4845,15,"params"],[5387,65,4845,21],[5388,8,4846,12,"providerId"],[5388,18,4846,22],[5388,20,4846,24],[5388,24,4846,28],[5388,25,4846,29,"providerId"],[5388,35,4846,39],[5389,8,4847,12,"signInMethod"],[5389,20,4847,24],[5389,22,4847,26],[5389,26,4847,30],[5389,27,4847,31,"providerId"],[5390,6,4847,41],[5390,8,4848,9],[5390,9,4848,10],[5391,4,4849,4],[5392,4,4850,4],[5393,0,4851,0],[5394,0,4852,0],[5395,0,4853,0],[5396,0,4854,0],[5397,4,4855,4],[5397,11,4855,11,"credentialFromResult"],[5397,31,4855,31,"credentialFromResult"],[5397,32,4855,32,"userCredential"],[5397,46,4855,46],[5397,48,4855,48],[5398,6,4856,8],[5398,13,4856,15,"OAuthProvider"],[5398,26,4856,28],[5398,27,4856,29,"oauthCredentialFromTaggedObject"],[5398,58,4856,60],[5398,59,4856,61,"userCredential"],[5398,73,4856,75],[5398,74,4856,76],[5399,4,4857,4],[5400,4,4858,4],[5401,0,4859,0],[5402,0,4860,0],[5403,0,4861,0],[5404,0,4862,0],[5405,0,4863,0],[5406,4,4864,4],[5406,11,4864,11,"credentialFromError"],[5406,30,4864,30,"credentialFromError"],[5406,31,4864,31,"error"],[5406,36,4864,36],[5406,38,4864,38],[5407,6,4865,8],[5407,13,4865,15,"OAuthProvider"],[5407,26,4865,28],[5407,27,4865,29,"oauthCredentialFromTaggedObject"],[5407,58,4865,60],[5407,59,4865,62,"error"],[5407,64,4865,67],[5407,65,4865,68,"customData"],[5407,75,4865,78],[5407,79,4865,82],[5407,80,4865,83],[5407,81,4865,85],[5407,82,4865,86],[5408,4,4866,4],[5409,4,4867,4],[5409,11,4867,11,"oauthCredentialFromTaggedObject"],[5409,42,4867,42,"oauthCredentialFromTaggedObject"],[5409,43,4867,43],[5410,6,4867,45,"_tokenResponse"],[5410,20,4867,59],[5410,22,4867,61,"tokenResponse"],[5411,4,4867,75],[5411,5,4867,76],[5411,7,4867,78],[5412,6,4868,8],[5412,10,4868,12],[5412,11,4868,13,"tokenResponse"],[5412,24,4868,26],[5412,26,4868,28],[5413,8,4869,12],[5413,15,4869,19],[5413,19,4869,23],[5414,6,4870,8],[5415,6,4871,8],[5415,12,4871,14],[5416,8,4871,16,"oauthIdToken"],[5416,20,4871,28],[5417,8,4871,30,"oauthAccessToken"],[5417,24,4871,46],[5418,8,4871,48,"oauthTokenSecret"],[5418,24,4871,64],[5419,8,4871,66,"pendingToken"],[5419,20,4871,78],[5420,8,4871,80,"nonce"],[5420,13,4871,85],[5421,8,4871,87,"providerId"],[5422,6,4871,98],[5422,7,4871,99],[5422,10,4871,102,"tokenResponse"],[5422,23,4871,115],[5423,6,4872,8],[5423,10,4872,12],[5423,11,4872,13,"oauthAccessToken"],[5423,27,4872,29],[5423,31,4873,12],[5423,32,4873,13,"oauthTokenSecret"],[5423,48,4873,29],[5423,52,4874,12],[5423,53,4874,13,"oauthIdToken"],[5423,65,4874,25],[5423,69,4875,12],[5423,70,4875,13,"pendingToken"],[5423,82,4875,25],[5423,84,4875,27],[5424,8,4876,12],[5424,15,4876,19],[5424,19,4876,23],[5425,6,4877,8],[5426,6,4878,8],[5426,10,4878,12],[5426,11,4878,13,"providerId"],[5426,21,4878,23],[5426,23,4878,25],[5427,8,4879,12],[5427,15,4879,19],[5427,19,4879,23],[5428,6,4880,8],[5429,6,4881,8],[5429,10,4881,12],[5430,8,4882,12],[5430,15,4882,19],[5430,19,4882,23,"OAuthProvider"],[5430,32,4882,36],[5430,33,4882,37,"providerId"],[5430,43,4882,47],[5430,44,4882,48],[5430,45,4882,49,"_credential"],[5430,56,4882,60],[5430,57,4882,61],[5431,10,4883,16,"idToken"],[5431,17,4883,23],[5431,19,4883,25,"oauthIdToken"],[5431,31,4883,37],[5432,10,4884,16,"accessToken"],[5432,21,4884,27],[5432,23,4884,29,"oauthAccessToken"],[5432,39,4884,45],[5433,10,4885,16,"nonce"],[5433,15,4885,21],[5434,10,4886,16,"pendingToken"],[5435,8,4887,12],[5435,9,4887,13],[5435,10,4887,14],[5436,6,4888,8],[5436,7,4888,9],[5436,8,4889,8],[5436,15,4889,15,"e"],[5436,16,4889,16],[5436,18,4889,18],[5437,8,4890,12],[5437,15,4890,19],[5437,19,4890,23],[5438,6,4891,8],[5439,4,4892,4],[5440,2,4893,0],[5442,2,4895,0],[5443,0,4896,0],[5444,0,4897,0],[5445,0,4898,0],[5446,0,4899,0],[5447,0,4900,0],[5448,0,4901,0],[5449,0,4902,0],[5450,0,4903,0],[5451,0,4904,0],[5452,0,4905,0],[5453,0,4906,0],[5454,0,4907,0],[5455,0,4908,0],[5456,0,4909,0],[5457,0,4910,0],[5458,2,4911,0],[5459,0,4912,0],[5460,0,4913,0],[5461,0,4914,0],[5462,0,4915,0],[5463,0,4916,0],[5464,0,4917,0],[5465,0,4918,0],[5466,0,4919,0],[5467,0,4920,0],[5468,0,4921,0],[5469,0,4922,0],[5470,0,4923,0],[5471,0,4924,0],[5472,0,4925,0],[5473,0,4926,0],[5474,0,4927,0],[5475,0,4928,0],[5476,0,4929,0],[5477,0,4930,0],[5478,0,4931,0],[5479,0,4932,0],[5480,0,4933,0],[5481,0,4934,0],[5482,0,4935,0],[5483,0,4936,0],[5484,0,4937,0],[5485,0,4938,0],[5486,0,4939,0],[5487,0,4940,0],[5488,0,4941,0],[5489,0,4942,0],[5490,0,4943,0],[5491,0,4944,0],[5492,0,4945,0],[5493,0,4946,0],[5494,0,4947,0],[5495,0,4948,0],[5496,0,4949,0],[5497,2,4950,0],[5497,8,4950,6,"FacebookAuthProvider"],[5497,28,4950,26],[5497,37,4950,35,"BaseOAuthProvider"],[5497,54,4950,52],[5497,55,4950,53],[5498,4,4951,4,"constructor"],[5498,15,4951,15,"constructor"],[5498,16,4951,15],[5498,18,4951,18],[5499,6,4952,8],[5499,11,4952,13],[5499,12,4952,14],[5499,26,4952,28],[5499,27,4952,29],[5499,52,4952,54],[5499,53,4952,55],[5500,4,4953,4],[5501,4,4954,4],[5502,0,4955,0],[5503,0,4956,0],[5504,0,4957,0],[5505,0,4958,0],[5506,0,4959,0],[5507,0,4960,0],[5508,0,4961,0],[5509,0,4962,0],[5510,0,4963,0],[5511,0,4964,0],[5512,0,4965,0],[5513,4,4966,4],[5513,11,4966,11,"credential"],[5513,21,4966,21,"credential"],[5513,22,4966,22,"accessToken"],[5513,33,4966,33],[5513,35,4966,35],[5514,6,4967,8],[5514,13,4967,15,"OAuthCredential"],[5514,28,4967,30],[5514,29,4967,31,"_fromParams"],[5514,40,4967,42],[5514,41,4967,43],[5515,8,4968,12,"providerId"],[5515,18,4968,22],[5515,20,4968,24,"FacebookAuthProvider"],[5515,40,4968,44],[5515,41,4968,45,"PROVIDER_ID"],[5515,52,4968,56],[5516,8,4969,12,"signInMethod"],[5516,20,4969,24],[5516,22,4969,26,"FacebookAuthProvider"],[5516,42,4969,46],[5516,43,4969,47,"FACEBOOK_SIGN_IN_METHOD"],[5516,66,4969,70],[5517,8,4970,12,"accessToken"],[5518,6,4971,8],[5518,7,4971,9],[5518,8,4971,10],[5519,4,4972,4],[5520,4,4973,4],[5521,0,4974,0],[5522,0,4975,0],[5523,0,4976,0],[5524,0,4977,0],[5525,4,4978,4],[5525,11,4978,11,"credentialFromResult"],[5525,31,4978,31,"credentialFromResult"],[5525,32,4978,32,"userCredential"],[5525,46,4978,46],[5525,48,4978,48],[5526,6,4979,8],[5526,13,4979,15,"FacebookAuthProvider"],[5526,33,4979,35],[5526,34,4979,36,"credentialFromTaggedObject"],[5526,60,4979,62],[5526,61,4979,63,"userCredential"],[5526,75,4979,77],[5526,76,4979,78],[5527,4,4980,4],[5528,4,4981,4],[5529,0,4982,0],[5530,0,4983,0],[5531,0,4984,0],[5532,0,4985,0],[5533,0,4986,0],[5534,4,4987,4],[5534,11,4987,11,"credentialFromError"],[5534,30,4987,30,"credentialFromError"],[5534,31,4987,31,"error"],[5534,36,4987,36],[5534,38,4987,38],[5535,6,4988,8],[5535,13,4988,15,"FacebookAuthProvider"],[5535,33,4988,35],[5535,34,4988,36,"credentialFromTaggedObject"],[5535,60,4988,62],[5535,61,4988,64,"error"],[5535,66,4988,69],[5535,67,4988,70,"customData"],[5535,77,4988,80],[5535,81,4988,84],[5535,82,4988,85],[5535,83,4988,87],[5535,84,4988,88],[5536,4,4989,4],[5537,4,4990,4],[5537,11,4990,11,"credentialFromTaggedObject"],[5537,37,4990,37,"credentialFromTaggedObject"],[5537,38,4990,38],[5538,6,4990,40,"_tokenResponse"],[5538,20,4990,54],[5538,22,4990,56,"tokenResponse"],[5539,4,4990,70],[5539,5,4990,71],[5539,7,4990,73],[5540,6,4991,8],[5540,10,4991,12],[5540,11,4991,13,"tokenResponse"],[5540,24,4991,26],[5540,28,4991,30],[5540,30,4991,32],[5540,48,4991,50],[5540,52,4991,54,"tokenResponse"],[5540,65,4991,67],[5540,66,4991,68],[5540,68,4991,70],[5541,8,4992,12],[5541,15,4992,19],[5541,19,4992,23],[5542,6,4993,8],[5543,6,4994,8],[5543,10,4994,12],[5543,11,4994,13,"tokenResponse"],[5543,24,4994,26],[5543,25,4994,27,"oauthAccessToken"],[5543,41,4994,43],[5543,43,4994,45],[5544,8,4995,12],[5544,15,4995,19],[5544,19,4995,23],[5545,6,4996,8],[5546,6,4997,8],[5546,10,4997,12],[5547,8,4998,12],[5547,15,4998,19,"FacebookAuthProvider"],[5547,35,4998,39],[5547,36,4998,40,"credential"],[5547,46,4998,50],[5547,47,4998,51,"tokenResponse"],[5547,60,4998,64],[5547,61,4998,65,"oauthAccessToken"],[5547,77,4998,81],[5547,78,4998,82],[5548,6,4999,8],[5548,7,4999,9],[5548,8,5000,8],[5548,14,5000,14],[5549,8,5001,12],[5549,15,5001,19],[5549,19,5001,23],[5550,6,5002,8],[5551,4,5003,4],[5552,2,5004,0],[5553,2,5005,0],[5554,2,5006,0,"FacebookAuthProvider"],[5554,22,5006,20],[5554,23,5006,21,"FACEBOOK_SIGN_IN_METHOD"],[5554,46,5006,44],[5554,49,5006,47],[5554,63,5006,61],[5554,64,5006,62],[5555,2,5007,0],[5556,2,5008,0,"FacebookAuthProvider"],[5556,22,5008,20],[5556,23,5008,21,"PROVIDER_ID"],[5556,34,5008,32],[5556,37,5008,35],[5556,51,5008,49],[5556,52,5008,50],[5558,2,5010,0],[5559,0,5011,0],[5560,0,5012,0],[5561,0,5013,0],[5562,0,5014,0],[5563,0,5015,0],[5564,0,5016,0],[5565,0,5017,0],[5566,0,5018,0],[5567,0,5019,0],[5568,0,5020,0],[5569,0,5021,0],[5570,0,5022,0],[5571,0,5023,0],[5572,0,5024,0],[5573,0,5025,0],[5574,2,5026,0],[5575,0,5027,0],[5576,0,5028,0],[5577,0,5029,0],[5578,0,5030,0],[5579,0,5031,0],[5580,0,5032,0],[5581,0,5033,0],[5582,0,5034,0],[5583,0,5035,0],[5584,0,5036,0],[5585,0,5037,0],[5586,0,5038,0],[5587,0,5039,0],[5588,0,5040,0],[5589,0,5041,0],[5590,0,5042,0],[5591,0,5043,0],[5592,0,5044,0],[5593,0,5045,0],[5594,0,5046,0],[5595,0,5047,0],[5596,0,5048,0],[5597,0,5049,0],[5598,0,5050,0],[5599,0,5051,0],[5600,0,5052,0],[5601,0,5053,0],[5602,0,5054,0],[5603,0,5055,0],[5604,0,5056,0],[5605,0,5057,0],[5606,0,5058,0],[5607,0,5059,0],[5608,0,5060,0],[5609,0,5061,0],[5610,0,5062,0],[5611,0,5063,0],[5612,0,5064,0],[5613,0,5065,0],[5614,0,5066,0],[5615,2,5067,0],[5615,8,5067,6,"GoogleAuthProvider"],[5615,26,5067,24],[5615,35,5067,33,"BaseOAuthProvider"],[5615,52,5067,50],[5615,53,5067,51],[5616,4,5068,4,"constructor"],[5616,15,5068,15,"constructor"],[5616,16,5068,15],[5616,18,5068,18],[5617,6,5069,8],[5617,11,5069,13],[5617,12,5069,14],[5617,24,5069,26],[5617,25,5069,27],[5617,48,5069,50],[5617,49,5069,51],[5618,6,5070,8],[5618,10,5070,12],[5618,11,5070,13,"addScope"],[5618,19,5070,21],[5618,20,5070,22],[5618,29,5070,31],[5618,30,5070,32],[5619,4,5071,4],[5620,4,5072,4],[5621,0,5073,0],[5622,0,5074,0],[5623,0,5075,0],[5624,0,5076,0],[5625,0,5077,0],[5626,0,5078,0],[5627,0,5079,0],[5628,0,5080,0],[5629,0,5081,0],[5630,0,5082,0],[5631,0,5083,0],[5632,0,5084,0],[5633,4,5085,4],[5633,11,5085,11,"credential"],[5633,21,5085,21,"credential"],[5633,22,5085,22,"idToken"],[5633,29,5085,29],[5633,31,5085,31,"accessToken"],[5633,42,5085,42],[5633,44,5085,44],[5634,6,5086,8],[5634,13,5086,15,"OAuthCredential"],[5634,28,5086,30],[5634,29,5086,31,"_fromParams"],[5634,40,5086,42],[5634,41,5086,43],[5635,8,5087,12,"providerId"],[5635,18,5087,22],[5635,20,5087,24,"GoogleAuthProvider"],[5635,38,5087,42],[5635,39,5087,43,"PROVIDER_ID"],[5635,50,5087,54],[5636,8,5088,12,"signInMethod"],[5636,20,5088,24],[5636,22,5088,26,"GoogleAuthProvider"],[5636,40,5088,44],[5636,41,5088,45,"GOOGLE_SIGN_IN_METHOD"],[5636,62,5088,66],[5637,8,5089,12,"idToken"],[5637,15,5089,19],[5638,8,5090,12,"accessToken"],[5639,6,5091,8],[5639,7,5091,9],[5639,8,5091,10],[5640,4,5092,4],[5641,4,5093,4],[5642,0,5094,0],[5643,0,5095,0],[5644,0,5096,0],[5645,0,5097,0],[5646,4,5098,4],[5646,11,5098,11,"credentialFromResult"],[5646,31,5098,31,"credentialFromResult"],[5646,32,5098,32,"userCredential"],[5646,46,5098,46],[5646,48,5098,48],[5647,6,5099,8],[5647,13,5099,15,"GoogleAuthProvider"],[5647,31,5099,33],[5647,32,5099,34,"credentialFromTaggedObject"],[5647,58,5099,60],[5647,59,5099,61,"userCredential"],[5647,73,5099,75],[5647,74,5099,76],[5648,4,5100,4],[5649,4,5101,4],[5650,0,5102,0],[5651,0,5103,0],[5652,0,5104,0],[5653,0,5105,0],[5654,0,5106,0],[5655,4,5107,4],[5655,11,5107,11,"credentialFromError"],[5655,30,5107,30,"credentialFromError"],[5655,31,5107,31,"error"],[5655,36,5107,36],[5655,38,5107,38],[5656,6,5108,8],[5656,13,5108,15,"GoogleAuthProvider"],[5656,31,5108,33],[5656,32,5108,34,"credentialFromTaggedObject"],[5656,58,5108,60],[5656,59,5108,62,"error"],[5656,64,5108,67],[5656,65,5108,68,"customData"],[5656,75,5108,78],[5656,79,5108,82],[5656,80,5108,83],[5656,81,5108,85],[5656,82,5108,86],[5657,4,5109,4],[5658,4,5110,4],[5658,11,5110,11,"credentialFromTaggedObject"],[5658,37,5110,37,"credentialFromTaggedObject"],[5658,38,5110,38],[5659,6,5110,40,"_tokenResponse"],[5659,20,5110,54],[5659,22,5110,56,"tokenResponse"],[5660,4,5110,70],[5660,5,5110,71],[5660,7,5110,73],[5661,6,5111,8],[5661,10,5111,12],[5661,11,5111,13,"tokenResponse"],[5661,24,5111,26],[5661,26,5111,28],[5662,8,5112,12],[5662,15,5112,19],[5662,19,5112,23],[5663,6,5113,8],[5664,6,5114,8],[5664,12,5114,14],[5665,8,5114,16,"oauthIdToken"],[5665,20,5114,28],[5666,8,5114,30,"oauthAccessToken"],[5667,6,5114,47],[5667,7,5114,48],[5667,10,5114,51,"tokenResponse"],[5667,23,5114,64],[5668,6,5115,8],[5668,10,5115,12],[5668,11,5115,13,"oauthIdToken"],[5668,23,5115,25],[5668,27,5115,29],[5668,28,5115,30,"oauthAccessToken"],[5668,44,5115,46],[5668,46,5115,48],[5669,8,5116,12],[5670,8,5117,12],[5670,15,5117,19],[5670,19,5117,23],[5671,6,5118,8],[5672,6,5119,8],[5672,10,5119,12],[5673,8,5120,12],[5673,15,5120,19,"GoogleAuthProvider"],[5673,33,5120,37],[5673,34,5120,38,"credential"],[5673,44,5120,48],[5673,45,5120,49,"oauthIdToken"],[5673,57,5120,61],[5673,59,5120,63,"oauthAccessToken"],[5673,75,5120,79],[5673,76,5120,80],[5674,6,5121,8],[5674,7,5121,9],[5674,8,5122,8],[5674,14,5122,14],[5675,8,5123,12],[5675,15,5123,19],[5675,19,5123,23],[5676,6,5124,8],[5677,4,5125,4],[5678,2,5126,0],[5679,2,5127,0],[5680,2,5128,0,"GoogleAuthProvider"],[5680,20,5128,18],[5680,21,5128,19,"GOOGLE_SIGN_IN_METHOD"],[5680,42,5128,40],[5680,45,5128,43],[5680,57,5128,55],[5680,58,5128,56],[5681,2,5129,0],[5682,2,5130,0,"GoogleAuthProvider"],[5682,20,5130,18],[5682,21,5130,19,"PROVIDER_ID"],[5682,32,5130,30],[5682,35,5130,33],[5682,47,5130,45],[5682,48,5130,46],[5684,2,5132,0],[5685,0,5133,0],[5686,0,5134,0],[5687,0,5135,0],[5688,0,5136,0],[5689,0,5137,0],[5690,0,5138,0],[5691,0,5139,0],[5692,0,5140,0],[5693,0,5141,0],[5694,0,5142,0],[5695,0,5143,0],[5696,0,5144,0],[5697,0,5145,0],[5698,0,5146,0],[5699,0,5147,0],[5700,2,5148,0],[5701,0,5149,0],[5702,0,5150,0],[5703,0,5151,0],[5704,0,5152,0],[5705,0,5153,0],[5706,0,5154,0],[5707,0,5155,0],[5708,0,5156,0],[5709,0,5157,0],[5710,0,5158,0],[5711,0,5159,0],[5712,0,5160,0],[5713,0,5161,0],[5714,0,5162,0],[5715,0,5163,0],[5716,0,5164,0],[5717,0,5165,0],[5718,0,5166,0],[5719,0,5167,0],[5720,0,5168,0],[5721,0,5169,0],[5722,0,5170,0],[5723,0,5171,0],[5724,0,5172,0],[5725,0,5173,0],[5726,0,5174,0],[5727,0,5175,0],[5728,0,5176,0],[5729,0,5177,0],[5730,0,5178,0],[5731,0,5179,0],[5732,0,5180,0],[5733,0,5181,0],[5734,0,5182,0],[5735,0,5183,0],[5736,0,5184,0],[5737,0,5185,0],[5738,0,5186,0],[5739,0,5187,0],[5740,0,5188,0],[5741,0,5189,0],[5742,2,5190,0],[5742,8,5190,6,"GithubAuthProvider"],[5742,26,5190,24],[5742,35,5190,33,"BaseOAuthProvider"],[5742,52,5190,50],[5742,53,5190,51],[5743,4,5191,4,"constructor"],[5743,15,5191,15,"constructor"],[5743,16,5191,15],[5743,18,5191,18],[5744,6,5192,8],[5744,11,5192,13],[5744,12,5192,14],[5744,24,5192,26],[5744,25,5192,27],[5744,48,5192,50],[5744,49,5192,51],[5745,4,5193,4],[5746,4,5194,4],[5747,0,5195,0],[5748,0,5196,0],[5749,0,5197,0],[5750,0,5198,0],[5751,4,5199,4],[5751,11,5199,11,"credential"],[5751,21,5199,21,"credential"],[5751,22,5199,22,"accessToken"],[5751,33,5199,33],[5751,35,5199,35],[5752,6,5200,8],[5752,13,5200,15,"OAuthCredential"],[5752,28,5200,30],[5752,29,5200,31,"_fromParams"],[5752,40,5200,42],[5752,41,5200,43],[5753,8,5201,12,"providerId"],[5753,18,5201,22],[5753,20,5201,24,"GithubAuthProvider"],[5753,38,5201,42],[5753,39,5201,43,"PROVIDER_ID"],[5753,50,5201,54],[5754,8,5202,12,"signInMethod"],[5754,20,5202,24],[5754,22,5202,26,"GithubAuthProvider"],[5754,40,5202,44],[5754,41,5202,45,"GITHUB_SIGN_IN_METHOD"],[5754,62,5202,66],[5755,8,5203,12,"accessToken"],[5756,6,5204,8],[5756,7,5204,9],[5756,8,5204,10],[5757,4,5205,4],[5758,4,5206,4],[5759,0,5207,0],[5760,0,5208,0],[5761,0,5209,0],[5762,0,5210,0],[5763,4,5211,4],[5763,11,5211,11,"credentialFromResult"],[5763,31,5211,31,"credentialFromResult"],[5763,32,5211,32,"userCredential"],[5763,46,5211,46],[5763,48,5211,48],[5764,6,5212,8],[5764,13,5212,15,"GithubAuthProvider"],[5764,31,5212,33],[5764,32,5212,34,"credentialFromTaggedObject"],[5764,58,5212,60],[5764,59,5212,61,"userCredential"],[5764,73,5212,75],[5764,74,5212,76],[5765,4,5213,4],[5766,4,5214,4],[5767,0,5215,0],[5768,0,5216,0],[5769,0,5217,0],[5770,0,5218,0],[5771,0,5219,0],[5772,4,5220,4],[5772,11,5220,11,"credentialFromError"],[5772,30,5220,30,"credentialFromError"],[5772,31,5220,31,"error"],[5772,36,5220,36],[5772,38,5220,38],[5773,6,5221,8],[5773,13,5221,15,"GithubAuthProvider"],[5773,31,5221,33],[5773,32,5221,34,"credentialFromTaggedObject"],[5773,58,5221,60],[5773,59,5221,62,"error"],[5773,64,5221,67],[5773,65,5221,68,"customData"],[5773,75,5221,78],[5773,79,5221,82],[5773,80,5221,83],[5773,81,5221,85],[5773,82,5221,86],[5774,4,5222,4],[5775,4,5223,4],[5775,11,5223,11,"credentialFromTaggedObject"],[5775,37,5223,37,"credentialFromTaggedObject"],[5775,38,5223,38],[5776,6,5223,40,"_tokenResponse"],[5776,20,5223,54],[5776,22,5223,56,"tokenResponse"],[5777,4,5223,70],[5777,5,5223,71],[5777,7,5223,73],[5778,6,5224,8],[5778,10,5224,12],[5778,11,5224,13,"tokenResponse"],[5778,24,5224,26],[5778,28,5224,30],[5778,30,5224,32],[5778,48,5224,50],[5778,52,5224,54,"tokenResponse"],[5778,65,5224,67],[5778,66,5224,68],[5778,68,5224,70],[5779,8,5225,12],[5779,15,5225,19],[5779,19,5225,23],[5780,6,5226,8],[5781,6,5227,8],[5781,10,5227,12],[5781,11,5227,13,"tokenResponse"],[5781,24,5227,26],[5781,25,5227,27,"oauthAccessToken"],[5781,41,5227,43],[5781,43,5227,45],[5782,8,5228,12],[5782,15,5228,19],[5782,19,5228,23],[5783,6,5229,8],[5784,6,5230,8],[5784,10,5230,12],[5785,8,5231,12],[5785,15,5231,19,"GithubAuthProvider"],[5785,33,5231,37],[5785,34,5231,38,"credential"],[5785,44,5231,48],[5785,45,5231,49,"tokenResponse"],[5785,58,5231,62],[5785,59,5231,63,"oauthAccessToken"],[5785,75,5231,79],[5785,76,5231,80],[5786,6,5232,8],[5786,7,5232,9],[5786,8,5233,8],[5786,14,5233,14],[5787,8,5234,12],[5787,15,5234,19],[5787,19,5234,23],[5788,6,5235,8],[5789,4,5236,4],[5790,2,5237,0],[5791,2,5238,0],[5792,2,5239,0,"GithubAuthProvider"],[5792,20,5239,18],[5792,21,5239,19,"GITHUB_SIGN_IN_METHOD"],[5792,42,5239,40],[5792,45,5239,43],[5792,57,5239,55],[5792,58,5239,56],[5793,2,5240,0],[5794,2,5241,0,"GithubAuthProvider"],[5794,20,5241,18],[5794,21,5241,19,"PROVIDER_ID"],[5794,32,5241,30],[5794,35,5241,33],[5794,47,5241,45],[5794,48,5241,46],[5796,2,5243,0],[5797,0,5244,0],[5798,0,5245,0],[5799,0,5246,0],[5800,0,5247,0],[5801,0,5248,0],[5802,0,5249,0],[5803,0,5250,0],[5804,0,5251,0],[5805,0,5252,0],[5806,0,5253,0],[5807,0,5254,0],[5808,0,5255,0],[5809,0,5256,0],[5810,0,5257,0],[5811,0,5258,0],[5812,2,5259,0],[5812,8,5259,6,"IDP_REQUEST_URI"],[5812,23,5259,21],[5812,26,5259,24],[5812,44,5259,42],[5813,2,5260,0],[5814,0,5261,0],[5815,0,5262,0],[5816,2,5263,0],[5816,8,5263,6,"SAMLAuthCredential"],[5816,26,5263,24],[5816,35,5263,33,"AuthCredential"],[5816,49,5263,47],[5816,50,5263,48],[5817,4,5264,4],[5818,4,5265,4,"constructor"],[5818,15,5265,15,"constructor"],[5818,16,5265,16,"providerId"],[5818,26,5265,26],[5818,28,5265,28,"pendingToken"],[5818,40,5265,40],[5818,42,5265,42],[5819,6,5266,8],[5819,11,5266,13],[5819,12,5266,14,"providerId"],[5819,22,5266,24],[5819,24,5266,26,"providerId"],[5819,34,5266,36],[5819,35,5266,37],[5820,6,5267,8],[5820,10,5267,12],[5820,11,5267,13,"pendingToken"],[5820,23,5267,25],[5820,26,5267,28,"pendingToken"],[5820,38,5267,40],[5821,4,5268,4],[5822,4,5269,4],[5823,4,5270,4,"_getIdTokenResponse"],[5823,23,5270,23,"_getIdTokenResponse"],[5823,24,5270,24,"auth"],[5823,28,5270,28],[5823,30,5270,30],[5824,6,5271,8],[5824,12,5271,14,"request"],[5824,19,5271,21],[5824,22,5271,24],[5824,26,5271,28],[5824,27,5271,29,"buildRequest"],[5824,39,5271,41],[5824,40,5271,42],[5824,41,5271,43],[5825,6,5272,8],[5825,13,5272,15,"signInWithIdp"],[5825,26,5272,28],[5825,27,5272,29,"auth"],[5825,31,5272,33],[5825,33,5272,35,"request"],[5825,40,5272,42],[5825,41,5272,43],[5826,4,5273,4],[5827,4,5274,4],[5828,4,5275,4,"_linkToIdToken"],[5828,18,5275,18,"_linkToIdToken"],[5828,19,5275,19,"auth"],[5828,23,5275,23],[5828,25,5275,25,"idToken"],[5828,32,5275,32],[5828,34,5275,34],[5829,6,5276,8],[5829,12,5276,14,"request"],[5829,19,5276,21],[5829,22,5276,24],[5829,26,5276,28],[5829,27,5276,29,"buildRequest"],[5829,39,5276,41],[5829,40,5276,42],[5829,41,5276,43],[5830,6,5277,8,"request"],[5830,13,5277,15],[5830,14,5277,16,"idToken"],[5830,21,5277,23],[5830,24,5277,26,"idToken"],[5830,31,5277,33],[5831,6,5278,8],[5831,13,5278,15,"signInWithIdp"],[5831,26,5278,28],[5831,27,5278,29,"auth"],[5831,31,5278,33],[5831,33,5278,35,"request"],[5831,40,5278,42],[5831,41,5278,43],[5832,4,5279,4],[5833,4,5280,4],[5834,4,5281,4,"_getReauthenticationResolver"],[5834,32,5281,32,"_getReauthenticationResolver"],[5834,33,5281,33,"auth"],[5834,37,5281,37],[5834,39,5281,39],[5835,6,5282,8],[5835,12,5282,14,"request"],[5835,19,5282,21],[5835,22,5282,24],[5835,26,5282,28],[5835,27,5282,29,"buildRequest"],[5835,39,5282,41],[5835,40,5282,42],[5835,41,5282,43],[5836,6,5283,8,"request"],[5836,13,5283,15],[5836,14,5283,16,"autoCreate"],[5836,24,5283,26],[5836,27,5283,29],[5836,32,5283,34],[5837,6,5284,8],[5837,13,5284,15,"signInWithIdp"],[5837,26,5284,28],[5837,27,5284,29,"auth"],[5837,31,5284,33],[5837,33,5284,35,"request"],[5837,40,5284,42],[5837,41,5284,43],[5838,4,5285,4],[5839,4,5286,4],[5840,4,5287,4,"toJSON"],[5840,10,5287,10,"toJSON"],[5840,11,5287,10],[5840,13,5287,13],[5841,6,5288,8],[5841,13,5288,15],[5842,8,5289,12,"signInMethod"],[5842,20,5289,24],[5842,22,5289,26],[5842,26,5289,30],[5842,27,5289,31,"signInMethod"],[5842,39,5289,43],[5843,8,5290,12,"providerId"],[5843,18,5290,22],[5843,20,5290,24],[5843,24,5290,28],[5843,25,5290,29,"providerId"],[5843,35,5290,39],[5844,8,5291,12,"pendingToken"],[5844,20,5291,24],[5844,22,5291,26],[5844,26,5291,30],[5844,27,5291,31,"pendingToken"],[5845,6,5292,8],[5845,7,5292,9],[5846,4,5293,4],[5847,4,5294,4],[5848,0,5295,0],[5849,0,5296,0],[5850,0,5297,0],[5851,0,5298,0],[5852,0,5299,0],[5853,0,5300,0],[5854,0,5301,0],[5855,0,5302,0],[5856,4,5303,4],[5856,11,5303,11,"fromJSON"],[5856,19,5303,19,"fromJSON"],[5856,20,5303,20,"json"],[5856,24,5303,24],[5856,26,5303,26],[5857,6,5304,8],[5857,12,5304,14,"obj"],[5857,15,5304,17],[5857,18,5304,20],[5857,25,5304,27,"json"],[5857,29,5304,31],[5857,34,5304,36],[5857,42,5304,44],[5857,45,5304,47,"JSON"],[5857,49,5304,51],[5857,50,5304,52,"parse"],[5857,55,5304,57],[5857,56,5304,58,"json"],[5857,60,5304,62],[5857,61,5304,63],[5857,64,5304,66,"json"],[5857,68,5304,70],[5858,6,5305,8],[5858,12,5305,14],[5859,8,5305,16,"providerId"],[5859,18,5305,26],[5860,8,5305,28,"signInMethod"],[5860,20,5305,40],[5861,8,5305,42,"pendingToken"],[5862,6,5305,55],[5862,7,5305,56],[5862,10,5305,59,"obj"],[5862,13,5305,62],[5863,6,5306,8],[5863,10,5306,12],[5863,11,5306,13,"providerId"],[5863,21,5306,23],[5863,25,5307,12],[5863,26,5307,13,"signInMethod"],[5863,38,5307,25],[5863,42,5308,12],[5863,43,5308,13,"pendingToken"],[5863,55,5308,25],[5863,59,5309,12,"providerId"],[5863,69,5309,22],[5863,74,5309,27,"signInMethod"],[5863,86,5309,39],[5863,88,5309,41],[5864,8,5310,12],[5864,15,5310,19],[5864,19,5310,23],[5865,6,5311,8],[5866,6,5312,8],[5866,13,5312,15],[5866,17,5312,19,"SAMLAuthCredential"],[5866,35,5312,37],[5866,36,5312,38,"providerId"],[5866,46,5312,48],[5866,48,5312,50,"pendingToken"],[5866,60,5312,62],[5866,61,5312,63],[5867,4,5313,4],[5868,4,5314,4],[5869,0,5315,0],[5870,0,5316,0],[5871,0,5317,0],[5872,0,5318,0],[5873,4,5319,4],[5873,11,5319,11,"_create"],[5873,18,5319,18,"_create"],[5873,19,5319,19,"providerId"],[5873,29,5319,29],[5873,31,5319,31,"pendingToken"],[5873,43,5319,43],[5873,45,5319,45],[5874,6,5320,8],[5874,13,5320,15],[5874,17,5320,19,"SAMLAuthCredential"],[5874,35,5320,37],[5874,36,5320,38,"providerId"],[5874,46,5320,48],[5874,48,5320,50,"pendingToken"],[5874,60,5320,62],[5874,61,5320,63],[5875,4,5321,4],[5876,4,5322,4,"buildRequest"],[5876,16,5322,16,"buildRequest"],[5876,17,5322,16],[5876,19,5322,19],[5877,6,5323,8],[5877,13,5323,15],[5878,8,5324,12,"requestUri"],[5878,18,5324,22],[5878,20,5324,24,"IDP_REQUEST_URI"],[5878,35,5324,39],[5879,8,5325,12,"returnSecureToken"],[5879,25,5325,29],[5879,27,5325,31],[5879,31,5325,35],[5880,8,5326,12,"pendingToken"],[5880,20,5326,24],[5880,22,5326,26],[5880,26,5326,30],[5880,27,5326,31,"pendingToken"],[5881,6,5327,8],[5881,7,5327,9],[5882,4,5328,4],[5883,2,5329,0],[5885,2,5331,0],[5886,0,5332,0],[5887,0,5333,0],[5888,0,5334,0],[5889,0,5335,0],[5890,0,5336,0],[5891,0,5337,0],[5892,0,5338,0],[5893,0,5339,0],[5894,0,5340,0],[5895,0,5341,0],[5896,0,5342,0],[5897,0,5343,0],[5898,0,5344,0],[5899,0,5345,0],[5900,0,5346,0],[5901,2,5347,0],[5901,8,5347,6,"SAML_PROVIDER_PREFIX"],[5901,28,5347,26],[5901,31,5347,29],[5901,38,5347,36],[5902,2,5348,0],[5903,0,5349,0],[5904,0,5350,0],[5905,0,5351,0],[5906,0,5352,0],[5907,2,5353,0],[5907,8,5353,6,"SAMLAuthProvider"],[5907,24,5353,22],[5907,33,5353,31,"FederatedAuthProvider"],[5907,54,5353,52],[5907,55,5353,53],[5908,4,5354,4],[5909,0,5355,0],[5910,0,5356,0],[5911,0,5357,0],[5912,4,5358,4,"constructor"],[5912,15,5358,15,"constructor"],[5912,16,5358,16,"providerId"],[5912,26,5358,26],[5912,28,5358,28],[5913,6,5359,8,"_assert"],[5913,13,5359,15],[5913,14,5359,16,"providerId"],[5913,24,5359,26],[5913,25,5359,27,"startsWith"],[5913,35,5359,37],[5913,36,5359,38,"SAML_PROVIDER_PREFIX"],[5913,56,5359,58],[5913,57,5359,59],[5913,59,5359,61],[5913,75,5359,77],[5913,76,5359,78],[5913,110,5359,112],[5913,111,5359,113],[5914,6,5360,8],[5914,11,5360,13],[5914,12,5360,14,"providerId"],[5914,22,5360,24],[5914,23,5360,25],[5915,4,5361,4],[5916,4,5362,4],[5917,0,5363,0],[5918,0,5364,0],[5919,0,5365,0],[5920,0,5366,0],[5921,0,5367,0],[5922,0,5368,0],[5923,0,5369,0],[5924,0,5370,0],[5925,0,5371,0],[5926,0,5372,0],[5927,0,5373,0],[5928,0,5374,0],[5929,0,5375,0],[5930,0,5376,0],[5931,0,5377,0],[5932,4,5378,4],[5932,11,5378,11,"credentialFromResult"],[5932,31,5378,31,"credentialFromResult"],[5932,32,5378,32,"userCredential"],[5932,46,5378,46],[5932,48,5378,48],[5933,6,5379,8],[5933,13,5379,15,"SAMLAuthProvider"],[5933,29,5379,31],[5933,30,5379,32,"samlCredentialFromTaggedObject"],[5933,60,5379,62],[5933,61,5379,63,"userCredential"],[5933,75,5379,77],[5933,76,5379,78],[5934,4,5380,4],[5935,4,5381,4],[5936,0,5382,0],[5937,0,5383,0],[5938,0,5384,0],[5939,0,5385,0],[5940,0,5386,0],[5941,4,5387,4],[5941,11,5387,11,"credentialFromError"],[5941,30,5387,30,"credentialFromError"],[5941,31,5387,31,"error"],[5941,36,5387,36],[5941,38,5387,38],[5942,6,5388,8],[5942,13,5388,15,"SAMLAuthProvider"],[5942,29,5388,31],[5942,30,5388,32,"samlCredentialFromTaggedObject"],[5942,60,5388,62],[5942,61,5388,64,"error"],[5942,66,5388,69],[5942,67,5388,70,"customData"],[5942,77,5388,80],[5942,81,5388,84],[5942,82,5388,85],[5942,83,5388,87],[5942,84,5388,88],[5943,4,5389,4],[5944,4,5390,4],[5945,0,5391,0],[5946,0,5392,0],[5947,0,5393,0],[5948,4,5394,4],[5948,11,5394,11,"credentialFromJSON"],[5948,29,5394,29,"credentialFromJSON"],[5948,30,5394,30,"json"],[5948,34,5394,34],[5948,36,5394,36],[5949,6,5395,8],[5949,12,5395,14,"credential"],[5949,22,5395,24],[5949,25,5395,27,"SAMLAuthCredential"],[5949,43,5395,45],[5949,44,5395,46,"fromJSON"],[5949,52,5395,54],[5949,53,5395,55,"json"],[5949,57,5395,59],[5949,58,5395,60],[5950,6,5396,8,"_assert"],[5950,13,5396,15],[5950,14,5396,16,"credential"],[5950,24,5396,26],[5950,26,5396,28],[5950,42,5396,44],[5950,43,5396,45],[5950,77,5396,79],[5950,78,5396,80],[5951,6,5397,8],[5951,13,5397,15,"credential"],[5951,23,5397,25],[5952,4,5398,4],[5953,4,5399,4],[5953,11,5399,11,"samlCredentialFromTaggedObject"],[5953,41,5399,41,"samlCredentialFromTaggedObject"],[5953,42,5399,42],[5954,6,5399,44,"_tokenResponse"],[5954,20,5399,58],[5954,22,5399,60,"tokenResponse"],[5955,4,5399,74],[5955,5,5399,75],[5955,7,5399,77],[5956,6,5400,8],[5956,10,5400,12],[5956,11,5400,13,"tokenResponse"],[5956,24,5400,26],[5956,26,5400,28],[5957,8,5401,12],[5957,15,5401,19],[5957,19,5401,23],[5958,6,5402,8],[5959,6,5403,8],[5959,12,5403,14],[5960,8,5403,16,"pendingToken"],[5960,20,5403,28],[5961,8,5403,30,"providerId"],[5962,6,5403,41],[5962,7,5403,42],[5962,10,5403,45,"tokenResponse"],[5962,23,5403,58],[5963,6,5404,8],[5963,10,5404,12],[5963,11,5404,13,"pendingToken"],[5963,23,5404,25],[5963,27,5404,29],[5963,28,5404,30,"providerId"],[5963,38,5404,40],[5963,40,5404,42],[5964,8,5405,12],[5964,15,5405,19],[5964,19,5405,23],[5965,6,5406,8],[5966,6,5407,8],[5966,10,5407,12],[5967,8,5408,12],[5967,15,5408,19,"SAMLAuthCredential"],[5967,33,5408,37],[5967,34,5408,38,"_create"],[5967,41,5408,45],[5967,42,5408,46,"providerId"],[5967,52,5408,56],[5967,54,5408,58,"pendingToken"],[5967,66,5408,70],[5967,67,5408,71],[5968,6,5409,8],[5968,7,5409,9],[5968,8,5410,8],[5968,15,5410,15,"e"],[5968,16,5410,16],[5968,18,5410,18],[5969,8,5411,12],[5969,15,5411,19],[5969,19,5411,23],[5970,6,5412,8],[5971,4,5413,4],[5972,2,5414,0],[5974,2,5416,0],[5975,0,5417,0],[5976,0,5418,0],[5977,0,5419,0],[5978,0,5420,0],[5979,0,5421,0],[5980,0,5422,0],[5981,0,5423,0],[5982,0,5424,0],[5983,0,5425,0],[5984,0,5426,0],[5985,0,5427,0],[5986,0,5428,0],[5987,0,5429,0],[5988,0,5430,0],[5989,0,5431,0],[5990,2,5432,0],[5991,0,5433,0],[5992,0,5434,0],[5993,0,5435,0],[5994,0,5436,0],[5995,0,5437,0],[5996,0,5438,0],[5997,0,5439,0],[5998,0,5440,0],[5999,0,5441,0],[6000,0,5442,0],[6001,0,5443,0],[6002,0,5444,0],[6003,0,5445,0],[6004,0,5446,0],[6005,0,5447,0],[6006,0,5448,0],[6007,0,5449,0],[6008,0,5450,0],[6009,0,5451,0],[6010,0,5452,0],[6011,0,5453,0],[6012,0,5454,0],[6013,0,5455,0],[6014,0,5456,0],[6015,0,5457,0],[6016,0,5458,0],[6017,0,5459,0],[6018,0,5460,0],[6019,0,5461,0],[6020,0,5462,0],[6021,0,5463,0],[6022,0,5464,0],[6023,0,5465,0],[6024,0,5466,0],[6025,0,5467,0],[6026,0,5468,0],[6027,0,5469,0],[6028,0,5470,0],[6029,2,5471,0],[6029,8,5471,6,"TwitterAuthProvider"],[6029,27,5471,25],[6029,36,5471,34,"BaseOAuthProvider"],[6029,53,5471,51],[6029,54,5471,52],[6030,4,5472,4,"constructor"],[6030,15,5472,15,"constructor"],[6030,16,5472,15],[6030,18,5472,18],[6031,6,5473,8],[6031,11,5473,13],[6031,12,5473,14],[6031,25,5473,27],[6031,26,5473,28],[6031,50,5473,52],[6031,51,5473,53],[6032,4,5474,4],[6033,4,5475,4],[6034,0,5476,0],[6035,0,5477,0],[6036,0,5478,0],[6037,0,5479,0],[6038,0,5480,0],[6039,4,5481,4],[6039,11,5481,11,"credential"],[6039,21,5481,21,"credential"],[6039,22,5481,22,"token"],[6039,27,5481,27],[6039,29,5481,29,"secret"],[6039,35,5481,35],[6039,37,5481,37],[6040,6,5482,8],[6040,13,5482,15,"OAuthCredential"],[6040,28,5482,30],[6040,29,5482,31,"_fromParams"],[6040,40,5482,42],[6040,41,5482,43],[6041,8,5483,12,"providerId"],[6041,18,5483,22],[6041,20,5483,24,"TwitterAuthProvider"],[6041,39,5483,43],[6041,40,5483,44,"PROVIDER_ID"],[6041,51,5483,55],[6042,8,5484,12,"signInMethod"],[6042,20,5484,24],[6042,22,5484,26,"TwitterAuthProvider"],[6042,41,5484,45],[6042,42,5484,46,"TWITTER_SIGN_IN_METHOD"],[6042,64,5484,68],[6043,8,5485,12,"oauthToken"],[6043,18,5485,22],[6043,20,5485,24,"token"],[6043,25,5485,29],[6044,8,5486,12,"oauthTokenSecret"],[6044,24,5486,28],[6044,26,5486,30,"secret"],[6045,6,5487,8],[6045,7,5487,9],[6045,8,5487,10],[6046,4,5488,4],[6047,4,5489,4],[6048,0,5490,0],[6049,0,5491,0],[6050,0,5492,0],[6051,0,5493,0],[6052,4,5494,4],[6052,11,5494,11,"credentialFromResult"],[6052,31,5494,31,"credentialFromResult"],[6052,32,5494,32,"userCredential"],[6052,46,5494,46],[6052,48,5494,48],[6053,6,5495,8],[6053,13,5495,15,"TwitterAuthProvider"],[6053,32,5495,34],[6053,33,5495,35,"credentialFromTaggedObject"],[6053,59,5495,61],[6053,60,5495,62,"userCredential"],[6053,74,5495,76],[6053,75,5495,77],[6054,4,5496,4],[6055,4,5497,4],[6056,0,5498,0],[6057,0,5499,0],[6058,0,5500,0],[6059,0,5501,0],[6060,0,5502,0],[6061,4,5503,4],[6061,11,5503,11,"credentialFromError"],[6061,30,5503,30,"credentialFromError"],[6061,31,5503,31,"error"],[6061,36,5503,36],[6061,38,5503,38],[6062,6,5504,8],[6062,13,5504,15,"TwitterAuthProvider"],[6062,32,5504,34],[6062,33,5504,35,"credentialFromTaggedObject"],[6062,59,5504,61],[6062,60,5504,63,"error"],[6062,65,5504,68],[6062,66,5504,69,"customData"],[6062,76,5504,79],[6062,80,5504,83],[6062,81,5504,84],[6062,82,5504,86],[6062,83,5504,87],[6063,4,5505,4],[6064,4,5506,4],[6064,11,5506,11,"credentialFromTaggedObject"],[6064,37,5506,37,"credentialFromTaggedObject"],[6064,38,5506,38],[6065,6,5506,40,"_tokenResponse"],[6065,20,5506,54],[6065,22,5506,56,"tokenResponse"],[6066,4,5506,70],[6066,5,5506,71],[6066,7,5506,73],[6067,6,5507,8],[6067,10,5507,12],[6067,11,5507,13,"tokenResponse"],[6067,24,5507,26],[6067,26,5507,28],[6068,8,5508,12],[6068,15,5508,19],[6068,19,5508,23],[6069,6,5509,8],[6070,6,5510,8],[6070,12,5510,14],[6071,8,5510,16,"oauthAccessToken"],[6071,24,5510,32],[6072,8,5510,34,"oauthTokenSecret"],[6073,6,5510,51],[6073,7,5510,52],[6073,10,5510,55,"tokenResponse"],[6073,23,5510,68],[6074,6,5511,8],[6074,10,5511,12],[6074,11,5511,13,"oauthAccessToken"],[6074,27,5511,29],[6074,31,5511,33],[6074,32,5511,34,"oauthTokenSecret"],[6074,48,5511,50],[6074,50,5511,52],[6075,8,5512,12],[6075,15,5512,19],[6075,19,5512,23],[6076,6,5513,8],[6077,6,5514,8],[6077,10,5514,12],[6078,8,5515,12],[6078,15,5515,19,"TwitterAuthProvider"],[6078,34,5515,38],[6078,35,5515,39,"credential"],[6078,45,5515,49],[6078,46,5515,50,"oauthAccessToken"],[6078,62,5515,66],[6078,64,5515,68,"oauthTokenSecret"],[6078,80,5515,84],[6078,81,5515,85],[6079,6,5516,8],[6079,7,5516,9],[6079,8,5517,8],[6079,14,5517,14],[6080,8,5518,12],[6080,15,5518,19],[6080,19,5518,23],[6081,6,5519,8],[6082,4,5520,4],[6083,2,5521,0],[6084,2,5522,0],[6085,2,5523,0,"TwitterAuthProvider"],[6085,21,5523,19],[6085,22,5523,20,"TWITTER_SIGN_IN_METHOD"],[6085,44,5523,42],[6085,47,5523,45],[6085,60,5523,58],[6085,61,5523,59],[6086,2,5524,0],[6087,2,5525,0,"TwitterAuthProvider"],[6087,21,5525,19],[6087,22,5525,20,"PROVIDER_ID"],[6087,33,5525,31],[6087,36,5525,34],[6087,49,5525,47],[6087,50,5525,48],[6089,2,5527,0],[6090,0,5528,0],[6091,0,5529,0],[6092,0,5530,0],[6093,0,5531,0],[6094,0,5532,0],[6095,0,5533,0],[6096,0,5534,0],[6097,0,5535,0],[6098,0,5536,0],[6099,0,5537,0],[6100,0,5538,0],[6101,0,5539,0],[6102,0,5540,0],[6103,0,5541,0],[6104,0,5542,0],[6105,2,5543,0],[6105,17,5543,15,"signUp"],[6105,23,5543,21,"signUp"],[6105,24,5543,22,"auth"],[6105,28,5543,26],[6105,30,5543,28,"request"],[6105,37,5543,35],[6105,39,5543,37],[6106,4,5544,4],[6106,11,5544,11,"_performSignInRequest"],[6106,32,5544,32],[6106,33,5544,33,"auth"],[6106,37,5544,37],[6106,39,5544,39],[6106,45,5544,45],[6106,46,5544,46],[6106,69,5544,69],[6106,90,5544,90],[6106,91,5544,91],[6106,115,5544,115,"_addTidIfNecessary"],[6106,133,5544,133],[6106,134,5544,134,"auth"],[6106,138,5544,138],[6106,140,5544,140,"request"],[6106,147,5544,147],[6106,148,5544,148],[6106,149,5544,149],[6107,2,5545,0],[6109,2,5547,0],[6110,0,5548,0],[6111,0,5549,0],[6112,0,5550,0],[6113,0,5551,0],[6114,0,5552,0],[6115,0,5553,0],[6116,0,5554,0],[6117,0,5555,0],[6118,0,5556,0],[6119,0,5557,0],[6120,0,5558,0],[6121,0,5559,0],[6122,0,5560,0],[6123,0,5561,0],[6124,0,5562,0],[6125,2,5563,0],[6125,8,5563,6,"UserCredentialImpl"],[6125,26,5563,24],[6125,27,5563,25],[6126,4,5564,4,"constructor"],[6126,15,5564,15,"constructor"],[6126,16,5564,16,"params"],[6126,22,5564,22],[6126,24,5564,24],[6127,6,5565,8],[6127,10,5565,12],[6127,11,5565,13,"user"],[6127,15,5565,17],[6127,18,5565,20,"params"],[6127,24,5565,26],[6127,25,5565,27,"user"],[6127,29,5565,31],[6128,6,5566,8],[6128,10,5566,12],[6128,11,5566,13,"providerId"],[6128,21,5566,23],[6128,24,5566,26,"params"],[6128,30,5566,32],[6128,31,5566,33,"providerId"],[6128,41,5566,43],[6129,6,5567,8],[6129,10,5567,12],[6129,11,5567,13,"_tokenResponse"],[6129,25,5567,27],[6129,28,5567,30,"params"],[6129,34,5567,36],[6129,35,5567,37,"_tokenResponse"],[6129,49,5567,51],[6130,6,5568,8],[6130,10,5568,12],[6130,11,5568,13,"operationType"],[6130,24,5568,26],[6130,27,5568,29,"params"],[6130,33,5568,35],[6130,34,5568,36,"operationType"],[6130,47,5568,49],[6131,4,5569,4],[6132,4,5570,4],[6132,17,5570,17,"_fromIdTokenResponse"],[6132,37,5570,37,"_fromIdTokenResponse"],[6132,38,5570,38,"auth"],[6132,42,5570,42],[6132,44,5570,44,"operationType"],[6132,57,5570,57],[6132,59,5570,59,"idTokenResponse"],[6132,74,5570,74],[6132,76,5570,76,"isAnonymous"],[6132,87,5570,87],[6132,90,5570,90],[6132,95,5570,95],[6132,97,5570,97],[6133,6,5571,8],[6133,12,5571,14,"user"],[6133,16,5571,18],[6133,19,5571,21],[6133,25,5571,27,"UserImpl"],[6133,33,5571,35],[6133,34,5571,36,"_fromIdTokenResponse"],[6133,54,5571,56],[6133,55,5571,57,"auth"],[6133,59,5571,61],[6133,61,5571,63,"idTokenResponse"],[6133,76,5571,78],[6133,78,5571,80,"isAnonymous"],[6133,89,5571,91],[6133,90,5571,92],[6134,6,5572,8],[6134,12,5572,14,"providerId"],[6134,22,5572,24],[6134,25,5572,27,"providerIdForResponse"],[6134,46,5572,48],[6134,47,5572,49,"idTokenResponse"],[6134,62,5572,64],[6134,63,5572,65],[6135,6,5573,8],[6135,12,5573,14,"userCred"],[6135,20,5573,22],[6135,23,5573,25],[6135,27,5573,29,"UserCredentialImpl"],[6135,45,5573,47],[6135,46,5573,48],[6136,8,5574,12,"user"],[6136,12,5574,16],[6137,8,5575,12,"providerId"],[6137,18,5575,22],[6138,8,5576,12,"_tokenResponse"],[6138,22,5576,26],[6138,24,5576,28,"idTokenResponse"],[6138,39,5576,43],[6139,8,5577,12,"operationType"],[6140,6,5578,8],[6140,7,5578,9],[6140,8,5578,10],[6141,6,5579,8],[6141,13,5579,15,"userCred"],[6141,21,5579,23],[6142,4,5580,4],[6143,4,5581,4],[6143,17,5581,17,"_forOperation"],[6143,30,5581,30,"_forOperation"],[6143,31,5581,31,"user"],[6143,35,5581,35],[6143,37,5581,37,"operationType"],[6143,50,5581,50],[6143,52,5581,52,"response"],[6143,60,5581,60],[6143,62,5581,62],[6144,6,5582,8],[6144,12,5582,14,"user"],[6144,16,5582,18],[6144,17,5582,19,"_updateTokensIfNecessary"],[6144,41,5582,43],[6144,42,5582,44,"response"],[6144,50,5582,52],[6144,52,5582,54],[6144,64,5582,67],[6144,68,5582,71],[6144,69,5582,72],[6145,6,5583,8],[6145,12,5583,14,"providerId"],[6145,22,5583,24],[6145,25,5583,27,"providerIdForResponse"],[6145,46,5583,48],[6145,47,5583,49,"response"],[6145,55,5583,57],[6145,56,5583,58],[6146,6,5584,8],[6146,13,5584,15],[6146,17,5584,19,"UserCredentialImpl"],[6146,35,5584,37],[6146,36,5584,38],[6147,8,5585,12,"user"],[6147,12,5585,16],[6148,8,5586,12,"providerId"],[6148,18,5586,22],[6149,8,5587,12,"_tokenResponse"],[6149,22,5587,26],[6149,24,5587,28,"response"],[6149,32,5587,36],[6150,8,5588,12,"operationType"],[6151,6,5589,8],[6151,7,5589,9],[6151,8,5589,10],[6152,4,5590,4],[6153,2,5591,0],[6154,2,5592,0],[6154,11,5592,9,"providerIdForResponse"],[6154,32,5592,30,"providerIdForResponse"],[6154,33,5592,31,"response"],[6154,41,5592,39],[6154,43,5592,41],[6155,4,5593,4],[6155,8,5593,8,"response"],[6155,16,5593,16],[6155,17,5593,17,"providerId"],[6155,27,5593,27],[6155,29,5593,29],[6156,6,5594,8],[6156,13,5594,15,"response"],[6156,21,5594,23],[6156,22,5594,24,"providerId"],[6156,32,5594,34],[6157,4,5595,4],[6158,4,5596,4],[6158,8,5596,8],[6158,21,5596,21],[6158,25,5596,25,"response"],[6158,33,5596,33],[6158,35,5596,35],[6159,6,5597,8],[6159,13,5597,15],[6159,20,5597,22],[6159,21,5597,23],[6160,4,5598,4],[6161,4,5599,4],[6161,11,5599,11],[6161,15,5599,15],[6162,2,5600,0],[6164,2,5602,0],[6165,0,5603,0],[6166,0,5604,0],[6167,0,5605,0],[6168,0,5606,0],[6169,0,5607,0],[6170,0,5608,0],[6171,0,5609,0],[6172,0,5610,0],[6173,0,5611,0],[6174,0,5612,0],[6175,0,5613,0],[6176,0,5614,0],[6177,0,5615,0],[6178,0,5616,0],[6179,0,5617,0],[6180,2,5618,0],[6181,0,5619,0],[6182,0,5620,0],[6183,0,5621,0],[6184,0,5622,0],[6185,0,5623,0],[6186,0,5624,0],[6187,0,5625,0],[6188,0,5626,0],[6189,0,5627,0],[6190,0,5628,0],[6191,0,5629,0],[6192,0,5630,0],[6193,0,5631,0],[6194,2,5632,0],[6194,17,5632,15,"signInAnonymously"],[6194,34,5632,32,"signInAnonymously"],[6194,35,5632,33,"auth"],[6194,39,5632,37],[6194,41,5632,39],[6195,4,5633,4],[6195,8,5633,8],[6195,12,5633,8,"_isFirebaseServerApp"],[6195,24,5633,28],[6195,25,5633,28,"_isFirebaseServerApp"],[6195,45,5633,28],[6195,47,5633,29,"auth"],[6195,51,5633,33],[6195,52,5633,34,"app"],[6195,55,5633,37],[6195,56,5633,38],[6195,58,5633,40],[6196,6,5634,8],[6196,13,5634,15,"Promise"],[6196,20,5634,22],[6196,21,5634,23,"reject"],[6196,27,5634,29],[6196,28,5634,30,"_serverAppCurrentUserOperationNotSupportedError"],[6196,75,5634,77],[6196,76,5634,78,"auth"],[6196,80,5634,82],[6196,81,5634,83],[6196,82,5634,84],[6197,4,5635,4],[6198,4,5636,4],[6198,10,5636,10,"authInternal"],[6198,22,5636,22],[6198,25,5636,25,"_castAuth"],[6198,34,5636,34],[6198,35,5636,35,"auth"],[6198,39,5636,39],[6198,40,5636,40],[6199,4,5637,4],[6199,10,5637,10,"authInternal"],[6199,22,5637,22],[6199,23,5637,23,"_initializationPromise"],[6199,45,5637,45],[6200,4,5638,4],[6200,8,5638,8,"authInternal"],[6200,20,5638,20],[6200,21,5638,21,"currentUser"],[6200,32,5638,32],[6200,34,5638,34,"isAnonymous"],[6200,45,5638,45],[6200,47,5638,47],[6201,6,5639,8],[6202,6,5640,8],[6202,13,5640,15],[6202,17,5640,19,"UserCredentialImpl"],[6202,35,5640,37],[6202,36,5640,38],[6203,8,5641,12,"user"],[6203,12,5641,16],[6203,14,5641,18,"authInternal"],[6203,26,5641,30],[6203,27,5641,31,"currentUser"],[6203,38,5641,42],[6204,8,5642,12,"providerId"],[6204,18,5642,22],[6204,20,5642,24],[6204,24,5642,28],[6205,8,5643,12,"operationType"],[6205,21,5643,25],[6205,23,5643,27],[6205,31,5643,35],[6205,32,5643,36],[6206,6,5644,8],[6206,7,5644,9],[6206,8,5644,10],[6207,4,5645,4],[6208,4,5646,4],[6208,10,5646,10,"response"],[6208,18,5646,18],[6208,21,5646,21],[6208,27,5646,27,"signUp"],[6208,33,5646,33],[6208,34,5646,34,"authInternal"],[6208,46,5646,46],[6208,48,5646,48],[6209,6,5647,8,"returnSecureToken"],[6209,23,5647,25],[6209,25,5647,27],[6210,4,5648,4],[6210,5,5648,5],[6210,6,5648,6],[6211,4,5649,4],[6211,10,5649,10,"userCredential"],[6211,24,5649,24],[6211,27,5649,27],[6211,33,5649,33,"UserCredentialImpl"],[6211,51,5649,51],[6211,52,5649,52,"_fromIdTokenResponse"],[6211,72,5649,72],[6211,73,5649,73,"authInternal"],[6211,85,5649,85],[6211,87,5649,87],[6211,95,5649,95],[6211,96,5649,96],[6211,125,5649,125,"response"],[6211,133,5649,133],[6211,135,5649,135],[6211,139,5649,139],[6211,140,5649,140],[6212,4,5650,4],[6212,10,5650,10,"authInternal"],[6212,22,5650,22],[6212,23,5650,23,"_updateCurrentUser"],[6212,41,5650,41],[6212,42,5650,42,"userCredential"],[6212,56,5650,56],[6212,57,5650,57,"user"],[6212,61,5650,61],[6212,62,5650,62],[6213,4,5651,4],[6213,11,5651,11,"userCredential"],[6213,25,5651,25],[6214,2,5652,0],[6216,2,5654,0],[6217,0,5655,0],[6218,0,5656,0],[6219,0,5657,0],[6220,0,5658,0],[6221,0,5659,0],[6222,0,5660,0],[6223,0,5661,0],[6224,0,5662,0],[6225,0,5663,0],[6226,0,5664,0],[6227,0,5665,0],[6228,0,5666,0],[6229,0,5667,0],[6230,0,5668,0],[6231,0,5669,0],[6232,2,5670,0],[6232,8,5670,6,"MultiFactorError"],[6232,24,5670,22],[6232,33,5670,31,"FirebaseError"],[6232,46,5670,44],[6232,47,5670,44,"FirebaseError"],[6232,60,5670,44],[6232,61,5670,45],[6233,4,5671,4,"constructor"],[6233,15,5671,15,"constructor"],[6233,16,5671,16,"auth"],[6233,20,5671,20],[6233,22,5671,22,"error"],[6233,27,5671,27],[6233,29,5671,29,"operationType"],[6233,42,5671,42],[6233,44,5671,44,"user"],[6233,48,5671,48],[6233,50,5671,50],[6234,6,5672,8],[6234,11,5672,13],[6234,12,5672,14,"error"],[6234,17,5672,19],[6234,18,5672,20,"code"],[6234,22,5672,24],[6234,24,5672,26,"error"],[6234,29,5672,31],[6234,30,5672,32,"message"],[6234,37,5672,39],[6234,38,5672,40],[6235,6,5673,8],[6235,10,5673,12],[6235,11,5673,13,"operationType"],[6235,24,5673,26],[6235,27,5673,29,"operationType"],[6235,40,5673,42],[6236,6,5674,8],[6236,10,5674,12],[6236,11,5674,13,"user"],[6236,15,5674,17],[6236,18,5674,20,"user"],[6236,22,5674,24],[6237,6,5675,8],[6238,6,5676,8,"Object"],[6238,12,5676,14],[6238,13,5676,15,"setPrototypeOf"],[6238,27,5676,29],[6238,28,5676,30],[6238,32,5676,34],[6238,34,5676,36,"MultiFactorError"],[6238,50,5676,52],[6238,51,5676,53,"prototype"],[6238,60,5676,62],[6238,61,5676,63],[6239,6,5677,8],[6239,10,5677,12],[6239,11,5677,13,"customData"],[6239,21,5677,23],[6239,24,5677,26],[6240,8,5678,12,"appName"],[6240,15,5678,19],[6240,17,5678,21,"auth"],[6240,21,5678,25],[6240,22,5678,26,"name"],[6240,26,5678,30],[6241,8,5679,12,"tenantId"],[6241,16,5679,20],[6241,18,5679,22,"auth"],[6241,22,5679,26],[6241,23,5679,27,"tenantId"],[6241,31,5679,35],[6241,35,5679,39,"undefined"],[6241,44,5679,48],[6242,8,5680,12,"_serverResponse"],[6242,23,5680,27],[6242,25,5680,29,"error"],[6242,30,5680,34],[6242,31,5680,35,"customData"],[6242,41,5680,45],[6242,42,5680,46,"_serverResponse"],[6242,57,5680,61],[6243,8,5681,12,"operationType"],[6244,6,5682,8],[6244,7,5682,9],[6245,4,5683,4],[6246,4,5684,4],[6246,11,5684,11,"_fromErrorAndOperation"],[6246,33,5684,33,"_fromErrorAndOperation"],[6246,34,5684,34,"auth"],[6246,38,5684,38],[6246,40,5684,40,"error"],[6246,45,5684,45],[6246,47,5684,47,"operationType"],[6246,60,5684,60],[6246,62,5684,62,"user"],[6246,66,5684,66],[6246,68,5684,68],[6247,6,5685,8],[6247,13,5685,15],[6247,17,5685,19,"MultiFactorError"],[6247,33,5685,35],[6247,34,5685,36,"auth"],[6247,38,5685,40],[6247,40,5685,42,"error"],[6247,45,5685,47],[6247,47,5685,49,"operationType"],[6247,60,5685,62],[6247,62,5685,64,"user"],[6247,66,5685,68],[6247,67,5685,69],[6248,4,5686,4],[6249,2,5687,0],[6250,2,5688,0],[6250,11,5688,9,"_processCredentialSavingMfaContextIfNecessary"],[6250,56,5688,54,"_processCredentialSavingMfaContextIfNecessary"],[6250,57,5688,55,"auth"],[6250,61,5688,59],[6250,63,5688,61,"operationType"],[6250,76,5688,74],[6250,78,5688,76,"credential"],[6250,88,5688,86],[6250,90,5688,88,"user"],[6250,94,5688,92],[6250,96,5688,94],[6251,4,5689,4],[6251,10,5689,10,"idTokenProvider"],[6251,25,5689,25],[6251,28,5689,28,"operationType"],[6251,41,5689,41],[6251,46,5689,46],[6251,62,5689,62],[6251,63,5689,63],[6251,100,5690,10,"credential"],[6251,110,5690,20],[6251,111,5690,21,"_getReauthenticationResolver"],[6251,139,5690,49],[6251,140,5690,50,"auth"],[6251,144,5690,54],[6251,145,5690,55],[6251,148,5691,10,"credential"],[6251,158,5691,20],[6251,159,5691,21,"_getIdTokenResponse"],[6251,178,5691,40],[6251,179,5691,41,"auth"],[6251,183,5691,45],[6251,184,5691,46],[6252,4,5692,4],[6252,11,5692,11,"idTokenProvider"],[6252,26,5692,26],[6252,27,5692,27,"catch"],[6252,32,5692,32],[6252,33,5692,33,"error"],[6252,38,5692,38],[6252,42,5692,42],[6253,6,5693,8],[6253,10,5693,12,"error"],[6253,15,5693,17],[6253,16,5693,18,"code"],[6253,20,5693,22],[6253,25,5693,27],[6253,33,5693,35],[6253,61,5693,63],[6253,62,5693,64],[6253,96,5693,98],[6253,98,5693,100],[6254,8,5694,12],[6254,14,5694,18,"MultiFactorError"],[6254,30,5694,34],[6254,31,5694,35,"_fromErrorAndOperation"],[6254,53,5694,57],[6254,54,5694,58,"auth"],[6254,58,5694,62],[6254,60,5694,64,"error"],[6254,65,5694,69],[6254,67,5694,71,"operationType"],[6254,80,5694,84],[6254,82,5694,86,"user"],[6254,86,5694,90],[6254,87,5694,91],[6255,6,5695,8],[6256,6,5696,8],[6256,12,5696,14,"error"],[6256,17,5696,19],[6257,4,5697,4],[6257,5,5697,5],[6257,6,5697,6],[6258,2,5698,0],[6260,2,5700,0],[6261,0,5701,0],[6262,0,5702,0],[6263,0,5703,0],[6264,0,5704,0],[6265,0,5705,0],[6266,0,5706,0],[6267,0,5707,0],[6268,0,5708,0],[6269,0,5709,0],[6270,0,5710,0],[6271,0,5711,0],[6272,0,5712,0],[6273,0,5713,0],[6274,0,5714,0],[6275,0,5715,0],[6276,2,5716,0],[6277,0,5717,0],[6278,0,5718,0],[6279,2,5719,0],[6279,11,5719,9,"providerDataAsNames"],[6279,30,5719,28,"providerDataAsNames"],[6279,31,5719,29,"providerData"],[6279,43,5719,41],[6279,45,5719,43],[6280,4,5720,4],[6280,11,5720,11],[6280,15,5720,15,"Set"],[6280,18,5720,18],[6280,19,5720,19,"providerData"],[6280,31,5720,31],[6280,32,5721,9,"map"],[6280,35,5721,12],[6280,36,5721,13],[6280,37,5721,14],[6281,6,5721,16,"providerId"],[6282,4,5721,27],[6282,5,5721,28],[6282,10,5721,33,"providerId"],[6282,20,5721,43],[6282,21,5721,44],[6282,22,5722,9,"filter"],[6282,28,5722,15],[6282,29,5722,16,"pid"],[6282,32,5722,19],[6282,36,5722,23],[6282,37,5722,24],[6282,38,5722,25,"pid"],[6282,41,5722,28],[6282,42,5722,29],[6282,43,5722,30],[6283,2,5723,0],[6285,2,5725,0],[6286,0,5726,0],[6287,0,5727,0],[6288,0,5728,0],[6289,0,5729,0],[6290,0,5730,0],[6291,0,5731,0],[6292,0,5732,0],[6293,0,5733,0],[6294,0,5734,0],[6295,0,5735,0],[6296,0,5736,0],[6297,0,5737,0],[6298,0,5738,0],[6299,0,5739,0],[6300,0,5740,0],[6301,2,5741,0],[6302,0,5742,0],[6303,0,5743,0],[6304,0,5744,0],[6305,0,5745,0],[6306,0,5746,0],[6307,0,5747,0],[6308,0,5748,0],[6309,2,5749,0],[6309,17,5749,15,"unlink"],[6309,23,5749,21,"unlink"],[6309,24,5749,22,"user"],[6309,28,5749,26],[6309,30,5749,28,"providerId"],[6309,40,5749,38],[6309,42,5749,40],[6310,4,5750,4],[6310,10,5750,10,"userInternal"],[6310,22,5750,22],[6310,25,5750,25],[6310,29,5750,25,"getModularInstance"],[6310,42,5750,43],[6310,43,5750,43,"getModularInstance"],[6310,61,5750,43],[6310,63,5750,44,"user"],[6310,67,5750,48],[6310,68,5750,49],[6311,4,5751,4],[6311,10,5751,10,"_assertLinkedStatus"],[6311,29,5751,29],[6311,30,5751,30],[6311,34,5751,34],[6311,36,5751,36,"userInternal"],[6311,48,5751,48],[6311,50,5751,50,"providerId"],[6311,60,5751,60],[6311,61,5751,61],[6312,4,5752,4],[6312,10,5752,10],[6313,6,5752,12,"providerUserInfo"],[6314,4,5752,29],[6314,5,5752,30],[6314,8,5752,33],[6314,14,5752,39,"deleteLinkedAccounts"],[6314,34,5752,59],[6314,35,5752,60,"userInternal"],[6314,47,5752,72],[6314,48,5752,73,"auth"],[6314,52,5752,77],[6314,54,5752,79],[6315,6,5753,8,"idToken"],[6315,13,5753,15],[6315,15,5753,17],[6315,21,5753,23,"userInternal"],[6315,33,5753,35],[6315,34,5753,36,"getIdToken"],[6315,44,5753,46],[6315,45,5753,47],[6315,46,5753,48],[6316,6,5754,8,"deleteProvider"],[6316,20,5754,22],[6316,22,5754,24],[6316,23,5754,25,"providerId"],[6316,33,5754,35],[6317,4,5755,4],[6317,5,5755,5],[6317,6,5755,6],[6318,4,5756,4],[6318,10,5756,10,"providersLeft"],[6318,23,5756,23],[6318,26,5756,26,"providerDataAsNames"],[6318,45,5756,45],[6318,46,5756,46,"providerUserInfo"],[6318,62,5756,62],[6318,66,5756,66],[6318,68,5756,68],[6318,69,5756,69],[6319,4,5757,4,"userInternal"],[6319,16,5757,16],[6319,17,5757,17,"providerData"],[6319,29,5757,29],[6319,32,5757,32,"userInternal"],[6319,44,5757,44],[6319,45,5757,45,"providerData"],[6319,57,5757,57],[6319,58,5757,58,"filter"],[6319,64,5757,64],[6319,65,5757,65,"pd"],[6319,67,5757,67],[6319,71,5757,71,"providersLeft"],[6319,84,5757,84],[6319,85,5757,85,"has"],[6319,88,5757,88],[6319,89,5757,89,"pd"],[6319,91,5757,91],[6319,92,5757,92,"providerId"],[6319,102,5757,102],[6319,103,5757,103],[6319,104,5757,104],[6320,4,5758,4],[6320,8,5758,8],[6320,9,5758,9,"providersLeft"],[6320,22,5758,22],[6320,23,5758,23,"has"],[6320,26,5758,26],[6320,27,5758,27],[6320,34,5758,34],[6320,35,5758,35],[6320,57,5758,57],[6320,58,5758,58],[6320,60,5758,60],[6321,6,5759,8,"userInternal"],[6321,18,5759,20],[6321,19,5759,21,"phoneNumber"],[6321,30,5759,32],[6321,33,5759,35],[6321,37,5759,39],[6322,4,5760,4],[6323,4,5761,4],[6323,10,5761,10,"userInternal"],[6323,22,5761,22],[6323,23,5761,23,"auth"],[6323,27,5761,27],[6323,28,5761,28,"_persistUserIfCurrent"],[6323,49,5761,49],[6323,50,5761,50,"userInternal"],[6323,62,5761,62],[6323,63,5761,63],[6324,4,5762,4],[6324,11,5762,11,"userInternal"],[6324,23,5762,23],[6325,2,5763,0],[6326,2,5764,0],[6326,17,5764,15,"_link$1"],[6326,24,5764,22,"_link$1"],[6326,25,5764,23,"user"],[6326,29,5764,27],[6326,31,5764,29,"credential"],[6326,41,5764,39],[6326,43,5764,41,"bypassAuthState"],[6326,58,5764,56],[6326,61,5764,59],[6326,66,5764,64],[6326,68,5764,66],[6327,4,5765,4],[6327,10,5765,10,"response"],[6327,18,5765,18],[6327,21,5765,21],[6327,27,5765,27,"_logoutIfInvalidated"],[6327,47,5765,47],[6327,48,5765,48,"user"],[6327,52,5765,52],[6327,54,5765,54,"credential"],[6327,64,5765,64],[6327,65,5765,65,"_linkToIdToken"],[6327,79,5765,79],[6327,80,5765,80,"user"],[6327,84,5765,84],[6327,85,5765,85,"auth"],[6327,89,5765,89],[6327,91,5765,91],[6327,97,5765,97,"user"],[6327,101,5765,101],[6327,102,5765,102,"getIdToken"],[6327,112,5765,112],[6327,113,5765,113],[6327,114,5765,114],[6327,115,5765,115],[6327,117,5765,117,"bypassAuthState"],[6327,132,5765,132],[6327,133,5765,133],[6328,4,5766,4],[6328,11,5766,11,"UserCredentialImpl"],[6328,29,5766,29],[6328,30,5766,30,"_forOperation"],[6328,43,5766,43],[6328,44,5766,44,"user"],[6328,48,5766,48],[6328,50,5766,50],[6328,56,5766,56],[6328,57,5766,57],[6328,83,5766,83,"response"],[6328,91,5766,91],[6328,92,5766,92],[6329,2,5767,0],[6330,2,5768,0],[6330,17,5768,15,"_assertLinkedStatus"],[6330,36,5768,34,"_assertLinkedStatus"],[6330,37,5768,35,"expected"],[6330,45,5768,43],[6330,47,5768,45,"user"],[6330,51,5768,49],[6330,53,5768,51,"provider"],[6330,61,5768,59],[6330,63,5768,61],[6331,4,5769,4],[6331,10,5769,10,"_reloadWithoutSaving"],[6331,30,5769,30],[6331,31,5769,31,"user"],[6331,35,5769,35],[6331,36,5769,36],[6332,4,5770,4],[6332,10,5770,10,"providerIds"],[6332,21,5770,21],[6332,24,5770,24,"providerDataAsNames"],[6332,43,5770,43],[6332,44,5770,44,"user"],[6332,48,5770,48],[6332,49,5770,49,"providerData"],[6332,61,5770,61],[6332,62,5770,62],[6333,4,5771,4],[6333,10,5771,10,"code"],[6333,14,5771,14],[6333,17,5771,17,"expected"],[6333,25,5771,25],[6333,30,5771,30],[6333,35,5771,35],[6333,38,5772,10],[6333,63,5772,35],[6333,64,5772,36],[6333,110,5773,10],[6333,128,5773,28],[6333,129,5773,29],[6334,4,5774,4,"_assert"],[6334,11,5774,11],[6334,12,5774,12,"providerIds"],[6334,23,5774,23],[6334,24,5774,24,"has"],[6334,27,5774,27],[6334,28,5774,28,"provider"],[6334,36,5774,36],[6334,37,5774,37],[6334,42,5774,42,"expected"],[6334,50,5774,50],[6334,52,5774,52,"user"],[6334,56,5774,56],[6334,57,5774,57,"auth"],[6334,61,5774,61],[6334,63,5774,63,"code"],[6334,67,5774,67],[6334,68,5774,68],[6335,2,5775,0],[6337,2,5777,0],[6338,0,5778,0],[6339,0,5779,0],[6340,0,5780,0],[6341,0,5781,0],[6342,0,5782,0],[6343,0,5783,0],[6344,0,5784,0],[6345,0,5785,0],[6346,0,5786,0],[6347,0,5787,0],[6348,0,5788,0],[6349,0,5789,0],[6350,0,5790,0],[6351,0,5791,0],[6352,0,5792,0],[6353,2,5793,0],[6353,17,5793,15,"_reauthenticate"],[6353,32,5793,30,"_reauthenticate"],[6353,33,5793,31,"user"],[6353,37,5793,35],[6353,39,5793,37,"credential"],[6353,49,5793,47],[6353,51,5793,49,"bypassAuthState"],[6353,66,5793,64],[6353,69,5793,67],[6353,74,5793,72],[6353,76,5793,74],[6354,4,5794,4],[6354,10,5794,10],[6355,6,5794,12,"auth"],[6356,4,5794,17],[6356,5,5794,18],[6356,8,5794,21,"user"],[6356,12,5794,25],[6357,4,5795,4],[6357,8,5795,8],[6357,12,5795,8,"_isFirebaseServerApp"],[6357,24,5795,28],[6357,25,5795,28,"_isFirebaseServerApp"],[6357,45,5795,28],[6357,47,5795,29,"auth"],[6357,51,5795,33],[6357,52,5795,34,"app"],[6357,55,5795,37],[6357,56,5795,38],[6357,58,5795,40],[6358,6,5796,8],[6358,13,5796,15,"Promise"],[6358,20,5796,22],[6358,21,5796,23,"reject"],[6358,27,5796,29],[6358,28,5796,30,"_serverAppCurrentUserOperationNotSupportedError"],[6358,75,5796,77],[6358,76,5796,78,"auth"],[6358,80,5796,82],[6358,81,5796,83],[6358,82,5796,84],[6359,4,5797,4],[6360,4,5798,4],[6360,10,5798,10,"operationType"],[6360,23,5798,23],[6360,26,5798,26],[6360,42,5798,42],[6360,43,5798,43],[6361,4,5799,4],[6361,8,5799,8],[6362,6,5800,8],[6362,12,5800,14,"response"],[6362,20,5800,22],[6362,23,5800,25],[6362,29,5800,31,"_logoutIfInvalidated"],[6362,49,5800,51],[6362,50,5800,52,"user"],[6362,54,5800,56],[6362,56,5800,58,"_processCredentialSavingMfaContextIfNecessary"],[6362,101,5800,103],[6362,102,5800,104,"auth"],[6362,106,5800,108],[6362,108,5800,110,"operationType"],[6362,121,5800,123],[6362,123,5800,125,"credential"],[6362,133,5800,135],[6362,135,5800,137,"user"],[6362,139,5800,141],[6362,140,5800,142],[6362,142,5800,144,"bypassAuthState"],[6362,157,5800,159],[6362,158,5800,160],[6363,6,5801,8,"_assert"],[6363,13,5801,15],[6363,14,5801,16,"response"],[6363,22,5801,24],[6363,23,5801,25,"idToken"],[6363,30,5801,32],[6363,32,5801,34,"auth"],[6363,36,5801,38],[6363,38,5801,40],[6363,54,5801,56],[6363,55,5801,57],[6363,89,5801,91],[6363,90,5801,92],[6364,6,5802,8],[6364,12,5802,14,"parsed"],[6364,18,5802,20],[6364,21,5802,23,"_parseToken"],[6364,32,5802,34],[6364,33,5802,35,"response"],[6364,41,5802,43],[6364,42,5802,44,"idToken"],[6364,49,5802,51],[6364,50,5802,52],[6365,6,5803,8,"_assert"],[6365,13,5803,15],[6365,14,5803,16,"parsed"],[6365,20,5803,22],[6365,22,5803,24,"auth"],[6365,26,5803,28],[6365,28,5803,30],[6365,44,5803,46],[6365,45,5803,47],[6365,79,5803,81],[6365,80,5803,82],[6366,6,5804,8],[6366,12,5804,14],[6367,8,5804,16,"sub"],[6367,11,5804,19],[6367,13,5804,21,"localId"],[6368,6,5804,29],[6368,7,5804,30],[6368,10,5804,33,"parsed"],[6368,16,5804,39],[6369,6,5805,8,"_assert"],[6369,13,5805,15],[6369,14,5805,16,"user"],[6369,18,5805,20],[6369,19,5805,21,"uid"],[6369,22,5805,24],[6369,27,5805,29,"localId"],[6369,34,5805,36],[6369,36,5805,38,"auth"],[6369,40,5805,42],[6369,42,5805,44],[6369,57,5805,59],[6369,58,5805,60],[6369,91,5805,93],[6369,92,5805,94],[6370,6,5806,8],[6370,13,5806,15,"UserCredentialImpl"],[6370,31,5806,33],[6370,32,5806,34,"_forOperation"],[6370,45,5806,47],[6370,46,5806,48,"user"],[6370,50,5806,52],[6370,52,5806,54,"operationType"],[6370,65,5806,67],[6370,67,5806,69,"response"],[6370,75,5806,77],[6370,76,5806,78],[6371,4,5807,4],[6371,5,5807,5],[6371,6,5808,4],[6371,13,5808,11,"e"],[6371,14,5808,12],[6371,16,5808,14],[6372,6,5809,8],[6373,6,5810,8],[6373,10,5810,12,"e"],[6373,11,5810,13],[6373,13,5810,15,"code"],[6373,17,5810,19],[6373,22,5810,24],[6373,30,5810,32],[6373,46,5810,48],[6373,47,5810,49],[6373,81,5810,83],[6373,83,5810,85],[6374,8,5811,12,"_fail"],[6374,13,5811,17],[6374,14,5811,18,"auth"],[6374,18,5811,22],[6374,20,5811,24],[6374,35,5811,39],[6374,36,5811,40],[6374,69,5811,73],[6374,70,5811,74],[6375,6,5812,8],[6376,6,5813,8],[6376,12,5813,14,"e"],[6376,13,5813,15],[6377,4,5814,4],[6378,2,5815,0],[6380,2,5817,0],[6381,0,5818,0],[6382,0,5819,0],[6383,0,5820,0],[6384,0,5821,0],[6385,0,5822,0],[6386,0,5823,0],[6387,0,5824,0],[6388,0,5825,0],[6389,0,5826,0],[6390,0,5827,0],[6391,0,5828,0],[6392,0,5829,0],[6393,0,5830,0],[6394,0,5831,0],[6395,0,5832,0],[6396,2,5833,0],[6396,17,5833,15,"_signInWithCredential"],[6396,38,5833,36,"_signInWithCredential"],[6396,39,5833,37,"auth"],[6396,43,5833,41],[6396,45,5833,43,"credential"],[6396,55,5833,53],[6396,57,5833,55,"bypassAuthState"],[6396,72,5833,70],[6396,75,5833,73],[6396,80,5833,78],[6396,82,5833,80],[6397,4,5834,4],[6397,8,5834,8],[6397,12,5834,8,"_isFirebaseServerApp"],[6397,24,5834,28],[6397,25,5834,28,"_isFirebaseServerApp"],[6397,45,5834,28],[6397,47,5834,29,"auth"],[6397,51,5834,33],[6397,52,5834,34,"app"],[6397,55,5834,37],[6397,56,5834,38],[6397,58,5834,40],[6398,6,5835,8],[6398,13,5835,15,"Promise"],[6398,20,5835,22],[6398,21,5835,23,"reject"],[6398,27,5835,29],[6398,28,5835,30,"_serverAppCurrentUserOperationNotSupportedError"],[6398,75,5835,77],[6398,76,5835,78,"auth"],[6398,80,5835,82],[6398,81,5835,83],[6398,82,5835,84],[6399,4,5836,4],[6400,4,5837,4],[6400,10,5837,10,"operationType"],[6400,23,5837,23],[6400,26,5837,26],[6400,34,5837,34],[6400,35,5837,35],[6401,4,5838,4],[6401,10,5838,10,"response"],[6401,18,5838,18],[6401,21,5838,21],[6401,27,5838,27,"_processCredentialSavingMfaContextIfNecessary"],[6401,72,5838,72],[6401,73,5838,73,"auth"],[6401,77,5838,77],[6401,79,5838,79,"operationType"],[6401,92,5838,92],[6401,94,5838,94,"credential"],[6401,104,5838,104],[6401,105,5838,105],[6402,4,5839,4],[6402,10,5839,10,"userCredential"],[6402,24,5839,24],[6402,27,5839,27],[6402,33,5839,33,"UserCredentialImpl"],[6402,51,5839,51],[6402,52,5839,52,"_fromIdTokenResponse"],[6402,72,5839,72],[6402,73,5839,73,"auth"],[6402,77,5839,77],[6402,79,5839,79,"operationType"],[6402,92,5839,92],[6402,94,5839,94,"response"],[6402,102,5839,102],[6402,103,5839,103],[6403,4,5840,4],[6403,8,5840,8],[6403,9,5840,9,"bypassAuthState"],[6403,24,5840,24],[6403,26,5840,26],[6404,6,5841,8],[6404,12,5841,14,"auth"],[6404,16,5841,18],[6404,17,5841,19,"_updateCurrentUser"],[6404,35,5841,37],[6404,36,5841,38,"userCredential"],[6404,50,5841,52],[6404,51,5841,53,"user"],[6404,55,5841,57],[6404,56,5841,58],[6405,4,5842,4],[6406,4,5843,4],[6406,11,5843,11,"userCredential"],[6406,25,5843,25],[6407,2,5844,0],[6408,2,5845,0],[6409,0,5846,0],[6410,0,5847,0],[6411,0,5848,0],[6412,0,5849,0],[6413,0,5850,0],[6414,0,5851,0],[6415,0,5852,0],[6416,0,5853,0],[6417,0,5854,0],[6418,0,5855,0],[6419,0,5856,0],[6420,0,5857,0],[6421,0,5858,0],[6422,2,5859,0],[6422,17,5859,15,"signInWithCredential"],[6422,37,5859,35,"signInWithCredential"],[6422,38,5859,36,"auth"],[6422,42,5859,40],[6422,44,5859,42,"credential"],[6422,54,5859,52],[6422,56,5859,54],[6423,4,5860,4],[6423,11,5860,11,"_signInWithCredential"],[6423,32,5860,32],[6423,33,5860,33,"_castAuth"],[6423,42,5860,42],[6423,43,5860,43,"auth"],[6423,47,5860,47],[6423,48,5860,48],[6423,50,5860,50,"credential"],[6423,60,5860,60],[6423,61,5860,61],[6424,2,5861,0],[6425,2,5862,0],[6426,0,5863,0],[6427,0,5864,0],[6428,0,5865,0],[6429,0,5866,0],[6430,0,5867,0],[6431,0,5868,0],[6432,0,5869,0],[6433,0,5870,0],[6434,0,5871,0],[6435,0,5872,0],[6436,2,5873,0],[6436,17,5873,15,"linkWithCredential"],[6436,35,5873,33,"linkWithCredential"],[6436,36,5873,34,"user"],[6436,40,5873,38],[6436,42,5873,40,"credential"],[6436,52,5873,50],[6436,54,5873,52],[6437,4,5874,4],[6437,10,5874,10,"userInternal"],[6437,22,5874,22],[6437,25,5874,25],[6437,29,5874,25,"getModularInstance"],[6437,42,5874,43],[6437,43,5874,43,"getModularInstance"],[6437,61,5874,43],[6437,63,5874,44,"user"],[6437,67,5874,48],[6437,68,5874,49],[6438,4,5875,4],[6438,10,5875,10,"_assertLinkedStatus"],[6438,29,5875,29],[6438,30,5875,30],[6438,35,5875,35],[6438,37,5875,37,"userInternal"],[6438,49,5875,49],[6438,51,5875,51,"credential"],[6438,61,5875,61],[6438,62,5875,62,"providerId"],[6438,72,5875,72],[6438,73,5875,73],[6439,4,5876,4],[6439,11,5876,11,"_link$1"],[6439,18,5876,18],[6439,19,5876,19,"userInternal"],[6439,31,5876,31],[6439,33,5876,33,"credential"],[6439,43,5876,43],[6439,44,5876,44],[6440,2,5877,0],[6441,2,5878,0],[6442,0,5879,0],[6443,0,5880,0],[6444,0,5881,0],[6445,0,5882,0],[6446,0,5883,0],[6447,0,5884,0],[6448,0,5885,0],[6449,0,5886,0],[6450,0,5887,0],[6451,0,5888,0],[6452,0,5889,0],[6453,0,5890,0],[6454,0,5891,0],[6455,0,5892,0],[6456,0,5893,0],[6457,2,5894,0],[6457,17,5894,15,"reauthenticateWithCredential"],[6457,45,5894,43,"reauthenticateWithCredential"],[6457,46,5894,44,"user"],[6457,50,5894,48],[6457,52,5894,50,"credential"],[6457,62,5894,60],[6457,64,5894,62],[6458,4,5895,4],[6458,11,5895,11,"_reauthenticate"],[6458,26,5895,26],[6458,27,5895,27],[6458,31,5895,27,"getModularInstance"],[6458,44,5895,45],[6458,45,5895,45,"getModularInstance"],[6458,63,5895,45],[6458,65,5895,46,"user"],[6458,69,5895,50],[6458,70,5895,51],[6458,72,5895,53,"credential"],[6458,82,5895,63],[6458,83,5895,64],[6459,2,5896,0],[6461,2,5898,0],[6462,0,5899,0],[6463,0,5900,0],[6464,0,5901,0],[6465,0,5902,0],[6466,0,5903,0],[6467,0,5904,0],[6468,0,5905,0],[6469,0,5906,0],[6470,0,5907,0],[6471,0,5908,0],[6472,0,5909,0],[6473,0,5910,0],[6474,0,5911,0],[6475,0,5912,0],[6476,0,5913,0],[6477,2,5914,0],[6477,17,5914,15,"signInWithCustomToken$1"],[6477,40,5914,38,"signInWithCustomToken$1"],[6477,41,5914,39,"auth"],[6477,45,5914,43],[6477,47,5914,45,"request"],[6477,54,5914,52],[6477,56,5914,54],[6478,4,5915,4],[6478,11,5915,11,"_performSignInRequest"],[6478,32,5915,32],[6478,33,5915,33,"auth"],[6478,37,5915,37],[6478,39,5915,39],[6478,45,5915,45],[6478,46,5915,46],[6478,69,5915,69],[6478,105,5915,105],[6478,106,5915,106],[6478,148,5915,148,"_addTidIfNecessary"],[6478,166,5915,166],[6478,167,5915,167,"auth"],[6478,171,5915,171],[6478,173,5915,173,"request"],[6478,180,5915,180],[6478,181,5915,181],[6478,182,5915,182],[6479,2,5916,0],[6481,2,5918,0],[6482,0,5919,0],[6483,0,5920,0],[6484,0,5921,0],[6485,0,5922,0],[6486,0,5923,0],[6487,0,5924,0],[6488,0,5925,0],[6489,0,5926,0],[6490,0,5927,0],[6491,0,5928,0],[6492,0,5929,0],[6493,0,5930,0],[6494,0,5931,0],[6495,0,5932,0],[6496,0,5933,0],[6497,2,5934,0],[6498,0,5935,0],[6499,0,5936,0],[6500,0,5937,0],[6501,0,5938,0],[6502,0,5939,0],[6503,0,5940,0],[6504,0,5941,0],[6505,0,5942,0],[6506,0,5943,0],[6507,0,5944,0],[6508,0,5945,0],[6509,0,5946,0],[6510,0,5947,0],[6511,0,5948,0],[6512,0,5949,0],[6513,0,5950,0],[6514,0,5951,0],[6515,0,5952,0],[6516,2,5953,0],[6516,17,5953,15,"signInWithCustomToken"],[6516,38,5953,36,"signInWithCustomToken"],[6516,39,5953,37,"auth"],[6516,43,5953,41],[6516,45,5953,43,"customToken"],[6516,56,5953,54],[6516,58,5953,56],[6517,4,5954,4],[6517,8,5954,8],[6517,12,5954,8,"_isFirebaseServerApp"],[6517,24,5954,28],[6517,25,5954,28,"_isFirebaseServerApp"],[6517,45,5954,28],[6517,47,5954,29,"auth"],[6517,51,5954,33],[6517,52,5954,34,"app"],[6517,55,5954,37],[6517,56,5954,38],[6517,58,5954,40],[6518,6,5955,8],[6518,13,5955,15,"Promise"],[6518,20,5955,22],[6518,21,5955,23,"reject"],[6518,27,5955,29],[6518,28,5955,30,"_serverAppCurrentUserOperationNotSupportedError"],[6518,75,5955,77],[6518,76,5955,78,"auth"],[6518,80,5955,82],[6518,81,5955,83],[6518,82,5955,84],[6519,4,5956,4],[6520,4,5957,4],[6520,10,5957,10,"authInternal"],[6520,22,5957,22],[6520,25,5957,25,"_castAuth"],[6520,34,5957,34],[6520,35,5957,35,"auth"],[6520,39,5957,39],[6520,40,5957,40],[6521,4,5958,4],[6521,10,5958,10,"response"],[6521,18,5958,18],[6521,21,5958,21],[6521,27,5958,27,"signInWithCustomToken$1"],[6521,50,5958,50],[6521,51,5958,51,"authInternal"],[6521,63,5958,63],[6521,65,5958,65],[6522,6,5959,8,"token"],[6522,11,5959,13],[6522,13,5959,15,"customToken"],[6522,24,5959,26],[6523,6,5960,8,"returnSecureToken"],[6523,23,5960,25],[6523,25,5960,27],[6524,4,5961,4],[6524,5,5961,5],[6524,6,5961,6],[6525,4,5962,4],[6525,10,5962,10,"cred"],[6525,14,5962,14],[6525,17,5962,17],[6525,23,5962,23,"UserCredentialImpl"],[6525,41,5962,41],[6525,42,5962,42,"_fromIdTokenResponse"],[6525,62,5962,62],[6525,63,5962,63,"authInternal"],[6525,75,5962,75],[6525,77,5962,77],[6525,85,5962,85],[6525,86,5962,86],[6525,115,5962,115,"response"],[6525,123,5962,123],[6525,124,5962,124],[6526,4,5963,4],[6526,10,5963,10,"authInternal"],[6526,22,5963,22],[6526,23,5963,23,"_updateCurrentUser"],[6526,41,5963,41],[6526,42,5963,42,"cred"],[6526,46,5963,46],[6526,47,5963,47,"user"],[6526,51,5963,51],[6526,52,5963,52],[6527,4,5964,4],[6527,11,5964,11,"cred"],[6527,15,5964,15],[6528,2,5965,0],[6530,2,5967,0],[6531,0,5968,0],[6532,0,5969,0],[6533,0,5970,0],[6534,0,5971,0],[6535,0,5972,0],[6536,0,5973,0],[6537,0,5974,0],[6538,0,5975,0],[6539,0,5976,0],[6540,0,5977,0],[6541,0,5978,0],[6542,0,5979,0],[6543,0,5980,0],[6544,0,5981,0],[6545,0,5982,0],[6546,2,5983,0],[6546,8,5983,6,"MultiFactorInfoImpl"],[6546,27,5983,25],[6546,28,5983,26],[6547,4,5984,4,"constructor"],[6547,15,5984,15,"constructor"],[6547,16,5984,16,"factorId"],[6547,24,5984,24],[6547,26,5984,26,"response"],[6547,34,5984,34],[6547,36,5984,36],[6548,6,5985,8],[6548,10,5985,12],[6548,11,5985,13,"factorId"],[6548,19,5985,21],[6548,22,5985,24,"factorId"],[6548,30,5985,32],[6549,6,5986,8],[6549,10,5986,12],[6549,11,5986,13,"uid"],[6549,14,5986,16],[6549,17,5986,19,"response"],[6549,25,5986,27],[6549,26,5986,28,"mfaEnrollmentId"],[6549,41,5986,43],[6550,6,5987,8],[6550,10,5987,12],[6550,11,5987,13,"enrollmentTime"],[6550,25,5987,27],[6550,28,5987,30],[6550,32,5987,34,"Date"],[6550,36,5987,38],[6550,37,5987,39,"response"],[6550,45,5987,47],[6550,46,5987,48,"enrolledAt"],[6550,56,5987,58],[6550,57,5987,59],[6550,58,5987,60,"toUTCString"],[6550,69,5987,71],[6550,70,5987,72],[6550,71,5987,73],[6551,6,5988,8],[6551,10,5988,12],[6551,11,5988,13,"displayName"],[6551,22,5988,24],[6551,25,5988,27,"response"],[6551,33,5988,35],[6551,34,5988,36,"displayName"],[6551,45,5988,47],[6552,4,5989,4],[6553,4,5990,4],[6553,11,5990,11,"_fromServerResponse"],[6553,30,5990,30,"_fromServerResponse"],[6553,31,5990,31,"auth"],[6553,35,5990,35],[6553,37,5990,37,"enrollment"],[6553,47,5990,47],[6553,49,5990,49],[6554,6,5991,8],[6554,10,5991,12],[6554,21,5991,23],[6554,25,5991,27,"enrollment"],[6554,35,5991,37],[6554,37,5991,39],[6555,8,5992,12],[6555,15,5992,19,"PhoneMultiFactorInfoImpl"],[6555,39,5992,43],[6555,40,5992,44,"_fromServerResponse"],[6555,59,5992,63],[6555,60,5992,64,"auth"],[6555,64,5992,68],[6555,66,5992,70,"enrollment"],[6555,76,5992,80],[6555,77,5992,81],[6556,6,5993,8],[6556,7,5993,9],[6556,13,5994,13],[6556,17,5994,17],[6556,27,5994,27],[6556,31,5994,31,"enrollment"],[6556,41,5994,41],[6556,43,5994,43],[6557,8,5995,12],[6557,15,5995,19,"TotpMultiFactorInfoImpl"],[6557,38,5995,42],[6557,39,5995,43,"_fromServerResponse"],[6557,58,5995,62],[6557,59,5995,63,"auth"],[6557,63,5995,67],[6557,65,5995,69,"enrollment"],[6557,75,5995,79],[6557,76,5995,80],[6558,6,5996,8],[6559,6,5997,8],[6559,13,5997,15,"_fail"],[6559,18,5997,20],[6559,19,5997,21,"auth"],[6559,23,5997,25],[6559,25,5997,27],[6559,41,5997,43],[6559,42,5997,44],[6559,76,5997,78],[6559,77,5997,79],[6560,4,5998,4],[6561,2,5999,0],[6562,2,6000,0],[6562,8,6000,6,"PhoneMultiFactorInfoImpl"],[6562,32,6000,30],[6562,41,6000,39,"MultiFactorInfoImpl"],[6562,60,6000,58],[6562,61,6000,59],[6563,4,6001,4,"constructor"],[6563,15,6001,15,"constructor"],[6563,16,6001,16,"response"],[6563,24,6001,24],[6563,26,6001,26],[6564,6,6002,8],[6564,11,6002,13],[6564,12,6002,14],[6564,19,6002,21],[6564,20,6002,22],[6564,42,6002,44,"response"],[6564,50,6002,52],[6564,51,6002,53],[6565,6,6003,8],[6565,10,6003,12],[6565,11,6003,13,"phoneNumber"],[6565,22,6003,24],[6565,25,6003,27,"response"],[6565,33,6003,35],[6565,34,6003,36,"phoneInfo"],[6565,43,6003,45],[6566,4,6004,4],[6567,4,6005,4],[6567,11,6005,11,"_fromServerResponse"],[6567,30,6005,30,"_fromServerResponse"],[6567,31,6005,31,"_auth"],[6567,36,6005,36],[6567,38,6005,38,"enrollment"],[6567,48,6005,48],[6567,50,6005,50],[6568,6,6006,8],[6568,13,6006,15],[6568,17,6006,19,"PhoneMultiFactorInfoImpl"],[6568,41,6006,43],[6568,42,6006,44,"enrollment"],[6568,52,6006,54],[6568,53,6006,55],[6569,4,6007,4],[6570,2,6008,0],[6571,2,6009,0],[6571,8,6009,6,"TotpMultiFactorInfoImpl"],[6571,31,6009,29],[6571,40,6009,38,"MultiFactorInfoImpl"],[6571,59,6009,57],[6571,60,6009,58],[6572,4,6010,4,"constructor"],[6572,15,6010,15,"constructor"],[6572,16,6010,16,"response"],[6572,24,6010,24],[6572,26,6010,26],[6573,6,6011,8],[6573,11,6011,13],[6573,12,6011,14],[6573,18,6011,20],[6573,19,6011,21],[6573,40,6011,42,"response"],[6573,48,6011,50],[6573,49,6011,51],[6574,4,6012,4],[6575,4,6013,4],[6575,11,6013,11,"_fromServerResponse"],[6575,30,6013,30,"_fromServerResponse"],[6575,31,6013,31,"_auth"],[6575,36,6013,36],[6575,38,6013,38,"enrollment"],[6575,48,6013,48],[6575,50,6013,50],[6576,6,6014,8],[6576,13,6014,15],[6576,17,6014,19,"TotpMultiFactorInfoImpl"],[6576,40,6014,42],[6576,41,6014,43,"enrollment"],[6576,51,6014,53],[6576,52,6014,54],[6577,4,6015,4],[6578,2,6016,0],[6580,2,6018,0],[6581,0,6019,0],[6582,0,6020,0],[6583,0,6021,0],[6584,0,6022,0],[6585,0,6023,0],[6586,0,6024,0],[6587,0,6025,0],[6588,0,6026,0],[6589,0,6027,0],[6590,0,6028,0],[6591,0,6029,0],[6592,0,6030,0],[6593,0,6031,0],[6594,0,6032,0],[6595,0,6033,0],[6596,2,6034,0],[6596,11,6034,9,"_setActionCodeSettingsOnRequest"],[6596,42,6034,40,"_setActionCodeSettingsOnRequest"],[6596,43,6034,41,"auth"],[6596,47,6034,45],[6596,49,6034,47,"request"],[6596,56,6034,54],[6596,58,6034,56,"actionCodeSettings"],[6596,76,6034,74],[6596,78,6034,76],[6597,4,6035,4,"_assert"],[6597,11,6035,11],[6597,12,6035,12,"actionCodeSettings"],[6597,30,6035,30],[6597,31,6035,31,"url"],[6597,34,6035,34],[6597,36,6035,36,"length"],[6597,42,6035,42],[6597,45,6035,45],[6597,46,6035,46],[6597,48,6035,48,"auth"],[6597,52,6035,52],[6597,54,6035,54],[6597,76,6035,76],[6597,77,6035,77],[6597,117,6035,117],[6597,118,6035,118],[6598,4,6036,4,"_assert"],[6598,11,6036,11],[6598,12,6036,12],[6598,19,6036,19,"actionCodeSettings"],[6598,37,6036,37],[6598,38,6036,38,"dynamicLinkDomain"],[6598,55,6036,55],[6598,60,6036,60],[6598,71,6036,71],[6598,75,6037,8,"actionCodeSettings"],[6598,93,6037,26],[6598,94,6037,27,"dynamicLinkDomain"],[6598,111,6037,44],[6598,112,6037,45,"length"],[6598,118,6037,51],[6598,121,6037,54],[6598,122,6037,55],[6598,124,6037,57,"auth"],[6598,128,6037,61],[6598,130,6037,63],[6598,159,6037,92],[6598,160,6037,93],[6598,207,6037,140],[6598,208,6037,141],[6599,4,6038,4,"_assert"],[6599,11,6038,11],[6599,12,6038,12],[6599,19,6038,19,"actionCodeSettings"],[6599,37,6038,37],[6599,38,6038,38,"linkDomain"],[6599,48,6038,48],[6599,53,6038,53],[6599,64,6038,64],[6599,68,6039,8,"actionCodeSettings"],[6599,86,6039,26],[6599,87,6039,27,"linkDomain"],[6599,97,6039,37],[6599,98,6039,38,"length"],[6599,104,6039,44],[6599,107,6039,47],[6599,108,6039,48],[6599,110,6039,50,"auth"],[6599,114,6039,54],[6599,116,6039,56],[6599,145,6039,85],[6599,146,6039,86],[6599,193,6039,133],[6599,194,6039,134],[6600,4,6040,4,"request"],[6600,11,6040,11],[6600,12,6040,12,"continueUrl"],[6600,23,6040,23],[6600,26,6040,26,"actionCodeSettings"],[6600,44,6040,44],[6600,45,6040,45,"url"],[6600,48,6040,48],[6601,4,6041,4,"request"],[6601,11,6041,11],[6601,12,6041,12,"dynamicLinkDomain"],[6601,29,6041,29],[6601,32,6041,32,"actionCodeSettings"],[6601,50,6041,50],[6601,51,6041,51,"dynamicLinkDomain"],[6601,68,6041,68],[6602,4,6042,4,"request"],[6602,11,6042,11],[6602,12,6042,12,"linkDomain"],[6602,22,6042,22],[6602,25,6042,25,"actionCodeSettings"],[6602,43,6042,43],[6602,44,6042,44,"linkDomain"],[6602,54,6042,54],[6603,4,6043,4,"request"],[6603,11,6043,11],[6603,12,6043,12,"canHandleCodeInApp"],[6603,30,6043,30],[6603,33,6043,33,"actionCodeSettings"],[6603,51,6043,51],[6603,52,6043,52,"handleCodeInApp"],[6603,67,6043,67],[6604,4,6044,4],[6604,8,6044,8,"actionCodeSettings"],[6604,26,6044,26],[6604,27,6044,27,"iOS"],[6604,30,6044,30],[6604,32,6044,32],[6605,6,6045,8,"_assert"],[6605,13,6045,15],[6605,14,6045,16,"actionCodeSettings"],[6605,32,6045,34],[6605,33,6045,35,"iOS"],[6605,36,6045,38],[6605,37,6045,39,"bundleId"],[6605,45,6045,47],[6605,46,6045,48,"length"],[6605,52,6045,54],[6605,55,6045,57],[6605,56,6045,58],[6605,58,6045,60,"auth"],[6605,62,6045,64],[6605,64,6045,66],[6605,87,6045,89],[6605,88,6045,90],[6605,129,6045,131],[6605,130,6045,132],[6606,6,6046,8,"request"],[6606,13,6046,15],[6606,14,6046,16,"iOSBundleId"],[6606,25,6046,27],[6606,28,6046,30,"actionCodeSettings"],[6606,46,6046,48],[6606,47,6046,49,"iOS"],[6606,50,6046,52],[6606,51,6046,53,"bundleId"],[6606,59,6046,61],[6607,4,6047,4],[6608,4,6048,4],[6608,8,6048,8,"actionCodeSettings"],[6608,26,6048,26],[6608,27,6048,27,"android"],[6608,34,6048,34],[6608,36,6048,36],[6609,6,6049,8,"_assert"],[6609,13,6049,15],[6609,14,6049,16,"actionCodeSettings"],[6609,32,6049,34],[6609,33,6049,35,"android"],[6609,40,6049,42],[6609,41,6049,43,"packageName"],[6609,52,6049,54],[6609,53,6049,55,"length"],[6609,59,6049,61],[6609,62,6049,64],[6609,63,6049,65],[6609,65,6049,67,"auth"],[6609,69,6049,71],[6609,71,6049,73],[6609,97,6049,99],[6609,98,6049,100],[6609,146,6049,148],[6609,147,6049,149],[6610,6,6050,8,"request"],[6610,13,6050,15],[6610,14,6050,16,"androidInstallApp"],[6610,31,6050,33],[6610,34,6050,36,"actionCodeSettings"],[6610,52,6050,54],[6610,53,6050,55,"android"],[6610,60,6050,62],[6610,61,6050,63,"installApp"],[6610,71,6050,73],[6611,6,6051,8,"request"],[6611,13,6051,15],[6611,14,6051,16,"androidMinimumVersionCode"],[6611,39,6051,41],[6611,42,6052,12,"actionCodeSettings"],[6611,60,6052,30],[6611,61,6052,31,"android"],[6611,68,6052,38],[6611,69,6052,39,"minimumVersion"],[6611,83,6052,53],[6612,6,6053,8,"request"],[6612,13,6053,15],[6612,14,6053,16,"androidPackageName"],[6612,32,6053,34],[6612,35,6053,37,"actionCodeSettings"],[6612,53,6053,55],[6612,54,6053,56,"android"],[6612,61,6053,63],[6612,62,6053,64,"packageName"],[6612,73,6053,75],[6613,4,6054,4],[6614,2,6055,0],[6616,2,6057,0],[6617,0,6058,0],[6618,0,6059,0],[6619,0,6060,0],[6620,0,6061,0],[6621,0,6062,0],[6622,0,6063,0],[6623,0,6064,0],[6624,0,6065,0],[6625,0,6066,0],[6626,0,6067,0],[6627,0,6068,0],[6628,0,6069,0],[6629,0,6070,0],[6630,0,6071,0],[6631,0,6072,0],[6632,2,6073,0],[6633,0,6074,0],[6634,0,6075,0],[6635,0,6076,0],[6636,0,6077,0],[6637,0,6078,0],[6638,0,6079,0],[6639,0,6080,0],[6640,0,6081,0],[6641,0,6082,0],[6642,0,6083,0],[6643,0,6084,0],[6644,0,6085,0],[6645,2,6086,0],[6645,17,6086,15,"recachePasswordPolicy"],[6645,38,6086,36,"recachePasswordPolicy"],[6645,39,6086,37,"auth"],[6645,43,6086,41],[6645,45,6086,43],[6646,4,6087,4],[6646,10,6087,10,"authInternal"],[6646,22,6087,22],[6646,25,6087,25,"_castAuth"],[6646,34,6087,34],[6646,35,6087,35,"auth"],[6646,39,6087,39],[6646,40,6087,40],[6647,4,6088,4],[6647,8,6088,8,"authInternal"],[6647,20,6088,20],[6647,21,6088,21,"_getPasswordPolicyInternal"],[6647,47,6088,47],[6647,48,6088,48],[6647,49,6088,49],[6647,51,6088,51],[6648,6,6089,8],[6648,12,6089,14,"authInternal"],[6648,24,6089,26],[6648,25,6089,27,"_updatePasswordPolicy"],[6648,46,6089,48],[6648,47,6089,49],[6648,48,6089,50],[6649,4,6090,4],[6650,2,6091,0],[6651,2,6092,0],[6652,0,6093,0],[6653,0,6094,0],[6654,0,6095,0],[6655,0,6096,0],[6656,0,6097,0],[6657,0,6098,0],[6658,0,6099,0],[6659,0,6100,0],[6660,0,6101,0],[6661,0,6102,0],[6662,0,6103,0],[6663,0,6104,0],[6664,0,6105,0],[6665,0,6106,0],[6666,0,6107,0],[6667,0,6108,0],[6668,0,6109,0],[6669,0,6110,0],[6670,0,6111,0],[6671,0,6112,0],[6672,0,6113,0],[6673,0,6114,0],[6674,0,6115,0],[6675,0,6116,0],[6676,0,6117,0],[6677,0,6118,0],[6678,0,6119,0],[6679,0,6120,0],[6680,0,6121,0],[6681,0,6122,0],[6682,0,6123,0],[6683,0,6124,0],[6684,0,6125,0],[6685,0,6126,0],[6686,2,6127,0],[6686,17,6127,15,"sendPasswordResetEmail"],[6686,39,6127,37,"sendPasswordResetEmail"],[6686,40,6127,38,"auth"],[6686,44,6127,42],[6686,46,6127,44,"email"],[6686,51,6127,49],[6686,53,6127,51,"actionCodeSettings"],[6686,71,6127,69],[6686,73,6127,71],[6687,4,6128,4],[6687,10,6128,10,"authInternal"],[6687,22,6128,22],[6687,25,6128,25,"_castAuth"],[6687,34,6128,34],[6687,35,6128,35,"auth"],[6687,39,6128,39],[6687,40,6128,40],[6688,4,6129,4],[6688,10,6129,10,"request"],[6688,17,6129,17],[6688,20,6129,20],[6689,6,6130,8,"requestType"],[6689,17,6130,19],[6689,19,6130,21],[6689,35,6130,37],[6689,36,6130,38],[6690,6,6131,8,"email"],[6690,11,6131,13],[6691,6,6132,8,"clientType"],[6691,16,6132,18],[6691,18,6132,20],[6691,35,6132,37],[6691,36,6132,38],[6692,4,6133,4],[6692,5,6133,5],[6693,4,6134,4],[6693,8,6134,8,"actionCodeSettings"],[6693,26,6134,26],[6693,28,6134,28],[6694,6,6135,8,"_setActionCodeSettingsOnRequest"],[6694,37,6135,39],[6694,38,6135,40,"authInternal"],[6694,50,6135,52],[6694,52,6135,54,"request"],[6694,59,6135,61],[6694,61,6135,63,"actionCodeSettings"],[6694,79,6135,81],[6694,80,6135,82],[6695,4,6136,4],[6696,4,6137,4],[6696,10,6137,10,"handleRecaptchaFlow"],[6696,29,6137,29],[6696,30,6137,30,"authInternal"],[6696,42,6137,42],[6696,44,6137,44,"request"],[6696,51,6137,51],[6696,53,6137,53],[6696,65,6137,65],[6696,66,6137,66],[6696,106,6137,106,"sendPasswordResetEmail$1"],[6696,130,6137,130],[6696,132,6137,132],[6696,157,6137,157],[6696,158,6137,158],[6696,209,6137,209],[6696,210,6137,210],[6697,2,6138,0],[6698,2,6139,0],[6699,0,6140,0],[6700,0,6141,0],[6701,0,6142,0],[6702,0,6143,0],[6703,0,6144,0],[6704,0,6145,0],[6705,0,6146,0],[6706,0,6147,0],[6707,2,6148,0],[6707,17,6148,15,"confirmPasswordReset"],[6707,37,6148,35,"confirmPasswordReset"],[6707,38,6148,36,"auth"],[6707,42,6148,40],[6707,44,6148,42,"oobCode"],[6707,51,6148,49],[6707,53,6148,51,"newPassword"],[6707,64,6148,62],[6707,66,6148,64],[6708,4,6149,4],[6708,10,6149,10,"resetPassword"],[6708,23,6149,23],[6708,24,6149,24],[6708,28,6149,24,"getModularInstance"],[6708,41,6149,42],[6708,42,6149,42,"getModularInstance"],[6708,60,6149,42],[6708,62,6149,43,"auth"],[6708,66,6149,47],[6708,67,6149,48],[6708,69,6149,50],[6709,6,6150,8,"oobCode"],[6709,13,6150,15],[6710,6,6151,8,"newPassword"],[6711,4,6152,4],[6711,5,6152,5],[6711,6,6152,6],[6711,7,6153,9,"catch"],[6711,12,6153,14],[6711,13,6153,15],[6711,19,6153,22,"error"],[6711,24,6153,27],[6711,28,6153,32],[6712,6,6154,8],[6712,10,6154,12,"error"],[6712,15,6154,17],[6712,16,6154,18,"code"],[6712,20,6154,22],[6712,25,6155,12],[6712,33,6155,20],[6712,70,6155,57],[6712,71,6155,58],[6712,128,6155,115],[6712,130,6155,117],[6713,8,6156,12],[6713,13,6156,17,"recachePasswordPolicy"],[6713,34,6156,38],[6713,35,6156,39,"auth"],[6713,39,6156,43],[6713,40,6156,44],[6714,6,6157,8],[6715,6,6158,8],[6715,12,6158,14,"error"],[6715,17,6158,19],[6716,4,6159,4],[6716,5,6159,5],[6716,6,6159,6],[6717,4,6160,4],[6718,2,6161,0],[6719,2,6162,0],[6720,0,6163,0],[6721,0,6164,0],[6722,0,6165,0],[6723,0,6166,0],[6724,0,6167,0],[6725,0,6168,0],[6726,0,6169,0],[6727,2,6170,0],[6727,17,6170,15,"applyActionCode"],[6727,32,6170,30,"applyActionCode"],[6727,33,6170,31,"auth"],[6727,37,6170,35],[6727,39,6170,37,"oobCode"],[6727,46,6170,44],[6727,48,6170,46],[6728,4,6171,4],[6728,10,6171,10,"applyActionCode$1"],[6728,27,6171,27],[6728,28,6171,28],[6728,32,6171,28,"getModularInstance"],[6728,45,6171,46],[6728,46,6171,46,"getModularInstance"],[6728,64,6171,46],[6728,66,6171,47,"auth"],[6728,70,6171,51],[6728,71,6171,52],[6728,73,6171,54],[6729,6,6171,56,"oobCode"],[6730,4,6171,64],[6730,5,6171,65],[6730,6,6171,66],[6731,2,6172,0],[6732,2,6173,0],[6733,0,6174,0],[6734,0,6175,0],[6735,0,6176,0],[6736,0,6177,0],[6737,0,6178,0],[6738,0,6179,0],[6739,0,6180,0],[6740,0,6181,0],[6741,0,6182,0],[6742,2,6183,0],[6742,17,6183,15,"checkActionCode"],[6742,32,6183,30,"checkActionCode"],[6742,33,6183,31,"auth"],[6742,37,6183,35],[6742,39,6183,37,"oobCode"],[6742,46,6183,44],[6742,48,6183,46],[6743,4,6184,4],[6743,10,6184,10,"authModular"],[6743,21,6184,21],[6743,24,6184,24],[6743,28,6184,24,"getModularInstance"],[6743,41,6184,42],[6743,42,6184,42,"getModularInstance"],[6743,60,6184,42],[6743,62,6184,43,"auth"],[6743,66,6184,47],[6743,67,6184,48],[6744,4,6185,4],[6744,10,6185,10,"response"],[6744,18,6185,18],[6744,21,6185,21],[6744,27,6185,27,"resetPassword"],[6744,40,6185,40],[6744,41,6185,41,"authModular"],[6744,52,6185,52],[6744,54,6185,54],[6745,6,6185,56,"oobCode"],[6746,4,6185,64],[6746,5,6185,65],[6746,6,6185,66],[6747,4,6186,4],[6748,4,6187,4],[6749,4,6188,4],[6750,4,6189,4],[6751,4,6190,4],[6752,4,6191,4],[6753,4,6192,4],[6753,10,6192,10,"operation"],[6753,19,6192,19],[6753,22,6192,22,"response"],[6753,30,6192,30],[6753,31,6192,31,"requestType"],[6753,42,6192,42],[6754,4,6193,4,"_assert"],[6754,11,6193,11],[6754,12,6193,12,"operation"],[6754,21,6193,21],[6754,23,6193,23,"authModular"],[6754,34,6193,34],[6754,36,6193,36],[6754,52,6193,52],[6754,53,6193,53],[6754,87,6193,87],[6754,88,6193,88],[6755,4,6194,4],[6755,12,6194,12,"operation"],[6755,21,6194,21],[6756,6,6195,8],[6756,11,6195,13],[6756,25,6195,27],[6756,26,6195,28],[6757,8,6196,12],[6758,6,6197,8],[6758,11,6197,13],[6758,36,6197,38],[6758,37,6197,39],[6759,8,6198,12,"_assert"],[6759,15,6198,19],[6759,16,6198,20,"response"],[6759,24,6198,28],[6759,25,6198,29,"newEmail"],[6759,33,6198,37],[6759,35,6198,39,"authModular"],[6759,46,6198,50],[6759,48,6198,52],[6759,64,6198,68],[6759,65,6198,69],[6759,99,6198,103],[6759,100,6198,104],[6760,8,6199,12],[6761,6,6200,8],[6761,11,6200,13],[6761,42,6200,44],[6761,43,6200,45],[6762,8,6201,12,"_assert"],[6762,15,6201,19],[6762,16,6201,20,"response"],[6762,24,6201,28],[6762,25,6201,29,"mfaInfo"],[6762,32,6201,36],[6762,34,6201,38,"authModular"],[6762,45,6201,49],[6762,47,6201,51],[6762,63,6201,67],[6762,64,6201,68],[6762,98,6201,102],[6762,99,6201,103],[6763,6,6202,8],[6764,6,6203,8],[6765,8,6204,12,"_assert"],[6765,15,6204,19],[6765,16,6204,20,"response"],[6765,24,6204,28],[6765,25,6204,29,"email"],[6765,30,6204,34],[6765,32,6204,36,"authModular"],[6765,43,6204,47],[6765,45,6204,49],[6765,61,6204,65],[6765,62,6204,66],[6765,96,6204,100],[6765,97,6204,101],[6766,4,6205,4],[6767,4,6206,4],[6768,4,6207,4],[6768,8,6207,8,"multiFactorInfo"],[6768,23,6207,23],[6768,26,6207,26],[6768,30,6207,30],[6769,4,6208,4],[6769,8,6208,8,"response"],[6769,16,6208,16],[6769,17,6208,17,"mfaInfo"],[6769,24,6208,24],[6769,26,6208,26],[6770,6,6209,8,"multiFactorInfo"],[6770,21,6209,23],[6770,24,6209,26,"MultiFactorInfoImpl"],[6770,43,6209,45],[6770,44,6209,46,"_fromServerResponse"],[6770,63,6209,65],[6770,64,6209,66,"_castAuth"],[6770,73,6209,75],[6770,74,6209,76,"authModular"],[6770,85,6209,87],[6770,86,6209,88],[6770,88,6209,90,"response"],[6770,96,6209,98],[6770,97,6209,99,"mfaInfo"],[6770,104,6209,106],[6770,105,6209,107],[6771,4,6210,4],[6772,4,6211,4],[6772,11,6211,11],[6773,6,6212,8,"data"],[6773,10,6212,12],[6773,12,6212,14],[6774,8,6213,12,"email"],[6774,13,6213,17],[6774,15,6213,19],[6774,16,6213,20,"response"],[6774,24,6213,28],[6774,25,6213,29,"requestType"],[6774,36,6213,40],[6774,41,6213,45],[6774,66,6213,70],[6774,67,6213,71],[6774,119,6214,18,"response"],[6774,127,6214,26],[6774,128,6214,27,"newEmail"],[6774,136,6214,35],[6774,139,6215,18,"response"],[6774,147,6215,26],[6774,148,6215,27,"email"],[6774,153,6215,32],[6774,158,6215,37],[6774,162,6215,41],[6775,8,6216,12,"previousEmail"],[6775,21,6216,25],[6775,23,6216,27],[6775,24,6216,28,"response"],[6775,32,6216,36],[6775,33,6216,37,"requestType"],[6775,44,6216,48],[6775,49,6216,53],[6775,74,6216,78],[6775,75,6216,79],[6775,127,6217,18,"response"],[6775,135,6217,26],[6775,136,6217,27,"email"],[6775,141,6217,32],[6775,144,6218,18,"response"],[6775,152,6218,26],[6775,153,6218,27,"newEmail"],[6775,161,6218,35],[6775,166,6218,40],[6775,170,6218,44],[6776,8,6219,12,"multiFactorInfo"],[6777,6,6220,8],[6777,7,6220,9],[6778,6,6221,8,"operation"],[6779,4,6222,4],[6779,5,6222,5],[6780,2,6223,0],[6781,2,6224,0],[6782,0,6225,0],[6783,0,6226,0],[6784,0,6227,0],[6785,0,6228,0],[6786,0,6229,0],[6787,0,6230,0],[6788,0,6231,0],[6789,0,6232,0],[6790,0,6233,0],[6791,2,6234,0],[6791,17,6234,15,"verifyPasswordResetCode"],[6791,40,6234,38,"verifyPasswordResetCode"],[6791,41,6234,39,"auth"],[6791,45,6234,43],[6791,47,6234,45,"code"],[6791,51,6234,49],[6791,53,6234,51],[6792,4,6235,4],[6792,10,6235,10],[6793,6,6235,12,"data"],[6794,4,6235,17],[6794,5,6235,18],[6794,8,6235,21],[6794,14,6235,27,"checkActionCode"],[6794,29,6235,42],[6794,30,6235,43],[6794,34,6235,43,"getModularInstance"],[6794,47,6235,61],[6794,48,6235,61,"getModularInstance"],[6794,66,6235,61],[6794,68,6235,62,"auth"],[6794,72,6235,66],[6794,73,6235,67],[6794,75,6235,69,"code"],[6794,79,6235,73],[6794,80,6235,74],[6795,4,6236,4],[6796,4,6237,4],[6796,11,6237,11,"data"],[6796,15,6237,15],[6796,16,6237,16,"email"],[6796,21,6237,21],[6797,2,6238,0],[6798,2,6239,0],[6799,0,6240,0],[6800,0,6241,0],[6801,0,6242,0],[6802,0,6243,0],[6803,0,6244,0],[6804,0,6245,0],[6805,0,6246,0],[6806,0,6247,0],[6807,0,6248,0],[6808,0,6249,0],[6809,0,6250,0],[6810,0,6251,0],[6811,0,6252,0],[6812,0,6253,0],[6813,0,6254,0],[6814,0,6255,0],[6815,0,6256,0],[6816,0,6257,0],[6817,0,6258,0],[6818,2,6259,0],[6818,17,6259,15,"createUserWithEmailAndPassword"],[6818,47,6259,45,"createUserWithEmailAndPassword"],[6818,48,6259,46,"auth"],[6818,52,6259,50],[6818,54,6259,52,"email"],[6818,59,6259,57],[6818,61,6259,59,"password"],[6818,69,6259,67],[6818,71,6259,69],[6819,4,6260,4],[6819,8,6260,8],[6819,12,6260,8,"_isFirebaseServerApp"],[6819,24,6260,28],[6819,25,6260,28,"_isFirebaseServerApp"],[6819,45,6260,28],[6819,47,6260,29,"auth"],[6819,51,6260,33],[6819,52,6260,34,"app"],[6819,55,6260,37],[6819,56,6260,38],[6819,58,6260,40],[6820,6,6261,8],[6820,13,6261,15,"Promise"],[6820,20,6261,22],[6820,21,6261,23,"reject"],[6820,27,6261,29],[6820,28,6261,30,"_serverAppCurrentUserOperationNotSupportedError"],[6820,75,6261,77],[6820,76,6261,78,"auth"],[6820,80,6261,82],[6820,81,6261,83],[6820,82,6261,84],[6821,4,6262,4],[6822,4,6263,4],[6822,10,6263,10,"authInternal"],[6822,22,6263,22],[6822,25,6263,25,"_castAuth"],[6822,34,6263,34],[6822,35,6263,35,"auth"],[6822,39,6263,39],[6822,40,6263,40],[6823,4,6264,4],[6823,10,6264,10,"request"],[6823,17,6264,17],[6823,20,6264,20],[6824,6,6265,8,"returnSecureToken"],[6824,23,6265,25],[6824,25,6265,27],[6824,29,6265,31],[6825,6,6266,8,"email"],[6825,11,6266,13],[6826,6,6267,8,"password"],[6826,14,6267,16],[6827,6,6268,8,"clientType"],[6827,16,6268,18],[6827,18,6268,20],[6827,35,6268,37],[6827,36,6268,38],[6828,4,6269,4],[6828,5,6269,5],[6829,4,6270,4],[6829,10,6270,10,"signUpResponse"],[6829,24,6270,24],[6829,27,6270,27,"handleRecaptchaFlow"],[6829,46,6270,46],[6829,47,6270,47,"authInternal"],[6829,59,6270,59],[6829,61,6270,61,"request"],[6829,68,6270,68],[6829,70,6270,70],[6829,86,6270,86],[6829,87,6270,87],[6829,131,6270,131,"signUp"],[6829,137,6270,137],[6829,139,6270,139],[6829,164,6270,164],[6829,165,6270,165],[6829,216,6270,216],[6829,217,6270,217],[6830,4,6271,4],[6830,10,6271,10,"response"],[6830,18,6271,18],[6830,21,6271,21],[6830,27,6271,27,"signUpResponse"],[6830,41,6271,41],[6830,42,6271,42,"catch"],[6830,47,6271,47],[6830,48,6271,48,"error"],[6830,53,6271,53],[6830,57,6271,57],[6831,6,6272,8],[6831,10,6272,12,"error"],[6831,15,6272,17],[6831,16,6272,18,"code"],[6831,20,6272,22],[6831,25,6272,27],[6831,33,6272,35],[6831,70,6272,72],[6831,71,6272,73],[6831,128,6272,130],[6831,130,6272,132],[6832,8,6273,12],[6832,13,6273,17,"recachePasswordPolicy"],[6832,34,6273,38],[6832,35,6273,39,"auth"],[6832,39,6273,43],[6832,40,6273,44],[6833,6,6274,8],[6834,6,6275,8],[6834,12,6275,14,"error"],[6834,17,6275,19],[6835,4,6276,4],[6835,5,6276,5],[6835,6,6276,6],[6836,4,6277,4],[6836,10,6277,10,"userCredential"],[6836,24,6277,24],[6836,27,6277,27],[6836,33,6277,33,"UserCredentialImpl"],[6836,51,6277,51],[6836,52,6277,52,"_fromIdTokenResponse"],[6836,72,6277,72],[6836,73,6277,73,"authInternal"],[6836,85,6277,85],[6836,87,6277,87],[6836,95,6277,95],[6836,96,6277,96],[6836,125,6277,125,"response"],[6836,133,6277,133],[6836,134,6277,134],[6837,4,6278,4],[6837,10,6278,10,"authInternal"],[6837,22,6278,22],[6837,23,6278,23,"_updateCurrentUser"],[6837,41,6278,41],[6837,42,6278,42,"userCredential"],[6837,56,6278,56],[6837,57,6278,57,"user"],[6837,61,6278,61],[6837,62,6278,62],[6838,4,6279,4],[6838,11,6279,11,"userCredential"],[6838,25,6279,25],[6839,2,6280,0],[6840,2,6281,0],[6841,0,6282,0],[6842,0,6283,0],[6843,0,6284,0],[6844,0,6285,0],[6845,0,6286,0],[6846,0,6287,0],[6847,0,6288,0],[6848,0,6289,0],[6849,0,6290,0],[6850,0,6291,0],[6851,0,6292,0],[6852,0,6293,0],[6853,0,6294,0],[6854,0,6295,0],[6855,0,6296,0],[6856,0,6297,0],[6857,0,6298,0],[6858,0,6299,0],[6859,0,6300,0],[6860,0,6301,0],[6861,0,6302,0],[6862,0,6303,0],[6863,2,6304,0],[6863,11,6304,9,"signInWithEmailAndPassword"],[6863,37,6304,35,"signInWithEmailAndPassword"],[6863,38,6304,36,"auth"],[6863,42,6304,40],[6863,44,6304,42,"email"],[6863,49,6304,47],[6863,51,6304,49,"password"],[6863,59,6304,57],[6863,61,6304,59],[6864,4,6305,4],[6864,8,6305,8],[6864,12,6305,8,"_isFirebaseServerApp"],[6864,24,6305,28],[6864,25,6305,28,"_isFirebaseServerApp"],[6864,45,6305,28],[6864,47,6305,29,"auth"],[6864,51,6305,33],[6864,52,6305,34,"app"],[6864,55,6305,37],[6864,56,6305,38],[6864,58,6305,40],[6865,6,6306,8],[6865,13,6306,15,"Promise"],[6865,20,6306,22],[6865,21,6306,23,"reject"],[6865,27,6306,29],[6865,28,6306,30,"_serverAppCurrentUserOperationNotSupportedError"],[6865,75,6306,77],[6865,76,6306,78,"auth"],[6865,80,6306,82],[6865,81,6306,83],[6865,82,6306,84],[6866,4,6307,4],[6867,4,6308,4],[6867,11,6308,11,"signInWithCredential"],[6867,31,6308,31],[6867,32,6308,32],[6867,36,6308,32,"getModularInstance"],[6867,49,6308,50],[6867,50,6308,50,"getModularInstance"],[6867,68,6308,50],[6867,70,6308,51,"auth"],[6867,74,6308,55],[6867,75,6308,56],[6867,77,6308,58,"EmailAuthProvider"],[6867,94,6308,75],[6867,95,6308,76,"credential"],[6867,105,6308,86],[6867,106,6308,87,"email"],[6867,111,6308,92],[6867,113,6308,94,"password"],[6867,121,6308,102],[6867,122,6308,103],[6867,123,6308,104],[6867,124,6308,105,"catch"],[6867,129,6308,110],[6867,130,6308,111],[6867,136,6308,118,"error"],[6867,141,6308,123],[6867,145,6308,128],[6868,6,6309,8],[6868,10,6309,12,"error"],[6868,15,6309,17],[6868,16,6309,18,"code"],[6868,20,6309,22],[6868,25,6309,27],[6868,33,6309,35],[6868,70,6309,72],[6868,71,6309,73],[6868,128,6309,130],[6868,130,6309,132],[6869,8,6310,12],[6869,13,6310,17,"recachePasswordPolicy"],[6869,34,6310,38],[6869,35,6310,39,"auth"],[6869,39,6310,43],[6869,40,6310,44],[6870,6,6311,8],[6871,6,6312,8],[6871,12,6312,14,"error"],[6871,17,6312,19],[6872,4,6313,4],[6872,5,6313,5],[6872,6,6313,6],[6873,2,6314,0],[6875,2,6316,0],[6876,0,6317,0],[6877,0,6318,0],[6878,0,6319,0],[6879,0,6320,0],[6880,0,6321,0],[6881,0,6322,0],[6882,0,6323,0],[6883,0,6324,0],[6884,0,6325,0],[6885,0,6326,0],[6886,0,6327,0],[6887,0,6328,0],[6888,0,6329,0],[6889,0,6330,0],[6890,0,6331,0],[6891,2,6332,0],[6892,0,6333,0],[6893,0,6334,0],[6894,0,6335,0],[6895,0,6336,0],[6896,0,6337,0],[6897,0,6338,0],[6898,0,6339,0],[6899,0,6340,0],[6900,0,6341,0],[6901,0,6342,0],[6902,0,6343,0],[6903,0,6344,0],[6904,0,6345,0],[6905,0,6346,0],[6906,0,6347,0],[6907,0,6348,0],[6908,0,6349,0],[6909,0,6350,0],[6910,0,6351,0],[6911,0,6352,0],[6912,0,6353,0],[6913,0,6354,0],[6914,0,6355,0],[6915,0,6356,0],[6916,0,6357,0],[6917,0,6358,0],[6918,0,6359,0],[6919,0,6360,0],[6920,0,6361,0],[6921,0,6362,0],[6922,0,6363,0],[6923,0,6364,0],[6924,0,6365,0],[6925,0,6366,0],[6926,0,6367,0],[6927,0,6368,0],[6928,0,6369,0],[6929,2,6370,0],[6929,17,6370,15,"sendSignInLinkToEmail"],[6929,38,6370,36,"sendSignInLinkToEmail"],[6929,39,6370,37,"auth"],[6929,43,6370,41],[6929,45,6370,43,"email"],[6929,50,6370,48],[6929,52,6370,50,"actionCodeSettings"],[6929,70,6370,68],[6929,72,6370,70],[6930,4,6371,4],[6930,10,6371,10,"authInternal"],[6930,22,6371,22],[6930,25,6371,25,"_castAuth"],[6930,34,6371,34],[6930,35,6371,35,"auth"],[6930,39,6371,39],[6930,40,6371,40],[6931,4,6372,4],[6931,10,6372,10,"request"],[6931,17,6372,17],[6931,20,6372,20],[6932,6,6373,8,"requestType"],[6932,17,6373,19],[6932,19,6373,21],[6932,33,6373,35],[6932,34,6373,36],[6933,6,6374,8,"email"],[6933,11,6374,13],[6934,6,6375,8,"clientType"],[6934,16,6375,18],[6934,18,6375,20],[6934,35,6375,37],[6934,36,6375,38],[6935,4,6376,4],[6935,5,6376,5],[6936,4,6377,4],[6936,13,6377,13,"setActionCodeSettings"],[6936,34,6377,34,"setActionCodeSettings"],[6936,35,6377,35,"request"],[6936,42,6377,42],[6936,44,6377,44,"actionCodeSettings"],[6936,62,6377,62],[6936,64,6377,64],[6937,6,6378,8,"_assert"],[6937,13,6378,15],[6937,14,6378,16,"actionCodeSettings"],[6937,32,6378,34],[6937,33,6378,35,"handleCodeInApp"],[6937,48,6378,50],[6937,50,6378,52,"authInternal"],[6937,62,6378,64],[6937,64,6378,66],[6937,80,6378,82],[6937,81,6378,83],[6937,115,6378,117],[6937,116,6378,118],[6938,6,6379,8],[6938,10,6379,12,"actionCodeSettings"],[6938,28,6379,30],[6938,30,6379,32],[6939,8,6380,12,"_setActionCodeSettingsOnRequest"],[6939,39,6380,43],[6939,40,6380,44,"authInternal"],[6939,52,6380,56],[6939,54,6380,58,"request"],[6939,61,6380,65],[6939,63,6380,67,"actionCodeSettings"],[6939,81,6380,85],[6939,82,6380,86],[6940,6,6381,8],[6941,4,6382,4],[6942,4,6383,4,"setActionCodeSettings"],[6942,25,6383,25],[6942,26,6383,26,"request"],[6942,33,6383,33],[6942,35,6383,35,"actionCodeSettings"],[6942,53,6383,53],[6942,54,6383,54],[6943,4,6384,4],[6943,10,6384,10,"handleRecaptchaFlow"],[6943,29,6384,29],[6943,30,6384,30,"authInternal"],[6943,42,6384,42],[6943,44,6384,44,"request"],[6943,51,6384,51],[6943,53,6384,53],[6943,65,6384,65],[6943,66,6384,66],[6943,106,6384,106,"sendSignInLinkToEmail$1"],[6943,129,6384,129],[6943,131,6384,131],[6943,156,6384,156],[6943,157,6384,157],[6943,208,6384,208],[6943,209,6384,209],[6944,2,6385,0],[6945,2,6386,0],[6946,0,6387,0],[6947,0,6388,0],[6948,0,6389,0],[6949,0,6390,0],[6950,0,6391,0],[6951,0,6392,0],[6952,0,6393,0],[6953,2,6394,0],[6953,11,6394,9,"isSignInWithEmailLink"],[6953,32,6394,30,"isSignInWithEmailLink"],[6953,33,6394,31,"auth"],[6953,37,6394,35],[6953,39,6394,37,"emailLink"],[6953,48,6394,46],[6953,50,6394,48],[6954,4,6395,4],[6954,10,6395,10,"actionCodeUrl"],[6954,23,6395,23],[6954,26,6395,26,"ActionCodeURL"],[6954,39,6395,39],[6954,40,6395,40,"parseLink"],[6954,49,6395,49],[6954,50,6395,50,"emailLink"],[6954,59,6395,59],[6954,60,6395,60],[6955,4,6396,4],[6955,11,6396,11,"actionCodeUrl"],[6955,24,6396,24],[6955,26,6396,26,"operation"],[6955,35,6396,35],[6955,40,6396,40],[6955,54,6396,54],[6955,55,6396,55],[6956,2,6397,0],[6957,2,6398,0],[6958,0,6399,0],[6959,0,6400,0],[6960,0,6401,0],[6961,0,6402,0],[6962,0,6403,0],[6963,0,6404,0],[6964,0,6405,0],[6965,0,6406,0],[6966,0,6407,0],[6967,0,6408,0],[6968,0,6409,0],[6969,0,6410,0],[6970,0,6411,0],[6971,0,6412,0],[6972,0,6413,0],[6973,0,6414,0],[6974,0,6415,0],[6975,0,6416,0],[6976,0,6417,0],[6977,0,6418,0],[6978,0,6419,0],[6979,0,6420,0],[6980,0,6421,0],[6981,0,6422,0],[6982,0,6423,0],[6983,0,6424,0],[6984,0,6425,0],[6985,0,6426,0],[6986,0,6427,0],[6987,0,6428,0],[6988,0,6429,0],[6989,0,6430,0],[6990,0,6431,0],[6991,0,6432,0],[6992,0,6433,0],[6993,0,6434,0],[6994,0,6435,0],[6995,0,6436,0],[6996,0,6437,0],[6997,0,6438,0],[6998,2,6439,0],[6998,17,6439,15,"signInWithEmailLink"],[6998,36,6439,34,"signInWithEmailLink"],[6998,37,6439,35,"auth"],[6998,41,6439,39],[6998,43,6439,41,"email"],[6998,48,6439,46],[6998,50,6439,48,"emailLink"],[6998,59,6439,57],[6998,61,6439,59],[6999,4,6440,4],[6999,8,6440,8],[6999,12,6440,8,"_isFirebaseServerApp"],[6999,24,6440,28],[6999,25,6440,28,"_isFirebaseServerApp"],[6999,45,6440,28],[6999,47,6440,29,"auth"],[6999,51,6440,33],[6999,52,6440,34,"app"],[6999,55,6440,37],[6999,56,6440,38],[6999,58,6440,40],[7000,6,6441,8],[7000,13,6441,15,"Promise"],[7000,20,6441,22],[7000,21,6441,23,"reject"],[7000,27,6441,29],[7000,28,6441,30,"_serverAppCurrentUserOperationNotSupportedError"],[7000,75,6441,77],[7000,76,6441,78,"auth"],[7000,80,6441,82],[7000,81,6441,83],[7000,82,6441,84],[7001,4,6442,4],[7002,4,6443,4],[7002,10,6443,10,"authModular"],[7002,21,6443,21],[7002,24,6443,24],[7002,28,6443,24,"getModularInstance"],[7002,41,6443,42],[7002,42,6443,42,"getModularInstance"],[7002,60,6443,42],[7002,62,6443,43,"auth"],[7002,66,6443,47],[7002,67,6443,48],[7003,4,6444,4],[7003,10,6444,10,"credential"],[7003,20,6444,20],[7003,23,6444,23,"EmailAuthProvider"],[7003,40,6444,40],[7003,41,6444,41,"credentialWithLink"],[7003,59,6444,59],[7003,60,6444,60,"email"],[7003,65,6444,65],[7003,67,6444,67,"emailLink"],[7003,76,6444,76],[7003,80,6444,80,"_getCurrentUrl"],[7003,94,6444,94],[7003,95,6444,95],[7003,96,6444,96],[7003,97,6444,97],[7004,4,6445,4],[7005,4,6446,4],[7006,4,6447,4,"_assert"],[7006,11,6447,11],[7006,12,6447,12,"credential"],[7006,22,6447,22],[7006,23,6447,23,"_tenantId"],[7006,32,6447,32],[7006,38,6447,38,"authModular"],[7006,49,6447,49],[7006,50,6447,50,"tenantId"],[7006,58,6447,58],[7006,62,6447,62],[7006,66,6447,66],[7006,67,6447,67],[7006,69,6447,69,"authModular"],[7006,80,6447,80],[7006,82,6447,82],[7006,102,6447,102],[7006,103,6447,103],[7006,141,6447,141],[7006,142,6447,142],[7007,4,6448,4],[7007,11,6448,11,"signInWithCredential"],[7007,31,6448,31],[7007,32,6448,32,"authModular"],[7007,43,6448,43],[7007,45,6448,45,"credential"],[7007,55,6448,55],[7007,56,6448,56],[7008,2,6449,0],[7010,2,6451,0],[7011,0,6452,0],[7012,0,6453,0],[7013,0,6454,0],[7014,0,6455,0],[7015,0,6456,0],[7016,0,6457,0],[7017,0,6458,0],[7018,0,6459,0],[7019,0,6460,0],[7020,0,6461,0],[7021,0,6462,0],[7022,0,6463,0],[7023,0,6464,0],[7024,0,6465,0],[7025,0,6466,0],[7026,2,6467,0],[7026,17,6467,15,"createAuthUri"],[7026,30,6467,28,"createAuthUri"],[7026,31,6467,29,"auth"],[7026,35,6467,33],[7026,37,6467,35,"request"],[7026,44,6467,42],[7026,46,6467,44],[7027,4,6468,4],[7027,11,6468,11,"_performApiRequest"],[7027,29,6468,29],[7027,30,6468,30,"auth"],[7027,34,6468,34],[7027,36,6468,36],[7027,42,6468,42],[7027,43,6468,43],[7027,66,6468,66],[7027,94,6468,94],[7027,95,6468,95],[7027,127,6468,127,"_addTidIfNecessary"],[7027,145,6468,145],[7027,146,6468,146,"auth"],[7027,150,6468,150],[7027,152,6468,152,"request"],[7027,159,6468,159],[7027,160,6468,160],[7027,161,6468,161],[7028,2,6469,0],[7030,2,6471,0],[7031,0,6472,0],[7032,0,6473,0],[7033,0,6474,0],[7034,0,6475,0],[7035,0,6476,0],[7036,0,6477,0],[7037,0,6478,0],[7038,0,6479,0],[7039,0,6480,0],[7040,0,6481,0],[7041,0,6482,0],[7042,0,6483,0],[7043,0,6484,0],[7044,0,6485,0],[7045,0,6486,0],[7046,2,6487,0],[7047,0,6488,0],[7048,0,6489,0],[7049,0,6490,0],[7050,0,6491,0],[7051,0,6492,0],[7052,0,6493,0],[7053,0,6494,0],[7054,0,6495,0],[7055,0,6496,0],[7056,0,6497,0],[7057,0,6498,0],[7058,0,6499,0],[7059,0,6500,0],[7060,0,6501,0],[7061,0,6502,0],[7062,0,6503,0],[7063,0,6504,0],[7064,0,6505,0],[7065,0,6506,0],[7066,2,6507,0],[7066,17,6507,15,"fetchSignInMethodsForEmail"],[7066,43,6507,41,"fetchSignInMethodsForEmail"],[7066,44,6507,42,"auth"],[7066,48,6507,46],[7066,50,6507,48,"email"],[7066,55,6507,53],[7066,57,6507,55],[7067,4,6508,4],[7068,4,6509,4],[7069,4,6510,4],[7070,4,6511,4],[7070,10,6511,10,"continueUri"],[7070,21,6511,21],[7070,24,6511,24,"_isHttpOrHttps"],[7070,38,6511,38],[7070,39,6511,39],[7070,40,6511,40],[7070,43,6511,43,"_getCurrentUrl"],[7070,57,6511,57],[7070,58,6511,58],[7070,59,6511,59],[7070,62,6511,62],[7070,80,6511,80],[7071,4,6512,4],[7071,10,6512,10,"request"],[7071,17,6512,17],[7071,20,6512,20],[7072,6,6513,8,"identifier"],[7072,16,6513,18],[7072,18,6513,20,"email"],[7072,23,6513,25],[7073,6,6514,8,"continueUri"],[7074,4,6515,4],[7074,5,6515,5],[7075,4,6516,4],[7075,10,6516,10],[7076,6,6516,12,"signinMethods"],[7077,4,6516,26],[7077,5,6516,27],[7077,8,6516,30],[7077,14,6516,36,"createAuthUri"],[7077,27,6516,49],[7077,28,6516,50],[7077,32,6516,50,"getModularInstance"],[7077,45,6516,68],[7077,46,6516,68,"getModularInstance"],[7077,64,6516,68],[7077,66,6516,69,"auth"],[7077,70,6516,73],[7077,71,6516,74],[7077,73,6516,76,"request"],[7077,80,6516,83],[7077,81,6516,84],[7078,4,6517,4],[7078,11,6517,11,"signinMethods"],[7078,24,6517,24],[7078,28,6517,28],[7078,30,6517,30],[7079,2,6518,0],[7080,2,6519,0],[7081,0,6520,0],[7082,0,6521,0],[7083,0,6522,0],[7084,0,6523,0],[7085,0,6524,0],[7086,0,6525,0],[7087,0,6526,0],[7088,0,6527,0],[7089,0,6528,0],[7090,0,6529,0],[7091,0,6530,0],[7092,0,6531,0],[7093,0,6532,0],[7094,0,6533,0],[7095,0,6534,0],[7096,0,6535,0],[7097,0,6536,0],[7098,0,6537,0],[7099,0,6538,0],[7100,0,6539,0],[7101,0,6540,0],[7102,0,6541,0],[7103,0,6542,0],[7104,0,6543,0],[7105,0,6544,0],[7106,0,6545,0],[7107,0,6546,0],[7108,0,6547,0],[7109,0,6548,0],[7110,2,6549,0],[7110,17,6549,15,"sendEmailVerification"],[7110,38,6549,36,"sendEmailVerification"],[7110,39,6549,37,"user"],[7110,43,6549,41],[7110,45,6549,43,"actionCodeSettings"],[7110,63,6549,61],[7110,65,6549,63],[7111,4,6550,4],[7111,10,6550,10,"userInternal"],[7111,22,6550,22],[7111,25,6550,25],[7111,29,6550,25,"getModularInstance"],[7111,42,6550,43],[7111,43,6550,43,"getModularInstance"],[7111,61,6550,43],[7111,63,6550,44,"user"],[7111,67,6550,48],[7111,68,6550,49],[7112,4,6551,4],[7112,10,6551,10,"idToken"],[7112,17,6551,17],[7112,20,6551,20],[7112,26,6551,26,"user"],[7112,30,6551,30],[7112,31,6551,31,"getIdToken"],[7112,41,6551,41],[7112,42,6551,42],[7112,43,6551,43],[7113,4,6552,4],[7113,10,6552,10,"request"],[7113,17,6552,17],[7113,20,6552,20],[7114,6,6553,8,"requestType"],[7114,17,6553,19],[7114,19,6553,21],[7114,33,6553,35],[7114,34,6553,36],[7115,6,6554,8,"idToken"],[7116,4,6555,4],[7116,5,6555,5],[7117,4,6556,4],[7117,8,6556,8,"actionCodeSettings"],[7117,26,6556,26],[7117,28,6556,28],[7118,6,6557,8,"_setActionCodeSettingsOnRequest"],[7118,37,6557,39],[7118,38,6557,40,"userInternal"],[7118,50,6557,52],[7118,51,6557,53,"auth"],[7118,55,6557,57],[7118,57,6557,59,"request"],[7118,64,6557,66],[7118,66,6557,68,"actionCodeSettings"],[7118,84,6557,86],[7118,85,6557,87],[7119,4,6558,4],[7120,4,6559,4],[7120,10,6559,10],[7121,6,6559,12,"email"],[7122,4,6559,18],[7122,5,6559,19],[7122,8,6559,22],[7122,14,6559,28,"sendEmailVerification$1"],[7122,37,6559,51],[7122,38,6559,52,"userInternal"],[7122,50,6559,64],[7122,51,6559,65,"auth"],[7122,55,6559,69],[7122,57,6559,71,"request"],[7122,64,6559,78],[7122,65,6559,79],[7123,4,6560,4],[7123,8,6560,8,"email"],[7123,13,6560,13],[7123,18,6560,18,"user"],[7123,22,6560,22],[7123,23,6560,23,"email"],[7123,28,6560,28],[7123,30,6560,30],[7124,6,6561,8],[7124,12,6561,14,"user"],[7124,16,6561,18],[7124,17,6561,19,"reload"],[7124,23,6561,25],[7124,24,6561,26],[7124,25,6561,27],[7125,4,6562,4],[7126,2,6563,0],[7127,2,6564,0],[7128,0,6565,0],[7129,0,6566,0],[7130,0,6567,0],[7131,0,6568,0],[7132,0,6569,0],[7133,0,6570,0],[7134,0,6571,0],[7135,0,6572,0],[7136,0,6573,0],[7137,0,6574,0],[7138,0,6575,0],[7139,0,6576,0],[7140,0,6577,0],[7141,0,6578,0],[7142,0,6579,0],[7143,0,6580,0],[7144,0,6581,0],[7145,0,6582,0],[7146,0,6583,0],[7147,0,6584,0],[7148,0,6585,0],[7149,0,6586,0],[7150,0,6587,0],[7151,0,6588,0],[7152,0,6589,0],[7153,0,6590,0],[7154,0,6591,0],[7155,0,6592,0],[7156,0,6593,0],[7157,0,6594,0],[7158,0,6595,0],[7159,0,6596,0],[7160,0,6597,0],[7161,2,6598,0],[7161,17,6598,15,"verifyBeforeUpdateEmail"],[7161,40,6598,38,"verifyBeforeUpdateEmail"],[7161,41,6598,39,"user"],[7161,45,6598,43],[7161,47,6598,45,"newEmail"],[7161,55,6598,53],[7161,57,6598,55,"actionCodeSettings"],[7161,75,6598,73],[7161,77,6598,75],[7162,4,6599,4],[7162,10,6599,10,"userInternal"],[7162,22,6599,22],[7162,25,6599,25],[7162,29,6599,25,"getModularInstance"],[7162,42,6599,43],[7162,43,6599,43,"getModularInstance"],[7162,61,6599,43],[7162,63,6599,44,"user"],[7162,67,6599,48],[7162,68,6599,49],[7163,4,6600,4],[7163,10,6600,10,"idToken"],[7163,17,6600,17],[7163,20,6600,20],[7163,26,6600,26,"user"],[7163,30,6600,30],[7163,31,6600,31,"getIdToken"],[7163,41,6600,41],[7163,42,6600,42],[7163,43,6600,43],[7164,4,6601,4],[7164,10,6601,10,"request"],[7164,17,6601,17],[7164,20,6601,20],[7165,6,6602,8,"requestType"],[7165,17,6602,19],[7165,19,6602,21],[7165,44,6602,46],[7165,45,6602,47],[7166,6,6603,8,"idToken"],[7166,13,6603,15],[7167,6,6604,8,"newEmail"],[7168,4,6605,4],[7168,5,6605,5],[7169,4,6606,4],[7169,8,6606,8,"actionCodeSettings"],[7169,26,6606,26],[7169,28,6606,28],[7170,6,6607,8,"_setActionCodeSettingsOnRequest"],[7170,37,6607,39],[7170,38,6607,40,"userInternal"],[7170,50,6607,52],[7170,51,6607,53,"auth"],[7170,55,6607,57],[7170,57,6607,59,"request"],[7170,64,6607,66],[7170,66,6607,68,"actionCodeSettings"],[7170,84,6607,86],[7170,85,6607,87],[7171,4,6608,4],[7172,4,6609,4],[7172,10,6609,10],[7173,6,6609,12,"email"],[7174,4,6609,18],[7174,5,6609,19],[7174,8,6609,22],[7174,14,6609,28,"verifyAndChangeEmail"],[7174,34,6609,48],[7174,35,6609,49,"userInternal"],[7174,47,6609,61],[7174,48,6609,62,"auth"],[7174,52,6609,66],[7174,54,6609,68,"request"],[7174,61,6609,75],[7174,62,6609,76],[7175,4,6610,4],[7175,8,6610,8,"email"],[7175,13,6610,13],[7175,18,6610,18,"user"],[7175,22,6610,22],[7175,23,6610,23,"email"],[7175,28,6610,28],[7175,30,6610,30],[7176,6,6611,8],[7177,6,6612,8],[7178,6,6613,8],[7178,12,6613,14,"user"],[7178,16,6613,18],[7178,17,6613,19,"reload"],[7178,23,6613,25],[7178,24,6613,26],[7178,25,6613,27],[7179,4,6614,4],[7180,2,6615,0],[7182,2,6617,0],[7183,0,6618,0],[7184,0,6619,0],[7185,0,6620,0],[7186,0,6621,0],[7187,0,6622,0],[7188,0,6623,0],[7189,0,6624,0],[7190,0,6625,0],[7191,0,6626,0],[7192,0,6627,0],[7193,0,6628,0],[7194,0,6629,0],[7195,0,6630,0],[7196,0,6631,0],[7197,0,6632,0],[7198,2,6633,0],[7198,17,6633,15,"updateProfile$1"],[7198,32,6633,30,"updateProfile$1"],[7198,33,6633,31,"auth"],[7198,37,6633,35],[7198,39,6633,37,"request"],[7198,46,6633,44],[7198,48,6633,46],[7199,4,6634,4],[7199,11,6634,11,"_performApiRequest"],[7199,29,6634,29],[7199,30,6634,30,"auth"],[7199,34,6634,34],[7199,36,6634,36],[7199,42,6634,42],[7199,43,6634,43],[7199,66,6634,66],[7199,87,6634,87],[7199,88,6634,88],[7199,121,6634,121,"request"],[7199,128,6634,128],[7199,129,6634,129],[7200,2,6635,0],[7202,2,6637,0],[7203,0,6638,0],[7204,0,6639,0],[7205,0,6640,0],[7206,0,6641,0],[7207,0,6642,0],[7208,0,6643,0],[7209,0,6644,0],[7210,0,6645,0],[7211,0,6646,0],[7212,0,6647,0],[7213,0,6648,0],[7214,0,6649,0],[7215,0,6650,0],[7216,0,6651,0],[7217,0,6652,0],[7218,2,6653,0],[7219,0,6654,0],[7220,0,6655,0],[7221,0,6656,0],[7222,0,6657,0],[7223,0,6658,0],[7224,0,6659,0],[7225,0,6660,0],[7226,2,6661,0],[7226,17,6661,15,"updateProfile"],[7226,30,6661,28,"updateProfile"],[7226,31,6661,29,"user"],[7226,35,6661,33],[7226,37,6661,35],[7227,4,6661,37,"displayName"],[7227,15,6661,48],[7228,4,6661,50,"photoURL"],[7228,12,6661,58],[7228,14,6661,60,"photoUrl"],[7229,2,6661,69],[7229,3,6661,70],[7229,5,6661,72],[7230,4,6662,4],[7230,8,6662,8,"displayName"],[7230,19,6662,19],[7230,24,6662,24,"undefined"],[7230,33,6662,33],[7230,37,6662,37,"photoUrl"],[7230,45,6662,45],[7230,50,6662,50,"undefined"],[7230,59,6662,59],[7230,61,6662,61],[7231,6,6663,8],[7232,4,6664,4],[7233,4,6665,4],[7233,10,6665,10,"userInternal"],[7233,22,6665,22],[7233,25,6665,25],[7233,29,6665,25,"getModularInstance"],[7233,42,6665,43],[7233,43,6665,43,"getModularInstance"],[7233,61,6665,43],[7233,63,6665,44,"user"],[7233,67,6665,48],[7233,68,6665,49],[7234,4,6666,4],[7234,10,6666,10,"idToken"],[7234,17,6666,17],[7234,20,6666,20],[7234,26,6666,26,"userInternal"],[7234,38,6666,38],[7234,39,6666,39,"getIdToken"],[7234,49,6666,49],[7234,50,6666,50],[7234,51,6666,51],[7235,4,6667,4],[7235,10,6667,10,"profileRequest"],[7235,24,6667,24],[7235,27,6667,27],[7236,6,6668,8,"idToken"],[7236,13,6668,15],[7237,6,6669,8,"displayName"],[7237,17,6669,19],[7238,6,6670,8,"photoUrl"],[7238,14,6670,16],[7239,6,6671,8,"returnSecureToken"],[7239,23,6671,25],[7239,25,6671,27],[7240,4,6672,4],[7240,5,6672,5],[7241,4,6673,4],[7241,10,6673,10,"response"],[7241,18,6673,18],[7241,21,6673,21],[7241,27,6673,27,"_logoutIfInvalidated"],[7241,47,6673,47],[7241,48,6673,48,"userInternal"],[7241,60,6673,60],[7241,62,6673,62,"updateProfile$1"],[7241,77,6673,77],[7241,78,6673,78,"userInternal"],[7241,90,6673,90],[7241,91,6673,91,"auth"],[7241,95,6673,95],[7241,97,6673,97,"profileRequest"],[7241,111,6673,111],[7241,112,6673,112],[7241,113,6673,113],[7242,4,6674,4,"userInternal"],[7242,16,6674,16],[7242,17,6674,17,"displayName"],[7242,28,6674,28],[7242,31,6674,31,"response"],[7242,39,6674,39],[7242,40,6674,40,"displayName"],[7242,51,6674,51],[7242,55,6674,55],[7242,59,6674,59],[7243,4,6675,4,"userInternal"],[7243,16,6675,16],[7243,17,6675,17,"photoURL"],[7243,25,6675,25],[7243,28,6675,28,"response"],[7243,36,6675,36],[7243,37,6675,37,"photoUrl"],[7243,45,6675,45],[7243,49,6675,49],[7243,53,6675,53],[7244,4,6676,4],[7245,4,6677,4],[7245,10,6677,10,"passwordProvider"],[7245,26,6677,26],[7245,29,6677,29,"userInternal"],[7245,41,6677,41],[7245,42,6677,42,"providerData"],[7245,54,6677,54],[7245,55,6677,55,"find"],[7245,59,6677,59],[7245,60,6677,60],[7245,61,6677,61],[7246,6,6677,63,"providerId"],[7247,4,6677,74],[7247,5,6677,75],[7247,10,6677,80,"providerId"],[7247,20,6677,90],[7247,25,6677,95],[7247,35,6677,105],[7247,36,6677,106],[7247,61,6677,131],[7247,62,6677,132],[7248,4,6678,4],[7248,8,6678,8,"passwordProvider"],[7248,24,6678,24],[7248,26,6678,26],[7249,6,6679,8,"passwordProvider"],[7249,22,6679,24],[7249,23,6679,25,"displayName"],[7249,34,6679,36],[7249,37,6679,39,"userInternal"],[7249,49,6679,51],[7249,50,6679,52,"displayName"],[7249,61,6679,63],[7250,6,6680,8,"passwordProvider"],[7250,22,6680,24],[7250,23,6680,25,"photoURL"],[7250,31,6680,33],[7250,34,6680,36,"userInternal"],[7250,46,6680,48],[7250,47,6680,49,"photoURL"],[7250,55,6680,57],[7251,4,6681,4],[7252,4,6682,4],[7252,10,6682,10,"userInternal"],[7252,22,6682,22],[7252,23,6682,23,"_updateTokensIfNecessary"],[7252,47,6682,47],[7252,48,6682,48,"response"],[7252,56,6682,56],[7252,57,6682,57],[7253,2,6683,0],[7254,2,6684,0],[7255,0,6685,0],[7256,0,6686,0],[7257,0,6687,0],[7258,0,6688,0],[7259,0,6689,0],[7260,0,6690,0],[7261,0,6691,0],[7262,0,6692,0],[7263,0,6693,0],[7264,0,6694,0],[7265,0,6695,0],[7266,0,6696,0],[7267,0,6697,0],[7268,0,6698,0],[7269,0,6699,0],[7270,0,6700,0],[7271,0,6701,0],[7272,0,6702,0],[7273,0,6703,0],[7274,0,6704,0],[7275,0,6705,0],[7276,0,6706,0],[7277,0,6707,0],[7278,2,6708,0],[7278,11,6708,9,"updateEmail"],[7278,22,6708,20,"updateEmail"],[7278,23,6708,21,"user"],[7278,27,6708,25],[7278,29,6708,27,"newEmail"],[7278,37,6708,35],[7278,39,6708,37],[7279,4,6709,4],[7279,10,6709,10,"userInternal"],[7279,22,6709,22],[7279,25,6709,25],[7279,29,6709,25,"getModularInstance"],[7279,42,6709,43],[7279,43,6709,43,"getModularInstance"],[7279,61,6709,43],[7279,63,6709,44,"user"],[7279,67,6709,48],[7279,68,6709,49],[7280,4,6710,4],[7280,8,6710,8],[7280,12,6710,8,"_isFirebaseServerApp"],[7280,24,6710,28],[7280,25,6710,28,"_isFirebaseServerApp"],[7280,45,6710,28],[7280,47,6710,29,"userInternal"],[7280,59,6710,41],[7280,60,6710,42,"auth"],[7280,64,6710,46],[7280,65,6710,47,"app"],[7280,68,6710,50],[7280,69,6710,51],[7280,71,6710,53],[7281,6,6711,8],[7281,13,6711,15,"Promise"],[7281,20,6711,22],[7281,21,6711,23,"reject"],[7281,27,6711,29],[7281,28,6711,30,"_serverAppCurrentUserOperationNotSupportedError"],[7281,75,6711,77],[7281,76,6711,78,"userInternal"],[7281,88,6711,90],[7281,89,6711,91,"auth"],[7281,93,6711,95],[7281,94,6711,96],[7281,95,6711,97],[7282,4,6712,4],[7283,4,6713,4],[7283,11,6713,11,"updateEmailOrPassword"],[7283,32,6713,32],[7283,33,6713,33,"userInternal"],[7283,45,6713,45],[7283,47,6713,47,"newEmail"],[7283,55,6713,55],[7283,57,6713,57],[7283,61,6713,61],[7283,62,6713,62],[7284,2,6714,0],[7285,2,6715,0],[7286,0,6716,0],[7287,0,6717,0],[7288,0,6718,0],[7289,0,6719,0],[7290,0,6720,0],[7291,0,6721,0],[7292,0,6722,0],[7293,0,6723,0],[7294,0,6724,0],[7295,0,6725,0],[7296,0,6726,0],[7297,0,6727,0],[7298,2,6728,0],[7298,11,6728,9,"updatePassword"],[7298,25,6728,23,"updatePassword"],[7298,26,6728,24,"user"],[7298,30,6728,28],[7298,32,6728,30,"newPassword"],[7298,43,6728,41],[7298,45,6728,43],[7299,4,6729,4],[7299,11,6729,11,"updateEmailOrPassword"],[7299,32,6729,32],[7299,33,6729,33],[7299,37,6729,33,"getModularInstance"],[7299,50,6729,51],[7299,51,6729,51,"getModularInstance"],[7299,69,6729,51],[7299,71,6729,52,"user"],[7299,75,6729,56],[7299,76,6729,57],[7299,78,6729,59],[7299,82,6729,63],[7299,84,6729,65,"newPassword"],[7299,95,6729,76],[7299,96,6729,77],[7300,2,6730,0],[7301,2,6731,0],[7301,17,6731,15,"updateEmailOrPassword"],[7301,38,6731,36,"updateEmailOrPassword"],[7301,39,6731,37,"user"],[7301,43,6731,41],[7301,45,6731,43,"email"],[7301,50,6731,48],[7301,52,6731,50,"password"],[7301,60,6731,58],[7301,62,6731,60],[7302,4,6732,4],[7302,10,6732,10],[7303,6,6732,12,"auth"],[7304,4,6732,17],[7304,5,6732,18],[7304,8,6732,21,"user"],[7304,12,6732,25],[7305,4,6733,4],[7305,10,6733,10,"idToken"],[7305,17,6733,17],[7305,20,6733,20],[7305,26,6733,26,"user"],[7305,30,6733,30],[7305,31,6733,31,"getIdToken"],[7305,41,6733,41],[7305,42,6733,42],[7305,43,6733,43],[7306,4,6734,4],[7306,10,6734,10,"request"],[7306,17,6734,17],[7306,20,6734,20],[7307,6,6735,8,"idToken"],[7307,13,6735,15],[7308,6,6736,8,"returnSecureToken"],[7308,23,6736,25],[7308,25,6736,27],[7309,4,6737,4],[7309,5,6737,5],[7310,4,6738,4],[7310,8,6738,8,"email"],[7310,13,6738,13],[7310,15,6738,15],[7311,6,6739,8,"request"],[7311,13,6739,15],[7311,14,6739,16,"email"],[7311,19,6739,21],[7311,22,6739,24,"email"],[7311,27,6739,29],[7312,4,6740,4],[7313,4,6741,4],[7313,8,6741,8,"password"],[7313,16,6741,16],[7313,18,6741,18],[7314,6,6742,8,"request"],[7314,13,6742,15],[7314,14,6742,16,"password"],[7314,22,6742,24],[7314,25,6742,27,"password"],[7314,33,6742,35],[7315,4,6743,4],[7316,4,6744,4],[7316,10,6744,10,"response"],[7316,18,6744,18],[7316,21,6744,21],[7316,27,6744,27,"_logoutIfInvalidated"],[7316,47,6744,47],[7316,48,6744,48,"user"],[7316,52,6744,52],[7316,54,6744,54,"updateEmailPassword"],[7316,73,6744,73],[7316,74,6744,74,"auth"],[7316,78,6744,78],[7316,80,6744,80,"request"],[7316,87,6744,87],[7316,88,6744,88],[7316,89,6744,89],[7317,4,6745,4],[7317,10,6745,10,"user"],[7317,14,6745,14],[7317,15,6745,15,"_updateTokensIfNecessary"],[7317,39,6745,39],[7317,40,6745,40,"response"],[7317,48,6745,48],[7317,50,6745,50],[7317,62,6745,63],[7317,66,6745,67],[7317,67,6745,68],[7318,2,6746,0],[7320,2,6748,0],[7321,0,6749,0],[7322,0,6750,0],[7323,0,6751,0],[7324,0,6752,0],[7325,0,6753,0],[7326,0,6754,0],[7327,0,6755,0],[7328,0,6756,0],[7329,0,6757,0],[7330,0,6758,0],[7331,0,6759,0],[7332,0,6760,0],[7333,0,6761,0],[7334,0,6762,0],[7335,0,6763,0],[7336,2,6764,0],[7337,0,6765,0],[7338,0,6766,0],[7339,0,6767,0],[7340,2,6768,0],[7340,11,6768,9,"_fromIdTokenResponse"],[7340,31,6768,29,"_fromIdTokenResponse"],[7340,32,6768,30,"idTokenResponse"],[7340,47,6768,45],[7340,49,6768,47],[7341,4,6769,4],[7341,8,6769,8],[7341,9,6769,9,"idTokenResponse"],[7341,24,6769,24],[7341,26,6769,26],[7342,6,6770,8],[7342,13,6770,15],[7342,17,6770,19],[7343,4,6771,4],[7344,4,6772,4],[7344,10,6772,10],[7345,6,6772,12,"providerId"],[7346,4,6772,23],[7346,5,6772,24],[7346,8,6772,27,"idTokenResponse"],[7346,23,6772,42],[7347,4,6773,4],[7347,10,6773,10,"profile"],[7347,17,6773,17],[7347,20,6773,20,"idTokenResponse"],[7347,35,6773,35],[7347,36,6773,36,"rawUserInfo"],[7347,47,6773,47],[7347,50,6774,10,"JSON"],[7347,54,6774,14],[7347,55,6774,15,"parse"],[7347,60,6774,20],[7347,61,6774,21,"idTokenResponse"],[7347,76,6774,36],[7347,77,6774,37,"rawUserInfo"],[7347,88,6774,48],[7347,89,6774,49],[7347,92,6775,10],[7347,93,6775,11],[7347,94,6775,12],[7348,4,6776,4],[7348,10,6776,10,"isNewUser"],[7348,19,6776,19],[7348,22,6776,22,"idTokenResponse"],[7348,37,6776,37],[7348,38,6776,38,"isNewUser"],[7348,47,6776,47],[7348,51,6777,8,"idTokenResponse"],[7348,66,6777,23],[7348,67,6777,24,"kind"],[7348,71,6777,28],[7348,76,6777,33],[7348,115,6777,72],[7348,116,6777,73],[7349,4,6778,4],[7349,8,6778,8],[7349,9,6778,9,"providerId"],[7349,19,6778,19],[7349,23,6778,23,"idTokenResponse"],[7349,38,6778,38],[7349,40,6778,40,"idToken"],[7349,47,6778,47],[7349,49,6778,49],[7350,6,6779,8],[7350,12,6779,14,"signInProvider"],[7350,26,6779,28],[7350,29,6779,31,"_parseToken"],[7350,40,6779,42],[7350,41,6779,43,"idTokenResponse"],[7350,56,6779,58],[7350,57,6779,59,"idToken"],[7350,64,6779,66],[7350,65,6779,67],[7350,67,6779,69,"firebase"],[7350,75,6779,77],[7350,78,6779,80],[7350,96,6779,98],[7350,97,6779,99],[7351,6,6780,8],[7351,10,6780,12,"signInProvider"],[7351,24,6780,26],[7351,26,6780,28],[7352,8,6781,12],[7352,14,6781,18,"filteredProviderId"],[7352,32,6781,36],[7352,35,6781,39,"signInProvider"],[7352,49,6781,53],[7352,54,6781,58],[7352,65,6781,69],[7352,66,6781,70],[7352,96,6782,16,"signInProvider"],[7352,110,6782,30],[7352,115,6782,35],[7352,123,6782,43],[7352,124,6782,44],[7352,150,6783,18,"signInProvider"],[7352,164,6783,32],[7352,167,6784,18],[7352,171,6784,22],[7353,8,6785,12],[7354,8,6786,12],[7354,15,6786,19],[7354,19,6786,23,"GenericAdditionalUserInfo"],[7354,44,6786,48],[7354,45,6786,49,"isNewUser"],[7354,54,6786,58],[7354,56,6786,60,"filteredProviderId"],[7354,74,6786,78],[7354,75,6786,79],[7355,6,6787,8],[7356,4,6788,4],[7357,4,6789,4],[7357,8,6789,8],[7357,9,6789,9,"providerId"],[7357,19,6789,19],[7357,21,6789,21],[7358,6,6790,8],[7358,13,6790,15],[7358,17,6790,19],[7359,4,6791,4],[7360,4,6792,4],[7360,12,6792,12,"providerId"],[7360,22,6792,22],[7361,6,6793,8],[7361,11,6793,13],[7361,25,6793,27],[7361,26,6793,28],[7362,8,6794,12],[7362,15,6794,19],[7362,19,6794,23,"FacebookAdditionalUserInfo"],[7362,45,6794,49],[7362,46,6794,50,"isNewUser"],[7362,55,6794,59],[7362,57,6794,61,"profile"],[7362,64,6794,68],[7362,65,6794,69],[7363,6,6795,8],[7363,11,6795,13],[7363,23,6795,25],[7363,24,6795,26],[7364,8,6796,12],[7364,15,6796,19],[7364,19,6796,23,"GithubAdditionalUserInfo"],[7364,43,6796,47],[7364,44,6796,48,"isNewUser"],[7364,53,6796,57],[7364,55,6796,59,"profile"],[7364,62,6796,66],[7364,63,6796,67],[7365,6,6797,8],[7365,11,6797,13],[7365,23,6797,25],[7365,24,6797,26],[7366,8,6798,12],[7366,15,6798,19],[7366,19,6798,23,"GoogleAdditionalUserInfo"],[7366,43,6798,47],[7366,44,6798,48,"isNewUser"],[7366,53,6798,57],[7366,55,6798,59,"profile"],[7366,62,6798,66],[7366,63,6798,67],[7367,6,6799,8],[7367,11,6799,13],[7367,24,6799,26],[7367,25,6799,27],[7368,8,6800,12],[7368,15,6800,19],[7368,19,6800,23,"TwitterAdditionalUserInfo"],[7368,44,6800,48],[7368,45,6800,49,"isNewUser"],[7368,54,6800,58],[7368,56,6800,60,"profile"],[7368,63,6800,67],[7368,65,6800,69,"idTokenResponse"],[7368,80,6800,84],[7368,81,6800,85,"screenName"],[7368,91,6800,95],[7368,95,6800,99],[7368,99,6800,103],[7368,100,6800,104],[7369,6,6801,8],[7369,11,6801,13],[7369,19,6801,21],[7369,20,6801,22],[7370,6,6802,8],[7370,11,6802,13],[7370,22,6802,24],[7370,23,6802,25],[7371,8,6803,12],[7371,15,6803,19],[7371,19,6803,23,"GenericAdditionalUserInfo"],[7371,44,6803,48],[7371,45,6803,49,"isNewUser"],[7371,54,6803,58],[7371,56,6803,60],[7371,60,6803,64],[7371,61,6803,65],[7372,6,6804,8],[7373,8,6805,12],[7373,15,6805,19],[7373,19,6805,23,"GenericAdditionalUserInfo"],[7373,44,6805,48],[7373,45,6805,49,"isNewUser"],[7373,54,6805,58],[7373,56,6805,60,"providerId"],[7373,66,6805,70],[7373,68,6805,72,"profile"],[7373,75,6805,79],[7373,76,6805,80],[7374,4,6806,4],[7375,2,6807,0],[7376,2,6808,0],[7376,8,6808,6,"GenericAdditionalUserInfo"],[7376,33,6808,31],[7376,34,6808,32],[7377,4,6809,4,"constructor"],[7377,15,6809,15,"constructor"],[7377,16,6809,16,"isNewUser"],[7377,25,6809,25],[7377,27,6809,27,"providerId"],[7377,37,6809,37],[7377,39,6809,39,"profile"],[7377,46,6809,46],[7377,49,6809,49],[7377,50,6809,50],[7377,51,6809,51],[7377,53,6809,53],[7378,6,6810,8],[7378,10,6810,12],[7378,11,6810,13,"isNewUser"],[7378,20,6810,22],[7378,23,6810,25,"isNewUser"],[7378,32,6810,34],[7379,6,6811,8],[7379,10,6811,12],[7379,11,6811,13,"providerId"],[7379,21,6811,23],[7379,24,6811,26,"providerId"],[7379,34,6811,36],[7380,6,6812,8],[7380,10,6812,12],[7380,11,6812,13,"profile"],[7380,18,6812,20],[7380,21,6812,23,"profile"],[7380,28,6812,30],[7381,4,6813,4],[7382,2,6814,0],[7383,2,6815,0],[7383,8,6815,6,"FederatedAdditionalUserInfoWithUsername"],[7383,47,6815,45],[7383,56,6815,54,"GenericAdditionalUserInfo"],[7383,81,6815,79],[7383,82,6815,80],[7384,4,6816,4,"constructor"],[7384,15,6816,15,"constructor"],[7384,16,6816,16,"isNewUser"],[7384,25,6816,25],[7384,27,6816,27,"providerId"],[7384,37,6816,37],[7384,39,6816,39,"profile"],[7384,46,6816,46],[7384,48,6816,48,"username"],[7384,56,6816,56],[7384,58,6816,58],[7385,6,6817,8],[7385,11,6817,13],[7385,12,6817,14,"isNewUser"],[7385,21,6817,23],[7385,23,6817,25,"providerId"],[7385,33,6817,35],[7385,35,6817,37,"profile"],[7385,42,6817,44],[7385,43,6817,45],[7386,6,6818,8],[7386,10,6818,12],[7386,11,6818,13,"username"],[7386,19,6818,21],[7386,22,6818,24,"username"],[7386,30,6818,32],[7387,4,6819,4],[7388,2,6820,0],[7389,2,6821,0],[7389,8,6821,6,"FacebookAdditionalUserInfo"],[7389,34,6821,32],[7389,43,6821,41,"GenericAdditionalUserInfo"],[7389,68,6821,66],[7389,69,6821,67],[7390,4,6822,4,"constructor"],[7390,15,6822,15,"constructor"],[7390,16,6822,16,"isNewUser"],[7390,25,6822,25],[7390,27,6822,27,"profile"],[7390,34,6822,34],[7390,36,6822,36],[7391,6,6823,8],[7391,11,6823,13],[7391,12,6823,14,"isNewUser"],[7391,21,6823,23],[7391,23,6823,25],[7391,37,6823,39],[7391,38,6823,40],[7391,65,6823,67,"profile"],[7391,72,6823,74],[7391,73,6823,75],[7392,4,6824,4],[7393,2,6825,0],[7394,2,6826,0],[7394,8,6826,6,"GithubAdditionalUserInfo"],[7394,32,6826,30],[7394,41,6826,39,"FederatedAdditionalUserInfoWithUsername"],[7394,80,6826,78],[7394,81,6826,79],[7395,4,6827,4,"constructor"],[7395,15,6827,15,"constructor"],[7395,16,6827,16,"isNewUser"],[7395,25,6827,25],[7395,27,6827,27,"profile"],[7395,34,6827,34],[7395,36,6827,36],[7396,6,6828,8],[7396,11,6828,13],[7396,12,6828,14,"isNewUser"],[7396,21,6828,23],[7396,23,6828,25],[7396,35,6828,37],[7396,36,6828,38],[7396,61,6828,63,"profile"],[7396,68,6828,70],[7396,70,6828,72],[7396,77,6828,79,"profile"],[7396,84,6828,86],[7396,86,6828,88,"login"],[7396,91,6828,93],[7396,96,6828,98],[7396,104,6828,106],[7396,107,6828,109,"profile"],[7396,114,6828,116],[7396,116,6828,118,"login"],[7396,121,6828,123],[7396,124,6828,126],[7396,128,6828,130],[7396,129,6828,131],[7397,4,6829,4],[7398,2,6830,0],[7399,2,6831,0],[7399,8,6831,6,"GoogleAdditionalUserInfo"],[7399,32,6831,30],[7399,41,6831,39,"GenericAdditionalUserInfo"],[7399,66,6831,64],[7399,67,6831,65],[7400,4,6832,4,"constructor"],[7400,15,6832,15,"constructor"],[7400,16,6832,16,"isNewUser"],[7400,25,6832,25],[7400,27,6832,27,"profile"],[7400,34,6832,34],[7400,36,6832,36],[7401,6,6833,8],[7401,11,6833,13],[7401,12,6833,14,"isNewUser"],[7401,21,6833,23],[7401,23,6833,25],[7401,35,6833,37],[7401,36,6833,38],[7401,61,6833,63,"profile"],[7401,68,6833,70],[7401,69,6833,71],[7402,4,6834,4],[7403,2,6835,0],[7404,2,6836,0],[7404,8,6836,6,"TwitterAdditionalUserInfo"],[7404,33,6836,31],[7404,42,6836,40,"FederatedAdditionalUserInfoWithUsername"],[7404,81,6836,79],[7404,82,6836,80],[7405,4,6837,4,"constructor"],[7405,15,6837,15,"constructor"],[7405,16,6837,16,"isNewUser"],[7405,25,6837,25],[7405,27,6837,27,"profile"],[7405,34,6837,34],[7405,36,6837,36,"screenName"],[7405,46,6837,46],[7405,48,6837,48],[7406,6,6838,8],[7406,11,6838,13],[7406,12,6838,14,"isNewUser"],[7406,21,6838,23],[7406,23,6838,25],[7406,36,6838,38],[7406,37,6838,39],[7406,63,6838,65,"profile"],[7406,70,6838,72],[7406,72,6838,74,"screenName"],[7406,82,6838,84],[7406,83,6838,85],[7407,4,6839,4],[7408,2,6840,0],[7409,2,6841,0],[7410,0,6842,0],[7411,0,6843,0],[7412,0,6844,0],[7413,0,6845,0],[7414,0,6846,0],[7415,0,6847,0],[7416,2,6848,0],[7416,11,6848,9,"getAdditionalUserInfo"],[7416,32,6848,30,"getAdditionalUserInfo"],[7416,33,6848,31,"userCredential"],[7416,47,6848,45],[7416,49,6848,47],[7417,4,6849,4],[7417,10,6849,10],[7418,6,6849,12,"user"],[7418,10,6849,16],[7419,6,6849,18,"_tokenResponse"],[7420,4,6849,33],[7420,5,6849,34],[7420,8,6849,37,"userCredential"],[7420,22,6849,51],[7421,4,6850,4],[7421,8,6850,8,"user"],[7421,12,6850,12],[7421,13,6850,13,"isAnonymous"],[7421,24,6850,24],[7421,28,6850,28],[7421,29,6850,29,"_tokenResponse"],[7421,43,6850,43],[7421,45,6850,45],[7422,6,6851,8],[7423,6,6852,8],[7424,6,6853,8],[7424,13,6853,15],[7425,8,6854,12,"providerId"],[7425,18,6854,22],[7425,20,6854,24],[7425,24,6854,28],[7426,8,6855,12,"isNewUser"],[7426,17,6855,21],[7426,19,6855,23],[7426,24,6855,28],[7427,8,6856,12,"profile"],[7427,15,6856,19],[7427,17,6856,21],[7428,6,6857,8],[7428,7,6857,9],[7429,4,6858,4],[7430,4,6859,4],[7430,11,6859,11,"_fromIdTokenResponse"],[7430,31,6859,31],[7430,32,6859,32,"_tokenResponse"],[7430,46,6859,46],[7430,47,6859,47],[7431,2,6860,0],[7433,2,6862,0],[7434,0,6863,0],[7435,0,6864,0],[7436,0,6865,0],[7437,0,6866,0],[7438,0,6867,0],[7439,0,6868,0],[7440,0,6869,0],[7441,0,6870,0],[7442,0,6871,0],[7443,0,6872,0],[7444,0,6873,0],[7445,0,6874,0],[7446,0,6875,0],[7447,0,6876,0],[7448,0,6877,0],[7449,2,6878,0],[7450,2,6879,0],[7451,0,6880,0],[7452,0,6881,0],[7453,0,6882,0],[7454,0,6883,0],[7455,0,6884,0],[7456,0,6885,0],[7457,0,6886,0],[7458,0,6887,0],[7459,0,6888,0],[7460,0,6889,0],[7461,0,6890,0],[7462,0,6891,0],[7463,0,6892,0],[7464,0,6893,0],[7465,0,6894,0],[7466,0,6895,0],[7467,0,6896,0],[7468,0,6897,0],[7469,0,6898,0],[7470,0,6899,0],[7471,0,6900,0],[7472,0,6901,0],[7473,0,6902,0],[7474,2,6903,0],[7474,11,6903,9,"setPersistence"],[7474,25,6903,23,"setPersistence"],[7474,26,6903,24,"auth"],[7474,30,6903,28],[7474,32,6903,30,"persistence"],[7474,43,6903,41],[7474,45,6903,43],[7475,4,6904,4],[7475,11,6904,11],[7475,15,6904,11,"getModularInstance"],[7475,28,6904,29],[7475,29,6904,29,"getModularInstance"],[7475,47,6904,29],[7475,49,6904,30,"auth"],[7475,53,6904,34],[7475,54,6904,35],[7475,55,6904,36,"setPersistence"],[7475,69,6904,50],[7475,70,6904,51,"persistence"],[7475,81,6904,62],[7475,82,6904,63],[7476,2,6905,0],[7477,2,6906,0],[7478,0,6907,0],[7479,0,6908,0],[7480,0,6909,0],[7481,0,6910,0],[7482,0,6911,0],[7483,0,6912,0],[7484,0,6913,0],[7485,0,6914,0],[7486,0,6915,0],[7487,0,6916,0],[7488,0,6917,0],[7489,0,6918,0],[7490,0,6919,0],[7491,0,6920,0],[7492,0,6921,0],[7493,0,6922,0],[7494,0,6923,0],[7495,0,6924,0],[7496,0,6925,0],[7497,0,6926,0],[7498,0,6927,0],[7499,0,6928,0],[7500,0,6929,0],[7501,0,6930,0],[7502,0,6931,0],[7503,0,6932,0],[7504,2,6933,0],[7504,11,6933,9,"initializeRecaptchaConfig"],[7504,36,6933,34,"initializeRecaptchaConfig"],[7504,37,6933,35,"auth"],[7504,41,6933,39],[7504,43,6933,41],[7505,4,6934,4],[7505,11,6934,11,"_initializeRecaptchaConfig"],[7505,37,6934,37],[7505,38,6934,38,"auth"],[7505,42,6934,42],[7505,43,6934,43],[7506,2,6935,0],[7507,2,6936,0],[7508,0,6937,0],[7509,0,6938,0],[7510,0,6939,0],[7511,0,6940,0],[7512,0,6941,0],[7513,0,6942,0],[7514,0,6943,0],[7515,0,6944,0],[7516,0,6945,0],[7517,0,6946,0],[7518,0,6947,0],[7519,0,6948,0],[7520,0,6949,0],[7521,0,6950,0],[7522,0,6951,0],[7523,0,6952,0],[7524,0,6953,0],[7525,0,6954,0],[7526,0,6955,0],[7527,0,6956,0],[7528,0,6957,0],[7529,0,6958,0],[7530,2,6959,0],[7530,17,6959,15,"validatePassword"],[7530,33,6959,31,"validatePassword"],[7530,34,6959,32,"auth"],[7530,38,6959,36],[7530,40,6959,38,"password"],[7530,48,6959,46],[7530,50,6959,48],[7531,4,6960,4],[7531,10,6960,10,"authInternal"],[7531,22,6960,22],[7531,25,6960,25,"_castAuth"],[7531,34,6960,34],[7531,35,6960,35,"auth"],[7531,39,6960,39],[7531,40,6960,40],[7532,4,6961,4],[7532,11,6961,11,"authInternal"],[7532,23,6961,23],[7532,24,6961,24,"validatePassword"],[7532,40,6961,40],[7532,41,6961,41,"password"],[7532,49,6961,49],[7532,50,6961,50],[7533,2,6962,0],[7534,2,6963,0],[7535,0,6964,0],[7536,0,6965,0],[7537,0,6966,0],[7538,0,6967,0],[7539,0,6968,0],[7540,0,6969,0],[7541,0,6970,0],[7542,0,6971,0],[7543,0,6972,0],[7544,0,6973,0],[7545,0,6974,0],[7546,0,6975,0],[7547,0,6976,0],[7548,0,6977,0],[7549,0,6978,0],[7550,2,6979,0],[7550,11,6979,9,"onIdTokenChanged"],[7550,27,6979,25,"onIdTokenChanged"],[7550,28,6979,26,"auth"],[7550,32,6979,30],[7550,34,6979,32,"nextOrObserver"],[7550,48,6979,46],[7550,50,6979,48,"error"],[7550,55,6979,53],[7550,57,6979,55,"completed"],[7550,66,6979,64],[7550,68,6979,66],[7551,4,6980,4],[7551,11,6980,11],[7551,15,6980,11,"getModularInstance"],[7551,28,6980,29],[7551,29,6980,29,"getModularInstance"],[7551,47,6980,29],[7551,49,6980,30,"auth"],[7551,53,6980,34],[7551,54,6980,35],[7551,55,6980,36,"onIdTokenChanged"],[7551,71,6980,52],[7551,72,6980,53,"nextOrObserver"],[7551,86,6980,67],[7551,88,6980,69,"error"],[7551,93,6980,74],[7551,95,6980,76,"completed"],[7551,104,6980,85],[7551,105,6980,86],[7552,2,6981,0],[7553,2,6982,0],[7554,0,6983,0],[7555,0,6984,0],[7556,0,6985,0],[7557,0,6986,0],[7558,0,6987,0],[7559,0,6988,0],[7560,0,6989,0],[7561,0,6990,0],[7562,0,6991,0],[7563,2,6992,0],[7563,11,6992,9,"beforeAuthStateChanged"],[7563,33,6992,31,"beforeAuthStateChanged"],[7563,34,6992,32,"auth"],[7563,38,6992,36],[7563,40,6992,38,"callback"],[7563,48,6992,46],[7563,50,6992,48,"onAbort"],[7563,57,6992,55],[7563,59,6992,57],[7564,4,6993,4],[7564,11,6993,11],[7564,15,6993,11,"getModularInstance"],[7564,28,6993,29],[7564,29,6993,29,"getModularInstance"],[7564,47,6993,29],[7564,49,6993,30,"auth"],[7564,53,6993,34],[7564,54,6993,35],[7564,55,6993,36,"beforeAuthStateChanged"],[7564,77,6993,58],[7564,78,6993,59,"callback"],[7564,86,6993,67],[7564,88,6993,69,"onAbort"],[7564,95,6993,76],[7564,96,6993,77],[7565,2,6994,0],[7566,2,6995,0],[7567,0,6996,0],[7568,0,6997,0],[7569,0,6998,0],[7570,0,6999,0],[7571,0,7000,0],[7572,0,7001,0],[7573,0,7002,0],[7574,0,7003,0],[7575,0,7004,0],[7576,0,7005,0],[7577,0,7006,0],[7578,0,7007,0],[7579,0,7008,0],[7580,0,7009,0],[7581,2,7010,0],[7581,11,7010,9,"onAuthStateChanged"],[7581,29,7010,27,"onAuthStateChanged"],[7581,30,7010,28,"auth"],[7581,34,7010,32],[7581,36,7010,34,"nextOrObserver"],[7581,50,7010,48],[7581,52,7010,50,"error"],[7581,57,7010,55],[7581,59,7010,57,"completed"],[7581,68,7010,66],[7581,70,7010,68],[7582,4,7011,4],[7582,11,7011,11],[7582,15,7011,11,"getModularInstance"],[7582,28,7011,29],[7582,29,7011,29,"getModularInstance"],[7582,47,7011,29],[7582,49,7011,30,"auth"],[7582,53,7011,34],[7582,54,7011,35],[7582,55,7011,36,"onAuthStateChanged"],[7582,73,7011,54],[7582,74,7011,55,"nextOrObserver"],[7582,88,7011,69],[7582,90,7011,71,"error"],[7582,95,7011,76],[7582,97,7011,78,"completed"],[7582,106,7011,87],[7582,107,7011,88],[7583,2,7012,0],[7584,2,7013,0],[7585,0,7014,0],[7586,0,7015,0],[7587,0,7016,0],[7588,0,7017,0],[7589,0,7018,0],[7590,0,7019,0],[7591,2,7020,0],[7591,11,7020,9,"useDeviceLanguage"],[7591,28,7020,26,"useDeviceLanguage"],[7591,29,7020,27,"auth"],[7591,33,7020,31],[7591,35,7020,33],[7592,4,7021,4],[7592,8,7021,4,"getModularInstance"],[7592,21,7021,22],[7592,22,7021,22,"getModularInstance"],[7592,40,7021,22],[7592,42,7021,23,"auth"],[7592,46,7021,27],[7592,47,7021,28],[7592,48,7021,29,"useDeviceLanguage"],[7592,65,7021,46],[7592,66,7021,47],[7592,67,7021,48],[7593,2,7022,0],[7594,2,7023,0],[7595,0,7024,0],[7596,0,7025,0],[7597,0,7026,0],[7598,0,7027,0],[7599,0,7028,0],[7600,0,7029,0],[7601,0,7030,0],[7602,0,7031,0],[7603,0,7032,0],[7604,0,7033,0],[7605,0,7034,0],[7606,0,7035,0],[7607,0,7036,0],[7608,0,7037,0],[7609,0,7038,0],[7610,0,7039,0],[7611,0,7040,0],[7612,0,7041,0],[7613,0,7042,0],[7614,0,7043,0],[7615,2,7044,0],[7615,11,7044,9,"updateCurrentUser"],[7615,28,7044,26,"updateCurrentUser"],[7615,29,7044,27,"auth"],[7615,33,7044,31],[7615,35,7044,33,"user"],[7615,39,7044,37],[7615,41,7044,39],[7616,4,7045,4],[7616,11,7045,11],[7616,15,7045,11,"getModularInstance"],[7616,28,7045,29],[7616,29,7045,29,"getModularInstance"],[7616,47,7045,29],[7616,49,7045,30,"auth"],[7616,53,7045,34],[7616,54,7045,35],[7616,55,7045,36,"updateCurrentUser"],[7616,72,7045,53],[7616,73,7045,54,"user"],[7616,77,7045,58],[7616,78,7045,59],[7617,2,7046,0],[7618,2,7047,0],[7619,0,7048,0],[7620,0,7049,0],[7621,0,7050,0],[7622,0,7051,0],[7623,0,7052,0],[7624,0,7053,0],[7625,0,7054,0],[7626,0,7055,0],[7627,0,7056,0],[7628,0,7057,0],[7629,2,7058,0],[7629,11,7058,9,"signOut"],[7629,18,7058,16,"signOut"],[7629,19,7058,17,"auth"],[7629,23,7058,21],[7629,25,7058,23],[7630,4,7059,4],[7630,11,7059,11],[7630,15,7059,11,"getModularInstance"],[7630,28,7059,29],[7630,29,7059,29,"getModularInstance"],[7630,47,7059,29],[7630,49,7059,30,"auth"],[7630,53,7059,34],[7630,54,7059,35],[7630,55,7059,36,"signOut"],[7630,62,7059,43],[7630,63,7059,44],[7630,64,7059,45],[7631,2,7060,0],[7632,2,7061,0],[7633,0,7062,0],[7634,0,7063,0],[7635,0,7064,0],[7636,0,7065,0],[7637,0,7066,0],[7638,0,7067,0],[7639,0,7068,0],[7640,2,7069,0],[7640,11,7069,9,"revokeAccessToken"],[7640,28,7069,26,"revokeAccessToken"],[7640,29,7069,27,"auth"],[7640,33,7069,31],[7640,35,7069,33,"token"],[7640,40,7069,38],[7640,42,7069,40],[7641,4,7070,4],[7641,10,7070,10,"authInternal"],[7641,22,7070,22],[7641,25,7070,25,"_castAuth"],[7641,34,7070,34],[7641,35,7070,35,"auth"],[7641,39,7070,39],[7641,40,7070,40],[7642,4,7071,4],[7642,11,7071,11,"authInternal"],[7642,23,7071,23],[7642,24,7071,24,"revokeAccessToken"],[7642,41,7071,41],[7642,42,7071,42,"token"],[7642,47,7071,47],[7642,48,7071,48],[7643,2,7072,0],[7644,2,7073,0],[7645,0,7074,0],[7646,0,7075,0],[7647,0,7076,0],[7648,0,7077,0],[7649,0,7078,0],[7650,0,7079,0],[7651,0,7080,0],[7652,0,7081,0],[7653,0,7082,0],[7654,0,7083,0],[7655,0,7084,0],[7656,2,7085,0],[7656,17,7085,15,"deleteUser"],[7656,27,7085,25,"deleteUser"],[7656,28,7085,26,"user"],[7656,32,7085,30],[7656,34,7085,32],[7657,4,7086,4],[7657,11,7086,11],[7657,15,7086,11,"getModularInstance"],[7657,28,7086,29],[7657,29,7086,29,"getModularInstance"],[7657,47,7086,29],[7657,49,7086,30,"user"],[7657,53,7086,34],[7657,54,7086,35],[7657,55,7086,36,"delete"],[7657,61,7086,42],[7657,62,7086,43],[7657,63,7086,44],[7658,2,7087,0],[7660,2,7089,0],[7661,0,7090,0],[7662,0,7091,0],[7663,0,7092,0],[7664,0,7093,0],[7665,0,7094,0],[7666,0,7095,0],[7667,0,7096,0],[7668,0,7097,0],[7669,0,7098,0],[7670,0,7099,0],[7671,0,7100,0],[7672,0,7101,0],[7673,0,7102,0],[7674,0,7103,0],[7675,0,7104,0],[7676,2,7105,0],[7676,8,7105,6,"MultiFactorSessionImpl"],[7676,30,7105,28],[7676,31,7105,29],[7677,4,7106,4,"constructor"],[7677,15,7106,15,"constructor"],[7677,16,7106,16,"type"],[7677,20,7106,20],[7677,22,7106,22,"credential"],[7677,32,7106,32],[7677,34,7106,34,"user"],[7677,38,7106,38],[7677,40,7106,40],[7678,6,7107,8],[7678,10,7107,12],[7678,11,7107,13,"type"],[7678,15,7107,17],[7678,18,7107,20,"type"],[7678,22,7107,24],[7679,6,7108,8],[7679,10,7108,12],[7679,11,7108,13,"credential"],[7679,21,7108,23],[7679,24,7108,26,"credential"],[7679,34,7108,36],[7680,6,7109,8],[7680,10,7109,12],[7680,11,7109,13,"user"],[7680,15,7109,17],[7680,18,7109,20,"user"],[7680,22,7109,24],[7681,4,7110,4],[7682,4,7111,4],[7682,11,7111,11,"_fromIdtoken"],[7682,23,7111,23,"_fromIdtoken"],[7682,24,7111,24,"idToken"],[7682,31,7111,31],[7682,33,7111,33,"user"],[7682,37,7111,37],[7682,39,7111,39],[7683,6,7112,8],[7683,13,7112,15],[7683,17,7112,19,"MultiFactorSessionImpl"],[7683,39,7112,41],[7683,40,7112,42],[7683,48,7112,50],[7683,49,7112,51],[7683,86,7112,88,"idToken"],[7683,93,7112,95],[7683,95,7112,97,"user"],[7683,99,7112,101],[7683,100,7112,102],[7684,4,7113,4],[7685,4,7114,4],[7685,11,7114,11,"_fromMfaPendingCredential"],[7685,36,7114,36,"_fromMfaPendingCredential"],[7685,37,7114,37,"mfaPendingCredential"],[7685,57,7114,57],[7685,59,7114,59],[7686,6,7115,8],[7686,13,7115,15],[7686,17,7115,19,"MultiFactorSessionImpl"],[7686,39,7115,41],[7686,40,7115,42],[7686,48,7115,50],[7686,49,7115,51],[7686,87,7115,89,"mfaPendingCredential"],[7686,107,7115,109],[7686,108,7115,110],[7687,4,7116,4],[7688,4,7117,4,"toJSON"],[7688,10,7117,10,"toJSON"],[7688,11,7117,10],[7688,13,7117,13],[7689,6,7118,8],[7689,12,7118,14,"key"],[7689,15,7118,17],[7689,18,7118,20],[7689,22,7118,24],[7689,23,7118,25,"type"],[7689,27,7118,29],[7689,32,7118,34],[7689,40,7118,42],[7689,41,7118,43],[7689,79,7119,14],[7689,88,7119,23],[7689,91,7120,14],[7689,110,7120,33],[7690,6,7121,8],[7690,13,7121,15],[7691,8,7122,12,"multiFactorSession"],[7691,26,7122,30],[7691,28,7122,32],[7692,10,7123,16],[7692,11,7123,17,"key"],[7692,14,7123,20],[7692,17,7123,23],[7692,21,7123,27],[7692,22,7123,28,"credential"],[7693,8,7124,12],[7694,6,7125,8],[7694,7,7125,9],[7695,4,7126,4],[7696,4,7127,4],[7696,11,7127,11,"fromJSON"],[7696,19,7127,19,"fromJSON"],[7696,20,7127,20,"obj"],[7696,23,7127,23],[7696,25,7127,25],[7697,6,7128,8],[7697,10,7128,12,"obj"],[7697,13,7128,15],[7697,15,7128,17,"multiFactorSession"],[7697,33,7128,35],[7697,35,7128,37],[7698,8,7129,12],[7698,12,7129,16,"obj"],[7698,15,7129,19],[7698,16,7129,20,"multiFactorSession"],[7698,34,7129,38],[7698,36,7129,40,"pendingCredential"],[7698,53,7129,57],[7698,55,7129,59],[7699,10,7130,16],[7699,17,7130,23,"MultiFactorSessionImpl"],[7699,39,7130,45],[7699,40,7130,46,"_fromMfaPendingCredential"],[7699,65,7130,71],[7699,66,7130,72,"obj"],[7699,69,7130,75],[7699,70,7130,76,"multiFactorSession"],[7699,88,7130,94],[7699,89,7130,95,"pendingCredential"],[7699,106,7130,112],[7699,107,7130,113],[7700,8,7131,12],[7700,9,7131,13],[7700,15,7132,17],[7700,19,7132,21,"obj"],[7700,22,7132,24],[7700,23,7132,25,"multiFactorSession"],[7700,41,7132,43],[7700,43,7132,45,"idToken"],[7700,50,7132,52],[7700,52,7132,54],[7701,10,7133,16],[7701,17,7133,23,"MultiFactorSessionImpl"],[7701,39,7133,45],[7701,40,7133,46,"_fromIdtoken"],[7701,52,7133,58],[7701,53,7133,59,"obj"],[7701,56,7133,62],[7701,57,7133,63,"multiFactorSession"],[7701,75,7133,81],[7701,76,7133,82,"idToken"],[7701,83,7133,89],[7701,84,7133,90],[7702,8,7134,12],[7703,6,7135,8],[7704,6,7136,8],[7704,13,7136,15],[7704,17,7136,19],[7705,4,7137,4],[7706,2,7138,0],[7708,2,7140,0],[7709,0,7141,0],[7710,0,7142,0],[7711,0,7143,0],[7712,0,7144,0],[7713,0,7145,0],[7714,0,7146,0],[7715,0,7147,0],[7716,0,7148,0],[7717,0,7149,0],[7718,0,7150,0],[7719,0,7151,0],[7720,0,7152,0],[7721,0,7153,0],[7722,0,7154,0],[7723,0,7155,0],[7724,2,7156,0],[7724,8,7156,6,"MultiFactorResolverImpl"],[7724,31,7156,29],[7724,32,7156,30],[7725,4,7157,4,"constructor"],[7725,15,7157,15,"constructor"],[7725,16,7157,16,"session"],[7725,23,7157,23],[7725,25,7157,25,"hints"],[7725,30,7157,30],[7725,32,7157,32,"signInResolver"],[7725,46,7157,46],[7725,48,7157,48],[7726,6,7158,8],[7726,10,7158,12],[7726,11,7158,13,"session"],[7726,18,7158,20],[7726,21,7158,23,"session"],[7726,28,7158,30],[7727,6,7159,8],[7727,10,7159,12],[7727,11,7159,13,"hints"],[7727,16,7159,18],[7727,19,7159,21,"hints"],[7727,24,7159,26],[7728,6,7160,8],[7728,10,7160,12],[7728,11,7160,13,"signInResolver"],[7728,25,7160,27],[7728,28,7160,30,"signInResolver"],[7728,42,7160,44],[7729,4,7161,4],[7730,4,7162,4],[7731,4,7163,4],[7731,11,7163,11,"_fromError"],[7731,21,7163,21,"_fromError"],[7731,22,7163,22,"authExtern"],[7731,32,7163,32],[7731,34,7163,34,"error"],[7731,39,7163,39],[7731,41,7163,41],[7732,6,7164,8],[7732,12,7164,14,"auth"],[7732,16,7164,18],[7732,19,7164,21,"_castAuth"],[7732,28,7164,30],[7732,29,7164,31,"authExtern"],[7732,39,7164,41],[7732,40,7164,42],[7733,6,7165,8],[7733,12,7165,14,"serverResponse"],[7733,26,7165,28],[7733,29,7165,31,"error"],[7733,34,7165,36],[7733,35,7165,37,"customData"],[7733,45,7165,47],[7733,46,7165,48,"_serverResponse"],[7733,61,7165,63],[7734,6,7166,8],[7734,12,7166,14,"hints"],[7734,17,7166,19],[7734,20,7166,22],[7734,21,7166,23,"serverResponse"],[7734,35,7166,37],[7734,36,7166,38,"mfaInfo"],[7734,43,7166,45],[7734,47,7166,49],[7734,49,7166,51],[7734,51,7166,53,"map"],[7734,54,7166,56],[7734,55,7166,57,"enrollment"],[7734,65,7166,67],[7734,69,7166,71,"MultiFactorInfoImpl"],[7734,88,7166,90],[7734,89,7166,91,"_fromServerResponse"],[7734,108,7166,110],[7734,109,7166,111,"auth"],[7734,113,7166,115],[7734,115,7166,117,"enrollment"],[7734,125,7166,127],[7734,126,7166,128],[7734,127,7166,129],[7735,6,7167,8,"_assert"],[7735,13,7167,15],[7735,14,7167,16,"serverResponse"],[7735,28,7167,30],[7735,29,7167,31,"mfaPendingCredential"],[7735,49,7167,51],[7735,51,7167,53,"auth"],[7735,55,7167,57],[7735,57,7167,59],[7735,73,7167,75],[7735,74,7167,76],[7735,108,7167,110],[7735,109,7167,111],[7736,6,7168,8],[7736,12,7168,14,"session"],[7736,19,7168,21],[7736,22,7168,24,"MultiFactorSessionImpl"],[7736,44,7168,46],[7736,45,7168,47,"_fromMfaPendingCredential"],[7736,70,7168,72],[7736,71,7168,73,"serverResponse"],[7736,85,7168,87],[7736,86,7168,88,"mfaPendingCredential"],[7736,106,7168,108],[7736,107,7168,109],[7737,6,7169,8],[7737,13,7169,15],[7737,17,7169,19,"MultiFactorResolverImpl"],[7737,40,7169,42],[7737,41,7169,43,"session"],[7737,48,7169,50],[7737,50,7169,52,"hints"],[7737,55,7169,57],[7737,57,7169,59],[7737,63,7169,66,"assertion"],[7737,72,7169,75],[7737,76,7169,80],[7738,8,7170,12],[7738,14,7170,18,"mfaResponse"],[7738,25,7170,29],[7738,28,7170,32],[7738,34,7170,38,"assertion"],[7738,43,7170,47],[7738,44,7170,48,"_process"],[7738,52,7170,56],[7738,53,7170,57,"auth"],[7738,57,7170,61],[7738,59,7170,63,"session"],[7738,66,7170,70],[7738,67,7170,71],[7739,8,7171,12],[7740,8,7172,12],[7740,15,7172,19,"serverResponse"],[7740,29,7172,33],[7740,30,7172,34,"mfaInfo"],[7740,37,7172,41],[7741,8,7173,12],[7741,15,7173,19,"serverResponse"],[7741,29,7173,33],[7741,30,7173,34,"mfaPendingCredential"],[7741,50,7173,54],[7742,8,7174,12],[7743,8,7175,12],[7743,14,7175,18,"idTokenResponse"],[7743,29,7175,33],[7743,32,7175,33,"Object"],[7743,38,7175,33],[7743,39,7175,33,"assign"],[7743,45,7175,33],[7743,50,7176,19,"serverResponse"],[7743,64,7176,33],[7744,10,7177,16,"idToken"],[7744,17,7177,23],[7744,19,7177,25,"mfaResponse"],[7744,30,7177,36],[7744,31,7177,37,"idToken"],[7744,38,7177,44],[7745,10,7178,16,"refreshToken"],[7745,22,7178,28],[7745,24,7178,30,"mfaResponse"],[7745,35,7178,41],[7745,36,7178,42,"refreshToken"],[7746,8,7178,54],[7746,10,7179,13],[7747,8,7180,12],[7748,8,7181,12],[7748,16,7181,20,"error"],[7748,21,7181,25],[7748,22,7181,26,"operationType"],[7748,35,7181,39],[7749,10,7182,16],[7749,15,7182,21],[7749,23,7182,29],[7749,24,7182,30],[7750,12,7183,20],[7750,18,7183,26,"userCredential"],[7750,32,7183,40],[7750,35,7183,43],[7750,41,7183,49,"UserCredentialImpl"],[7750,59,7183,67],[7750,60,7183,68,"_fromIdTokenResponse"],[7750,80,7183,88],[7750,81,7183,89,"auth"],[7750,85,7183,93],[7750,87,7183,95,"error"],[7750,92,7183,100],[7750,93,7183,101,"operationType"],[7750,106,7183,114],[7750,108,7183,116,"idTokenResponse"],[7750,123,7183,131],[7750,124,7183,132],[7751,12,7184,20],[7751,18,7184,26,"auth"],[7751,22,7184,30],[7751,23,7184,31,"_updateCurrentUser"],[7751,41,7184,49],[7751,42,7184,50,"userCredential"],[7751,56,7184,64],[7751,57,7184,65,"user"],[7751,61,7184,69],[7751,62,7184,70],[7752,12,7185,20],[7752,19,7185,27,"userCredential"],[7752,33,7185,41],[7753,10,7186,16],[7753,15,7186,21],[7753,31,7186,37],[7753,32,7186,38],[7754,12,7187,20,"_assert"],[7754,19,7187,27],[7754,20,7187,28,"error"],[7754,25,7187,33],[7754,26,7187,34,"user"],[7754,30,7187,38],[7754,32,7187,40,"auth"],[7754,36,7187,44],[7754,38,7187,46],[7754,54,7187,62],[7754,55,7187,63],[7754,89,7187,97],[7754,90,7187,98],[7755,12,7188,20],[7755,19,7188,27,"UserCredentialImpl"],[7755,37,7188,45],[7755,38,7188,46,"_forOperation"],[7755,51,7188,59],[7755,52,7188,60,"error"],[7755,57,7188,65],[7755,58,7188,66,"user"],[7755,62,7188,70],[7755,64,7188,72,"error"],[7755,69,7188,77],[7755,70,7188,78,"operationType"],[7755,83,7188,91],[7755,85,7188,93,"idTokenResponse"],[7755,100,7188,108],[7755,101,7188,109],[7756,10,7189,16],[7757,12,7190,20,"_fail"],[7757,17,7190,25],[7757,18,7190,26,"auth"],[7757,22,7190,30],[7757,24,7190,32],[7757,40,7190,48],[7757,41,7190,49],[7757,75,7190,83],[7757,76,7190,84],[7758,8,7191,12],[7759,6,7192,8],[7759,7,7192,9],[7759,8,7192,10],[7760,4,7193,4],[7761,4,7194,4],[7761,10,7194,10,"resolveSignIn"],[7761,23,7194,23,"resolveSignIn"],[7761,24,7194,24,"assertionExtern"],[7761,39,7194,39],[7761,41,7194,41],[7762,6,7195,8],[7762,12,7195,14,"assertion"],[7762,21,7195,23],[7762,24,7195,26,"assertionExtern"],[7762,39,7195,41],[7763,6,7196,8],[7763,13,7196,15],[7763,17,7196,19],[7763,18,7196,20,"signInResolver"],[7763,32,7196,34],[7763,33,7196,35,"assertion"],[7763,42,7196,44],[7763,43,7196,45],[7764,4,7197,4],[7765,2,7198,0],[7766,2,7199,0],[7767,0,7200,0],[7768,0,7201,0],[7769,0,7202,0],[7770,0,7203,0],[7771,0,7204,0],[7772,0,7205,0],[7773,0,7206,0],[7774,0,7207,0],[7775,0,7208,0],[7776,2,7209,0],[7776,11,7209,9,"getMultiFactorResolver"],[7776,33,7209,31,"getMultiFactorResolver"],[7776,34,7209,32,"auth"],[7776,38,7209,36],[7776,40,7209,38,"error"],[7776,45,7209,43],[7776,47,7209,45],[7777,4,7210,4],[7777,10,7210,10,"authModular"],[7777,21,7210,21],[7777,24,7210,24],[7777,28,7210,24,"getModularInstance"],[7777,41,7210,42],[7777,42,7210,42,"getModularInstance"],[7777,60,7210,42],[7777,62,7210,43,"auth"],[7777,66,7210,47],[7777,67,7210,48],[7778,4,7211,4],[7778,10,7211,10,"errorInternal"],[7778,23,7211,23],[7778,26,7211,26,"error"],[7778,31,7211,31],[7779,4,7212,4,"_assert"],[7779,11,7212,11],[7779,12,7212,12,"error"],[7779,17,7212,17],[7779,18,7212,18,"customData"],[7779,28,7212,28],[7779,29,7212,29,"operationType"],[7779,42,7212,42],[7779,44,7212,44,"authModular"],[7779,55,7212,55],[7779,57,7212,57],[7779,73,7212,73],[7779,74,7212,74],[7779,108,7212,108],[7779,109,7212,109],[7780,4,7213,4,"_assert"],[7780,11,7213,11],[7780,12,7213,12,"errorInternal"],[7780,25,7213,25],[7780,26,7213,26,"customData"],[7780,36,7213,36],[7780,37,7213,37,"_serverResponse"],[7780,52,7213,52],[7780,54,7213,54,"mfaPendingCredential"],[7780,74,7213,74],[7780,76,7213,76,"authModular"],[7780,87,7213,87],[7780,89,7213,89],[7780,105,7213,105],[7780,106,7213,106],[7780,140,7213,140],[7780,141,7213,141],[7781,4,7214,4],[7781,11,7214,11,"MultiFactorResolverImpl"],[7781,34,7214,34],[7781,35,7214,35,"_fromError"],[7781,45,7214,45],[7781,46,7214,46,"authModular"],[7781,57,7214,57],[7781,59,7214,59,"errorInternal"],[7781,72,7214,72],[7781,73,7214,73],[7782,2,7215,0],[7784,2,7217,0],[7785,0,7218,0],[7786,0,7219,0],[7787,0,7220,0],[7788,0,7221,0],[7789,0,7222,0],[7790,0,7223,0],[7791,0,7224,0],[7792,0,7225,0],[7793,0,7226,0],[7794,0,7227,0],[7795,0,7228,0],[7796,0,7229,0],[7797,0,7230,0],[7798,0,7231,0],[7799,0,7232,0],[7800,2,7233,0],[7800,11,7233,9,"startEnrollPhoneMfa"],[7800,30,7233,28,"startEnrollPhoneMfa"],[7800,31,7233,29,"auth"],[7800,35,7233,33],[7800,37,7233,35,"request"],[7800,44,7233,42],[7800,46,7233,44],[7801,4,7234,4],[7801,11,7234,11,"_performApiRequest"],[7801,29,7234,29],[7801,30,7234,30,"auth"],[7801,34,7234,34],[7801,36,7234,36],[7801,42,7234,42],[7801,43,7234,43],[7801,66,7234,66],[7801,100,7234,100],[7801,101,7234,101],[7801,138,7234,138,"_addTidIfNecessary"],[7801,156,7234,156],[7801,157,7234,157,"auth"],[7801,161,7234,161],[7801,163,7234,163,"request"],[7801,170,7234,170],[7801,171,7234,171],[7801,172,7234,172],[7802,2,7235,0],[7803,2,7236,0],[7803,11,7236,9,"finalizeEnrollPhoneMfa"],[7803,33,7236,31,"finalizeEnrollPhoneMfa"],[7803,34,7236,32,"auth"],[7803,38,7236,36],[7803,40,7236,38,"request"],[7803,47,7236,45],[7803,49,7236,47],[7804,4,7237,4],[7804,11,7237,11,"_performApiRequest"],[7804,29,7237,29],[7804,30,7237,30,"auth"],[7804,34,7237,34],[7804,36,7237,36],[7804,42,7237,42],[7804,43,7237,43],[7804,66,7237,66],[7804,103,7237,103],[7804,104,7237,104],[7804,144,7237,144,"_addTidIfNecessary"],[7804,162,7237,162],[7804,163,7237,163,"auth"],[7804,167,7237,167],[7804,169,7237,169,"request"],[7804,176,7237,176],[7804,177,7237,177],[7804,178,7237,178],[7805,2,7238,0],[7806,2,7239,0],[7806,11,7239,9,"startEnrollTotpMfa"],[7806,29,7239,27,"startEnrollTotpMfa"],[7806,30,7239,28,"auth"],[7806,34,7239,32],[7806,36,7239,34,"request"],[7806,43,7239,41],[7806,45,7239,43],[7807,4,7240,4],[7807,11,7240,11,"_performApiRequest"],[7807,29,7240,29],[7807,30,7240,30,"auth"],[7807,34,7240,34],[7807,36,7240,36],[7807,42,7240,42],[7807,43,7240,43],[7807,66,7240,66],[7807,100,7240,100],[7807,101,7240,101],[7807,138,7240,138,"_addTidIfNecessary"],[7807,156,7240,156],[7807,157,7240,157,"auth"],[7807,161,7240,161],[7807,163,7240,163,"request"],[7807,170,7240,170],[7807,171,7240,171],[7807,172,7240,172],[7808,2,7241,0],[7809,2,7242,0],[7809,11,7242,9,"finalizeEnrollTotpMfa"],[7809,32,7242,30,"finalizeEnrollTotpMfa"],[7809,33,7242,31,"auth"],[7809,37,7242,35],[7809,39,7242,37,"request"],[7809,46,7242,44],[7809,48,7242,46],[7810,4,7243,4],[7810,11,7243,11,"_performApiRequest"],[7810,29,7243,29],[7810,30,7243,30,"auth"],[7810,34,7243,34],[7810,36,7243,36],[7810,42,7243,42],[7810,43,7243,43],[7810,66,7243,66],[7810,103,7243,103],[7810,104,7243,104],[7810,144,7243,144,"_addTidIfNecessary"],[7810,162,7243,162],[7810,163,7243,163,"auth"],[7810,167,7243,167],[7810,169,7243,169,"request"],[7810,176,7243,176],[7810,177,7243,177],[7810,178,7243,178],[7811,2,7244,0],[7812,2,7245,0],[7812,11,7245,9,"withdrawMfa"],[7812,22,7245,20,"withdrawMfa"],[7812,23,7245,21,"auth"],[7812,27,7245,25],[7812,29,7245,27,"request"],[7812,36,7245,34],[7812,38,7245,36],[7813,4,7246,4],[7813,11,7246,11,"_performApiRequest"],[7813,29,7246,29],[7813,30,7246,30,"auth"],[7813,34,7246,34],[7813,36,7246,36],[7813,42,7246,42],[7813,43,7246,43],[7813,66,7246,66],[7813,103,7246,103],[7813,104,7246,104],[7813,133,7246,133,"_addTidIfNecessary"],[7813,151,7246,151],[7813,152,7246,152,"auth"],[7813,156,7246,156],[7813,158,7246,158,"request"],[7813,165,7246,165],[7813,166,7246,166],[7813,167,7246,167],[7814,2,7247,0],[7815,2,7249,0],[7815,8,7249,6,"MultiFactorUserImpl"],[7815,27,7249,25],[7815,28,7249,26],[7816,4,7250,4,"constructor"],[7816,15,7250,15,"constructor"],[7816,16,7250,16,"user"],[7816,20,7250,20],[7816,22,7250,22],[7817,6,7251,8],[7817,10,7251,12],[7817,11,7251,13,"user"],[7817,15,7251,17],[7817,18,7251,20,"user"],[7817,22,7251,24],[7818,6,7252,8],[7818,10,7252,12],[7818,11,7252,13,"enrolledFactors"],[7818,26,7252,28],[7818,29,7252,31],[7818,31,7252,33],[7819,6,7253,8,"user"],[7819,10,7253,12],[7819,11,7253,13,"_onReload"],[7819,20,7253,22],[7819,21,7253,23,"userInfo"],[7819,29,7253,31],[7819,33,7253,35],[7820,8,7254,12],[7820,12,7254,16,"userInfo"],[7820,20,7254,24],[7820,21,7254,25,"mfaInfo"],[7820,28,7254,32],[7820,30,7254,34],[7821,10,7255,16],[7821,14,7255,20],[7821,15,7255,21,"enrolledFactors"],[7821,30,7255,36],[7821,33,7255,39,"userInfo"],[7821,41,7255,47],[7821,42,7255,48,"mfaInfo"],[7821,49,7255,55],[7821,50,7255,56,"map"],[7821,53,7255,59],[7821,54,7255,60,"enrollment"],[7821,64,7255,70],[7821,68,7255,74,"MultiFactorInfoImpl"],[7821,87,7255,93],[7821,88,7255,94,"_fromServerResponse"],[7821,107,7255,113],[7821,108,7255,114,"user"],[7821,112,7255,118],[7821,113,7255,119,"auth"],[7821,117,7255,123],[7821,119,7255,125,"enrollment"],[7821,129,7255,135],[7821,130,7255,136],[7821,131,7255,137],[7822,8,7256,12],[7823,6,7257,8],[7823,7,7257,9],[7823,8,7257,10],[7824,4,7258,4],[7825,4,7259,4],[7825,11,7259,11,"_fromUser"],[7825,20,7259,20,"_fromUser"],[7825,21,7259,21,"user"],[7825,25,7259,25],[7825,27,7259,27],[7826,6,7260,8],[7826,13,7260,15],[7826,17,7260,19,"MultiFactorUserImpl"],[7826,36,7260,38],[7826,37,7260,39,"user"],[7826,41,7260,43],[7826,42,7260,44],[7827,4,7261,4],[7828,4,7262,4],[7828,10,7262,10,"getSession"],[7828,20,7262,20,"getSession"],[7828,21,7262,20],[7828,23,7262,23],[7829,6,7263,8],[7829,13,7263,15,"MultiFactorSessionImpl"],[7829,35,7263,37],[7829,36,7263,38,"_fromIdtoken"],[7829,48,7263,50],[7829,49,7263,51],[7829,55,7263,57],[7829,59,7263,61],[7829,60,7263,62,"user"],[7829,64,7263,66],[7829,65,7263,67,"getIdToken"],[7829,75,7263,77],[7829,76,7263,78],[7829,77,7263,79],[7829,79,7263,81],[7829,83,7263,85],[7829,84,7263,86,"user"],[7829,88,7263,90],[7829,89,7263,91],[7830,4,7264,4],[7831,4,7265,4],[7831,10,7265,10,"enroll"],[7831,16,7265,16,"enroll"],[7831,17,7265,17,"assertionExtern"],[7831,32,7265,32],[7831,34,7265,34,"displayName"],[7831,45,7265,45],[7831,47,7265,47],[7832,6,7266,8],[7832,12,7266,14,"assertion"],[7832,21,7266,23],[7832,24,7266,26,"assertionExtern"],[7832,39,7266,41],[7833,6,7267,8],[7833,12,7267,14,"session"],[7833,19,7267,21],[7833,22,7267,25],[7833,28,7267,31],[7833,32,7267,35],[7833,33,7267,36,"getSession"],[7833,43,7267,46],[7833,44,7267,47],[7833,45,7267,49],[7834,6,7268,8],[7834,12,7268,14,"finalizeMfaResponse"],[7834,31,7268,33],[7834,34,7268,36],[7834,40,7268,42,"_logoutIfInvalidated"],[7834,60,7268,62],[7834,61,7268,63],[7834,65,7268,67],[7834,66,7268,68,"user"],[7834,70,7268,72],[7834,72,7268,74,"assertion"],[7834,81,7268,83],[7834,82,7268,84,"_process"],[7834,90,7268,92],[7834,91,7268,93],[7834,95,7268,97],[7834,96,7268,98,"user"],[7834,100,7268,102],[7834,101,7268,103,"auth"],[7834,105,7268,107],[7834,107,7268,109,"session"],[7834,114,7268,116],[7834,116,7268,118,"displayName"],[7834,127,7268,129],[7834,128,7268,130],[7834,129,7268,131],[7835,6,7269,8],[7836,6,7270,8],[7837,6,7271,8],[7837,12,7271,14],[7837,16,7271,18],[7837,17,7271,19,"user"],[7837,21,7271,23],[7837,22,7271,24,"_updateTokensIfNecessary"],[7837,46,7271,48],[7837,47,7271,49,"finalizeMfaResponse"],[7837,66,7271,68],[7837,67,7271,69],[7838,6,7272,8],[7839,6,7273,8],[7840,6,7274,8],[7841,6,7275,8],[7841,13,7275,15],[7841,17,7275,19],[7841,18,7275,20,"user"],[7841,22,7275,24],[7841,23,7275,25,"reload"],[7841,29,7275,31],[7841,30,7275,32],[7841,31,7275,33],[7842,4,7276,4],[7843,4,7277,4],[7843,10,7277,10,"unenroll"],[7843,18,7277,18,"unenroll"],[7843,19,7277,19,"infoOrUid"],[7843,28,7277,28],[7843,30,7277,30],[7844,6,7278,8],[7844,12,7278,14,"mfaEnrollmentId"],[7844,27,7278,29],[7844,30,7278,32],[7844,37,7278,39,"infoOrUid"],[7844,46,7278,48],[7844,51,7278,53],[7844,59,7278,61],[7844,62,7278,64,"infoOrUid"],[7844,71,7278,73],[7844,74,7278,76,"infoOrUid"],[7844,83,7278,85],[7844,84,7278,86,"uid"],[7844,87,7278,89],[7845,6,7279,8],[7845,12,7279,14,"idToken"],[7845,19,7279,21],[7845,22,7279,24],[7845,28,7279,30],[7845,32,7279,34],[7845,33,7279,35,"user"],[7845,37,7279,39],[7845,38,7279,40,"getIdToken"],[7845,48,7279,50],[7845,49,7279,51],[7845,50,7279,52],[7846,6,7280,8],[7846,10,7280,12],[7847,8,7281,12],[7847,14,7281,18,"idTokenResponse"],[7847,29,7281,33],[7847,32,7281,36],[7847,38,7281,42,"_logoutIfInvalidated"],[7847,58,7281,62],[7847,59,7281,63],[7847,63,7281,67],[7847,64,7281,68,"user"],[7847,68,7281,72],[7847,70,7281,74,"withdrawMfa"],[7847,81,7281,85],[7847,82,7281,86],[7847,86,7281,90],[7847,87,7281,91,"user"],[7847,91,7281,95],[7847,92,7281,96,"auth"],[7847,96,7281,100],[7847,98,7281,102],[7848,10,7282,16,"idToken"],[7848,17,7282,23],[7849,10,7283,16,"mfaEnrollmentId"],[7850,8,7284,12],[7850,9,7284,13],[7850,10,7284,14],[7850,11,7284,15],[7851,8,7285,12],[7852,8,7286,12],[7852,12,7286,16],[7852,13,7286,17,"enrolledFactors"],[7852,28,7286,32],[7852,31,7286,35],[7852,35,7286,39],[7852,36,7286,40,"enrolledFactors"],[7852,51,7286,55],[7852,52,7286,56,"filter"],[7852,58,7286,62],[7852,59,7286,63],[7852,60,7286,64],[7853,10,7286,66,"uid"],[7854,8,7286,70],[7854,9,7286,71],[7854,14,7286,76,"uid"],[7854,17,7286,79],[7854,22,7286,84,"mfaEnrollmentId"],[7854,37,7286,99],[7854,38,7286,100],[7855,8,7287,12],[7856,8,7288,12],[7857,8,7289,12],[7858,8,7290,12],[7859,8,7291,12],[7859,14,7291,18],[7859,18,7291,22],[7859,19,7291,23,"user"],[7859,23,7291,27],[7859,24,7291,28,"_updateTokensIfNecessary"],[7859,48,7291,52],[7859,49,7291,53,"idTokenResponse"],[7859,64,7291,68],[7859,65,7291,69],[7860,8,7292,12],[7860,14,7292,18],[7860,18,7292,22],[7860,19,7292,23,"user"],[7860,23,7292,27],[7860,24,7292,28,"reload"],[7860,30,7292,34],[7860,31,7292,35],[7860,32,7292,36],[7861,6,7293,8],[7861,7,7293,9],[7861,8,7294,8],[7861,15,7294,15,"e"],[7861,16,7294,16],[7861,18,7294,18],[7862,8,7295,12],[7862,14,7295,18,"e"],[7862,15,7295,19],[7863,6,7296,8],[7864,4,7297,4],[7865,2,7298,0],[7866,2,7299,0],[7866,8,7299,6,"multiFactorUserCache"],[7866,28,7299,26],[7866,31,7299,29],[7866,35,7299,33,"WeakMap"],[7866,42,7299,40],[7866,43,7299,41],[7866,44,7299,42],[7867,2,7300,0],[7868,0,7301,0],[7869,0,7302,0],[7870,0,7303,0],[7871,0,7304,0],[7872,0,7305,0],[7873,0,7306,0],[7874,0,7307,0],[7875,0,7308,0],[7876,0,7309,0],[7877,2,7310,0],[7877,11,7310,9,"multiFactor"],[7877,22,7310,20,"multiFactor"],[7877,23,7310,21,"user"],[7877,27,7310,25],[7877,29,7310,27],[7878,4,7311,4],[7878,10,7311,10,"userModular"],[7878,21,7311,21],[7878,24,7311,24],[7878,28,7311,24,"getModularInstance"],[7878,41,7311,42],[7878,42,7311,42,"getModularInstance"],[7878,60,7311,42],[7878,62,7311,43,"user"],[7878,66,7311,47],[7878,67,7311,48],[7879,4,7312,4],[7879,8,7312,8],[7879,9,7312,9,"multiFactorUserCache"],[7879,29,7312,29],[7879,30,7312,30,"has"],[7879,33,7312,33],[7879,34,7312,34,"userModular"],[7879,45,7312,45],[7879,46,7312,46],[7879,48,7312,48],[7880,6,7313,8,"multiFactorUserCache"],[7880,26,7313,28],[7880,27,7313,29,"set"],[7880,30,7313,32],[7880,31,7313,33,"userModular"],[7880,42,7313,44],[7880,44,7313,46,"MultiFactorUserImpl"],[7880,63,7313,65],[7880,64,7313,66,"_fromUser"],[7880,73,7313,75],[7880,74,7313,76,"userModular"],[7880,85,7313,87],[7880,86,7313,88],[7880,87,7313,89],[7881,4,7314,4],[7882,4,7315,4],[7882,11,7315,11,"multiFactorUserCache"],[7882,31,7315,31],[7882,32,7315,32,"get"],[7882,35,7315,35],[7882,36,7315,36,"userModular"],[7882,47,7315,47],[7882,48,7315,48],[7883,2,7316,0],[7884,2,7318,0],[7884,8,7318,6,"STORAGE_AVAILABLE_KEY"],[7884,29,7318,27],[7884,32,7318,30],[7884,39,7318,37],[7886,2,7320,0],[7887,0,7321,0],[7888,0,7322,0],[7889,0,7323,0],[7890,0,7324,0],[7891,0,7325,0],[7892,0,7326,0],[7893,0,7327,0],[7894,0,7328,0],[7895,0,7329,0],[7896,0,7330,0],[7897,0,7331,0],[7898,0,7332,0],[7899,0,7333,0],[7900,0,7334,0],[7901,0,7335,0],[7902,2,7336,0],[7903,2,7337,0],[7904,2,7338,0],[7905,2,7339,0],[7905,8,7339,6,"BrowserPersistenceClass"],[7905,31,7339,29],[7905,32,7339,30],[7906,4,7340,4,"constructor"],[7906,15,7340,15,"constructor"],[7906,16,7340,16,"storageRetriever"],[7906,32,7340,32],[7906,34,7340,34,"type"],[7906,38,7340,38],[7906,40,7340,40],[7907,6,7341,8],[7907,10,7341,12],[7907,11,7341,13,"storageRetriever"],[7907,27,7341,29],[7907,30,7341,32,"storageRetriever"],[7907,46,7341,48],[7908,6,7342,8],[7908,10,7342,12],[7908,11,7342,13,"type"],[7908,15,7342,17],[7908,18,7342,20,"type"],[7908,22,7342,24],[7909,4,7343,4],[7910,4,7344,4,"_isAvailable"],[7910,16,7344,16,"_isAvailable"],[7910,17,7344,16],[7910,19,7344,19],[7911,6,7345,8],[7911,10,7345,12],[7912,8,7346,12],[7912,12,7346,16],[7912,13,7346,17],[7912,17,7346,21],[7912,18,7346,22,"storage"],[7912,25,7346,29],[7912,27,7346,31],[7913,10,7347,16],[7913,17,7347,23,"Promise"],[7913,24,7347,30],[7913,25,7347,31,"resolve"],[7913,32,7347,38],[7913,33,7347,39],[7913,38,7347,44],[7913,39,7347,45],[7914,8,7348,12],[7915,8,7349,12],[7915,12,7349,16],[7915,13,7349,17,"storage"],[7915,20,7349,24],[7915,21,7349,25,"setItem"],[7915,28,7349,32],[7915,29,7349,33,"STORAGE_AVAILABLE_KEY"],[7915,50,7349,54],[7915,52,7349,56],[7915,55,7349,59],[7915,56,7349,60],[7916,8,7350,12],[7916,12,7350,16],[7916,13,7350,17,"storage"],[7916,20,7350,24],[7916,21,7350,25,"removeItem"],[7916,31,7350,35],[7916,32,7350,36,"STORAGE_AVAILABLE_KEY"],[7916,53,7350,57],[7916,54,7350,58],[7917,8,7351,12],[7917,15,7351,19,"Promise"],[7917,22,7351,26],[7917,23,7351,27,"resolve"],[7917,30,7351,34],[7917,31,7351,35],[7917,35,7351,39],[7917,36,7351,40],[7918,6,7352,8],[7918,7,7352,9],[7918,8,7353,8],[7918,14,7353,14],[7919,8,7354,12],[7919,15,7354,19,"Promise"],[7919,22,7354,26],[7919,23,7354,27,"resolve"],[7919,30,7354,34],[7919,31,7354,35],[7919,36,7354,40],[7919,37,7354,41],[7920,6,7355,8],[7921,4,7356,4],[7922,4,7357,4,"_set"],[7922,8,7357,8,"_set"],[7922,9,7357,9,"key"],[7922,12,7357,12],[7922,14,7357,14,"value"],[7922,19,7357,19],[7922,21,7357,21],[7923,6,7358,8],[7923,10,7358,12],[7923,11,7358,13,"storage"],[7923,18,7358,20],[7923,19,7358,21,"setItem"],[7923,26,7358,28],[7923,27,7358,29,"key"],[7923,30,7358,32],[7923,32,7358,34,"JSON"],[7923,36,7358,38],[7923,37,7358,39,"stringify"],[7923,46,7358,48],[7923,47,7358,49,"value"],[7923,52,7358,54],[7923,53,7358,55],[7923,54,7358,56],[7924,6,7359,8],[7924,13,7359,15,"Promise"],[7924,20,7359,22],[7924,21,7359,23,"resolve"],[7924,28,7359,30],[7924,29,7359,31],[7924,30,7359,32],[7925,4,7360,4],[7926,4,7361,4,"_get"],[7926,8,7361,8,"_get"],[7926,9,7361,9,"key"],[7926,12,7361,12],[7926,14,7361,14],[7927,6,7362,8],[7927,12,7362,14,"json"],[7927,16,7362,18],[7927,19,7362,21],[7927,23,7362,25],[7927,24,7362,26,"storage"],[7927,31,7362,33],[7927,32,7362,34,"getItem"],[7927,39,7362,41],[7927,40,7362,42,"key"],[7927,43,7362,45],[7927,44,7362,46],[7928,6,7363,8],[7928,13,7363,15,"Promise"],[7928,20,7363,22],[7928,21,7363,23,"resolve"],[7928,28,7363,30],[7928,29,7363,31,"json"],[7928,33,7363,35],[7928,36,7363,38,"JSON"],[7928,40,7363,42],[7928,41,7363,43,"parse"],[7928,46,7363,48],[7928,47,7363,49,"json"],[7928,51,7363,53],[7928,52,7363,54],[7928,55,7363,57],[7928,59,7363,61],[7928,60,7363,62],[7929,4,7364,4],[7930,4,7365,4,"_remove"],[7930,11,7365,11,"_remove"],[7930,12,7365,12,"key"],[7930,15,7365,15],[7930,17,7365,17],[7931,6,7366,8],[7931,10,7366,12],[7931,11,7366,13,"storage"],[7931,18,7366,20],[7931,19,7366,21,"removeItem"],[7931,29,7366,31],[7931,30,7366,32,"key"],[7931,33,7366,35],[7931,34,7366,36],[7932,6,7367,8],[7932,13,7367,15,"Promise"],[7932,20,7367,22],[7932,21,7367,23,"resolve"],[7932,28,7367,30],[7932,29,7367,31],[7932,30,7367,32],[7933,4,7368,4],[7934,4,7369,4],[7934,8,7369,8,"storage"],[7934,15,7369,15,"storage"],[7934,16,7369,15],[7934,18,7369,18],[7935,6,7370,8],[7935,13,7370,15],[7935,17,7370,19],[7935,18,7370,20,"storageRetriever"],[7935,34,7370,36],[7935,35,7370,37],[7935,36,7370,38],[7936,4,7371,4],[7937,2,7372,0],[7939,2,7374,0],[7940,0,7375,0],[7941,0,7376,0],[7942,0,7377,0],[7943,0,7378,0],[7944,0,7379,0],[7945,0,7380,0],[7946,0,7381,0],[7947,0,7382,0],[7948,0,7383,0],[7949,0,7384,0],[7950,0,7385,0],[7951,0,7386,0],[7952,0,7387,0],[7953,0,7388,0],[7954,0,7389,0],[7955,2,7390,0],[7956,2,7391,0],[7956,8,7391,6,"_POLLING_INTERVAL_MS$1"],[7956,30,7391,28],[7956,33,7391,31],[7956,37,7391,35],[7957,2,7392,0],[7958,2,7393,0],[7958,8,7393,6,"IE10_LOCAL_STORAGE_SYNC_DELAY"],[7958,37,7393,35],[7958,40,7393,38],[7958,42,7393,40],[7959,2,7394,0],[7959,8,7394,6,"BrowserLocalPersistence"],[7959,31,7394,29],[7959,40,7394,38,"BrowserPersistenceClass"],[7959,63,7394,61],[7959,64,7394,62],[7960,4,7395,4,"constructor"],[7960,15,7395,15,"constructor"],[7960,16,7395,15],[7960,18,7395,18],[7961,6,7396,8],[7961,11,7396,13],[7961,12,7396,14],[7961,18,7396,20,"window"],[7961,24,7396,26],[7961,25,7396,27,"localStorage"],[7961,37,7396,39],[7961,39,7396,41],[7961,46,7396,48],[7961,47,7396,49],[7961,74,7396,76],[7961,75,7396,77],[7962,6,7397,8],[7962,10,7397,12],[7962,11,7397,13,"boundEventHandler"],[7962,28,7397,30],[7962,31,7397,33],[7962,32,7397,34,"event"],[7962,37,7397,39],[7962,39,7397,41,"poll"],[7962,43,7397,45],[7962,48,7397,50],[7962,52,7397,54],[7962,53,7397,55,"onStorageEvent"],[7962,67,7397,69],[7962,68,7397,70,"event"],[7962,73,7397,75],[7962,75,7397,77,"poll"],[7962,79,7397,81],[7962,80,7397,82],[7963,6,7398,8],[7963,10,7398,12],[7963,11,7398,13,"listeners"],[7963,20,7398,22],[7963,23,7398,25],[7963,24,7398,26],[7963,25,7398,27],[7964,6,7399,8],[7964,10,7399,12],[7964,11,7399,13,"localCache"],[7964,21,7399,23],[7964,24,7399,26],[7964,25,7399,27],[7964,26,7399,28],[7965,6,7400,8],[7966,6,7401,8],[7967,6,7402,8],[7967,10,7402,12],[7967,11,7402,13,"pollTimer"],[7967,20,7402,22],[7967,23,7402,25],[7967,27,7402,29],[7968,6,7403,8],[7969,6,7404,8],[7969,10,7404,12],[7969,11,7404,13,"fallbackToPolling"],[7969,28,7404,30],[7969,31,7404,33,"_isMobileBrowser"],[7969,47,7404,49],[7969,48,7404,50],[7969,49,7404,51],[7970,6,7405,8],[7970,10,7405,12],[7970,11,7405,13,"_shouldAllowMigration"],[7970,32,7405,34],[7970,35,7405,37],[7970,39,7405,41],[7971,4,7406,4],[7972,4,7407,4,"forAllChangedKeys"],[7972,21,7407,21,"forAllChangedKeys"],[7972,22,7407,22,"cb"],[7972,24,7407,24],[7972,26,7407,26],[7973,6,7408,8],[7974,6,7409,8],[7974,11,7409,13],[7974,17,7409,19,"key"],[7974,20,7409,22],[7974,24,7409,26,"Object"],[7974,30,7409,32],[7974,31,7409,33,"keys"],[7974,35,7409,37],[7974,36,7409,38],[7974,40,7409,42],[7974,41,7409,43,"listeners"],[7974,50,7409,52],[7974,51,7409,53],[7974,53,7409,55],[7975,8,7410,12],[7976,8,7411,12],[7976,14,7411,18,"newValue"],[7976,22,7411,26],[7976,25,7411,29],[7976,29,7411,33],[7976,30,7411,34,"storage"],[7976,37,7411,41],[7976,38,7411,42,"getItem"],[7976,45,7411,49],[7976,46,7411,50,"key"],[7976,49,7411,53],[7976,50,7411,54],[7977,8,7412,12],[7977,14,7412,18,"oldValue"],[7977,22,7412,26],[7977,25,7412,29],[7977,29,7412,33],[7977,30,7412,34,"localCache"],[7977,40,7412,44],[7977,41,7412,45,"key"],[7977,44,7412,48],[7977,45,7412,49],[7978,8,7413,12],[7979,8,7414,12],[7980,8,7415,12],[7980,12,7415,16,"newValue"],[7980,20,7415,24],[7980,25,7415,29,"oldValue"],[7980,33,7415,37],[7980,35,7415,39],[7981,10,7416,16,"cb"],[7981,12,7416,18],[7981,13,7416,19,"key"],[7981,16,7416,22],[7981,18,7416,24,"oldValue"],[7981,26,7416,32],[7981,28,7416,34,"newValue"],[7981,36,7416,42],[7981,37,7416,43],[7982,8,7417,12],[7983,6,7418,8],[7984,4,7419,4],[7985,4,7420,4,"onStorageEvent"],[7985,18,7420,18,"onStorageEvent"],[7985,19,7420,19,"event"],[7985,24,7420,24],[7985,26,7420,26,"poll"],[7985,30,7420,30],[7985,33,7420,33],[7985,38,7420,38],[7985,40,7420,40],[7986,6,7421,8],[7987,6,7422,8],[7987,10,7422,12],[7987,11,7422,13,"event"],[7987,16,7422,18],[7987,17,7422,19,"key"],[7987,20,7422,22],[7987,22,7422,24],[7988,8,7423,12],[7988,12,7423,16],[7988,13,7423,17,"forAllChangedKeys"],[7988,30,7423,34],[7988,31,7423,35],[7988,32,7423,36,"key"],[7988,35,7423,39],[7988,37,7423,41,"_oldValue"],[7988,46,7423,50],[7988,48,7423,52,"newValue"],[7988,56,7423,60],[7988,61,7423,65],[7989,10,7424,16],[7989,14,7424,20],[7989,15,7424,21,"notifyListeners"],[7989,30,7424,36],[7989,31,7424,37,"key"],[7989,34,7424,40],[7989,36,7424,42,"newValue"],[7989,44,7424,50],[7989,45,7424,51],[7990,8,7425,12],[7990,9,7425,13],[7990,10,7425,14],[7991,8,7426,12],[7992,6,7427,8],[7993,6,7428,8],[7993,12,7428,14,"key"],[7993,15,7428,17],[7993,18,7428,20,"event"],[7993,23,7428,25],[7993,24,7428,26,"key"],[7993,27,7428,29],[7994,6,7429,8],[7995,6,7430,8],[7996,6,7431,8],[7996,10,7431,12,"poll"],[7996,14,7431,16],[7996,16,7431,18],[7997,8,7432,12],[7998,8,7433,12],[7999,8,7434,12],[7999,12,7434,16],[7999,13,7434,17,"detachListener"],[7999,27,7434,31],[7999,28,7434,32],[7999,29,7434,33],[8000,6,7435,8],[8000,7,7435,9],[8000,13,7436,13],[8001,8,7437,12],[8002,8,7438,12],[8003,8,7439,12],[8003,12,7439,16],[8003,13,7439,17,"stopPolling"],[8003,24,7439,28],[8003,25,7439,29],[8003,26,7439,30],[8004,6,7440,8],[8005,6,7441,8],[8005,12,7441,14,"triggerListeners"],[8005,28,7441,30],[8005,31,7441,33,"triggerListeners"],[8005,32,7441,33],[8005,37,7441,39],[8006,8,7442,12],[8007,8,7443,12],[8008,8,7444,12],[8008,14,7444,18,"storedValue"],[8008,25,7444,29],[8008,28,7444,32],[8008,32,7444,36],[8008,33,7444,37,"storage"],[8008,40,7444,44],[8008,41,7444,45,"getItem"],[8008,48,7444,52],[8008,49,7444,53,"key"],[8008,52,7444,56],[8008,53,7444,57],[8009,8,7445,12],[8009,12,7445,16],[8009,13,7445,17,"poll"],[8009,17,7445,21],[8009,21,7445,25],[8009,25,7445,29],[8009,26,7445,30,"localCache"],[8009,36,7445,40],[8009,37,7445,41,"key"],[8009,40,7445,44],[8009,41,7445,45],[8009,46,7445,50,"storedValue"],[8009,57,7445,61],[8009,59,7445,63],[8010,10,7446,16],[8011,10,7447,16],[8012,10,7448,16],[8013,8,7449,12],[8014,8,7450,12],[8014,12,7450,16],[8014,13,7450,17,"notifyListeners"],[8014,28,7450,32],[8014,29,7450,33,"key"],[8014,32,7450,36],[8014,34,7450,38,"storedValue"],[8014,45,7450,49],[8014,46,7450,50],[8015,6,7451,8],[8015,7,7451,9],[8016,6,7452,8],[8016,12,7452,14,"storedValue"],[8016,23,7452,25],[8016,26,7452,28],[8016,30,7452,32],[8016,31,7452,33,"storage"],[8016,38,7452,40],[8016,39,7452,41,"getItem"],[8016,46,7452,48],[8016,47,7452,49,"key"],[8016,50,7452,52],[8016,51,7452,53],[8017,6,7453,8],[8017,10,7453,12,"_isIE10"],[8017,17,7453,19],[8017,18,7453,20],[8017,19,7453,21],[8017,23,7454,12,"storedValue"],[8017,34,7454,23],[8017,39,7454,28,"event"],[8017,44,7454,33],[8017,45,7454,34,"newValue"],[8017,53,7454,42],[8017,57,7455,12,"event"],[8017,62,7455,17],[8017,63,7455,18,"newValue"],[8017,71,7455,26],[8017,76,7455,31,"event"],[8017,81,7455,36],[8017,82,7455,37,"oldValue"],[8017,90,7455,45],[8017,92,7455,47],[8018,8,7456,12],[8019,8,7457,12],[8020,8,7458,12],[8021,8,7459,12],[8022,8,7460,12,"setTimeout"],[8022,18,7460,22],[8022,19,7460,23,"triggerListeners"],[8022,35,7460,39],[8022,37,7460,41,"IE10_LOCAL_STORAGE_SYNC_DELAY"],[8022,66,7460,70],[8022,67,7460,71],[8023,6,7461,8],[8023,7,7461,9],[8023,13,7462,13],[8024,8,7463,12,"triggerListeners"],[8024,24,7463,28],[8024,25,7463,29],[8024,26,7463,30],[8025,6,7464,8],[8026,4,7465,4],[8027,4,7466,4,"notifyListeners"],[8027,19,7466,19,"notifyListeners"],[8027,20,7466,20,"key"],[8027,23,7466,23],[8027,25,7466,25,"value"],[8027,30,7466,30],[8027,32,7466,32],[8028,6,7467,8],[8028,10,7467,12],[8028,11,7467,13,"localCache"],[8028,21,7467,23],[8028,22,7467,24,"key"],[8028,25,7467,27],[8028,26,7467,28],[8028,29,7467,31,"value"],[8028,34,7467,36],[8029,6,7468,8],[8029,12,7468,14,"listeners"],[8029,21,7468,23],[8029,24,7468,26],[8029,28,7468,30],[8029,29,7468,31,"listeners"],[8029,38,7468,40],[8029,39,7468,41,"key"],[8029,42,7468,44],[8029,43,7468,45],[8030,6,7469,8],[8030,10,7469,12,"listeners"],[8030,19,7469,21],[8030,21,7469,23],[8031,8,7470,12],[8031,13,7470,17],[8031,19,7470,23,"listener"],[8031,27,7470,31],[8031,31,7470,35,"Array"],[8031,36,7470,40],[8031,37,7470,41,"from"],[8031,41,7470,45],[8031,42,7470,46,"listeners"],[8031,51,7470,55],[8031,52,7470,56],[8031,54,7470,58],[8032,10,7471,16,"listener"],[8032,18,7471,24],[8032,19,7471,25,"value"],[8032,24,7471,30],[8032,27,7471,33,"JSON"],[8032,31,7471,37],[8032,32,7471,38,"parse"],[8032,37,7471,43],[8032,38,7471,44,"value"],[8032,43,7471,49],[8032,44,7471,50],[8032,47,7471,53,"value"],[8032,52,7471,58],[8032,53,7471,59],[8033,8,7472,12],[8034,6,7473,8],[8035,4,7474,4],[8036,4,7475,4,"startPolling"],[8036,16,7475,16,"startPolling"],[8036,17,7475,16],[8036,19,7475,19],[8037,6,7476,8],[8037,10,7476,12],[8037,11,7476,13,"stopPolling"],[8037,22,7476,24],[8037,23,7476,25],[8037,24,7476,26],[8038,6,7477,8],[8038,10,7477,12],[8038,11,7477,13,"pollTimer"],[8038,20,7477,22],[8038,23,7477,25,"setInterval"],[8038,34,7477,36],[8038,35,7477,37],[8038,41,7477,43],[8039,8,7478,12],[8039,12,7478,16],[8039,13,7478,17,"forAllChangedKeys"],[8039,30,7478,34],[8039,31,7478,35],[8039,32,7478,36,"key"],[8039,35,7478,39],[8039,37,7478,41,"oldValue"],[8039,45,7478,49],[8039,47,7478,51,"newValue"],[8039,55,7478,59],[8039,60,7478,64],[8040,10,7479,16],[8040,14,7479,20],[8040,15,7479,21,"onStorageEvent"],[8040,29,7479,35],[8040,30,7479,36],[8040,34,7479,40,"StorageEvent"],[8040,46,7479,52],[8040,47,7479,53],[8040,56,7479,62],[8040,58,7479,64],[8041,12,7480,20,"key"],[8041,15,7480,23],[8042,12,7481,20,"oldValue"],[8042,20,7481,28],[8043,12,7482,20,"newValue"],[8044,10,7483,16],[8044,11,7483,17],[8044,12,7483,18],[8044,14,7484,16],[8044,24,7484,27],[8044,28,7484,31],[8044,29,7484,32],[8045,8,7485,12],[8045,9,7485,13],[8045,10,7485,14],[8046,6,7486,8],[8046,7,7486,9],[8046,9,7486,11,"_POLLING_INTERVAL_MS$1"],[8046,31,7486,33],[8046,32,7486,34],[8047,4,7487,4],[8048,4,7488,4,"stopPolling"],[8048,15,7488,15,"stopPolling"],[8048,16,7488,15],[8048,18,7488,18],[8049,6,7489,8],[8049,10,7489,12],[8049,14,7489,16],[8049,15,7489,17,"pollTimer"],[8049,24,7489,26],[8049,26,7489,28],[8050,8,7490,12,"clearInterval"],[8050,21,7490,25],[8050,22,7490,26],[8050,26,7490,30],[8050,27,7490,31,"pollTimer"],[8050,36,7490,40],[8050,37,7490,41],[8051,8,7491,12],[8051,12,7491,16],[8051,13,7491,17,"pollTimer"],[8051,22,7491,26],[8051,25,7491,29],[8051,29,7491,33],[8052,6,7492,8],[8053,4,7493,4],[8054,4,7494,4,"attachListener"],[8054,18,7494,18,"attachListener"],[8054,19,7494,18],[8054,21,7494,21],[8055,6,7495,8,"window"],[8055,12,7495,14],[8055,13,7495,15,"addEventListener"],[8055,29,7495,31],[8055,30,7495,32],[8055,39,7495,41],[8055,41,7495,43],[8055,45,7495,47],[8055,46,7495,48,"boundEventHandler"],[8055,63,7495,65],[8055,64,7495,66],[8056,4,7496,4],[8057,4,7497,4,"detachListener"],[8057,18,7497,18,"detachListener"],[8057,19,7497,18],[8057,21,7497,21],[8058,6,7498,8,"window"],[8058,12,7498,14],[8058,13,7498,15,"removeEventListener"],[8058,32,7498,34],[8058,33,7498,35],[8058,42,7498,44],[8058,44,7498,46],[8058,48,7498,50],[8058,49,7498,51,"boundEventHandler"],[8058,66,7498,68],[8058,67,7498,69],[8059,4,7499,4],[8060,4,7500,4,"_addListener"],[8060,16,7500,16,"_addListener"],[8060,17,7500,17,"key"],[8060,20,7500,20],[8060,22,7500,22,"listener"],[8060,30,7500,30],[8060,32,7500,32],[8061,6,7501,8],[8061,10,7501,12,"Object"],[8061,16,7501,18],[8061,17,7501,19,"keys"],[8061,21,7501,23],[8061,22,7501,24],[8061,26,7501,28],[8061,27,7501,29,"listeners"],[8061,36,7501,38],[8061,37,7501,39],[8061,38,7501,40,"length"],[8061,44,7501,46],[8061,49,7501,51],[8061,50,7501,52],[8061,52,7501,54],[8062,8,7502,12],[8063,8,7503,12],[8064,8,7504,12],[8065,8,7505,12],[8066,8,7506,12],[8066,12,7506,16],[8066,16,7506,20],[8066,17,7506,21,"fallbackToPolling"],[8066,34,7506,38],[8066,36,7506,40],[8067,10,7507,16],[8067,14,7507,20],[8067,15,7507,21,"startPolling"],[8067,27,7507,33],[8067,28,7507,34],[8067,29,7507,35],[8068,8,7508,12],[8068,9,7508,13],[8068,15,7509,17],[8069,10,7510,16],[8069,14,7510,20],[8069,15,7510,21,"attachListener"],[8069,29,7510,35],[8069,30,7510,36],[8069,31,7510,37],[8070,8,7511,12],[8071,6,7512,8],[8072,6,7513,8],[8072,10,7513,12],[8072,11,7513,13],[8072,15,7513,17],[8072,16,7513,18,"listeners"],[8072,25,7513,27],[8072,26,7513,28,"key"],[8072,29,7513,31],[8072,30,7513,32],[8072,32,7513,34],[8073,8,7514,12],[8073,12,7514,16],[8073,13,7514,17,"listeners"],[8073,22,7514,26],[8073,23,7514,27,"key"],[8073,26,7514,30],[8073,27,7514,31],[8073,30,7514,34],[8073,34,7514,38,"Set"],[8073,37,7514,41],[8073,38,7514,42],[8073,39,7514,43],[8074,8,7515,12],[8075,8,7516,12],[8075,12,7516,16],[8075,13,7516,17,"localCache"],[8075,23,7516,27],[8075,24,7516,28,"key"],[8075,27,7516,31],[8075,28,7516,32],[8075,31,7516,35],[8075,35,7516,39],[8075,36,7516,40,"storage"],[8075,43,7516,47],[8075,44,7516,48,"getItem"],[8075,51,7516,55],[8075,52,7516,56,"key"],[8075,55,7516,59],[8075,56,7516,60],[8076,6,7517,8],[8077,6,7518,8],[8077,10,7518,12],[8077,11,7518,13,"listeners"],[8077,20,7518,22],[8077,21,7518,23,"key"],[8077,24,7518,26],[8077,25,7518,27],[8077,26,7518,28,"add"],[8077,29,7518,31],[8077,30,7518,32,"listener"],[8077,38,7518,40],[8077,39,7518,41],[8078,4,7519,4],[8079,4,7520,4,"_removeListener"],[8079,19,7520,19,"_removeListener"],[8079,20,7520,20,"key"],[8079,23,7520,23],[8079,25,7520,25,"listener"],[8079,33,7520,33],[8079,35,7520,35],[8080,6,7521,8],[8080,10,7521,12],[8080,14,7521,16],[8080,15,7521,17,"listeners"],[8080,24,7521,26],[8080,25,7521,27,"key"],[8080,28,7521,30],[8080,29,7521,31],[8080,31,7521,33],[8081,8,7522,12],[8081,12,7522,16],[8081,13,7522,17,"listeners"],[8081,22,7522,26],[8081,23,7522,27,"key"],[8081,26,7522,30],[8081,27,7522,31],[8081,28,7522,32,"delete"],[8081,34,7522,38],[8081,35,7522,39,"listener"],[8081,43,7522,47],[8081,44,7522,48],[8082,8,7523,12],[8082,12,7523,16],[8082,16,7523,20],[8082,17,7523,21,"listeners"],[8082,26,7523,30],[8082,27,7523,31,"key"],[8082,30,7523,34],[8082,31,7523,35],[8082,32,7523,36,"size"],[8082,36,7523,40],[8082,41,7523,45],[8082,42,7523,46],[8082,44,7523,48],[8083,10,7524,16],[8083,17,7524,23],[8083,21,7524,27],[8083,22,7524,28,"listeners"],[8083,31,7524,37],[8083,32,7524,38,"key"],[8083,35,7524,41],[8083,36,7524,42],[8084,8,7525,12],[8085,6,7526,8],[8086,6,7527,8],[8086,10,7527,12,"Object"],[8086,16,7527,18],[8086,17,7527,19,"keys"],[8086,21,7527,23],[8086,22,7527,24],[8086,26,7527,28],[8086,27,7527,29,"listeners"],[8086,36,7527,38],[8086,37,7527,39],[8086,38,7527,40,"length"],[8086,44,7527,46],[8086,49,7527,51],[8086,50,7527,52],[8086,52,7527,54],[8087,8,7528,12],[8087,12,7528,16],[8087,13,7528,17,"detachListener"],[8087,27,7528,31],[8087,28,7528,32],[8087,29,7528,33],[8088,8,7529,12],[8088,12,7529,16],[8088,13,7529,17,"stopPolling"],[8088,24,7529,28],[8088,25,7529,29],[8088,26,7529,30],[8089,6,7530,8],[8090,4,7531,4],[8091,4,7532,4],[8092,4,7533,4],[8092,10,7533,10,"_set"],[8092,14,7533,14,"_set"],[8092,15,7533,15,"key"],[8092,18,7533,18],[8092,20,7533,20,"value"],[8092,25,7533,25],[8092,27,7533,27],[8093,6,7534,8],[8093,12,7534,14],[8093,17,7534,19],[8093,18,7534,20,"_set"],[8093,22,7534,24],[8093,23,7534,25,"key"],[8093,26,7534,28],[8093,28,7534,30,"value"],[8093,33,7534,35],[8093,34,7534,36],[8094,6,7535,8],[8094,10,7535,12],[8094,11,7535,13,"localCache"],[8094,21,7535,23],[8094,22,7535,24,"key"],[8094,25,7535,27],[8094,26,7535,28],[8094,29,7535,31,"JSON"],[8094,33,7535,35],[8094,34,7535,36,"stringify"],[8094,43,7535,45],[8094,44,7535,46,"value"],[8094,49,7535,51],[8094,50,7535,52],[8095,4,7536,4],[8096,4,7537,4],[8096,10,7537,10,"_get"],[8096,14,7537,14,"_get"],[8096,15,7537,15,"key"],[8096,18,7537,18],[8096,20,7537,20],[8097,6,7538,8],[8097,12,7538,14,"value"],[8097,17,7538,19],[8097,20,7538,22],[8097,26,7538,28],[8097,31,7538,33],[8097,32,7538,34,"_get"],[8097,36,7538,38],[8097,37,7538,39,"key"],[8097,40,7538,42],[8097,41,7538,43],[8098,6,7539,8],[8098,10,7539,12],[8098,11,7539,13,"localCache"],[8098,21,7539,23],[8098,22,7539,24,"key"],[8098,25,7539,27],[8098,26,7539,28],[8098,29,7539,31,"JSON"],[8098,33,7539,35],[8098,34,7539,36,"stringify"],[8098,43,7539,45],[8098,44,7539,46,"value"],[8098,49,7539,51],[8098,50,7539,52],[8099,6,7540,8],[8099,13,7540,15,"value"],[8099,18,7540,20],[8100,4,7541,4],[8101,4,7542,4],[8101,10,7542,10,"_remove"],[8101,17,7542,17,"_remove"],[8101,18,7542,18,"key"],[8101,21,7542,21],[8101,23,7542,23],[8102,6,7543,8],[8102,12,7543,14],[8102,17,7543,19],[8102,18,7543,20,"_remove"],[8102,25,7543,27],[8102,26,7543,28,"key"],[8102,29,7543,31],[8102,30,7543,32],[8103,6,7544,8],[8103,13,7544,15],[8103,17,7544,19],[8103,18,7544,20,"localCache"],[8103,28,7544,30],[8103,29,7544,31,"key"],[8103,32,7544,34],[8103,33,7544,35],[8104,4,7545,4],[8105,2,7546,0],[8106,2,7547,0,"BrowserLocalPersistence"],[8106,25,7547,23],[8106,26,7547,24,"type"],[8106,30,7547,28],[8106,33,7547,31],[8106,40,7547,38],[8107,2,7548,0],[8108,0,7549,0],[8109,0,7550,0],[8110,0,7551,0],[8111,0,7552,0],[8112,0,7553,0],[8113,2,7554,0],[8113,8,7554,6,"browserLocalPersistence"],[8113,31,7554,29],[8113,34,7554,32,"BrowserLocalPersistence"],[8113,57,7554,55],[8115,2,7556,0],[8116,0,7557,0],[8117,0,7558,0],[8118,0,7559,0],[8119,0,7560,0],[8120,0,7561,0],[8121,0,7562,0],[8122,0,7563,0],[8123,0,7564,0],[8124,0,7565,0],[8125,0,7566,0],[8126,0,7567,0],[8127,0,7568,0],[8128,0,7569,0],[8129,0,7570,0],[8130,0,7571,0],[8131,2,7572,0],[8131,8,7572,6,"POLLING_INTERVAL_MS"],[8131,27,7572,25],[8131,30,7572,28],[8131,34,7572,32],[8132,2,7573,0],[8133,2,7574,0],[8133,11,7574,9,"getDocumentCookie"],[8133,28,7574,26,"getDocumentCookie"],[8133,29,7574,27,"name"],[8133,33,7574,31],[8133,35,7574,33],[8134,4,7575,4],[8134,10,7575,10,"escapedName"],[8134,21,7575,21],[8134,24,7575,24,"name"],[8134,28,7575,28],[8134,29,7575,29,"replace"],[8134,36,7575,36],[8134,37,7575,37],[8134,58,7575,58],[8134,60,7575,60],[8134,66,7575,66],[8134,67,7575,67],[8135,4,7576,4],[8135,10,7576,10,"matcher"],[8135,17,7576,17],[8135,20,7576,20,"RegExp"],[8135,26,7576,26],[8135,27,7576,27],[8135,30,7576,30,"escapedName"],[8135,41,7576,41],[8135,51,7576,51],[8135,52,7576,52],[8136,4,7577,4],[8136,11,7577,11,"document"],[8136,19,7577,19],[8136,20,7577,20,"cookie"],[8136,26,7577,26],[8136,27,7577,27,"match"],[8136,32,7577,32],[8136,33,7577,33,"matcher"],[8136,40,7577,40],[8136,41,7577,41],[8136,44,7577,44],[8136,45,7577,45],[8136,46,7577,46],[8136,50,7577,50],[8136,54,7577,54],[8137,2,7578,0],[8138,2,7579,0],[8139,2,7580,0],[8139,11,7580,9,"getCookieName"],[8139,24,7580,22,"getCookieName"],[8139,25,7580,23,"key"],[8139,28,7580,26],[8139,30,7580,28],[8140,4,7581,4],[8141,4,7582,4],[8142,4,7583,4],[8143,4,7584,4],[8143,10,7584,10,"isDevMode"],[8143,19,7584,19],[8143,22,7584,22,"window"],[8143,28,7584,28],[8143,29,7584,29,"location"],[8143,37,7584,37],[8143,38,7584,38,"protocol"],[8143,46,7584,46],[8143,51,7584,51],[8143,58,7584,58],[8144,4,7585,4],[8144,11,7585,11],[8144,14,7585,14,"isDevMode"],[8144,23,7585,23],[8144,26,7585,26],[8144,34,7585,34],[8144,37,7585,37],[8144,46,7585,46],[8144,58,7585,58,"key"],[8144,61,7585,61],[8144,62,7585,62,"split"],[8144,67,7585,67],[8144,68,7585,68],[8144,71,7585,71],[8144,72,7585,72],[8144,73,7585,73],[8144,74,7585,74],[8144,75,7585,75],[8144,77,7585,77],[8145,2,7586,0],[8146,2,7587,0],[8146,8,7587,6,"CookiePersistence"],[8146,25,7587,23],[8146,26,7587,24],[8147,4,7588,4,"constructor"],[8147,15,7588,15,"constructor"],[8147,16,7588,15],[8147,18,7588,18],[8148,6,7589,8],[8148,10,7589,12],[8148,11,7589,13,"type"],[8148,15,7589,17],[8148,18,7589,20],[8148,26,7589,28],[8148,27,7589,29],[8149,6,7590,8],[8149,10,7590,12],[8149,11,7590,13,"listenerUnsubscribes"],[8149,31,7590,33],[8149,34,7590,36],[8149,38,7590,40,"Map"],[8149,41,7590,43],[8149,42,7590,44],[8149,43,7590,45],[8150,4,7591,4],[8151,4,7592,4],[8152,4,7593,4,"_getFinalTarget"],[8152,19,7593,19,"_getFinalTarget"],[8152,20,7593,20,"originalUrl"],[8152,31,7593,31],[8152,33,7593,33],[8153,6,7594,8],[8153,10,7594,12],[8153,17,7594,19,"window"],[8153,23,7594,25],[8153,28,7594,30,"undefined"],[8153,37,7594,39],[8153,39,7594,41],[8154,8,7595,12],[8154,15,7595,19,"originalUrl"],[8154,26,7595,30],[8155,6,7596,8],[8156,6,7597,8],[8156,12,7597,14,"url"],[8156,15,7597,17],[8156,18,7597,20],[8156,22,7597,24,"URL"],[8156,25,7597,27],[8156,26,7597,28],[8156,29,7597,31,"window"],[8156,35,7597,37],[8156,36,7597,38,"location"],[8156,44,7597,46],[8156,45,7597,47,"origin"],[8156,51,7597,53],[8156,65,7597,67],[8156,66,7597,68],[8157,6,7598,8,"url"],[8157,9,7598,11],[8157,10,7598,12,"searchParams"],[8157,22,7598,24],[8157,23,7598,25,"set"],[8157,26,7598,28],[8157,27,7598,29],[8157,40,7598,42],[8157,42,7598,44,"originalUrl"],[8157,53,7598,55],[8157,54,7598,56],[8158,6,7599,8],[8158,13,7599,15,"url"],[8158,16,7599,18],[8159,4,7600,4],[8160,4,7601,4],[8161,4,7602,4],[8162,4,7603,4],[8163,4,7604,4],[8163,10,7604,10,"_isAvailable"],[8163,22,7604,22,"_isAvailable"],[8163,23,7604,22],[8163,25,7604,25],[8164,6,7605,8],[8164,10,7605,12],[8164,17,7605,19,"isSecureContext"],[8164,32,7605,34],[8164,37,7605,39],[8164,46,7605,48],[8164,50,7605,52],[8164,51,7605,53,"isSecureContext"],[8164,66,7605,68],[8164,68,7605,70],[8165,8,7606,12],[8165,15,7606,19],[8165,20,7606,24],[8166,6,7607,8],[8167,6,7608,8],[8167,10,7608,12],[8167,17,7608,19,"navigator"],[8167,26,7608,28],[8167,31,7608,33],[8167,42,7608,44],[8167,46,7608,48],[8167,53,7608,55,"document"],[8167,61,7608,63],[8167,66,7608,68],[8167,77,7608,79],[8167,79,7608,81],[8168,8,7609,12],[8168,15,7609,19],[8168,20,7609,24],[8169,6,7610,8],[8170,6,7611,8],[8170,13,7611,15,"navigator"],[8170,22,7611,24],[8170,23,7611,25,"cookieEnabled"],[8170,36,7611,38],[8170,40,7611,42],[8170,44,7611,46],[8171,4,7612,4],[8172,4,7613,4],[8173,4,7614,4],[8173,10,7614,10,"_set"],[8173,14,7614,14,"_set"],[8173,15,7614,15,"_key"],[8173,19,7614,19],[8173,21,7614,21,"_value"],[8173,27,7614,27],[8173,29,7614,29],[8174,6,7615,8],[8175,4,7616,4],[8176,4,7617,4],[8177,4,7618,4],[8177,10,7618,10,"_get"],[8177,14,7618,14,"_get"],[8177,15,7618,15,"key"],[8177,18,7618,18],[8177,20,7618,20],[8178,6,7619,8],[8178,10,7619,12],[8178,11,7619,13],[8178,15,7619,17],[8178,16,7619,18,"_isAvailable"],[8178,28,7619,30],[8178,29,7619,31],[8178,30,7619,32],[8178,32,7619,34],[8179,8,7620,12],[8179,15,7620,19],[8179,19,7620,23],[8180,6,7621,8],[8181,6,7622,8],[8181,12,7622,14,"name"],[8181,16,7622,18],[8181,19,7622,21,"getCookieName"],[8181,32,7622,34],[8181,33,7622,35,"key"],[8181,36,7622,38],[8181,37,7622,39],[8182,6,7623,8],[8182,10,7623,12,"window"],[8182,16,7623,18],[8182,17,7623,19,"cookieStore"],[8182,28,7623,30],[8182,30,7623,32],[8183,8,7624,12],[8183,14,7624,18,"cookie"],[8183,20,7624,24],[8183,23,7624,27],[8183,29,7624,33,"window"],[8183,35,7624,39],[8183,36,7624,40,"cookieStore"],[8183,47,7624,51],[8183,48,7624,52,"get"],[8183,51,7624,55],[8183,52,7624,56,"name"],[8183,56,7624,60],[8183,57,7624,61],[8184,8,7625,12],[8184,15,7625,19,"cookie"],[8184,21,7625,25],[8184,23,7625,27,"value"],[8184,28,7625,32],[8185,6,7626,8],[8186,6,7627,8],[8186,13,7627,15,"getDocumentCookie"],[8186,30,7627,32],[8186,31,7627,33,"name"],[8186,35,7627,37],[8186,36,7627,38],[8187,4,7628,4],[8188,4,7629,4],[8189,4,7630,4],[8189,10,7630,10,"_remove"],[8189,17,7630,17,"_remove"],[8189,18,7630,18,"key"],[8189,21,7630,21],[8189,23,7630,23],[8190,6,7631,8],[8190,10,7631,12],[8190,11,7631,13],[8190,15,7631,17],[8190,16,7631,18,"_isAvailable"],[8190,28,7631,30],[8190,29,7631,31],[8190,30,7631,32],[8190,32,7631,34],[8191,8,7632,12],[8192,6,7633,8],[8193,6,7634,8],[8194,6,7635,8],[8195,6,7636,8],[8196,6,7637,8],[8196,12,7637,14,"existingValue"],[8196,25,7637,27],[8196,28,7637,30],[8196,34,7637,36],[8196,38,7637,40],[8196,39,7637,41,"_get"],[8196,43,7637,45],[8196,44,7637,46,"key"],[8196,47,7637,49],[8196,48,7637,50],[8197,6,7638,8],[8197,10,7638,12],[8197,11,7638,13,"existingValue"],[8197,24,7638,26],[8197,26,7638,28],[8198,8,7639,12],[8199,6,7640,8],[8200,6,7641,8],[8200,12,7641,14,"name"],[8200,16,7641,18],[8200,19,7641,21,"getCookieName"],[8200,32,7641,34],[8200,33,7641,35,"key"],[8200,36,7641,38],[8200,37,7641,39],[8201,6,7642,8,"document"],[8201,14,7642,16],[8201,15,7642,17,"cookie"],[8201,21,7642,23],[8201,24,7642,26],[8201,27,7642,29,"name"],[8201,31,7642,33],[8201,107,7642,109],[8202,6,7643,8],[8202,12,7643,14,"fetch"],[8202,17,7643,19],[8202,18,7643,20],[8202,32,7643,34],[8202,34,7643,36],[8203,8,7643,38,"method"],[8203,14,7643,44],[8203,16,7643,46],[8204,6,7643,55],[8204,7,7643,56],[8204,8,7643,57],[8204,9,7643,58,"catch"],[8204,14,7643,63],[8204,15,7643,64],[8204,21,7643,70,"undefined"],[8204,30,7643,79],[8204,31,7643,80],[8205,4,7644,4],[8206,4,7645,4],[8207,4,7646,4,"_addListener"],[8207,16,7646,16,"_addListener"],[8207,17,7646,17,"key"],[8207,20,7646,20],[8207,22,7646,22,"listener"],[8207,30,7646,30],[8207,32,7646,32],[8208,6,7647,8],[8208,10,7647,12],[8208,11,7647,13],[8208,15,7647,17],[8208,16,7647,18,"_isAvailable"],[8208,28,7647,30],[8208,29,7647,31],[8208,30,7647,32],[8208,32,7647,34],[8209,8,7648,12],[8210,6,7649,8],[8211,6,7650,8],[8211,12,7650,14,"name"],[8211,16,7650,18],[8211,19,7650,21,"getCookieName"],[8211,32,7650,34],[8211,33,7650,35,"key"],[8211,36,7650,38],[8211,37,7650,39],[8212,6,7651,8],[8212,10,7651,12,"window"],[8212,16,7651,18],[8212,17,7651,19,"cookieStore"],[8212,28,7651,30],[8212,30,7651,32],[8213,8,7652,12],[8213,14,7652,18,"cb"],[8213,16,7652,20],[8213,19,7652,25,"event"],[8213,24,7652,30],[8213,28,7652,35],[8214,10,7653,16],[8214,16,7653,22,"changedCookie"],[8214,29,7653,35],[8214,32,7653,38,"event"],[8214,37,7653,43],[8214,38,7653,44,"changed"],[8214,45,7653,51],[8214,46,7653,52,"find"],[8214,50,7653,56],[8214,51,7653,57,"change"],[8214,57,7653,63],[8214,61,7653,67,"change"],[8214,67,7653,73],[8214,68,7653,74,"name"],[8214,72,7653,78],[8214,77,7653,83,"name"],[8214,81,7653,87],[8214,82,7653,88],[8215,10,7654,16],[8215,14,7654,20,"changedCookie"],[8215,27,7654,33],[8215,29,7654,35],[8216,12,7655,20,"listener"],[8216,20,7655,28],[8216,21,7655,29,"changedCookie"],[8216,34,7655,42],[8216,35,7655,43,"value"],[8216,40,7655,48],[8216,41,7655,49],[8217,10,7656,16],[8218,10,7657,16],[8218,16,7657,22,"deletedCookie"],[8218,29,7657,35],[8218,32,7657,38,"event"],[8218,37,7657,43],[8218,38,7657,44,"deleted"],[8218,45,7657,51],[8218,46,7657,52,"find"],[8218,50,7657,56],[8218,51,7657,57,"change"],[8218,57,7657,63],[8218,61,7657,67,"change"],[8218,67,7657,73],[8218,68,7657,74,"name"],[8218,72,7657,78],[8218,77,7657,83,"name"],[8218,81,7657,87],[8218,82,7657,88],[8219,10,7658,16],[8219,14,7658,20,"deletedCookie"],[8219,27,7658,33],[8219,29,7658,35],[8220,12,7659,20,"listener"],[8220,20,7659,28],[8220,21,7659,29],[8220,25,7659,33],[8220,26,7659,34],[8221,10,7660,16],[8222,8,7661,12],[8222,9,7661,14],[8223,8,7662,12],[8223,14,7662,18,"unsubscribe"],[8223,25,7662,29],[8223,28,7662,32,"unsubscribe"],[8223,29,7662,32],[8223,34,7662,38,"window"],[8223,40,7662,44],[8223,41,7662,45,"cookieStore"],[8223,52,7662,56],[8223,53,7662,57,"removeEventListener"],[8223,72,7662,76],[8223,73,7662,77],[8223,81,7662,85],[8223,83,7662,87,"cb"],[8223,85,7662,89],[8223,86,7662,90],[8224,8,7663,12],[8224,12,7663,16],[8224,13,7663,17,"listenerUnsubscribes"],[8224,33,7663,37],[8224,34,7663,38,"set"],[8224,37,7663,41],[8224,38,7663,42,"listener"],[8224,46,7663,50],[8224,48,7663,52,"unsubscribe"],[8224,59,7663,63],[8224,60,7663,64],[8225,8,7664,12],[8225,15,7664,19,"window"],[8225,21,7664,25],[8225,22,7664,26,"cookieStore"],[8225,33,7664,37],[8225,34,7664,38,"addEventListener"],[8225,50,7664,54],[8225,51,7664,55],[8225,59,7664,63],[8225,61,7664,65,"cb"],[8225,63,7664,67],[8225,64,7664,68],[8226,6,7665,8],[8227,6,7666,8],[8227,10,7666,12,"lastValue"],[8227,19,7666,21],[8227,22,7666,24,"getDocumentCookie"],[8227,39,7666,41],[8227,40,7666,42,"name"],[8227,44,7666,46],[8227,45,7666,47],[8228,6,7667,8],[8228,12,7667,14,"interval"],[8228,20,7667,22],[8228,23,7667,25,"setInterval"],[8228,34,7667,36],[8228,35,7667,37],[8228,41,7667,43],[8229,8,7668,12],[8229,14,7668,18,"currentValue"],[8229,26,7668,30],[8229,29,7668,33,"getDocumentCookie"],[8229,46,7668,50],[8229,47,7668,51,"name"],[8229,51,7668,55],[8229,52,7668,56],[8230,8,7669,12],[8230,12,7669,16,"currentValue"],[8230,24,7669,28],[8230,29,7669,33,"lastValue"],[8230,38,7669,42],[8230,40,7669,44],[8231,10,7670,16,"listener"],[8231,18,7670,24],[8231,19,7670,25,"currentValue"],[8231,31,7670,37],[8231,32,7670,38],[8232,10,7671,16,"lastValue"],[8232,19,7671,25],[8232,22,7671,28,"currentValue"],[8232,34,7671,40],[8233,8,7672,12],[8234,6,7673,8],[8234,7,7673,9],[8234,9,7673,11,"POLLING_INTERVAL_MS"],[8234,28,7673,30],[8234,29,7673,31],[8235,6,7674,8],[8235,12,7674,14,"unsubscribe"],[8235,23,7674,25],[8235,26,7674,28,"unsubscribe"],[8235,27,7674,28],[8235,32,7674,34,"clearInterval"],[8235,45,7674,47],[8235,46,7674,48,"interval"],[8235,54,7674,56],[8235,55,7674,57],[8236,6,7675,8],[8236,10,7675,12],[8236,11,7675,13,"listenerUnsubscribes"],[8236,31,7675,33],[8236,32,7675,34,"set"],[8236,35,7675,37],[8236,36,7675,38,"listener"],[8236,44,7675,46],[8236,46,7675,48,"unsubscribe"],[8236,57,7675,59],[8236,58,7675,60],[8237,4,7676,4],[8238,4,7677,4,"_removeListener"],[8238,19,7677,19,"_removeListener"],[8238,20,7677,20,"_key"],[8238,24,7677,24],[8238,26,7677,26,"listener"],[8238,34,7677,34],[8238,36,7677,36],[8239,6,7678,8],[8239,12,7678,14,"unsubscribe"],[8239,23,7678,25],[8239,26,7678,28],[8239,30,7678,32],[8239,31,7678,33,"listenerUnsubscribes"],[8239,51,7678,53],[8239,52,7678,54,"get"],[8239,55,7678,57],[8239,56,7678,58,"listener"],[8239,64,7678,66],[8239,65,7678,67],[8240,6,7679,8],[8240,10,7679,12],[8240,11,7679,13,"unsubscribe"],[8240,22,7679,24],[8240,24,7679,26],[8241,8,7680,12],[8242,6,7681,8],[8243,6,7682,8,"unsubscribe"],[8243,17,7682,19],[8243,18,7682,20],[8243,19,7682,21],[8244,6,7683,8],[8244,10,7683,12],[8244,11,7683,13,"listenerUnsubscribes"],[8244,31,7683,33],[8244,32,7683,34,"delete"],[8244,38,7683,40],[8244,39,7683,41,"listener"],[8244,47,7683,49],[8244,48,7683,50],[8245,4,7684,4],[8246,2,7685,0],[8247,2,7686,0,"CookiePersistence"],[8247,19,7686,17],[8247,20,7686,18,"type"],[8247,24,7686,22],[8247,27,7686,25],[8247,35,7686,33],[8248,2,7687,0],[8249,0,7688,0],[8250,0,7689,0],[8251,0,7690,0],[8252,0,7691,0],[8253,0,7692,0],[8254,0,7693,0],[8255,0,7694,0],[8256,0,7695,0],[8257,2,7696,0],[8257,8,7696,6,"browserCookiePersistence"],[8257,32,7696,30],[8257,35,7696,33,"CookiePersistence"],[8257,52,7696,50],[8259,2,7698,0],[8260,0,7699,0],[8261,0,7700,0],[8262,0,7701,0],[8263,0,7702,0],[8264,0,7703,0],[8265,0,7704,0],[8266,0,7705,0],[8267,0,7706,0],[8268,0,7707,0],[8269,0,7708,0],[8270,0,7709,0],[8271,0,7710,0],[8272,0,7711,0],[8273,0,7712,0],[8274,0,7713,0],[8275,2,7714,0],[8275,8,7714,6,"BrowserSessionPersistence"],[8275,33,7714,31],[8275,42,7714,40,"BrowserPersistenceClass"],[8275,65,7714,63],[8275,66,7714,64],[8276,4,7715,4,"constructor"],[8276,15,7715,15,"constructor"],[8276,16,7715,15],[8276,18,7715,18],[8277,6,7716,8],[8277,11,7716,13],[8277,12,7716,14],[8277,18,7716,20,"window"],[8277,24,7716,26],[8277,25,7716,27,"sessionStorage"],[8277,39,7716,41],[8277,41,7716,43],[8277,50,7716,52],[8277,51,7716,53],[8277,80,7716,82],[8277,81,7716,83],[8278,4,7717,4],[8279,4,7718,4,"_addListener"],[8279,16,7718,16,"_addListener"],[8279,17,7718,17,"_key"],[8279,21,7718,21],[8279,23,7718,23,"_listener"],[8279,32,7718,32],[8279,34,7718,34],[8280,6,7719,8],[8281,6,7720,8],[8282,4,7721,4],[8283,4,7722,4,"_removeListener"],[8283,19,7722,19,"_removeListener"],[8283,20,7722,20,"_key"],[8283,24,7722,24],[8283,26,7722,26,"_listener"],[8283,35,7722,35],[8283,37,7722,37],[8284,6,7723,8],[8285,6,7724,8],[8286,4,7725,4],[8287,2,7726,0],[8288,2,7727,0,"BrowserSessionPersistence"],[8288,27,7727,25],[8288,28,7727,26,"type"],[8288,32,7727,30],[8288,35,7727,33],[8288,44,7727,42],[8289,2,7728,0],[8290,0,7729,0],[8291,0,7730,0],[8292,0,7731,0],[8293,0,7732,0],[8294,0,7733,0],[8295,2,7734,0],[8295,8,7734,6,"browserSessionPersistence"],[8295,33,7734,31],[8295,36,7734,34,"BrowserSessionPersistence"],[8295,61,7734,59],[8297,2,7736,0],[8298,0,7737,0],[8299,0,7738,0],[8300,0,7739,0],[8301,0,7740,0],[8302,0,7741,0],[8303,0,7742,0],[8304,0,7743,0],[8305,0,7744,0],[8306,0,7745,0],[8307,0,7746,0],[8308,0,7747,0],[8309,0,7748,0],[8310,0,7749,0],[8311,0,7750,0],[8312,0,7751,0],[8313,2,7752,0],[8314,0,7753,0],[8315,0,7754,0],[8316,0,7755,0],[8317,0,7756,0],[8318,2,7757,0],[8318,11,7757,9,"_allSettled"],[8318,22,7757,20,"_allSettled"],[8318,23,7757,21,"promises"],[8318,31,7757,29],[8318,33,7757,31],[8319,4,7758,4],[8319,11,7758,11,"Promise"],[8319,18,7758,18],[8319,19,7758,19,"all"],[8319,22,7758,22],[8319,23,7758,23,"promises"],[8319,31,7758,31],[8319,32,7758,32,"map"],[8319,35,7758,35],[8319,36,7758,36],[8319,42,7758,43,"promise"],[8319,49,7758,50],[8319,53,7758,55],[8320,6,7759,8],[8320,10,7759,12],[8321,8,7760,12],[8321,14,7760,18,"value"],[8321,19,7760,23],[8321,22,7760,26],[8321,28,7760,32,"promise"],[8321,35,7760,39],[8322,8,7761,12],[8322,15,7761,19],[8323,10,7762,16,"fulfilled"],[8323,19,7762,25],[8323,21,7762,27],[8323,25,7762,31],[8324,10,7763,16,"value"],[8325,8,7764,12],[8325,9,7764,13],[8326,6,7765,8],[8326,7,7765,9],[8326,8,7766,8],[8326,15,7766,15,"reason"],[8326,21,7766,21],[8326,23,7766,23],[8327,8,7767,12],[8327,15,7767,19],[8328,10,7768,16,"fulfilled"],[8328,19,7768,25],[8328,21,7768,27],[8328,26,7768,32],[8329,10,7769,16,"reason"],[8330,8,7770,12],[8330,9,7770,13],[8331,6,7771,8],[8332,4,7772,4],[8332,5,7772,5],[8332,6,7772,6],[8332,7,7772,7],[8333,2,7773,0],[8335,2,7775,0],[8336,0,7776,0],[8337,0,7777,0],[8338,0,7778,0],[8339,0,7779,0],[8340,0,7780,0],[8341,0,7781,0],[8342,0,7782,0],[8343,0,7783,0],[8344,0,7784,0],[8345,0,7785,0],[8346,0,7786,0],[8347,0,7787,0],[8348,0,7788,0],[8349,0,7789,0],[8350,0,7790,0],[8351,2,7791,0],[8352,0,7792,0],[8353,0,7793,0],[8354,0,7794,0],[8355,2,7795,0],[8355,8,7795,6,"Receiver"],[8355,16,7795,14],[8355,17,7795,15],[8356,4,7796,4,"constructor"],[8356,15,7796,15,"constructor"],[8356,16,7796,16,"eventTarget"],[8356,27,7796,27],[8356,29,7796,29],[8357,6,7797,8],[8357,10,7797,12],[8357,11,7797,13,"eventTarget"],[8357,22,7797,24],[8357,25,7797,27,"eventTarget"],[8357,36,7797,38],[8358,6,7798,8],[8358,10,7798,12],[8358,11,7798,13,"handlersMap"],[8358,22,7798,24],[8358,25,7798,27],[8358,26,7798,28],[8358,27,7798,29],[8359,6,7799,8],[8359,10,7799,12],[8359,11,7799,13,"boundEventHandler"],[8359,28,7799,30],[8359,31,7799,33],[8359,35,7799,37],[8359,36,7799,38,"handleEvent"],[8359,47,7799,49],[8359,48,7799,50,"bind"],[8359,52,7799,54],[8359,53,7799,55],[8359,57,7799,59],[8359,58,7799,60],[8360,4,7800,4],[8361,4,7801,4],[8362,0,7802,0],[8363,0,7803,0],[8364,0,7804,0],[8365,0,7805,0],[8366,0,7806,0],[8367,4,7807,4],[8367,11,7807,11,"_getInstance"],[8367,23,7807,23,"_getInstance"],[8367,24,7807,24,"eventTarget"],[8367,35,7807,35],[8367,37,7807,37],[8368,6,7808,8],[8369,6,7809,8],[8370,6,7810,8],[8371,6,7811,8],[8371,12,7811,14,"existingInstance"],[8371,28,7811,30],[8371,31,7811,33],[8371,35,7811,37],[8371,36,7811,38,"receivers"],[8371,45,7811,47],[8371,46,7811,48,"find"],[8371,50,7811,52],[8371,51,7811,53,"receiver"],[8371,59,7811,61],[8371,63,7811,65,"receiver"],[8371,71,7811,73],[8371,72,7811,74,"isListeningto"],[8371,85,7811,87],[8371,86,7811,88,"eventTarget"],[8371,97,7811,99],[8371,98,7811,100],[8371,99,7811,101],[8372,6,7812,8],[8372,10,7812,12,"existingInstance"],[8372,26,7812,28],[8372,28,7812,30],[8373,8,7813,12],[8373,15,7813,19,"existingInstance"],[8373,31,7813,35],[8374,6,7814,8],[8375,6,7815,8],[8375,12,7815,14,"newInstance"],[8375,23,7815,25],[8375,26,7815,28],[8375,30,7815,32,"Receiver"],[8375,38,7815,40],[8375,39,7815,41,"eventTarget"],[8375,50,7815,52],[8375,51,7815,53],[8376,6,7816,8],[8376,10,7816,12],[8376,11,7816,13,"receivers"],[8376,20,7816,22],[8376,21,7816,23,"push"],[8376,25,7816,27],[8376,26,7816,28,"newInstance"],[8376,37,7816,39],[8376,38,7816,40],[8377,6,7817,8],[8377,13,7817,15,"newInstance"],[8377,24,7817,26],[8378,4,7818,4],[8379,4,7819,4,"isListeningto"],[8379,17,7819,17,"isListeningto"],[8379,18,7819,18,"eventTarget"],[8379,29,7819,29],[8379,31,7819,31],[8380,6,7820,8],[8380,13,7820,15],[8380,17,7820,19],[8380,18,7820,20,"eventTarget"],[8380,29,7820,31],[8380,34,7820,36,"eventTarget"],[8380,45,7820,47],[8381,4,7821,4],[8382,4,7822,4],[8383,0,7823,0],[8384,0,7824,0],[8385,0,7825,0],[8386,0,7826,0],[8387,0,7827,0],[8388,0,7828,0],[8389,0,7829,0],[8390,0,7830,0],[8391,0,7831,0],[8392,4,7832,4],[8392,10,7832,10,"handleEvent"],[8392,21,7832,21,"handleEvent"],[8392,22,7832,22,"event"],[8392,27,7832,27],[8392,29,7832,29],[8393,6,7833,8],[8393,12,7833,14,"messageEvent"],[8393,24,7833,26],[8393,27,7833,29,"event"],[8393,32,7833,34],[8394,6,7834,8],[8394,12,7834,14],[8395,8,7834,16,"eventId"],[8395,15,7834,23],[8396,8,7834,25,"eventType"],[8396,17,7834,34],[8397,8,7834,36,"data"],[8398,6,7834,41],[8398,7,7834,42],[8398,10,7834,45,"messageEvent"],[8398,22,7834,57],[8398,23,7834,58,"data"],[8398,27,7834,62],[8399,6,7835,8],[8399,12,7835,14,"handlers"],[8399,20,7835,22],[8399,23,7835,25],[8399,27,7835,29],[8399,28,7835,30,"handlersMap"],[8399,39,7835,41],[8399,40,7835,42,"eventType"],[8399,49,7835,51],[8399,50,7835,52],[8400,6,7836,8],[8400,10,7836,12],[8400,11,7836,13,"handlers"],[8400,19,7836,21],[8400,21,7836,23,"size"],[8400,25,7836,27],[8400,27,7836,29],[8401,8,7837,12],[8402,6,7838,8],[8403,6,7839,8,"messageEvent"],[8403,18,7839,20],[8403,19,7839,21,"ports"],[8403,24,7839,26],[8403,25,7839,27],[8403,26,7839,28],[8403,27,7839,29],[8403,28,7839,30,"postMessage"],[8403,39,7839,41],[8403,40,7839,42],[8404,8,7840,12,"status"],[8404,14,7840,18],[8404,16,7840,20],[8404,21,7840,25],[8404,22,7840,26],[8405,8,7841,12,"eventId"],[8405,15,7841,19],[8406,8,7842,12,"eventType"],[8407,6,7843,8],[8407,7,7843,9],[8407,8,7843,10],[8408,6,7844,8],[8408,12,7844,14,"promises"],[8408,20,7844,22],[8408,23,7844,25,"Array"],[8408,28,7844,30],[8408,29,7844,31,"from"],[8408,33,7844,35],[8408,34,7844,36,"handlers"],[8408,42,7844,44],[8408,43,7844,45],[8408,44,7844,46,"map"],[8408,47,7844,49],[8408,48,7844,50],[8408,54,7844,57,"handler"],[8408,61,7844,64],[8408,65,7844,69,"handler"],[8408,72,7844,76],[8408,73,7844,77,"messageEvent"],[8408,85,7844,89],[8408,86,7844,90,"origin"],[8408,92,7844,96],[8408,94,7844,98,"data"],[8408,98,7844,102],[8408,99,7844,103],[8408,100,7844,104],[8409,6,7845,8],[8409,12,7845,14,"response"],[8409,20,7845,22],[8409,23,7845,25],[8409,29,7845,31,"_allSettled"],[8409,40,7845,42],[8409,41,7845,43,"promises"],[8409,49,7845,51],[8409,50,7845,52],[8410,6,7846,8,"messageEvent"],[8410,18,7846,20],[8410,19,7846,21,"ports"],[8410,24,7846,26],[8410,25,7846,27],[8410,26,7846,28],[8410,27,7846,29],[8410,28,7846,30,"postMessage"],[8410,39,7846,41],[8410,40,7846,42],[8411,8,7847,12,"status"],[8411,14,7847,18],[8411,16,7847,20],[8411,22,7847,26],[8411,23,7847,27],[8412,8,7848,12,"eventId"],[8412,15,7848,19],[8413,8,7849,12,"eventType"],[8413,17,7849,21],[8414,8,7850,12,"response"],[8415,6,7851,8],[8415,7,7851,9],[8415,8,7851,10],[8416,4,7852,4],[8417,4,7853,4],[8418,0,7854,0],[8419,0,7855,0],[8420,0,7856,0],[8421,0,7857,0],[8422,0,7858,0],[8423,0,7859,0],[8424,4,7860,4,"_subscribe"],[8424,14,7860,14,"_subscribe"],[8424,15,7860,15,"eventType"],[8424,24,7860,24],[8424,26,7860,26,"eventHandler"],[8424,38,7860,38],[8424,40,7860,40],[8425,6,7861,8],[8425,10,7861,12,"Object"],[8425,16,7861,18],[8425,17,7861,19,"keys"],[8425,21,7861,23],[8425,22,7861,24],[8425,26,7861,28],[8425,27,7861,29,"handlersMap"],[8425,38,7861,40],[8425,39,7861,41],[8425,40,7861,42,"length"],[8425,46,7861,48],[8425,51,7861,53],[8425,52,7861,54],[8425,54,7861,56],[8426,8,7862,12],[8426,12,7862,16],[8426,13,7862,17,"eventTarget"],[8426,24,7862,28],[8426,25,7862,29,"addEventListener"],[8426,41,7862,45],[8426,42,7862,46],[8426,51,7862,55],[8426,53,7862,57],[8426,57,7862,61],[8426,58,7862,62,"boundEventHandler"],[8426,75,7862,79],[8426,76,7862,80],[8427,6,7863,8],[8428,6,7864,8],[8428,10,7864,12],[8428,11,7864,13],[8428,15,7864,17],[8428,16,7864,18,"handlersMap"],[8428,27,7864,29],[8428,28,7864,30,"eventType"],[8428,37,7864,39],[8428,38,7864,40],[8428,40,7864,42],[8429,8,7865,12],[8429,12,7865,16],[8429,13,7865,17,"handlersMap"],[8429,24,7865,28],[8429,25,7865,29,"eventType"],[8429,34,7865,38],[8429,35,7865,39],[8429,38,7865,42],[8429,42,7865,46,"Set"],[8429,45,7865,49],[8429,46,7865,50],[8429,47,7865,51],[8430,6,7866,8],[8431,6,7867,8],[8431,10,7867,12],[8431,11,7867,13,"handlersMap"],[8431,22,7867,24],[8431,23,7867,25,"eventType"],[8431,32,7867,34],[8431,33,7867,35],[8431,34,7867,36,"add"],[8431,37,7867,39],[8431,38,7867,40,"eventHandler"],[8431,50,7867,52],[8431,51,7867,53],[8432,4,7868,4],[8433,4,7869,4],[8434,0,7870,0],[8435,0,7871,0],[8436,0,7872,0],[8437,0,7873,0],[8438,0,7874,0],[8439,0,7875,0],[8440,4,7876,4,"_unsubscribe"],[8440,16,7876,16,"_unsubscribe"],[8440,17,7876,17,"eventType"],[8440,26,7876,26],[8440,28,7876,28,"eventHandler"],[8440,40,7876,40],[8440,42,7876,42],[8441,6,7877,8],[8441,10,7877,12],[8441,14,7877,16],[8441,15,7877,17,"handlersMap"],[8441,26,7877,28],[8441,27,7877,29,"eventType"],[8441,36,7877,38],[8441,37,7877,39],[8441,41,7877,43,"eventHandler"],[8441,53,7877,55],[8441,55,7877,57],[8442,8,7878,12],[8442,12,7878,16],[8442,13,7878,17,"handlersMap"],[8442,24,7878,28],[8442,25,7878,29,"eventType"],[8442,34,7878,38],[8442,35,7878,39],[8442,36,7878,40,"delete"],[8442,42,7878,46],[8442,43,7878,47,"eventHandler"],[8442,55,7878,59],[8442,56,7878,60],[8443,6,7879,8],[8444,6,7880,8],[8444,10,7880,12],[8444,11,7880,13,"eventHandler"],[8444,23,7880,25],[8444,27,7880,29],[8444,31,7880,33],[8444,32,7880,34,"handlersMap"],[8444,43,7880,45],[8444,44,7880,46,"eventType"],[8444,53,7880,55],[8444,54,7880,56],[8444,55,7880,57,"size"],[8444,59,7880,61],[8444,64,7880,66],[8444,65,7880,67],[8444,67,7880,69],[8445,8,7881,12],[8445,15,7881,19],[8445,19,7881,23],[8445,20,7881,24,"handlersMap"],[8445,31,7881,35],[8445,32,7881,36,"eventType"],[8445,41,7881,45],[8445,42,7881,46],[8446,6,7882,8],[8447,6,7883,8],[8447,10,7883,12,"Object"],[8447,16,7883,18],[8447,17,7883,19,"keys"],[8447,21,7883,23],[8447,22,7883,24],[8447,26,7883,28],[8447,27,7883,29,"handlersMap"],[8447,38,7883,40],[8447,39,7883,41],[8447,40,7883,42,"length"],[8447,46,7883,48],[8447,51,7883,53],[8447,52,7883,54],[8447,54,7883,56],[8448,8,7884,12],[8448,12,7884,16],[8448,13,7884,17,"eventTarget"],[8448,24,7884,28],[8448,25,7884,29,"removeEventListener"],[8448,44,7884,48],[8448,45,7884,49],[8448,54,7884,58],[8448,56,7884,60],[8448,60,7884,64],[8448,61,7884,65,"boundEventHandler"],[8448,78,7884,82],[8448,79,7884,83],[8449,6,7885,8],[8450,4,7886,4],[8451,2,7887,0],[8452,2,7888,0,"Receiver"],[8452,10,7888,8],[8452,11,7888,9,"receivers"],[8452,20,7888,18],[8452,23,7888,21],[8452,25,7888,23],[8454,2,7890,0],[8455,0,7891,0],[8456,0,7892,0],[8457,0,7893,0],[8458,0,7894,0],[8459,0,7895,0],[8460,0,7896,0],[8461,0,7897,0],[8462,0,7898,0],[8463,0,7899,0],[8464,0,7900,0],[8465,0,7901,0],[8466,0,7902,0],[8467,0,7903,0],[8468,0,7904,0],[8469,0,7905,0],[8470,2,7906,0],[8470,11,7906,9,"_generateEventId"],[8470,27,7906,25,"_generateEventId"],[8470,28,7906,26,"prefix"],[8470,34,7906,32],[8470,37,7906,35],[8470,39,7906,37],[8470,41,7906,39,"digits"],[8470,47,7906,45],[8470,50,7906,48],[8470,52,7906,50],[8470,54,7906,52],[8471,4,7907,4],[8471,8,7907,8,"random"],[8471,14,7907,14],[8471,17,7907,17],[8471,19,7907,19],[8472,4,7908,4],[8472,9,7908,9],[8472,13,7908,13,"i"],[8472,14,7908,14],[8472,17,7908,17],[8472,18,7908,18],[8472,20,7908,20,"i"],[8472,21,7908,21],[8472,24,7908,24,"digits"],[8472,30,7908,30],[8472,32,7908,32,"i"],[8472,33,7908,33],[8472,35,7908,35],[8472,37,7908,37],[8473,6,7909,8,"random"],[8473,12,7909,14],[8473,16,7909,18,"Math"],[8473,20,7909,22],[8473,21,7909,23,"floor"],[8473,26,7909,28],[8473,27,7909,29,"Math"],[8473,31,7909,33],[8473,32,7909,34,"random"],[8473,38,7909,40],[8473,39,7909,41],[8473,40,7909,42],[8473,43,7909,45],[8473,45,7909,47],[8473,46,7909,48],[8474,4,7910,4],[8475,4,7911,4],[8475,11,7911,11,"prefix"],[8475,17,7911,17],[8475,20,7911,20,"random"],[8475,26,7911,26],[8476,2,7912,0],[8478,2,7914,0],[8479,0,7915,0],[8480,0,7916,0],[8481,0,7917,0],[8482,0,7918,0],[8483,0,7919,0],[8484,0,7920,0],[8485,0,7921,0],[8486,0,7922,0],[8487,0,7923,0],[8488,0,7924,0],[8489,0,7925,0],[8490,0,7926,0],[8491,0,7927,0],[8492,0,7928,0],[8493,0,7929,0],[8494,2,7930,0],[8495,0,7931,0],[8496,0,7932,0],[8497,0,7933,0],[8498,2,7934,0],[8498,8,7934,6,"Sender"],[8498,14,7934,12],[8498,15,7934,13],[8499,4,7935,4,"constructor"],[8499,15,7935,15,"constructor"],[8499,16,7935,16,"target"],[8499,22,7935,22],[8499,24,7935,24],[8500,6,7936,8],[8500,10,7936,12],[8500,11,7936,13,"target"],[8500,17,7936,19],[8500,20,7936,22,"target"],[8500,26,7936,28],[8501,6,7937,8],[8501,10,7937,12],[8501,11,7937,13,"handlers"],[8501,19,7937,21],[8501,22,7937,24],[8501,26,7937,28,"Set"],[8501,29,7937,31],[8501,30,7937,32],[8501,31,7937,33],[8502,4,7938,4],[8503,4,7939,4],[8504,0,7940,0],[8505,0,7941,0],[8506,0,7942,0],[8507,0,7943,0],[8508,4,7944,4,"removeMessageHandler"],[8508,24,7944,24,"removeMessageHandler"],[8508,25,7944,25,"handler"],[8508,32,7944,32],[8508,34,7944,34],[8509,6,7945,8],[8509,10,7945,12,"handler"],[8509,17,7945,19],[8509,18,7945,20,"messageChannel"],[8509,32,7945,34],[8509,34,7945,36],[8510,8,7946,12,"handler"],[8510,15,7946,19],[8510,16,7946,20,"messageChannel"],[8510,30,7946,34],[8510,31,7946,35,"port1"],[8510,36,7946,40],[8510,37,7946,41,"removeEventListener"],[8510,56,7946,60],[8510,57,7946,61],[8510,66,7946,70],[8510,68,7946,72,"handler"],[8510,75,7946,79],[8510,76,7946,80,"onMessage"],[8510,85,7946,89],[8510,86,7946,90],[8511,8,7947,12,"handler"],[8511,15,7947,19],[8511,16,7947,20,"messageChannel"],[8511,30,7947,34],[8511,31,7947,35,"port1"],[8511,36,7947,40],[8511,37,7947,41,"close"],[8511,42,7947,46],[8511,43,7947,47],[8511,44,7947,48],[8512,6,7948,8],[8513,6,7949,8],[8513,10,7949,12],[8513,11,7949,13,"handlers"],[8513,19,7949,21],[8513,20,7949,22,"delete"],[8513,26,7949,28],[8513,27,7949,29,"handler"],[8513,34,7949,36],[8513,35,7949,37],[8514,4,7950,4],[8515,4,7951,4],[8516,0,7952,0],[8517,0,7953,0],[8518,0,7954,0],[8519,0,7955,0],[8520,0,7956,0],[8521,0,7957,0],[8522,0,7958,0],[8523,0,7959,0],[8524,0,7960,0],[8525,0,7961,0],[8526,0,7962,0],[8527,0,7963,0],[8528,4,7964,4],[8528,10,7964,10,"_send"],[8528,15,7964,15,"_send"],[8528,16,7964,16,"eventType"],[8528,25,7964,25],[8528,27,7964,27,"data"],[8528,31,7964,31],[8528,33,7964,33,"timeout"],[8528,40,7964,40],[8528,43,7964,43],[8528,45,7964,45],[8528,46,7964,46],[8528,74,7964,74],[8529,6,7965,8],[8529,12,7965,14,"messageChannel"],[8529,26,7965,28],[8529,29,7965,31],[8529,36,7965,38,"MessageChannel"],[8529,50,7965,52],[8529,55,7965,57],[8529,66,7965,68],[8529,69,7965,71],[8529,73,7965,75,"MessageChannel"],[8529,87,7965,89],[8529,88,7965,90],[8529,89,7965,91],[8529,92,7965,94],[8529,96,7965,98],[8530,6,7966,8],[8530,10,7966,12],[8530,11,7966,13,"messageChannel"],[8530,25,7966,27],[8530,27,7966,29],[8531,8,7967,12],[8531,14,7967,18],[8531,18,7967,22,"Error"],[8531,23,7967,27],[8531,24,7967,28],[8531,48,7967,52],[8531,49,7967,53],[8531,91,7967,95],[8531,92,7967,96],[8532,6,7968,8],[8533,6,7969,8],[8534,6,7970,8],[8535,6,7971,8],[8536,6,7972,8],[8537,6,7973,8],[8537,10,7973,12,"completionTimer"],[8537,25,7973,27],[8538,6,7974,8],[8538,10,7974,12,"handler"],[8538,17,7974,19],[8539,6,7975,8],[8539,13,7975,15],[8539,17,7975,19,"Promise"],[8539,24,7975,26],[8539,25,7975,27],[8539,26,7975,28,"resolve"],[8539,33,7975,35],[8539,35,7975,37,"reject"],[8539,41,7975,43],[8539,46,7975,48],[8540,8,7976,12],[8540,14,7976,18,"eventId"],[8540,21,7976,25],[8540,24,7976,28,"_generateEventId"],[8540,40,7976,44],[8540,41,7976,45],[8540,43,7976,47],[8540,45,7976,49],[8540,47,7976,51],[8540,48,7976,52],[8541,8,7977,12,"messageChannel"],[8541,22,7977,26],[8541,23,7977,27,"port1"],[8541,28,7977,32],[8541,29,7977,33,"start"],[8541,34,7977,38],[8541,35,7977,39],[8541,36,7977,40],[8542,8,7978,12],[8542,14,7978,18,"ackTimer"],[8542,22,7978,26],[8542,25,7978,29,"setTimeout"],[8542,35,7978,39],[8542,36,7978,40],[8542,42,7978,46],[8543,10,7979,16,"reject"],[8543,16,7979,22],[8543,17,7979,23],[8543,21,7979,27,"Error"],[8543,26,7979,32],[8543,27,7979,33],[8543,46,7979,52],[8543,47,7979,53],[8543,84,7979,90],[8543,85,7979,91],[8543,86,7979,92],[8544,8,7980,12],[8544,9,7980,13],[8544,11,7980,15,"timeout"],[8544,18,7980,22],[8544,19,7980,23],[8545,8,7981,12,"handler"],[8545,15,7981,19],[8545,18,7981,22],[8546,10,7982,16,"messageChannel"],[8546,24,7982,30],[8547,10,7983,16,"onMessage"],[8547,19,7983,25,"onMessage"],[8547,20,7983,26,"event"],[8547,25,7983,31],[8547,27,7983,33],[8548,12,7984,20],[8548,18,7984,26,"messageEvent"],[8548,30,7984,38],[8548,33,7984,41,"event"],[8548,38,7984,46],[8549,12,7985,20],[8549,16,7985,24,"messageEvent"],[8549,28,7985,36],[8549,29,7985,37,"data"],[8549,33,7985,41],[8549,34,7985,42,"eventId"],[8549,41,7985,49],[8549,46,7985,54,"eventId"],[8549,53,7985,61],[8549,55,7985,63],[8550,14,7986,24],[8551,12,7987,20],[8552,12,7988,20],[8552,20,7988,28,"messageEvent"],[8552,32,7988,40],[8552,33,7988,41,"data"],[8552,37,7988,45],[8552,38,7988,46,"status"],[8552,44,7988,52],[8553,14,7989,24],[8553,19,7989,29],[8553,24,7989,34],[8553,25,7989,35],[8554,16,7990,28],[8555,16,7991,28,"clearTimeout"],[8555,28,7991,40],[8555,29,7991,41,"ackTimer"],[8555,37,7991,49],[8555,38,7991,50],[8556,16,7992,28,"completionTimer"],[8556,31,7992,43],[8556,34,7992,46,"setTimeout"],[8556,44,7992,56],[8556,45,7992,57],[8556,51,7992,63],[8557,18,7993,32,"reject"],[8557,24,7993,38],[8557,25,7993,39],[8557,29,7993,43,"Error"],[8557,34,7993,48],[8557,35,7993,49],[8557,44,7993,58],[8557,45,7993,59],[8557,72,7993,86],[8557,73,7993,87],[8557,74,7993,88],[8558,16,7994,28],[8558,17,7994,29],[8558,19,7994,31],[8558,23,7994,35],[8558,24,7994,36],[8558,57,7994,69],[8558,58,7994,70],[8559,16,7995,28],[8560,14,7996,24],[8560,19,7996,29],[8560,25,7996,35],[8560,26,7996,36],[8561,16,7997,28],[8562,16,7998,28,"clearTimeout"],[8562,28,7998,40],[8562,29,7998,41,"completionTimer"],[8562,44,7998,56],[8562,45,7998,57],[8563,16,7999,28,"resolve"],[8563,23,7999,35],[8563,24,7999,36,"messageEvent"],[8563,36,7999,48],[8563,37,7999,49,"data"],[8563,41,7999,53],[8563,42,7999,54,"response"],[8563,50,7999,62],[8563,51,7999,63],[8564,16,8000,28],[8565,14,8001,24],[8566,16,8002,28,"clearTimeout"],[8566,28,8002,40],[8566,29,8002,41,"ackTimer"],[8566,37,8002,49],[8566,38,8002,50],[8567,16,8003,28,"clearTimeout"],[8567,28,8003,40],[8567,29,8003,41,"completionTimer"],[8567,44,8003,56],[8567,45,8003,57],[8568,16,8004,28,"reject"],[8568,22,8004,34],[8568,23,8004,35],[8568,27,8004,39,"Error"],[8568,32,8004,44],[8568,33,8004,45],[8568,51,8004,63],[8568,52,8004,64],[8568,88,8004,100],[8568,89,8004,101],[8568,90,8004,102],[8569,16,8005,28],[8570,12,8006,20],[8571,10,8007,16],[8572,8,8008,12],[8572,9,8008,13],[8573,8,8009,12],[8573,12,8009,16],[8573,13,8009,17,"handlers"],[8573,21,8009,25],[8573,22,8009,26,"add"],[8573,25,8009,29],[8573,26,8009,30,"handler"],[8573,33,8009,37],[8573,34,8009,38],[8574,8,8010,12,"messageChannel"],[8574,22,8010,26],[8574,23,8010,27,"port1"],[8574,28,8010,32],[8574,29,8010,33,"addEventListener"],[8574,45,8010,49],[8574,46,8010,50],[8574,55,8010,59],[8574,57,8010,61,"handler"],[8574,64,8010,68],[8574,65,8010,69,"onMessage"],[8574,74,8010,78],[8574,75,8010,79],[8575,8,8011,12],[8575,12,8011,16],[8575,13,8011,17,"target"],[8575,19,8011,23],[8575,20,8011,24,"postMessage"],[8575,31,8011,35],[8575,32,8011,36],[8576,10,8012,16,"eventType"],[8576,19,8012,25],[8577,10,8013,16,"eventId"],[8577,17,8013,23],[8578,10,8014,16,"data"],[8579,8,8015,12],[8579,9,8015,13],[8579,11,8015,15],[8579,12,8015,16,"messageChannel"],[8579,26,8015,30],[8579,27,8015,31,"port2"],[8579,32,8015,36],[8579,33,8015,37],[8579,34,8015,38],[8580,6,8016,8],[8580,7,8016,9],[8580,8,8016,10],[8580,9,8016,11,"finally"],[8580,16,8016,18],[8580,17,8016,19],[8580,23,8016,25],[8581,8,8017,12],[8581,12,8017,16,"handler"],[8581,19,8017,23],[8581,21,8017,25],[8582,10,8018,16],[8582,14,8018,20],[8582,15,8018,21,"removeMessageHandler"],[8582,35,8018,41],[8582,36,8018,42,"handler"],[8582,43,8018,49],[8582,44,8018,50],[8583,8,8019,12],[8584,6,8020,8],[8584,7,8020,9],[8584,8,8020,10],[8585,4,8021,4],[8586,2,8022,0],[8588,2,8024,0],[8589,0,8025,0],[8590,0,8026,0],[8591,0,8027,0],[8592,0,8028,0],[8593,0,8029,0],[8594,0,8030,0],[8595,0,8031,0],[8596,0,8032,0],[8597,0,8033,0],[8598,0,8034,0],[8599,0,8035,0],[8600,0,8036,0],[8601,0,8037,0],[8602,0,8038,0],[8603,0,8039,0],[8604,2,8040,0],[8605,0,8041,0],[8606,0,8042,0],[8607,0,8043,0],[8608,2,8044,0],[8608,11,8044,9,"_window"],[8608,18,8044,16,"_window"],[8608,19,8044,16],[8608,21,8044,19],[8609,4,8045,4],[8609,11,8045,11,"window"],[8609,17,8045,17],[8610,2,8046,0],[8611,2,8047,0],[8611,11,8047,9,"_setWindowLocation"],[8611,29,8047,27,"_setWindowLocation"],[8611,30,8047,28,"url"],[8611,33,8047,31],[8611,35,8047,33],[8612,4,8048,4,"_window"],[8612,11,8048,11],[8612,12,8048,12],[8612,13,8048,13],[8612,14,8048,14,"location"],[8612,22,8048,22],[8612,23,8048,23,"href"],[8612,27,8048,27],[8612,30,8048,30,"url"],[8612,33,8048,33],[8613,2,8049,0],[8615,2,8051,0],[8616,0,8052,0],[8617,0,8053,0],[8618,0,8054,0],[8619,0,8055,0],[8620,0,8056,0],[8621,0,8057,0],[8622,0,8058,0],[8623,0,8059,0],[8624,0,8060,0],[8625,0,8061,0],[8626,0,8062,0],[8627,0,8063,0],[8628,0,8064,0],[8629,0,8065,0],[8630,0,8066,0],[8631,2,8067,0],[8631,11,8067,9,"_isWorker"],[8631,20,8067,18,"_isWorker"],[8631,21,8067,18],[8631,23,8067,21],[8632,4,8068,4],[8632,11,8068,12],[8632,18,8068,19,"_window"],[8632,25,8068,26],[8632,26,8068,27],[8632,27,8068,28],[8632,28,8068,29],[8632,47,8068,48],[8632,48,8068,49],[8632,53,8068,54],[8632,64,8068,65],[8632,68,8069,8],[8632,75,8069,15,"_window"],[8632,82,8069,22],[8632,83,8069,23],[8632,84,8069,24],[8632,85,8069,25],[8632,100,8069,40],[8632,101,8069,41],[8632,106,8069,46],[8632,116,8069,56],[8633,2,8070,0],[8634,2,8071,0],[8634,17,8071,15,"_getActiveServiceWorker"],[8634,40,8071,38,"_getActiveServiceWorker"],[8634,41,8071,38],[8634,43,8071,41],[8635,4,8072,4],[8635,8,8072,8],[8635,9,8072,9,"navigator"],[8635,18,8072,18],[8635,20,8072,20,"serviceWorker"],[8635,33,8072,33],[8635,35,8072,35],[8636,6,8073,8],[8636,13,8073,15],[8636,17,8073,19],[8637,4,8074,4],[8638,4,8075,4],[8638,8,8075,8],[8639,6,8076,8],[8639,12,8076,14,"registration"],[8639,24,8076,26],[8639,27,8076,29],[8639,33,8076,35,"navigator"],[8639,42,8076,44],[8639,43,8076,45,"serviceWorker"],[8639,56,8076,58],[8639,57,8076,59,"ready"],[8639,62,8076,64],[8640,6,8077,8],[8640,13,8077,15,"registration"],[8640,25,8077,27],[8640,26,8077,28,"active"],[8640,32,8077,34],[8641,4,8078,4],[8641,5,8078,5],[8641,6,8079,4],[8641,12,8079,10],[8642,6,8080,8],[8642,13,8080,15],[8642,17,8080,19],[8643,4,8081,4],[8644,2,8082,0],[8645,2,8083,0],[8645,11,8083,9,"_getServiceWorkerController"],[8645,38,8083,36,"_getServiceWorkerController"],[8645,39,8083,36],[8645,41,8083,39],[8646,4,8084,4],[8646,11,8084,11,"navigator"],[8646,20,8084,20],[8646,22,8084,22,"serviceWorker"],[8646,35,8084,35],[8646,37,8084,37,"controller"],[8646,47,8084,47],[8646,51,8084,51],[8646,55,8084,55],[8647,2,8085,0],[8648,2,8086,0],[8648,11,8086,9,"_getWorkerGlobalScope"],[8648,32,8086,30,"_getWorkerGlobalScope"],[8648,33,8086,30],[8648,35,8086,33],[8649,4,8087,4],[8649,11,8087,11,"_isWorker"],[8649,20,8087,20],[8649,21,8087,21],[8649,22,8087,22],[8649,25,8087,25,"self"],[8649,29,8087,29],[8649,32,8087,32],[8649,36,8087,36],[8650,2,8088,0],[8652,2,8090,0],[8653,0,8091,0],[8654,0,8092,0],[8655,0,8093,0],[8656,0,8094,0],[8657,0,8095,0],[8658,0,8096,0],[8659,0,8097,0],[8660,0,8098,0],[8661,0,8099,0],[8662,0,8100,0],[8663,0,8101,0],[8664,0,8102,0],[8665,0,8103,0],[8666,0,8104,0],[8667,0,8105,0],[8668,2,8106,0],[8668,8,8106,6,"DB_NAME"],[8668,15,8106,13],[8668,18,8106,16],[8668,42,8106,40],[8669,2,8107,0],[8669,8,8107,6,"DB_VERSION"],[8669,18,8107,16],[8669,21,8107,19],[8669,22,8107,20],[8670,2,8108,0],[8670,8,8108,6,"DB_OBJECTSTORE_NAME"],[8670,27,8108,25],[8670,30,8108,28],[8670,52,8108,50],[8671,2,8109,0],[8671,8,8109,6,"DB_DATA_KEYPATH"],[8671,23,8109,21],[8671,26,8109,24],[8671,37,8109,35],[8672,2,8110,0],[8673,0,8111,0],[8674,0,8112,0],[8675,0,8113,0],[8676,0,8114,0],[8677,0,8115,0],[8678,2,8116,0],[8678,8,8116,6,"DBPromise"],[8678,17,8116,15],[8678,18,8116,16],[8679,4,8117,4,"constructor"],[8679,15,8117,15,"constructor"],[8679,16,8117,16,"request"],[8679,23,8117,23],[8679,25,8117,25],[8680,6,8118,8],[8680,10,8118,12],[8680,11,8118,13,"request"],[8680,18,8118,20],[8680,21,8118,23,"request"],[8680,28,8118,30],[8681,4,8119,4],[8682,4,8120,4,"toPromise"],[8682,13,8120,13,"toPromise"],[8682,14,8120,13],[8682,16,8120,16],[8683,6,8121,8],[8683,13,8121,15],[8683,17,8121,19,"Promise"],[8683,24,8121,26],[8683,25,8121,27],[8683,26,8121,28,"resolve"],[8683,33,8121,35],[8683,35,8121,37,"reject"],[8683,41,8121,43],[8683,46,8121,48],[8684,8,8122,12],[8684,12,8122,16],[8684,13,8122,17,"request"],[8684,20,8122,24],[8684,21,8122,25,"addEventListener"],[8684,37,8122,41],[8684,38,8122,42],[8684,47,8122,51],[8684,49,8122,53],[8684,55,8122,59],[8685,10,8123,16,"resolve"],[8685,17,8123,23],[8685,18,8123,24],[8685,22,8123,28],[8685,23,8123,29,"request"],[8685,30,8123,36],[8685,31,8123,37,"result"],[8685,37,8123,43],[8685,38,8123,44],[8686,8,8124,12],[8686,9,8124,13],[8686,10,8124,14],[8687,8,8125,12],[8687,12,8125,16],[8687,13,8125,17,"request"],[8687,20,8125,24],[8687,21,8125,25,"addEventListener"],[8687,37,8125,41],[8687,38,8125,42],[8687,45,8125,49],[8687,47,8125,51],[8687,53,8125,57],[8688,10,8126,16,"reject"],[8688,16,8126,22],[8688,17,8126,23],[8688,21,8126,27],[8688,22,8126,28,"request"],[8688,29,8126,35],[8688,30,8126,36,"error"],[8688,35,8126,41],[8688,36,8126,42],[8689,8,8127,12],[8689,9,8127,13],[8689,10,8127,14],[8690,6,8128,8],[8690,7,8128,9],[8690,8,8128,10],[8691,4,8129,4],[8692,2,8130,0],[8693,2,8131,0],[8693,11,8131,9,"getObjectStore"],[8693,25,8131,23,"getObjectStore"],[8693,26,8131,24,"db"],[8693,28,8131,26],[8693,30,8131,28,"isReadWrite"],[8693,41,8131,39],[8693,43,8131,41],[8694,4,8132,4],[8694,11,8132,11,"db"],[8694,13,8132,13],[8694,14,8133,9,"transaction"],[8694,25,8133,20],[8694,26,8133,21],[8694,27,8133,22,"DB_OBJECTSTORE_NAME"],[8694,46,8133,41],[8694,47,8133,42],[8694,49,8133,44,"isReadWrite"],[8694,60,8133,55],[8694,63,8133,58],[8694,74,8133,69],[8694,77,8133,72],[8694,87,8133,82],[8694,88,8133,83],[8694,89,8134,9,"objectStore"],[8694,100,8134,20],[8694,101,8134,21,"DB_OBJECTSTORE_NAME"],[8694,120,8134,40],[8694,121,8134,41],[8695,2,8135,0],[8696,2,8136,0],[8696,11,8136,9,"_deleteDatabase"],[8696,26,8136,24,"_deleteDatabase"],[8696,27,8136,24],[8696,29,8136,27],[8697,4,8137,4],[8697,10,8137,10,"request"],[8697,17,8137,17],[8697,20,8137,20,"indexedDB"],[8697,29,8137,29],[8697,30,8137,30,"deleteDatabase"],[8697,44,8137,44],[8697,45,8137,45,"DB_NAME"],[8697,52,8137,52],[8697,53,8137,53],[8698,4,8138,4],[8698,11,8138,11],[8698,15,8138,15,"DBPromise"],[8698,24,8138,24],[8698,25,8138,25,"request"],[8698,32,8138,32],[8698,33,8138,33],[8698,34,8138,34,"toPromise"],[8698,43,8138,43],[8698,44,8138,44],[8698,45,8138,45],[8699,2,8139,0],[8700,2,8140,0],[8700,11,8140,9,"_openDatabase"],[8700,24,8140,22,"_openDatabase"],[8700,25,8140,22],[8700,27,8140,25],[8701,4,8141,4],[8701,10,8141,10,"request"],[8701,17,8141,17],[8701,20,8141,20,"indexedDB"],[8701,29,8141,29],[8701,30,8141,30,"open"],[8701,34,8141,34],[8701,35,8141,35,"DB_NAME"],[8701,42,8141,42],[8701,44,8141,44,"DB_VERSION"],[8701,54,8141,54],[8701,55,8141,55],[8702,4,8142,4],[8702,11,8142,11],[8702,15,8142,15,"Promise"],[8702,22,8142,22],[8702,23,8142,23],[8702,24,8142,24,"resolve"],[8702,31,8142,31],[8702,33,8142,33,"reject"],[8702,39,8142,39],[8702,44,8142,44],[8703,6,8143,8,"request"],[8703,13,8143,15],[8703,14,8143,16,"addEventListener"],[8703,30,8143,32],[8703,31,8143,33],[8703,38,8143,40],[8703,40,8143,42],[8703,46,8143,48],[8704,8,8144,12,"reject"],[8704,14,8144,18],[8704,15,8144,19,"request"],[8704,22,8144,26],[8704,23,8144,27,"error"],[8704,28,8144,32],[8704,29,8144,33],[8705,6,8145,8],[8705,7,8145,9],[8705,8,8145,10],[8706,6,8146,8,"request"],[8706,13,8146,15],[8706,14,8146,16,"addEventListener"],[8706,30,8146,32],[8706,31,8146,33],[8706,46,8146,48],[8706,48,8146,50],[8706,54,8146,56],[8707,8,8147,12],[8707,14,8147,18,"db"],[8707,16,8147,20],[8707,19,8147,23,"request"],[8707,26,8147,30],[8707,27,8147,31,"result"],[8707,33,8147,37],[8708,8,8148,12],[8708,12,8148,16],[8709,10,8149,16,"db"],[8709,12,8149,18],[8709,13,8149,19,"createObjectStore"],[8709,30,8149,36],[8709,31,8149,37,"DB_OBJECTSTORE_NAME"],[8709,50,8149,56],[8709,52,8149,58],[8710,12,8149,60,"keyPath"],[8710,19,8149,67],[8710,21,8149,69,"DB_DATA_KEYPATH"],[8711,10,8149,85],[8711,11,8149,86],[8711,12,8149,87],[8712,8,8150,12],[8712,9,8150,13],[8712,10,8151,12],[8712,17,8151,19,"e"],[8712,18,8151,20],[8712,20,8151,22],[8713,10,8152,16,"reject"],[8713,16,8152,22],[8713,17,8152,23,"e"],[8713,18,8152,24],[8713,19,8152,25],[8714,8,8153,12],[8715,6,8154,8],[8715,7,8154,9],[8715,8,8154,10],[8716,6,8155,8,"request"],[8716,13,8155,15],[8716,14,8155,16,"addEventListener"],[8716,30,8155,32],[8716,31,8155,33],[8716,40,8155,42],[8716,42,8155,44],[8716,54,8155,56],[8717,8,8156,12],[8717,14,8156,18,"db"],[8717,16,8156,20],[8717,19,8156,23,"request"],[8717,26,8156,30],[8717,27,8156,31,"result"],[8717,33,8156,37],[8718,8,8157,12],[8719,8,8158,12],[8720,8,8159,12],[8721,8,8160,12],[8722,8,8161,12],[8722,12,8161,16],[8722,13,8161,17,"db"],[8722,15,8161,19],[8722,16,8161,20,"objectStoreNames"],[8722,32,8161,36],[8722,33,8161,37,"contains"],[8722,41,8161,45],[8722,42,8161,46,"DB_OBJECTSTORE_NAME"],[8722,61,8161,65],[8722,62,8161,66],[8722,64,8161,68],[8723,10,8162,16],[8724,10,8163,16,"db"],[8724,12,8163,18],[8724,13,8163,19,"close"],[8724,18,8163,24],[8724,19,8163,25],[8724,20,8163,26],[8725,10,8164,16],[8725,16,8164,22,"_deleteDatabase"],[8725,31,8164,37],[8725,32,8164,38],[8725,33,8164,39],[8726,10,8165,16,"resolve"],[8726,17,8165,23],[8726,18,8165,24],[8726,24,8165,30,"_openDatabase"],[8726,37,8165,43],[8726,38,8165,44],[8726,39,8165,45],[8726,40,8165,46],[8727,8,8166,12],[8727,9,8166,13],[8727,15,8167,17],[8728,10,8168,16,"resolve"],[8728,17,8168,23],[8728,18,8168,24,"db"],[8728,20,8168,26],[8728,21,8168,27],[8729,8,8169,12],[8730,6,8170,8],[8730,7,8170,9],[8730,8,8170,10],[8731,4,8171,4],[8731,5,8171,5],[8731,6,8171,6],[8732,2,8172,0],[8733,2,8173,0],[8733,17,8173,15,"_putObject"],[8733,27,8173,25,"_putObject"],[8733,28,8173,26,"db"],[8733,30,8173,28],[8733,32,8173,30,"key"],[8733,35,8173,33],[8733,37,8173,35,"value"],[8733,42,8173,40],[8733,44,8173,42],[8734,4,8174,4],[8734,10,8174,10,"request"],[8734,17,8174,17],[8734,20,8174,20,"getObjectStore"],[8734,34,8174,34],[8734,35,8174,35,"db"],[8734,37,8174,37],[8734,39,8174,39],[8734,43,8174,43],[8734,44,8174,44],[8734,45,8174,45,"put"],[8734,48,8174,48],[8734,49,8174,49],[8735,6,8175,8],[8735,7,8175,9,"DB_DATA_KEYPATH"],[8735,22,8175,24],[8735,25,8175,27,"key"],[8735,28,8175,30],[8736,6,8176,8,"value"],[8737,4,8177,4],[8737,5,8177,5],[8737,6,8177,6],[8738,4,8178,4],[8738,11,8178,11],[8738,15,8178,15,"DBPromise"],[8738,24,8178,24],[8738,25,8178,25,"request"],[8738,32,8178,32],[8738,33,8178,33],[8738,34,8178,34,"toPromise"],[8738,43,8178,43],[8738,44,8178,44],[8738,45,8178,45],[8739,2,8179,0],[8740,2,8180,0],[8740,17,8180,15,"getObject"],[8740,26,8180,24,"getObject"],[8740,27,8180,25,"db"],[8740,29,8180,27],[8740,31,8180,29,"key"],[8740,34,8180,32],[8740,36,8180,34],[8741,4,8181,4],[8741,10,8181,10,"request"],[8741,17,8181,17],[8741,20,8181,20,"getObjectStore"],[8741,34,8181,34],[8741,35,8181,35,"db"],[8741,37,8181,37],[8741,39,8181,39],[8741,44,8181,44],[8741,45,8181,45],[8741,46,8181,46,"get"],[8741,49,8181,49],[8741,50,8181,50,"key"],[8741,53,8181,53],[8741,54,8181,54],[8742,4,8182,4],[8742,10,8182,10,"data"],[8742,14,8182,14],[8742,17,8182,17],[8742,23,8182,23],[8742,27,8182,27,"DBPromise"],[8742,36,8182,36],[8742,37,8182,37,"request"],[8742,44,8182,44],[8742,45,8182,45],[8742,46,8182,46,"toPromise"],[8742,55,8182,55],[8742,56,8182,56],[8742,57,8182,57],[8743,4,8183,4],[8743,11,8183,11,"data"],[8743,15,8183,15],[8743,20,8183,20,"undefined"],[8743,29,8183,29],[8743,32,8183,32],[8743,36,8183,36],[8743,39,8183,39,"data"],[8743,43,8183,43],[8743,44,8183,44,"value"],[8743,49,8183,49],[8744,2,8184,0],[8745,2,8185,0],[8745,11,8185,9,"_deleteObject"],[8745,24,8185,22,"_deleteObject"],[8745,25,8185,23,"db"],[8745,27,8185,25],[8745,29,8185,27,"key"],[8745,32,8185,30],[8745,34,8185,32],[8746,4,8186,4],[8746,10,8186,10,"request"],[8746,17,8186,17],[8746,20,8186,20,"getObjectStore"],[8746,34,8186,34],[8746,35,8186,35,"db"],[8746,37,8186,37],[8746,39,8186,39],[8746,43,8186,43],[8746,44,8186,44],[8746,45,8186,45,"delete"],[8746,51,8186,51],[8746,52,8186,52,"key"],[8746,55,8186,55],[8746,56,8186,56],[8747,4,8187,4],[8747,11,8187,11],[8747,15,8187,15,"DBPromise"],[8747,24,8187,24],[8747,25,8187,25,"request"],[8747,32,8187,32],[8747,33,8187,33],[8747,34,8187,34,"toPromise"],[8747,43,8187,43],[8747,44,8187,44],[8747,45,8187,45],[8748,2,8188,0],[8749,2,8189,0],[8749,8,8189,6,"_POLLING_INTERVAL_MS"],[8749,28,8189,26],[8749,31,8189,29],[8749,34,8189,32],[8750,2,8190,0],[8750,8,8190,6,"_TRANSACTION_RETRY_COUNT"],[8750,32,8190,30],[8750,35,8190,33],[8750,36,8190,34],[8751,2,8191,0],[8751,8,8191,6,"IndexedDBLocalPersistence"],[8751,33,8191,31],[8751,34,8191,32],[8752,4,8192,4,"constructor"],[8752,15,8192,15,"constructor"],[8752,16,8192,15],[8752,18,8192,18],[8753,6,8193,8],[8753,10,8193,12],[8753,11,8193,13,"type"],[8753,15,8193,17],[8753,18,8193,20],[8753,25,8193,27],[8753,26,8193,28],[8754,6,8194,8],[8754,10,8194,12],[8754,11,8194,13,"_shouldAllowMigration"],[8754,32,8194,34],[8754,35,8194,37],[8754,39,8194,41],[8755,6,8195,8],[8755,10,8195,12],[8755,11,8195,13,"listeners"],[8755,20,8195,22],[8755,23,8195,25],[8755,24,8195,26],[8755,25,8195,27],[8756,6,8196,8],[8756,10,8196,12],[8756,11,8196,13,"localCache"],[8756,21,8196,23],[8756,24,8196,26],[8756,25,8196,27],[8756,26,8196,28],[8757,6,8197,8],[8758,6,8198,8],[8759,6,8199,8],[8759,10,8199,12],[8759,11,8199,13,"pollTimer"],[8759,20,8199,22],[8759,23,8199,25],[8759,27,8199,29],[8760,6,8200,8],[8760,10,8200,12],[8760,11,8200,13,"pendingWrites"],[8760,24,8200,26],[8760,27,8200,29],[8760,28,8200,30],[8761,6,8201,8],[8761,10,8201,12],[8761,11,8201,13,"receiver"],[8761,19,8201,21],[8761,22,8201,24],[8761,26,8201,28],[8762,6,8202,8],[8762,10,8202,12],[8762,11,8202,13,"sender"],[8762,17,8202,19],[8762,20,8202,22],[8762,24,8202,26],[8763,6,8203,8],[8763,10,8203,12],[8763,11,8203,13,"serviceWorkerReceiverAvailable"],[8763,41,8203,43],[8763,44,8203,46],[8763,49,8203,51],[8764,6,8204,8],[8764,10,8204,12],[8764,11,8204,13,"activeServiceWorker"],[8764,30,8204,32],[8764,33,8204,35],[8764,37,8204,39],[8765,6,8205,8],[8766,6,8206,8],[8766,10,8206,12],[8766,11,8206,13,"_workerInitializationPromise"],[8766,39,8206,41],[8766,42,8207,12],[8766,46,8207,16],[8766,47,8207,17,"initializeServiceWorkerMessaging"],[8766,79,8207,49],[8766,80,8207,50],[8766,81,8207,51],[8766,82,8207,52,"then"],[8766,86,8207,56],[8766,87,8207,57],[8766,93,8207,63],[8766,94,8207,65],[8766,95,8207,66],[8766,97,8207,68],[8766,103,8207,74],[8766,104,8207,76],[8766,105,8207,77],[8766,106,8207,78],[8767,4,8208,4],[8768,4,8209,4],[8768,10,8209,10,"_openDb"],[8768,17,8209,17,"_openDb"],[8768,18,8209,17],[8768,20,8209,20],[8769,6,8210,8],[8769,10,8210,12],[8769,14,8210,16],[8769,15,8210,17,"db"],[8769,17,8210,19],[8769,19,8210,21],[8770,8,8211,12],[8770,15,8211,19],[8770,19,8211,23],[8770,20,8211,24,"db"],[8770,22,8211,26],[8771,6,8212,8],[8772,6,8213,8],[8772,10,8213,12],[8772,11,8213,13,"db"],[8772,13,8213,15],[8772,16,8213,18],[8772,22,8213,24,"_openDatabase"],[8772,35,8213,37],[8772,36,8213,38],[8772,37,8213,39],[8773,6,8214,8],[8773,13,8214,15],[8773,17,8214,19],[8773,18,8214,20,"db"],[8773,20,8214,22],[8774,4,8215,4],[8775,4,8216,4],[8775,10,8216,10,"_withRetries"],[8775,22,8216,22,"_withRetries"],[8775,23,8216,23,"op"],[8775,25,8216,25],[8775,27,8216,27],[8776,6,8217,8],[8776,10,8217,12,"numAttempts"],[8776,21,8217,23],[8776,24,8217,26],[8776,25,8217,27],[8777,6,8218,8],[8777,13,8218,15],[8777,17,8218,19],[8777,19,8218,21],[8778,8,8219,12],[8778,12,8219,16],[8779,10,8220,16],[8779,16,8220,22,"db"],[8779,18,8220,24],[8779,21,8220,27],[8779,27,8220,33],[8779,31,8220,37],[8779,32,8220,38,"_openDb"],[8779,39,8220,45],[8779,40,8220,46],[8779,41,8220,47],[8780,10,8221,16],[8780,17,8221,23],[8780,23,8221,29,"op"],[8780,25,8221,31],[8780,26,8221,32,"db"],[8780,28,8221,34],[8780,29,8221,35],[8781,8,8222,12],[8781,9,8222,13],[8781,10,8223,12],[8781,17,8223,19,"e"],[8781,18,8223,20],[8781,20,8223,22],[8782,10,8224,16],[8782,14,8224,20,"numAttempts"],[8782,25,8224,31],[8782,27,8224,33],[8782,30,8224,36,"_TRANSACTION_RETRY_COUNT"],[8782,54,8224,60],[8782,56,8224,62],[8783,12,8225,20],[8783,18,8225,26,"e"],[8783,19,8225,27],[8784,10,8226,16],[8785,10,8227,16],[8785,14,8227,20],[8785,18,8227,24],[8785,19,8227,25,"db"],[8785,21,8227,27],[8785,23,8227,29],[8786,12,8228,20],[8786,16,8228,24],[8786,17,8228,25,"db"],[8786,19,8228,27],[8786,20,8228,28,"close"],[8786,25,8228,33],[8786,26,8228,34],[8786,27,8228,35],[8787,12,8229,20],[8787,16,8229,24],[8787,17,8229,25,"db"],[8787,19,8229,27],[8787,22,8229,30,"undefined"],[8787,31,8229,39],[8788,10,8230,16],[8789,10,8231,16],[8790,8,8232,12],[8791,6,8233,8],[8792,4,8234,4],[8793,4,8235,4],[8794,0,8236,0],[8795,0,8237,0],[8796,0,8238,0],[8797,4,8239,4],[8797,10,8239,10,"initializeServiceWorkerMessaging"],[8797,42,8239,42,"initializeServiceWorkerMessaging"],[8797,43,8239,42],[8797,45,8239,45],[8798,6,8240,8],[8798,13,8240,15,"_isWorker"],[8798,22,8240,24],[8798,23,8240,25],[8798,24,8240,26],[8798,27,8240,29],[8798,31,8240,33],[8798,32,8240,34,"initializeReceiver"],[8798,50,8240,52],[8798,51,8240,53],[8798,52,8240,54],[8798,55,8240,57],[8798,59,8240,61],[8798,60,8240,62,"initializeSender"],[8798,76,8240,78],[8798,77,8240,79],[8798,78,8240,80],[8799,4,8241,4],[8800,4,8242,4],[8801,0,8243,0],[8802,0,8244,0],[8803,4,8245,4],[8803,10,8245,10,"initializeReceiver"],[8803,28,8245,28,"initializeReceiver"],[8803,29,8245,28],[8803,31,8245,31],[8804,6,8246,8],[8804,10,8246,12],[8804,11,8246,13,"receiver"],[8804,19,8246,21],[8804,22,8246,24,"Receiver"],[8804,30,8246,32],[8804,31,8246,33,"_getInstance"],[8804,43,8246,45],[8804,44,8246,46,"_getWorkerGlobalScope"],[8804,65,8246,67],[8804,66,8246,68],[8804,67,8246,69],[8804,68,8246,70],[8805,6,8247,8],[8806,6,8248,8],[8806,10,8248,12],[8806,11,8248,13,"receiver"],[8806,19,8248,21],[8806,20,8248,22,"_subscribe"],[8806,30,8248,32],[8806,31,8248,33],[8806,43,8248,45],[8806,44,8248,46],[8806,74,8248,76],[8806,81,8248,83,"_origin"],[8806,88,8248,90],[8806,90,8248,92,"data"],[8806,94,8248,96],[8806,99,8248,101],[8807,8,8249,12],[8807,14,8249,18,"keys"],[8807,18,8249,22],[8807,21,8249,25],[8807,27,8249,31],[8807,31,8249,35],[8807,32,8249,36,"_poll"],[8807,37,8249,41],[8807,38,8249,42],[8807,39,8249,43],[8808,8,8250,12],[8808,15,8250,19],[8809,10,8251,16,"keyProcessed"],[8809,22,8251,28],[8809,24,8251,30,"keys"],[8809,28,8251,34],[8809,29,8251,35,"includes"],[8809,37,8251,43],[8809,38,8251,44,"data"],[8809,42,8251,48],[8809,43,8251,49,"key"],[8809,46,8251,52],[8810,8,8252,12],[8810,9,8252,13],[8811,6,8253,8],[8811,7,8253,9],[8811,8,8253,10],[8812,6,8254,8],[8813,6,8255,8],[8813,10,8255,12],[8813,11,8255,13,"receiver"],[8813,19,8255,21],[8813,20,8255,22,"_subscribe"],[8813,30,8255,32],[8813,31,8255,33],[8813,37,8255,39],[8813,38,8255,40],[8813,61,8255,63],[8813,68,8255,70,"_origin"],[8813,75,8255,77],[8813,77,8255,79,"_data"],[8813,82,8255,84],[8813,87,8255,89],[8814,8,8256,12],[8814,15,8256,19],[8814,16,8256,20],[8814,28,8256,32],[8814,29,8256,33],[8814,58,8256,62],[8815,6,8257,8],[8815,7,8257,9],[8815,8,8257,10],[8816,4,8258,4],[8817,4,8259,4],[8818,0,8260,0],[8819,0,8261,0],[8820,0,8262,0],[8821,0,8263,0],[8822,0,8264,0],[8823,0,8265,0],[8824,4,8266,4],[8824,10,8266,10,"initializeSender"],[8824,26,8266,26,"initializeSender"],[8824,27,8266,26],[8824,29,8266,29],[8825,6,8267,8],[8826,6,8268,8],[8826,10,8268,12],[8826,11,8268,13,"activeServiceWorker"],[8826,30,8268,32],[8826,33,8268,35],[8826,39,8268,41,"_getActiveServiceWorker"],[8826,62,8268,64],[8826,63,8268,65],[8826,64,8268,66],[8827,6,8269,8],[8827,10,8269,12],[8827,11,8269,13],[8827,15,8269,17],[8827,16,8269,18,"activeServiceWorker"],[8827,35,8269,37],[8827,37,8269,39],[8828,8,8270,12],[8829,6,8271,8],[8830,6,8272,8],[8830,10,8272,12],[8830,11,8272,13,"sender"],[8830,17,8272,19],[8830,20,8272,22],[8830,24,8272,26,"Sender"],[8830,30,8272,32],[8830,31,8272,33],[8830,35,8272,37],[8830,36,8272,38,"activeServiceWorker"],[8830,55,8272,57],[8830,56,8272,58],[8831,6,8273,8],[8832,6,8274,8],[8832,12,8274,14,"results"],[8832,19,8274,21],[8832,22,8274,24],[8832,28,8274,30],[8832,32,8274,34],[8832,33,8274,35,"sender"],[8832,39,8274,41],[8832,40,8274,42,"_send"],[8832,45,8274,47],[8832,46,8274,48],[8832,52,8274,54],[8832,53,8274,55],[8832,76,8274,78],[8832,77,8274,79],[8832,78,8274,80],[8832,80,8274,82],[8832,83,8274,85],[8832,84,8274,86],[8832,115,8274,117],[8832,116,8274,118],[8833,6,8275,8],[8833,10,8275,12],[8833,11,8275,13,"results"],[8833,18,8275,20],[8833,20,8275,22],[8834,8,8276,12],[8835,6,8277,8],[8836,6,8278,8],[8836,10,8278,12,"results"],[8836,17,8278,19],[8836,18,8278,20],[8836,19,8278,21],[8836,20,8278,22],[8836,22,8278,24,"fulfilled"],[8836,31,8278,33],[8836,35,8279,12,"results"],[8836,42,8279,19],[8836,43,8279,20],[8836,44,8279,21],[8836,45,8279,22],[8836,47,8279,24,"value"],[8836,52,8279,29],[8836,53,8279,30,"includes"],[8836,61,8279,38],[8836,62,8279,39],[8836,74,8279,51],[8836,75,8279,52],[8836,103,8279,80],[8836,104,8279,81],[8836,106,8279,83],[8837,8,8280,12],[8837,12,8280,16],[8837,13,8280,17,"serviceWorkerReceiverAvailable"],[8837,43,8280,47],[8837,46,8280,50],[8837,50,8280,54],[8838,6,8281,8],[8839,4,8282,4],[8840,4,8283,4],[8841,0,8284,0],[8842,0,8285,0],[8843,0,8286,0],[8844,0,8287,0],[8845,0,8288,0],[8846,0,8289,0],[8847,0,8290,0],[8848,0,8291,0],[8849,4,8292,4],[8849,10,8292,10,"notifyServiceWorker"],[8849,29,8292,29,"notifyServiceWorker"],[8849,30,8292,30,"key"],[8849,33,8292,33],[8849,35,8292,35],[8850,6,8293,8],[8850,10,8293,12],[8850,11,8293,13],[8850,15,8293,17],[8850,16,8293,18,"sender"],[8850,22,8293,24],[8850,26,8294,12],[8850,27,8294,13],[8850,31,8294,17],[8850,32,8294,18,"activeServiceWorker"],[8850,51,8294,37],[8850,55,8295,12,"_getServiceWorkerController"],[8850,82,8295,39],[8850,83,8295,40],[8850,84,8295,41],[8850,89,8295,46],[8850,93,8295,50],[8850,94,8295,51,"activeServiceWorker"],[8850,113,8295,70],[8850,115,8295,72],[8851,8,8296,12],[8852,6,8297,8],[8853,6,8298,8],[8853,10,8298,12],[8854,8,8299,12],[8854,14,8299,18],[8854,18,8299,22],[8854,19,8299,23,"sender"],[8854,25,8299,29],[8854,26,8299,30,"_send"],[8854,31,8299,35],[8854,32,8299,36],[8854,44,8299,48],[8854,45,8299,49],[8854,75,8299,79],[8855,10,8299,81,"key"],[8856,8,8299,85],[8856,9,8299,86],[8857,8,8300,12],[8858,8,8301,12],[8858,12,8301,16],[8858,13,8301,17,"serviceWorkerReceiverAvailable"],[8858,43,8301,47],[8858,46,8302,18],[8858,49,8302,21],[8858,50,8302,22],[8858,84,8303,18],[8858,86,8303,20],[8858,87,8303,21],[8858,113,8303,47],[8858,114,8303,48],[8859,6,8304,8],[8859,7,8304,9],[8859,8,8305,8],[8859,14,8305,14],[8860,8,8306,12],[8861,6,8306,12],[8862,4,8308,4],[8863,4,8309,4],[8863,10,8309,10,"_isAvailable"],[8863,22,8309,22,"_isAvailable"],[8863,23,8309,22],[8863,25,8309,25],[8864,6,8310,8],[8864,10,8310,12],[8865,8,8311,12],[8865,12,8311,16],[8865,13,8311,17,"indexedDB"],[8865,22,8311,26],[8865,24,8311,28],[8866,10,8312,16],[8866,17,8312,23],[8866,22,8312,28],[8867,8,8313,12],[8868,8,8314,12],[8868,14,8314,18,"db"],[8868,16,8314,20],[8868,19,8314,23],[8868,25,8314,29,"_openDatabase"],[8868,38,8314,42],[8868,39,8314,43],[8868,40,8314,44],[8869,8,8315,12],[8869,14,8315,18,"_putObject"],[8869,24,8315,28],[8869,25,8315,29,"db"],[8869,27,8315,31],[8869,29,8315,33,"STORAGE_AVAILABLE_KEY"],[8869,50,8315,54],[8869,52,8315,56],[8869,55,8315,59],[8869,56,8315,60],[8870,8,8316,12],[8870,14,8316,18,"_deleteObject"],[8870,27,8316,31],[8870,28,8316,32,"db"],[8870,30,8316,34],[8870,32,8316,36,"STORAGE_AVAILABLE_KEY"],[8870,53,8316,57],[8870,54,8316,58],[8871,8,8317,12],[8871,15,8317,19],[8871,19,8317,23],[8872,6,8318,8],[8872,7,8318,9],[8872,8,8319,8],[8872,14,8319,14],[8872,15,8319,16],[8873,6,8320,8],[8873,13,8320,15],[8873,18,8320,20],[8874,4,8321,4],[8875,4,8322,4],[8875,10,8322,10,"_withPendingWrite"],[8875,27,8322,27,"_withPendingWrite"],[8875,28,8322,28,"write"],[8875,33,8322,33],[8875,35,8322,35],[8876,6,8323,8],[8876,10,8323,12],[8876,11,8323,13,"pendingWrites"],[8876,24,8323,26],[8876,26,8323,28],[8877,6,8324,8],[8877,10,8324,12],[8878,8,8325,12],[8878,14,8325,18,"write"],[8878,19,8325,23],[8878,20,8325,24],[8878,21,8325,25],[8879,6,8326,8],[8879,7,8326,9],[8879,16,8327,16],[8880,8,8328,12],[8880,12,8328,16],[8880,13,8328,17,"pendingWrites"],[8880,26,8328,30],[8880,28,8328,32],[8881,6,8329,8],[8882,4,8330,4],[8883,4,8331,4],[8883,10,8331,10,"_set"],[8883,14,8331,14,"_set"],[8883,15,8331,15,"key"],[8883,18,8331,18],[8883,20,8331,20,"value"],[8883,25,8331,25],[8883,27,8331,27],[8884,6,8332,8],[8884,13,8332,15],[8884,17,8332,19],[8884,18,8332,20,"_withPendingWrite"],[8884,35,8332,37],[8884,36,8332,38],[8884,48,8332,50],[8885,8,8333,12],[8885,14,8333,18],[8885,18,8333,22],[8885,19,8333,23,"_withRetries"],[8885,31,8333,35],[8885,32,8333,37,"db"],[8885,34,8333,39],[8885,38,8333,44,"_putObject"],[8885,48,8333,54],[8885,49,8333,55,"db"],[8885,51,8333,57],[8885,53,8333,59,"key"],[8885,56,8333,62],[8885,58,8333,64,"value"],[8885,63,8333,69],[8885,64,8333,70],[8885,65,8333,71],[8886,8,8334,12],[8886,12,8334,16],[8886,13,8334,17,"localCache"],[8886,23,8334,27],[8886,24,8334,28,"key"],[8886,27,8334,31],[8886,28,8334,32],[8886,31,8334,35,"value"],[8886,36,8334,40],[8887,8,8335,12],[8887,15,8335,19],[8887,19,8335,23],[8887,20,8335,24,"notifyServiceWorker"],[8887,39,8335,43],[8887,40,8335,44,"key"],[8887,43,8335,47],[8887,44,8335,48],[8888,6,8336,8],[8888,7,8336,9],[8888,8,8336,10],[8889,4,8337,4],[8890,4,8338,4],[8890,10,8338,10,"_get"],[8890,14,8338,14,"_get"],[8890,15,8338,15,"key"],[8890,18,8338,18],[8890,20,8338,20],[8891,6,8339,8],[8891,12,8339,14,"obj"],[8891,15,8339,17],[8891,18,8339,21],[8891,24,8339,27],[8891,28,8339,31],[8891,29,8339,32,"_withRetries"],[8891,41,8339,44],[8891,42,8339,46,"db"],[8891,44,8339,48],[8891,48,8339,53,"getObject"],[8891,57,8339,62],[8891,58,8339,63,"db"],[8891,60,8339,65],[8891,62,8339,67,"key"],[8891,65,8339,70],[8891,66,8339,71],[8891,67,8339,73],[8892,6,8340,8],[8892,10,8340,12],[8892,11,8340,13,"localCache"],[8892,21,8340,23],[8892,22,8340,24,"key"],[8892,25,8340,27],[8892,26,8340,28],[8892,29,8340,31,"obj"],[8892,32,8340,34],[8893,6,8341,8],[8893,13,8341,15,"obj"],[8893,16,8341,18],[8894,4,8342,4],[8895,4,8343,4],[8895,10,8343,10,"_remove"],[8895,17,8343,17,"_remove"],[8895,18,8343,18,"key"],[8895,21,8343,21],[8895,23,8343,23],[8896,6,8344,8],[8896,13,8344,15],[8896,17,8344,19],[8896,18,8344,20,"_withPendingWrite"],[8896,35,8344,37],[8896,36,8344,38],[8896,48,8344,50],[8897,8,8345,12],[8897,14,8345,18],[8897,18,8345,22],[8897,19,8345,23,"_withRetries"],[8897,31,8345,35],[8897,32,8345,37,"db"],[8897,34,8345,39],[8897,38,8345,44,"_deleteObject"],[8897,51,8345,57],[8897,52,8345,58,"db"],[8897,54,8345,60],[8897,56,8345,62,"key"],[8897,59,8345,65],[8897,60,8345,66],[8897,61,8345,67],[8898,8,8346,12],[8898,15,8346,19],[8898,19,8346,23],[8898,20,8346,24,"localCache"],[8898,30,8346,34],[8898,31,8346,35,"key"],[8898,34,8346,38],[8898,35,8346,39],[8899,8,8347,12],[8899,15,8347,19],[8899,19,8347,23],[8899,20,8347,24,"notifyServiceWorker"],[8899,39,8347,43],[8899,40,8347,44,"key"],[8899,43,8347,47],[8899,44,8347,48],[8900,6,8348,8],[8900,7,8348,9],[8900,8,8348,10],[8901,4,8349,4],[8902,4,8350,4],[8902,10,8350,10,"_poll"],[8902,15,8350,15,"_poll"],[8902,16,8350,15],[8902,18,8350,18],[8903,6,8351,8],[8904,6,8352,8],[8904,12,8352,14,"result"],[8904,18,8352,20],[8904,21,8352,23],[8904,27,8352,29],[8904,31,8352,33],[8904,32,8352,34,"_withRetries"],[8904,44,8352,46],[8904,45,8352,48,"db"],[8904,47,8352,50],[8904,51,8352,55],[8905,8,8353,12],[8905,14,8353,18,"getAllRequest"],[8905,27,8353,31],[8905,30,8353,34,"getObjectStore"],[8905,44,8353,48],[8905,45,8353,49,"db"],[8905,47,8353,51],[8905,49,8353,53],[8905,54,8353,58],[8905,55,8353,59],[8905,56,8353,60,"getAll"],[8905,62,8353,66],[8905,63,8353,67],[8905,64,8353,68],[8906,8,8354,12],[8906,15,8354,19],[8906,19,8354,23,"DBPromise"],[8906,28,8354,32],[8906,29,8354,33,"getAllRequest"],[8906,42,8354,46],[8906,43,8354,47],[8906,44,8354,48,"toPromise"],[8906,53,8354,57],[8906,54,8354,58],[8906,55,8354,59],[8907,6,8355,8],[8907,7,8355,9],[8907,8,8355,10],[8908,6,8356,8],[8908,10,8356,12],[8908,11,8356,13,"result"],[8908,17,8356,19],[8908,19,8356,21],[8909,8,8357,12],[8909,15,8357,19],[8909,17,8357,21],[8910,6,8358,8],[8911,6,8359,8],[8912,6,8360,8],[8912,10,8360,12],[8912,14,8360,16],[8912,15,8360,17,"pendingWrites"],[8912,28,8360,30],[8912,33,8360,35],[8912,34,8360,36],[8912,36,8360,38],[8913,8,8361,12],[8913,15,8361,19],[8913,17,8361,21],[8914,6,8362,8],[8915,6,8363,8],[8915,12,8363,14,"keys"],[8915,16,8363,18],[8915,19,8363,21],[8915,21,8363,23],[8916,6,8364,8],[8916,12,8364,14,"keysInResult"],[8916,24,8364,26],[8916,27,8364,29],[8916,31,8364,33,"Set"],[8916,34,8364,36],[8916,35,8364,37],[8916,36,8364,38],[8917,6,8365,8],[8917,10,8365,12,"result"],[8917,16,8365,18],[8917,17,8365,19,"length"],[8917,23,8365,25],[8917,28,8365,30],[8917,29,8365,31],[8917,31,8365,33],[8918,8,8366,12],[8918,13,8366,17],[8918,19,8366,23],[8919,10,8366,25,"fbase_key"],[8919,19,8366,34],[8919,21,8366,36,"key"],[8919,24,8366,39],[8920,10,8366,41,"value"],[8921,8,8366,47],[8921,9,8366,48],[8921,13,8366,52,"result"],[8921,19,8366,58],[8921,21,8366,60],[8922,10,8367,16,"keysInResult"],[8922,22,8367,28],[8922,23,8367,29,"add"],[8922,26,8367,32],[8922,27,8367,33,"key"],[8922,30,8367,36],[8922,31,8367,37],[8923,10,8368,16],[8923,14,8368,20,"JSON"],[8923,18,8368,24],[8923,19,8368,25,"stringify"],[8923,28,8368,34],[8923,29,8368,35],[8923,33,8368,39],[8923,34,8368,40,"localCache"],[8923,44,8368,50],[8923,45,8368,51,"key"],[8923,48,8368,54],[8923,49,8368,55],[8923,50,8368,56],[8923,55,8368,61,"JSON"],[8923,59,8368,65],[8923,60,8368,66,"stringify"],[8923,69,8368,75],[8923,70,8368,76,"value"],[8923,75,8368,81],[8923,76,8368,82],[8923,78,8368,84],[8924,12,8369,20],[8924,16,8369,24],[8924,17,8369,25,"notifyListeners"],[8924,32,8369,40],[8924,33,8369,41,"key"],[8924,36,8369,44],[8924,38,8369,46,"value"],[8924,43,8369,51],[8924,44,8369,52],[8925,12,8370,20,"keys"],[8925,16,8370,24],[8925,17,8370,25,"push"],[8925,21,8370,29],[8925,22,8370,30,"key"],[8925,25,8370,33],[8925,26,8370,34],[8926,10,8371,16],[8927,8,8372,12],[8928,6,8373,8],[8929,6,8374,8],[8929,11,8374,13],[8929,17,8374,19,"localKey"],[8929,25,8374,27],[8929,29,8374,31,"Object"],[8929,35,8374,37],[8929,36,8374,38,"keys"],[8929,40,8374,42],[8929,41,8374,43],[8929,45,8374,47],[8929,46,8374,48,"localCache"],[8929,56,8374,58],[8929,57,8374,59],[8929,59,8374,61],[8930,8,8375,12],[8930,12,8375,16],[8930,16,8375,20],[8930,17,8375,21,"localCache"],[8930,27,8375,31],[8930,28,8375,32,"localKey"],[8930,36,8375,40],[8930,37,8375,41],[8930,41,8375,45],[8930,42,8375,46,"keysInResult"],[8930,54,8375,58],[8930,55,8375,59,"has"],[8930,58,8375,62],[8930,59,8375,63,"localKey"],[8930,67,8375,71],[8930,68,8375,72],[8930,70,8375,74],[8931,10,8376,16],[8932,10,8377,16],[8932,14,8377,20],[8932,15,8377,21,"notifyListeners"],[8932,30,8377,36],[8932,31,8377,37,"localKey"],[8932,39,8377,45],[8932,41,8377,47],[8932,45,8377,51],[8932,46,8377,52],[8933,10,8378,16,"keys"],[8933,14,8378,20],[8933,15,8378,21,"push"],[8933,19,8378,25],[8933,20,8378,26,"localKey"],[8933,28,8378,34],[8933,29,8378,35],[8934,8,8379,12],[8935,6,8380,8],[8936,6,8381,8],[8936,13,8381,15,"keys"],[8936,17,8381,19],[8937,4,8382,4],[8938,4,8383,4,"notifyListeners"],[8938,19,8383,19,"notifyListeners"],[8938,20,8383,20,"key"],[8938,23,8383,23],[8938,25,8383,25,"newValue"],[8938,33,8383,33],[8938,35,8383,35],[8939,6,8384,8],[8939,10,8384,12],[8939,11,8384,13,"localCache"],[8939,21,8384,23],[8939,22,8384,24,"key"],[8939,25,8384,27],[8939,26,8384,28],[8939,29,8384,31,"newValue"],[8939,37,8384,39],[8940,6,8385,8],[8940,12,8385,14,"listeners"],[8940,21,8385,23],[8940,24,8385,26],[8940,28,8385,30],[8940,29,8385,31,"listeners"],[8940,38,8385,40],[8940,39,8385,41,"key"],[8940,42,8385,44],[8940,43,8385,45],[8941,6,8386,8],[8941,10,8386,12,"listeners"],[8941,19,8386,21],[8941,21,8386,23],[8942,8,8387,12],[8942,13,8387,17],[8942,19,8387,23,"listener"],[8942,27,8387,31],[8942,31,8387,35,"Array"],[8942,36,8387,40],[8942,37,8387,41,"from"],[8942,41,8387,45],[8942,42,8387,46,"listeners"],[8942,51,8387,55],[8942,52,8387,56],[8942,54,8387,58],[8943,10,8388,16,"listener"],[8943,18,8388,24],[8943,19,8388,25,"newValue"],[8943,27,8388,33],[8943,28,8388,34],[8944,8,8389,12],[8945,6,8390,8],[8946,4,8391,4],[8947,4,8392,4,"startPolling"],[8947,16,8392,16,"startPolling"],[8947,17,8392,16],[8947,19,8392,19],[8948,6,8393,8],[8948,10,8393,12],[8948,11,8393,13,"stopPolling"],[8948,22,8393,24],[8948,23,8393,25],[8948,24,8393,26],[8949,6,8394,8],[8949,10,8394,12],[8949,11,8394,13,"pollTimer"],[8949,20,8394,22],[8949,23,8394,25,"setInterval"],[8949,34,8394,36],[8949,35,8394,37],[8949,47,8394,49],[8949,51,8394,53],[8949,52,8394,54,"_poll"],[8949,57,8394,59],[8949,58,8394,60],[8949,59,8394,61],[8949,61,8394,63,"_POLLING_INTERVAL_MS"],[8949,81,8394,83],[8949,82,8394,84],[8950,4,8395,4],[8951,4,8396,4,"stopPolling"],[8951,15,8396,15,"stopPolling"],[8951,16,8396,15],[8951,18,8396,18],[8952,6,8397,8],[8952,10,8397,12],[8952,14,8397,16],[8952,15,8397,17,"pollTimer"],[8952,24,8397,26],[8952,26,8397,28],[8953,8,8398,12,"clearInterval"],[8953,21,8398,25],[8953,22,8398,26],[8953,26,8398,30],[8953,27,8398,31,"pollTimer"],[8953,36,8398,40],[8953,37,8398,41],[8954,8,8399,12],[8954,12,8399,16],[8954,13,8399,17,"pollTimer"],[8954,22,8399,26],[8954,25,8399,29],[8954,29,8399,33],[8955,6,8400,8],[8956,4,8401,4],[8957,4,8402,4,"_addListener"],[8957,16,8402,16,"_addListener"],[8957,17,8402,17,"key"],[8957,20,8402,20],[8957,22,8402,22,"listener"],[8957,30,8402,30],[8957,32,8402,32],[8958,6,8403,8],[8958,10,8403,12,"Object"],[8958,16,8403,18],[8958,17,8403,19,"keys"],[8958,21,8403,23],[8958,22,8403,24],[8958,26,8403,28],[8958,27,8403,29,"listeners"],[8958,36,8403,38],[8958,37,8403,39],[8958,38,8403,40,"length"],[8958,44,8403,46],[8958,49,8403,51],[8958,50,8403,52],[8958,52,8403,54],[8959,8,8404,12],[8959,12,8404,16],[8959,13,8404,17,"startPolling"],[8959,25,8404,29],[8959,26,8404,30],[8959,27,8404,31],[8960,6,8405,8],[8961,6,8406,8],[8961,10,8406,12],[8961,11,8406,13],[8961,15,8406,17],[8961,16,8406,18,"listeners"],[8961,25,8406,27],[8961,26,8406,28,"key"],[8961,29,8406,31],[8961,30,8406,32],[8961,32,8406,34],[8962,8,8407,12],[8962,12,8407,16],[8962,13,8407,17,"listeners"],[8962,22,8407,26],[8962,23,8407,27,"key"],[8962,26,8407,30],[8962,27,8407,31],[8962,30,8407,34],[8962,34,8407,38,"Set"],[8962,37,8407,41],[8962,38,8407,42],[8962,39,8407,43],[8963,8,8408,12],[8964,8,8409,12],[8964,13,8409,17],[8964,17,8409,21],[8964,18,8409,22,"_get"],[8964,22,8409,26],[8964,23,8409,27,"key"],[8964,26,8409,30],[8964,27,8409,31],[8964,28,8409,32],[8964,29,8409,33],[8965,6,8410,8],[8966,6,8411,8],[8966,10,8411,12],[8966,11,8411,13,"listeners"],[8966,20,8411,22],[8966,21,8411,23,"key"],[8966,24,8411,26],[8966,25,8411,27],[8966,26,8411,28,"add"],[8966,29,8411,31],[8966,30,8411,32,"listener"],[8966,38,8411,40],[8966,39,8411,41],[8967,4,8412,4],[8968,4,8413,4,"_removeListener"],[8968,19,8413,19,"_removeListener"],[8968,20,8413,20,"key"],[8968,23,8413,23],[8968,25,8413,25,"listener"],[8968,33,8413,33],[8968,35,8413,35],[8969,6,8414,8],[8969,10,8414,12],[8969,14,8414,16],[8969,15,8414,17,"listeners"],[8969,24,8414,26],[8969,25,8414,27,"key"],[8969,28,8414,30],[8969,29,8414,31],[8969,31,8414,33],[8970,8,8415,12],[8970,12,8415,16],[8970,13,8415,17,"listeners"],[8970,22,8415,26],[8970,23,8415,27,"key"],[8970,26,8415,30],[8970,27,8415,31],[8970,28,8415,32,"delete"],[8970,34,8415,38],[8970,35,8415,39,"listener"],[8970,43,8415,47],[8970,44,8415,48],[8971,8,8416,12],[8971,12,8416,16],[8971,16,8416,20],[8971,17,8416,21,"listeners"],[8971,26,8416,30],[8971,27,8416,31,"key"],[8971,30,8416,34],[8971,31,8416,35],[8971,32,8416,36,"size"],[8971,36,8416,40],[8971,41,8416,45],[8971,42,8416,46],[8971,44,8416,48],[8972,10,8417,16],[8972,17,8417,23],[8972,21,8417,27],[8972,22,8417,28,"listeners"],[8972,31,8417,37],[8972,32,8417,38,"key"],[8972,35,8417,41],[8972,36,8417,42],[8973,8,8418,12],[8974,6,8419,8],[8975,6,8420,8],[8975,10,8420,12,"Object"],[8975,16,8420,18],[8975,17,8420,19,"keys"],[8975,21,8420,23],[8975,22,8420,24],[8975,26,8420,28],[8975,27,8420,29,"listeners"],[8975,36,8420,38],[8975,37,8420,39],[8975,38,8420,40,"length"],[8975,44,8420,46],[8975,49,8420,51],[8975,50,8420,52],[8975,52,8420,54],[8976,8,8421,12],[8976,12,8421,16],[8976,13,8421,17,"stopPolling"],[8976,24,8421,28],[8976,25,8421,29],[8976,26,8421,30],[8977,6,8422,8],[8978,4,8423,4],[8979,2,8424,0],[8980,2,8425,0,"IndexedDBLocalPersistence"],[8980,27,8425,25],[8980,28,8425,26,"type"],[8980,32,8425,30],[8980,35,8425,33],[8980,42,8425,40],[8981,2,8426,0],[8982,0,8427,0],[8983,0,8428,0],[8984,0,8429,0],[8985,0,8430,0],[8986,0,8431,0],[8987,2,8432,0],[8987,8,8432,6,"indexedDBLocalPersistence"],[8987,33,8432,31],[8987,36,8432,34,"IndexedDBLocalPersistence"],[8987,61,8432,59],[8989,2,8434,0],[8990,0,8435,0],[8991,0,8436,0],[8992,0,8437,0],[8993,0,8438,0],[8994,0,8439,0],[8995,0,8440,0],[8996,0,8441,0],[8997,0,8442,0],[8998,0,8443,0],[8999,0,8444,0],[9000,0,8445,0],[9001,0,8446,0],[9002,0,8447,0],[9003,0,8448,0],[9004,0,8449,0],[9005,2,8450,0],[9005,11,8450,9,"startSignInPhoneMfa"],[9005,30,8450,28,"startSignInPhoneMfa"],[9005,31,8450,29,"auth"],[9005,35,8450,33],[9005,37,8450,35,"request"],[9005,44,8450,42],[9005,46,8450,44],[9006,4,8451,4],[9006,11,8451,11,"_performApiRequest"],[9006,29,8451,29],[9006,30,8451,30,"auth"],[9006,34,8451,34],[9006,36,8451,36],[9006,42,8451,42],[9006,43,8451,43],[9006,66,8451,66],[9006,96,8451,96],[9006,97,8451,97],[9006,131,8451,131,"_addTidIfNecessary"],[9006,149,8451,149],[9006,150,8451,150,"auth"],[9006,154,8451,154],[9006,156,8451,156,"request"],[9006,163,8451,163],[9006,164,8451,164],[9006,165,8451,165],[9007,2,8452,0],[9008,2,8453,0],[9008,11,8453,9,"finalizeSignInPhoneMfa"],[9008,33,8453,31,"finalizeSignInPhoneMfa"],[9008,34,8453,32,"auth"],[9008,38,8453,36],[9008,40,8453,38,"request"],[9008,47,8453,45],[9008,49,8453,47],[9009,4,8454,4],[9009,11,8454,11,"_performApiRequest"],[9009,29,8454,29],[9009,30,8454,30,"auth"],[9009,34,8454,34],[9009,36,8454,36],[9009,42,8454,42],[9009,43,8454,43],[9009,66,8454,66],[9009,99,8454,99],[9009,100,8454,100],[9009,137,8454,137,"_addTidIfNecessary"],[9009,155,8454,155],[9009,156,8454,156,"auth"],[9009,160,8454,160],[9009,162,8454,162,"request"],[9009,169,8454,169],[9009,170,8454,170],[9009,171,8454,171],[9010,2,8455,0],[9011,2,8456,0],[9011,11,8456,9,"finalizeSignInTotpMfa"],[9011,32,8456,30,"finalizeSignInTotpMfa"],[9011,33,8456,31,"auth"],[9011,37,8456,35],[9011,39,8456,37,"request"],[9011,46,8456,44],[9011,48,8456,46],[9012,4,8457,4],[9012,11,8457,11,"_performApiRequest"],[9012,29,8457,29],[9012,30,8457,30,"auth"],[9012,34,8457,34],[9012,36,8457,36],[9012,42,8457,42],[9012,43,8457,43],[9012,66,8457,66],[9012,99,8457,99],[9012,100,8457,100],[9012,137,8457,137,"_addTidIfNecessary"],[9012,155,8457,155],[9012,156,8457,156,"auth"],[9012,160,8457,160],[9012,162,8457,162,"request"],[9012,169,8457,169],[9012,170,8457,170],[9012,171,8457,171],[9013,2,8458,0],[9015,2,8460,0],[9016,0,8461,0],[9017,0,8462,0],[9018,0,8463,0],[9019,0,8464,0],[9020,0,8465,0],[9021,0,8466,0],[9022,0,8467,0],[9023,0,8468,0],[9024,0,8469,0],[9025,0,8470,0],[9026,0,8471,0],[9027,0,8472,0],[9028,0,8473,0],[9029,0,8474,0],[9030,0,8475,0],[9031,2,8476,0],[9032,2,8477,0],[9033,2,8478,0],[9033,8,8478,6,"_JSLOAD_CALLBACK"],[9033,24,8478,22],[9033,27,8478,25,"_generateCallbackName"],[9033,48,8478,46],[9033,49,8478,47],[9033,54,8478,52],[9033,55,8478,53],[9034,2,8479,0],[9034,8,8479,6,"NETWORK_TIMEOUT_DELAY"],[9034,29,8479,27],[9034,32,8479,30],[9034,36,8479,34,"Delay"],[9034,41,8479,39],[9034,42,8479,40],[9034,47,8479,45],[9034,49,8479,47],[9034,54,8479,52],[9034,55,8479,53],[9035,2,8480,0],[9036,0,8481,0],[9037,0,8482,0],[9038,2,8483,0],[9038,8,8483,6,"ReCaptchaLoaderImpl"],[9038,27,8483,25],[9038,28,8483,26],[9039,4,8484,4,"constructor"],[9039,15,8484,15,"constructor"],[9039,16,8484,15],[9039,18,8484,18],[9040,6,8485,8],[9040,10,8485,12],[9040,11,8485,13,"hostLanguage"],[9040,23,8485,25],[9040,26,8485,28],[9040,28,8485,30],[9041,6,8486,8],[9041,10,8486,12],[9041,11,8486,13,"counter"],[9041,18,8486,20],[9041,21,8486,23],[9041,22,8486,24],[9042,6,8487,8],[9043,0,8488,0],[9044,0,8489,0],[9045,0,8490,0],[9046,0,8491,0],[9047,6,8492,8],[9047,10,8492,12],[9047,11,8492,13,"librarySeparatelyLoaded"],[9047,34,8492,36],[9047,37,8492,39],[9047,38,8492,40],[9047,39,8492,41,"_window"],[9047,46,8492,48],[9047,47,8492,49],[9047,48,8492,50],[9047,49,8492,51,"grecaptcha"],[9047,59,8492,61],[9047,61,8492,63,"render"],[9047,67,8492,69],[9048,4,8493,4],[9049,4,8494,4,"load"],[9049,8,8494,8,"load"],[9049,9,8494,9,"auth"],[9049,13,8494,13],[9049,15,8494,15,"hl"],[9049,17,8494,17],[9049,20,8494,20],[9049,22,8494,22],[9049,24,8494,24],[9050,6,8495,8,"_assert"],[9050,13,8495,15],[9050,14,8495,16,"isHostLanguageValid"],[9050,33,8495,35],[9050,34,8495,36,"hl"],[9050,36,8495,38],[9050,37,8495,39],[9050,39,8495,41,"auth"],[9050,43,8495,45],[9050,45,8495,47],[9050,61,8495,63],[9050,62,8495,64],[9050,96,8495,98],[9050,97,8495,99],[9051,6,8496,8],[9051,10,8496,12],[9051,14,8496,16],[9051,15,8496,17,"shouldResolveImmediately"],[9051,39,8496,41],[9051,40,8496,42,"hl"],[9051,42,8496,44],[9051,43,8496,45],[9051,47,8496,49,"isV2"],[9051,51,8496,53],[9051,52,8496,54,"_window"],[9051,59,8496,61],[9051,60,8496,62],[9051,61,8496,63],[9051,62,8496,64,"grecaptcha"],[9051,72,8496,74],[9051,73,8496,75],[9051,75,8496,77],[9052,8,8497,12],[9052,15,8497,19,"Promise"],[9052,22,8497,26],[9052,23,8497,27,"resolve"],[9052,30,8497,34],[9052,31,8497,35,"_window"],[9052,38,8497,42],[9052,39,8497,43],[9052,40,8497,44],[9052,41,8497,45,"grecaptcha"],[9052,51,8497,55],[9052,52,8497,56],[9053,6,8498,8],[9054,6,8499,8],[9054,13,8499,15],[9054,17,8499,19,"Promise"],[9054,24,8499,26],[9054,25,8499,27],[9054,26,8499,28,"resolve"],[9054,33,8499,35],[9054,35,8499,37,"reject"],[9054,41,8499,43],[9054,46,8499,48],[9055,8,8500,12],[9055,14,8500,18,"networkTimeout"],[9055,28,8500,32],[9055,31,8500,35,"_window"],[9055,38,8500,42],[9055,39,8500,43],[9055,40,8500,44],[9055,41,8500,45,"setTimeout"],[9055,51,8500,55],[9055,52,8500,56],[9055,58,8500,62],[9056,10,8501,16,"reject"],[9056,16,8501,22],[9056,17,8501,23,"_createError"],[9056,29,8501,35],[9056,30,8501,36,"auth"],[9056,34,8501,40],[9056,36,8501,42],[9056,60,8501,66],[9056,61,8501,67],[9056,103,8501,109],[9056,104,8501,110],[9056,105,8501,111],[9057,8,8502,12],[9057,9,8502,13],[9057,11,8502,15,"NETWORK_TIMEOUT_DELAY"],[9057,32,8502,36],[9057,33,8502,37,"get"],[9057,36,8502,40],[9057,37,8502,41],[9057,38,8502,42],[9057,39,8502,43],[9058,8,8503,12,"_window"],[9058,15,8503,19],[9058,16,8503,20],[9058,17,8503,21],[9058,18,8503,22,"_JSLOAD_CALLBACK"],[9058,34,8503,38],[9058,35,8503,39],[9058,38,8503,42],[9058,44,8503,48],[9059,10,8504,16,"_window"],[9059,17,8504,23],[9059,18,8504,24],[9059,19,8504,25],[9059,20,8504,26,"clearTimeout"],[9059,32,8504,38],[9059,33,8504,39,"networkTimeout"],[9059,47,8504,53],[9059,48,8504,54],[9060,10,8505,16],[9060,17,8505,23,"_window"],[9060,24,8505,30],[9060,25,8505,31],[9060,26,8505,32],[9060,27,8505,33,"_JSLOAD_CALLBACK"],[9060,43,8505,49],[9060,44,8505,50],[9061,10,8506,16],[9061,16,8506,22,"recaptcha"],[9061,25,8506,31],[9061,28,8506,34,"_window"],[9061,35,8506,41],[9061,36,8506,42],[9061,37,8506,43],[9061,38,8506,44,"grecaptcha"],[9061,48,8506,54],[9062,10,8507,16],[9062,14,8507,20],[9062,15,8507,21,"recaptcha"],[9062,24,8507,30],[9062,28,8507,34],[9062,29,8507,35,"isV2"],[9062,33,8507,39],[9062,34,8507,40,"recaptcha"],[9062,43,8507,49],[9062,44,8507,50],[9062,46,8507,52],[9063,12,8508,20,"reject"],[9063,18,8508,26],[9063,19,8508,27,"_createError"],[9063,31,8508,39],[9063,32,8508,40,"auth"],[9063,36,8508,44],[9063,38,8508,46],[9063,54,8508,62],[9063,55,8508,63],[9063,89,8508,97],[9063,90,8508,98],[9063,91,8508,99],[9064,12,8509,20],[9065,10,8510,16],[9066,10,8511,16],[9067,10,8512,16],[9068,10,8513,16],[9068,16,8513,22,"render"],[9068,22,8513,28],[9068,25,8513,31,"recaptcha"],[9068,34,8513,40],[9068,35,8513,41,"render"],[9068,41,8513,47],[9069,10,8514,16,"recaptcha"],[9069,19,8514,25],[9069,20,8514,26,"render"],[9069,26,8514,32],[9069,29,8514,35],[9069,30,8514,36,"container"],[9069,39,8514,45],[9069,41,8514,47,"params"],[9069,47,8514,53],[9069,52,8514,58],[9070,12,8515,20],[9070,18,8515,26,"widgetId"],[9070,26,8515,34],[9070,29,8515,37,"render"],[9070,35,8515,43],[9070,36,8515,44,"container"],[9070,45,8515,53],[9070,47,8515,55,"params"],[9070,53,8515,61],[9070,54,8515,62],[9071,12,8516,20],[9071,16,8516,24],[9071,17,8516,25,"counter"],[9071,24,8516,32],[9071,26,8516,34],[9072,12,8517,20],[9072,19,8517,27,"widgetId"],[9072,27,8517,35],[9073,10,8518,16],[9073,11,8518,17],[9074,10,8519,16],[9074,14,8519,20],[9074,15,8519,21,"hostLanguage"],[9074,27,8519,33],[9074,30,8519,36,"hl"],[9074,32,8519,38],[9075,10,8520,16,"resolve"],[9075,17,8520,23],[9075,18,8520,24,"recaptcha"],[9075,27,8520,33],[9075,28,8520,34],[9076,8,8521,12],[9076,9,8521,13],[9077,8,8522,12],[9077,14,8522,18,"url"],[9077,17,8522,21],[9077,20,8522,24],[9077,23,8522,27,"_recaptchaV2ScriptUrl"],[9077,44,8522,48],[9077,45,8522,49],[9077,46,8522,50],[9077,50,8522,54],[9077,54,8522,54,"querystring"],[9077,67,8522,65],[9077,68,8522,65,"querystring"],[9077,79,8522,65],[9077,81,8522,66],[9078,10,8523,16,"onload"],[9078,16,8523,22],[9078,18,8523,24,"_JSLOAD_CALLBACK"],[9078,34,8523,40],[9079,10,8524,16,"render"],[9079,16,8524,22],[9079,18,8524,24],[9079,28,8524,34],[9080,10,8525,16,"hl"],[9081,8,8526,12],[9081,9,8526,13],[9081,10,8526,14],[9081,12,8526,16],[9082,8,8527,12,"_loadJS"],[9082,15,8527,19],[9082,16,8527,20,"url"],[9082,19,8527,23],[9082,20,8527,24],[9082,21,8527,25,"catch"],[9082,26,8527,30],[9082,27,8527,31],[9082,33,8527,37],[9083,10,8528,16,"clearTimeout"],[9083,22,8528,28],[9083,23,8528,29,"networkTimeout"],[9083,37,8528,43],[9083,38,8528,44],[9084,10,8529,16,"reject"],[9084,16,8529,22],[9084,17,8529,23,"_createError"],[9084,29,8529,35],[9084,30,8529,36,"auth"],[9084,34,8529,40],[9084,36,8529,42],[9084,52,8529,58],[9084,53,8529,59],[9084,87,8529,93],[9084,88,8529,94],[9084,89,8529,95],[9085,8,8530,12],[9085,9,8530,13],[9085,10,8530,14],[9086,6,8531,8],[9086,7,8531,9],[9086,8,8531,10],[9087,4,8532,4],[9088,4,8533,4,"clearedOneInstance"],[9088,22,8533,22,"clearedOneInstance"],[9088,23,8533,22],[9088,25,8533,25],[9089,6,8534,8],[9089,10,8534,12],[9089,11,8534,13,"counter"],[9089,18,8534,20],[9089,20,8534,22],[9090,4,8535,4],[9091,4,8536,4,"shouldResolveImmediately"],[9091,28,8536,28,"shouldResolveImmediately"],[9091,29,8536,29,"hl"],[9091,31,8536,31],[9091,33,8536,33],[9092,6,8537,8],[9093,6,8538,8],[9094,6,8539,8],[9095,6,8540,8],[9096,6,8541,8],[9097,6,8542,8],[9098,6,8543,8],[9099,6,8544,8],[9099,13,8544,16],[9099,14,8544,17],[9099,15,8544,18,"_window"],[9099,22,8544,25],[9099,23,8544,26],[9099,24,8544,27],[9099,25,8544,28,"grecaptcha"],[9099,35,8544,38],[9099,37,8544,40,"render"],[9099,43,8544,46],[9099,48,8545,13,"hl"],[9099,50,8545,15],[9099,55,8545,20],[9099,59,8545,24],[9099,60,8545,25,"hostLanguage"],[9099,72,8545,37],[9099,76,8546,16],[9099,80,8546,20],[9099,81,8546,21,"counter"],[9099,88,8546,28],[9099,91,8546,31],[9099,92,8546,32],[9099,96,8547,16],[9099,100,8547,20],[9099,101,8547,21,"librarySeparatelyLoaded"],[9099,124,8547,44],[9099,125,8547,45],[9100,4,8548,4],[9101,2,8549,0],[9102,2,8550,0],[9102,11,8550,9,"isHostLanguageValid"],[9102,30,8550,28,"isHostLanguageValid"],[9102,31,8550,29,"hl"],[9102,33,8550,31],[9102,35,8550,33],[9103,4,8551,4],[9103,11,8551,11,"hl"],[9103,13,8551,13],[9103,14,8551,14,"length"],[9103,20,8551,20],[9103,24,8551,24],[9103,25,8551,25],[9103,29,8551,29],[9103,53,8551,53],[9103,54,8551,54,"test"],[9103,58,8551,58],[9103,59,8551,59,"hl"],[9103,61,8551,61],[9103,62,8551,62],[9104,2,8552,0],[9105,2,8553,0],[9105,8,8553,6,"MockReCaptchaLoaderImpl"],[9105,31,8553,29],[9105,32,8553,30],[9106,4,8554,4],[9106,10,8554,10,"load"],[9106,14,8554,14,"load"],[9106,15,8554,15,"auth"],[9106,19,8554,19],[9106,21,8554,21],[9107,6,8555,8],[9107,13,8555,15],[9107,17,8555,19,"MockReCaptcha"],[9107,30,8555,32],[9107,31,8555,33,"auth"],[9107,35,8555,37],[9107,36,8555,38],[9108,4,8556,4],[9109,4,8557,4,"clearedOneInstance"],[9109,22,8557,22,"clearedOneInstance"],[9109,23,8557,22],[9109,25,8557,25],[9109,26,8557,27],[9110,2,8558,0],[9112,2,8560,0],[9113,0,8561,0],[9114,0,8562,0],[9115,0,8563,0],[9116,0,8564,0],[9117,0,8565,0],[9118,0,8566,0],[9119,0,8567,0],[9120,0,8568,0],[9121,0,8569,0],[9122,0,8570,0],[9123,0,8571,0],[9124,0,8572,0],[9125,0,8573,0],[9126,0,8574,0],[9127,0,8575,0],[9128,2,8576,0],[9128,8,8576,6,"RECAPTCHA_VERIFIER_TYPE"],[9128,31,8576,29],[9128,34,8576,32],[9128,45,8576,43],[9129,2,8577,0],[9129,8,8577,6,"DEFAULT_PARAMS"],[9129,22,8577,20],[9129,25,8577,23],[9130,4,8578,4,"theme"],[9130,9,8578,9],[9130,11,8578,11],[9130,18,8578,18],[9131,4,8579,4,"type"],[9131,8,8579,8],[9131,10,8579,10],[9132,2,8580,0],[9132,3,8580,1],[9133,2,8581,0],[9134,0,8582,0],[9135,0,8583,0],[9136,0,8584,0],[9137,0,8585,0],[9138,0,8586,0],[9139,0,8587,0],[9140,0,8588,0],[9141,2,8589,0],[9141,8,8589,6,"RecaptchaVerifier"],[9141,25,8589,23],[9141,26,8589,24],[9142,4,8590,4],[9143,0,8591,0],[9144,0,8592,0],[9145,0,8593,0],[9146,0,8594,0],[9147,0,8595,0],[9148,0,8596,0],[9149,0,8597,0],[9150,0,8598,0],[9151,0,8599,0],[9152,0,8600,0],[9153,0,8601,0],[9154,0,8602,0],[9155,0,8603,0],[9156,0,8604,0],[9157,0,8605,0],[9158,0,8606,0],[9159,0,8607,0],[9160,0,8608,0],[9161,4,8609,4,"constructor"],[9161,15,8609,15,"constructor"],[9161,16,8609,16,"authExtern"],[9161,26,8609,26],[9161,28,8609,28,"containerOrId"],[9161,41,8609,41],[9161,43,8609,43,"parameters"],[9161,53,8609,53],[9161,56,8609,53,"Object"],[9161,62,8609,53],[9161,63,8609,53,"assign"],[9161,69,8609,53],[9161,74,8610,11,"DEFAULT_PARAMS"],[9161,88,8610,25],[9161,89,8611,5],[9161,91,8611,7],[9162,6,8612,8],[9162,10,8612,12],[9162,11,8612,13,"parameters"],[9162,21,8612,23],[9162,24,8612,26,"parameters"],[9162,34,8612,36],[9163,6,8613,8],[9164,0,8614,0],[9165,0,8615,0],[9166,0,8616,0],[9167,0,8617,0],[9168,0,8618,0],[9169,6,8619,8],[9169,10,8619,12],[9169,11,8619,13,"type"],[9169,15,8619,17],[9169,18,8619,20,"RECAPTCHA_VERIFIER_TYPE"],[9169,41,8619,43],[9170,6,8620,8],[9170,10,8620,12],[9170,11,8620,13,"destroyed"],[9170,20,8620,22],[9170,23,8620,25],[9170,28,8620,30],[9171,6,8621,8],[9171,10,8621,12],[9171,11,8621,13,"widgetId"],[9171,19,8621,21],[9171,22,8621,24],[9171,26,8621,28],[9172,6,8622,8],[9172,10,8622,12],[9172,11,8622,13,"tokenChangeListeners"],[9172,31,8622,33],[9172,34,8622,36],[9172,38,8622,40,"Set"],[9172,41,8622,43],[9172,42,8622,44],[9172,43,8622,45],[9173,6,8623,8],[9173,10,8623,12],[9173,11,8623,13,"renderPromise"],[9173,24,8623,26],[9173,27,8623,29],[9173,31,8623,33],[9174,6,8624,8],[9174,10,8624,12],[9174,11,8624,13,"recaptcha"],[9174,20,8624,22],[9174,23,8624,25],[9174,27,8624,29],[9175,6,8625,8],[9175,10,8625,12],[9175,11,8625,13,"auth"],[9175,15,8625,17],[9175,18,8625,20,"_castAuth"],[9175,27,8625,29],[9175,28,8625,30,"authExtern"],[9175,38,8625,40],[9175,39,8625,41],[9176,6,8626,8],[9176,10,8626,12],[9176,11,8626,13,"isInvisible"],[9176,22,8626,24],[9176,25,8626,27],[9176,29,8626,31],[9176,30,8626,32,"parameters"],[9176,40,8626,42],[9176,41,8626,43,"size"],[9176,45,8626,47],[9176,50,8626,52],[9176,61,8626,63],[9177,6,8627,8,"_assert"],[9177,13,8627,15],[9177,14,8627,16],[9177,21,8627,23,"document"],[9177,29,8627,31],[9177,34,8627,36],[9177,45,8627,47],[9177,47,8627,49],[9177,51,8627,53],[9177,52,8627,54,"auth"],[9177,56,8627,58],[9177,58,8627,60],[9177,103,8627,105],[9177,104,8627,106],[9177,147,8627,149],[9177,148,8627,150],[9178,6,8628,8],[9178,12,8628,14,"container"],[9178,21,8628,23],[9178,24,8628,26],[9178,31,8628,33,"containerOrId"],[9178,44,8628,46],[9178,49,8628,51],[9178,57,8628,59],[9178,60,8629,14,"document"],[9178,68,8629,22],[9178,69,8629,23,"getElementById"],[9178,83,8629,37],[9178,84,8629,38,"containerOrId"],[9178,97,8629,51],[9178,98,8629,52],[9178,101,8630,14,"containerOrId"],[9178,114,8630,27],[9179,6,8631,8,"_assert"],[9179,13,8631,15],[9179,14,8631,16,"container"],[9179,23,8631,25],[9179,25,8631,27],[9179,29,8631,31],[9179,30,8631,32,"auth"],[9179,34,8631,36],[9179,36,8631,38],[9179,52,8631,54],[9179,53,8631,55],[9179,87,8631,89],[9179,88,8631,90],[9180,6,8632,8],[9180,10,8632,12],[9180,11,8632,13,"container"],[9180,20,8632,22],[9180,23,8632,25,"container"],[9180,32,8632,34],[9181,6,8633,8],[9181,10,8633,12],[9181,11,8633,13,"parameters"],[9181,21,8633,23],[9181,22,8633,24,"callback"],[9181,30,8633,32],[9181,33,8633,35],[9181,37,8633,39],[9181,38,8633,40,"makeTokenCallback"],[9181,55,8633,57],[9181,56,8633,58],[9181,60,8633,62],[9181,61,8633,63,"parameters"],[9181,71,8633,73],[9181,72,8633,74,"callback"],[9181,80,8633,82],[9181,81,8633,83],[9182,6,8634,8],[9182,10,8634,12],[9182,11,8634,13,"_recaptchaLoader"],[9182,27,8634,29],[9182,30,8634,32],[9182,34,8634,36],[9182,35,8634,37,"auth"],[9182,39,8634,41],[9182,40,8634,42,"settings"],[9182,48,8634,50],[9182,49,8634,51,"appVerificationDisabledForTesting"],[9182,82,8634,84],[9182,85,8635,14],[9182,89,8635,18,"MockReCaptchaLoaderImpl"],[9182,112,8635,41],[9182,113,8635,42],[9182,114,8635,43],[9182,117,8636,14],[9182,121,8636,18,"ReCaptchaLoaderImpl"],[9182,140,8636,37],[9182,141,8636,38],[9182,142,8636,39],[9183,6,8637,8],[9183,10,8637,12],[9183,11,8637,13,"validateStartingState"],[9183,32,8637,34],[9183,33,8637,35],[9183,34,8637,36],[9184,6,8638,8],[9185,4,8639,4],[9186,4,8640,4],[9187,0,8641,0],[9188,0,8642,0],[9189,0,8643,0],[9190,0,8644,0],[9191,4,8645,4],[9191,10,8645,10,"verify"],[9191,16,8645,16,"verify"],[9191,17,8645,16],[9191,19,8645,19],[9192,6,8646,8],[9192,10,8646,12],[9192,11,8646,13,"assertNotDestroyed"],[9192,29,8646,31],[9192,30,8646,32],[9192,31,8646,33],[9193,6,8647,8],[9193,12,8647,14,"id"],[9193,14,8647,16],[9193,17,8647,19],[9193,23,8647,25],[9193,27,8647,29],[9193,28,8647,30,"render"],[9193,34,8647,36],[9193,35,8647,37],[9193,36,8647,38],[9194,6,8648,8],[9194,12,8648,14,"recaptcha"],[9194,21,8648,23],[9194,24,8648,26],[9194,28,8648,30],[9194,29,8648,31,"getAssertedRecaptcha"],[9194,49,8648,51],[9194,50,8648,52],[9194,51,8648,53],[9195,6,8649,8],[9195,12,8649,14,"response"],[9195,20,8649,22],[9195,23,8649,25,"recaptcha"],[9195,32,8649,34],[9195,33,8649,35,"getResponse"],[9195,44,8649,46],[9195,45,8649,47,"id"],[9195,47,8649,49],[9195,48,8649,50],[9196,6,8650,8],[9196,10,8650,12,"response"],[9196,18,8650,20],[9196,20,8650,22],[9197,8,8651,12],[9197,15,8651,19,"response"],[9197,23,8651,27],[9198,6,8652,8],[9199,6,8653,8],[9199,13,8653,15],[9199,17,8653,19,"Promise"],[9199,24,8653,26],[9199,25,8653,27,"resolve"],[9199,32,8653,34],[9199,36,8653,38],[9200,8,8654,12],[9200,14,8654,18,"tokenChange"],[9200,25,8654,29],[9200,28,8654,33,"token"],[9200,33,8654,38],[9200,37,8654,43],[9201,10,8655,16],[9201,14,8655,20],[9201,15,8655,21,"token"],[9201,20,8655,26],[9201,22,8655,28],[9202,12,8656,20],[9202,19,8656,27],[9202,20,8656,28],[9203,10,8657,16],[9204,10,8658,16],[9204,14,8658,20],[9204,15,8658,21,"tokenChangeListeners"],[9204,35,8658,41],[9204,36,8658,42,"delete"],[9204,42,8658,48],[9204,43,8658,49,"tokenChange"],[9204,54,8658,60],[9204,55,8658,61],[9205,10,8659,16,"resolve"],[9205,17,8659,23],[9205,18,8659,24,"token"],[9205,23,8659,29],[9205,24,8659,30],[9206,8,8660,12],[9206,9,8660,13],[9207,8,8661,12],[9207,12,8661,16],[9207,13,8661,17,"tokenChangeListeners"],[9207,33,8661,37],[9207,34,8661,38,"add"],[9207,37,8661,41],[9207,38,8661,42,"tokenChange"],[9207,49,8661,53],[9207,50,8661,54],[9208,8,8662,12],[9208,12,8662,16],[9208,16,8662,20],[9208,17,8662,21,"isInvisible"],[9208,28,8662,32],[9208,30,8662,34],[9209,10,8663,16,"recaptcha"],[9209,19,8663,25],[9209,20,8663,26,"execute"],[9209,27,8663,33],[9209,28,8663,34,"id"],[9209,30,8663,36],[9209,31,8663,37],[9210,8,8664,12],[9211,6,8665,8],[9211,7,8665,9],[9211,8,8665,10],[9212,4,8666,4],[9213,4,8667,4],[9214,0,8668,0],[9215,0,8669,0],[9216,0,8670,0],[9217,0,8671,0],[9218,4,8672,4,"render"],[9218,10,8672,10,"render"],[9218,11,8672,10],[9218,13,8672,13],[9219,6,8673,8],[9219,10,8673,12],[9220,8,8674,12],[9220,12,8674,16],[9220,13,8674,17,"assertNotDestroyed"],[9220,31,8674,35],[9220,32,8674,36],[9220,33,8674,37],[9221,6,8675,8],[9221,7,8675,9],[9221,8,8676,8],[9221,15,8676,15,"e"],[9221,16,8676,16],[9221,18,8676,18],[9222,8,8677,12],[9223,8,8678,12],[9224,8,8679,12],[9225,8,8680,12],[9225,15,8680,19,"Promise"],[9225,22,8680,26],[9225,23,8680,27,"reject"],[9225,29,8680,33],[9225,30,8680,34,"e"],[9225,31,8680,35],[9225,32,8680,36],[9226,6,8681,8],[9227,6,8682,8],[9227,10,8682,12],[9227,14,8682,16],[9227,15,8682,17,"renderPromise"],[9227,28,8682,30],[9227,30,8682,32],[9228,8,8683,12],[9228,15,8683,19],[9228,19,8683,23],[9228,20,8683,24,"renderPromise"],[9228,33,8683,37],[9229,6,8684,8],[9230,6,8685,8],[9230,10,8685,12],[9230,11,8685,13,"renderPromise"],[9230,24,8685,26],[9230,27,8685,29],[9230,31,8685,33],[9230,32,8685,34,"makeRenderPromise"],[9230,49,8685,51],[9230,50,8685,52],[9230,51,8685,53],[9230,52,8685,54,"catch"],[9230,57,8685,59],[9230,58,8685,60,"e"],[9230,59,8685,61],[9230,63,8685,65],[9231,8,8686,12],[9231,12,8686,16],[9231,13,8686,17,"renderPromise"],[9231,26,8686,30],[9231,29,8686,33],[9231,33,8686,37],[9232,8,8687,12],[9232,14,8687,18,"e"],[9232,15,8687,19],[9233,6,8688,8],[9233,7,8688,9],[9233,8,8688,10],[9234,6,8689,8],[9234,13,8689,15],[9234,17,8689,19],[9234,18,8689,20,"renderPromise"],[9234,31,8689,33],[9235,4,8690,4],[9236,4,8691,4],[9237,4,8692,4,"_reset"],[9237,10,8692,10,"_reset"],[9237,11,8692,10],[9237,13,8692,13],[9238,6,8693,8],[9238,10,8693,12],[9238,11,8693,13,"assertNotDestroyed"],[9238,29,8693,31],[9238,30,8693,32],[9238,31,8693,33],[9239,6,8694,8],[9239,10,8694,12],[9239,14,8694,16],[9239,15,8694,17,"widgetId"],[9239,23,8694,25],[9239,28,8694,30],[9239,32,8694,34],[9239,34,8694,36],[9240,8,8695,12],[9240,12,8695,16],[9240,13,8695,17,"getAssertedRecaptcha"],[9240,33,8695,37],[9240,34,8695,38],[9240,35,8695,39],[9240,36,8695,40,"reset"],[9240,41,8695,45],[9240,42,8695,46],[9240,46,8695,50],[9240,47,8695,51,"widgetId"],[9240,55,8695,59],[9240,56,8695,60],[9241,6,8696,8],[9242,4,8697,4],[9243,4,8698,4],[9244,0,8699,0],[9245,0,8700,0],[9246,4,8701,4,"clear"],[9246,9,8701,9,"clear"],[9246,10,8701,9],[9246,12,8701,12],[9247,6,8702,8],[9247,10,8702,12],[9247,11,8702,13,"assertNotDestroyed"],[9247,29,8702,31],[9247,30,8702,32],[9247,31,8702,33],[9248,6,8703,8],[9248,10,8703,12],[9248,11,8703,13,"destroyed"],[9248,20,8703,22],[9248,23,8703,25],[9248,27,8703,29],[9249,6,8704,8],[9249,10,8704,12],[9249,11,8704,13,"_recaptchaLoader"],[9249,27,8704,29],[9249,28,8704,30,"clearedOneInstance"],[9249,46,8704,48],[9249,47,8704,49],[9249,48,8704,50],[9250,6,8705,8],[9250,10,8705,12],[9250,11,8705,13],[9250,15,8705,17],[9250,16,8705,18,"isInvisible"],[9250,27,8705,29],[9250,29,8705,31],[9251,8,8706,12],[9251,12,8706,16],[9251,13,8706,17,"container"],[9251,22,8706,26],[9251,23,8706,27,"childNodes"],[9251,33,8706,37],[9251,34,8706,38,"forEach"],[9251,41,8706,45],[9251,42,8706,46,"node"],[9251,46,8706,50],[9251,50,8706,54],[9252,10,8707,16],[9252,14,8707,20],[9252,15,8707,21,"container"],[9252,24,8707,30],[9252,25,8707,31,"removeChild"],[9252,36,8707,42],[9252,37,8707,43,"node"],[9252,41,8707,47],[9252,42,8707,48],[9253,8,8708,12],[9253,9,8708,13],[9253,10,8708,14],[9254,6,8709,8],[9255,4,8710,4],[9256,4,8711,4,"validateStartingState"],[9256,25,8711,25,"validateStartingState"],[9256,26,8711,25],[9256,28,8711,28],[9257,6,8712,8,"_assert"],[9257,13,8712,15],[9257,14,8712,16],[9257,15,8712,17],[9257,19,8712,21],[9257,20,8712,22,"parameters"],[9257,30,8712,32],[9257,31,8712,33,"sitekey"],[9257,38,8712,40],[9257,40,8712,42],[9257,44,8712,46],[9257,45,8712,47,"auth"],[9257,49,8712,51],[9257,51,8712,53],[9257,67,8712,69],[9257,68,8712,70],[9257,102,8712,104],[9257,103,8712,105],[9258,6,8713,8,"_assert"],[9258,13,8713,15],[9258,14,8713,16],[9258,18,8713,20],[9258,19,8713,21,"isInvisible"],[9258,30,8713,32],[9258,34,8713,36],[9258,35,8713,37],[9258,39,8713,41],[9258,40,8713,42,"container"],[9258,49,8713,51],[9258,50,8713,52,"hasChildNodes"],[9258,63,8713,65],[9258,64,8713,66],[9258,65,8713,67],[9258,67,8713,69],[9258,71,8713,73],[9258,72,8713,74,"auth"],[9258,76,8713,78],[9258,78,8713,80],[9258,94,8713,96],[9258,95,8713,97],[9258,129,8713,131],[9258,130,8713,132],[9259,6,8714,8,"_assert"],[9259,13,8714,15],[9259,14,8714,16],[9259,21,8714,23,"document"],[9259,29,8714,31],[9259,34,8714,36],[9259,45,8714,47],[9259,47,8714,49],[9259,51,8714,53],[9259,52,8714,54,"auth"],[9259,56,8714,58],[9259,58,8714,60],[9259,103,8714,105],[9259,104,8714,106],[9259,147,8714,149],[9259,148,8714,150],[9260,4,8715,4],[9261,4,8716,4,"makeTokenCallback"],[9261,21,8716,21,"makeTokenCallback"],[9261,22,8716,22,"existing"],[9261,30,8716,30],[9261,32,8716,32],[9262,6,8717,8],[9262,13,8717,15,"token"],[9262,18,8717,20],[9262,22,8717,24],[9263,8,8718,12],[9263,12,8718,16],[9263,13,8718,17,"tokenChangeListeners"],[9263,33,8718,37],[9263,34,8718,38,"forEach"],[9263,41,8718,45],[9263,42,8718,46,"listener"],[9263,50,8718,54],[9263,54,8718,58,"listener"],[9263,62,8718,66],[9263,63,8718,67,"token"],[9263,68,8718,72],[9263,69,8718,73],[9263,70,8718,74],[9264,8,8719,12],[9264,12,8719,16],[9264,19,8719,23,"existing"],[9264,27,8719,31],[9264,32,8719,36],[9264,42,8719,46],[9264,44,8719,48],[9265,10,8720,16,"existing"],[9265,18,8720,24],[9265,19,8720,25,"token"],[9265,24,8720,30],[9265,25,8720,31],[9266,8,8721,12],[9266,9,8721,13],[9266,15,8722,17],[9266,19,8722,21],[9266,26,8722,28,"existing"],[9266,34,8722,36],[9266,39,8722,41],[9266,47,8722,49],[9266,49,8722,51],[9267,10,8723,16],[9267,16,8723,22,"globalFunc"],[9267,26,8723,32],[9267,29,8723,35,"_window"],[9267,36,8723,42],[9267,37,8723,43],[9267,38,8723,44],[9267,39,8723,45,"existing"],[9267,47,8723,53],[9267,48,8723,54],[9268,10,8724,16],[9268,14,8724,20],[9268,21,8724,27,"globalFunc"],[9268,31,8724,37],[9268,36,8724,42],[9268,46,8724,52],[9268,48,8724,54],[9269,12,8725,20,"globalFunc"],[9269,22,8725,30],[9269,23,8725,31,"token"],[9269,28,8725,36],[9269,29,8725,37],[9270,10,8726,16],[9271,8,8727,12],[9272,6,8728,8],[9272,7,8728,9],[9273,4,8729,4],[9274,4,8730,4,"assertNotDestroyed"],[9274,22,8730,22,"assertNotDestroyed"],[9274,23,8730,22],[9274,25,8730,25],[9275,6,8731,8,"_assert"],[9275,13,8731,15],[9275,14,8731,16],[9275,15,8731,17],[9275,19,8731,21],[9275,20,8731,22,"destroyed"],[9275,29,8731,31],[9275,31,8731,33],[9275,35,8731,37],[9275,36,8731,38,"auth"],[9275,40,8731,42],[9275,42,8731,44],[9275,58,8731,60],[9275,59,8731,61],[9275,93,8731,95],[9275,94,8731,96],[9276,4,8732,4],[9277,4,8733,4],[9277,10,8733,10,"makeRenderPromise"],[9277,27,8733,27,"makeRenderPromise"],[9277,28,8733,27],[9277,30,8733,30],[9278,6,8734,8],[9278,12,8734,14],[9278,16,8734,18],[9278,17,8734,19,"init"],[9278,21,8734,23],[9278,22,8734,24],[9278,23,8734,25],[9279,6,8735,8],[9279,10,8735,12],[9279,11,8735,13],[9279,15,8735,17],[9279,16,8735,18,"widgetId"],[9279,24,8735,26],[9279,26,8735,28],[9280,8,8736,12],[9280,12,8736,16,"container"],[9280,21,8736,25],[9280,24,8736,28],[9280,28,8736,32],[9280,29,8736,33,"container"],[9280,38,8736,42],[9281,8,8737,12],[9281,12,8737,16],[9281,13,8737,17],[9281,17,8737,21],[9281,18,8737,22,"isInvisible"],[9281,29,8737,33],[9281,31,8737,35],[9282,10,8738,16],[9282,16,8738,22,"guaranteedEmpty"],[9282,31,8738,37],[9282,34,8738,40,"document"],[9282,42,8738,48],[9282,43,8738,49,"createElement"],[9282,56,8738,62],[9282,57,8738,63],[9282,62,8738,68],[9282,63,8738,69],[9283,10,8739,16,"container"],[9283,19,8739,25],[9283,20,8739,26,"appendChild"],[9283,31,8739,37],[9283,32,8739,38,"guaranteedEmpty"],[9283,47,8739,53],[9283,48,8739,54],[9284,10,8740,16,"container"],[9284,19,8740,25],[9284,22,8740,28,"guaranteedEmpty"],[9284,37,8740,43],[9285,8,8741,12],[9286,8,8742,12],[9286,12,8742,16],[9286,13,8742,17,"widgetId"],[9286,21,8742,25],[9286,24,8742,28],[9286,28,8742,32],[9286,29,8742,33,"getAssertedRecaptcha"],[9286,49,8742,53],[9286,50,8742,54],[9286,51,8742,55],[9286,52,8742,56,"render"],[9286,58,8742,62],[9286,59,8742,63,"container"],[9286,68,8742,72],[9286,70,8742,74],[9286,74,8742,78],[9286,75,8742,79,"parameters"],[9286,85,8742,89],[9286,86,8742,90],[9287,6,8743,8],[9288,6,8744,8],[9288,13,8744,15],[9288,17,8744,19],[9288,18,8744,20,"widgetId"],[9288,26,8744,28],[9289,4,8745,4],[9290,4,8746,4],[9290,10,8746,10,"init"],[9290,14,8746,14,"init"],[9290,15,8746,14],[9290,17,8746,17],[9291,6,8747,8,"_assert"],[9291,13,8747,15],[9291,14,8747,16,"_isHttpOrHttps"],[9291,28,8747,30],[9291,29,8747,31],[9291,30,8747,32],[9291,34,8747,36],[9291,35,8747,37,"_isWorker"],[9291,44,8747,46],[9291,45,8747,47],[9291,46,8747,48],[9291,48,8747,50],[9291,52,8747,54],[9291,53,8747,55,"auth"],[9291,57,8747,59],[9291,59,8747,61],[9291,75,8747,77],[9291,76,8747,78],[9291,110,8747,112],[9291,111,8747,113],[9292,6,8748,8],[9292,12,8748,14,"domReady"],[9292,20,8748,22],[9292,21,8748,23],[9292,22,8748,24],[9293,6,8749,8],[9293,10,8749,12],[9293,11,8749,13,"recaptcha"],[9293,20,8749,22],[9293,23,8749,25],[9293,29,8749,31],[9293,33,8749,35],[9293,34,8749,36,"_recaptchaLoader"],[9293,50,8749,52],[9293,51,8749,53,"load"],[9293,55,8749,57],[9293,56,8749,58],[9293,60,8749,62],[9293,61,8749,63,"auth"],[9293,65,8749,67],[9293,67,8749,69],[9293,71,8749,73],[9293,72,8749,74,"auth"],[9293,76,8749,78],[9293,77,8749,79,"languageCode"],[9293,89,8749,91],[9293,93,8749,95,"undefined"],[9293,102,8749,104],[9293,103,8749,105],[9294,6,8750,8],[9294,12,8750,14,"siteKey"],[9294,19,8750,21],[9294,22,8750,24],[9294,28,8750,30,"getRecaptchaParams"],[9294,46,8750,48],[9294,47,8750,49],[9294,51,8750,53],[9294,52,8750,54,"auth"],[9294,56,8750,58],[9294,57,8750,59],[9295,6,8751,8,"_assert"],[9295,13,8751,15],[9295,14,8751,16,"siteKey"],[9295,21,8751,23],[9295,23,8751,25],[9295,27,8751,29],[9295,28,8751,30,"auth"],[9295,32,8751,34],[9295,34,8751,36],[9295,50,8751,52],[9295,51,8751,53],[9295,85,8751,87],[9295,86,8751,88],[9296,6,8752,8],[9296,10,8752,12],[9296,11,8752,13,"parameters"],[9296,21,8752,23],[9296,22,8752,24,"sitekey"],[9296,29,8752,31],[9296,32,8752,34,"siteKey"],[9296,39,8752,41],[9297,4,8753,4],[9298,4,8754,4,"getAssertedRecaptcha"],[9298,24,8754,24,"getAssertedRecaptcha"],[9298,25,8754,24],[9298,27,8754,27],[9299,6,8755,8,"_assert"],[9299,13,8755,15],[9299,14,8755,16],[9299,18,8755,20],[9299,19,8755,21,"recaptcha"],[9299,28,8755,30],[9299,30,8755,32],[9299,34,8755,36],[9299,35,8755,37,"auth"],[9299,39,8755,41],[9299,41,8755,43],[9299,57,8755,59],[9299,58,8755,60],[9299,92,8755,94],[9299,93,8755,95],[9300,6,8756,8],[9300,13,8756,15],[9300,17,8756,19],[9300,18,8756,20,"recaptcha"],[9300,27,8756,29],[9301,4,8757,4],[9302,2,8758,0],[9303,2,8759,0],[9303,11,8759,9,"domReady"],[9303,19,8759,17,"domReady"],[9303,20,8759,17],[9303,22,8759,20],[9304,4,8760,4],[9304,8,8760,8,"resolver"],[9304,16,8760,16],[9304,19,8760,19],[9304,23,8760,23],[9305,4,8761,4],[9305,11,8761,11],[9305,15,8761,15,"Promise"],[9305,22,8761,22],[9305,23,8761,23,"resolve"],[9305,30,8761,30],[9305,34,8761,34],[9306,6,8762,8],[9306,10,8762,12,"document"],[9306,18,8762,20],[9306,19,8762,21,"readyState"],[9306,29,8762,31],[9306,34,8762,36],[9306,44,8762,46],[9306,46,8762,48],[9307,8,8763,12,"resolve"],[9307,15,8763,19],[9307,16,8763,20],[9307,17,8763,21],[9308,8,8764,12],[9309,6,8765,8],[9310,6,8766,8],[9311,6,8767,8],[9312,6,8768,8],[9313,6,8769,8,"resolver"],[9313,14,8769,16],[9313,17,8769,19,"resolver"],[9313,18,8769,19],[9313,23,8769,25,"resolve"],[9313,30,8769,32],[9313,31,8769,33],[9313,32,8769,34],[9314,6,8770,8,"window"],[9314,12,8770,14],[9314,13,8770,15,"addEventListener"],[9314,29,8770,31],[9314,30,8770,32],[9314,36,8770,38],[9314,38,8770,40,"resolver"],[9314,46,8770,48],[9314,47,8770,49],[9315,4,8771,4],[9315,5,8771,5],[9315,6,8771,6],[9315,7,8771,7,"catch"],[9315,12,8771,12],[9315,13,8771,13,"e"],[9315,14,8771,14],[9315,18,8771,18],[9316,6,8772,8],[9316,10,8772,12,"resolver"],[9316,18,8772,20],[9316,20,8772,22],[9317,8,8773,12,"window"],[9317,14,8773,18],[9317,15,8773,19,"removeEventListener"],[9317,34,8773,38],[9317,35,8773,39],[9317,41,8773,45],[9317,43,8773,47,"resolver"],[9317,51,8773,55],[9317,52,8773,56],[9318,6,8774,8],[9319,6,8775,8],[9319,12,8775,14,"e"],[9319,13,8775,15],[9320,4,8776,4],[9320,5,8776,5],[9320,6,8776,6],[9321,2,8777,0],[9323,2,8779,0],[9324,0,8780,0],[9325,0,8781,0],[9326,0,8782,0],[9327,0,8783,0],[9328,0,8784,0],[9329,0,8785,0],[9330,0,8786,0],[9331,0,8787,0],[9332,0,8788,0],[9333,0,8789,0],[9334,0,8790,0],[9335,0,8791,0],[9336,0,8792,0],[9337,0,8793,0],[9338,0,8794,0],[9339,2,8795,0],[9339,8,8795,6,"ConfirmationResultImpl"],[9339,30,8795,28],[9339,31,8795,29],[9340,4,8796,4,"constructor"],[9340,15,8796,15,"constructor"],[9340,16,8796,16,"verificationId"],[9340,30,8796,30],[9340,32,8796,32,"onConfirmation"],[9340,46,8796,46],[9340,48,8796,48],[9341,6,8797,8],[9341,10,8797,12],[9341,11,8797,13,"verificationId"],[9341,25,8797,27],[9341,28,8797,30,"verificationId"],[9341,42,8797,44],[9342,6,8798,8],[9342,10,8798,12],[9342,11,8798,13,"onConfirmation"],[9342,25,8798,27],[9342,28,8798,30,"onConfirmation"],[9342,42,8798,44],[9343,4,8799,4],[9344,4,8800,4,"confirm"],[9344,11,8800,11,"confirm"],[9344,12,8800,12,"verificationCode"],[9344,28,8800,28],[9344,30,8800,30],[9345,6,8801,8],[9345,12,8801,14,"authCredential"],[9345,26,8801,28],[9345,29,8801,31,"PhoneAuthCredential"],[9345,48,8801,50],[9345,49,8801,51,"_fromVerification"],[9345,66,8801,68],[9345,67,8801,69],[9345,71,8801,73],[9345,72,8801,74,"verificationId"],[9345,86,8801,88],[9345,88,8801,90,"verificationCode"],[9345,104,8801,106],[9345,105,8801,107],[9346,6,8802,8],[9346,13,8802,15],[9346,17,8802,19],[9346,18,8802,20,"onConfirmation"],[9346,32,8802,34],[9346,33,8802,35,"authCredential"],[9346,47,8802,49],[9346,48,8802,50],[9347,4,8803,4],[9348,2,8804,0],[9349,2,8805,0],[9350,0,8806,0],[9351,0,8807,0],[9352,0,8808,0],[9353,0,8809,0],[9354,0,8810,0],[9355,0,8811,0],[9356,0,8812,0],[9357,0,8813,0],[9358,0,8814,0],[9359,0,8815,0],[9360,0,8816,0],[9361,0,8817,0],[9362,0,8818,0],[9363,0,8819,0],[9364,0,8820,0],[9365,0,8821,0],[9366,0,8822,0],[9367,0,8823,0],[9368,0,8824,0],[9369,0,8825,0],[9370,0,8826,0],[9371,0,8827,0],[9372,0,8828,0],[9373,0,8829,0],[9374,0,8830,0],[9375,0,8831,0],[9376,0,8832,0],[9377,0,8833,0],[9378,0,8834,0],[9379,0,8835,0],[9380,0,8836,0],[9381,0,8837,0],[9382,0,8838,0],[9383,0,8839,0],[9384,0,8840,0],[9385,2,8841,0],[9385,17,8841,15,"signInWithPhoneNumber"],[9385,38,8841,36,"signInWithPhoneNumber"],[9385,39,8841,37,"auth"],[9385,43,8841,41],[9385,45,8841,43,"phoneNumber"],[9385,56,8841,54],[9385,58,8841,56,"appVerifier"],[9385,69,8841,67],[9385,71,8841,69],[9386,4,8842,4],[9386,8,8842,8],[9386,12,8842,8,"_isFirebaseServerApp"],[9386,24,8842,28],[9386,25,8842,28,"_isFirebaseServerApp"],[9386,45,8842,28],[9386,47,8842,29,"auth"],[9386,51,8842,33],[9386,52,8842,34,"app"],[9386,55,8842,37],[9386,56,8842,38],[9386,58,8842,40],[9387,6,8843,8],[9387,13,8843,15,"Promise"],[9387,20,8843,22],[9387,21,8843,23,"reject"],[9387,27,8843,29],[9387,28,8843,30,"_serverAppCurrentUserOperationNotSupportedError"],[9387,75,8843,77],[9387,76,8843,78,"auth"],[9387,80,8843,82],[9387,81,8843,83],[9387,82,8843,84],[9388,4,8844,4],[9389,4,8845,4],[9389,10,8845,10,"authInternal"],[9389,22,8845,22],[9389,25,8845,25,"_castAuth"],[9389,34,8845,34],[9389,35,8845,35,"auth"],[9389,39,8845,39],[9389,40,8845,40],[9390,4,8846,4],[9390,10,8846,10,"verificationId"],[9390,24,8846,24],[9390,27,8846,27],[9390,33,8846,33,"_verifyPhoneNumber"],[9390,51,8846,51],[9390,52,8846,52,"authInternal"],[9390,64,8846,64],[9390,66,8846,66,"phoneNumber"],[9390,77,8846,77],[9390,79,8846,79],[9390,83,8846,79,"getModularInstance"],[9390,96,8846,97],[9390,97,8846,97,"getModularInstance"],[9390,115,8846,97],[9390,117,8846,98,"appVerifier"],[9390,128,8846,109],[9390,129,8846,110],[9390,130,8846,111],[9391,4,8847,4],[9391,11,8847,11],[9391,15,8847,15,"ConfirmationResultImpl"],[9391,37,8847,37],[9391,38,8847,38,"verificationId"],[9391,52,8847,52],[9391,54,8847,54,"cred"],[9391,58,8847,58],[9391,62,8847,62,"signInWithCredential"],[9391,82,8847,82],[9391,83,8847,83,"authInternal"],[9391,95,8847,95],[9391,97,8847,97,"cred"],[9391,101,8847,101],[9391,102,8847,102],[9391,103,8847,103],[9392,2,8848,0],[9393,2,8849,0],[9394,0,8850,0],[9395,0,8851,0],[9396,0,8852,0],[9397,0,8853,0],[9398,0,8854,0],[9399,0,8855,0],[9400,0,8856,0],[9401,0,8857,0],[9402,0,8858,0],[9403,0,8859,0],[9404,0,8860,0],[9405,2,8861,0],[9405,17,8861,15,"linkWithPhoneNumber"],[9405,36,8861,34,"linkWithPhoneNumber"],[9405,37,8861,35,"user"],[9405,41,8861,39],[9405,43,8861,41,"phoneNumber"],[9405,54,8861,52],[9405,56,8861,54,"appVerifier"],[9405,67,8861,65],[9405,69,8861,67],[9406,4,8862,4],[9406,10,8862,10,"userInternal"],[9406,22,8862,22],[9406,25,8862,25],[9406,29,8862,25,"getModularInstance"],[9406,42,8862,43],[9406,43,8862,43,"getModularInstance"],[9406,61,8862,43],[9406,63,8862,44,"user"],[9406,67,8862,48],[9406,68,8862,49],[9407,4,8863,4],[9407,10,8863,10,"_assertLinkedStatus"],[9407,29,8863,29],[9407,30,8863,30],[9407,35,8863,35],[9407,37,8863,37,"userInternal"],[9407,49,8863,49],[9407,51,8863,51],[9407,58,8863,58],[9407,59,8863,59],[9407,81,8863,81],[9407,82,8863,82],[9408,4,8864,4],[9408,10,8864,10,"verificationId"],[9408,24,8864,24],[9408,27,8864,27],[9408,33,8864,33,"_verifyPhoneNumber"],[9408,51,8864,51],[9408,52,8864,52,"userInternal"],[9408,64,8864,64],[9408,65,8864,65,"auth"],[9408,69,8864,69],[9408,71,8864,71,"phoneNumber"],[9408,82,8864,82],[9408,84,8864,84],[9408,88,8864,84,"getModularInstance"],[9408,101,8864,102],[9408,102,8864,102,"getModularInstance"],[9408,120,8864,102],[9408,122,8864,103,"appVerifier"],[9408,133,8864,114],[9408,134,8864,115],[9408,135,8864,116],[9409,4,8865,4],[9409,11,8865,11],[9409,15,8865,15,"ConfirmationResultImpl"],[9409,37,8865,37],[9409,38,8865,38,"verificationId"],[9409,52,8865,52],[9409,54,8865,54,"cred"],[9409,58,8865,58],[9409,62,8865,62,"linkWithCredential"],[9409,80,8865,80],[9409,81,8865,81,"userInternal"],[9409,93,8865,93],[9409,95,8865,95,"cred"],[9409,99,8865,99],[9409,100,8865,100],[9409,101,8865,101],[9410,2,8866,0],[9411,2,8867,0],[9412,0,8868,0],[9413,0,8869,0],[9414,0,8870,0],[9415,0,8871,0],[9416,0,8872,0],[9417,0,8873,0],[9418,0,8874,0],[9419,0,8875,0],[9420,0,8876,0],[9421,0,8877,0],[9422,0,8878,0],[9423,0,8879,0],[9424,0,8880,0],[9425,0,8881,0],[9426,2,8882,0],[9426,17,8882,15,"reauthenticateWithPhoneNumber"],[9426,46,8882,44,"reauthenticateWithPhoneNumber"],[9426,47,8882,45,"user"],[9426,51,8882,49],[9426,53,8882,51,"phoneNumber"],[9426,64,8882,62],[9426,66,8882,64,"appVerifier"],[9426,77,8882,75],[9426,79,8882,77],[9427,4,8883,4],[9427,10,8883,10,"userInternal"],[9427,22,8883,22],[9427,25,8883,25],[9427,29,8883,25,"getModularInstance"],[9427,42,8883,43],[9427,43,8883,43,"getModularInstance"],[9427,61,8883,43],[9427,63,8883,44,"user"],[9427,67,8883,48],[9427,68,8883,49],[9428,4,8884,4],[9428,8,8884,8],[9428,12,8884,8,"_isFirebaseServerApp"],[9428,24,8884,28],[9428,25,8884,28,"_isFirebaseServerApp"],[9428,45,8884,28],[9428,47,8884,29,"userInternal"],[9428,59,8884,41],[9428,60,8884,42,"auth"],[9428,64,8884,46],[9428,65,8884,47,"app"],[9428,68,8884,50],[9428,69,8884,51],[9428,71,8884,53],[9429,6,8885,8],[9429,13,8885,15,"Promise"],[9429,20,8885,22],[9429,21,8885,23,"reject"],[9429,27,8885,29],[9429,28,8885,30,"_serverAppCurrentUserOperationNotSupportedError"],[9429,75,8885,77],[9429,76,8885,78,"userInternal"],[9429,88,8885,90],[9429,89,8885,91,"auth"],[9429,93,8885,95],[9429,94,8885,96],[9429,95,8885,97],[9430,4,8886,4],[9431,4,8887,4],[9431,10,8887,10,"verificationId"],[9431,24,8887,24],[9431,27,8887,27],[9431,33,8887,33,"_verifyPhoneNumber"],[9431,51,8887,51],[9431,52,8887,52,"userInternal"],[9431,64,8887,64],[9431,65,8887,65,"auth"],[9431,69,8887,69],[9431,71,8887,71,"phoneNumber"],[9431,82,8887,82],[9431,84,8887,84],[9431,88,8887,84,"getModularInstance"],[9431,101,8887,102],[9431,102,8887,102,"getModularInstance"],[9431,120,8887,102],[9431,122,8887,103,"appVerifier"],[9431,133,8887,114],[9431,134,8887,115],[9431,135,8887,116],[9432,4,8888,4],[9432,11,8888,11],[9432,15,8888,15,"ConfirmationResultImpl"],[9432,37,8888,37],[9432,38,8888,38,"verificationId"],[9432,52,8888,52],[9432,54,8888,54,"cred"],[9432,58,8888,58],[9432,62,8888,62,"reauthenticateWithCredential"],[9432,90,8888,90],[9432,91,8888,91,"userInternal"],[9432,103,8888,103],[9432,105,8888,105,"cred"],[9432,109,8888,109],[9432,110,8888,110],[9432,111,8888,111],[9433,2,8889,0],[9434,2,8890,0],[9435,0,8891,0],[9436,0,8892,0],[9437,0,8893,0],[9438,2,8894,0],[9438,17,8894,15,"_verifyPhoneNumber"],[9438,35,8894,33,"_verifyPhoneNumber"],[9438,36,8894,34,"auth"],[9438,40,8894,38],[9438,42,8894,40,"options"],[9438,49,8894,47],[9438,51,8894,49,"verifier"],[9438,59,8894,57],[9438,61,8894,59],[9439,4,8895,4],[9439,8,8895,8],[9439,9,8895,9,"auth"],[9439,13,8895,13],[9439,14,8895,14,"_getRecaptchaConfig"],[9439,33,8895,33],[9439,34,8895,34],[9439,35,8895,35],[9439,37,8895,37],[9440,6,8896,8],[9440,10,8896,12],[9441,8,8897,12],[9441,14,8897,18,"_initializeRecaptchaConfig"],[9441,40,8897,44],[9441,41,8897,45,"auth"],[9441,45,8897,49],[9441,46,8897,50],[9442,6,8898,8],[9442,7,8898,9],[9442,8,8899,8],[9442,15,8899,15,"error"],[9442,20,8899,20],[9442,22,8899,22],[9443,8,8900,12],[9444,8,8901,12],[9445,8,8902,12],[9446,8,8903,12],[9447,8,8904,12,"console"],[9447,15,8904,19],[9447,16,8904,20,"log"],[9447,19,8904,23],[9447,20,8904,24],[9447,113,8904,117],[9447,114,8904,118],[9448,6,8905,8],[9449,4,8906,4],[9450,4,8907,4],[9450,8,8907,8],[9451,6,8908,8],[9451,10,8908,12,"phoneInfoOptions"],[9451,26,8908,28],[9452,6,8909,8],[9452,10,8909,12],[9452,17,8909,19,"options"],[9452,24,8909,26],[9452,29,8909,31],[9452,37,8909,39],[9452,39,8909,41],[9453,8,8910,12,"phoneInfoOptions"],[9453,24,8910,28],[9453,27,8910,31],[9454,10,8911,16,"phoneNumber"],[9454,21,8911,27],[9454,23,8911,29,"options"],[9455,8,8912,12],[9455,9,8912,13],[9456,6,8913,8],[9456,7,8913,9],[9456,13,8914,13],[9457,8,8915,12,"phoneInfoOptions"],[9457,24,8915,28],[9457,27,8915,31,"options"],[9457,34,8915,38],[9458,6,8916,8],[9459,6,8917,8],[9459,10,8917,12],[9459,19,8917,21],[9459,23,8917,25,"phoneInfoOptions"],[9459,39,8917,41],[9459,41,8917,43],[9460,8,8918,12],[9460,14,8918,18,"session"],[9460,21,8918,25],[9460,24,8918,28,"phoneInfoOptions"],[9460,40,8918,44],[9460,41,8918,45,"session"],[9460,48,8918,52],[9461,8,8919,12],[9461,12,8919,16],[9461,25,8919,29],[9461,29,8919,33,"phoneInfoOptions"],[9461,45,8919,49],[9461,47,8919,51],[9462,10,8920,16,"_assert"],[9462,17,8920,23],[9462,18,8920,24,"session"],[9462,25,8920,31],[9462,26,8920,32,"type"],[9462,30,8920,36],[9462,35,8920,41],[9462,43,8920,49],[9462,44,8920,50],[9462,81,8920,87,"auth"],[9462,85,8920,91],[9462,87,8920,93],[9462,103,8920,109],[9462,104,8920,110],[9462,138,8920,144],[9462,139,8920,145],[9463,10,8921,16],[9463,16,8921,22,"startPhoneMfaEnrollmentRequest"],[9463,46,8921,52],[9463,49,8921,55],[9464,12,8922,20,"idToken"],[9464,19,8922,27],[9464,21,8922,29,"session"],[9464,28,8922,36],[9464,29,8922,37,"credential"],[9464,39,8922,47],[9465,12,8923,20,"phoneEnrollmentInfo"],[9465,31,8923,39],[9465,33,8923,41],[9466,14,8924,24,"phoneNumber"],[9466,25,8924,35],[9466,27,8924,37,"phoneInfoOptions"],[9466,43,8924,53],[9466,44,8924,54,"phoneNumber"],[9466,55,8924,65],[9467,14,8925,24,"clientType"],[9467,24,8925,34],[9467,26,8925,36],[9467,43,8925,53],[9467,44,8925,54],[9468,12,8926,20],[9469,10,8927,16],[9469,11,8927,17],[9470,10,8928,16],[9470,16,8928,22,"startEnrollPhoneMfaActionCallback"],[9470,49,8928,55],[9470,52,8928,58],[9470,58,8928,58,"startEnrollPhoneMfaActionCallback"],[9470,59,8928,65,"authInstance"],[9470,71,8928,77],[9470,73,8928,79,"request"],[9470,80,8928,86],[9470,85,8928,91],[9471,12,8929,20],[9472,12,8930,20],[9472,16,8930,24,"request"],[9472,23,8930,31],[9472,24,8930,32,"phoneEnrollmentInfo"],[9472,43,8930,51],[9472,44,8930,52,"captchaResponse"],[9472,59,8930,67],[9472,64,8930,72,"FAKE_TOKEN"],[9472,74,8930,82],[9472,76,8930,84],[9473,14,8931,24,"_assert"],[9473,21,8931,31],[9473,22,8931,32,"verifier"],[9473,30,8931,40],[9473,32,8931,42,"type"],[9473,36,8931,46],[9473,41,8931,51,"RECAPTCHA_VERIFIER_TYPE"],[9473,64,8931,74],[9473,66,8931,76,"authInstance"],[9473,78,8931,88],[9473,80,8931,90],[9473,96,8931,106],[9473,97,8931,107],[9473,131,8931,141],[9473,132,8931,142],[9474,14,8932,24],[9474,20,8932,30,"requestWithRecaptchaV2"],[9474,42,8932,52],[9474,45,8932,55],[9474,51,8932,61,"injectRecaptchaV2Token"],[9474,73,8932,83],[9474,74,8932,84,"authInstance"],[9474,86,8932,96],[9474,88,8932,98,"request"],[9474,95,8932,105],[9474,97,8932,107,"verifier"],[9474,105,8932,115],[9474,106,8932,116],[9475,14,8933,24],[9475,21,8933,31,"startEnrollPhoneMfa"],[9475,40,8933,50],[9475,41,8933,51,"authInstance"],[9475,53,8933,63],[9475,55,8933,65,"requestWithRecaptchaV2"],[9475,77,8933,87],[9475,78,8933,88],[9476,12,8934,20],[9477,12,8935,20],[9477,19,8935,27,"startEnrollPhoneMfa"],[9477,38,8935,46],[9477,39,8935,47,"authInstance"],[9477,51,8935,59],[9477,53,8935,61,"request"],[9477,60,8935,68],[9477,61,8935,69],[9478,10,8936,16],[9478,11,8936,17],[9479,10,8937,16],[9479,16,8937,22,"startPhoneMfaEnrollmentResponse"],[9479,47,8937,53],[9479,50,8937,56,"handleRecaptchaFlow"],[9479,69,8937,75],[9479,70,8937,76,"auth"],[9479,74,8937,80],[9479,76,8937,82,"startPhoneMfaEnrollmentRequest"],[9479,106,8937,112],[9479,108,8937,114],[9479,126,8937,132],[9479,127,8937,133],[9479,173,8937,179,"startEnrollPhoneMfaActionCallback"],[9479,206,8937,212],[9479,208,8937,214],[9479,224,8937,230],[9479,225,8937,231],[9479,267,8937,273],[9479,268,8937,274],[9480,10,8938,16],[9480,16,8938,22,"response"],[9480,24,8938,30],[9480,27,8938,33],[9480,33,8938,39,"startPhoneMfaEnrollmentResponse"],[9480,64,8938,70],[9480,65,8938,71,"catch"],[9480,70,8938,76],[9480,71,8938,77,"error"],[9480,76,8938,82],[9480,80,8938,86],[9481,12,8939,20],[9481,19,8939,27,"Promise"],[9481,26,8939,34],[9481,27,8939,35,"reject"],[9481,33,8939,41],[9481,34,8939,42,"error"],[9481,39,8939,47],[9481,40,8939,48],[9482,10,8940,16],[9482,11,8940,17],[9482,12,8940,18],[9483,10,8941,16],[9483,17,8941,23,"response"],[9483,25,8941,31],[9483,26,8941,32,"phoneSessionInfo"],[9483,42,8941,48],[9483,43,8941,49,"sessionInfo"],[9483,54,8941,60],[9484,8,8942,12],[9484,9,8942,13],[9484,15,8943,17],[9485,10,8944,16,"_assert"],[9485,17,8944,23],[9485,18,8944,24,"session"],[9485,25,8944,31],[9485,26,8944,32,"type"],[9485,30,8944,36],[9485,35,8944,41],[9485,43,8944,49],[9485,44,8944,50],[9485,82,8944,88,"auth"],[9485,86,8944,92],[9485,88,8944,94],[9485,104,8944,110],[9485,105,8944,111],[9485,139,8944,145],[9485,140,8944,146],[9486,10,8945,16],[9486,16,8945,22,"mfaEnrollmentId"],[9486,31,8945,37],[9486,34,8945,40,"phoneInfoOptions"],[9486,50,8945,56],[9486,51,8945,57,"multiFactorHint"],[9486,66,8945,72],[9486,68,8945,74,"uid"],[9486,71,8945,77],[9486,75,8946,20,"phoneInfoOptions"],[9486,91,8946,36],[9486,92,8946,37,"multiFactorUid"],[9486,106,8946,51],[9487,10,8947,16,"_assert"],[9487,17,8947,23],[9487,18,8947,24,"mfaEnrollmentId"],[9487,33,8947,39],[9487,35,8947,41,"auth"],[9487,39,8947,45],[9487,41,8947,47],[9487,68,8947,74],[9487,69,8947,75],[9487,105,8947,111],[9487,106,8947,112],[9488,10,8948,16],[9488,16,8948,22,"startPhoneMfaSignInRequest"],[9488,42,8948,48],[9488,45,8948,51],[9489,12,8949,20,"mfaPendingCredential"],[9489,32,8949,40],[9489,34,8949,42,"session"],[9489,41,8949,49],[9489,42,8949,50,"credential"],[9489,52,8949,60],[9490,12,8950,20,"mfaEnrollmentId"],[9490,27,8950,35],[9491,12,8951,20,"phoneSignInInfo"],[9491,27,8951,35],[9491,29,8951,37],[9492,14,8952,24,"clientType"],[9492,24,8952,34],[9492,26,8952,36],[9492,43,8952,53],[9492,44,8952,54],[9493,12,8953,20],[9494,10,8954,16],[9494,11,8954,17],[9495,10,8955,16],[9495,16,8955,22,"startSignInPhoneMfaActionCallback"],[9495,49,8955,55],[9495,52,8955,58],[9495,58,8955,58,"startSignInPhoneMfaActionCallback"],[9495,59,8955,65,"authInstance"],[9495,71,8955,77],[9495,73,8955,79,"request"],[9495,80,8955,86],[9495,85,8955,91],[9496,12,8956,20],[9497,12,8957,20],[9497,16,8957,24,"request"],[9497,23,8957,31],[9497,24,8957,32,"phoneSignInInfo"],[9497,39,8957,47],[9497,40,8957,48,"captchaResponse"],[9497,55,8957,63],[9497,60,8957,68,"FAKE_TOKEN"],[9497,70,8957,78],[9497,72,8957,80],[9498,14,8958,24,"_assert"],[9498,21,8958,31],[9498,22,8958,32,"verifier"],[9498,30,8958,40],[9498,32,8958,42,"type"],[9498,36,8958,46],[9498,41,8958,51,"RECAPTCHA_VERIFIER_TYPE"],[9498,64,8958,74],[9498,66,8958,76,"authInstance"],[9498,78,8958,88],[9498,80,8958,90],[9498,96,8958,106],[9498,97,8958,107],[9498,131,8958,141],[9498,132,8958,142],[9499,14,8959,24],[9499,20,8959,30,"requestWithRecaptchaV2"],[9499,42,8959,52],[9499,45,8959,55],[9499,51,8959,61,"injectRecaptchaV2Token"],[9499,73,8959,83],[9499,74,8959,84,"authInstance"],[9499,86,8959,96],[9499,88,8959,98,"request"],[9499,95,8959,105],[9499,97,8959,107,"verifier"],[9499,105,8959,115],[9499,106,8959,116],[9500,14,8960,24],[9500,21,8960,31,"startSignInPhoneMfa"],[9500,40,8960,50],[9500,41,8960,51,"authInstance"],[9500,53,8960,63],[9500,55,8960,65,"requestWithRecaptchaV2"],[9500,77,8960,87],[9500,78,8960,88],[9501,12,8961,20],[9502,12,8962,20],[9502,19,8962,27,"startSignInPhoneMfa"],[9502,38,8962,46],[9502,39,8962,47,"authInstance"],[9502,51,8962,59],[9502,53,8962,61,"request"],[9502,60,8962,68],[9502,61,8962,69],[9503,10,8963,16],[9503,11,8963,17],[9504,10,8964,16],[9504,16,8964,22,"startPhoneMfaSignInResponse"],[9504,43,8964,49],[9504,46,8964,52,"handleRecaptchaFlow"],[9504,65,8964,71],[9504,66,8964,72,"auth"],[9504,70,8964,76],[9504,72,8964,78,"startPhoneMfaSignInRequest"],[9504,98,8964,104],[9504,100,8964,106],[9504,114,8964,120],[9504,115,8964,121],[9504,157,8964,163,"startSignInPhoneMfaActionCallback"],[9504,190,8964,196],[9504,192,8964,198],[9504,208,8964,214],[9504,209,8964,215],[9504,251,8964,257],[9504,252,8964,258],[9505,10,8965,16],[9505,16,8965,22,"response"],[9505,24,8965,30],[9505,27,8965,33],[9505,33,8965,39,"startPhoneMfaSignInResponse"],[9505,60,8965,66],[9505,61,8965,67,"catch"],[9505,66,8965,72],[9505,67,8965,73,"error"],[9505,72,8965,78],[9505,76,8965,82],[9506,12,8966,20],[9506,19,8966,27,"Promise"],[9506,26,8966,34],[9506,27,8966,35,"reject"],[9506,33,8966,41],[9506,34,8966,42,"error"],[9506,39,8966,47],[9506,40,8966,48],[9507,10,8967,16],[9507,11,8967,17],[9507,12,8967,18],[9508,10,8968,16],[9508,17,8968,23,"response"],[9508,25,8968,31],[9508,26,8968,32,"phoneResponseInfo"],[9508,43,8968,49],[9508,44,8968,50,"sessionInfo"],[9508,55,8968,61],[9509,8,8969,12],[9510,6,8970,8],[9510,7,8970,9],[9510,13,8971,13],[9511,8,8972,12],[9511,14,8972,18,"sendPhoneVerificationCodeRequest"],[9511,46,8972,50],[9511,49,8972,53],[9512,10,8973,16,"phoneNumber"],[9512,21,8973,27],[9512,23,8973,29,"phoneInfoOptions"],[9512,39,8973,45],[9512,40,8973,46,"phoneNumber"],[9512,51,8973,57],[9513,10,8974,16,"clientType"],[9513,20,8974,26],[9513,22,8974,28],[9513,39,8974,45],[9513,40,8974,46],[9514,8,8975,12],[9514,9,8975,13],[9515,8,8976,12],[9515,14,8976,18,"sendPhoneVerificationCodeActionCallback"],[9515,53,8976,57],[9515,56,8976,60],[9515,62,8976,60,"sendPhoneVerificationCodeActionCallback"],[9515,63,8976,67,"authInstance"],[9515,75,8976,79],[9515,77,8976,81,"request"],[9515,84,8976,88],[9515,89,8976,93],[9516,10,8977,16],[9517,10,8978,16],[9517,14,8978,20,"request"],[9517,21,8978,27],[9517,22,8978,28,"captchaResponse"],[9517,37,8978,43],[9517,42,8978,48,"FAKE_TOKEN"],[9517,52,8978,58],[9517,54,8978,60],[9518,12,8979,20,"_assert"],[9518,19,8979,27],[9518,20,8979,28,"verifier"],[9518,28,8979,36],[9518,30,8979,38,"type"],[9518,34,8979,42],[9518,39,8979,47,"RECAPTCHA_VERIFIER_TYPE"],[9518,62,8979,70],[9518,64,8979,72,"authInstance"],[9518,76,8979,84],[9518,78,8979,86],[9518,94,8979,102],[9518,95,8979,103],[9518,129,8979,137],[9518,130,8979,138],[9519,12,8980,20],[9519,18,8980,26,"requestWithRecaptchaV2"],[9519,40,8980,48],[9519,43,8980,51],[9519,49,8980,57,"injectRecaptchaV2Token"],[9519,71,8980,79],[9519,72,8980,80,"authInstance"],[9519,84,8980,92],[9519,86,8980,94,"request"],[9519,93,8980,101],[9519,95,8980,103,"verifier"],[9519,103,8980,111],[9519,104,8980,112],[9520,12,8981,20],[9520,19,8981,27,"sendPhoneVerificationCode"],[9520,44,8981,52],[9520,45,8981,53,"authInstance"],[9520,57,8981,65],[9520,59,8981,67,"requestWithRecaptchaV2"],[9520,81,8981,89],[9520,82,8981,90],[9521,10,8982,16],[9522,10,8983,16],[9522,17,8983,23,"sendPhoneVerificationCode"],[9522,42,8983,48],[9522,43,8983,49,"authInstance"],[9522,55,8983,61],[9522,57,8983,63,"request"],[9522,64,8983,70],[9522,65,8983,71],[9523,8,8984,12],[9523,9,8984,13],[9524,8,8985,12],[9524,14,8985,18,"sendPhoneVerificationCodeResponse"],[9524,47,8985,51],[9524,50,8985,54,"handleRecaptchaFlow"],[9524,69,8985,73],[9524,70,8985,74,"auth"],[9524,74,8985,78],[9524,76,8985,80,"sendPhoneVerificationCodeRequest"],[9524,108,8985,112],[9524,110,8985,114],[9524,132,8985,136],[9524,133,8985,137],[9524,183,8985,187,"sendPhoneVerificationCodeActionCallback"],[9524,222,8985,226],[9524,224,8985,228],[9524,240,8985,244],[9524,241,8985,245],[9524,283,8985,287],[9524,284,8985,288],[9525,8,8986,12],[9525,14,8986,18,"response"],[9525,22,8986,26],[9525,25,8986,29],[9525,31,8986,35,"sendPhoneVerificationCodeResponse"],[9525,64,8986,68],[9525,65,8986,69,"catch"],[9525,70,8986,74],[9525,71,8986,75,"error"],[9525,76,8986,80],[9525,80,8986,84],[9526,10,8987,16],[9526,17,8987,23,"Promise"],[9526,24,8987,30],[9526,25,8987,31,"reject"],[9526,31,8987,37],[9526,32,8987,38,"error"],[9526,37,8987,43],[9526,38,8987,44],[9527,8,8988,12],[9527,9,8988,13],[9527,10,8988,14],[9528,8,8989,12],[9528,15,8989,19,"response"],[9528,23,8989,27],[9528,24,8989,28,"sessionInfo"],[9528,35,8989,39],[9529,6,8990,8],[9530,4,8991,4],[9530,5,8991,5],[9530,14,8992,12],[9531,6,8993,8,"verifier"],[9531,14,8993,16],[9531,16,8993,18,"_reset"],[9531,22,8993,24],[9531,23,8993,25],[9531,24,8993,26],[9532,4,8994,4],[9533,2,8995,0],[9534,2,8996,0],[9535,0,8997,0],[9536,0,8998,0],[9537,0,8999,0],[9538,0,9000,0],[9539,0,9001,0],[9540,0,9002,0],[9541,0,9003,0],[9542,0,9004,0],[9543,0,9005,0],[9544,0,9006,0],[9545,0,9007,0],[9546,0,9008,0],[9547,0,9009,0],[9548,0,9010,0],[9549,0,9011,0],[9550,0,9012,0],[9551,0,9013,0],[9552,0,9014,0],[9553,0,9015,0],[9554,0,9016,0],[9555,0,9017,0],[9556,0,9018,0],[9557,2,9019,0],[9557,17,9019,15,"updatePhoneNumber"],[9557,34,9019,32,"updatePhoneNumber"],[9557,35,9019,33,"user"],[9557,39,9019,37],[9557,41,9019,39,"credential"],[9557,51,9019,49],[9557,53,9019,51],[9558,4,9020,4],[9558,10,9020,10,"userInternal"],[9558,22,9020,22],[9558,25,9020,25],[9558,29,9020,25,"getModularInstance"],[9558,42,9020,43],[9558,43,9020,43,"getModularInstance"],[9558,61,9020,43],[9558,63,9020,44,"user"],[9558,67,9020,48],[9558,68,9020,49],[9559,4,9021,4],[9559,8,9021,8],[9559,12,9021,8,"_isFirebaseServerApp"],[9559,24,9021,28],[9559,25,9021,28,"_isFirebaseServerApp"],[9559,45,9021,28],[9559,47,9021,29,"userInternal"],[9559,59,9021,41],[9559,60,9021,42,"auth"],[9559,64,9021,46],[9559,65,9021,47,"app"],[9559,68,9021,50],[9559,69,9021,51],[9559,71,9021,53],[9560,6,9022,8],[9560,13,9022,15,"Promise"],[9560,20,9022,22],[9560,21,9022,23,"reject"],[9560,27,9022,29],[9560,28,9022,30,"_serverAppCurrentUserOperationNotSupportedError"],[9560,75,9022,77],[9560,76,9022,78,"userInternal"],[9560,88,9022,90],[9560,89,9022,91,"auth"],[9560,93,9022,95],[9560,94,9022,96],[9560,95,9022,97],[9561,4,9023,4],[9562,4,9024,4],[9562,10,9024,10,"_link$1"],[9562,17,9024,17],[9562,18,9024,18,"userInternal"],[9562,30,9024,30],[9562,32,9024,32,"credential"],[9562,42,9024,42],[9562,43,9024,43],[9563,2,9025,0],[9564,2,9026,0],[9565,2,9027,0],[9565,17,9027,15,"injectRecaptchaV2Token"],[9565,39,9027,37,"injectRecaptchaV2Token"],[9565,40,9027,38,"auth"],[9565,44,9027,42],[9565,46,9027,44,"request"],[9565,53,9027,51],[9565,55,9027,53,"recaptchaV2Verifier"],[9565,74,9027,72],[9565,76,9027,74],[9566,4,9028,4,"_assert"],[9566,11,9028,11],[9566,12,9028,12,"recaptchaV2Verifier"],[9566,31,9028,31],[9566,32,9028,32,"type"],[9566,36,9028,36],[9566,41,9028,41,"RECAPTCHA_VERIFIER_TYPE"],[9566,64,9028,64],[9566,66,9028,66,"auth"],[9566,70,9028,70],[9566,72,9028,72],[9566,88,9028,88],[9566,89,9028,89],[9566,123,9028,123],[9566,124,9028,124],[9567,4,9029,4],[9567,10,9029,10,"recaptchaV2Token"],[9567,26,9029,26],[9567,29,9029,29],[9567,35,9029,35,"recaptchaV2Verifier"],[9567,54,9029,54],[9567,55,9029,55,"verify"],[9567,61,9029,61],[9567,62,9029,62],[9567,63,9029,63],[9568,4,9030,4,"_assert"],[9568,11,9030,11],[9568,12,9030,12],[9568,19,9030,19,"recaptchaV2Token"],[9568,35,9030,35],[9568,40,9030,40],[9568,48,9030,48],[9568,50,9030,50,"auth"],[9568,54,9030,54],[9568,56,9030,56],[9568,72,9030,72],[9568,73,9030,73],[9568,107,9030,107],[9568,108,9030,108],[9569,4,9031,4],[9569,10,9031,10,"newRequest"],[9569,20,9031,20],[9569,23,9031,20,"Object"],[9569,29,9031,20],[9569,30,9031,20,"assign"],[9569,36,9031,20],[9569,41,9031,28,"request"],[9569,48,9031,35],[9569,49,9031,37],[9570,4,9032,4],[9570,8,9032,8],[9570,29,9032,29],[9570,33,9032,33,"newRequest"],[9570,43,9032,43],[9570,45,9032,45],[9571,6,9033,8],[9571,12,9033,14,"phoneNumber"],[9571,23,9033,25],[9571,26,9033,28,"newRequest"],[9571,36,9033,38],[9571,37,9033,39,"phoneEnrollmentInfo"],[9571,56,9033,58],[9571,57,9033,59,"phoneNumber"],[9571,68,9033,70],[9572,6,9034,8],[9572,12,9034,14,"captchaResponse"],[9572,27,9034,29],[9572,30,9034,32,"newRequest"],[9572,40,9034,42],[9572,41,9034,43,"phoneEnrollmentInfo"],[9572,60,9034,62],[9572,61,9034,63,"captchaResponse"],[9572,76,9034,78],[9573,6,9035,8],[9573,12,9035,14,"clientType"],[9573,22,9035,24],[9573,25,9035,27,"newRequest"],[9573,35,9035,37],[9573,36,9036,13,"phoneEnrollmentInfo"],[9573,55,9036,32],[9573,56,9036,33,"clientType"],[9573,66,9036,43],[9574,6,9037,8],[9574,12,9037,14,"recaptchaVersion"],[9574,28,9037,30],[9574,31,9037,33,"newRequest"],[9574,41,9037,43],[9574,42,9037,44,"phoneEnrollmentInfo"],[9574,61,9037,63],[9574,62,9037,64,"recaptchaVersion"],[9574,78,9037,80],[9575,6,9038,8,"Object"],[9575,12,9038,14],[9575,13,9038,15,"assign"],[9575,19,9038,21],[9575,20,9038,22,"newRequest"],[9575,30,9038,32],[9575,32,9038,34],[9576,8,9039,12],[9576,29,9039,33],[9576,31,9039,35],[9577,10,9040,16,"phoneNumber"],[9577,21,9040,27],[9578,10,9041,16,"recaptchaToken"],[9578,24,9041,30],[9578,26,9041,32,"recaptchaV2Token"],[9578,42,9041,48],[9579,10,9042,16,"captchaResponse"],[9579,25,9042,31],[9580,10,9043,16,"clientType"],[9580,20,9043,26],[9581,10,9044,16,"recaptchaVersion"],[9582,8,9045,12],[9583,6,9046,8],[9583,7,9046,9],[9583,8,9046,10],[9584,6,9047,8],[9584,13,9047,15,"newRequest"],[9584,23,9047,25],[9585,4,9048,4],[9585,5,9048,5],[9585,11,9049,9],[9585,15,9049,13],[9585,32,9049,30],[9585,36,9049,34,"newRequest"],[9585,46,9049,44],[9585,48,9049,46],[9586,6,9050,8],[9586,12,9050,14,"captchaResponse"],[9586,27,9050,29],[9586,30,9050,32,"newRequest"],[9586,40,9050,42],[9586,41,9050,43,"phoneSignInInfo"],[9586,56,9050,58],[9586,57,9050,59,"captchaResponse"],[9586,72,9050,74],[9587,6,9051,8],[9587,12,9051,14,"clientType"],[9587,22,9051,24],[9587,25,9051,27,"newRequest"],[9587,35,9051,37],[9587,36,9052,13,"phoneSignInInfo"],[9587,51,9052,28],[9587,52,9052,29,"clientType"],[9587,62,9052,39],[9588,6,9053,8],[9588,12,9053,14,"recaptchaVersion"],[9588,28,9053,30],[9588,31,9053,33,"newRequest"],[9588,41,9053,43],[9588,42,9053,44,"phoneSignInInfo"],[9588,57,9053,59],[9588,58,9053,60,"recaptchaVersion"],[9588,74,9053,76],[9589,6,9054,8,"Object"],[9589,12,9054,14],[9589,13,9054,15,"assign"],[9589,19,9054,21],[9589,20,9054,22,"newRequest"],[9589,30,9054,32],[9589,32,9054,34],[9590,8,9055,12],[9590,25,9055,29],[9590,27,9055,31],[9591,10,9056,16,"recaptchaToken"],[9591,24,9056,30],[9591,26,9056,32,"recaptchaV2Token"],[9591,42,9056,48],[9592,10,9057,16,"captchaResponse"],[9592,25,9057,31],[9593,10,9058,16,"clientType"],[9593,20,9058,26],[9594,10,9059,16,"recaptchaVersion"],[9595,8,9060,12],[9596,6,9061,8],[9596,7,9061,9],[9596,8,9061,10],[9597,6,9062,8],[9597,13,9062,15,"newRequest"],[9597,23,9062,25],[9598,4,9063,4],[9598,5,9063,5],[9598,11,9064,9],[9599,6,9065,8,"Object"],[9599,12,9065,14],[9599,13,9065,15,"assign"],[9599,19,9065,21],[9599,20,9065,22,"newRequest"],[9599,30,9065,32],[9599,32,9065,34],[9600,8,9065,36],[9600,24,9065,52],[9600,26,9065,54,"recaptchaV2Token"],[9601,6,9065,71],[9601,7,9065,72],[9601,8,9065,73],[9602,6,9066,8],[9602,13,9066,15,"newRequest"],[9602,23,9066,25],[9603,4,9067,4],[9604,2,9068,0],[9606,2,9070,0],[9607,0,9071,0],[9608,0,9072,0],[9609,0,9073,0],[9610,0,9074,0],[9611,0,9075,0],[9612,0,9076,0],[9613,0,9077,0],[9614,0,9078,0],[9615,0,9079,0],[9616,0,9080,0],[9617,0,9081,0],[9618,0,9082,0],[9619,0,9083,0],[9620,0,9084,0],[9621,0,9085,0],[9622,2,9086,0],[9623,0,9087,0],[9624,0,9088,0],[9625,0,9089,0],[9626,0,9090,0],[9627,0,9091,0],[9628,0,9092,0],[9629,0,9093,0],[9630,0,9094,0],[9631,0,9095,0],[9632,0,9096,0],[9633,0,9097,0],[9634,0,9098,0],[9635,0,9099,0],[9636,0,9100,0],[9637,0,9101,0],[9638,0,9102,0],[9639,0,9103,0],[9640,0,9104,0],[9641,2,9105,0],[9641,8,9105,6,"PhoneAuthProvider"],[9641,25,9105,23],[9641,26,9105,24],[9642,4,9106,4],[9643,0,9107,0],[9644,0,9108,0],[9645,0,9109,0],[9646,4,9110,4,"constructor"],[9646,15,9110,15,"constructor"],[9646,16,9110,16,"auth"],[9646,20,9110,20],[9646,22,9110,22],[9647,6,9111,8],[9648,6,9112,8],[9648,10,9112,12],[9648,11,9112,13,"providerId"],[9648,21,9112,23],[9648,24,9112,26,"PhoneAuthProvider"],[9648,41,9112,43],[9648,42,9112,44,"PROVIDER_ID"],[9648,53,9112,55],[9649,6,9113,8],[9649,10,9113,12],[9649,11,9113,13,"auth"],[9649,15,9113,17],[9649,18,9113,20,"_castAuth"],[9649,27,9113,29],[9649,28,9113,30,"auth"],[9649,32,9113,34],[9649,33,9113,35],[9650,4,9114,4],[9651,4,9115,4],[9652,0,9116,0],[9653,0,9117,0],[9654,0,9118,0],[9655,0,9119,0],[9656,0,9120,0],[9657,0,9121,0],[9658,0,9122,0],[9659,0,9123,0],[9660,0,9124,0],[9661,0,9125,0],[9662,0,9126,0],[9663,0,9127,0],[9664,0,9128,0],[9665,0,9129,0],[9666,0,9130,0],[9667,0,9131,0],[9668,0,9132,0],[9669,0,9133,0],[9670,0,9134,0],[9671,0,9135,0],[9672,0,9136,0],[9673,0,9137,0],[9674,0,9138,0],[9675,0,9139,0],[9676,0,9140,0],[9677,0,9141,0],[9678,0,9142,0],[9679,0,9143,0],[9680,0,9144,0],[9681,0,9145,0],[9682,0,9146,0],[9683,0,9147,0],[9684,4,9148,4,"verifyPhoneNumber"],[9684,21,9148,21,"verifyPhoneNumber"],[9684,22,9148,22,"phoneOptions"],[9684,34,9148,34],[9684,36,9148,36,"applicationVerifier"],[9684,55,9148,55],[9684,57,9148,57],[9685,6,9149,8],[9685,13,9149,15,"_verifyPhoneNumber"],[9685,31,9149,33],[9685,32,9149,34],[9685,36,9149,38],[9685,37,9149,39,"auth"],[9685,41,9149,43],[9685,43,9149,45,"phoneOptions"],[9685,55,9149,57],[9685,57,9149,59],[9685,61,9149,59,"getModularInstance"],[9685,74,9149,77],[9685,75,9149,77,"getModularInstance"],[9685,93,9149,77],[9685,95,9149,78,"applicationVerifier"],[9685,114,9149,97],[9685,115,9149,98],[9685,116,9149,99],[9686,4,9150,4],[9687,4,9151,4],[9688,0,9152,0],[9689,0,9153,0],[9690,0,9154,0],[9691,0,9155,0],[9692,0,9156,0],[9693,0,9157,0],[9694,0,9158,0],[9695,0,9159,0],[9696,0,9160,0],[9697,0,9161,0],[9698,0,9162,0],[9699,0,9163,0],[9700,0,9164,0],[9701,0,9165,0],[9702,0,9166,0],[9703,0,9167,0],[9704,0,9168,0],[9705,0,9169,0],[9706,0,9170,0],[9707,0,9171,0],[9708,0,9172,0],[9709,0,9173,0],[9710,0,9174,0],[9711,0,9175,0],[9712,0,9176,0],[9713,0,9177,0],[9714,4,9178,4],[9714,11,9178,11,"credential"],[9714,21,9178,21,"credential"],[9714,22,9178,22,"verificationId"],[9714,36,9178,36],[9714,38,9178,38,"verificationCode"],[9714,54,9178,54],[9714,56,9178,56],[9715,6,9179,8],[9715,13,9179,15,"PhoneAuthCredential"],[9715,32,9179,34],[9715,33,9179,35,"_fromVerification"],[9715,50,9179,52],[9715,51,9179,53,"verificationId"],[9715,65,9179,67],[9715,67,9179,69,"verificationCode"],[9715,83,9179,85],[9715,84,9179,86],[9716,4,9180,4],[9717,4,9181,4],[9718,0,9182,0],[9719,0,9183,0],[9720,0,9184,0],[9721,4,9185,4],[9721,11,9185,11,"credentialFromResult"],[9721,31,9185,31,"credentialFromResult"],[9721,32,9185,32,"userCredential"],[9721,46,9185,46],[9721,48,9185,48],[9722,6,9186,8],[9722,12,9186,14,"credential"],[9722,22,9186,24],[9722,25,9186,27,"userCredential"],[9722,39,9186,41],[9723,6,9187,8],[9723,13,9187,15,"PhoneAuthProvider"],[9723,30,9187,32],[9723,31,9187,33,"credentialFromTaggedObject"],[9723,57,9187,59],[9723,58,9187,60,"credential"],[9723,68,9187,70],[9723,69,9187,71],[9724,4,9188,4],[9725,4,9189,4],[9726,0,9190,0],[9727,0,9191,0],[9728,0,9192,0],[9729,0,9193,0],[9730,0,9194,0],[9731,0,9195,0],[9732,0,9196,0],[9733,0,9197,0],[9734,0,9198,0],[9735,0,9199,0],[9736,0,9200,0],[9737,0,9201,0],[9738,0,9202,0],[9739,0,9203,0],[9740,0,9204,0],[9741,0,9205,0],[9742,0,9206,0],[9743,0,9207,0],[9744,0,9208,0],[9745,0,9209,0],[9746,0,9210,0],[9747,0,9211,0],[9748,0,9212,0],[9749,0,9213,0],[9750,0,9214,0],[9751,0,9215,0],[9752,0,9216,0],[9753,0,9217,0],[9754,0,9218,0],[9755,0,9219,0],[9756,0,9220,0],[9757,4,9221,4],[9757,11,9221,11,"credentialFromError"],[9757,30,9221,30,"credentialFromError"],[9757,31,9221,31,"error"],[9757,36,9221,36],[9757,38,9221,38],[9758,6,9222,8],[9758,13,9222,15,"PhoneAuthProvider"],[9758,30,9222,32],[9758,31,9222,33,"credentialFromTaggedObject"],[9758,57,9222,59],[9758,58,9222,61,"error"],[9758,63,9222,66],[9758,64,9222,67,"customData"],[9758,74,9222,77],[9758,78,9222,81],[9758,79,9222,82],[9758,80,9222,84],[9758,81,9222,85],[9759,4,9223,4],[9760,4,9224,4],[9760,11,9224,11,"credentialFromTaggedObject"],[9760,37,9224,37,"credentialFromTaggedObject"],[9760,38,9224,38],[9761,6,9224,40,"_tokenResponse"],[9761,20,9224,54],[9761,22,9224,56,"tokenResponse"],[9762,4,9224,70],[9762,5,9224,71],[9762,7,9224,73],[9763,6,9225,8],[9763,10,9225,12],[9763,11,9225,13,"tokenResponse"],[9763,24,9225,26],[9763,26,9225,28],[9764,8,9226,12],[9764,15,9226,19],[9764,19,9226,23],[9765,6,9227,8],[9766,6,9228,8],[9766,12,9228,14],[9767,8,9228,16,"phoneNumber"],[9767,19,9228,27],[9768,8,9228,29,"temporaryProof"],[9769,6,9228,44],[9769,7,9228,45],[9769,10,9228,48,"tokenResponse"],[9769,23,9228,61],[9770,6,9229,8],[9770,10,9229,12,"phoneNumber"],[9770,21,9229,23],[9770,25,9229,27,"temporaryProof"],[9770,39,9229,41],[9770,41,9229,43],[9771,8,9230,12],[9771,15,9230,19,"PhoneAuthCredential"],[9771,34,9230,38],[9771,35,9230,39,"_fromTokenResponse"],[9771,53,9230,57],[9771,54,9230,58,"phoneNumber"],[9771,65,9230,69],[9771,67,9230,71,"temporaryProof"],[9771,81,9230,85],[9771,82,9230,86],[9772,6,9231,8],[9773,6,9232,8],[9773,13,9232,15],[9773,17,9232,19],[9774,4,9233,4],[9775,2,9234,0],[9776,2,9235,0],[9777,2,9236,0,"PhoneAuthProvider"],[9777,19,9236,17],[9777,20,9236,18,"PROVIDER_ID"],[9777,31,9236,29],[9777,34,9236,32],[9777,41,9236,39],[9777,42,9236,40],[9778,2,9237,0],[9779,2,9238,0,"PhoneAuthProvider"],[9779,19,9238,17],[9779,20,9238,18,"PHONE_SIGN_IN_METHOD"],[9779,40,9238,38],[9779,43,9238,41],[9779,50,9238,48],[9779,51,9238,49],[9781,2,9240,0],[9782,0,9241,0],[9783,0,9242,0],[9784,0,9243,0],[9785,0,9244,0],[9786,0,9245,0],[9787,0,9246,0],[9788,0,9247,0],[9789,0,9248,0],[9790,0,9249,0],[9791,0,9250,0],[9792,0,9251,0],[9793,0,9252,0],[9794,0,9253,0],[9795,0,9254,0],[9796,0,9255,0],[9797,2,9256,0],[9798,0,9257,0],[9799,0,9258,0],[9800,0,9259,0],[9801,0,9260,0],[9802,2,9261,0],[9802,11,9261,9,"_withDefaultResolver"],[9802,31,9261,29,"_withDefaultResolver"],[9802,32,9261,30,"auth"],[9802,36,9261,34],[9802,38,9261,36,"resolverOverride"],[9802,54,9261,52],[9802,56,9261,54],[9803,4,9262,4],[9803,8,9262,8,"resolverOverride"],[9803,24,9262,24],[9803,26,9262,26],[9804,6,9263,8],[9804,13,9263,15,"_getInstance"],[9804,25,9263,27],[9804,26,9263,28,"resolverOverride"],[9804,42,9263,44],[9804,43,9263,45],[9805,4,9264,4],[9806,4,9265,4,"_assert"],[9806,11,9265,11],[9806,12,9265,12,"auth"],[9806,16,9265,16],[9806,17,9265,17,"_popupRedirectResolver"],[9806,39,9265,39],[9806,41,9265,41,"auth"],[9806,45,9265,45],[9806,47,9265,47],[9806,63,9265,63],[9806,64,9265,64],[9806,98,9265,98],[9806,99,9265,99],[9807,4,9266,4],[9807,11,9266,11,"auth"],[9807,15,9266,15],[9807,16,9266,16,"_popupRedirectResolver"],[9807,38,9266,38],[9808,2,9267,0],[9810,2,9269,0],[9811,0,9270,0],[9812,0,9271,0],[9813,0,9272,0],[9814,0,9273,0],[9815,0,9274,0],[9816,0,9275,0],[9817,0,9276,0],[9818,0,9277,0],[9819,0,9278,0],[9820,0,9279,0],[9821,0,9280,0],[9822,0,9281,0],[9823,0,9282,0],[9824,0,9283,0],[9825,0,9284,0],[9826,2,9285,0],[9826,8,9285,6,"IdpCredential"],[9826,21,9285,19],[9826,30,9285,28,"AuthCredential"],[9826,44,9285,42],[9826,45,9285,43],[9827,4,9286,4,"constructor"],[9827,15,9286,15,"constructor"],[9827,16,9286,16,"params"],[9827,22,9286,22],[9827,24,9286,24],[9828,6,9287,8],[9828,11,9287,13],[9828,12,9287,14],[9828,20,9287,22],[9828,21,9287,23],[9828,46,9287,48],[9828,54,9287,56],[9828,55,9287,57],[9828,78,9287,80],[9828,79,9287,81],[9829,6,9288,8],[9829,10,9288,12],[9829,11,9288,13,"params"],[9829,17,9288,19],[9829,20,9288,22,"params"],[9829,26,9288,28],[9830,4,9289,4],[9831,4,9290,4,"_getIdTokenResponse"],[9831,23,9290,23,"_getIdTokenResponse"],[9831,24,9290,24,"auth"],[9831,28,9290,28],[9831,30,9290,30],[9832,6,9291,8],[9832,13,9291,15,"signInWithIdp"],[9832,26,9291,28],[9832,27,9291,29,"auth"],[9832,31,9291,33],[9832,33,9291,35],[9832,37,9291,39],[9832,38,9291,40,"_buildIdpRequest"],[9832,54,9291,56],[9832,55,9291,57],[9832,56,9291,58],[9832,57,9291,59],[9833,4,9292,4],[9834,4,9293,4,"_linkToIdToken"],[9834,18,9293,18,"_linkToIdToken"],[9834,19,9293,19,"auth"],[9834,23,9293,23],[9834,25,9293,25,"idToken"],[9834,32,9293,32],[9834,34,9293,34],[9835,6,9294,8],[9835,13,9294,15,"signInWithIdp"],[9835,26,9294,28],[9835,27,9294,29,"auth"],[9835,31,9294,33],[9835,33,9294,35],[9835,37,9294,39],[9835,38,9294,40,"_buildIdpRequest"],[9835,54,9294,56],[9835,55,9294,57,"idToken"],[9835,62,9294,64],[9835,63,9294,65],[9835,64,9294,66],[9836,4,9295,4],[9837,4,9296,4,"_getReauthenticationResolver"],[9837,32,9296,32,"_getReauthenticationResolver"],[9837,33,9296,33,"auth"],[9837,37,9296,37],[9837,39,9296,39],[9838,6,9297,8],[9838,13,9297,15,"signInWithIdp"],[9838,26,9297,28],[9838,27,9297,29,"auth"],[9838,31,9297,33],[9838,33,9297,35],[9838,37,9297,39],[9838,38,9297,40,"_buildIdpRequest"],[9838,54,9297,56],[9838,55,9297,57],[9838,56,9297,58],[9838,57,9297,59],[9839,4,9298,4],[9840,4,9299,4,"_buildIdpRequest"],[9840,20,9299,20,"_buildIdpRequest"],[9840,21,9299,21,"idToken"],[9840,28,9299,28],[9840,30,9299,30],[9841,6,9300,8],[9841,12,9300,14,"request"],[9841,19,9300,21],[9841,22,9300,24],[9842,8,9301,12,"requestUri"],[9842,18,9301,22],[9842,20,9301,24],[9842,24,9301,28],[9842,25,9301,29,"params"],[9842,31,9301,35],[9842,32,9301,36,"requestUri"],[9842,42,9301,46],[9843,8,9302,12,"sessionId"],[9843,17,9302,21],[9843,19,9302,23],[9843,23,9302,27],[9843,24,9302,28,"params"],[9843,30,9302,34],[9843,31,9302,35,"sessionId"],[9843,40,9302,44],[9844,8,9303,12,"postBody"],[9844,16,9303,20],[9844,18,9303,22],[9844,22,9303,26],[9844,23,9303,27,"params"],[9844,29,9303,33],[9844,30,9303,34,"postBody"],[9844,38,9303,42],[9845,8,9304,12,"tenantId"],[9845,16,9304,20],[9845,18,9304,22],[9845,22,9304,26],[9845,23,9304,27,"params"],[9845,29,9304,33],[9845,30,9304,34,"tenantId"],[9845,38,9304,42],[9846,8,9305,12,"pendingToken"],[9846,20,9305,24],[9846,22,9305,26],[9846,26,9305,30],[9846,27,9305,31,"params"],[9846,33,9305,37],[9846,34,9305,38,"pendingToken"],[9846,46,9305,50],[9847,8,9306,12,"returnSecureToken"],[9847,25,9306,29],[9847,27,9306,31],[9847,31,9306,35],[9848,8,9307,12,"returnIdpCredential"],[9848,27,9307,31],[9848,29,9307,33],[9849,6,9308,8],[9849,7,9308,9],[9850,6,9309,8],[9850,10,9309,12,"idToken"],[9850,17,9309,19],[9850,19,9309,21],[9851,8,9310,12,"request"],[9851,15,9310,19],[9851,16,9310,20,"idToken"],[9851,23,9310,27],[9851,26,9310,30,"idToken"],[9851,33,9310,37],[9852,6,9311,8],[9853,6,9312,8],[9853,13,9312,15,"request"],[9853,20,9312,22],[9854,4,9313,4],[9855,2,9314,0],[9856,2,9315,0],[9856,11,9315,9,"_signIn"],[9856,18,9315,16,"_signIn"],[9856,19,9315,17,"params"],[9856,25,9315,23],[9856,27,9315,25],[9857,4,9316,4],[9857,11,9316,11,"_signInWithCredential"],[9857,32,9316,32],[9857,33,9316,33,"params"],[9857,39,9316,39],[9857,40,9316,40,"auth"],[9857,44,9316,44],[9857,46,9316,46],[9857,50,9316,50,"IdpCredential"],[9857,63,9316,63],[9857,64,9316,64,"params"],[9857,70,9316,70],[9857,71,9316,71],[9857,73,9316,73,"params"],[9857,79,9316,79],[9857,80,9316,80,"bypassAuthState"],[9857,95,9316,95],[9857,96,9316,96],[9858,2,9317,0],[9859,2,9318,0],[9859,11,9318,9,"_reauth"],[9859,18,9318,16,"_reauth"],[9859,19,9318,17,"params"],[9859,25,9318,23],[9859,27,9318,25],[9860,4,9319,4],[9860,10,9319,10],[9861,6,9319,12,"auth"],[9861,10,9319,16],[9862,6,9319,18,"user"],[9863,4,9319,23],[9863,5,9319,24],[9863,8,9319,27,"params"],[9863,14,9319,33],[9864,4,9320,4,"_assert"],[9864,11,9320,11],[9864,12,9320,12,"user"],[9864,16,9320,16],[9864,18,9320,18,"auth"],[9864,22,9320,22],[9864,24,9320,24],[9864,40,9320,40],[9864,41,9320,41],[9864,75,9320,75],[9864,76,9320,76],[9865,4,9321,4],[9865,11,9321,11,"_reauthenticate"],[9865,26,9321,26],[9865,27,9321,27,"user"],[9865,31,9321,31],[9865,33,9321,33],[9865,37,9321,37,"IdpCredential"],[9865,50,9321,50],[9865,51,9321,51,"params"],[9865,57,9321,57],[9865,58,9321,58],[9865,60,9321,60,"params"],[9865,66,9321,66],[9865,67,9321,67,"bypassAuthState"],[9865,82,9321,82],[9865,83,9321,83],[9866,2,9322,0],[9867,2,9323,0],[9867,17,9323,15,"_link"],[9867,22,9323,20,"_link"],[9867,23,9323,21,"params"],[9867,29,9323,27],[9867,31,9323,29],[9868,4,9324,4],[9868,10,9324,10],[9869,6,9324,12,"auth"],[9869,10,9324,16],[9870,6,9324,18,"user"],[9871,4,9324,23],[9871,5,9324,24],[9871,8,9324,27,"params"],[9871,14,9324,33],[9872,4,9325,4,"_assert"],[9872,11,9325,11],[9872,12,9325,12,"user"],[9872,16,9325,16],[9872,18,9325,18,"auth"],[9872,22,9325,22],[9872,24,9325,24],[9872,40,9325,40],[9872,41,9325,41],[9872,75,9325,75],[9872,76,9325,76],[9873,4,9326,4],[9873,11,9326,11,"_link$1"],[9873,18,9326,18],[9873,19,9326,19,"user"],[9873,23,9326,23],[9873,25,9326,25],[9873,29,9326,29,"IdpCredential"],[9873,42,9326,42],[9873,43,9326,43,"params"],[9873,49,9326,49],[9873,50,9326,50],[9873,52,9326,52,"params"],[9873,58,9326,58],[9873,59,9326,59,"bypassAuthState"],[9873,74,9326,74],[9873,75,9326,75],[9874,2,9327,0],[9876,2,9329,0],[9877,0,9330,0],[9878,0,9331,0],[9879,0,9332,0],[9880,0,9333,0],[9881,0,9334,0],[9882,0,9335,0],[9883,0,9336,0],[9884,0,9337,0],[9885,0,9338,0],[9886,0,9339,0],[9887,0,9340,0],[9888,0,9341,0],[9889,0,9342,0],[9890,0,9343,0],[9891,0,9344,0],[9892,2,9345,0],[9893,0,9346,0],[9894,0,9347,0],[9895,0,9348,0],[9896,2,9349,0],[9896,8,9349,6,"AbstractPopupRedirectOperation"],[9896,38,9349,36],[9896,39,9349,37],[9897,4,9350,4,"constructor"],[9897,15,9350,15,"constructor"],[9897,16,9350,16,"auth"],[9897,20,9350,20],[9897,22,9350,22,"filter"],[9897,28,9350,28],[9897,30,9350,30,"resolver"],[9897,38,9350,38],[9897,40,9350,40,"user"],[9897,44,9350,44],[9897,46,9350,46,"bypassAuthState"],[9897,61,9350,61],[9897,64,9350,64],[9897,69,9350,69],[9897,71,9350,71],[9898,6,9351,8],[9898,10,9351,12],[9898,11,9351,13,"auth"],[9898,15,9351,17],[9898,18,9351,20,"auth"],[9898,22,9351,24],[9899,6,9352,8],[9899,10,9352,12],[9899,11,9352,13,"resolver"],[9899,19,9352,21],[9899,22,9352,24,"resolver"],[9899,30,9352,32],[9900,6,9353,8],[9900,10,9353,12],[9900,11,9353,13,"user"],[9900,15,9353,17],[9900,18,9353,20,"user"],[9900,22,9353,24],[9901,6,9354,8],[9901,10,9354,12],[9901,11,9354,13,"bypassAuthState"],[9901,26,9354,28],[9901,29,9354,31,"bypassAuthState"],[9901,44,9354,46],[9902,6,9355,8],[9902,10,9355,12],[9902,11,9355,13,"pendingPromise"],[9902,25,9355,27],[9902,28,9355,30],[9902,32,9355,34],[9903,6,9356,8],[9903,10,9356,12],[9903,11,9356,13,"eventManager"],[9903,23,9356,25],[9903,26,9356,28],[9903,30,9356,32],[9904,6,9357,8],[9904,10,9357,12],[9904,11,9357,13,"filter"],[9904,17,9357,19],[9904,20,9357,22,"Array"],[9904,25,9357,27],[9904,26,9357,28,"isArray"],[9904,33,9357,35],[9904,34,9357,36,"filter"],[9904,40,9357,42],[9904,41,9357,43],[9904,44,9357,46,"filter"],[9904,50,9357,52],[9904,53,9357,55],[9904,54,9357,56,"filter"],[9904,60,9357,62],[9904,61,9357,63],[9905,4,9358,4],[9906,4,9359,4,"execute"],[9906,11,9359,11,"execute"],[9906,12,9359,11],[9906,14,9359,14],[9907,6,9360,8],[9907,13,9360,15],[9907,17,9360,19,"Promise"],[9907,24,9360,26],[9907,25,9360,27],[9907,32,9360,34,"resolve"],[9907,39,9360,41],[9907,41,9360,43,"reject"],[9907,47,9360,49],[9907,52,9360,54],[9908,8,9361,12],[9908,12,9361,16],[9908,13,9361,17,"pendingPromise"],[9908,27,9361,31],[9908,30,9361,34],[9909,10,9361,36,"resolve"],[9909,17,9361,43],[9910,10,9361,45,"reject"],[9911,8,9361,52],[9911,9,9361,53],[9912,8,9362,12],[9912,12,9362,16],[9913,10,9363,16],[9913,14,9363,20],[9913,15,9363,21,"eventManager"],[9913,27,9363,33],[9913,30,9363,36],[9913,36,9363,42],[9913,40,9363,46],[9913,41,9363,47,"resolver"],[9913,49,9363,55],[9913,50,9363,56,"_initialize"],[9913,61,9363,67],[9913,62,9363,68],[9913,66,9363,72],[9913,67,9363,73,"auth"],[9913,71,9363,77],[9913,72,9363,78],[9914,10,9364,16],[9914,16,9364,22],[9914,20,9364,26],[9914,21,9364,27,"onExecution"],[9914,32,9364,38],[9914,33,9364,39],[9914,34,9364,40],[9915,10,9365,16],[9915,14,9365,20],[9915,15,9365,21,"eventManager"],[9915,27,9365,33],[9915,28,9365,34,"registerConsumer"],[9915,44,9365,50],[9915,45,9365,51],[9915,49,9365,55],[9915,50,9365,56],[9916,8,9366,12],[9916,9,9366,13],[9916,10,9367,12],[9916,17,9367,19,"e"],[9916,18,9367,20],[9916,20,9367,22],[9917,10,9368,16],[9917,14,9368,20],[9917,15,9368,21,"reject"],[9917,21,9368,27],[9917,22,9368,28,"e"],[9917,23,9368,29],[9917,24,9368,30],[9918,8,9369,12],[9919,6,9370,8],[9919,7,9370,9],[9919,8,9370,10],[9920,4,9371,4],[9921,4,9372,4],[9921,10,9372,10,"onAuthEvent"],[9921,21,9372,21,"onAuthEvent"],[9921,22,9372,22,"event"],[9921,27,9372,27],[9921,29,9372,29],[9922,6,9373,8],[9922,12,9373,14],[9923,8,9373,16,"urlResponse"],[9923,19,9373,27],[9924,8,9373,29,"sessionId"],[9924,17,9373,38],[9925,8,9373,40,"postBody"],[9925,16,9373,48],[9926,8,9373,50,"tenantId"],[9926,16,9373,58],[9927,8,9373,60,"error"],[9927,13,9373,65],[9928,8,9373,67,"type"],[9929,6,9373,72],[9929,7,9373,73],[9929,10,9373,76,"event"],[9929,15,9373,81],[9930,6,9374,8],[9930,10,9374,12,"error"],[9930,15,9374,17],[9930,17,9374,19],[9931,8,9375,12],[9931,12,9375,16],[9931,13,9375,17,"reject"],[9931,19,9375,23],[9931,20,9375,24,"error"],[9931,25,9375,29],[9931,26,9375,30],[9932,8,9376,12],[9933,6,9377,8],[9934,6,9378,8],[9934,12,9378,14,"params"],[9934,18,9378,20],[9934,21,9378,23],[9935,8,9379,12,"auth"],[9935,12,9379,16],[9935,14,9379,18],[9935,18,9379,22],[9935,19,9379,23,"auth"],[9935,23,9379,27],[9936,8,9380,12,"requestUri"],[9936,18,9380,22],[9936,20,9380,24,"urlResponse"],[9936,31,9380,35],[9937,8,9381,12,"sessionId"],[9937,17,9381,21],[9937,19,9381,23,"sessionId"],[9937,28,9381,32],[9938,8,9382,12,"tenantId"],[9938,16,9382,20],[9938,18,9382,22,"tenantId"],[9938,26,9382,30],[9938,30,9382,34,"undefined"],[9938,39,9382,43],[9939,8,9383,12,"postBody"],[9939,16,9383,20],[9939,18,9383,22,"postBody"],[9939,26,9383,30],[9939,30,9383,34,"undefined"],[9939,39,9383,43],[9940,8,9384,12,"user"],[9940,12,9384,16],[9940,14,9384,18],[9940,18,9384,22],[9940,19,9384,23,"user"],[9940,23,9384,27],[9941,8,9385,12,"bypassAuthState"],[9941,23,9385,27],[9941,25,9385,29],[9941,29,9385,33],[9941,30,9385,34,"bypassAuthState"],[9942,6,9386,8],[9942,7,9386,9],[9943,6,9387,8],[9943,10,9387,12],[9944,8,9388,12],[9944,12,9388,16],[9944,13,9388,17,"resolve"],[9944,20,9388,24],[9944,21,9388,25],[9944,27,9388,31],[9944,31,9388,35],[9944,32,9388,36,"getIdpTask"],[9944,42,9388,46],[9944,43,9388,47,"type"],[9944,47,9388,51],[9944,48,9388,52],[9944,49,9388,53,"params"],[9944,55,9388,59],[9944,56,9388,60],[9944,57,9388,61],[9945,6,9389,8],[9945,7,9389,9],[9945,8,9390,8],[9945,15,9390,15,"e"],[9945,16,9390,16],[9945,18,9390,18],[9946,8,9391,12],[9946,12,9391,16],[9946,13,9391,17,"reject"],[9946,19,9391,23],[9946,20,9391,24,"e"],[9946,21,9391,25],[9946,22,9391,26],[9947,6,9392,8],[9948,4,9393,4],[9949,4,9394,4,"onError"],[9949,11,9394,11,"onError"],[9949,12,9394,12,"error"],[9949,17,9394,17],[9949,19,9394,19],[9950,6,9395,8],[9950,10,9395,12],[9950,11,9395,13,"reject"],[9950,17,9395,19],[9950,18,9395,20,"error"],[9950,23,9395,25],[9950,24,9395,26],[9951,4,9396,4],[9952,4,9397,4,"getIdpTask"],[9952,14,9397,14,"getIdpTask"],[9952,15,9397,15,"type"],[9952,19,9397,19],[9952,21,9397,21],[9953,6,9398,8],[9953,14,9398,16,"type"],[9953,18,9398,20],[9954,8,9399,12],[9954,13,9399,17],[9954,29,9399,33],[9954,30,9399,34],[9955,8,9400,12],[9955,13,9400,17],[9955,32,9400,36],[9955,33,9400,37],[9956,10,9401,16],[9956,17,9401,23,"_signIn"],[9956,24,9401,30],[9957,8,9402,12],[9957,13,9402,17],[9957,27,9402,31],[9957,28,9402,32],[9958,8,9403,12],[9958,13,9403,17],[9958,30,9403,34],[9958,31,9403,35],[9959,10,9404,16],[9959,17,9404,23,"_link"],[9959,22,9404,28],[9960,8,9405,12],[9960,13,9405,17],[9960,29,9405,33],[9960,30,9405,34],[9961,8,9406,12],[9961,13,9406,17],[9961,32,9406,36],[9961,33,9406,37],[9962,10,9407,16],[9962,17,9407,23,"_reauth"],[9962,24,9407,30],[9963,8,9408,12],[9964,10,9409,16,"_fail"],[9964,15,9409,21],[9964,16,9409,22],[9964,20,9409,26],[9964,21,9409,27,"auth"],[9964,25,9409,31],[9964,27,9409,33],[9964,43,9409,49],[9964,44,9409,50],[9964,78,9409,84],[9964,79,9409,85],[9965,6,9410,8],[9966,4,9411,4],[9967,4,9412,4,"resolve"],[9967,11,9412,11,"resolve"],[9967,12,9412,12,"cred"],[9967,16,9412,16],[9967,18,9412,18],[9968,6,9413,8,"debugAssert"],[9968,17,9413,19],[9968,18,9413,20],[9968,22,9413,24],[9968,23,9413,25,"pendingPromise"],[9968,37,9413,39],[9968,39,9413,41],[9968,70,9413,72],[9968,71,9413,73],[9969,6,9414,8],[9969,10,9414,12],[9969,11,9414,13,"pendingPromise"],[9969,25,9414,27],[9969,26,9414,28,"resolve"],[9969,33,9414,35],[9969,34,9414,36,"cred"],[9969,38,9414,40],[9969,39,9414,41],[9970,6,9415,8],[9970,10,9415,12],[9970,11,9415,13,"unregisterAndCleanUp"],[9970,31,9415,33],[9970,32,9415,34],[9970,33,9415,35],[9971,4,9416,4],[9972,4,9417,4,"reject"],[9972,10,9417,10,"reject"],[9972,11,9417,11,"error"],[9972,16,9417,16],[9972,18,9417,18],[9973,6,9418,8,"debugAssert"],[9973,17,9418,19],[9973,18,9418,20],[9973,22,9418,24],[9973,23,9418,25,"pendingPromise"],[9973,37,9418,39],[9973,39,9418,41],[9973,70,9418,72],[9973,71,9418,73],[9974,6,9419,8],[9974,10,9419,12],[9974,11,9419,13,"pendingPromise"],[9974,25,9419,27],[9974,26,9419,28,"reject"],[9974,32,9419,34],[9974,33,9419,35,"error"],[9974,38,9419,40],[9974,39,9419,41],[9975,6,9420,8],[9975,10,9420,12],[9975,11,9420,13,"unregisterAndCleanUp"],[9975,31,9420,33],[9975,32,9420,34],[9975,33,9420,35],[9976,4,9421,4],[9977,4,9422,4,"unregisterAndCleanUp"],[9977,24,9422,24,"unregisterAndCleanUp"],[9977,25,9422,24],[9977,27,9422,27],[9978,6,9423,8],[9978,10,9423,12],[9978,14,9423,16],[9978,15,9423,17,"eventManager"],[9978,27,9423,29],[9978,29,9423,31],[9979,8,9424,12],[9979,12,9424,16],[9979,13,9424,17,"eventManager"],[9979,25,9424,29],[9979,26,9424,30,"unregisterConsumer"],[9979,44,9424,48],[9979,45,9424,49],[9979,49,9424,53],[9979,50,9424,54],[9980,6,9425,8],[9981,6,9426,8],[9981,10,9426,12],[9981,11,9426,13,"pendingPromise"],[9981,25,9426,27],[9981,28,9426,30],[9981,32,9426,34],[9982,6,9427,8],[9982,10,9427,12],[9982,11,9427,13,"cleanUp"],[9982,18,9427,20],[9982,19,9427,21],[9982,20,9427,22],[9983,4,9428,4],[9984,2,9429,0],[9986,2,9431,0],[9987,0,9432,0],[9988,0,9433,0],[9989,0,9434,0],[9990,0,9435,0],[9991,0,9436,0],[9992,0,9437,0],[9993,0,9438,0],[9994,0,9439,0],[9995,0,9440,0],[9996,0,9441,0],[9997,0,9442,0],[9998,0,9443,0],[9999,0,9444,0],[10000,0,9445,0],[10001,0,9446,0],[10002,2,9447,0],[10002,8,9447,6,"_POLL_WINDOW_CLOSE_TIMEOUT"],[10002,34,9447,32],[10002,37,9447,35],[10002,41,9447,39,"Delay"],[10002,46,9447,44],[10002,47,9447,45],[10002,51,9447,49],[10002,53,9447,51],[10002,58,9447,56],[10002,59,9447,57],[10003,2,9448,0],[10004,0,9449,0],[10005,0,9450,0],[10006,0,9451,0],[10007,0,9452,0],[10008,0,9453,0],[10009,0,9454,0],[10010,0,9455,0],[10011,0,9456,0],[10012,0,9457,0],[10013,0,9458,0],[10014,0,9459,0],[10015,0,9460,0],[10016,0,9461,0],[10017,0,9462,0],[10018,0,9463,0],[10019,0,9464,0],[10020,0,9465,0],[10021,0,9466,0],[10022,0,9467,0],[10023,0,9468,0],[10024,0,9469,0],[10025,0,9470,0],[10026,0,9471,0],[10027,0,9472,0],[10028,0,9473,0],[10029,0,9474,0],[10030,0,9475,0],[10031,0,9476,0],[10032,0,9477,0],[10033,0,9478,0],[10034,2,9479,0],[10034,17,9479,15,"signInWithPopup"],[10034,32,9479,30,"signInWithPopup"],[10034,33,9479,31,"auth"],[10034,37,9479,35],[10034,39,9479,37,"provider"],[10034,47,9479,45],[10034,49,9479,47,"resolver"],[10034,57,9479,55],[10034,59,9479,57],[10035,4,9480,4],[10035,8,9480,8],[10035,12,9480,8,"_isFirebaseServerApp"],[10035,24,9480,28],[10035,25,9480,28,"_isFirebaseServerApp"],[10035,45,9480,28],[10035,47,9480,29,"auth"],[10035,51,9480,33],[10035,52,9480,34,"app"],[10035,55,9480,37],[10035,56,9480,38],[10035,58,9480,40],[10036,6,9481,8],[10036,13,9481,15,"Promise"],[10036,20,9481,22],[10036,21,9481,23,"reject"],[10036,27,9481,29],[10036,28,9481,30,"_createError"],[10036,40,9481,42],[10036,41,9481,43,"auth"],[10036,45,9481,47],[10036,47,9481,49],[10036,92,9481,94],[10036,93,9481,95],[10036,136,9481,138],[10036,137,9481,139],[10036,138,9481,140],[10037,4,9482,4],[10038,4,9483,4],[10038,10,9483,10,"authInternal"],[10038,22,9483,22],[10038,25,9483,25,"_castAuth"],[10038,34,9483,34],[10038,35,9483,35,"auth"],[10038,39,9483,39],[10038,40,9483,40],[10039,4,9484,4,"_assertInstanceOf"],[10039,21,9484,21],[10039,22,9484,22,"auth"],[10039,26,9484,26],[10039,28,9484,28,"provider"],[10039,36,9484,36],[10039,38,9484,38,"FederatedAuthProvider"],[10039,59,9484,59],[10039,60,9484,60],[10040,4,9485,4],[10040,10,9485,10,"resolverInternal"],[10040,26,9485,26],[10040,29,9485,29,"_withDefaultResolver"],[10040,49,9485,49],[10040,50,9485,50,"authInternal"],[10040,62,9485,62],[10040,64,9485,64,"resolver"],[10040,72,9485,72],[10040,73,9485,73],[10041,4,9486,4],[10041,10,9486,10,"action"],[10041,16,9486,16],[10041,19,9486,19],[10041,23,9486,23,"PopupOperation"],[10041,37,9486,37],[10041,38,9486,38,"authInternal"],[10041,50,9486,50],[10041,52,9486,52],[10041,68,9486,68],[10041,69,9486,69],[10041,108,9486,108,"provider"],[10041,116,9486,116],[10041,118,9486,118,"resolverInternal"],[10041,134,9486,134],[10041,135,9486,135],[10042,4,9487,4],[10042,11,9487,11,"action"],[10042,17,9487,17],[10042,18,9487,18,"executeNotNull"],[10042,32,9487,32],[10042,33,9487,33],[10042,34,9487,34],[10043,2,9488,0],[10044,2,9489,0],[10045,0,9490,0],[10046,0,9491,0],[10047,0,9492,0],[10048,0,9493,0],[10049,0,9494,0],[10050,0,9495,0],[10051,0,9496,0],[10052,0,9497,0],[10053,0,9498,0],[10054,0,9499,0],[10055,0,9500,0],[10056,0,9501,0],[10057,0,9502,0],[10058,0,9503,0],[10059,0,9504,0],[10060,0,9505,0],[10061,0,9506,0],[10062,0,9507,0],[10063,0,9508,0],[10064,0,9509,0],[10065,0,9510,0],[10066,0,9511,0],[10067,0,9512,0],[10068,0,9513,0],[10069,0,9514,0],[10070,0,9515,0],[10071,0,9516,0],[10072,2,9517,0],[10072,17,9517,15,"reauthenticateWithPopup"],[10072,40,9517,38,"reauthenticateWithPopup"],[10072,41,9517,39,"user"],[10072,45,9517,43],[10072,47,9517,45,"provider"],[10072,55,9517,53],[10072,57,9517,55,"resolver"],[10072,65,9517,63],[10072,67,9517,65],[10073,4,9518,4],[10073,10,9518,10,"userInternal"],[10073,22,9518,22],[10073,25,9518,25],[10073,29,9518,25,"getModularInstance"],[10073,42,9518,43],[10073,43,9518,43,"getModularInstance"],[10073,61,9518,43],[10073,63,9518,44,"user"],[10073,67,9518,48],[10073,68,9518,49],[10074,4,9519,4],[10074,8,9519,8],[10074,12,9519,8,"_isFirebaseServerApp"],[10074,24,9519,28],[10074,25,9519,28,"_isFirebaseServerApp"],[10074,45,9519,28],[10074,47,9519,29,"userInternal"],[10074,59,9519,41],[10074,60,9519,42,"auth"],[10074,64,9519,46],[10074,65,9519,47,"app"],[10074,68,9519,50],[10074,69,9519,51],[10074,71,9519,53],[10075,6,9520,8],[10075,13,9520,15,"Promise"],[10075,20,9520,22],[10075,21,9520,23,"reject"],[10075,27,9520,29],[10075,28,9520,30,"_createError"],[10075,40,9520,42],[10075,41,9520,43,"userInternal"],[10075,53,9520,55],[10075,54,9520,56,"auth"],[10075,58,9520,60],[10075,60,9520,62],[10075,105,9520,107],[10075,106,9520,108],[10075,149,9520,151],[10075,150,9520,152],[10075,151,9520,153],[10076,4,9521,4],[10077,4,9522,4,"_assertInstanceOf"],[10077,21,9522,21],[10077,22,9522,22,"userInternal"],[10077,34,9522,34],[10077,35,9522,35,"auth"],[10077,39,9522,39],[10077,41,9522,41,"provider"],[10077,49,9522,49],[10077,51,9522,51,"FederatedAuthProvider"],[10077,72,9522,72],[10077,73,9522,73],[10078,4,9523,4],[10078,10,9523,10,"resolverInternal"],[10078,26,9523,26],[10078,29,9523,29,"_withDefaultResolver"],[10078,49,9523,49],[10078,50,9523,50,"userInternal"],[10078,62,9523,62],[10078,63,9523,63,"auth"],[10078,67,9523,67],[10078,69,9523,69,"resolver"],[10078,77,9523,77],[10078,78,9523,78],[10079,4,9524,4],[10079,10,9524,10,"action"],[10079,16,9524,16],[10079,19,9524,19],[10079,23,9524,23,"PopupOperation"],[10079,37,9524,37],[10079,38,9524,38,"userInternal"],[10079,50,9524,50],[10079,51,9524,51,"auth"],[10079,55,9524,55],[10079,57,9524,57],[10079,73,9524,73],[10079,74,9524,74],[10079,112,9524,112,"provider"],[10079,120,9524,120],[10079,122,9524,122,"resolverInternal"],[10079,138,9524,138],[10079,140,9524,140,"userInternal"],[10079,152,9524,152],[10079,153,9524,153],[10080,4,9525,4],[10080,11,9525,11,"action"],[10080,17,9525,17],[10080,18,9525,18,"executeNotNull"],[10080,32,9525,32],[10080,33,9525,33],[10080,34,9525,34],[10081,2,9526,0],[10082,2,9527,0],[10083,0,9528,0],[10084,0,9529,0],[10085,0,9530,0],[10086,0,9531,0],[10087,0,9532,0],[10088,0,9533,0],[10089,0,9534,0],[10090,0,9535,0],[10091,0,9536,0],[10092,0,9537,0],[10093,0,9538,0],[10094,0,9539,0],[10095,0,9540,0],[10096,0,9541,0],[10097,0,9542,0],[10098,0,9543,0],[10099,0,9544,0],[10100,0,9545,0],[10101,0,9546,0],[10102,0,9547,0],[10103,0,9548,0],[10104,0,9549,0],[10105,0,9550,0],[10106,0,9551,0],[10107,2,9552,0],[10107,17,9552,15,"linkWithPopup"],[10107,30,9552,28,"linkWithPopup"],[10107,31,9552,29,"user"],[10107,35,9552,33],[10107,37,9552,35,"provider"],[10107,45,9552,43],[10107,47,9552,45,"resolver"],[10107,55,9552,53],[10107,57,9552,55],[10108,4,9553,4],[10108,10,9553,10,"userInternal"],[10108,22,9553,22],[10108,25,9553,25],[10108,29,9553,25,"getModularInstance"],[10108,42,9553,43],[10108,43,9553,43,"getModularInstance"],[10108,61,9553,43],[10108,63,9553,44,"user"],[10108,67,9553,48],[10108,68,9553,49],[10109,4,9554,4,"_assertInstanceOf"],[10109,21,9554,21],[10109,22,9554,22,"userInternal"],[10109,34,9554,34],[10109,35,9554,35,"auth"],[10109,39,9554,39],[10109,41,9554,41,"provider"],[10109,49,9554,49],[10109,51,9554,51,"FederatedAuthProvider"],[10109,72,9554,72],[10109,73,9554,73],[10110,4,9555,4],[10110,10,9555,10,"resolverInternal"],[10110,26,9555,26],[10110,29,9555,29,"_withDefaultResolver"],[10110,49,9555,49],[10110,50,9555,50,"userInternal"],[10110,62,9555,62],[10110,63,9555,63,"auth"],[10110,67,9555,67],[10110,69,9555,69,"resolver"],[10110,77,9555,77],[10110,78,9555,78],[10111,4,9556,4],[10111,10,9556,10,"action"],[10111,16,9556,16],[10111,19,9556,19],[10111,23,9556,23,"PopupOperation"],[10111,37,9556,37],[10111,38,9556,38,"userInternal"],[10111,50,9556,50],[10111,51,9556,51,"auth"],[10111,55,9556,55],[10111,57,9556,57],[10111,71,9556,71],[10111,72,9556,72],[10111,108,9556,108,"provider"],[10111,116,9556,116],[10111,118,9556,118,"resolverInternal"],[10111,134,9556,134],[10111,136,9556,136,"userInternal"],[10111,148,9556,148],[10111,149,9556,149],[10112,4,9557,4],[10112,11,9557,11,"action"],[10112,17,9557,17],[10112,18,9557,18,"executeNotNull"],[10112,32,9557,32],[10112,33,9557,33],[10112,34,9557,34],[10113,2,9558,0],[10114,2,9559,0],[10115,0,9560,0],[10116,0,9561,0],[10117,0,9562,0],[10118,0,9563,0],[10119,2,9564,0],[10119,8,9564,6,"PopupOperation"],[10119,22,9564,20],[10119,31,9564,29,"AbstractPopupRedirectOperation"],[10119,61,9564,59],[10119,62,9564,60],[10120,4,9565,4,"constructor"],[10120,15,9565,15,"constructor"],[10120,16,9565,16,"auth"],[10120,20,9565,20],[10120,22,9565,22,"filter"],[10120,28,9565,28],[10120,30,9565,30,"provider"],[10120,38,9565,38],[10120,40,9565,40,"resolver"],[10120,48,9565,48],[10120,50,9565,50,"user"],[10120,54,9565,54],[10120,56,9565,56],[10121,6,9566,8],[10121,11,9566,13],[10121,12,9566,14,"auth"],[10121,16,9566,18],[10121,18,9566,20,"filter"],[10121,24,9566,26],[10121,26,9566,28,"resolver"],[10121,34,9566,36],[10121,36,9566,38,"user"],[10121,40,9566,42],[10121,41,9566,43],[10122,6,9567,8],[10122,10,9567,12],[10122,11,9567,13,"provider"],[10122,19,9567,21],[10122,22,9567,24,"provider"],[10122,30,9567,32],[10123,6,9568,8],[10123,10,9568,12],[10123,11,9568,13,"authWindow"],[10123,21,9568,23],[10123,24,9568,26],[10123,28,9568,30],[10124,6,9569,8],[10124,10,9569,12],[10124,11,9569,13,"pollId"],[10124,17,9569,19],[10124,20,9569,22],[10124,24,9569,26],[10125,6,9570,8],[10125,10,9570,12,"PopupOperation"],[10125,24,9570,26],[10125,25,9570,27,"currentPopupAction"],[10125,43,9570,45],[10125,45,9570,47],[10126,8,9571,12,"PopupOperation"],[10126,22,9571,26],[10126,23,9571,27,"currentPopupAction"],[10126,41,9571,45],[10126,42,9571,46,"cancel"],[10126,48,9571,52],[10126,49,9571,53],[10126,50,9571,54],[10127,6,9572,8],[10128,6,9573,8,"PopupOperation"],[10128,20,9573,22],[10128,21,9573,23,"currentPopupAction"],[10128,39,9573,41],[10128,42,9573,44],[10128,46,9573,48],[10129,4,9574,4],[10130,4,9575,4],[10130,10,9575,10,"executeNotNull"],[10130,24,9575,24,"executeNotNull"],[10130,25,9575,24],[10130,27,9575,27],[10131,6,9576,8],[10131,12,9576,14,"result"],[10131,18,9576,20],[10131,21,9576,23],[10131,27,9576,29],[10131,31,9576,33],[10131,32,9576,34,"execute"],[10131,39,9576,41],[10131,40,9576,42],[10131,41,9576,43],[10132,6,9577,8,"_assert"],[10132,13,9577,15],[10132,14,9577,16,"result"],[10132,20,9577,22],[10132,22,9577,24],[10132,26,9577,28],[10132,27,9577,29,"auth"],[10132,31,9577,33],[10132,33,9577,35],[10132,49,9577,51],[10132,50,9577,52],[10132,84,9577,86],[10132,85,9577,87],[10133,6,9578,8],[10133,13,9578,15,"result"],[10133,19,9578,21],[10134,4,9579,4],[10135,4,9580,4],[10135,10,9580,10,"onExecution"],[10135,21,9580,21,"onExecution"],[10135,22,9580,21],[10135,24,9580,24],[10136,6,9581,8,"debugAssert"],[10136,17,9581,19],[10136,18,9581,20],[10136,22,9581,24],[10136,23,9581,25,"filter"],[10136,29,9581,31],[10136,30,9581,32,"length"],[10136,36,9581,38],[10136,41,9581,43],[10136,42,9581,44],[10136,44,9581,46],[10136,84,9581,86],[10136,85,9581,87],[10137,6,9582,8],[10137,12,9582,14,"eventId"],[10137,19,9582,21],[10137,22,9582,24,"_generateEventId"],[10137,38,9582,40],[10137,39,9582,41],[10137,40,9582,42],[10138,6,9583,8],[10138,10,9583,12],[10138,11,9583,13,"authWindow"],[10138,21,9583,23],[10138,24,9583,26],[10138,30,9583,32],[10138,34,9583,36],[10138,35,9583,37,"resolver"],[10138,43,9583,45],[10138,44,9583,46,"_openPopup"],[10138,54,9583,56],[10138,55,9583,57],[10138,59,9583,61],[10138,60,9583,62,"auth"],[10138,64,9583,66],[10138,66,9583,68],[10138,70,9583,72],[10138,71,9583,73,"provider"],[10138,79,9583,81],[10138,81,9583,83],[10138,85,9583,87],[10138,86,9583,88,"filter"],[10138,92,9583,94],[10138,93,9583,95],[10138,94,9583,96],[10138,95,9583,97],[10139,6,9583,99],[10140,6,9584,8,"eventId"],[10140,13,9584,15],[10140,14,9584,16],[10141,6,9585,8],[10141,10,9585,12],[10141,11,9585,13,"authWindow"],[10141,21,9585,23],[10141,22,9585,24,"associatedEvent"],[10141,37,9585,39],[10141,40,9585,42,"eventId"],[10141,47,9585,49],[10142,6,9586,8],[10143,6,9587,8],[10144,6,9588,8],[10145,6,9589,8],[10146,6,9590,8],[10147,6,9591,8],[10148,6,9592,8],[10149,6,9593,8],[10149,10,9593,12],[10149,11,9593,13,"resolver"],[10149,19,9593,21],[10149,20,9593,22,"_originValidation"],[10149,37,9593,39],[10149,38,9593,40],[10149,42,9593,44],[10149,43,9593,45,"auth"],[10149,47,9593,49],[10149,48,9593,50],[10149,49,9593,51,"catch"],[10149,54,9593,56],[10149,55,9593,57,"e"],[10149,56,9593,58],[10149,60,9593,62],[10150,8,9594,12],[10150,12,9594,16],[10150,13,9594,17,"reject"],[10150,19,9594,23],[10150,20,9594,24,"e"],[10150,21,9594,25],[10150,22,9594,26],[10151,6,9595,8],[10151,7,9595,9],[10151,8,9595,10],[10152,6,9596,8],[10152,10,9596,12],[10152,11,9596,13,"resolver"],[10152,19,9596,21],[10152,20,9596,22,"_isIframeWebStorageSupported"],[10152,48,9596,50],[10152,49,9596,51],[10152,53,9596,55],[10152,54,9596,56,"auth"],[10152,58,9596,60],[10152,60,9596,62,"isSupported"],[10152,71,9596,73],[10152,75,9596,77],[10153,8,9597,12],[10153,12,9597,16],[10153,13,9597,17,"isSupported"],[10153,24,9597,28],[10153,26,9597,30],[10154,10,9598,16],[10154,14,9598,20],[10154,15,9598,21,"reject"],[10154,21,9598,27],[10154,22,9598,28,"_createError"],[10154,34,9598,40],[10154,35,9598,41],[10154,39,9598,45],[10154,40,9598,46,"auth"],[10154,44,9598,50],[10154,46,9598,52],[10154,71,9598,77],[10154,72,9598,78],[10154,115,9598,121],[10154,116,9598,122],[10154,117,9598,123],[10155,8,9599,12],[10156,6,9600,8],[10156,7,9600,9],[10156,8,9600,10],[10157,6,9601,8],[10158,6,9602,8],[10158,10,9602,12],[10158,11,9602,13,"pollUserCancellation"],[10158,31,9602,33],[10158,32,9602,34],[10158,33,9602,35],[10159,4,9603,4],[10160,4,9604,4],[10160,8,9604,8,"eventId"],[10160,15,9604,15,"eventId"],[10160,16,9604,15],[10160,18,9604,18],[10161,6,9605,8],[10161,13,9605,15],[10161,17,9605,19],[10161,18,9605,20,"authWindow"],[10161,28,9605,30],[10161,30,9605,32,"associatedEvent"],[10161,45,9605,47],[10161,49,9605,51],[10161,53,9605,55],[10162,4,9606,4],[10163,4,9607,4,"cancel"],[10163,10,9607,10,"cancel"],[10163,11,9607,10],[10163,13,9607,13],[10164,6,9608,8],[10164,10,9608,12],[10164,11,9608,13,"reject"],[10164,17,9608,19],[10164,18,9608,20,"_createError"],[10164,30,9608,32],[10164,31,9608,33],[10164,35,9608,37],[10164,36,9608,38,"auth"],[10164,40,9608,42],[10164,42,9608,44],[10164,67,9608,69],[10164,68,9608,70],[10164,109,9608,111],[10164,110,9608,112],[10164,111,9608,113],[10165,4,9609,4],[10166,4,9610,4,"cleanUp"],[10166,11,9610,11,"cleanUp"],[10166,12,9610,11],[10166,14,9610,14],[10167,6,9611,8],[10167,10,9611,12],[10167,14,9611,16],[10167,15,9611,17,"authWindow"],[10167,25,9611,27],[10167,27,9611,29],[10168,8,9612,12],[10168,12,9612,16],[10168,13,9612,17,"authWindow"],[10168,23,9612,27],[10168,24,9612,28,"close"],[10168,29,9612,33],[10168,30,9612,34],[10168,31,9612,35],[10169,6,9613,8],[10170,6,9614,8],[10170,10,9614,12],[10170,14,9614,16],[10170,15,9614,17,"pollId"],[10170,21,9614,23],[10170,23,9614,25],[10171,8,9615,12,"window"],[10171,14,9615,18],[10171,15,9615,19,"clearTimeout"],[10171,27,9615,31],[10171,28,9615,32],[10171,32,9615,36],[10171,33,9615,37,"pollId"],[10171,39,9615,43],[10171,40,9615,44],[10172,6,9616,8],[10173,6,9617,8],[10173,10,9617,12],[10173,11,9617,13,"authWindow"],[10173,21,9617,23],[10173,24,9617,26],[10173,28,9617,30],[10174,6,9618,8],[10174,10,9618,12],[10174,11,9618,13,"pollId"],[10174,17,9618,19],[10174,20,9618,22],[10174,24,9618,26],[10175,6,9619,8,"PopupOperation"],[10175,20,9619,22],[10175,21,9619,23,"currentPopupAction"],[10175,39,9619,41],[10175,42,9619,44],[10175,46,9619,48],[10176,4,9620,4],[10177,4,9621,4,"pollUserCancellation"],[10177,24,9621,24,"pollUserCancellation"],[10177,25,9621,24],[10177,27,9621,27],[10178,6,9622,8],[10178,12,9622,14,"poll"],[10178,16,9622,18],[10178,19,9622,21,"poll"],[10178,20,9622,21],[10178,25,9622,27],[10179,8,9623,12],[10179,12,9623,16],[10179,16,9623,20],[10179,17,9623,21,"authWindow"],[10179,27,9623,31],[10179,29,9623,33,"window"],[10179,35,9623,39],[10179,37,9623,41,"closed"],[10179,43,9623,47],[10179,45,9623,49],[10180,10,9624,16],[10181,10,9625,16],[10182,10,9626,16],[10183,10,9627,16],[10184,10,9628,16],[10185,10,9629,16],[10185,14,9629,20],[10185,15,9629,21,"pollId"],[10185,21,9629,27],[10185,24,9629,30,"window"],[10185,30,9629,36],[10185,31,9629,37,"setTimeout"],[10185,41,9629,47],[10185,42,9629,48],[10185,48,9629,54],[10186,12,9630,20],[10186,16,9630,24],[10186,17,9630,25,"pollId"],[10186,23,9630,31],[10186,26,9630,34],[10186,30,9630,38],[10187,12,9631,20],[10187,16,9631,24],[10187,17,9631,25,"reject"],[10187,23,9631,31],[10187,24,9631,32,"_createError"],[10187,36,9631,44],[10187,37,9631,45],[10187,41,9631,49],[10187,42,9631,50,"auth"],[10187,46,9631,54],[10187,48,9631,56],[10187,70,9631,78],[10187,71,9631,79],[10187,111,9631,119],[10187,112,9631,120],[10187,113,9631,121],[10188,10,9632,16],[10188,11,9632,17],[10188,13,9632,19],[10188,17,9632,23],[10188,18,9632,24],[10188,43,9632,49],[10188,44,9632,50],[10189,10,9633,16],[10190,8,9634,12],[10191,8,9635,12],[10191,12,9635,16],[10191,13,9635,17,"pollId"],[10191,19,9635,23],[10191,22,9635,26,"window"],[10191,28,9635,32],[10191,29,9635,33,"setTimeout"],[10191,39,9635,43],[10191,40,9635,44,"poll"],[10191,44,9635,48],[10191,46,9635,50,"_POLL_WINDOW_CLOSE_TIMEOUT"],[10191,72,9635,76],[10191,73,9635,77,"get"],[10191,76,9635,80],[10191,77,9635,81],[10191,78,9635,82],[10191,79,9635,83],[10192,6,9636,8],[10192,7,9636,9],[10193,6,9637,8,"poll"],[10193,10,9637,12],[10193,11,9637,13],[10193,12,9637,14],[10194,4,9638,4],[10195,2,9639,0],[10196,2,9640,0],[10197,2,9641,0],[10198,2,9642,0,"PopupOperation"],[10198,16,9642,14],[10198,17,9642,15,"currentPopupAction"],[10198,35,9642,33],[10198,38,9642,36],[10198,42,9642,40],[10200,2,9644,0],[10201,0,9645,0],[10202,0,9646,0],[10203,0,9647,0],[10204,0,9648,0],[10205,0,9649,0],[10206,0,9650,0],[10207,0,9651,0],[10208,0,9652,0],[10209,0,9653,0],[10210,0,9654,0],[10211,0,9655,0],[10212,0,9656,0],[10213,0,9657,0],[10214,0,9658,0],[10215,0,9659,0],[10216,2,9660,0],[10216,8,9660,6,"PENDING_REDIRECT_KEY"],[10216,28,9660,26],[10216,31,9660,29],[10216,48,9660,46],[10217,2,9661,0],[10218,2,9662,0],[10219,2,9663,0],[10219,8,9663,6,"redirectOutcomeMap"],[10219,26,9663,24],[10219,29,9663,27],[10219,33,9663,31,"Map"],[10219,36,9663,34],[10219,37,9663,35],[10219,38,9663,36],[10220,2,9664,0],[10220,8,9664,6,"RedirectAction"],[10220,22,9664,20],[10220,31,9664,29,"AbstractPopupRedirectOperation"],[10220,61,9664,59],[10220,62,9664,60],[10221,4,9665,4,"constructor"],[10221,15,9665,15,"constructor"],[10221,16,9665,16,"auth"],[10221,20,9665,20],[10221,22,9665,22,"resolver"],[10221,30,9665,30],[10221,32,9665,32,"bypassAuthState"],[10221,47,9665,47],[10221,50,9665,50],[10221,55,9665,55],[10221,57,9665,57],[10222,6,9666,8],[10222,11,9666,13],[10222,12,9666,14,"auth"],[10222,16,9666,18],[10222,18,9666,20],[10222,19,9667,12],[10222,38,9667,31],[10222,39,9667,32],[10222,81,9668,12],[10222,98,9668,29],[10222,99,9668,30],[10222,138,9669,12],[10222,157,9669,31],[10222,158,9669,32],[10222,199,9670,12],[10222,208,9670,21],[10222,209,9670,22],[10222,237,9671,9],[10222,239,9671,11,"resolver"],[10222,247,9671,19],[10222,249,9671,21,"undefined"],[10222,258,9671,30],[10222,260,9671,32,"bypassAuthState"],[10222,275,9671,47],[10222,276,9671,48],[10223,6,9672,8],[10223,10,9672,12],[10223,11,9672,13,"eventId"],[10223,18,9672,20],[10223,21,9672,23],[10223,25,9672,27],[10224,4,9673,4],[10225,4,9674,4],[10226,0,9675,0],[10227,0,9676,0],[10228,0,9677,0],[10229,4,9678,4],[10229,10,9678,10,"execute"],[10229,17,9678,17,"execute"],[10229,18,9678,17],[10229,20,9678,20],[10230,6,9679,8],[10230,10,9679,12,"readyOutcome"],[10230,22,9679,24],[10230,25,9679,27,"redirectOutcomeMap"],[10230,43,9679,45],[10230,44,9679,46,"get"],[10230,47,9679,49],[10230,48,9679,50],[10230,52,9679,54],[10230,53,9679,55,"auth"],[10230,57,9679,59],[10230,58,9679,60,"_key"],[10230,62,9679,64],[10230,63,9679,65],[10230,64,9679,66],[10230,65,9679,67],[10231,6,9680,8],[10231,10,9680,12],[10231,11,9680,13,"readyOutcome"],[10231,23,9680,25],[10231,25,9680,27],[10232,8,9681,12],[10232,12,9681,16],[10233,10,9682,16],[10233,16,9682,22,"hasPendingRedirect"],[10233,34,9682,40],[10233,37,9682,43],[10233,43,9682,49,"_getAndClearPendingRedirectStatus"],[10233,76,9682,82],[10233,77,9682,83],[10233,81,9682,87],[10233,82,9682,88,"resolver"],[10233,90,9682,96],[10233,92,9682,98],[10233,96,9682,102],[10233,97,9682,103,"auth"],[10233,101,9682,107],[10233,102,9682,108],[10234,10,9683,16],[10234,16,9683,22,"result"],[10234,22,9683,28],[10234,25,9683,31,"hasPendingRedirect"],[10234,43,9683,49],[10234,46,9683,52],[10234,52,9683,58],[10234,57,9683,63],[10234,58,9683,64,"execute"],[10234,65,9683,71],[10234,66,9683,72],[10234,67,9683,73],[10234,70,9683,76],[10234,74,9683,80],[10235,10,9684,16,"readyOutcome"],[10235,22,9684,28],[10235,25,9684,31,"readyOutcome"],[10235,26,9684,31],[10235,31,9684,37,"Promise"],[10235,38,9684,44],[10235,39,9684,45,"resolve"],[10235,46,9684,52],[10235,47,9684,53,"result"],[10235,53,9684,59],[10235,54,9684,60],[10236,8,9685,12],[10236,9,9685,13],[10236,10,9686,12],[10236,17,9686,19,"e"],[10236,18,9686,20],[10236,20,9686,22],[10237,10,9687,16,"readyOutcome"],[10237,22,9687,28],[10237,25,9687,31,"readyOutcome"],[10237,26,9687,31],[10237,31,9687,37,"Promise"],[10237,38,9687,44],[10237,39,9687,45,"reject"],[10237,45,9687,51],[10237,46,9687,52,"e"],[10237,47,9687,53],[10237,48,9687,54],[10238,8,9688,12],[10239,8,9689,12,"redirectOutcomeMap"],[10239,26,9689,30],[10239,27,9689,31,"set"],[10239,30,9689,34],[10239,31,9689,35],[10239,35,9689,39],[10239,36,9689,40,"auth"],[10239,40,9689,44],[10239,41,9689,45,"_key"],[10239,45,9689,49],[10239,46,9689,50],[10239,47,9689,51],[10239,49,9689,53,"readyOutcome"],[10239,61,9689,65],[10239,62,9689,66],[10240,6,9690,8],[10241,6,9691,8],[10242,6,9692,8],[10243,6,9693,8],[10243,10,9693,12],[10243,11,9693,13],[10243,15,9693,17],[10243,16,9693,18,"bypassAuthState"],[10243,31,9693,33],[10243,33,9693,35],[10244,8,9694,12,"redirectOutcomeMap"],[10244,26,9694,30],[10244,27,9694,31,"set"],[10244,30,9694,34],[10244,31,9694,35],[10244,35,9694,39],[10244,36,9694,40,"auth"],[10244,40,9694,44],[10244,41,9694,45,"_key"],[10244,45,9694,49],[10244,46,9694,50],[10244,47,9694,51],[10244,49,9694,53],[10244,55,9694,59,"Promise"],[10244,62,9694,66],[10244,63,9694,67,"resolve"],[10244,70,9694,74],[10244,71,9694,75],[10244,75,9694,79],[10244,76,9694,80],[10244,77,9694,81],[10245,6,9695,8],[10246,6,9696,8],[10246,13,9696,15,"readyOutcome"],[10246,25,9696,27],[10246,26,9696,28],[10246,27,9696,29],[10247,4,9697,4],[10248,4,9698,4],[10248,10,9698,10,"onAuthEvent"],[10248,21,9698,21,"onAuthEvent"],[10248,22,9698,22,"event"],[10248,27,9698,27],[10248,29,9698,29],[10249,6,9699,8],[10249,10,9699,12,"event"],[10249,15,9699,17],[10249,16,9699,18,"type"],[10249,20,9699,22],[10249,25,9699,27],[10249,44,9699,46],[10249,45,9699,47],[10249,87,9699,89],[10250,8,9700,12],[10250,15,9700,19],[10250,20,9700,24],[10250,21,9700,25,"onAuthEvent"],[10250,32,9700,36],[10250,33,9700,37,"event"],[10250,38,9700,42],[10250,39,9700,43],[10251,6,9701,8],[10251,7,9701,9],[10251,13,9702,13],[10251,17,9702,17,"event"],[10251,22,9702,22],[10251,23,9702,23,"type"],[10251,27,9702,27],[10251,32,9702,32],[10251,41,9702,41],[10251,42,9702,42],[10251,71,9702,71],[10252,8,9703,12],[10253,8,9704,12],[10253,12,9704,16],[10253,13,9704,17,"resolve"],[10253,20,9704,24],[10253,21,9704,25],[10253,25,9704,29],[10253,26,9704,30],[10254,8,9705,12],[10255,6,9706,8],[10256,6,9707,8],[10256,10,9707,12,"event"],[10256,15,9707,17],[10256,16,9707,18,"eventId"],[10256,23,9707,25],[10256,25,9707,27],[10257,8,9708,12],[10257,14,9708,18,"user"],[10257,18,9708,22],[10257,21,9708,25],[10257,27,9708,31],[10257,31,9708,35],[10257,32,9708,36,"auth"],[10257,36,9708,40],[10257,37,9708,41,"_redirectUserForId"],[10257,55,9708,59],[10257,56,9708,60,"event"],[10257,61,9708,65],[10257,62,9708,66,"eventId"],[10257,69,9708,73],[10257,70,9708,74],[10258,8,9709,12],[10258,12,9709,16,"user"],[10258,16,9709,20],[10258,18,9709,22],[10259,10,9710,16],[10259,14,9710,20],[10259,15,9710,21,"user"],[10259,19,9710,25],[10259,22,9710,28,"user"],[10259,26,9710,32],[10260,10,9711,16],[10260,17,9711,23],[10260,22,9711,28],[10260,23,9711,29,"onAuthEvent"],[10260,34,9711,40],[10260,35,9711,41,"event"],[10260,40,9711,46],[10260,41,9711,47],[10261,8,9712,12],[10261,9,9712,13],[10261,15,9713,17],[10262,10,9714,16],[10262,14,9714,20],[10262,15,9714,21,"resolve"],[10262,22,9714,28],[10262,23,9714,29],[10262,27,9714,33],[10262,28,9714,34],[10263,8,9715,12],[10264,6,9716,8],[10265,4,9717,4],[10266,4,9718,4],[10266,10,9718,10,"onExecution"],[10266,21,9718,21,"onExecution"],[10266,22,9718,21],[10266,24,9718,24],[10266,25,9718,26],[10267,4,9719,4,"cleanUp"],[10267,11,9719,11,"cleanUp"],[10267,12,9719,11],[10267,14,9719,14],[10267,15,9719,16],[10268,2,9720,0],[10269,2,9721,0],[10269,17,9721,15,"_getAndClearPendingRedirectStatus"],[10269,50,9721,48,"_getAndClearPendingRedirectStatus"],[10269,51,9721,49,"resolver"],[10269,59,9721,57],[10269,61,9721,59,"auth"],[10269,65,9721,63],[10269,67,9721,65],[10270,4,9722,4],[10270,10,9722,10,"key"],[10270,13,9722,13],[10270,16,9722,16,"pendingRedirectKey"],[10270,34,9722,34],[10270,35,9722,35,"auth"],[10270,39,9722,39],[10270,40,9722,40],[10271,4,9723,4],[10271,10,9723,10,"persistence"],[10271,21,9723,21],[10271,24,9723,24,"resolverPersistence"],[10271,43,9723,43],[10271,44,9723,44,"resolver"],[10271,52,9723,52],[10271,53,9723,53],[10272,4,9724,4],[10272,8,9724,8],[10272,10,9724,10],[10272,16,9724,16,"persistence"],[10272,27,9724,27],[10272,28,9724,28,"_isAvailable"],[10272,40,9724,40],[10272,41,9724,41],[10272,42,9724,42],[10272,43,9724,43],[10272,45,9724,45],[10273,6,9725,8],[10273,13,9725,15],[10273,18,9725,20],[10274,4,9726,4],[10275,4,9727,4],[10275,10,9727,10,"hasPendingRedirect"],[10275,28,9727,28],[10275,31,9727,31],[10275,32,9727,32],[10275,38,9727,38,"persistence"],[10275,49,9727,49],[10275,50,9727,50,"_get"],[10275,54,9727,54],[10275,55,9727,55,"key"],[10275,58,9727,58],[10275,59,9727,59],[10275,65,9727,65],[10275,71,9727,71],[10276,4,9728,4],[10276,10,9728,10,"persistence"],[10276,21,9728,21],[10276,22,9728,22,"_remove"],[10276,29,9728,29],[10276,30,9728,30,"key"],[10276,33,9728,33],[10276,34,9728,34],[10277,4,9729,4],[10277,11,9729,11,"hasPendingRedirect"],[10277,29,9729,29],[10278,2,9730,0],[10279,2,9731,0],[10279,17,9731,15,"_setPendingRedirectStatus"],[10279,42,9731,40,"_setPendingRedirectStatus"],[10279,43,9731,41,"resolver"],[10279,51,9731,49],[10279,53,9731,51,"auth"],[10279,57,9731,55],[10279,59,9731,57],[10280,4,9732,4],[10280,11,9732,11,"resolverPersistence"],[10280,30,9732,30],[10280,31,9732,31,"resolver"],[10280,39,9732,39],[10280,40,9732,40],[10280,41,9732,41,"_set"],[10280,45,9732,45],[10280,46,9732,46,"pendingRedirectKey"],[10280,64,9732,64],[10280,65,9732,65,"auth"],[10280,69,9732,69],[10280,70,9732,70],[10280,72,9732,72],[10280,78,9732,78],[10280,79,9732,79],[10281,2,9733,0],[10282,2,9734,0],[10282,11,9734,9,"_clearRedirectOutcomes"],[10282,33,9734,31,"_clearRedirectOutcomes"],[10282,34,9734,31],[10282,36,9734,34],[10283,4,9735,4,"redirectOutcomeMap"],[10283,22,9735,22],[10283,23,9735,23,"clear"],[10283,28,9735,28],[10283,29,9735,29],[10283,30,9735,30],[10284,2,9736,0],[10285,2,9737,0],[10285,11,9737,9,"_overrideRedirectResult"],[10285,34,9737,32,"_overrideRedirectResult"],[10285,35,9737,33,"auth"],[10285,39,9737,37],[10285,41,9737,39,"result"],[10285,47,9737,45],[10285,49,9737,47],[10286,4,9738,4,"redirectOutcomeMap"],[10286,22,9738,22],[10286,23,9738,23,"set"],[10286,26,9738,26],[10286,27,9738,27,"auth"],[10286,31,9738,31],[10286,32,9738,32,"_key"],[10286,36,9738,36],[10286,37,9738,37],[10286,38,9738,38],[10286,40,9738,40,"result"],[10286,46,9738,46],[10286,47,9738,47],[10287,2,9739,0],[10288,2,9740,0],[10288,11,9740,9,"resolverPersistence"],[10288,30,9740,28,"resolverPersistence"],[10288,31,9740,29,"resolver"],[10288,39,9740,37],[10288,41,9740,39],[10289,4,9741,4],[10289,11,9741,11,"_getInstance"],[10289,23,9741,23],[10289,24,9741,24,"resolver"],[10289,32,9741,32],[10289,33,9741,33,"_redirectPersistence"],[10289,53,9741,53],[10289,54,9741,54],[10290,2,9742,0],[10291,2,9743,0],[10291,11,9743,9,"pendingRedirectKey"],[10291,29,9743,27,"pendingRedirectKey"],[10291,30,9743,28,"auth"],[10291,34,9743,32],[10291,36,9743,34],[10292,4,9744,4],[10292,11,9744,11,"_persistenceKeyName"],[10292,30,9744,30],[10292,31,9744,31,"PENDING_REDIRECT_KEY"],[10292,51,9744,51],[10292,53,9744,53,"auth"],[10292,57,9744,57],[10292,58,9744,58,"config"],[10292,64,9744,64],[10292,65,9744,65,"apiKey"],[10292,71,9744,71],[10292,73,9744,73,"auth"],[10292,77,9744,77],[10292,78,9744,78,"name"],[10292,82,9744,82],[10292,83,9744,83],[10293,2,9745,0],[10295,2,9747,0],[10296,0,9748,0],[10297,0,9749,0],[10298,0,9750,0],[10299,0,9751,0],[10300,0,9752,0],[10301,0,9753,0],[10302,0,9754,0],[10303,0,9755,0],[10304,0,9756,0],[10305,0,9757,0],[10306,0,9758,0],[10307,0,9759,0],[10308,0,9760,0],[10309,0,9761,0],[10310,0,9762,0],[10311,2,9763,0],[10312,0,9764,0],[10313,0,9765,0],[10314,0,9766,0],[10315,0,9767,0],[10316,0,9768,0],[10317,0,9769,0],[10318,0,9770,0],[10319,0,9771,0],[10320,0,9772,0],[10321,0,9773,0],[10322,0,9774,0],[10323,0,9775,0],[10324,0,9776,0],[10325,0,9777,0],[10326,0,9778,0],[10327,0,9779,0],[10328,0,9780,0],[10329,0,9781,0],[10330,0,9782,0],[10331,0,9783,0],[10332,0,9784,0],[10333,0,9785,0],[10334,0,9786,0],[10335,0,9787,0],[10336,0,9788,0],[10337,0,9789,0],[10338,0,9790,0],[10339,0,9791,0],[10340,0,9792,0],[10341,0,9793,0],[10342,0,9794,0],[10343,0,9795,0],[10344,0,9796,0],[10345,0,9797,0],[10346,0,9798,0],[10347,0,9799,0],[10348,0,9800,0],[10349,0,9801,0],[10350,0,9802,0],[10351,0,9803,0],[10352,0,9804,0],[10353,0,9805,0],[10354,0,9806,0],[10355,2,9807,0],[10355,11,9807,9,"signInWithRedirect"],[10355,29,9807,27,"signInWithRedirect"],[10355,30,9807,28,"auth"],[10355,34,9807,32],[10355,36,9807,34,"provider"],[10355,44,9807,42],[10355,46,9807,44,"resolver"],[10355,54,9807,52],[10355,56,9807,54],[10356,4,9808,4],[10356,11,9808,11,"_signInWithRedirect"],[10356,30,9808,30],[10356,31,9808,31,"auth"],[10356,35,9808,35],[10356,37,9808,37,"provider"],[10356,45,9808,45],[10356,47,9808,47,"resolver"],[10356,55,9808,55],[10356,56,9808,56],[10357,2,9809,0],[10358,2,9810,0],[10358,17,9810,15,"_signInWithRedirect"],[10358,36,9810,34,"_signInWithRedirect"],[10358,37,9810,35,"auth"],[10358,41,9810,39],[10358,43,9810,41,"provider"],[10358,51,9810,49],[10358,53,9810,51,"resolver"],[10358,61,9810,59],[10358,63,9810,61],[10359,4,9811,4],[10359,8,9811,8],[10359,12,9811,8,"_isFirebaseServerApp"],[10359,24,9811,28],[10359,25,9811,28,"_isFirebaseServerApp"],[10359,45,9811,28],[10359,47,9811,29,"auth"],[10359,51,9811,33],[10359,52,9811,34,"app"],[10359,55,9811,37],[10359,56,9811,38],[10359,58,9811,40],[10360,6,9812,8],[10360,13,9812,15,"Promise"],[10360,20,9812,22],[10360,21,9812,23,"reject"],[10360,27,9812,29],[10360,28,9812,30,"_serverAppCurrentUserOperationNotSupportedError"],[10360,75,9812,77],[10360,76,9812,78,"auth"],[10360,80,9812,82],[10360,81,9812,83],[10360,82,9812,84],[10361,4,9813,4],[10362,4,9814,4],[10362,10,9814,10,"authInternal"],[10362,22,9814,22],[10362,25,9814,25,"_castAuth"],[10362,34,9814,34],[10362,35,9814,35,"auth"],[10362,39,9814,39],[10362,40,9814,40],[10363,4,9815,4,"_assertInstanceOf"],[10363,21,9815,21],[10363,22,9815,22,"auth"],[10363,26,9815,26],[10363,28,9815,28,"provider"],[10363,36,9815,36],[10363,38,9815,38,"FederatedAuthProvider"],[10363,59,9815,59],[10363,60,9815,60],[10364,4,9816,4],[10365,4,9817,4],[10366,4,9818,4],[10367,4,9819,4],[10367,10,9819,10,"authInternal"],[10367,22,9819,22],[10367,23,9819,23,"_initializationPromise"],[10367,45,9819,45],[10368,4,9820,4],[10368,10,9820,10,"resolverInternal"],[10368,26,9820,26],[10368,29,9820,29,"_withDefaultResolver"],[10368,49,9820,49],[10368,50,9820,50,"authInternal"],[10368,62,9820,62],[10368,64,9820,64,"resolver"],[10368,72,9820,72],[10368,73,9820,73],[10369,4,9821,4],[10369,10,9821,10,"_setPendingRedirectStatus"],[10369,35,9821,35],[10369,36,9821,36,"resolverInternal"],[10369,52,9821,52],[10369,54,9821,54,"authInternal"],[10369,66,9821,66],[10369,67,9821,67],[10370,4,9822,4],[10370,11,9822,11,"resolverInternal"],[10370,27,9822,27],[10370,28,9822,28,"_openRedirect"],[10370,41,9822,41],[10370,42,9822,42,"authInternal"],[10370,54,9822,54],[10370,56,9822,56,"provider"],[10370,64,9822,64],[10370,66,9822,66],[10370,85,9822,85],[10370,86,9822,86],[10370,126,9822,126],[10370,127,9822,127],[10371,2,9823,0],[10372,2,9824,0],[10373,0,9825,0],[10374,0,9826,0],[10375,0,9827,0],[10376,0,9828,0],[10377,0,9829,0],[10378,0,9830,0],[10379,0,9831,0],[10380,0,9832,0],[10381,0,9833,0],[10382,0,9834,0],[10383,0,9835,0],[10384,0,9836,0],[10385,0,9837,0],[10386,0,9838,0],[10387,0,9839,0],[10388,0,9840,0],[10389,0,9841,0],[10390,0,9842,0],[10391,0,9843,0],[10392,0,9844,0],[10393,0,9845,0],[10394,0,9846,0],[10395,0,9847,0],[10396,0,9848,0],[10397,0,9849,0],[10398,0,9850,0],[10399,0,9851,0],[10400,0,9852,0],[10401,0,9853,0],[10402,0,9854,0],[10403,0,9855,0],[10404,0,9856,0],[10405,0,9857,0],[10406,0,9858,0],[10407,2,9859,0],[10407,11,9859,9,"reauthenticateWithRedirect"],[10407,37,9859,35,"reauthenticateWithRedirect"],[10407,38,9859,36,"user"],[10407,42,9859,40],[10407,44,9859,42,"provider"],[10407,52,9859,50],[10407,54,9859,52,"resolver"],[10407,62,9859,60],[10407,64,9859,62],[10408,4,9860,4],[10408,11,9860,11,"_reauthenticateWithRedirect"],[10408,38,9860,38],[10408,39,9860,39,"user"],[10408,43,9860,43],[10408,45,9860,45,"provider"],[10408,53,9860,53],[10408,55,9860,55,"resolver"],[10408,63,9860,63],[10408,64,9860,64],[10409,2,9861,0],[10410,2,9862,0],[10410,17,9862,15,"_reauthenticateWithRedirect"],[10410,44,9862,42,"_reauthenticateWithRedirect"],[10410,45,9862,43,"user"],[10410,49,9862,47],[10410,51,9862,49,"provider"],[10410,59,9862,57],[10410,61,9862,59,"resolver"],[10410,69,9862,67],[10410,71,9862,69],[10411,4,9863,4],[10411,10,9863,10,"userInternal"],[10411,22,9863,22],[10411,25,9863,25],[10411,29,9863,25,"getModularInstance"],[10411,42,9863,43],[10411,43,9863,43,"getModularInstance"],[10411,61,9863,43],[10411,63,9863,44,"user"],[10411,67,9863,48],[10411,68,9863,49],[10412,4,9864,4,"_assertInstanceOf"],[10412,21,9864,21],[10412,22,9864,22,"userInternal"],[10412,34,9864,34],[10412,35,9864,35,"auth"],[10412,39,9864,39],[10412,41,9864,41,"provider"],[10412,49,9864,49],[10412,51,9864,51,"FederatedAuthProvider"],[10412,72,9864,72],[10412,73,9864,73],[10413,4,9865,4],[10413,8,9865,8],[10413,12,9865,8,"_isFirebaseServerApp"],[10413,24,9865,28],[10413,25,9865,28,"_isFirebaseServerApp"],[10413,45,9865,28],[10413,47,9865,29,"userInternal"],[10413,59,9865,41],[10413,60,9865,42,"auth"],[10413,64,9865,46],[10413,65,9865,47,"app"],[10413,68,9865,50],[10413,69,9865,51],[10413,71,9865,53],[10414,6,9866,8],[10414,13,9866,15,"Promise"],[10414,20,9866,22],[10414,21,9866,23,"reject"],[10414,27,9866,29],[10414,28,9866,30,"_serverAppCurrentUserOperationNotSupportedError"],[10414,75,9866,77],[10414,76,9866,78,"userInternal"],[10414,88,9866,90],[10414,89,9866,91,"auth"],[10414,93,9866,95],[10414,94,9866,96],[10414,95,9866,97],[10415,4,9867,4],[10416,4,9868,4],[10417,4,9869,4],[10418,4,9870,4],[10419,4,9871,4],[10419,10,9871,10,"userInternal"],[10419,22,9871,22],[10419,23,9871,23,"auth"],[10419,27,9871,27],[10419,28,9871,28,"_initializationPromise"],[10419,50,9871,50],[10420,4,9872,4],[10421,4,9873,4],[10421,10,9873,10,"resolverInternal"],[10421,26,9873,26],[10421,29,9873,29,"_withDefaultResolver"],[10421,49,9873,49],[10421,50,9873,50,"userInternal"],[10421,62,9873,62],[10421,63,9873,63,"auth"],[10421,67,9873,67],[10421,69,9873,69,"resolver"],[10421,77,9873,77],[10421,78,9873,78],[10422,4,9874,4],[10422,10,9874,10,"_setPendingRedirectStatus"],[10422,35,9874,35],[10422,36,9874,36,"resolverInternal"],[10422,52,9874,52],[10422,54,9874,54,"userInternal"],[10422,66,9874,66],[10422,67,9874,67,"auth"],[10422,71,9874,71],[10422,72,9874,72],[10423,4,9875,4],[10423,10,9875,10,"eventId"],[10423,17,9875,17],[10423,20,9875,20],[10423,26,9875,26,"prepareUserForRedirect"],[10423,48,9875,48],[10423,49,9875,49,"userInternal"],[10423,61,9875,61],[10423,62,9875,62],[10424,4,9876,4],[10424,11,9876,11,"resolverInternal"],[10424,27,9876,27],[10424,28,9876,28,"_openRedirect"],[10424,41,9876,41],[10424,42,9876,42,"userInternal"],[10424,54,9876,54],[10424,55,9876,55,"auth"],[10424,59,9876,59],[10424,61,9876,61,"provider"],[10424,69,9876,69],[10424,71,9876,71],[10424,90,9876,90],[10424,91,9876,91],[10424,132,9876,132,"eventId"],[10424,139,9876,139],[10424,140,9876,140],[10425,2,9877,0],[10426,2,9878,0],[10427,0,9879,0],[10428,0,9880,0],[10429,0,9881,0],[10430,0,9882,0],[10431,0,9883,0],[10432,0,9884,0],[10433,0,9885,0],[10434,0,9886,0],[10435,0,9887,0],[10436,0,9888,0],[10437,0,9889,0],[10438,0,9890,0],[10439,0,9891,0],[10440,0,9892,0],[10441,0,9893,0],[10442,0,9894,0],[10443,0,9895,0],[10444,0,9896,0],[10445,0,9897,0],[10446,0,9898,0],[10447,0,9899,0],[10448,0,9900,0],[10449,0,9901,0],[10450,0,9902,0],[10451,0,9903,0],[10452,0,9904,0],[10453,0,9905,0],[10454,0,9906,0],[10455,0,9907,0],[10456,0,9908,0],[10457,2,9909,0],[10457,11,9909,9,"linkWithRedirect"],[10457,27,9909,25,"linkWithRedirect"],[10457,28,9909,26,"user"],[10457,32,9909,30],[10457,34,9909,32,"provider"],[10457,42,9909,40],[10457,44,9909,42,"resolver"],[10457,52,9909,50],[10457,54,9909,52],[10458,4,9910,4],[10458,11,9910,11,"_linkWithRedirect"],[10458,28,9910,28],[10458,29,9910,29,"user"],[10458,33,9910,33],[10458,35,9910,35,"provider"],[10458,43,9910,43],[10458,45,9910,45,"resolver"],[10458,53,9910,53],[10458,54,9910,54],[10459,2,9911,0],[10460,2,9912,0],[10460,17,9912,15,"_linkWithRedirect"],[10460,34,9912,32,"_linkWithRedirect"],[10460,35,9912,33,"user"],[10460,39,9912,37],[10460,41,9912,39,"provider"],[10460,49,9912,47],[10460,51,9912,49,"resolver"],[10460,59,9912,57],[10460,61,9912,59],[10461,4,9913,4],[10461,10,9913,10,"userInternal"],[10461,22,9913,22],[10461,25,9913,25],[10461,29,9913,25,"getModularInstance"],[10461,42,9913,43],[10461,43,9913,43,"getModularInstance"],[10461,61,9913,43],[10461,63,9913,44,"user"],[10461,67,9913,48],[10461,68,9913,49],[10462,4,9914,4,"_assertInstanceOf"],[10462,21,9914,21],[10462,22,9914,22,"userInternal"],[10462,34,9914,34],[10462,35,9914,35,"auth"],[10462,39,9914,39],[10462,41,9914,41,"provider"],[10462,49,9914,49],[10462,51,9914,51,"FederatedAuthProvider"],[10462,72,9914,72],[10462,73,9914,73],[10463,4,9915,4],[10464,4,9916,4],[10465,4,9917,4],[10466,4,9918,4],[10466,10,9918,10,"userInternal"],[10466,22,9918,22],[10466,23,9918,23,"auth"],[10466,27,9918,27],[10466,28,9918,28,"_initializationPromise"],[10466,50,9918,50],[10467,4,9919,4],[10468,4,9920,4],[10468,10,9920,10,"resolverInternal"],[10468,26,9920,26],[10468,29,9920,29,"_withDefaultResolver"],[10468,49,9920,49],[10468,50,9920,50,"userInternal"],[10468,62,9920,62],[10468,63,9920,63,"auth"],[10468,67,9920,67],[10468,69,9920,69,"resolver"],[10468,77,9920,77],[10468,78,9920,78],[10469,4,9921,4],[10469,10,9921,10,"_assertLinkedStatus"],[10469,29,9921,29],[10469,30,9921,30],[10469,35,9921,35],[10469,37,9921,37,"userInternal"],[10469,49,9921,49],[10469,51,9921,51,"provider"],[10469,59,9921,59],[10469,60,9921,60,"providerId"],[10469,70,9921,70],[10469,71,9921,71],[10470,4,9922,4],[10470,10,9922,10,"_setPendingRedirectStatus"],[10470,35,9922,35],[10470,36,9922,36,"resolverInternal"],[10470,52,9922,52],[10470,54,9922,54,"userInternal"],[10470,66,9922,66],[10470,67,9922,67,"auth"],[10470,71,9922,71],[10470,72,9922,72],[10471,4,9923,4],[10471,10,9923,10,"eventId"],[10471,17,9923,17],[10471,20,9923,20],[10471,26,9923,26,"prepareUserForRedirect"],[10471,48,9923,48],[10471,49,9923,49,"userInternal"],[10471,61,9923,61],[10471,62,9923,62],[10472,4,9924,4],[10472,11,9924,11,"resolverInternal"],[10472,27,9924,27],[10472,28,9924,28,"_openRedirect"],[10472,41,9924,41],[10472,42,9924,42,"userInternal"],[10472,54,9924,54],[10472,55,9924,55,"auth"],[10472,59,9924,59],[10472,61,9924,61,"provider"],[10472,69,9924,69],[10472,71,9924,71],[10472,88,9924,88],[10472,89,9924,89],[10472,128,9924,128,"eventId"],[10472,135,9924,135],[10472,136,9924,136],[10473,2,9925,0],[10474,2,9926,0],[10475,0,9927,0],[10476,0,9928,0],[10477,0,9929,0],[10478,0,9930,0],[10479,0,9931,0],[10480,0,9932,0],[10481,0,9933,0],[10482,0,9934,0],[10483,0,9935,0],[10484,0,9936,0],[10485,0,9937,0],[10486,0,9938,0],[10487,0,9939,0],[10488,0,9940,0],[10489,0,9941,0],[10490,0,9942,0],[10491,0,9943,0],[10492,0,9944,0],[10493,0,9945,0],[10494,0,9946,0],[10495,0,9947,0],[10496,0,9948,0],[10497,0,9949,0],[10498,0,9950,0],[10499,0,9951,0],[10500,0,9952,0],[10501,0,9953,0],[10502,0,9954,0],[10503,0,9955,0],[10504,0,9956,0],[10505,0,9957,0],[10506,0,9958,0],[10507,0,9959,0],[10508,0,9960,0],[10509,0,9961,0],[10510,0,9962,0],[10511,0,9963,0],[10512,0,9964,0],[10513,0,9965,0],[10514,0,9966,0],[10515,2,9967,0],[10515,17,9967,15,"getRedirectResult"],[10515,34,9967,32,"getRedirectResult"],[10515,35,9967,33,"auth"],[10515,39,9967,37],[10515,41,9967,39,"resolver"],[10515,49,9967,47],[10515,51,9967,49],[10516,4,9968,4],[10516,10,9968,10,"_castAuth"],[10516,19,9968,19],[10516,20,9968,20,"auth"],[10516,24,9968,24],[10516,25,9968,25],[10516,26,9968,26,"_initializationPromise"],[10516,48,9968,48],[10517,4,9969,4],[10517,11,9969,11,"_getRedirectResult"],[10517,29,9969,29],[10517,30,9969,30,"auth"],[10517,34,9969,34],[10517,36,9969,36,"resolver"],[10517,44,9969,44],[10517,46,9969,46],[10517,51,9969,51],[10517,52,9969,52],[10518,2,9970,0],[10519,2,9971,0],[10519,17,9971,15,"_getRedirectResult"],[10519,35,9971,33,"_getRedirectResult"],[10519,36,9971,34,"auth"],[10519,40,9971,38],[10519,42,9971,40,"resolverExtern"],[10519,56,9971,54],[10519,58,9971,56,"bypassAuthState"],[10519,73,9971,71],[10519,76,9971,74],[10519,81,9971,79],[10519,83,9971,81],[10520,4,9972,4],[10520,8,9972,8],[10520,12,9972,8,"_isFirebaseServerApp"],[10520,24,9972,28],[10520,25,9972,28,"_isFirebaseServerApp"],[10520,45,9972,28],[10520,47,9972,29,"auth"],[10520,51,9972,33],[10520,52,9972,34,"app"],[10520,55,9972,37],[10520,56,9972,38],[10520,58,9972,40],[10521,6,9973,8],[10521,13,9973,15,"Promise"],[10521,20,9973,22],[10521,21,9973,23,"reject"],[10521,27,9973,29],[10521,28,9973,30,"_serverAppCurrentUserOperationNotSupportedError"],[10521,75,9973,77],[10521,76,9973,78,"auth"],[10521,80,9973,82],[10521,81,9973,83],[10521,82,9973,84],[10522,4,9974,4],[10523,4,9975,4],[10523,10,9975,10,"authInternal"],[10523,22,9975,22],[10523,25,9975,25,"_castAuth"],[10523,34,9975,34],[10523,35,9975,35,"auth"],[10523,39,9975,39],[10523,40,9975,40],[10524,4,9976,4],[10524,10,9976,10,"resolver"],[10524,18,9976,18],[10524,21,9976,21,"_withDefaultResolver"],[10524,41,9976,41],[10524,42,9976,42,"authInternal"],[10524,54,9976,54],[10524,56,9976,56,"resolverExtern"],[10524,70,9976,70],[10524,71,9976,71],[10525,4,9977,4],[10525,10,9977,10,"action"],[10525,16,9977,16],[10525,19,9977,19],[10525,23,9977,23,"RedirectAction"],[10525,37,9977,37],[10525,38,9977,38,"authInternal"],[10525,50,9977,50],[10525,52,9977,52,"resolver"],[10525,60,9977,60],[10525,62,9977,62,"bypassAuthState"],[10525,77,9977,77],[10525,78,9977,78],[10526,4,9978,4],[10526,10,9978,10,"result"],[10526,16,9978,16],[10526,19,9978,19],[10526,25,9978,25,"action"],[10526,31,9978,31],[10526,32,9978,32,"execute"],[10526,39,9978,39],[10526,40,9978,40],[10526,41,9978,41],[10527,4,9979,4],[10527,8,9979,8,"result"],[10527,14,9979,14],[10527,18,9979,18],[10527,19,9979,19,"bypassAuthState"],[10527,34,9979,34],[10527,36,9979,36],[10528,6,9980,8],[10528,13,9980,15,"result"],[10528,19,9980,21],[10528,20,9980,22,"user"],[10528,24,9980,26],[10528,25,9980,27,"_redirectEventId"],[10528,41,9980,43],[10529,6,9981,8],[10529,12,9981,14,"authInternal"],[10529,24,9981,26],[10529,25,9981,27,"_persistUserIfCurrent"],[10529,46,9981,48],[10529,47,9981,49,"result"],[10529,53,9981,55],[10529,54,9981,56,"user"],[10529,58,9981,60],[10529,59,9981,61],[10530,6,9982,8],[10530,12,9982,14,"authInternal"],[10530,24,9982,26],[10530,25,9982,27,"_setRedirectUser"],[10530,41,9982,43],[10530,42,9982,44],[10530,46,9982,48],[10530,48,9982,50,"resolverExtern"],[10530,62,9982,64],[10530,63,9982,65],[10531,4,9983,4],[10532,4,9984,4],[10532,11,9984,11,"result"],[10532,17,9984,17],[10533,2,9985,0],[10534,2,9986,0],[10534,17,9986,15,"prepareUserForRedirect"],[10534,39,9986,37,"prepareUserForRedirect"],[10534,40,9986,38,"user"],[10534,44,9986,42],[10534,46,9986,44],[10535,4,9987,4],[10535,10,9987,10,"eventId"],[10535,17,9987,17],[10535,20,9987,20,"_generateEventId"],[10535,36,9987,36],[10535,37,9987,37],[10535,40,9987,40,"user"],[10535,44,9987,44],[10535,45,9987,45,"uid"],[10535,48,9987,48],[10535,53,9987,53],[10535,54,9987,54],[10536,4,9988,4,"user"],[10536,8,9988,8],[10536,9,9988,9,"_redirectEventId"],[10536,25,9988,25],[10536,28,9988,28,"eventId"],[10536,35,9988,35],[10537,4,9989,4],[10537,10,9989,10,"user"],[10537,14,9989,14],[10537,15,9989,15,"auth"],[10537,19,9989,19],[10537,20,9989,20,"_setRedirectUser"],[10537,36,9989,36],[10537,37,9989,37,"user"],[10537,41,9989,41],[10537,42,9989,42],[10538,4,9990,4],[10538,10,9990,10,"user"],[10538,14,9990,14],[10538,15,9990,15,"auth"],[10538,19,9990,19],[10538,20,9990,20,"_persistUserIfCurrent"],[10538,41,9990,41],[10538,42,9990,42,"user"],[10538,46,9990,46],[10538,47,9990,47],[10539,4,9991,4],[10539,11,9991,11,"eventId"],[10539,18,9991,18],[10540,2,9992,0],[10542,2,9994,0],[10543,0,9995,0],[10544,0,9996,0],[10545,0,9997,0],[10546,0,9998,0],[10547,0,9999,0],[10548,0,10000,0],[10549,0,10001,0],[10550,0,10002,0],[10551,0,10003,0],[10552,0,10004,0],[10553,0,10005,0],[10554,0,10006,0],[10555,0,10007,0],[10556,0,10008,0],[10557,0,10009,0],[10558,2,10010,0],[10559,2,10011,0],[10560,2,10012,0],[10560,8,10012,6,"EVENT_DUPLICATION_CACHE_DURATION_MS"],[10560,43,10012,41],[10560,46,10012,44],[10560,48,10012,46],[10560,51,10012,49],[10560,53,10012,51],[10560,56,10012,54],[10560,60,10012,58],[10561,2,10013,0],[10561,8,10013,6,"AuthEventManager"],[10561,24,10013,22],[10561,25,10013,23],[10562,4,10014,4,"constructor"],[10562,15,10014,15,"constructor"],[10562,16,10014,16,"auth"],[10562,20,10014,20],[10562,22,10014,22],[10563,6,10015,8],[10563,10,10015,12],[10563,11,10015,13,"auth"],[10563,15,10015,17],[10563,18,10015,20,"auth"],[10563,22,10015,24],[10564,6,10016,8],[10564,10,10016,12],[10564,11,10016,13,"cachedEventUids"],[10564,26,10016,28],[10564,29,10016,31],[10564,33,10016,35,"Set"],[10564,36,10016,38],[10564,37,10016,39],[10564,38,10016,40],[10565,6,10017,8],[10565,10,10017,12],[10565,11,10017,13,"consumers"],[10565,20,10017,22],[10565,23,10017,25],[10565,27,10017,29,"Set"],[10565,30,10017,32],[10565,31,10017,33],[10565,32,10017,34],[10566,6,10018,8],[10566,10,10018,12],[10566,11,10018,13,"queuedRedirectEvent"],[10566,30,10018,32],[10566,33,10018,35],[10566,37,10018,39],[10567,6,10019,8],[10567,10,10019,12],[10567,11,10019,13,"hasHandledPotentialRedirect"],[10567,38,10019,40],[10567,41,10019,43],[10567,46,10019,48],[10568,6,10020,8],[10568,10,10020,12],[10568,11,10020,13,"lastProcessedEventTime"],[10568,33,10020,35],[10568,36,10020,38,"Date"],[10568,40,10020,42],[10568,41,10020,43,"now"],[10568,44,10020,46],[10568,45,10020,47],[10568,46,10020,48],[10569,4,10021,4],[10570,4,10022,4,"registerConsumer"],[10570,20,10022,20,"registerConsumer"],[10570,21,10022,21,"authEventConsumer"],[10570,38,10022,38],[10570,40,10022,40],[10571,6,10023,8],[10571,10,10023,12],[10571,11,10023,13,"consumers"],[10571,20,10023,22],[10571,21,10023,23,"add"],[10571,24,10023,26],[10571,25,10023,27,"authEventConsumer"],[10571,42,10023,44],[10571,43,10023,45],[10572,6,10024,8],[10572,10,10024,12],[10572,14,10024,16],[10572,15,10024,17,"queuedRedirectEvent"],[10572,34,10024,36],[10572,38,10025,12],[10572,42,10025,16],[10572,43,10025,17,"isEventForConsumer"],[10572,61,10025,35],[10572,62,10025,36],[10572,66,10025,40],[10572,67,10025,41,"queuedRedirectEvent"],[10572,86,10025,60],[10572,88,10025,62,"authEventConsumer"],[10572,105,10025,79],[10572,106,10025,80],[10572,108,10025,82],[10573,8,10026,12],[10573,12,10026,16],[10573,13,10026,17,"sendToConsumer"],[10573,27,10026,31],[10573,28,10026,32],[10573,32,10026,36],[10573,33,10026,37,"queuedRedirectEvent"],[10573,52,10026,56],[10573,54,10026,58,"authEventConsumer"],[10573,71,10026,75],[10573,72,10026,76],[10574,8,10027,12],[10574,12,10027,16],[10574,13,10027,17,"saveEventToCache"],[10574,29,10027,33],[10574,30,10027,34],[10574,34,10027,38],[10574,35,10027,39,"queuedRedirectEvent"],[10574,54,10027,58],[10574,55,10027,59],[10575,8,10028,12],[10575,12,10028,16],[10575,13,10028,17,"queuedRedirectEvent"],[10575,32,10028,36],[10575,35,10028,39],[10575,39,10028,43],[10576,6,10029,8],[10577,4,10030,4],[10578,4,10031,4,"unregisterConsumer"],[10578,22,10031,22,"unregisterConsumer"],[10578,23,10031,23,"authEventConsumer"],[10578,40,10031,40],[10578,42,10031,42],[10579,6,10032,8],[10579,10,10032,12],[10579,11,10032,13,"consumers"],[10579,20,10032,22],[10579,21,10032,23,"delete"],[10579,27,10032,29],[10579,28,10032,30,"authEventConsumer"],[10579,45,10032,47],[10579,46,10032,48],[10580,4,10033,4],[10581,4,10034,4,"onEvent"],[10581,11,10034,11,"onEvent"],[10581,12,10034,12,"event"],[10581,17,10034,17],[10581,19,10034,19],[10582,6,10035,8],[10583,6,10036,8],[10583,10,10036,12],[10583,14,10036,16],[10583,15,10036,17,"hasEventBeenHandled"],[10583,34,10036,36],[10583,35,10036,37,"event"],[10583,40,10036,42],[10583,41,10036,43],[10583,43,10036,45],[10584,8,10037,12],[10584,15,10037,19],[10584,20,10037,24],[10585,6,10038,8],[10586,6,10039,8],[10586,10,10039,12,"handled"],[10586,17,10039,19],[10586,20,10039,22],[10586,25,10039,27],[10587,6,10040,8],[10587,10,10040,12],[10587,11,10040,13,"consumers"],[10587,20,10040,22],[10587,21,10040,23,"forEach"],[10587,28,10040,30],[10587,29,10040,31,"consumer"],[10587,37,10040,39],[10587,41,10040,43],[10588,8,10041,12],[10588,12,10041,16],[10588,16,10041,20],[10588,17,10041,21,"isEventForConsumer"],[10588,35,10041,39],[10588,36,10041,40,"event"],[10588,41,10041,45],[10588,43,10041,47,"consumer"],[10588,51,10041,55],[10588,52,10041,56],[10588,54,10041,58],[10589,10,10042,16,"handled"],[10589,17,10042,23],[10589,20,10042,26],[10589,24,10042,30],[10590,10,10043,16],[10590,14,10043,20],[10590,15,10043,21,"sendToConsumer"],[10590,29,10043,35],[10590,30,10043,36,"event"],[10590,35,10043,41],[10590,37,10043,43,"consumer"],[10590,45,10043,51],[10590,46,10043,52],[10591,10,10044,16],[10591,14,10044,20],[10591,15,10044,21,"saveEventToCache"],[10591,31,10044,37],[10591,32,10044,38,"event"],[10591,37,10044,43],[10591,38,10044,44],[10592,8,10045,12],[10593,6,10046,8],[10593,7,10046,9],[10593,8,10046,10],[10594,6,10047,8],[10594,10,10047,12],[10594,14,10047,16],[10594,15,10047,17,"hasHandledPotentialRedirect"],[10594,42,10047,44],[10594,46,10047,48],[10594,47,10047,49,"isRedirectEvent"],[10594,62,10047,64],[10594,63,10047,65,"event"],[10594,68,10047,70],[10594,69,10047,71],[10594,71,10047,73],[10595,8,10048,12],[10596,8,10049,12],[10597,8,10050,12],[10597,15,10050,19,"handled"],[10597,22,10050,26],[10598,6,10051,8],[10599,6,10052,8],[10599,10,10052,12],[10599,11,10052,13,"hasHandledPotentialRedirect"],[10599,38,10052,40],[10599,41,10052,43],[10599,45,10052,47],[10600,6,10053,8],[10601,6,10054,8],[10601,10,10054,12],[10601,11,10054,13,"handled"],[10601,18,10054,20],[10601,20,10054,22],[10602,8,10055,12],[10602,12,10055,16],[10602,13,10055,17,"queuedRedirectEvent"],[10602,32,10055,36],[10602,35,10055,39,"event"],[10602,40,10055,44],[10603,8,10056,12,"handled"],[10603,15,10056,19],[10603,18,10056,22],[10603,22,10056,26],[10604,6,10057,8],[10605,6,10058,8],[10605,13,10058,15,"handled"],[10605,20,10058,22],[10606,4,10059,4],[10607,4,10060,4,"sendToConsumer"],[10607,18,10060,18,"sendToConsumer"],[10607,19,10060,19,"event"],[10607,24,10060,24],[10607,26,10060,26,"consumer"],[10607,34,10060,34],[10607,36,10060,36],[10608,6,10061,8],[10608,10,10061,12,"event"],[10608,15,10061,17],[10608,16,10061,18,"error"],[10608,21,10061,23],[10608,25,10061,27],[10608,26,10061,28,"isNullRedirectEvent"],[10608,45,10061,47],[10608,46,10061,48,"event"],[10608,51,10061,53],[10608,52,10061,54],[10608,54,10061,56],[10609,8,10062,12],[10609,14,10062,18,"code"],[10609,18,10062,22],[10609,21,10062,25,"event"],[10609,26,10062,30],[10609,27,10062,31,"error"],[10609,32,10062,36],[10609,33,10062,37,"code"],[10609,37,10062,41],[10609,39,10062,43,"split"],[10609,44,10062,48],[10609,45,10062,49],[10609,52,10062,56],[10609,53,10062,57],[10609,54,10062,58],[10609,55,10062,59],[10609,56,10062,60],[10609,60,10063,16],[10609,76,10063,32],[10609,77,10063,33],[10610,8,10064,12,"consumer"],[10610,16,10064,20],[10610,17,10064,21,"onError"],[10610,24,10064,28],[10610,25,10064,29,"_createError"],[10610,37,10064,41],[10610,38,10064,42],[10610,42,10064,46],[10610,43,10064,47,"auth"],[10610,47,10064,51],[10610,49,10064,53,"code"],[10610,53,10064,57],[10610,54,10064,58],[10610,55,10064,59],[10611,6,10065,8],[10611,7,10065,9],[10611,13,10066,13],[10612,8,10067,12,"consumer"],[10612,16,10067,20],[10612,17,10067,21,"onAuthEvent"],[10612,28,10067,32],[10612,29,10067,33,"event"],[10612,34,10067,38],[10612,35,10067,39],[10613,6,10068,8],[10614,4,10069,4],[10615,4,10070,4,"isEventForConsumer"],[10615,22,10070,22,"isEventForConsumer"],[10615,23,10070,23,"event"],[10615,28,10070,28],[10615,30,10070,30,"consumer"],[10615,38,10070,38],[10615,40,10070,40],[10616,6,10071,8],[10616,12,10071,14,"eventIdMatches"],[10616,26,10071,28],[10616,29,10071,31,"consumer"],[10616,37,10071,39],[10616,38,10071,40,"eventId"],[10616,45,10071,47],[10616,50,10071,52],[10616,54,10071,56],[10616,58,10072,13],[10616,59,10072,14],[10616,60,10072,15,"event"],[10616,65,10072,20],[10616,66,10072,21,"eventId"],[10616,73,10072,28],[10616,77,10072,32,"event"],[10616,82,10072,37],[10616,83,10072,38,"eventId"],[10616,90,10072,45],[10616,95,10072,50,"consumer"],[10616,103,10072,58],[10616,104,10072,59,"eventId"],[10616,111,10072,67],[10617,6,10073,8],[10617,13,10073,15,"consumer"],[10617,21,10073,23],[10617,22,10073,24,"filter"],[10617,28,10073,30],[10617,29,10073,31,"includes"],[10617,37,10073,39],[10617,38,10073,40,"event"],[10617,43,10073,45],[10617,44,10073,46,"type"],[10617,48,10073,50],[10617,49,10073,51],[10617,53,10073,55,"eventIdMatches"],[10617,67,10073,69],[10618,4,10074,4],[10619,4,10075,4,"hasEventBeenHandled"],[10619,23,10075,23,"hasEventBeenHandled"],[10619,24,10075,24,"event"],[10619,29,10075,29],[10619,31,10075,31],[10620,6,10076,8],[10620,10,10076,12,"Date"],[10620,14,10076,16],[10620,15,10076,17,"now"],[10620,18,10076,20],[10620,19,10076,21],[10620,20,10076,22],[10620,23,10076,25],[10620,27,10076,29],[10620,28,10076,30,"lastProcessedEventTime"],[10620,50,10076,52],[10620,54,10077,12,"EVENT_DUPLICATION_CACHE_DURATION_MS"],[10620,89,10077,47],[10620,91,10077,49],[10621,8,10078,12],[10621,12,10078,16],[10621,13,10078,17,"cachedEventUids"],[10621,28,10078,32],[10621,29,10078,33,"clear"],[10621,34,10078,38],[10621,35,10078,39],[10621,36,10078,40],[10622,6,10079,8],[10623,6,10080,8],[10623,13,10080,15],[10623,17,10080,19],[10623,18,10080,20,"cachedEventUids"],[10623,33,10080,35],[10623,34,10080,36,"has"],[10623,37,10080,39],[10623,38,10080,40,"eventUid"],[10623,46,10080,48],[10623,47,10080,49,"event"],[10623,52,10080,54],[10623,53,10080,55],[10623,54,10080,56],[10624,4,10081,4],[10625,4,10082,4,"saveEventToCache"],[10625,20,10082,20,"saveEventToCache"],[10625,21,10082,21,"event"],[10625,26,10082,26],[10625,28,10082,28],[10626,6,10083,8],[10626,10,10083,12],[10626,11,10083,13,"cachedEventUids"],[10626,26,10083,28],[10626,27,10083,29,"add"],[10626,30,10083,32],[10626,31,10083,33,"eventUid"],[10626,39,10083,41],[10626,40,10083,42,"event"],[10626,45,10083,47],[10626,46,10083,48],[10626,47,10083,49],[10627,6,10084,8],[10627,10,10084,12],[10627,11,10084,13,"lastProcessedEventTime"],[10627,33,10084,35],[10627,36,10084,38,"Date"],[10627,40,10084,42],[10627,41,10084,43,"now"],[10627,44,10084,46],[10627,45,10084,47],[10627,46,10084,48],[10628,4,10085,4],[10629,2,10086,0],[10630,2,10087,0],[10630,11,10087,9,"eventUid"],[10630,19,10087,17,"eventUid"],[10630,20,10087,18,"e"],[10630,21,10087,19],[10630,23,10087,21],[10631,4,10088,4],[10631,11,10088,11],[10631,12,10088,12,"e"],[10631,13,10088,13],[10631,14,10088,14,"type"],[10631,18,10088,18],[10631,20,10088,20,"e"],[10631,21,10088,21],[10631,22,10088,22,"eventId"],[10631,29,10088,29],[10631,31,10088,31,"e"],[10631,32,10088,32],[10631,33,10088,33,"sessionId"],[10631,42,10088,42],[10631,44,10088,44,"e"],[10631,45,10088,45],[10631,46,10088,46,"tenantId"],[10631,54,10088,54],[10631,55,10088,55],[10631,56,10088,56,"filter"],[10631,62,10088,62],[10631,63,10088,63,"v"],[10631,64,10088,64],[10631,68,10088,68,"v"],[10631,69,10088,69],[10631,70,10088,70],[10631,71,10088,71,"join"],[10631,75,10088,75],[10631,76,10088,76],[10631,79,10088,79],[10631,80,10088,80],[10632,2,10089,0],[10633,2,10090,0],[10633,11,10090,9,"isNullRedirectEvent"],[10633,30,10090,28,"isNullRedirectEvent"],[10633,31,10090,29],[10634,4,10090,31,"type"],[10634,8,10090,35],[10635,4,10090,37,"error"],[10636,2,10090,43],[10636,3,10090,44],[10636,5,10090,46],[10637,4,10091,4],[10637,11,10091,12,"type"],[10637,15,10091,16],[10637,20,10091,21],[10637,29,10091,30],[10637,30,10091,31],[10637,61,10092,8,"error"],[10637,66,10092,13],[10637,68,10092,15,"code"],[10637,72,10092,19],[10637,77,10092,24],[10637,85,10092,32],[10637,100,10092,47],[10637,101,10092,48],[10637,136,10092,83],[10638,2,10093,0],[10639,2,10094,0],[10639,11,10094,9,"isRedirectEvent"],[10639,26,10094,24,"isRedirectEvent"],[10639,27,10094,25,"event"],[10639,32,10094,30],[10639,34,10094,32],[10640,4,10095,4],[10640,12,10095,12,"event"],[10640,17,10095,17],[10640,18,10095,18,"type"],[10640,22,10095,22],[10641,6,10096,8],[10641,11,10096,13],[10641,30,10096,32],[10641,31,10096,33],[10642,6,10097,8],[10642,11,10097,13],[10642,28,10097,30],[10642,29,10097,31],[10643,6,10098,8],[10643,11,10098,13],[10643,30,10098,32],[10643,31,10098,33],[10644,8,10099,12],[10644,15,10099,19],[10644,19,10099,23],[10645,6,10100,8],[10645,11,10100,13],[10645,20,10100,22],[10645,21,10100,23],[10646,8,10101,12],[10646,15,10101,19,"isNullRedirectEvent"],[10646,34,10101,38],[10646,35,10101,39,"event"],[10646,40,10101,44],[10646,41,10101,45],[10647,6,10102,8],[10648,8,10103,12],[10648,15,10103,19],[10648,20,10103,24],[10649,4,10104,4],[10650,2,10105,0],[10652,2,10107,0],[10653,0,10108,0],[10654,0,10109,0],[10655,0,10110,0],[10656,0,10111,0],[10657,0,10112,0],[10658,0,10113,0],[10659,0,10114,0],[10660,0,10115,0],[10661,0,10116,0],[10662,0,10117,0],[10663,0,10118,0],[10664,0,10119,0],[10665,0,10120,0],[10666,0,10121,0],[10667,0,10122,0],[10668,2,10123,0],[10668,17,10123,15,"_getProjectConfig"],[10668,34,10123,32,"_getProjectConfig"],[10668,35,10123,33,"auth"],[10668,39,10123,37],[10668,41,10123,39,"request"],[10668,48,10123,46],[10668,51,10123,49],[10668,52,10123,50],[10668,53,10123,51],[10668,55,10123,53],[10669,4,10124,4],[10669,11,10124,11,"_performApiRequest"],[10669,29,10124,29],[10669,30,10124,30,"auth"],[10669,34,10124,34],[10669,36,10124,36],[10669,41,10124,41],[10669,42,10124,42],[10669,64,10124,64],[10669,78,10124,78],[10669,79,10124,79],[10669,114,10124,114,"request"],[10669,121,10124,121],[10669,122,10124,122],[10670,2,10125,0],[10672,2,10127,0],[10673,0,10128,0],[10674,0,10129,0],[10675,0,10130,0],[10676,0,10131,0],[10677,0,10132,0],[10678,0,10133,0],[10679,0,10134,0],[10680,0,10135,0],[10681,0,10136,0],[10682,0,10137,0],[10683,0,10138,0],[10684,0,10139,0],[10685,0,10140,0],[10686,0,10141,0],[10687,0,10142,0],[10688,2,10143,0],[10688,8,10143,6,"IP_ADDRESS_REGEX"],[10688,24,10143,22],[10688,27,10143,25],[10688,65,10143,63],[10689,2,10144,0],[10689,8,10144,6,"HTTP_REGEX"],[10689,18,10144,16],[10689,21,10144,19],[10689,30,10144,28],[10690,2,10145,0],[10690,17,10145,15,"_validateOrigin"],[10690,32,10145,30,"_validateOrigin"],[10690,33,10145,31,"auth"],[10690,37,10145,35],[10690,39,10145,37],[10691,4,10146,4],[10692,4,10147,4],[10692,8,10147,8,"auth"],[10692,12,10147,12],[10692,13,10147,13,"config"],[10692,19,10147,19],[10692,20,10147,20,"emulator"],[10692,28,10147,28],[10692,30,10147,30],[10693,6,10148,8],[10694,4,10149,4],[10695,4,10150,4],[10695,10,10150,10],[10696,6,10150,12,"authorizedDomains"],[10697,4,10150,30],[10697,5,10150,31],[10697,8,10150,34],[10697,14,10150,40,"_getProjectConfig"],[10697,31,10150,57],[10697,32,10150,58,"auth"],[10697,36,10150,62],[10697,37,10150,63],[10698,4,10151,4],[10698,9,10151,9],[10698,15,10151,15,"domain"],[10698,21,10151,21],[10698,25,10151,25,"authorizedDomains"],[10698,42,10151,42],[10698,44,10151,44],[10699,6,10152,8],[10699,10,10152,12],[10700,8,10153,12],[10700,12,10153,16,"matchDomain"],[10700,23,10153,27],[10700,24,10153,28,"domain"],[10700,30,10153,34],[10700,31,10153,35],[10700,33,10153,37],[10701,10,10154,16],[10702,8,10155,12],[10703,6,10156,8],[10703,7,10156,9],[10703,8,10157,8],[10703,14,10157,14],[10704,8,10158,12],[10705,6,10158,12],[10706,4,10160,4],[10707,4,10161,4],[10708,4,10162,4,"_fail"],[10708,9,10162,9],[10708,10,10162,10,"auth"],[10708,14,10162,14],[10708,16,10162,16],[10708,37,10162,37],[10708,38,10162,38],[10708,72,10162,72],[10708,73,10162,73],[10709,2,10163,0],[10710,2,10164,0],[10710,11,10164,9,"matchDomain"],[10710,22,10164,20,"matchDomain"],[10710,23,10164,21,"expected"],[10710,31,10164,29],[10710,33,10164,31],[10711,4,10165,4],[10711,10,10165,10,"currentUrl"],[10711,20,10165,20],[10711,23,10165,23,"_getCurrentUrl"],[10711,37,10165,37],[10711,38,10165,38],[10711,39,10165,39],[10712,4,10166,4],[10712,10,10166,10],[10713,6,10166,12,"protocol"],[10713,14,10166,20],[10714,6,10166,22,"hostname"],[10715,4,10166,31],[10715,5,10166,32],[10715,8,10166,35],[10715,12,10166,39,"URL"],[10715,15,10166,42],[10715,16,10166,43,"currentUrl"],[10715,26,10166,53],[10715,27,10166,54],[10716,4,10167,4],[10716,8,10167,8,"expected"],[10716,16,10167,16],[10716,17,10167,17,"startsWith"],[10716,27,10167,27],[10716,28,10167,28],[10716,49,10167,49],[10716,50,10167,50],[10716,52,10167,52],[10717,6,10168,8],[10717,12,10168,14,"ceUrl"],[10717,17,10168,19],[10717,20,10168,22],[10717,24,10168,26,"URL"],[10717,27,10168,29],[10717,28,10168,30,"expected"],[10717,36,10168,38],[10717,37,10168,39],[10718,6,10169,8],[10718,10,10169,12,"ceUrl"],[10718,15,10169,17],[10718,16,10169,18,"hostname"],[10718,24,10169,26],[10718,29,10169,31],[10718,31,10169,33],[10718,35,10169,37,"hostname"],[10718,43,10169,45],[10718,48,10169,50],[10718,50,10169,52],[10718,52,10169,54],[10719,8,10170,12],[10720,8,10171,12],[10720,15,10171,20,"protocol"],[10720,23,10171,28],[10720,28,10171,33],[10720,47,10171,52],[10720,51,10172,16,"expected"],[10720,59,10172,24],[10720,60,10172,25,"replace"],[10720,67,10172,32],[10720,68,10172,33],[10720,89,10172,54],[10720,91,10172,56],[10720,93,10172,58],[10720,94,10172,59],[10720,99,10173,20,"currentUrl"],[10720,109,10173,30],[10720,110,10173,31,"replace"],[10720,117,10173,38],[10720,118,10173,39],[10720,139,10173,60],[10720,141,10173,62],[10720,143,10173,64],[10720,144,10173,65],[10721,6,10174,8],[10722,6,10175,8],[10722,13,10175,15,"protocol"],[10722,21,10175,23],[10722,26,10175,28],[10722,45,10175,47],[10722,49,10175,51,"ceUrl"],[10722,54,10175,56],[10722,55,10175,57,"hostname"],[10722,63,10175,65],[10722,68,10175,70,"hostname"],[10722,76,10175,78],[10723,4,10176,4],[10724,4,10177,4],[10724,8,10177,8],[10724,9,10177,9,"HTTP_REGEX"],[10724,19,10177,19],[10724,20,10177,20,"test"],[10724,24,10177,24],[10724,25,10177,25,"protocol"],[10724,33,10177,33],[10724,34,10177,34],[10724,36,10177,36],[10725,6,10178,8],[10725,13,10178,15],[10725,18,10178,20],[10726,4,10179,4],[10727,4,10180,4],[10727,8,10180,8,"IP_ADDRESS_REGEX"],[10727,24,10180,24],[10727,25,10180,25,"test"],[10727,29,10180,29],[10727,30,10180,30,"expected"],[10727,38,10180,38],[10727,39,10180,39],[10727,41,10180,41],[10728,6,10181,8],[10729,6,10182,8],[10730,6,10183,8],[10730,13,10183,15,"hostname"],[10730,21,10183,23],[10730,26,10183,28,"expected"],[10730,34,10183,36],[10731,4,10184,4],[10732,4,10185,4],[10733,4,10186,4],[10733,10,10186,10,"escapedDomainPattern"],[10733,30,10186,30],[10733,33,10186,33,"expected"],[10733,41,10186,41],[10733,42,10186,42,"replace"],[10733,49,10186,49],[10733,50,10186,50],[10733,55,10186,55],[10733,57,10186,57],[10733,62,10186,62],[10733,63,10186,63],[10734,4,10187,4],[10735,4,10188,4],[10736,4,10189,4],[10736,10,10189,10,"re"],[10736,12,10189,12],[10736,15,10189,15],[10736,19,10189,19,"RegExp"],[10736,25,10189,25],[10736,26,10189,26],[10736,35,10189,35],[10736,38,10189,38,"escapedDomainPattern"],[10736,58,10189,58],[10736,61,10189,61],[10736,64,10189,64],[10736,67,10189,67,"escapedDomainPattern"],[10736,87,10189,87],[10736,90,10189,90],[10736,94,10189,94],[10736,96,10189,96],[10736,99,10189,99],[10736,100,10189,100],[10737,4,10190,4],[10737,11,10190,11,"re"],[10737,13,10190,13],[10737,14,10190,14,"test"],[10737,18,10190,18],[10737,19,10190,19,"hostname"],[10737,27,10190,27],[10737,28,10190,28],[10738,2,10191,0],[10740,2,10193,0],[10741,0,10194,0],[10742,0,10195,0],[10743,0,10196,0],[10744,0,10197,0],[10745,0,10198,0],[10746,0,10199,0],[10747,0,10200,0],[10748,0,10201,0],[10749,0,10202,0],[10750,0,10203,0],[10751,0,10204,0],[10752,0,10205,0],[10753,0,10206,0],[10754,0,10207,0],[10755,0,10208,0],[10756,2,10209,0],[10756,8,10209,6,"NETWORK_TIMEOUT"],[10756,23,10209,21],[10756,26,10209,24],[10756,30,10209,28,"Delay"],[10756,35,10209,33],[10756,36,10209,34],[10756,41,10209,39],[10756,43,10209,41],[10756,48,10209,46],[10756,49,10209,47],[10757,2,10210,0],[10758,0,10211,0],[10759,0,10212,0],[10760,0,10213,0],[10761,2,10214,0],[10761,11,10214,9,"resetUnloadedGapiModules"],[10761,35,10214,33,"resetUnloadedGapiModules"],[10761,36,10214,33],[10761,38,10214,36],[10762,4,10215,4],[10763,4,10216,4],[10764,4,10217,4],[10765,4,10218,4],[10765,10,10218,10,"beacon"],[10765,16,10218,16],[10765,19,10218,19,"_window"],[10765,26,10218,26],[10765,27,10218,27],[10765,28,10218,28],[10765,29,10218,29,"___jsl"],[10765,35,10218,35],[10766,4,10219,4],[10767,4,10220,4],[10767,8,10220,8,"beacon"],[10767,14,10220,14],[10767,16,10220,16,"H"],[10767,17,10220,17],[10767,19,10220,19],[10768,6,10221,8],[10769,6,10222,8],[10769,11,10222,13],[10769,17,10222,19,"hint"],[10769,21,10222,23],[10769,25,10222,27,"Object"],[10769,31,10222,33],[10769,32,10222,34,"keys"],[10769,36,10222,38],[10769,37,10222,39,"beacon"],[10769,43,10222,45],[10769,44,10222,46,"H"],[10769,45,10222,47],[10769,46,10222,48],[10769,48,10222,50],[10770,8,10223,12],[10771,8,10224,12,"beacon"],[10771,14,10224,18],[10771,15,10224,19,"H"],[10771,16,10224,20],[10771,17,10224,21,"hint"],[10771,21,10224,25],[10771,22,10224,26],[10771,23,10224,27,"r"],[10771,24,10224,28],[10771,27,10224,31,"beacon"],[10771,33,10224,37],[10771,34,10224,38,"H"],[10771,35,10224,39],[10771,36,10224,40,"hint"],[10771,40,10224,44],[10771,41,10224,45],[10771,42,10224,46,"r"],[10771,43,10224,47],[10771,47,10224,51],[10771,49,10224,53],[10772,8,10225,12],[10773,8,10226,12,"beacon"],[10773,14,10226,18],[10773,15,10226,19,"H"],[10773,16,10226,20],[10773,17,10226,21,"hint"],[10773,21,10226,25],[10773,22,10226,26],[10773,23,10226,27,"L"],[10773,24,10226,28],[10773,27,10226,31,"beacon"],[10773,33,10226,37],[10773,34,10226,38,"H"],[10773,35,10226,39],[10773,36,10226,40,"hint"],[10773,40,10226,44],[10773,41,10226,45],[10773,42,10226,46,"L"],[10773,43,10226,47],[10773,47,10226,51],[10773,49,10226,53],[10774,8,10227,12],[10775,8,10228,12,"beacon"],[10775,14,10228,18],[10775,15,10228,19,"H"],[10775,16,10228,20],[10775,17,10228,21,"hint"],[10775,21,10228,25],[10775,22,10228,26],[10775,23,10228,27,"r"],[10775,24,10228,28],[10775,27,10228,31],[10775,28,10228,32],[10775,31,10228,35,"beacon"],[10775,37,10228,41],[10775,38,10228,42,"H"],[10775,39,10228,43],[10775,40,10228,44,"hint"],[10775,44,10228,48],[10775,45,10228,49],[10775,46,10228,50,"L"],[10775,47,10228,51],[10775,48,10228,52],[10776,8,10229,12],[10777,8,10230,12],[10777,12,10230,16,"beacon"],[10777,18,10230,22],[10777,19,10230,23,"CP"],[10777,21,10230,25],[10777,23,10230,27],[10778,10,10231,16],[10778,15,10231,21],[10778,19,10231,25,"i"],[10778,20,10231,26],[10778,23,10231,29],[10778,24,10231,30],[10778,26,10231,32,"i"],[10778,27,10231,33],[10778,30,10231,36,"beacon"],[10778,36,10231,42],[10778,37,10231,43,"CP"],[10778,39,10231,45],[10778,40,10231,46,"length"],[10778,46,10231,52],[10778,48,10231,54,"i"],[10778,49,10231,55],[10778,51,10231,57],[10778,53,10231,59],[10779,12,10232,20],[10780,12,10233,20,"beacon"],[10780,18,10233,26],[10780,19,10233,27,"CP"],[10780,21,10233,29],[10780,22,10233,30,"i"],[10780,23,10233,31],[10780,24,10233,32],[10780,27,10233,35],[10780,31,10233,39],[10781,10,10234,16],[10782,8,10235,12],[10783,6,10236,8],[10784,4,10237,4],[10785,2,10238,0],[10786,2,10239,0],[10786,11,10239,9,"loadGapi"],[10786,19,10239,17,"loadGapi"],[10786,20,10239,18,"auth"],[10786,24,10239,22],[10786,26,10239,24],[10787,4,10240,4],[10787,11,10240,11],[10787,15,10240,15,"Promise"],[10787,22,10240,22],[10787,23,10240,23],[10787,24,10240,24,"resolve"],[10787,31,10240,31],[10787,33,10240,33,"reject"],[10787,39,10240,39],[10787,44,10240,44],[10788,6,10241,8],[10789,6,10242,8],[10789,15,10242,17,"loadGapiIframe"],[10789,29,10242,31,"loadGapiIframe"],[10789,30,10242,31],[10789,32,10242,34],[10790,8,10243,12],[10791,8,10244,12],[10792,8,10245,12,"resetUnloadedGapiModules"],[10792,32,10245,36],[10792,33,10245,37],[10792,34,10245,38],[10793,8,10246,12,"gapi"],[10793,12,10246,16],[10793,13,10246,17,"load"],[10793,17,10246,21],[10793,18,10246,22],[10793,32,10246,36],[10793,34,10246,38],[10794,10,10247,16,"callback"],[10794,18,10247,24],[10794,20,10247,26,"callback"],[10794,21,10247,26],[10794,26,10247,32],[10795,12,10248,20,"resolve"],[10795,19,10248,27],[10795,20,10248,28,"gapi"],[10795,24,10248,32],[10795,25,10248,33,"iframes"],[10795,32,10248,40],[10795,33,10248,41,"getContext"],[10795,43,10248,51],[10795,44,10248,52],[10795,45,10248,53],[10795,46,10248,54],[10796,10,10249,16],[10796,11,10249,17],[10797,10,10250,16,"ontimeout"],[10797,19,10250,25],[10797,21,10250,27,"ontimeout"],[10797,22,10250,27],[10797,27,10250,33],[10798,12,10251,20],[10799,12,10252,20],[10800,12,10253,20],[10801,12,10254,20],[10802,12,10255,20],[10803,12,10256,20],[10804,12,10257,20,"resetUnloadedGapiModules"],[10804,36,10257,44],[10804,37,10257,45],[10804,38,10257,46],[10805,12,10258,20,"reject"],[10805,18,10258,26],[10805,19,10258,27,"_createError"],[10805,31,10258,39],[10805,32,10258,40,"auth"],[10805,36,10258,44],[10805,38,10258,46],[10805,62,10258,70],[10805,63,10258,71],[10805,105,10258,113],[10805,106,10258,114],[10805,107,10258,115],[10806,10,10259,16],[10806,11,10259,17],[10807,10,10260,16,"timeout"],[10807,17,10260,23],[10807,19,10260,25,"NETWORK_TIMEOUT"],[10807,34,10260,40],[10807,35,10260,41,"get"],[10807,38,10260,44],[10807,39,10260,45],[10808,8,10261,12],[10808,9,10261,13],[10808,10,10261,14],[10809,6,10262,8],[10810,6,10263,8],[10810,10,10263,12,"_window"],[10810,17,10263,19],[10810,18,10263,20],[10810,19,10263,21],[10810,20,10263,22,"gapi"],[10810,24,10263,26],[10810,26,10263,28,"iframes"],[10810,33,10263,35],[10810,35,10263,37,"Iframe"],[10810,41,10263,43],[10810,43,10263,45],[10811,8,10264,12],[10812,8,10265,12,"resolve"],[10812,15,10265,19],[10812,16,10265,20,"gapi"],[10812,20,10265,24],[10812,21,10265,25,"iframes"],[10812,28,10265,32],[10812,29,10265,33,"getContext"],[10812,39,10265,43],[10812,40,10265,44],[10812,41,10265,45],[10812,42,10265,46],[10813,6,10266,8],[10813,7,10266,9],[10813,13,10267,13],[10813,17,10267,17],[10813,18,10267,18],[10813,19,10267,19,"_window"],[10813,26,10267,26],[10813,27,10267,27],[10813,28,10267,28],[10813,29,10267,29,"gapi"],[10813,33,10267,33],[10813,35,10267,35,"load"],[10813,39,10267,39],[10813,41,10267,41],[10814,8,10268,12],[10815,8,10269,12,"loadGapiIframe"],[10815,22,10269,26],[10815,23,10269,27],[10815,24,10269,28],[10816,6,10270,8],[10816,7,10270,9],[10816,13,10271,13],[10817,8,10272,12],[10818,8,10273,12],[10819,8,10274,12],[10820,8,10275,12],[10821,8,10276,12],[10822,8,10277,12],[10822,14,10277,18,"cbName"],[10822,20,10277,24],[10822,23,10277,27,"_generateCallbackName"],[10822,44,10277,48],[10822,45,10277,49],[10822,56,10277,60],[10822,57,10277,61],[10823,8,10278,12],[10824,8,10279,12,"_window"],[10824,15,10279,19],[10824,16,10279,20],[10824,17,10279,21],[10824,18,10279,22,"cbName"],[10824,24,10279,28],[10824,25,10279,29],[10824,28,10279,32],[10824,34,10279,38],[10825,10,10280,16],[10826,10,10281,16],[10826,14,10281,20],[10826,15,10281,21],[10826,16,10281,22,"gapi"],[10826,20,10281,26],[10826,21,10281,27,"load"],[10826,25,10281,31],[10826,27,10281,33],[10827,12,10282,20,"loadGapiIframe"],[10827,26,10282,34],[10827,27,10282,35],[10827,28,10282,36],[10828,10,10283,16],[10828,11,10283,17],[10828,17,10284,21],[10829,12,10285,20],[10830,12,10286,20,"reject"],[10830,18,10286,26],[10830,19,10286,27,"_createError"],[10830,31,10286,39],[10830,32,10286,40,"auth"],[10830,36,10286,44],[10830,38,10286,46],[10830,62,10286,70],[10830,63,10286,71],[10830,105,10286,113],[10830,106,10286,114],[10830,107,10286,115],[10831,10,10287,16],[10832,8,10288,12],[10832,9,10288,13],[10833,8,10289,12],[10834,8,10290,12],[10834,15,10290,19,"_loadJS"],[10834,22,10290,26],[10834,23,10290,27],[10834,26,10290,30,"_gapiScriptUrl"],[10834,40,10290,44],[10834,41,10290,45],[10834,42,10290,46],[10834,53,10290,57,"cbName"],[10834,59,10290,63],[10834,61,10290,65],[10834,62,10290,66],[10834,63,10291,17,"catch"],[10834,68,10291,22],[10834,69,10291,23,"e"],[10834,70,10291,24],[10834,74,10291,28,"reject"],[10834,80,10291,34],[10834,81,10291,35,"e"],[10834,82,10291,36],[10834,83,10291,37],[10834,84,10291,38],[10835,6,10292,8],[10836,4,10293,4],[10836,5,10293,5],[10836,6,10293,6],[10836,7,10293,7,"catch"],[10836,12,10293,12],[10836,13,10293,13,"error"],[10836,18,10293,18],[10836,22,10293,22],[10837,6,10294,8],[10838,6,10295,8,"cachedGApiLoader"],[10838,22,10295,24],[10838,25,10295,27],[10838,29,10295,31],[10839,6,10296,8],[10839,12,10296,14,"error"],[10839,17,10296,19],[10840,4,10297,4],[10840,5,10297,5],[10840,6,10297,6],[10841,2,10298,0],[10842,2,10299,0],[10842,6,10299,4,"cachedGApiLoader"],[10842,22,10299,20],[10842,25,10299,23],[10842,29,10299,27],[10843,2,10300,0],[10843,11,10300,9,"_loadGapi"],[10843,20,10300,18,"_loadGapi"],[10843,21,10300,19,"auth"],[10843,25,10300,23],[10843,27,10300,25],[10844,4,10301,4,"cachedGApiLoader"],[10844,20,10301,20],[10844,23,10301,23,"cachedGApiLoader"],[10844,39,10301,39],[10844,43,10301,43,"loadGapi"],[10844,51,10301,51],[10844,52,10301,52,"auth"],[10844,56,10301,56],[10844,57,10301,57],[10845,4,10302,4],[10845,11,10302,11,"cachedGApiLoader"],[10845,27,10302,27],[10846,2,10303,0],[10848,2,10305,0],[10849,0,10306,0],[10850,0,10307,0],[10851,0,10308,0],[10852,0,10309,0],[10853,0,10310,0],[10854,0,10311,0],[10855,0,10312,0],[10856,0,10313,0],[10857,0,10314,0],[10858,0,10315,0],[10859,0,10316,0],[10860,0,10317,0],[10861,0,10318,0],[10862,0,10319,0],[10863,0,10320,0],[10864,2,10321,0],[10864,8,10321,6,"PING_TIMEOUT"],[10864,20,10321,18],[10864,23,10321,21],[10864,27,10321,25,"Delay"],[10864,32,10321,30],[10864,33,10321,31],[10864,37,10321,35],[10864,39,10321,37],[10864,44,10321,42],[10864,45,10321,43],[10865,2,10322,0],[10865,8,10322,6,"IFRAME_PATH"],[10865,19,10322,17],[10865,22,10322,20],[10865,38,10322,36],[10866,2,10323,0],[10866,8,10323,6,"EMULATED_IFRAME_PATH"],[10866,28,10323,26],[10866,31,10323,29],[10866,53,10323,51],[10867,2,10324,0],[10867,8,10324,6,"IFRAME_ATTRIBUTES"],[10867,25,10324,23],[10867,28,10324,26],[10868,4,10325,4,"style"],[10868,9,10325,9],[10868,11,10325,11],[10869,6,10326,8,"position"],[10869,14,10326,16],[10869,16,10326,18],[10869,26,10326,28],[10870,6,10327,8,"top"],[10870,9,10327,11],[10870,11,10327,13],[10870,19,10327,21],[10871,6,10328,8,"width"],[10871,11,10328,13],[10871,13,10328,15],[10871,18,10328,20],[10872,6,10329,8,"height"],[10872,12,10329,14],[10872,14,10329,16],[10873,4,10330,4],[10873,5,10330,5],[10874,4,10331,4],[10874,17,10331,17],[10874,19,10331,19],[10874,25,10331,25],[10875,4,10332,4,"tabindex"],[10875,12,10332,12],[10875,14,10332,14],[10876,2,10333,0],[10876,3,10333,1],[10877,2,10334,0],[10878,2,10335,0],[10879,2,10336,0],[10879,8,10336,6,"EID_FROM_APIHOST"],[10879,24,10336,22],[10879,27,10336,25],[10879,31,10336,29,"Map"],[10879,34,10336,32],[10879,35,10336,33],[10879,36,10337,4],[10879,37,10337,5],[10879,69,10337,37],[10879,70,10337,38],[10879,100,10337,68],[10879,103,10337,71],[10879,104,10337,72],[10880,2,10337,74],[10881,2,10338,4],[10881,3,10338,5],[10881,51,10338,53],[10881,53,10338,55],[10881,56,10338,58],[10881,57,10338,59],[10882,2,10338,61],[10883,2,10339,4],[10883,3,10339,5],[10883,48,10339,50],[10883,50,10339,52],[10883,53,10339,55],[10883,54,10339,56],[10883,55,10339,57],[10884,2,10339,57],[10884,3,10340,1],[10884,4,10340,2],[10885,2,10341,0],[10885,11,10341,9,"getIframeUrl"],[10885,23,10341,21,"getIframeUrl"],[10885,24,10341,22,"auth"],[10885,28,10341,26],[10885,30,10341,28],[10886,4,10342,4],[10886,10,10342,10,"config"],[10886,16,10342,16],[10886,19,10342,19,"auth"],[10886,23,10342,23],[10886,24,10342,24,"config"],[10886,30,10342,30],[10887,4,10343,4,"_assert"],[10887,11,10343,11],[10887,12,10343,12,"config"],[10887,18,10343,18],[10887,19,10343,19,"authDomain"],[10887,29,10343,29],[10887,31,10343,31,"auth"],[10887,35,10343,35],[10887,37,10343,37],[10887,66,10343,66],[10887,67,10343,67],[10887,106,10343,106],[10887,107,10343,107],[10888,4,10344,4],[10888,10,10344,10,"url"],[10888,13,10344,13],[10888,16,10344,16,"config"],[10888,22,10344,22],[10888,23,10344,23,"emulator"],[10888,31,10344,31],[10888,34,10345,10,"_emulatorUrl"],[10888,46,10345,22],[10888,47,10345,23,"config"],[10888,53,10345,29],[10888,55,10345,31,"EMULATED_IFRAME_PATH"],[10888,75,10345,51],[10888,76,10345,52],[10888,79,10346,10],[10888,90,10346,21,"auth"],[10888,94,10346,25],[10888,95,10346,26,"config"],[10888,101,10346,32],[10888,102,10346,33,"authDomain"],[10888,112,10346,43],[10888,116,10346,47,"IFRAME_PATH"],[10888,127,10346,58],[10888,129,10346,60],[10889,4,10347,4],[10889,10,10347,10,"params"],[10889,16,10347,16],[10889,19,10347,19],[10890,6,10348,8,"apiKey"],[10890,12,10348,14],[10890,14,10348,16,"config"],[10890,20,10348,22],[10890,21,10348,23,"apiKey"],[10890,27,10348,29],[10891,6,10349,8,"appName"],[10891,13,10349,15],[10891,15,10349,17,"auth"],[10891,19,10349,21],[10891,20,10349,22,"name"],[10891,24,10349,26],[10892,6,10350,8,"v"],[10892,7,10350,9],[10892,9,10350,11,"SDK_VERSION"],[10892,21,10350,22],[10892,22,10350,22,"SDK_VERSION"],[10893,4,10351,4],[10893,5,10351,5],[10894,4,10352,4],[10894,10,10352,10,"eid"],[10894,13,10352,13],[10894,16,10352,16,"EID_FROM_APIHOST"],[10894,32,10352,32],[10894,33,10352,33,"get"],[10894,36,10352,36],[10894,37,10352,37,"auth"],[10894,41,10352,41],[10894,42,10352,42,"config"],[10894,48,10352,48],[10894,49,10352,49,"apiHost"],[10894,56,10352,56],[10894,57,10352,57],[10895,4,10353,4],[10895,8,10353,8,"eid"],[10895,11,10353,11],[10895,13,10353,13],[10896,6,10354,8,"params"],[10896,12,10354,14],[10896,13,10354,15,"eid"],[10896,16,10354,18],[10896,19,10354,21,"eid"],[10896,22,10354,24],[10897,4,10355,4],[10898,4,10356,4],[10898,10,10356,10,"frameworks"],[10898,20,10356,20],[10898,23,10356,23,"auth"],[10898,27,10356,27],[10898,28,10356,28,"_getFrameworks"],[10898,42,10356,42],[10898,43,10356,43],[10898,44,10356,44],[10899,4,10357,4],[10899,8,10357,8,"frameworks"],[10899,18,10357,18],[10899,19,10357,19,"length"],[10899,25,10357,25],[10899,27,10357,27],[10900,6,10358,8,"params"],[10900,12,10358,14],[10900,13,10358,15,"fw"],[10900,15,10358,17],[10900,18,10358,20,"frameworks"],[10900,28,10358,30],[10900,29,10358,31,"join"],[10900,33,10358,35],[10900,34,10358,36],[10900,37,10358,39],[10900,38,10358,40],[10901,4,10359,4],[10902,4,10360,4],[10902,11,10360,11],[10902,14,10360,14,"url"],[10902,17,10360,17],[10902,21,10360,21],[10902,25,10360,21,"querystring"],[10902,38,10360,32],[10902,39,10360,32,"querystring"],[10902,50,10360,32],[10902,52,10360,33,"params"],[10902,58,10360,39],[10902,59,10360,40],[10902,60,10360,41,"slice"],[10902,65,10360,46],[10902,66,10360,47],[10902,67,10360,48],[10902,68,10360,49],[10902,70,10360,51],[10903,2,10361,0],[10904,2,10362,0],[10904,17,10362,15,"_openIframe"],[10904,28,10362,26,"_openIframe"],[10904,29,10362,27,"auth"],[10904,33,10362,31],[10904,35,10362,33],[10905,4,10363,4],[10905,10,10363,10,"context"],[10905,17,10363,17],[10905,20,10363,20],[10905,26,10363,26,"_loadGapi"],[10905,35,10363,35],[10905,36,10363,36,"auth"],[10905,40,10363,40],[10905,41,10363,41],[10906,4,10364,4],[10906,10,10364,10,"gapi"],[10906,14,10364,14],[10906,17,10364,17,"_window"],[10906,24,10364,24],[10906,25,10364,25],[10906,26,10364,26],[10906,27,10364,27,"gapi"],[10906,31,10364,31],[10907,4,10365,4,"_assert"],[10907,11,10365,11],[10907,12,10365,12,"gapi"],[10907,16,10365,16],[10907,18,10365,18,"auth"],[10907,22,10365,22],[10907,24,10365,24],[10907,40,10365,40],[10907,41,10365,41],[10907,75,10365,75],[10907,76,10365,76],[10908,4,10366,4],[10908,11,10366,11,"context"],[10908,18,10366,18],[10908,19,10366,19,"open"],[10908,23,10366,23],[10908,24,10366,24],[10909,6,10367,8,"where"],[10909,11,10367,13],[10909,13,10367,15,"document"],[10909,21,10367,23],[10909,22,10367,24,"body"],[10909,26,10367,28],[10910,6,10368,8,"url"],[10910,9,10368,11],[10910,11,10368,13,"getIframeUrl"],[10910,23,10368,25],[10910,24,10368,26,"auth"],[10910,28,10368,30],[10910,29,10368,31],[10911,6,10369,8,"messageHandlersFilter"],[10911,27,10369,29],[10911,29,10369,31,"gapi"],[10911,33,10369,35],[10911,34,10369,36,"iframes"],[10911,41,10369,43],[10911,42,10369,44,"CROSS_ORIGIN_IFRAMES_FILTER"],[10911,69,10369,71],[10912,6,10370,8,"attributes"],[10912,16,10370,18],[10912,18,10370,20,"IFRAME_ATTRIBUTES"],[10912,35,10370,37],[10913,6,10371,8,"dontclear"],[10913,15,10371,17],[10913,17,10371,19],[10914,4,10372,4],[10914,5,10372,5],[10914,7,10372,8,"iframe"],[10914,13,10372,14],[10914,17,10372,19],[10914,21,10372,23,"Promise"],[10914,28,10372,30],[10914,29,10372,31],[10914,36,10372,38,"resolve"],[10914,43,10372,45],[10914,45,10372,47,"reject"],[10914,51,10372,53],[10914,56,10372,58],[10915,6,10373,8],[10915,12,10373,14,"iframe"],[10915,18,10373,20],[10915,19,10373,21,"restyle"],[10915,26,10373,28],[10915,27,10373,29],[10916,8,10374,12],[10917,8,10375,12,"setHideOnLeave"],[10917,22,10375,26],[10917,24,10375,28],[10918,6,10376,8],[10918,7,10376,9],[10918,8,10376,10],[10919,6,10377,8],[10919,12,10377,14,"networkError"],[10919,24,10377,26],[10919,27,10377,29,"_createError"],[10919,39,10377,41],[10919,40,10377,42,"auth"],[10919,44,10377,46],[10919,46,10377,48],[10919,70,10377,72],[10919,71,10377,73],[10919,113,10377,115],[10919,114,10377,116],[10920,6,10378,8],[10921,6,10379,8],[10922,6,10380,8],[10922,12,10380,14,"networkErrorTimer"],[10922,29,10380,31],[10922,32,10380,34,"_window"],[10922,39,10380,41],[10922,40,10380,42],[10922,41,10380,43],[10922,42,10380,44,"setTimeout"],[10922,52,10380,54],[10922,53,10380,55],[10922,59,10380,61],[10923,8,10381,12,"reject"],[10923,14,10381,18],[10923,15,10381,19,"networkError"],[10923,27,10381,31],[10923,28,10381,32],[10924,6,10382,8],[10924,7,10382,9],[10924,9,10382,11,"PING_TIMEOUT"],[10924,21,10382,23],[10924,22,10382,24,"get"],[10924,25,10382,27],[10924,26,10382,28],[10924,27,10382,29],[10924,28,10382,30],[10925,6,10383,8],[10926,6,10384,8],[10926,15,10384,17,"clearTimerAndResolve"],[10926,35,10384,37,"clearTimerAndResolve"],[10926,36,10384,37],[10926,38,10384,40],[10927,8,10385,12,"_window"],[10927,15,10385,19],[10927,16,10385,20],[10927,17,10385,21],[10927,18,10385,22,"clearTimeout"],[10927,30,10385,34],[10927,31,10385,35,"networkErrorTimer"],[10927,48,10385,52],[10927,49,10385,53],[10928,8,10386,12,"resolve"],[10928,15,10386,19],[10928,16,10386,20,"iframe"],[10928,22,10386,26],[10928,23,10386,27],[10929,6,10387,8],[10930,6,10388,8],[10931,6,10389,8],[10932,6,10390,8,"iframe"],[10932,12,10390,14],[10932,13,10390,15,"ping"],[10932,17,10390,19],[10932,18,10390,20,"clearTimerAndResolve"],[10932,38,10390,40],[10932,39,10390,41],[10932,40,10390,42,"then"],[10932,44,10390,46],[10932,45,10390,47,"clearTimerAndResolve"],[10932,65,10390,67],[10932,67,10390,69],[10932,73,10390,75],[10933,8,10391,12,"reject"],[10933,14,10391,18],[10933,15,10391,19,"networkError"],[10933,27,10391,31],[10933,28,10391,32],[10934,6,10392,8],[10934,7,10392,9],[10934,8,10392,10],[10935,4,10393,4],[10935,5,10393,5],[10935,6,10393,6],[10935,7,10393,7],[10936,2,10394,0],[10938,2,10396,0],[10939,0,10397,0],[10940,0,10398,0],[10941,0,10399,0],[10942,0,10400,0],[10943,0,10401,0],[10944,0,10402,0],[10945,0,10403,0],[10946,0,10404,0],[10947,0,10405,0],[10948,0,10406,0],[10949,0,10407,0],[10950,0,10408,0],[10951,0,10409,0],[10952,0,10410,0],[10953,0,10411,0],[10954,2,10412,0],[10954,8,10412,6,"BASE_POPUP_OPTIONS"],[10954,26,10412,24],[10954,29,10412,27],[10955,4,10413,4,"location"],[10955,12,10413,12],[10955,14,10413,14],[10955,19,10413,19],[10956,4,10414,4,"resizable"],[10956,13,10414,13],[10956,15,10414,15],[10956,20,10414,20],[10957,4,10415,4,"statusbar"],[10957,13,10415,13],[10957,15,10415,15],[10957,20,10415,20],[10958,4,10416,4,"toolbar"],[10958,11,10416,11],[10958,13,10416,13],[10959,2,10417,0],[10959,3,10417,1],[10960,2,10418,0],[10960,8,10418,6,"DEFAULT_WIDTH"],[10960,21,10418,19],[10960,24,10418,22],[10960,27,10418,25],[10961,2,10419,0],[10961,8,10419,6,"DEFAULT_HEIGHT"],[10961,22,10419,20],[10961,25,10419,23],[10961,28,10419,26],[10962,2,10420,0],[10962,8,10420,6,"TARGET_BLANK"],[10962,20,10420,18],[10962,23,10420,21],[10962,31,10420,29],[10963,2,10421,0],[10963,8,10421,6,"FIREFOX_EMPTY_URL"],[10963,25,10421,23],[10963,28,10421,26],[10963,46,10421,44],[10964,2,10422,0],[10964,8,10422,6,"AuthPopup"],[10964,17,10422,15],[10964,18,10422,16],[10965,4,10423,4,"constructor"],[10965,15,10423,15,"constructor"],[10965,16,10423,16,"window"],[10965,22,10423,22],[10965,24,10423,24],[10966,6,10424,8],[10966,10,10424,12],[10966,11,10424,13,"window"],[10966,17,10424,19],[10966,20,10424,22,"window"],[10966,26,10424,28],[10967,6,10425,8],[10967,10,10425,12],[10967,11,10425,13,"associatedEvent"],[10967,26,10425,28],[10967,29,10425,31],[10967,33,10425,35],[10968,4,10426,4],[10969,4,10427,4,"close"],[10969,9,10427,9,"close"],[10969,10,10427,9],[10969,12,10427,12],[10970,6,10428,8],[10970,10,10428,12],[10970,14,10428,16],[10970,15,10428,17,"window"],[10970,21,10428,23],[10970,23,10428,25],[10971,8,10429,12],[10971,12,10429,16],[10972,10,10430,16],[10972,14,10430,20],[10972,15,10430,21,"window"],[10972,21,10430,27],[10972,22,10430,28,"close"],[10972,27,10430,33],[10972,28,10430,34],[10972,29,10430,35],[10973,8,10431,12],[10973,9,10431,13],[10973,10,10432,12],[10973,17,10432,19,"e"],[10973,18,10432,20],[10973,20,10432,22],[10973,21,10432,24],[10974,6,10433,8],[10975,4,10434,4],[10976,2,10435,0],[10977,2,10436,0],[10977,11,10436,9,"_open"],[10977,16,10436,14,"_open"],[10977,17,10436,15,"auth"],[10977,21,10436,19],[10977,23,10436,21,"url"],[10977,26,10436,24],[10977,28,10436,26,"name"],[10977,32,10436,30],[10977,34,10436,32,"width"],[10977,39,10436,37],[10977,42,10436,40,"DEFAULT_WIDTH"],[10977,55,10436,53],[10977,57,10436,55,"height"],[10977,63,10436,61],[10977,66,10436,64,"DEFAULT_HEIGHT"],[10977,80,10436,78],[10977,82,10436,80],[10978,4,10437,4],[10978,10,10437,10,"top"],[10978,13,10437,13],[10978,16,10437,16,"Math"],[10978,20,10437,20],[10978,21,10437,21,"max"],[10978,24,10437,24],[10978,25,10437,25],[10978,26,10437,26,"window"],[10978,32,10437,32],[10978,33,10437,33,"screen"],[10978,39,10437,39],[10978,40,10437,40,"availHeight"],[10978,51,10437,51],[10978,54,10437,54,"height"],[10978,60,10437,60],[10978,64,10437,64],[10978,65,10437,65],[10978,67,10437,67],[10978,68,10437,68],[10978,69,10437,69],[10978,70,10437,70,"toString"],[10978,78,10437,78],[10978,79,10437,79],[10978,80,10437,80],[10979,4,10438,4],[10979,10,10438,10,"left"],[10979,14,10438,14],[10979,17,10438,17,"Math"],[10979,21,10438,21],[10979,22,10438,22,"max"],[10979,25,10438,25],[10979,26,10438,26],[10979,27,10438,27,"window"],[10979,33,10438,33],[10979,34,10438,34,"screen"],[10979,40,10438,40],[10979,41,10438,41,"availWidth"],[10979,51,10438,51],[10979,54,10438,54,"width"],[10979,59,10438,59],[10979,63,10438,63],[10979,64,10438,64],[10979,66,10438,66],[10979,67,10438,67],[10979,68,10438,68],[10979,69,10438,69,"toString"],[10979,77,10438,77],[10979,78,10438,78],[10979,79,10438,79],[10980,4,10439,4],[10980,8,10439,8,"target"],[10980,14,10439,14],[10980,17,10439,17],[10980,19,10439,19],[10981,4,10440,4],[10981,10,10440,10,"options"],[10981,17,10440,17],[10981,20,10440,17,"Object"],[10981,26,10440,17],[10981,27,10440,17,"assign"],[10981,33,10440,17],[10981,38,10441,11,"BASE_POPUP_OPTIONS"],[10981,56,10441,29],[10982,6,10442,8,"width"],[10982,11,10442,13],[10982,13,10442,15,"width"],[10982,18,10442,20],[10982,19,10442,21,"toString"],[10982,27,10442,29],[10982,28,10442,30],[10982,29,10442,31],[10983,6,10443,8,"height"],[10983,12,10443,14],[10983,14,10443,16,"height"],[10983,20,10443,22],[10983,21,10443,23,"toString"],[10983,29,10443,31],[10983,30,10443,32],[10983,31,10443,33],[10984,6,10444,8,"top"],[10984,9,10444,11],[10985,6,10445,8,"left"],[10986,4,10445,12],[10986,6,10446,5],[10987,4,10447,4],[10988,4,10448,4],[10989,4,10449,4],[10989,10,10449,10,"ua"],[10989,12,10449,12],[10989,15,10449,15],[10989,19,10449,15,"getUA"],[10989,32,10449,20],[10989,33,10449,20,"getUA"],[10989,38,10449,20],[10989,40,10449,21],[10989,41,10449,22],[10989,42,10449,23,"toLowerCase"],[10989,53,10449,34],[10989,54,10449,35],[10989,55,10449,36],[10990,4,10450,4],[10990,8,10450,8,"name"],[10990,12,10450,12],[10990,14,10450,14],[10991,6,10451,8,"target"],[10991,12,10451,14],[10991,15,10451,17,"_isChromeIOS"],[10991,27,10451,29],[10991,28,10451,30,"ua"],[10991,30,10451,32],[10991,31,10451,33],[10991,34,10451,36,"TARGET_BLANK"],[10991,46,10451,48],[10991,49,10451,51,"name"],[10991,53,10451,55],[10992,4,10452,4],[10993,4,10453,4],[10993,8,10453,8,"_isFirefox"],[10993,18,10453,18],[10993,19,10453,19,"ua"],[10993,21,10453,21],[10993,22,10453,22],[10993,24,10453,24],[10994,6,10454,8],[10995,6,10455,8,"url"],[10995,9,10455,11],[10995,12,10455,14,"url"],[10995,15,10455,17],[10995,19,10455,21,"FIREFOX_EMPTY_URL"],[10995,36,10455,38],[10996,6,10456,8],[10997,6,10457,8],[10998,6,10458,8,"options"],[10998,13,10458,15],[10998,14,10458,16,"scrollbars"],[10998,24,10458,26],[10998,27,10458,29],[10998,32,10458,34],[10999,4,10459,4],[11000,4,10460,4],[11000,10,10460,10,"optionsString"],[11000,23,10460,23],[11000,26,10460,26,"Object"],[11000,32,10460,32],[11000,33,10460,33,"entries"],[11000,40,10460,40],[11000,41,10460,41,"options"],[11000,48,10460,48],[11000,49,10460,49],[11000,50,10460,50,"reduce"],[11000,56,10460,56],[11000,57,10460,57],[11000,58,10460,58,"accum"],[11000,63,10460,63],[11000,65,10460,65],[11000,66,10460,66,"key"],[11000,69,10460,69],[11000,71,10460,71,"value"],[11000,76,10460,76],[11000,77,10460,77],[11000,82,10460,82],[11000,85,10460,85,"accum"],[11000,90,10460,90],[11000,93,10460,93,"key"],[11000,96,10460,96],[11000,100,10460,100,"value"],[11000,105,10460,105],[11000,108,10460,108],[11000,110,10460,110],[11000,112,10460,112],[11000,113,10460,113],[11001,4,10461,4],[11001,8,10461,8,"_isIOSStandalone"],[11001,24,10461,24],[11001,25,10461,25,"ua"],[11001,27,10461,27],[11001,28,10461,28],[11001,32,10461,32,"target"],[11001,38,10461,38],[11001,43,10461,43],[11001,50,10461,50],[11001,52,10461,52],[11002,6,10462,8,"openAsNewWindowIOS"],[11002,24,10462,26],[11002,25,10462,27,"url"],[11002,28,10462,30],[11002,32,10462,34],[11002,34,10462,36],[11002,36,10462,38,"target"],[11002,42,10462,44],[11002,43,10462,45],[11003,6,10463,8],[11003,13,10463,15],[11003,17,10463,19,"AuthPopup"],[11003,26,10463,28],[11003,27,10463,29],[11003,31,10463,33],[11003,32,10463,34],[11004,4,10464,4],[11005,4,10465,4],[11006,4,10466,4],[11007,4,10467,4],[11007,10,10467,10,"newWin"],[11007,16,10467,16],[11007,19,10467,19,"window"],[11007,25,10467,25],[11007,26,10467,26,"open"],[11007,30,10467,30],[11007,31,10467,31,"url"],[11007,34,10467,34],[11007,38,10467,38],[11007,40,10467,40],[11007,42,10467,42,"target"],[11007,48,10467,48],[11007,50,10467,50,"optionsString"],[11007,63,10467,63],[11007,64,10467,64],[11008,4,10468,4,"_assert"],[11008,11,10468,11],[11008,12,10468,12,"newWin"],[11008,18,10468,18],[11008,20,10468,20,"auth"],[11008,24,10468,24],[11008,26,10468,26],[11008,41,10468,41],[11008,42,10468,42],[11008,75,10468,75],[11008,76,10468,76],[11009,4,10469,4],[11010,4,10470,4],[11010,8,10470,8],[11011,6,10471,8,"newWin"],[11011,12,10471,14],[11011,13,10471,15,"focus"],[11011,18,10471,20],[11011,19,10471,21],[11011,20,10471,22],[11012,4,10472,4],[11012,5,10472,5],[11012,6,10473,4],[11012,13,10473,11,"e"],[11012,14,10473,12],[11012,16,10473,14],[11012,17,10473,16],[11013,4,10474,4],[11013,11,10474,11],[11013,15,10474,15,"AuthPopup"],[11013,24,10474,24],[11013,25,10474,25,"newWin"],[11013,31,10474,31],[11013,32,10474,32],[11014,2,10475,0],[11015,2,10476,0],[11015,11,10476,9,"openAsNewWindowIOS"],[11015,29,10476,27,"openAsNewWindowIOS"],[11015,30,10476,28,"url"],[11015,33,10476,31],[11015,35,10476,33,"target"],[11015,41,10476,39],[11015,43,10476,41],[11016,4,10477,4],[11016,10,10477,10,"el"],[11016,12,10477,12],[11016,15,10477,15,"document"],[11016,23,10477,23],[11016,24,10477,24,"createElement"],[11016,37,10477,37],[11016,38,10477,38],[11016,41,10477,41],[11016,42,10477,42],[11017,4,10478,4,"el"],[11017,6,10478,6],[11017,7,10478,7,"href"],[11017,11,10478,11],[11017,14,10478,14,"url"],[11017,17,10478,17],[11018,4,10479,4,"el"],[11018,6,10479,6],[11018,7,10479,7,"target"],[11018,13,10479,13],[11018,16,10479,16,"target"],[11018,22,10479,22],[11019,4,10480,4],[11019,10,10480,10,"click"],[11019,15,10480,15],[11019,18,10480,18,"document"],[11019,26,10480,26],[11019,27,10480,27,"createEvent"],[11019,38,10480,38],[11019,39,10480,39],[11019,51,10480,51],[11019,52,10480,52],[11020,4,10481,4,"click"],[11020,9,10481,9],[11020,10,10481,10,"initMouseEvent"],[11020,24,10481,24],[11020,25,10481,25],[11020,32,10481,32],[11020,34,10481,34],[11020,38,10481,38],[11020,40,10481,40],[11020,44,10481,44],[11020,46,10481,46,"window"],[11020,52,10481,52],[11020,54,10481,54],[11020,55,10481,55],[11020,57,10481,57],[11020,58,10481,58],[11020,60,10481,60],[11020,61,10481,61],[11020,63,10481,63],[11020,64,10481,64],[11020,66,10481,66],[11020,67,10481,67],[11020,69,10481,69],[11020,74,10481,74],[11020,76,10481,76],[11020,81,10481,81],[11020,83,10481,83],[11020,88,10481,88],[11020,90,10481,90],[11020,95,10481,95],[11020,97,10481,97],[11020,98,10481,98],[11020,100,10481,100],[11020,104,10481,104],[11020,105,10481,105],[11021,4,10482,4,"el"],[11021,6,10482,6],[11021,7,10482,7,"dispatchEvent"],[11021,20,10482,20],[11021,21,10482,21,"click"],[11021,26,10482,26],[11021,27,10482,27],[11022,2,10483,0],[11024,2,10485,0],[11025,0,10486,0],[11026,0,10487,0],[11027,0,10488,0],[11028,0,10489,0],[11029,0,10490,0],[11030,0,10491,0],[11031,0,10492,0],[11032,0,10493,0],[11033,0,10494,0],[11034,0,10495,0],[11035,0,10496,0],[11036,0,10497,0],[11037,0,10498,0],[11038,0,10499,0],[11039,0,10500,0],[11040,2,10501,0],[11041,0,10502,0],[11042,0,10503,0],[11043,0,10504,0],[11044,0,10505,0],[11045,2,10506,0],[11045,8,10506,6,"WIDGET_PATH"],[11045,19,10506,17],[11045,22,10506,20],[11045,39,10506,37],[11046,2,10507,0],[11047,0,10508,0],[11048,0,10509,0],[11049,0,10510,0],[11050,0,10511,0],[11051,2,10512,0],[11051,8,10512,6,"EMULATOR_WIDGET_PATH"],[11051,28,10512,26],[11051,31,10512,29],[11051,54,10512,52],[11052,2,10513,0],[11053,0,10514,0],[11054,0,10515,0],[11055,0,10516,0],[11056,0,10517,0],[11057,2,10518,0],[11057,8,10518,6,"FIREBASE_APP_CHECK_FRAGMENT_ID"],[11057,38,10518,36],[11057,41,10518,39,"encodeURIComponent"],[11057,59,10518,57],[11057,60,10518,58],[11057,65,10518,63],[11057,66,10518,64],[11058,2,10519,0],[11058,17,10519,15,"_getRedirectUrl"],[11058,32,10519,30,"_getRedirectUrl"],[11058,33,10519,31,"auth"],[11058,37,10519,35],[11058,39,10519,37,"provider"],[11058,47,10519,45],[11058,49,10519,47,"authType"],[11058,57,10519,55],[11058,59,10519,57,"redirectUrl"],[11058,70,10519,68],[11058,72,10519,70,"eventId"],[11058,79,10519,77],[11058,81,10519,79,"additionalParams"],[11058,97,10519,95],[11058,99,10519,97],[11059,4,10520,4,"_assert"],[11059,11,10520,11],[11059,12,10520,12,"auth"],[11059,16,10520,16],[11059,17,10520,17,"config"],[11059,23,10520,23],[11059,24,10520,24,"authDomain"],[11059,34,10520,34],[11059,36,10520,36,"auth"],[11059,40,10520,40],[11059,42,10520,42],[11059,71,10520,71],[11059,72,10520,72],[11059,111,10520,111],[11059,112,10520,112],[11060,4,10521,4,"_assert"],[11060,11,10521,11],[11060,12,10521,12,"auth"],[11060,16,10521,16],[11060,17,10521,17,"config"],[11060,23,10521,23],[11060,24,10521,24,"apiKey"],[11060,30,10521,30],[11060,32,10521,32,"auth"],[11060,36,10521,36],[11060,38,10521,38],[11060,55,10521,55],[11060,56,10521,56],[11060,91,10521,91],[11060,92,10521,92],[11061,4,10522,4],[11061,10,10522,10,"params"],[11061,16,10522,16],[11061,19,10522,19],[11062,6,10523,8,"apiKey"],[11062,12,10523,14],[11062,14,10523,16,"auth"],[11062,18,10523,20],[11062,19,10523,21,"config"],[11062,25,10523,27],[11062,26,10523,28,"apiKey"],[11062,32,10523,34],[11063,6,10524,8,"appName"],[11063,13,10524,15],[11063,15,10524,17,"auth"],[11063,19,10524,21],[11063,20,10524,22,"name"],[11063,24,10524,26],[11064,6,10525,8,"authType"],[11064,14,10525,16],[11065,6,10526,8,"redirectUrl"],[11065,17,10526,19],[11066,6,10527,8,"v"],[11066,7,10527,9],[11066,9,10527,11,"SDK_VERSION"],[11066,21,10527,22],[11066,22,10527,22,"SDK_VERSION"],[11066,33,10527,22],[11067,6,10528,8,"eventId"],[11068,4,10529,4],[11068,5,10529,5],[11069,4,10530,4],[11069,8,10530,8,"provider"],[11069,16,10530,16],[11069,28,10530,28,"FederatedAuthProvider"],[11069,49,10530,49],[11069,51,10530,51],[11070,6,10531,8,"provider"],[11070,14,10531,16],[11070,15,10531,17,"setDefaultLanguage"],[11070,33,10531,35],[11070,34,10531,36,"auth"],[11070,38,10531,40],[11070,39,10531,41,"languageCode"],[11070,51,10531,53],[11070,52,10531,54],[11071,6,10532,8,"params"],[11071,12,10532,14],[11071,13,10532,15,"providerId"],[11071,23,10532,25],[11071,26,10532,28,"provider"],[11071,34,10532,36],[11071,35,10532,37,"providerId"],[11071,45,10532,47],[11071,49,10532,51],[11071,51,10532,53],[11072,6,10533,8],[11072,10,10533,12],[11072,11,10533,13],[11072,15,10533,13,"isEmpty"],[11072,28,10533,20],[11072,29,10533,20,"isEmpty"],[11072,36,10533,20],[11072,38,10533,21,"provider"],[11072,46,10533,29],[11072,47,10533,30,"getCustomParameters"],[11072,66,10533,49],[11072,67,10533,50],[11072,68,10533,51],[11072,69,10533,52],[11072,71,10533,54],[11073,8,10534,12,"params"],[11073,14,10534,18],[11073,15,10534,19,"customParameters"],[11073,31,10534,35],[11073,34,10534,38,"JSON"],[11073,38,10534,42],[11073,39,10534,43,"stringify"],[11073,48,10534,52],[11073,49,10534,53,"provider"],[11073,57,10534,61],[11073,58,10534,62,"getCustomParameters"],[11073,77,10534,81],[11073,78,10534,82],[11073,79,10534,83],[11073,80,10534,84],[11074,6,10535,8],[11075,6,10536,8],[11076,6,10537,8],[11076,11,10537,13],[11076,17,10537,19],[11076,18,10537,20,"key"],[11076,21,10537,23],[11076,23,10537,25,"value"],[11076,28,10537,30],[11076,29,10537,31],[11076,33,10537,35,"Object"],[11076,39,10537,41],[11076,40,10537,42,"entries"],[11076,47,10537,49],[11076,48,10537,50,"additionalParams"],[11076,64,10537,66],[11076,68,10537,70],[11076,69,10537,71],[11076,70,10537,72],[11076,71,10537,73],[11076,73,10537,75],[11077,8,10538,12,"params"],[11077,14,10538,18],[11077,15,10538,19,"key"],[11077,18,10538,22],[11077,19,10538,23],[11077,22,10538,26,"value"],[11077,27,10538,31],[11078,6,10539,8],[11079,4,10540,4],[11080,4,10541,4],[11080,8,10541,8,"provider"],[11080,16,10541,16],[11080,28,10541,28,"BaseOAuthProvider"],[11080,45,10541,45],[11080,47,10541,47],[11081,6,10542,8],[11081,12,10542,14,"scopes"],[11081,18,10542,20],[11081,21,10542,23,"provider"],[11081,29,10542,31],[11081,30,10542,32,"getScopes"],[11081,39,10542,41],[11081,40,10542,42],[11081,41,10542,43],[11081,42,10542,44,"filter"],[11081,48,10542,50],[11081,49,10542,51,"scope"],[11081,54,10542,56],[11081,58,10542,60,"scope"],[11081,63,10542,65],[11081,68,10542,70],[11081,70,10542,72],[11081,71,10542,73],[11082,6,10543,8],[11082,10,10543,12,"scopes"],[11082,16,10543,18],[11082,17,10543,19,"length"],[11082,23,10543,25],[11082,26,10543,28],[11082,27,10543,29],[11082,29,10543,31],[11083,8,10544,12,"params"],[11083,14,10544,18],[11083,15,10544,19,"scopes"],[11083,21,10544,25],[11083,24,10544,28,"scopes"],[11083,30,10544,34],[11083,31,10544,35,"join"],[11083,35,10544,39],[11083,36,10544,40],[11083,39,10544,43],[11083,40,10544,44],[11084,6,10545,8],[11085,4,10546,4],[11086,4,10547,4],[11086,8,10547,8,"auth"],[11086,12,10547,12],[11086,13,10547,13,"tenantId"],[11086,21,10547,21],[11086,23,10547,23],[11087,6,10548,8,"params"],[11087,12,10548,14],[11087,13,10548,15,"tid"],[11087,16,10548,18],[11087,19,10548,21,"auth"],[11087,23,10548,25],[11087,24,10548,26,"tenantId"],[11087,32,10548,34],[11088,4,10549,4],[11089,4,10550,4],[11090,4,10551,4],[11091,4,10552,4],[11091,10,10552,10,"paramsDict"],[11091,20,10552,20],[11091,23,10552,23,"params"],[11091,29,10552,29],[11092,4,10553,4],[11092,9,10553,9],[11092,15,10553,15,"key"],[11092,18,10553,18],[11092,22,10553,22,"Object"],[11092,28,10553,28],[11092,29,10553,29,"keys"],[11092,33,10553,33],[11092,34,10553,34,"paramsDict"],[11092,44,10553,44],[11092,45,10553,45],[11092,47,10553,47],[11093,6,10554,8],[11093,10,10554,12,"paramsDict"],[11093,20,10554,22],[11093,21,10554,23,"key"],[11093,24,10554,26],[11093,25,10554,27],[11093,30,10554,32,"undefined"],[11093,39,10554,41],[11093,41,10554,43],[11094,8,10555,12],[11094,15,10555,19,"paramsDict"],[11094,25,10555,29],[11094,26,10555,30,"key"],[11094,29,10555,33],[11094,30,10555,34],[11095,6,10556,8],[11096,4,10557,4],[11097,4,10558,4],[11098,4,10559,4],[11098,10,10559,10,"appCheckToken"],[11098,23,10559,23],[11098,26,10559,26],[11098,32,10559,32,"auth"],[11098,36,10559,36],[11098,37,10559,37,"_getAppCheckToken"],[11098,54,10559,54],[11098,55,10559,55],[11098,56,10559,56],[11099,4,10560,4],[11099,10,10560,10,"appCheckTokenFragment"],[11099,31,10560,31],[11099,34,10560,34,"appCheckToken"],[11099,47,10560,47],[11099,50,10561,10],[11099,54,10561,14,"FIREBASE_APP_CHECK_FRAGMENT_ID"],[11099,84,10561,44],[11099,88,10561,48,"encodeURIComponent"],[11099,106,10561,66],[11099,107,10561,67,"appCheckToken"],[11099,120,10561,80],[11099,121,10561,81],[11099,123,10561,83],[11099,126,10562,10],[11099,128,10562,12],[11100,4,10563,4],[11101,4,10564,4],[11101,11,10564,11],[11101,14,10564,14,"getHandlerBase"],[11101,28,10564,28],[11101,29,10564,29,"auth"],[11101,33,10564,33],[11101,34,10564,34],[11101,38,10564,38],[11101,42,10564,38,"querystring"],[11101,55,10564,49],[11101,56,10564,49,"querystring"],[11101,67,10564,49],[11101,69,10564,50,"paramsDict"],[11101,79,10564,60],[11101,80,10564,61],[11101,81,10564,62,"slice"],[11101,86,10564,67],[11101,87,10564,68],[11101,88,10564,69],[11101,89,10564,70],[11101,92,10564,73,"appCheckTokenFragment"],[11101,113,10564,94],[11101,115,10564,96],[11102,2,10565,0],[11103,2,10566,0],[11103,11,10566,9,"getHandlerBase"],[11103,25,10566,23,"getHandlerBase"],[11103,26,10566,24],[11104,4,10566,26,"config"],[11105,2,10566,33],[11105,3,10566,34],[11105,5,10566,36],[11106,4,10567,4],[11106,8,10567,8],[11106,9,10567,9,"config"],[11106,15,10567,15],[11106,16,10567,16,"emulator"],[11106,24,10567,24],[11106,26,10567,26],[11107,6,10568,8],[11107,13,10568,15],[11107,24,10568,26,"config"],[11107,30,10568,32],[11107,31,10568,33,"authDomain"],[11107,41,10568,43],[11107,45,10568,47,"WIDGET_PATH"],[11107,56,10568,58],[11107,58,10568,60],[11108,4,10569,4],[11109,4,10570,4],[11109,11,10570,11,"_emulatorUrl"],[11109,23,10570,23],[11109,24,10570,24,"config"],[11109,30,10570,30],[11109,32,10570,32,"EMULATOR_WIDGET_PATH"],[11109,52,10570,52],[11109,53,10570,53],[11110,2,10571,0],[11112,2,10573,0],[11113,0,10574,0],[11114,0,10575,0],[11115,0,10576,0],[11116,0,10577,0],[11117,0,10578,0],[11118,0,10579,0],[11119,0,10580,0],[11120,0,10581,0],[11121,0,10582,0],[11122,0,10583,0],[11123,0,10584,0],[11124,0,10585,0],[11125,0,10586,0],[11126,0,10587,0],[11127,0,10588,0],[11128,2,10589,0],[11129,0,10590,0],[11130,0,10591,0],[11131,0,10592,0],[11132,2,10593,0],[11132,8,10593,6,"WEB_STORAGE_SUPPORT_KEY"],[11132,31,10593,29],[11132,34,10593,32],[11132,53,10593,51],[11133,2,10594,0],[11133,8,10594,6,"BrowserPopupRedirectResolver"],[11133,36,10594,34],[11133,37,10594,35],[11134,4,10595,4,"constructor"],[11134,15,10595,15,"constructor"],[11134,16,10595,15],[11134,18,10595,18],[11135,6,10596,8],[11135,10,10596,12],[11135,11,10596,13,"eventManagers"],[11135,24,10596,26],[11135,27,10596,29],[11135,28,10596,30],[11135,29,10596,31],[11136,6,10597,8],[11136,10,10597,12],[11136,11,10597,13,"iframes"],[11136,18,10597,20],[11136,21,10597,23],[11136,22,10597,24],[11136,23,10597,25],[11137,6,10598,8],[11137,10,10598,12],[11137,11,10598,13,"originValidationPromises"],[11137,35,10598,37],[11137,38,10598,40],[11137,39,10598,41],[11137,40,10598,42],[11138,6,10599,8],[11138,10,10599,12],[11138,11,10599,13,"_redirectPersistence"],[11138,31,10599,33],[11138,34,10599,36,"browserSessionPersistence"],[11138,59,10599,61],[11139,6,10600,8],[11139,10,10600,12],[11139,11,10600,13,"_completeRedirectFn"],[11139,30,10600,32],[11139,33,10600,35,"_getRedirectResult"],[11139,51,10600,53],[11140,6,10601,8],[11140,10,10601,12],[11140,11,10601,13,"_overrideRedirectResult"],[11140,34,10601,36],[11140,37,10601,39,"_overrideRedirectResult"],[11140,60,10601,62],[11141,4,10602,4],[11142,4,10603,4],[11143,4,10604,4],[11144,4,10605,4],[11144,10,10605,10,"_openPopup"],[11144,20,10605,20,"_openPopup"],[11144,21,10605,21,"auth"],[11144,25,10605,25],[11144,27,10605,27,"provider"],[11144,35,10605,35],[11144,37,10605,37,"authType"],[11144,45,10605,45],[11144,47,10605,47,"eventId"],[11144,54,10605,54],[11144,56,10605,56],[11145,6,10606,8,"debugAssert"],[11145,17,10606,19],[11145,18,10606,20],[11145,22,10606,24],[11145,23,10606,25,"eventManagers"],[11145,36,10606,38],[11145,37,10606,39,"auth"],[11145,41,10606,43],[11145,42,10606,44,"_key"],[11145,46,10606,48],[11145,47,10606,49],[11145,48,10606,50],[11145,49,10606,51],[11145,51,10606,53,"manager"],[11145,58,10606,60],[11145,60,10606,62],[11145,106,10606,108],[11145,107,10606,109],[11146,6,10607,8],[11146,12,10607,14,"url"],[11146,15,10607,17],[11146,18,10607,20],[11146,24,10607,26,"_getRedirectUrl"],[11146,39,10607,41],[11146,40,10607,42,"auth"],[11146,44,10607,46],[11146,46,10607,48,"provider"],[11146,54,10607,56],[11146,56,10607,58,"authType"],[11146,64,10607,66],[11146,66,10607,68,"_getCurrentUrl"],[11146,80,10607,82],[11146,81,10607,83],[11146,82,10607,84],[11146,84,10607,86,"eventId"],[11146,91,10607,93],[11146,92,10607,94],[11147,6,10608,8],[11147,13,10608,15,"_open"],[11147,18,10608,20],[11147,19,10608,21,"auth"],[11147,23,10608,25],[11147,25,10608,27,"url"],[11147,28,10608,30],[11147,30,10608,32,"_generateEventId"],[11147,46,10608,48],[11147,47,10608,49],[11147,48,10608,50],[11147,49,10608,51],[11148,4,10609,4],[11149,4,10610,4],[11149,10,10610,10,"_openRedirect"],[11149,23,10610,23,"_openRedirect"],[11149,24,10610,24,"auth"],[11149,28,10610,28],[11149,30,10610,30,"provider"],[11149,38,10610,38],[11149,40,10610,40,"authType"],[11149,48,10610,48],[11149,50,10610,50,"eventId"],[11149,57,10610,57],[11149,59,10610,59],[11150,6,10611,8],[11150,12,10611,14],[11150,16,10611,18],[11150,17,10611,19,"_originValidation"],[11150,34,10611,36],[11150,35,10611,37,"auth"],[11150,39,10611,41],[11150,40,10611,42],[11151,6,10612,8],[11151,12,10612,14,"url"],[11151,15,10612,17],[11151,18,10612,20],[11151,24,10612,26,"_getRedirectUrl"],[11151,39,10612,41],[11151,40,10612,42,"auth"],[11151,44,10612,46],[11151,46,10612,48,"provider"],[11151,54,10612,56],[11151,56,10612,58,"authType"],[11151,64,10612,66],[11151,66,10612,68,"_getCurrentUrl"],[11151,80,10612,82],[11151,81,10612,83],[11151,82,10612,84],[11151,84,10612,86,"eventId"],[11151,91,10612,93],[11151,92,10612,94],[11152,6,10613,8,"_setWindowLocation"],[11152,24,10613,26],[11152,25,10613,27,"url"],[11152,28,10613,30],[11152,29,10613,31],[11153,6,10614,8],[11153,13,10614,15],[11153,17,10614,19,"Promise"],[11153,24,10614,26],[11153,25,10614,27],[11153,31,10614,33],[11153,32,10614,35],[11153,33,10614,36],[11153,34,10614,37],[11154,4,10615,4],[11155,4,10616,4,"_initialize"],[11155,15,10616,15,"_initialize"],[11155,16,10616,16,"auth"],[11155,20,10616,20],[11155,22,10616,22],[11156,6,10617,8],[11156,12,10617,14,"key"],[11156,15,10617,17],[11156,18,10617,20,"auth"],[11156,22,10617,24],[11156,23,10617,25,"_key"],[11156,27,10617,29],[11156,28,10617,30],[11156,29,10617,31],[11157,6,10618,8],[11157,10,10618,12],[11157,14,10618,16],[11157,15,10618,17,"eventManagers"],[11157,28,10618,30],[11157,29,10618,31,"key"],[11157,32,10618,34],[11157,33,10618,35],[11157,35,10618,37],[11158,8,10619,12],[11158,14,10619,18],[11159,10,10619,20,"manager"],[11159,17,10619,27],[11160,10,10619,29,"promise"],[11161,8,10619,37],[11161,9,10619,38],[11161,12,10619,41],[11161,16,10619,45],[11161,17,10619,46,"eventManagers"],[11161,30,10619,59],[11161,31,10619,60,"key"],[11161,34,10619,63],[11161,35,10619,64],[11162,8,10620,12],[11162,12,10620,16,"manager"],[11162,19,10620,23],[11162,21,10620,25],[11163,10,10621,16],[11163,17,10621,23,"Promise"],[11163,24,10621,30],[11163,25,10621,31,"resolve"],[11163,32,10621,38],[11163,33,10621,39,"manager"],[11163,40,10621,46],[11163,41,10621,47],[11164,8,10622,12],[11164,9,10622,13],[11164,15,10623,17],[11165,10,10624,16,"debugAssert"],[11165,21,10624,27],[11165,22,10624,28,"promise"],[11165,29,10624,35],[11165,31,10624,37],[11165,73,10624,79],[11165,74,10624,80],[11166,10,10625,16],[11166,17,10625,23,"promise"],[11166,24,10625,30],[11167,8,10626,12],[11168,6,10627,8],[11169,6,10628,8],[11169,12,10628,14,"promise"],[11169,19,10628,21],[11169,22,10628,24],[11169,26,10628,28],[11169,27,10628,29,"initAndGetManager"],[11169,44,10628,46],[11169,45,10628,47,"auth"],[11169,49,10628,51],[11169,50,10628,52],[11170,6,10629,8],[11170,10,10629,12],[11170,11,10629,13,"eventManagers"],[11170,24,10629,26],[11170,25,10629,27,"key"],[11170,28,10629,30],[11170,29,10629,31],[11170,32,10629,34],[11171,8,10629,36,"promise"],[11172,6,10629,44],[11172,7,10629,45],[11173,6,10630,8],[11174,6,10631,8],[11175,6,10632,8,"promise"],[11175,13,10632,15],[11175,14,10632,16,"catch"],[11175,19,10632,21],[11175,20,10632,22],[11175,26,10632,28],[11176,8,10633,12],[11176,15,10633,19],[11176,19,10633,23],[11176,20,10633,24,"eventManagers"],[11176,33,10633,37],[11176,34,10633,38,"key"],[11176,37,10633,41],[11176,38,10633,42],[11177,6,10634,8],[11177,7,10634,9],[11177,8,10634,10],[11178,6,10635,8],[11178,13,10635,15,"promise"],[11178,20,10635,22],[11179,4,10636,4],[11180,4,10637,4],[11180,10,10637,10,"initAndGetManager"],[11180,27,10637,27,"initAndGetManager"],[11180,28,10637,28,"auth"],[11180,32,10637,32],[11180,34,10637,34],[11181,6,10638,8],[11181,12,10638,14,"iframe"],[11181,18,10638,20],[11181,21,10638,23],[11181,27,10638,29,"_openIframe"],[11181,38,10638,40],[11181,39,10638,41,"auth"],[11181,43,10638,45],[11181,44,10638,46],[11182,6,10639,8],[11182,12,10639,14,"manager"],[11182,19,10639,21],[11182,22,10639,24],[11182,26,10639,28,"AuthEventManager"],[11182,42,10639,44],[11182,43,10639,45,"auth"],[11182,47,10639,49],[11182,48,10639,50],[11183,6,10640,8,"iframe"],[11183,12,10640,14],[11183,13,10640,15,"register"],[11183,21,10640,23],[11183,22,10640,24],[11183,33,10640,35],[11183,35,10640,38,"iframeEvent"],[11183,46,10640,49],[11183,50,10640,54],[11184,8,10641,12,"_assert"],[11184,15,10641,19],[11184,16,10641,20,"iframeEvent"],[11184,27,10641,31],[11184,29,10641,33,"authEvent"],[11184,38,10641,42],[11184,40,10641,44,"auth"],[11184,44,10641,48],[11184,46,10641,50],[11184,66,10641,70],[11184,67,10641,71],[11184,105,10641,109],[11184,106,10641,110],[11185,8,10642,12],[11186,8,10643,12],[11186,14,10643,18,"handled"],[11186,21,10643,25],[11186,24,10643,28,"manager"],[11186,31,10643,35],[11186,32,10643,36,"onEvent"],[11186,39,10643,43],[11186,40,10643,44,"iframeEvent"],[11186,51,10643,55],[11186,52,10643,56,"authEvent"],[11186,61,10643,65],[11186,62,10643,66],[11187,8,10644,12],[11187,15,10644,19],[11188,10,10644,21,"status"],[11188,16,10644,27],[11188,18,10644,29,"handled"],[11188,25,10644,36],[11188,28,10644,39],[11188,33,10644,44],[11188,34,10644,45],[11188,58,10644,69],[11188,65,10644,76],[11188,66,10644,77],[11189,8,10644,101],[11189,9,10644,102],[11190,6,10645,8],[11190,7,10645,9],[11190,9,10645,11,"gapi"],[11190,13,10645,15],[11190,14,10645,16,"iframes"],[11190,21,10645,23],[11190,22,10645,24,"CROSS_ORIGIN_IFRAMES_FILTER"],[11190,49,10645,51],[11190,50,10645,52],[11191,6,10646,8],[11191,10,10646,12],[11191,11,10646,13,"eventManagers"],[11191,24,10646,26],[11191,25,10646,27,"auth"],[11191,29,10646,31],[11191,30,10646,32,"_key"],[11191,34,10646,36],[11191,35,10646,37],[11191,36,10646,38],[11191,37,10646,39],[11191,40,10646,42],[11192,8,10646,44,"manager"],[11193,6,10646,52],[11193,7,10646,53],[11194,6,10647,8],[11194,10,10647,12],[11194,11,10647,13,"iframes"],[11194,18,10647,20],[11194,19,10647,21,"auth"],[11194,23,10647,25],[11194,24,10647,26,"_key"],[11194,28,10647,30],[11194,29,10647,31],[11194,30,10647,32],[11194,31,10647,33],[11194,34,10647,36,"iframe"],[11194,40,10647,42],[11195,6,10648,8],[11195,13,10648,15,"manager"],[11195,20,10648,22],[11196,4,10649,4],[11197,4,10650,4,"_isIframeWebStorageSupported"],[11197,32,10650,32,"_isIframeWebStorageSupported"],[11197,33,10650,33,"auth"],[11197,37,10650,37],[11197,39,10650,39,"cb"],[11197,41,10650,41],[11197,43,10650,43],[11198,6,10651,8],[11198,12,10651,14,"iframe"],[11198,18,10651,20],[11198,21,10651,23],[11198,25,10651,27],[11198,26,10651,28,"iframes"],[11198,33,10651,35],[11198,34,10651,36,"auth"],[11198,38,10651,40],[11198,39,10651,41,"_key"],[11198,43,10651,45],[11198,44,10651,46],[11198,45,10651,47],[11198,46,10651,48],[11199,6,10652,8,"iframe"],[11199,12,10652,14],[11199,13,10652,15,"send"],[11199,17,10652,19],[11199,18,10652,20,"WEB_STORAGE_SUPPORT_KEY"],[11199,41,10652,43],[11199,43,10652,45],[11200,8,10652,47,"type"],[11200,12,10652,51],[11200,14,10652,53,"WEB_STORAGE_SUPPORT_KEY"],[11201,6,10652,77],[11201,7,10652,78],[11201,9,10652,80,"result"],[11201,15,10652,86],[11201,19,10652,90],[11202,8,10653,12],[11202,14,10653,18,"isSupported"],[11202,25,10653,29],[11202,28,10653,32,"result"],[11202,34,10653,38],[11202,37,10653,41],[11202,38,10653,42],[11202,39,10653,43],[11202,42,10653,46,"WEB_STORAGE_SUPPORT_KEY"],[11202,65,10653,69],[11202,66,10653,70],[11203,8,10654,12],[11203,12,10654,16,"isSupported"],[11203,23,10654,27],[11203,28,10654,32,"undefined"],[11203,37,10654,41],[11203,39,10654,43],[11204,10,10655,16,"cb"],[11204,12,10655,18],[11204,13,10655,19],[11204,14,10655,20],[11204,15,10655,21,"isSupported"],[11204,26,10655,32],[11204,27,10655,33],[11205,8,10656,12],[11206,8,10657,12,"_fail"],[11206,13,10657,17],[11206,14,10657,18,"auth"],[11206,18,10657,22],[11206,20,10657,24],[11206,36,10657,40],[11206,37,10657,41],[11206,71,10657,75],[11206,72,10657,76],[11207,6,10658,8],[11207,7,10658,9],[11207,9,10658,11,"gapi"],[11207,13,10658,15],[11207,14,10658,16,"iframes"],[11207,21,10658,23],[11207,22,10658,24,"CROSS_ORIGIN_IFRAMES_FILTER"],[11207,49,10658,51],[11207,50,10658,52],[11208,4,10659,4],[11209,4,10660,4,"_originValidation"],[11209,21,10660,21,"_originValidation"],[11209,22,10660,22,"auth"],[11209,26,10660,26],[11209,28,10660,28],[11210,6,10661,8],[11210,12,10661,14,"key"],[11210,15,10661,17],[11210,18,10661,20,"auth"],[11210,22,10661,24],[11210,23,10661,25,"_key"],[11210,27,10661,29],[11210,28,10661,30],[11210,29,10661,31],[11211,6,10662,8],[11211,10,10662,12],[11211,11,10662,13],[11211,15,10662,17],[11211,16,10662,18,"originValidationPromises"],[11211,40,10662,42],[11211,41,10662,43,"key"],[11211,44,10662,46],[11211,45,10662,47],[11211,47,10662,49],[11212,8,10663,12],[11212,12,10663,16],[11212,13,10663,17,"originValidationPromises"],[11212,37,10663,41],[11212,38,10663,42,"key"],[11212,41,10663,45],[11212,42,10663,46],[11212,45,10663,49,"_validateOrigin"],[11212,60,10663,64],[11212,61,10663,65,"auth"],[11212,65,10663,69],[11212,66,10663,70],[11213,6,10664,8],[11214,6,10665,8],[11214,13,10665,15],[11214,17,10665,19],[11214,18,10665,20,"originValidationPromises"],[11214,42,10665,44],[11214,43,10665,45,"key"],[11214,46,10665,48],[11214,47,10665,49],[11215,4,10666,4],[11216,4,10667,4],[11216,8,10667,8,"_shouldInitProactively"],[11216,30,10667,30,"_shouldInitProactively"],[11216,31,10667,30],[11216,33,10667,33],[11217,6,10668,8],[11218,6,10669,8],[11218,13,10669,15,"_isMobileBrowser"],[11218,29,10669,31],[11218,30,10669,32],[11218,31,10669,33],[11218,35,10669,37,"_isSafari"],[11218,44,10669,46],[11218,45,10669,47],[11218,46,10669,48],[11218,50,10669,52,"_isIOS"],[11218,56,10669,58],[11218,57,10669,59],[11218,58,10669,60],[11219,4,10670,4],[11220,2,10671,0],[11221,2,10672,0],[11222,0,10673,0],[11223,0,10674,0],[11224,0,10675,0],[11225,0,10676,0],[11226,0,10677,0],[11227,0,10678,0],[11228,0,10679,0],[11229,0,10680,0],[11230,2,10681,0],[11230,8,10681,6,"browserPopupRedirectResolver"],[11230,36,10681,34],[11230,39,10681,37,"BrowserPopupRedirectResolver"],[11230,67,10681,65],[11231,2,10683,0],[11231,8,10683,6,"MultiFactorAssertionImpl"],[11231,32,10683,30],[11231,33,10683,31],[11232,4,10684,4,"constructor"],[11232,15,10684,15,"constructor"],[11232,16,10684,16,"factorId"],[11232,24,10684,24],[11232,26,10684,26],[11233,6,10685,8],[11233,10,10685,12],[11233,11,10685,13,"factorId"],[11233,19,10685,21],[11233,22,10685,24,"factorId"],[11233,30,10685,32],[11234,4,10686,4],[11235,4,10687,4,"_process"],[11235,12,10687,12,"_process"],[11235,13,10687,13,"auth"],[11235,17,10687,17],[11235,19,10687,19,"session"],[11235,26,10687,26],[11235,28,10687,28,"displayName"],[11235,39,10687,39],[11235,41,10687,41],[11236,6,10688,8],[11236,14,10688,16,"session"],[11236,21,10688,23],[11236,22,10688,24,"type"],[11236,26,10688,28],[11237,8,10689,12],[11237,13,10689,17],[11237,21,10689,25],[11237,22,10689,26],[11238,10,10690,16],[11238,17,10690,23],[11238,21,10690,27],[11238,22,10690,28,"_finalizeEnroll"],[11238,37,10690,43],[11238,38,10690,44,"auth"],[11238,42,10690,48],[11238,44,10690,50,"session"],[11238,51,10690,57],[11238,52,10690,58,"credential"],[11238,62,10690,68],[11238,64,10690,70,"displayName"],[11238,75,10690,81],[11238,76,10690,82],[11239,8,10691,12],[11239,13,10691,17],[11239,21,10691,25],[11239,22,10691,26],[11240,10,10692,16],[11240,17,10692,23],[11240,21,10692,27],[11240,22,10692,28,"_finalizeSignIn"],[11240,37,10692,43],[11240,38,10692,44,"auth"],[11240,42,10692,48],[11240,44,10692,50,"session"],[11240,51,10692,57],[11240,52,10692,58,"credential"],[11240,62,10692,68],[11240,63,10692,69],[11241,8,10693,12],[11242,10,10694,16],[11242,17,10694,23,"debugFail"],[11242,26,10694,32],[11242,27,10694,33],[11242,62,10694,68],[11242,63,10694,69],[11243,6,10695,8],[11244,4,10696,4],[11245,2,10697,0],[11247,2,10699,0],[11248,0,10700,0],[11249,0,10701,0],[11250,0,10702,0],[11251,0,10703,0],[11252,2,10704,0],[11252,8,10704,6,"PhoneMultiFactorAssertionImpl"],[11252,37,10704,35],[11252,46,10704,44,"MultiFactorAssertionImpl"],[11252,70,10704,68],[11252,71,10704,69],[11253,4,10705,4,"constructor"],[11253,15,10705,15,"constructor"],[11253,16,10705,16,"credential"],[11253,26,10705,26],[11253,28,10705,28],[11254,6,10706,8],[11254,11,10706,13],[11254,12,10706,14],[11254,19,10706,21],[11254,20,10706,22],[11254,40,10706,42],[11254,41,10706,43],[11255,6,10707,8],[11255,10,10707,12],[11255,11,10707,13,"credential"],[11255,21,10707,23],[11255,24,10707,26,"credential"],[11255,34,10707,36],[11256,4,10708,4],[11257,4,10709,4],[11258,4,10710,4],[11258,11,10710,11,"_fromCredential"],[11258,26,10710,26,"_fromCredential"],[11258,27,10710,27,"credential"],[11258,37,10710,37],[11258,39,10710,39],[11259,6,10711,8],[11259,13,10711,15],[11259,17,10711,19,"PhoneMultiFactorAssertionImpl"],[11259,46,10711,48],[11259,47,10711,49,"credential"],[11259,57,10711,59],[11259,58,10711,60],[11260,4,10712,4],[11261,4,10713,4],[11262,4,10714,4,"_finalizeEnroll"],[11262,19,10714,19,"_finalizeEnroll"],[11262,20,10714,20,"auth"],[11262,24,10714,24],[11262,26,10714,26,"idToken"],[11262,33,10714,33],[11262,35,10714,35,"displayName"],[11262,46,10714,46],[11262,48,10714,48],[11263,6,10715,8],[11263,13,10715,15,"finalizeEnrollPhoneMfa"],[11263,35,10715,37],[11263,36,10715,38,"auth"],[11263,40,10715,42],[11263,42,10715,44],[11264,8,10716,12,"idToken"],[11264,15,10716,19],[11265,8,10717,12,"displayName"],[11265,19,10717,23],[11266,8,10718,12,"phoneVerificationInfo"],[11266,29,10718,33],[11266,31,10718,35],[11266,35,10718,39],[11266,36,10718,40,"credential"],[11266,46,10718,50],[11266,47,10718,51,"_makeVerificationRequest"],[11266,71,10718,75],[11266,72,10718,76],[11267,6,10719,8],[11267,7,10719,9],[11267,8,10719,10],[11268,4,10720,4],[11269,4,10721,4],[11270,4,10722,4,"_finalizeSignIn"],[11270,19,10722,19,"_finalizeSignIn"],[11270,20,10722,20,"auth"],[11270,24,10722,24],[11270,26,10722,26,"mfaPendingCredential"],[11270,46,10722,46],[11270,48,10722,48],[11271,6,10723,8],[11271,13,10723,15,"finalizeSignInPhoneMfa"],[11271,35,10723,37],[11271,36,10723,38,"auth"],[11271,40,10723,42],[11271,42,10723,44],[11272,8,10724,12,"mfaPendingCredential"],[11272,28,10724,32],[11273,8,10725,12,"phoneVerificationInfo"],[11273,29,10725,33],[11273,31,10725,35],[11273,35,10725,39],[11273,36,10725,40,"credential"],[11273,46,10725,50],[11273,47,10725,51,"_makeVerificationRequest"],[11273,71,10725,75],[11273,72,10725,76],[11274,6,10726,8],[11274,7,10726,9],[11274,8,10726,10],[11275,4,10727,4],[11276,2,10728,0],[11277,2,10729,0],[11278,0,10730,0],[11279,0,10731,0],[11280,0,10732,0],[11281,0,10733,0],[11282,2,10734,0],[11282,8,10734,6,"PhoneMultiFactorGenerator"],[11282,33,10734,31],[11282,34,10734,32],[11283,4,10735,4,"constructor"],[11283,15,10735,15,"constructor"],[11283,16,10735,15],[11283,18,10735,18],[11283,19,10735,20],[11284,4,10736,4],[11285,0,10737,0],[11286,0,10738,0],[11287,0,10739,0],[11288,0,10740,0],[11289,0,10741,0],[11290,0,10742,0],[11291,0,10743,0],[11292,0,10744,0],[11293,0,10745,0],[11294,4,10746,4],[11294,11,10746,11,"assertion"],[11294,20,10746,20,"assertion"],[11294,21,10746,21,"credential"],[11294,31,10746,31],[11294,33,10746,33],[11295,6,10747,8],[11295,13,10747,15,"PhoneMultiFactorAssertionImpl"],[11295,42,10747,44],[11295,43,10747,45,"_fromCredential"],[11295,58,10747,60],[11295,59,10747,61,"credential"],[11295,69,10747,71],[11295,70,10747,72],[11296,4,10748,4],[11297,2,10749,0],[11298,2,10750,0],[11299,0,10751,0],[11300,0,10752,0],[11301,2,10753,0,"PhoneMultiFactorGenerator"],[11301,27,10753,25],[11301,28,10753,26,"FACTOR_ID"],[11301,37,10753,35],[11301,40,10753,38],[11301,47,10753,45],[11303,2,10755,0],[11304,0,10756,0],[11305,0,10757,0],[11306,0,10758,0],[11307,0,10759,0],[11308,2,10760,0],[11308,8,10760,6,"TotpMultiFactorGenerator"],[11308,32,10760,30],[11308,33,10760,31],[11309,4,10761,4],[11310,0,10762,0],[11311,0,10763,0],[11312,0,10764,0],[11313,0,10765,0],[11314,0,10766,0],[11315,0,10767,0],[11316,0,10768,0],[11317,0,10769,0],[11318,0,10770,0],[11319,4,10771,4],[11319,11,10771,11,"assertionForEnrollment"],[11319,33,10771,33,"assertionForEnrollment"],[11319,34,10771,34,"secret"],[11319,40,10771,40],[11319,42,10771,42,"oneTimePassword"],[11319,57,10771,57],[11319,59,10771,59],[11320,6,10772,8],[11320,13,10772,15,"TotpMultiFactorAssertionImpl"],[11320,41,10772,43],[11320,42,10772,44,"_fromSecret"],[11320,53,10772,55],[11320,54,10772,56,"secret"],[11320,60,10772,62],[11320,62,10772,64,"oneTimePassword"],[11320,77,10772,79],[11320,78,10772,80],[11321,4,10773,4],[11322,4,10774,4],[11323,0,10775,0],[11324,0,10776,0],[11325,0,10777,0],[11326,0,10778,0],[11327,0,10779,0],[11328,0,10780,0],[11329,0,10781,0],[11330,0,10782,0],[11331,4,10783,4],[11331,11,10783,11,"assertionForSignIn"],[11331,29,10783,29,"assertionForSignIn"],[11331,30,10783,30,"enrollmentId"],[11331,42,10783,42],[11331,44,10783,44,"oneTimePassword"],[11331,59,10783,59],[11331,61,10783,61],[11332,6,10784,8],[11332,13,10784,15,"TotpMultiFactorAssertionImpl"],[11332,41,10784,43],[11332,42,10784,44,"_fromEnrollmentId"],[11332,59,10784,61],[11332,60,10784,62,"enrollmentId"],[11332,72,10784,74],[11332,74,10784,76,"oneTimePassword"],[11332,89,10784,91],[11332,90,10784,92],[11333,4,10785,4],[11334,4,10786,4],[11335,0,10787,0],[11336,0,10788,0],[11337,0,10789,0],[11338,0,10790,0],[11339,0,10791,0],[11340,0,10792,0],[11341,0,10793,0],[11342,0,10794,0],[11343,4,10795,4],[11343,17,10795,17,"generateSecret"],[11343,31,10795,31,"generateSecret"],[11343,32,10795,32,"session"],[11343,39,10795,39],[11343,41,10795,41],[11344,6,10796,8],[11344,12,10796,14,"mfaSession"],[11344,22,10796,24],[11344,25,10796,27,"session"],[11344,32,10796,34],[11345,6,10797,8,"_assert"],[11345,13,10797,15],[11345,14,10797,16],[11345,21,10797,23,"mfaSession"],[11345,31,10797,33],[11345,32,10797,34,"user"],[11345,36,10797,38],[11345,38,10797,40,"auth"],[11345,42,10797,44],[11345,47,10797,49],[11345,58,10797,60],[11345,60,10797,62],[11345,76,10797,78],[11345,77,10797,79],[11345,111,10797,113],[11345,112,10797,114],[11346,6,10798,8],[11346,12,10798,14,"response"],[11346,20,10798,22],[11346,23,10798,25],[11346,29,10798,31,"startEnrollTotpMfa"],[11346,47,10798,49],[11346,48,10798,50,"mfaSession"],[11346,58,10798,60],[11346,59,10798,61,"user"],[11346,63,10798,65],[11346,64,10798,66,"auth"],[11346,68,10798,70],[11346,70,10798,72],[11347,8,10799,12,"idToken"],[11347,15,10799,19],[11347,17,10799,21,"mfaSession"],[11347,27,10799,31],[11347,28,10799,32,"credential"],[11347,38,10799,42],[11348,8,10800,12,"totpEnrollmentInfo"],[11348,26,10800,30],[11348,28,10800,32],[11348,29,10800,33],[11349,6,10801,8],[11349,7,10801,9],[11349,8,10801,10],[11350,6,10802,8],[11350,13,10802,15,"TotpSecret"],[11350,23,10802,25],[11350,24,10802,26,"_fromStartTotpMfaEnrollmentResponse"],[11350,59,10802,61],[11350,60,10802,62,"response"],[11350,68,10802,70],[11350,70,10802,72,"mfaSession"],[11350,80,10802,82],[11350,81,10802,83,"user"],[11350,85,10802,87],[11350,86,10802,88,"auth"],[11350,90,10802,92],[11350,91,10802,93],[11351,4,10803,4],[11352,2,10804,0],[11353,2,10805,0],[11354,0,10806,0],[11355,0,10807,0],[11356,2,10808,0,"TotpMultiFactorGenerator"],[11356,26,10808,24],[11356,27,10808,25,"FACTOR_ID"],[11356,36,10808,34],[11356,39,10808,37],[11356,45,10808,43],[11356,46,10808,44],[11357,2,10809,0],[11357,8,10809,6,"TotpMultiFactorAssertionImpl"],[11357,36,10809,34],[11357,45,10809,43,"MultiFactorAssertionImpl"],[11357,69,10809,67],[11357,70,10809,68],[11358,4,10810,4,"constructor"],[11358,15,10810,15,"constructor"],[11358,16,10810,16,"otp"],[11358,19,10810,19],[11358,21,10810,21,"enrollmentId"],[11358,33,10810,33],[11358,35,10810,35,"secret"],[11358,41,10810,41],[11358,43,10810,43],[11359,6,10811,8],[11359,11,10811,13],[11359,12,10811,14],[11359,18,10811,20],[11359,19,10811,21],[11359,38,10811,40],[11359,39,10811,41],[11360,6,10812,8],[11360,10,10812,12],[11360,11,10812,13,"otp"],[11360,14,10812,16],[11360,17,10812,19,"otp"],[11360,20,10812,22],[11361,6,10813,8],[11361,10,10813,12],[11361,11,10813,13,"enrollmentId"],[11361,23,10813,25],[11361,26,10813,28,"enrollmentId"],[11361,38,10813,40],[11362,6,10814,8],[11362,10,10814,12],[11362,11,10814,13,"secret"],[11362,17,10814,19],[11362,20,10814,22,"secret"],[11362,26,10814,28],[11363,4,10815,4],[11364,4,10816,4],[11365,4,10817,4],[11365,11,10817,11,"_fromSecret"],[11365,22,10817,22,"_fromSecret"],[11365,23,10817,23,"secret"],[11365,29,10817,29],[11365,31,10817,31,"otp"],[11365,34,10817,34],[11365,36,10817,36],[11366,6,10818,8],[11366,13,10818,15],[11366,17,10818,19,"TotpMultiFactorAssertionImpl"],[11366,45,10818,47],[11366,46,10818,48,"otp"],[11366,49,10818,51],[11366,51,10818,53,"undefined"],[11366,60,10818,62],[11366,62,10818,64,"secret"],[11366,68,10818,70],[11366,69,10818,71],[11367,4,10819,4],[11368,4,10820,4],[11369,4,10821,4],[11369,11,10821,11,"_fromEnrollmentId"],[11369,28,10821,28,"_fromEnrollmentId"],[11369,29,10821,29,"enrollmentId"],[11369,41,10821,41],[11369,43,10821,43,"otp"],[11369,46,10821,46],[11369,48,10821,48],[11370,6,10822,8],[11370,13,10822,15],[11370,17,10822,19,"TotpMultiFactorAssertionImpl"],[11370,45,10822,47],[11370,46,10822,48,"otp"],[11370,49,10822,51],[11370,51,10822,53,"enrollmentId"],[11370,63,10822,65],[11370,64,10822,66],[11371,4,10823,4],[11372,4,10824,4],[11373,4,10825,4],[11373,10,10825,10,"_finalizeEnroll"],[11373,25,10825,25,"_finalizeEnroll"],[11373,26,10825,26,"auth"],[11373,30,10825,30],[11373,32,10825,32,"idToken"],[11373,39,10825,39],[11373,41,10825,41,"displayName"],[11373,52,10825,52],[11373,54,10825,54],[11374,6,10826,8,"_assert"],[11374,13,10826,15],[11374,14,10826,16],[11374,21,10826,23],[11374,25,10826,27],[11374,26,10826,28,"secret"],[11374,32,10826,34],[11374,37,10826,39],[11374,48,10826,50],[11374,50,10826,52,"auth"],[11374,54,10826,56],[11374,56,10826,58],[11374,72,10826,74],[11374,73,10826,75],[11374,107,10826,109],[11374,108,10826,110],[11375,6,10827,8],[11375,13,10827,15,"finalizeEnrollTotpMfa"],[11375,34,10827,36],[11375,35,10827,37,"auth"],[11375,39,10827,41],[11375,41,10827,43],[11376,8,10828,12,"idToken"],[11376,15,10828,19],[11377,8,10829,12,"displayName"],[11377,19,10829,23],[11378,8,10830,12,"totpVerificationInfo"],[11378,28,10830,32],[11378,30,10830,34],[11378,34,10830,38],[11378,35,10830,39,"secret"],[11378,41,10830,45],[11378,42,10830,46,"_makeTotpVerificationInfo"],[11378,67,10830,71],[11378,68,10830,72],[11378,72,10830,76],[11378,73,10830,77,"otp"],[11378,76,10830,80],[11379,6,10831,8],[11379,7,10831,9],[11379,8,10831,10],[11380,4,10832,4],[11381,4,10833,4],[11382,4,10834,4],[11382,10,10834,10,"_finalizeSignIn"],[11382,25,10834,25,"_finalizeSignIn"],[11382,26,10834,26,"auth"],[11382,30,10834,30],[11382,32,10834,32,"mfaPendingCredential"],[11382,52,10834,52],[11382,54,10834,54],[11383,6,10835,8,"_assert"],[11383,13,10835,15],[11383,14,10835,16],[11383,18,10835,20],[11383,19,10835,21,"enrollmentId"],[11383,31,10835,33],[11383,36,10835,38,"undefined"],[11383,45,10835,47],[11383,49,10835,51],[11383,53,10835,55],[11383,54,10835,56,"otp"],[11383,57,10835,59],[11383,62,10835,64,"undefined"],[11383,71,10835,73],[11383,73,10835,75,"auth"],[11383,77,10835,79],[11383,79,10835,81],[11383,95,10835,97],[11383,96,10835,98],[11383,130,10835,132],[11383,131,10835,133],[11384,6,10836,8],[11384,12,10836,14,"totpVerificationInfo"],[11384,32,10836,34],[11384,35,10836,37],[11385,8,10836,39,"verificationCode"],[11385,24,10836,55],[11385,26,10836,57],[11385,30,10836,61],[11385,31,10836,62,"otp"],[11386,6,10836,66],[11386,7,10836,67],[11387,6,10837,8],[11387,13,10837,15,"finalizeSignInTotpMfa"],[11387,34,10837,36],[11387,35,10837,37,"auth"],[11387,39,10837,41],[11387,41,10837,43],[11388,8,10838,12,"mfaPendingCredential"],[11388,28,10838,32],[11389,8,10839,12,"mfaEnrollmentId"],[11389,23,10839,27],[11389,25,10839,29],[11389,29,10839,33],[11389,30,10839,34,"enrollmentId"],[11389,42,10839,46],[11390,8,10840,12,"totpVerificationInfo"],[11391,6,10841,8],[11391,7,10841,9],[11391,8,10841,10],[11392,4,10842,4],[11393,2,10843,0],[11394,2,10844,0],[11395,0,10845,0],[11396,0,10846,0],[11397,0,10847,0],[11398,0,10848,0],[11399,0,10849,0],[11400,0,10850,0],[11401,2,10851,0],[11401,8,10851,6,"TotpSecret"],[11401,18,10851,16],[11401,19,10851,17],[11402,4,10852,4],[11403,4,10853,4,"constructor"],[11403,15,10853,15,"constructor"],[11403,16,10853,16,"secretKey"],[11403,25,10853,25],[11403,27,10853,27,"hashingAlgorithm"],[11403,43,10853,43],[11403,45,10853,45,"codeLength"],[11403,55,10853,55],[11403,57,10853,57,"codeIntervalSeconds"],[11403,76,10853,76],[11403,78,10853,78,"enrollmentCompletionDeadline"],[11403,106,10853,106],[11403,108,10853,108,"sessionInfo"],[11403,119,10853,119],[11403,121,10853,121,"auth"],[11403,125,10853,125],[11403,127,10853,127],[11404,6,10854,8],[11404,10,10854,12],[11404,11,10854,13,"sessionInfo"],[11404,22,10854,24],[11404,25,10854,27,"sessionInfo"],[11404,36,10854,38],[11405,6,10855,8],[11405,10,10855,12],[11405,11,10855,13,"auth"],[11405,15,10855,17],[11405,18,10855,20,"auth"],[11405,22,10855,24],[11406,6,10856,8],[11406,10,10856,12],[11406,11,10856,13,"secretKey"],[11406,20,10856,22],[11406,23,10856,25,"secretKey"],[11406,32,10856,34],[11407,6,10857,8],[11407,10,10857,12],[11407,11,10857,13,"hashingAlgorithm"],[11407,27,10857,29],[11407,30,10857,32,"hashingAlgorithm"],[11407,46,10857,48],[11408,6,10858,8],[11408,10,10858,12],[11408,11,10858,13,"codeLength"],[11408,21,10858,23],[11408,24,10858,26,"codeLength"],[11408,34,10858,36],[11409,6,10859,8],[11409,10,10859,12],[11409,11,10859,13,"codeIntervalSeconds"],[11409,30,10859,32],[11409,33,10859,35,"codeIntervalSeconds"],[11409,52,10859,54],[11410,6,10860,8],[11410,10,10860,12],[11410,11,10860,13,"enrollmentCompletionDeadline"],[11410,39,10860,41],[11410,42,10860,44,"enrollmentCompletionDeadline"],[11410,70,10860,72],[11411,4,10861,4],[11412,4,10862,4],[11413,4,10863,4],[11413,11,10863,11,"_fromStartTotpMfaEnrollmentResponse"],[11413,46,10863,46,"_fromStartTotpMfaEnrollmentResponse"],[11413,47,10863,47,"response"],[11413,55,10863,55],[11413,57,10863,57,"auth"],[11413,61,10863,61],[11413,63,10863,63],[11414,6,10864,8],[11414,13,10864,15],[11414,17,10864,19,"TotpSecret"],[11414,27,10864,29],[11414,28,10864,30,"response"],[11414,36,10864,38],[11414,37,10864,39,"totpSessionInfo"],[11414,52,10864,54],[11414,53,10864,55,"sharedSecretKey"],[11414,68,10864,70],[11414,70,10864,72,"response"],[11414,78,10864,80],[11414,79,10864,81,"totpSessionInfo"],[11414,94,10864,96],[11414,95,10864,97,"hashingAlgorithm"],[11414,111,10864,113],[11414,113,10864,115,"response"],[11414,121,10864,123],[11414,122,10864,124,"totpSessionInfo"],[11414,137,10864,139],[11414,138,10864,140,"verificationCodeLength"],[11414,160,10864,162],[11414,162,10864,164,"response"],[11414,170,10864,172],[11414,171,10864,173,"totpSessionInfo"],[11414,186,10864,188],[11414,187,10864,189,"periodSec"],[11414,196,10864,198],[11414,198,10864,200],[11414,202,10864,204,"Date"],[11414,206,10864,208],[11414,207,10864,209,"response"],[11414,215,10864,217],[11414,216,10864,218,"totpSessionInfo"],[11414,231,10864,233],[11414,232,10864,234,"finalizeEnrollmentTime"],[11414,254,10864,256],[11414,255,10864,257],[11414,256,10864,258,"toUTCString"],[11414,267,10864,269],[11414,268,10864,270],[11414,269,10864,271],[11414,271,10864,273,"response"],[11414,279,10864,281],[11414,280,10864,282,"totpSessionInfo"],[11414,295,10864,297],[11414,296,10864,298,"sessionInfo"],[11414,307,10864,309],[11414,309,10864,311,"auth"],[11414,313,10864,315],[11414,314,10864,316],[11415,4,10865,4],[11416,4,10866,4],[11417,4,10867,4,"_makeTotpVerificationInfo"],[11417,29,10867,29,"_makeTotpVerificationInfo"],[11417,30,10867,30,"otp"],[11417,33,10867,33],[11417,35,10867,35],[11418,6,10868,8],[11418,13,10868,15],[11419,8,10868,17,"sessionInfo"],[11419,19,10868,28],[11419,21,10868,30],[11419,25,10868,34],[11419,26,10868,35,"sessionInfo"],[11419,37,10868,46],[11420,8,10868,48,"verificationCode"],[11420,24,10868,64],[11420,26,10868,66,"otp"],[11421,6,10868,70],[11421,7,10868,71],[11422,4,10869,4],[11423,4,10870,4],[11424,0,10871,0],[11425,0,10872,0],[11426,0,10873,0],[11427,0,10874,0],[11428,0,10875,0],[11429,0,10876,0],[11430,0,10877,0],[11431,0,10878,0],[11432,0,10879,0],[11433,4,10880,4,"generateQrCodeUrl"],[11433,21,10880,21,"generateQrCodeUrl"],[11433,22,10880,22,"accountName"],[11433,33,10880,33],[11433,35,10880,35,"issuer"],[11433,41,10880,41],[11433,43,10880,43],[11434,6,10881,8],[11434,10,10881,12,"useDefaults"],[11434,21,10881,23],[11434,24,10881,26],[11434,29,10881,31],[11435,6,10882,8],[11435,10,10882,12,"_isEmptyString"],[11435,24,10882,26],[11435,25,10882,27,"accountName"],[11435,36,10882,38],[11435,37,10882,39],[11435,41,10882,43,"_isEmptyString"],[11435,55,10882,57],[11435,56,10882,58,"issuer"],[11435,62,10882,64],[11435,63,10882,65],[11435,65,10882,67],[11436,8,10883,12,"useDefaults"],[11436,19,10883,23],[11436,22,10883,26],[11436,26,10883,30],[11437,6,10884,8],[11438,6,10885,8],[11438,10,10885,12,"useDefaults"],[11438,21,10885,23],[11438,23,10885,25],[11439,8,10886,12],[11439,12,10886,16,"_isEmptyString"],[11439,26,10886,30],[11439,27,10886,31,"accountName"],[11439,38,10886,42],[11439,39,10886,43],[11439,41,10886,45],[11440,10,10887,16,"accountName"],[11440,21,10887,27],[11440,24,10887,30],[11440,28,10887,34],[11440,29,10887,35,"auth"],[11440,33,10887,39],[11440,34,10887,40,"currentUser"],[11440,45,10887,51],[11440,47,10887,53,"email"],[11440,52,10887,58],[11440,56,10887,62],[11440,69,10887,75],[11441,8,10888,12],[11442,8,10889,12],[11442,12,10889,16,"_isEmptyString"],[11442,26,10889,30],[11442,27,10889,31,"issuer"],[11442,33,10889,37],[11442,34,10889,38],[11442,36,10889,40],[11443,10,10890,16,"issuer"],[11443,16,10890,22],[11443,19,10890,25],[11443,23,10890,29],[11443,24,10890,30,"auth"],[11443,28,10890,34],[11443,29,10890,35,"name"],[11443,33,10890,39],[11444,8,10891,12],[11445,6,10892,8],[11446,6,10893,8],[11446,13,10893,15],[11446,31,10893,33,"issuer"],[11446,37,10893,39],[11446,41,10893,43,"accountName"],[11446,52,10893,54],[11446,63,10893,65],[11446,67,10893,69],[11446,68,10893,70,"secretKey"],[11446,77,10893,79],[11446,88,10893,90,"issuer"],[11446,94,10893,96],[11446,108,10893,110],[11446,112,10893,114],[11446,113,10893,115,"hashingAlgorithm"],[11446,129,10893,131],[11446,140,10893,142],[11446,144,10893,146],[11446,145,10893,147,"codeLength"],[11446,155,10893,157],[11446,157,10893,159],[11447,4,10894,4],[11448,2,10895,0],[11449,2,10896,0],[11450,2,10897,0],[11450,11,10897,9,"_isEmptyString"],[11450,25,10897,23,"_isEmptyString"],[11450,26,10897,24,"input"],[11450,31,10897,29],[11450,33,10897,31],[11451,4,10898,4],[11451,11,10898,11],[11451,18,10898,18,"input"],[11451,23,10898,23],[11451,28,10898,28],[11451,39,10898,39],[11451,43,10898,43,"input"],[11451,48,10898,48],[11451,50,10898,50,"length"],[11451,56,10898,56],[11451,61,10898,61],[11451,62,10898,62],[11452,2,10899,0],[11453,2,10901,0],[11453,6,10901,4,"name"],[11453,10,10901,8],[11453,13,10901,11],[11453,29,10901,27],[11454,2,10902,0],[11454,6,10902,4,"version"],[11454,13,10902,11],[11454,16,10902,14],[11454,24,10902,22],[11456,2,10904,0],[11457,0,10905,0],[11458,0,10906,0],[11459,0,10907,0],[11460,0,10908,0],[11461,0,10909,0],[11462,0,10910,0],[11463,0,10911,0],[11464,0,10912,0],[11465,0,10913,0],[11466,0,10914,0],[11467,0,10915,0],[11468,0,10916,0],[11469,0,10917,0],[11470,0,10918,0],[11471,0,10919,0],[11472,2,10920,0],[11472,8,10920,6,"AuthInterop"],[11472,19,10920,17],[11472,20,10920,18],[11473,4,10921,4,"constructor"],[11473,15,10921,15,"constructor"],[11473,16,10921,16,"auth"],[11473,20,10921,20],[11473,22,10921,22],[11474,6,10922,8],[11474,10,10922,12],[11474,11,10922,13,"auth"],[11474,15,10922,17],[11474,18,10922,20,"auth"],[11474,22,10922,24],[11475,6,10923,8],[11475,10,10923,12],[11475,11,10923,13,"internalListeners"],[11475,28,10923,30],[11475,31,10923,33],[11475,35,10923,37,"Map"],[11475,38,10923,40],[11475,39,10923,41],[11475,40,10923,42],[11476,4,10924,4],[11477,4,10925,4,"getUid"],[11477,10,10925,10,"getUid"],[11477,11,10925,10],[11477,13,10925,13],[11478,6,10926,8],[11478,10,10926,12],[11478,11,10926,13,"assertAuthConfigured"],[11478,31,10926,33],[11478,32,10926,34],[11478,33,10926,35],[11479,6,10927,8],[11479,13,10927,15],[11479,17,10927,19],[11479,18,10927,20,"auth"],[11479,22,10927,24],[11479,23,10927,25,"currentUser"],[11479,34,10927,36],[11479,36,10927,38,"uid"],[11479,39,10927,41],[11479,43,10927,45],[11479,47,10927,49],[11480,4,10928,4],[11481,4,10929,4],[11481,10,10929,10,"getToken"],[11481,18,10929,18,"getToken"],[11481,19,10929,19,"forceRefresh"],[11481,31,10929,31],[11481,33,10929,33],[11482,6,10930,8],[11482,10,10930,12],[11482,11,10930,13,"assertAuthConfigured"],[11482,31,10930,33],[11482,32,10930,34],[11482,33,10930,35],[11483,6,10931,8],[11483,12,10931,14],[11483,16,10931,18],[11483,17,10931,19,"auth"],[11483,21,10931,23],[11483,22,10931,24,"_initializationPromise"],[11483,44,10931,46],[11484,6,10932,8],[11484,10,10932,12],[11484,11,10932,13],[11484,15,10932,17],[11484,16,10932,18,"auth"],[11484,20,10932,22],[11484,21,10932,23,"currentUser"],[11484,32,10932,34],[11484,34,10932,36],[11485,8,10933,12],[11485,15,10933,19],[11485,19,10933,23],[11486,6,10934,8],[11487,6,10935,8],[11487,12,10935,14,"accessToken"],[11487,23,10935,25],[11487,26,10935,28],[11487,32,10935,34],[11487,36,10935,38],[11487,37,10935,39,"auth"],[11487,41,10935,43],[11487,42,10935,44,"currentUser"],[11487,53,10935,55],[11487,54,10935,56,"getIdToken"],[11487,64,10935,66],[11487,65,10935,67,"forceRefresh"],[11487,77,10935,79],[11487,78,10935,80],[11488,6,10936,8],[11488,13,10936,15],[11489,8,10936,17,"accessToken"],[11490,6,10936,29],[11490,7,10936,30],[11491,4,10937,4],[11492,4,10938,4,"addAuthTokenListener"],[11492,24,10938,24,"addAuthTokenListener"],[11492,25,10938,25,"listener"],[11492,33,10938,33],[11492,35,10938,35],[11493,6,10939,8],[11493,10,10939,12],[11493,11,10939,13,"assertAuthConfigured"],[11493,31,10939,33],[11493,32,10939,34],[11493,33,10939,35],[11494,6,10940,8],[11494,10,10940,12],[11494,14,10940,16],[11494,15,10940,17,"internalListeners"],[11494,32,10940,34],[11494,33,10940,35,"has"],[11494,36,10940,38],[11494,37,10940,39,"listener"],[11494,45,10940,47],[11494,46,10940,48],[11494,48,10940,50],[11495,8,10941,12],[11496,6,10942,8],[11497,6,10943,8],[11497,12,10943,14,"unsubscribe"],[11497,23,10943,25],[11497,26,10943,28],[11497,30,10943,32],[11497,31,10943,33,"auth"],[11497,35,10943,37],[11497,36,10943,38,"onIdTokenChanged"],[11497,52,10943,54],[11497,53,10943,55,"user"],[11497,57,10943,59],[11497,61,10943,63],[11498,8,10944,12,"listener"],[11498,16,10944,20],[11498,17,10944,21,"user"],[11498,21,10944,25],[11498,23,10944,27,"stsTokenManager"],[11498,38,10944,42],[11498,39,10944,43,"accessToken"],[11498,50,10944,54],[11498,54,10944,58],[11498,58,10944,62],[11498,59,10944,63],[11499,6,10945,8],[11499,7,10945,9],[11499,8,10945,10],[11500,6,10946,8],[11500,10,10946,12],[11500,11,10946,13,"internalListeners"],[11500,28,10946,30],[11500,29,10946,31,"set"],[11500,32,10946,34],[11500,33,10946,35,"listener"],[11500,41,10946,43],[11500,43,10946,45,"unsubscribe"],[11500,54,10946,56],[11500,55,10946,57],[11501,6,10947,8],[11501,10,10947,12],[11501,11,10947,13,"updateProactiveRefresh"],[11501,33,10947,35],[11501,34,10947,36],[11501,35,10947,37],[11502,4,10948,4],[11503,4,10949,4,"removeAuthTokenListener"],[11503,27,10949,27,"removeAuthTokenListener"],[11503,28,10949,28,"listener"],[11503,36,10949,36],[11503,38,10949,38],[11504,6,10950,8],[11504,10,10950,12],[11504,11,10950,13,"assertAuthConfigured"],[11504,31,10950,33],[11504,32,10950,34],[11504,33,10950,35],[11505,6,10951,8],[11505,12,10951,14,"unsubscribe"],[11505,23,10951,25],[11505,26,10951,28],[11505,30,10951,32],[11505,31,10951,33,"internalListeners"],[11505,48,10951,50],[11505,49,10951,51,"get"],[11505,52,10951,54],[11505,53,10951,55,"listener"],[11505,61,10951,63],[11505,62,10951,64],[11506,6,10952,8],[11506,10,10952,12],[11506,11,10952,13,"unsubscribe"],[11506,22,10952,24],[11506,24,10952,26],[11507,8,10953,12],[11508,6,10954,8],[11509,6,10955,8],[11509,10,10955,12],[11509,11,10955,13,"internalListeners"],[11509,28,10955,30],[11509,29,10955,31,"delete"],[11509,35,10955,37],[11509,36,10955,38,"listener"],[11509,44,10955,46],[11509,45,10955,47],[11510,6,10956,8,"unsubscribe"],[11510,17,10956,19],[11510,18,10956,20],[11510,19,10956,21],[11511,6,10957,8],[11511,10,10957,12],[11511,11,10957,13,"updateProactiveRefresh"],[11511,33,10957,35],[11511,34,10957,36],[11511,35,10957,37],[11512,4,10958,4],[11513,4,10959,4,"assertAuthConfigured"],[11513,24,10959,24,"assertAuthConfigured"],[11513,25,10959,24],[11513,27,10959,27],[11514,6,10960,8,"_assert"],[11514,13,10960,15],[11514,14,10960,16],[11514,18,10960,20],[11514,19,10960,21,"auth"],[11514,23,10960,25],[11514,24,10960,26,"_initializationPromise"],[11514,46,10960,48],[11514,48,10960,50],[11514,87,10960,89],[11514,88,10960,90],[11514,138,10960,140],[11514,139,10960,141],[11515,4,10961,4],[11516,4,10962,4,"updateProactiveRefresh"],[11516,26,10962,26,"updateProactiveRefresh"],[11516,27,10962,26],[11516,29,10962,29],[11517,6,10963,8],[11517,10,10963,12],[11517,14,10963,16],[11517,15,10963,17,"internalListeners"],[11517,32,10963,34],[11517,33,10963,35,"size"],[11517,37,10963,39],[11517,40,10963,42],[11517,41,10963,43],[11517,43,10963,45],[11518,8,10964,12],[11518,12,10964,16],[11518,13,10964,17,"auth"],[11518,17,10964,21],[11518,18,10964,22,"_startProactiveRefresh"],[11518,40,10964,44],[11518,41,10964,45],[11518,42,10964,46],[11519,6,10965,8],[11519,7,10965,9],[11519,13,10966,13],[11520,8,10967,12],[11520,12,10967,16],[11520,13,10967,17,"auth"],[11520,17,10967,21],[11520,18,10967,22,"_stopProactiveRefresh"],[11520,39,10967,43],[11520,40,10967,44],[11520,41,10967,45],[11521,6,10968,8],[11522,4,10969,4],[11523,2,10970,0],[11525,2,10972,0],[11526,0,10973,0],[11527,0,10974,0],[11528,0,10975,0],[11529,0,10976,0],[11530,0,10977,0],[11531,0,10978,0],[11532,0,10979,0],[11533,0,10980,0],[11534,0,10981,0],[11535,0,10982,0],[11536,0,10983,0],[11537,0,10984,0],[11538,0,10985,0],[11539,0,10986,0],[11540,0,10987,0],[11541,2,10988,0],[11541,11,10988,9,"getVersionForPlatform"],[11541,32,10988,30,"getVersionForPlatform"],[11541,33,10988,31,"clientPlatform"],[11541,47,10988,45],[11541,49,10988,47],[11542,4,10989,4],[11542,12,10989,12,"clientPlatform"],[11542,26,10989,26],[11543,6,10990,8],[11543,11,10990,13],[11543,17,10990,19],[11543,18,10990,20],[11544,8,10991,12],[11544,15,10991,19],[11544,21,10991,25],[11545,6,10992,8],[11545,11,10992,13],[11545,24,10992,26],[11545,25,10992,27],[11546,8,10993,12],[11546,15,10993,19],[11546,19,10993,23],[11547,6,10994,8],[11547,11,10994,13],[11547,19,10994,21],[11547,20,10994,22],[11548,8,10995,12],[11548,15,10995,19],[11548,26,10995,30],[11549,6,10996,8],[11549,11,10996,13],[11549,20,10996,22],[11549,21,10996,23],[11550,8,10997,12],[11550,15,10997,19],[11550,24,10997,28],[11551,6,10998,8],[11551,11,10998,13],[11551,25,10998,27],[11551,26,10998,28],[11552,8,10999,12],[11552,15,10999,19],[11552,30,10999,34],[11553,6,11000,8],[11554,8,11001,12],[11554,15,11001,19,"undefined"],[11554,24,11001,28],[11555,4,11002,4],[11556,2,11003,0],[11557,2,11004,0],[11558,2,11005,0],[11558,11,11005,9,"registerAuth"],[11558,23,11005,21,"registerAuth"],[11558,24,11005,22,"clientPlatform"],[11558,38,11005,36],[11558,40,11005,38],[11559,4,11006,4],[11559,8,11006,4,"_registerComponent"],[11559,20,11006,22],[11559,21,11006,22,"_registerComponent"],[11559,39,11006,22],[11559,41,11006,23],[11559,45,11006,27,"Component"],[11559,63,11006,36],[11559,64,11006,36,"Component"],[11559,73,11006,36],[11559,74,11006,37],[11559,80,11006,43],[11559,81,11006,44],[11559,108,11006,71],[11559,109,11006,72,"container"],[11559,118,11006,81],[11559,120,11006,83],[11560,6,11006,85,"options"],[11560,13,11006,92],[11560,15,11006,94,"deps"],[11561,4,11006,99],[11561,5,11006,100],[11561,10,11006,105],[11562,6,11007,8],[11562,12,11007,14,"app"],[11562,15,11007,17],[11562,18,11007,20,"container"],[11562,27,11007,29],[11562,28,11007,30,"getProvider"],[11562,39,11007,41],[11562,40,11007,42],[11562,45,11007,47],[11562,46,11007,48],[11562,47,11007,49,"getImmediate"],[11562,59,11007,61],[11562,60,11007,62],[11562,61,11007,63],[11563,6,11008,8],[11563,12,11008,14,"heartbeatServiceProvider"],[11563,36,11008,38],[11563,39,11008,41,"container"],[11563,48,11008,50],[11563,49,11008,51,"getProvider"],[11563,60,11008,62],[11563,61,11008,63],[11563,72,11008,74],[11563,73,11008,75],[11564,6,11009,8],[11564,12,11009,14,"appCheckServiceProvider"],[11564,35,11009,37],[11564,38,11009,40,"container"],[11564,47,11009,49],[11564,48,11009,50,"getProvider"],[11564,59,11009,61],[11564,60,11009,62],[11564,80,11009,82],[11564,81,11009,83],[11565,6,11010,8],[11565,12,11010,14],[11566,8,11010,16,"apiKey"],[11566,14,11010,22],[11567,8,11010,24,"authDomain"],[11568,6,11010,35],[11568,7,11010,36],[11568,10,11010,39,"app"],[11568,13,11010,42],[11568,14,11010,43,"options"],[11568,21,11010,50],[11569,6,11011,8,"_assert"],[11569,13,11011,15],[11569,14,11011,16,"apiKey"],[11569,20,11011,22],[11569,24,11011,26],[11569,25,11011,27,"apiKey"],[11569,31,11011,33],[11569,32,11011,34,"includes"],[11569,40,11011,42],[11569,41,11011,43],[11569,44,11011,46],[11569,45,11011,47],[11569,47,11011,49],[11569,64,11011,66],[11569,65,11011,67],[11569,102,11011,104],[11570,8,11011,106,"appName"],[11570,15,11011,113],[11570,17,11011,115,"app"],[11570,20,11011,118],[11570,21,11011,119,"name"],[11571,6,11011,124],[11571,7,11011,125],[11571,8,11011,126],[11572,6,11012,8],[11572,12,11012,14,"config"],[11572,18,11012,20],[11572,21,11012,23],[11573,8,11013,12,"apiKey"],[11573,14,11013,18],[11574,8,11014,12,"authDomain"],[11574,18,11014,22],[11575,8,11015,12,"clientPlatform"],[11575,22,11015,26],[11576,8,11016,12,"apiHost"],[11576,15,11016,19],[11576,17,11016,21],[11576,49,11016,53],[11576,50,11016,54],[11577,8,11017,12,"tokenApiHost"],[11577,20,11017,24],[11577,22,11017,26],[11577,50,11017,54],[11577,51,11017,55],[11578,8,11018,12,"apiScheme"],[11578,17,11018,21],[11578,19,11018,23],[11578,26,11018,30],[11578,27,11018,31],[11579,8,11019,12,"sdkClientVersion"],[11579,24,11019,28],[11579,26,11019,30,"_getClientVersion"],[11579,43,11019,47],[11579,44,11019,48,"clientPlatform"],[11579,58,11019,62],[11580,6,11020,8],[11580,7,11020,9],[11581,6,11021,8],[11581,12,11021,14,"authInstance"],[11581,24,11021,26],[11581,27,11021,29],[11581,31,11021,33,"AuthImpl"],[11581,39,11021,41],[11581,40,11021,42,"app"],[11581,43,11021,45],[11581,45,11021,47,"heartbeatServiceProvider"],[11581,69,11021,71],[11581,71,11021,73,"appCheckServiceProvider"],[11581,94,11021,96],[11581,96,11021,98,"config"],[11581,102,11021,104],[11581,103,11021,105],[11582,6,11022,8,"_initializeAuthInstance"],[11582,29,11022,31],[11582,30,11022,32,"authInstance"],[11582,42,11022,44],[11582,44,11022,46,"deps"],[11582,48,11022,50],[11582,49,11022,51],[11583,6,11023,8],[11583,13,11023,15,"authInstance"],[11583,25,11023,27],[11584,4,11024,4],[11584,5,11024,5],[11584,7,11024,7],[11584,15,11024,15],[11584,16,11024,16],[11584,42,11024,42],[11585,4,11025,8],[11586,0,11026,0],[11587,0,11027,0],[11588,0,11028,0],[11588,7,11025,8],[11588,8,11029,9,"setInstantiationMode"],[11588,28,11029,29],[11588,29,11029,30],[11588,39,11029,40],[11588,40,11029,41],[11588,72,11029,73],[11589,4,11030,8],[11590,0,11031,0],[11591,0,11032,0],[11592,0,11033,0],[11592,7,11030,8],[11592,8,11034,9,"setInstanceCreatedCallback"],[11592,34,11034,35],[11592,35,11034,36],[11592,36,11034,37,"container"],[11592,45,11034,46],[11592,47,11034,48,"_instanceIdentifier"],[11592,66,11034,67],[11592,68,11034,69,"_instance"],[11592,77,11034,78],[11592,82,11034,83],[11593,6,11035,8],[11593,12,11035,14,"authInternalProvider"],[11593,32,11035,34],[11593,35,11035,37,"container"],[11593,44,11035,46],[11593,45,11035,47,"getProvider"],[11593,56,11035,58],[11593,57,11035,59],[11593,72,11035,74],[11593,73,11035,75],[11593,107,11035,109],[11593,108,11035,110],[11594,6,11036,8,"authInternalProvider"],[11594,26,11036,28],[11594,27,11036,29,"initialize"],[11594,37,11036,39],[11594,38,11036,40],[11594,39,11036,41],[11595,4,11037,4],[11595,5,11037,5],[11595,6,11037,6],[11595,7,11037,7],[11596,4,11038,4],[11596,8,11038,4,"_registerComponent"],[11596,20,11038,22],[11596,21,11038,22,"_registerComponent"],[11596,39,11038,22],[11596,41,11038,23],[11596,45,11038,27,"Component"],[11596,63,11038,36],[11596,64,11038,36,"Component"],[11596,73,11038,36],[11596,74,11038,37],[11596,89,11038,52],[11596,90,11038,53],[11596,126,11038,89,"container"],[11596,135,11038,98],[11596,139,11038,102],[11597,6,11039,8],[11597,12,11039,14,"auth"],[11597,16,11039,18],[11597,19,11039,21,"_castAuth"],[11597,28,11039,30],[11597,29,11039,31,"container"],[11597,38,11039,40],[11597,39,11039,41,"getProvider"],[11597,50,11039,52],[11597,51,11039,53],[11597,57,11039,59],[11597,58,11039,60],[11597,83,11039,85],[11597,84,11039,86],[11597,85,11039,87,"getImmediate"],[11597,97,11039,99],[11597,98,11039,100],[11597,99,11039,101],[11597,100,11039,102],[11598,6,11040,8],[11598,13,11040,15],[11598,14,11040,16,"auth"],[11598,18,11040,20],[11598,22,11040,24],[11598,26,11040,28,"AuthInterop"],[11598,37,11040,39],[11598,38,11040,40,"auth"],[11598,42,11040,44],[11598,43,11040,45],[11598,45,11040,47,"auth"],[11598,49,11040,51],[11598,50,11040,52],[11599,4,11041,4],[11599,5,11041,5],[11599,7,11041,7],[11599,16,11041,16],[11599,17,11041,17],[11599,44,11041,44],[11599,45,11041,45],[11599,46,11041,46,"setInstantiationMode"],[11599,66,11041,66],[11599,67,11041,67],[11599,77,11041,77],[11599,78,11041,78],[11599,110,11041,110],[11599,111,11041,111],[11599,112,11041,112],[11600,4,11042,4],[11600,8,11042,4,"registerVersion"],[11600,20,11042,19],[11600,21,11042,19,"registerVersion"],[11600,36,11042,19],[11600,38,11042,20,"name"],[11600,42,11042,24],[11600,44,11042,26,"version"],[11600,51,11042,33],[11600,53,11042,35,"getVersionForPlatform"],[11600,74,11042,56],[11600,75,11042,57,"clientPlatform"],[11600,89,11042,71],[11600,90,11042,72],[11600,91,11042,73],[11601,4,11043,4],[11602,4,11044,4],[11602,8,11044,4,"registerVersion"],[11602,20,11044,19],[11602,21,11044,19,"registerVersion"],[11602,36,11044,19],[11602,38,11044,20,"name"],[11602,42,11044,24],[11602,44,11044,26,"version"],[11602,51,11044,33],[11602,53,11044,35],[11602,62,11044,44],[11602,63,11044,45],[11603,2,11045,0],[11605,2,11047,0],[11606,0,11048,0],[11607,0,11049,0],[11608,0,11050,0],[11609,0,11051,0],[11610,0,11052,0],[11611,0,11053,0],[11612,0,11054,0],[11613,0,11055,0],[11614,0,11056,0],[11615,0,11057,0],[11616,0,11058,0],[11617,0,11059,0],[11618,0,11060,0],[11619,0,11061,0],[11620,0,11062,0],[11621,2,11063,0],[11621,8,11063,6,"DEFAULT_ID_TOKEN_MAX_AGE"],[11621,32,11063,30],[11621,35,11063,33],[11621,36,11063,34],[11621,39,11063,37],[11621,41,11063,39],[11622,2,11064,0],[11622,8,11064,6,"authIdTokenMaxAge"],[11622,25,11064,23],[11622,28,11064,26],[11622,32,11064,26,"getExperimentalSetting"],[11622,45,11064,48],[11622,46,11064,48,"getExperimentalSetting"],[11622,68,11064,48],[11622,70,11064,49],[11622,89,11064,68],[11622,90,11064,69],[11622,94,11064,73,"DEFAULT_ID_TOKEN_MAX_AGE"],[11622,118,11064,97],[11623,2,11065,0],[11623,6,11065,4,"lastPostedIdToken"],[11623,23,11065,21],[11623,26,11065,24],[11623,30,11065,28],[11624,2,11066,0],[11624,8,11066,6,"mintCookieFactory"],[11624,25,11066,23],[11624,28,11066,27,"url"],[11624,31,11066,30],[11624,35,11066,35],[11624,41,11066,42,"user"],[11624,45,11066,46],[11624,49,11066,51],[11625,4,11067,4],[11625,10,11067,10,"idTokenResult"],[11625,23,11067,23],[11625,26,11067,26,"user"],[11625,30,11067,30],[11625,35,11067,35],[11625,41,11067,41,"user"],[11625,45,11067,45],[11625,46,11067,46,"getIdTokenResult"],[11625,62,11067,62],[11625,63,11067,63],[11625,64,11067,64],[11625,65,11067,65],[11626,4,11068,4],[11626,10,11068,10,"idTokenAge"],[11626,20,11068,20],[11626,23,11068,23,"idTokenResult"],[11626,36,11068,36],[11626,40,11069,8],[11626,41,11069,9],[11626,45,11069,13,"Date"],[11626,49,11069,17],[11626,50,11069,18],[11626,51,11069,19],[11626,52,11069,20,"getTime"],[11626,59,11069,27],[11626,60,11069,28],[11626,61,11069,29],[11626,64,11069,32,"Date"],[11626,68,11069,36],[11626,69,11069,37,"parse"],[11626,74,11069,42],[11626,75,11069,43,"idTokenResult"],[11626,88,11069,56],[11626,89,11069,57,"issuedAtTime"],[11626,101,11069,69],[11626,102,11069,70],[11626,106,11069,74],[11626,110,11069,78],[11627,4,11070,4],[11627,8,11070,8,"idTokenAge"],[11627,18,11070,18],[11627,22,11070,22,"idTokenAge"],[11627,32,11070,32],[11627,35,11070,35,"authIdTokenMaxAge"],[11627,52,11070,52],[11627,54,11070,54],[11628,6,11071,8],[11629,4,11072,4],[11630,4,11073,4],[11631,4,11074,4],[11631,10,11074,10,"idToken"],[11631,17,11074,17],[11631,20,11074,20,"idTokenResult"],[11631,33,11074,33],[11631,35,11074,35,"token"],[11631,40,11074,40],[11632,4,11075,4],[11632,8,11075,8,"lastPostedIdToken"],[11632,25,11075,25],[11632,30,11075,30,"idToken"],[11632,37,11075,37],[11632,39,11075,39],[11633,6,11076,8],[11634,4,11077,4],[11635,4,11078,4,"lastPostedIdToken"],[11635,21,11078,21],[11635,24,11078,24,"idToken"],[11635,31,11078,31],[11636,4,11079,4],[11636,10,11079,10,"fetch"],[11636,15,11079,15],[11636,16,11079,16,"url"],[11636,19,11079,19],[11636,21,11079,21],[11637,6,11080,8,"method"],[11637,12,11080,14],[11637,14,11080,16,"idToken"],[11637,21,11080,23],[11637,24,11080,26],[11637,30,11080,32],[11637,33,11080,35],[11637,41,11080,43],[11638,6,11081,8,"headers"],[11638,13,11081,15],[11638,15,11081,17,"idToken"],[11638,22,11081,24],[11638,25,11082,14],[11639,8,11083,16],[11639,23,11083,31],[11639,25,11083,33],[11639,35,11083,43,"idToken"],[11639,42,11083,50],[11640,6,11084,12],[11640,7,11084,13],[11640,10,11085,14],[11640,11,11085,15],[11641,4,11086,4],[11641,5,11086,5],[11641,6,11086,6],[11642,2,11087,0],[11642,3,11087,1],[11643,2,11088,0],[11644,0,11089,0],[11645,0,11090,0],[11646,0,11091,0],[11647,0,11092,0],[11648,0,11093,0],[11649,0,11094,0],[11650,0,11095,0],[11651,2,11096,0],[11651,11,11096,9,"getAuth"],[11651,18,11096,16,"getAuth"],[11651,19,11096,17,"app"],[11651,22,11096,20],[11651,25,11096,23],[11651,29,11096,23,"getApp"],[11651,41,11096,29],[11651,42,11096,29,"getApp"],[11651,48,11096,29],[11651,50,11096,30],[11651,51,11096,31],[11651,53,11096,33],[11652,4,11097,4],[11652,10,11097,10,"provider"],[11652,18,11097,18],[11652,21,11097,21],[11652,25,11097,21,"_getProvider"],[11652,37,11097,33],[11652,38,11097,33,"_getProvider"],[11652,50,11097,33],[11652,52,11097,34,"app"],[11652,55,11097,37],[11652,57,11097,39],[11652,63,11097,45],[11652,64,11097,46],[11653,4,11098,4],[11653,8,11098,8,"provider"],[11653,16,11098,16],[11653,17,11098,17,"isInitialized"],[11653,30,11098,30],[11653,31,11098,31],[11653,32,11098,32],[11653,34,11098,34],[11654,6,11099,8],[11654,13,11099,15,"provider"],[11654,21,11099,23],[11654,22,11099,24,"getImmediate"],[11654,34,11099,36],[11654,35,11099,37],[11654,36,11099,38],[11655,4,11100,4],[11656,4,11101,4],[11656,10,11101,10,"auth"],[11656,14,11101,14],[11656,17,11101,17,"initializeAuth"],[11656,31,11101,31],[11656,32,11101,32,"app"],[11656,35,11101,35],[11656,37,11101,37],[11657,6,11102,8,"popupRedirectResolver"],[11657,27,11102,29],[11657,29,11102,31,"browserPopupRedirectResolver"],[11657,57,11102,59],[11658,6,11103,8,"persistence"],[11658,17,11103,19],[11658,19,11103,21],[11658,20,11104,12,"indexedDBLocalPersistence"],[11658,45,11104,37],[11658,47,11105,12,"browserLocalPersistence"],[11658,70,11105,35],[11658,72,11106,12,"browserSessionPersistence"],[11658,97,11106,37],[11659,4,11108,4],[11659,5,11108,5],[11659,6,11108,6],[11660,4,11109,4],[11660,10,11109,10,"authTokenSyncPath"],[11660,27,11109,27],[11660,30,11109,30],[11660,34,11109,30,"getExperimentalSetting"],[11660,47,11109,52],[11660,48,11109,52,"getExperimentalSetting"],[11660,70,11109,52],[11660,72,11109,53],[11660,90,11109,71],[11660,91,11109,72],[11661,4,11110,4],[11662,4,11111,4],[11662,8,11111,8,"authTokenSyncPath"],[11662,25,11111,25],[11662,29,11112,8],[11662,36,11112,15,"isSecureContext"],[11662,51,11112,30],[11662,56,11112,35],[11662,65,11112,44],[11662,69,11113,8,"isSecureContext"],[11662,84,11113,23],[11662,86,11113,25],[11663,6,11114,8],[11664,6,11115,8],[11664,12,11115,14,"authTokenSyncUrl"],[11664,28,11115,30],[11664,31,11115,33],[11664,35,11115,37,"URL"],[11664,38,11115,40],[11664,39,11115,41,"authTokenSyncPath"],[11664,56,11115,58],[11664,58,11115,60,"location"],[11664,66,11115,68],[11664,67,11115,69,"origin"],[11664,73,11115,75],[11664,74,11115,76],[11665,6,11116,8],[11665,10,11116,12,"location"],[11665,18,11116,20],[11665,19,11116,21,"origin"],[11665,25,11116,27],[11665,30,11116,32,"authTokenSyncUrl"],[11665,46,11116,48],[11665,47,11116,49,"origin"],[11665,53,11116,55],[11665,55,11116,57],[11666,8,11117,12],[11666,14,11117,18,"mintCookie"],[11666,24,11117,28],[11666,27,11117,31,"mintCookieFactory"],[11666,44,11117,48],[11666,45,11117,49,"authTokenSyncUrl"],[11666,61,11117,65],[11666,62,11117,66,"toString"],[11666,70,11117,74],[11666,71,11117,75],[11666,72,11117,76],[11666,73,11117,77],[11667,8,11118,12,"beforeAuthStateChanged"],[11667,30,11118,34],[11667,31,11118,35,"auth"],[11667,35,11118,39],[11667,37,11118,41,"mintCookie"],[11667,47,11118,51],[11667,49,11118,53],[11667,55,11118,59,"mintCookie"],[11667,65,11118,69],[11667,66,11118,70,"auth"],[11667,70,11118,74],[11667,71,11118,75,"currentUser"],[11667,82,11118,86],[11667,83,11118,87],[11667,84,11118,88],[11668,8,11119,12,"onIdTokenChanged"],[11668,24,11119,28],[11668,25,11119,29,"auth"],[11668,29,11119,33],[11668,31,11119,35,"user"],[11668,35,11119,39],[11668,39,11119,43,"mintCookie"],[11668,49,11119,53],[11668,50,11119,54,"user"],[11668,54,11119,58],[11668,55,11119,59],[11668,56,11119,60],[11669,6,11120,8],[11670,4,11121,4],[11671,4,11122,4],[11671,10,11122,10,"authEmulatorHost"],[11671,26,11122,26],[11671,29,11122,29],[11671,33,11122,29,"getDefaultEmulatorHost"],[11671,46,11122,51],[11671,47,11122,51,"getDefaultEmulatorHost"],[11671,69,11122,51],[11671,71,11122,52],[11671,77,11122,58],[11671,78,11122,59],[11672,4,11123,4],[11672,8,11123,8,"authEmulatorHost"],[11672,24,11123,24],[11672,26,11123,26],[11673,6,11124,8,"connectAuthEmulator"],[11673,25,11124,27],[11673,26,11124,28,"auth"],[11673,30,11124,32],[11673,32,11124,34],[11673,42,11124,44,"authEmulatorHost"],[11673,58,11124,60],[11673,60,11124,62],[11673,61,11124,63],[11674,4,11125,4],[11675,4,11126,4],[11675,11,11126,11,"auth"],[11675,15,11126,15],[11676,2,11127,0],[11677,2,11128,0],[11677,11,11128,9,"getScriptParentElement"],[11677,33,11128,31,"getScriptParentElement"],[11677,34,11128,31],[11677,36,11128,34],[11678,4,11129,4],[11678,11,11129,11,"document"],[11678,19,11129,19],[11678,20,11129,20,"getElementsByTagName"],[11678,40,11129,40],[11678,41,11129,41],[11678,47,11129,47],[11678,48,11129,48],[11678,51,11129,51],[11678,52,11129,52],[11678,53,11129,53],[11678,57,11129,57,"document"],[11678,65,11129,65],[11679,2,11130,0],[11680,2,11131,0,"_setExternalJSProvider"],[11680,24,11131,22],[11680,25,11131,23],[11681,4,11132,4,"loadJS"],[11681,10,11132,10,"loadJS"],[11681,11,11132,11,"url"],[11681,14,11132,14],[11681,16,11132,16],[11682,6,11133,8],[11683,6,11134,8],[11683,13,11134,15],[11683,17,11134,19,"Promise"],[11683,24,11134,26],[11683,25,11134,27],[11683,26,11134,28,"resolve"],[11683,33,11134,35],[11683,35,11134,37,"reject"],[11683,41,11134,43],[11683,46,11134,48],[11684,8,11135,12],[11684,14,11135,18,"el"],[11684,16,11135,20],[11684,19,11135,23,"document"],[11684,27,11135,31],[11684,28,11135,32,"createElement"],[11684,41,11135,45],[11684,42,11135,46],[11684,50,11135,54],[11684,51,11135,55],[11685,8,11136,12,"el"],[11685,10,11136,14],[11685,11,11136,15,"setAttribute"],[11685,23,11136,27],[11685,24,11136,28],[11685,29,11136,33],[11685,31,11136,35,"url"],[11685,34,11136,38],[11685,35,11136,39],[11686,8,11137,12,"el"],[11686,10,11137,14],[11686,11,11137,15,"onload"],[11686,17,11137,21],[11686,20,11137,24,"resolve"],[11686,27,11137,31],[11687,8,11138,12,"el"],[11687,10,11138,14],[11687,11,11138,15,"onerror"],[11687,18,11138,22],[11687,21,11138,25,"e"],[11687,22,11138,26],[11687,26,11138,30],[11688,10,11139,16],[11688,16,11139,22,"error"],[11688,21,11139,27],[11688,24,11139,30,"_createError"],[11688,36,11139,42],[11688,37,11139,43],[11688,53,11139,59],[11688,54,11139,60],[11688,88,11139,94],[11688,89,11139,95],[11689,10,11140,16,"error"],[11689,15,11140,21],[11689,16,11140,22,"customData"],[11689,26,11140,32],[11689,29,11140,35,"e"],[11689,30,11140,36],[11690,10,11141,16,"reject"],[11690,16,11141,22],[11690,17,11141,23,"error"],[11690,22,11141,28],[11690,23,11141,29],[11691,8,11142,12],[11691,9,11142,13],[11692,8,11143,12,"el"],[11692,10,11143,14],[11692,11,11143,15,"type"],[11692,15,11143,19],[11692,18,11143,22],[11692,35,11143,39],[11693,8,11144,12,"el"],[11693,10,11144,14],[11693,11,11144,15,"charset"],[11693,18,11144,22],[11693,21,11144,25],[11693,28,11144,32],[11694,8,11145,12,"getScriptParentElement"],[11694,30,11145,34],[11694,31,11145,35],[11694,32,11145,36],[11694,33,11145,37,"appendChild"],[11694,44,11145,48],[11694,45,11145,49,"el"],[11694,47,11145,51],[11694,48,11145,52],[11695,6,11146,8],[11695,7,11146,9],[11695,8,11146,10],[11696,4,11147,4],[11696,5,11147,5],[11697,4,11148,4,"gapiScript"],[11697,14,11148,14],[11697,16,11148,16],[11697,51,11148,51],[11698,4,11149,4,"recaptchaV2Script"],[11698,21,11149,21],[11698,23,11149,23],[11698,64,11149,64],[11699,4,11150,4,"recaptchaEnterpriseScript"],[11699,29,11150,29],[11699,31,11150,31],[11700,2,11151,0],[11700,3,11151,1],[11700,4,11151,2],[11701,2,11152,0,"registerAuth"],[11701,14,11152,12],[11701,15,11152,13],[11701,24,11152,22],[11701,25,11152,23],[11701,53,11152,51],[11701,54,11152,52],[11702,0,11152,53],[11702,3]],"functionMap":{"names":["<global>","_debugErrorMap","_prodErrorMap","_logWarn","_logError","_fail","_createError","_errorWithCustomMessage","_serverAppCurrentUserOperationNotSupportedError","_assertInstanceOf","createErrorInternal","_assert","debugFail","debugAssert","_getCurrentUrl","_isHttpOrHttps","_getCurrentScheme","_isOnline","_getUserLanguage","Delay","Delay#constructor","Delay#get","_emulatorUrl","FetchProvider","FetchProvider.initialize","FetchProvider.fetch","FetchProvider.headers","FetchProvider.response","_addTidIfNecessary","_performApiRequest","_performFetchWithErrorHandling$argument_2","_performFetchWithErrorHandling","_performSignInRequest","_getFinalTarget","_parseEnforcementState","NetworkTimeout","NetworkTimeout#clearNetworkTimeout","NetworkTimeout#constructor","Promise$argument_0","setTimeout$argument_0","_makeTaggedError","isV2","isEnterprise","RecaptchaConfig","RecaptchaConfig#constructor","RecaptchaConfig#getProviderEnforcementState","RecaptchaConfig#isProviderEnabled","RecaptchaConfig#isAnyProviderEnabled","getRecaptchaParams","getRecaptchaConfig","deleteAccount","deleteLinkedAccounts","getAccountInfo","utcTimestampToDateString","getIdToken","getIdTokenResult","secondsStringToMilliseconds","_parseToken","_tokenExpiresIn","_logoutIfInvalidated","isUserInvalidated","ProactiveRefresh","ProactiveRefresh#constructor","ProactiveRefresh#_start","ProactiveRefresh#_stop","ProactiveRefresh#getInterval","ProactiveRefresh#schedule","ProactiveRefresh#iteration","UserMetadata","UserMetadata#constructor","UserMetadata#_initializeTime","UserMetadata#_copy","UserMetadata#toJSON","_reloadWithoutSaving","reload","mergeProviderData","original.filter$argument_0","newData.some$argument_0","extractProviderData","providers.map$argument_0","requestStsToken","revokeToken","StsTokenManager","StsTokenManager#constructor","StsTokenManager#get__isExpired","StsTokenManager#updateFromServerResponse","StsTokenManager#updateFromIdToken","StsTokenManager#getToken","StsTokenManager#clearRefreshToken","StsTokenManager#refresh","StsTokenManager#updateTokensAndExpiration","StsTokenManager.fromJSON","StsTokenManager#toJSON","StsTokenManager#_assign","StsTokenManager#_clone","StsTokenManager#_performRefresh","assertStringOrUndefined","UserImpl","UserImpl#constructor","UserImpl#getIdToken","UserImpl#getIdTokenResult","UserImpl#reload","UserImpl#_assign","user.providerData.map$argument_0","UserImpl#_clone","UserImpl#_onReload","UserImpl#_notifyReloadListener","UserImpl#_startProactiveRefresh","UserImpl#_stopProactiveRefresh","UserImpl#_updateTokensIfNecessary","UserImpl#_delete","UserImpl#toJSON","providerData.map$argument_0","UserImpl#get__refreshToken","UserImpl._fromJSON","UserImpl._fromIdTokenResponse","UserImpl._fromGetAccountInfoResponse","_getInstance","InMemoryPersistence","InMemoryPersistence#constructor","InMemoryPersistence#_isAvailable","InMemoryPersistence#_set","InMemoryPersistence#_get","InMemoryPersistence#_remove","InMemoryPersistence#_addListener","InMemoryPersistence#_removeListener","_persistenceKeyName","PersistenceUserManager","PersistenceUserManager#constructor","PersistenceUserManager#setCurrentUser","PersistenceUserManager#getCurrentUser","getAccountInfo._catch$argument_0","PersistenceUserManager#removeCurrentUser","PersistenceUserManager#savePersistenceForRedirect","PersistenceUserManager#setPersistence","PersistenceUserManager#_delete","PersistenceUserManager.create","persistenceHierarchy.map$argument_0","filter$argument_0","availablePersistences.filter$argument_0","_getBrowserName","_isFirefox","_isSafari","_isChromeIOS","_isIEMobile","_isAndroid","_isBlackBerry","_isWebOS","_isIOS","_isIOS7Or8","_isIOSStandalone","_isIE10","_isMobileBrowser","_getClientVersion","AuthMiddlewareQueue","AuthMiddlewareQueue#constructor","AuthMiddlewareQueue#pushCallback","wrappedCallback","<anonymous>","queue.index","AuthMiddlewareQueue#runMiddleware","_getPasswordPolicy","PasswordPolicyImpl","PasswordPolicyImpl#constructor","PasswordPolicyImpl#validatePassword","PasswordPolicyImpl#validatePasswordLengthOptions","PasswordPolicyImpl#validatePasswordCharacterOptions","PasswordPolicyImpl#updatePasswordCharacterOptionsStatuses","AuthImpl","AuthImpl#constructor","AuthImpl#_initializeWithPersistence","queue$argument_0","AuthImpl#_onStorageEvent","AuthImpl#initializeCurrentUserFromIdToken","AuthImpl#initializeCurrentUser","_popupRedirectResolver._overrideRedirectResult$argument_1","AuthImpl#tryRedirectSignIn","AuthImpl#reloadAndSetCurrentUserOrClear","AuthImpl#useDeviceLanguage","AuthImpl#_delete","AuthImpl#updateCurrentUser","AuthImpl#_updateCurrentUser","AuthImpl#signOut","AuthImpl#setPersistence","AuthImpl#_getRecaptchaConfig","AuthImpl#validatePassword","AuthImpl#_getPasswordPolicyInternal","AuthImpl#_updatePasswordPolicy","AuthImpl#_getPersistenceType","AuthImpl#_getPersistence","AuthImpl#_updateErrorMap","AuthImpl#onAuthStateChanged","AuthImpl#beforeAuthStateChanged","AuthImpl#onIdTokenChanged","AuthImpl#authStateReady","onAuthStateChanged$argument_0","AuthImpl#revokeAccessToken","AuthImpl#toJSON","AuthImpl#_setRedirectUser","AuthImpl#getOrInitRedirectPersistenceManager","AuthImpl#_redirectUserForId","AuthImpl#_persistUserIfCurrent","AuthImpl#_notifyListenersIfCurrent","AuthImpl#_key","AuthImpl#_startProactiveRefresh","AuthImpl#_stopProactiveRefresh","AuthImpl#get___currentUser","AuthImpl#notifyAuthListeners","AuthImpl#registerStateListener","promise.then$argument_0","AuthImpl#directlySetCurrentUser","AuthImpl#queue","AuthImpl#get__assertedPersistence","AuthImpl#_logFramework","AuthImpl#_getFrameworks","AuthImpl#_getAdditionalHeaders","AuthImpl#_getAppCheckToken","_castAuth","Subscription","Subscription#constructor","createSubscribe$argument_0","Subscription#get__next","externalJSProvider.loadJS","_setExternalJSProvider","_loadJS","_recaptchaV2ScriptUrl","_recaptchaEnterpriseScriptUrl","_gapiScriptUrl","_generateCallbackName","MockReCaptcha","MockReCaptcha#constructor","MockReCaptcha#render","MockReCaptcha#reset","MockReCaptcha#getResponse","MockReCaptcha#execute","MockGreCAPTCHATopLevel","MockGreCAPTCHATopLevel#constructor","MockGreCAPTCHATopLevel#ready","MockGreCAPTCHATopLevel#execute","MockGreCAPTCHATopLevel#render","MockGreCAPTCHA","MockGreCAPTCHA#ready","MockGreCAPTCHA#execute","MockGreCAPTCHA#render","MockWidget","MockWidget#constructor","clickHandler","MockWidget#getResponse","MockWidget#_delete","MockWidget#execute","window.setTimeout$argument_0","MockWidget#checkIfDeleted","generateRandomAlphaNumericString","RecaptchaEnterpriseVerifier","RecaptchaEnterpriseVerifier#constructor","RecaptchaEnterpriseVerifier#verify","retrieveSiteKey","getRecaptchaConfig.then$argument_0","getRecaptchaConfig.then._catch$argument_0","retrieveRecaptchaToken","grecaptcha.enterprise.ready$argument_0","grecaptcha.enterprise.execute.then$argument_0","grecaptcha.enterprise.execute.then._catch$argument_0","retrieveSiteKey.then$argument_0","_loadJS.then$argument_0","_loadJS.then._catch$argument_0","retrieveSiteKey.then._catch$argument_0","injectRecaptchaFields","handleRecaptchaFlow","actionMethod._catch$argument_0","_initializeRecaptchaConfig","initializeAuth","_initializeAuthInstance","connectAuthEmulator","extractProtocol","extractHostAndPort","parsePort","emitEmulatorWarning","attachBanner","AuthCredential","AuthCredential#constructor","AuthCredential#toJSON","AuthCredential#_getIdTokenResponse","AuthCredential#_linkToIdToken","AuthCredential#_getReauthenticationResolver","resetPassword","updateEmailPassword","linkEmailPassword","applyActionCode$1","signInWithPassword","sendOobCode","sendEmailVerification$1","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","verifyAndChangeEmail","signInWithEmailLink$1","signInWithEmailLinkForLinking","EmailAuthCredential","EmailAuthCredential#constructor","EmailAuthCredential._fromEmailAndPassword","EmailAuthCredential._fromEmailAndCode","EmailAuthCredential#toJSON","EmailAuthCredential.fromJSON","EmailAuthCredential#_getIdTokenResponse","EmailAuthCredential#_linkToIdToken","EmailAuthCredential#_getReauthenticationResolver","signInWithIdp","OAuthCredential","OAuthCredential#constructor","OAuthCredential._fromParams","OAuthCredential#toJSON","OAuthCredential.fromJSON","OAuthCredential#_getIdTokenResponse","OAuthCredential#_linkToIdToken","OAuthCredential#_getReauthenticationResolver","OAuthCredential#buildRequest","sendPhoneVerificationCode","signInWithPhoneNumber$1","linkWithPhoneNumber$1","verifyPhoneNumberForExisting","PhoneAuthCredential","PhoneAuthCredential#constructor","PhoneAuthCredential._fromVerification","PhoneAuthCredential._fromTokenResponse","PhoneAuthCredential#_getIdTokenResponse","PhoneAuthCredential#_linkToIdToken","PhoneAuthCredential#_getReauthenticationResolver","PhoneAuthCredential#_makeVerificationRequest","PhoneAuthCredential#toJSON","PhoneAuthCredential.fromJSON","parseMode","parseDeepLink","ActionCodeURL","ActionCodeURL#constructor","ActionCodeURL.parseLink","parseActionCodeURL","EmailAuthProvider","EmailAuthProvider#constructor","EmailAuthProvider.credential","EmailAuthProvider.credentialWithLink","FederatedAuthProvider","FederatedAuthProvider#constructor","FederatedAuthProvider#setDefaultLanguage","FederatedAuthProvider#setCustomParameters","FederatedAuthProvider#getCustomParameters","BaseOAuthProvider","BaseOAuthProvider#constructor","BaseOAuthProvider#addScope","BaseOAuthProvider#getScopes","OAuthProvider","OAuthProvider.credentialFromJSON","OAuthProvider#credential","OAuthProvider#_credential","OAuthProvider.credentialFromResult","OAuthProvider.credentialFromError","OAuthProvider.oauthCredentialFromTaggedObject","FacebookAuthProvider","FacebookAuthProvider#constructor","FacebookAuthProvider.credential","FacebookAuthProvider.credentialFromResult","FacebookAuthProvider.credentialFromError","FacebookAuthProvider.credentialFromTaggedObject","GoogleAuthProvider","GoogleAuthProvider#constructor","GoogleAuthProvider.credential","GoogleAuthProvider.credentialFromResult","GoogleAuthProvider.credentialFromError","GoogleAuthProvider.credentialFromTaggedObject","GithubAuthProvider","GithubAuthProvider#constructor","GithubAuthProvider.credential","GithubAuthProvider.credentialFromResult","GithubAuthProvider.credentialFromError","GithubAuthProvider.credentialFromTaggedObject","SAMLAuthCredential","SAMLAuthCredential#constructor","SAMLAuthCredential#_getIdTokenResponse","SAMLAuthCredential#_linkToIdToken","SAMLAuthCredential#_getReauthenticationResolver","SAMLAuthCredential#toJSON","SAMLAuthCredential.fromJSON","SAMLAuthCredential._create","SAMLAuthCredential#buildRequest","SAMLAuthProvider","SAMLAuthProvider#constructor","SAMLAuthProvider.credentialFromResult","SAMLAuthProvider.credentialFromError","SAMLAuthProvider.credentialFromJSON","SAMLAuthProvider.samlCredentialFromTaggedObject","TwitterAuthProvider","TwitterAuthProvider#constructor","TwitterAuthProvider.credential","TwitterAuthProvider.credentialFromResult","TwitterAuthProvider.credentialFromError","TwitterAuthProvider.credentialFromTaggedObject","signUp","UserCredentialImpl","UserCredentialImpl#constructor","UserCredentialImpl._fromIdTokenResponse","UserCredentialImpl._forOperation","providerIdForResponse","signInAnonymously","MultiFactorError","MultiFactorError#constructor","MultiFactorError._fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","idTokenProvider._catch$argument_0","providerDataAsNames","providerData.map.filter$argument_0","unlink","userInternal.providerData.filter$argument_0","_link$1","_assertLinkedStatus","_reauthenticate","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","signInWithCustomToken$1","signInWithCustomToken","MultiFactorInfoImpl","MultiFactorInfoImpl#constructor","MultiFactorInfoImpl._fromServerResponse","PhoneMultiFactorInfoImpl","PhoneMultiFactorInfoImpl#constructor","PhoneMultiFactorInfoImpl._fromServerResponse","TotpMultiFactorInfoImpl","TotpMultiFactorInfoImpl#constructor","TotpMultiFactorInfoImpl._fromServerResponse","_setActionCodeSettingsOnRequest","recachePasswordPolicy","sendPasswordResetEmail","confirmPasswordReset","resetPassword._catch$argument_0","applyActionCode","checkActionCode","verifyPasswordResetCode","createUserWithEmailAndPassword","signUpResponse._catch$argument_0","signInWithEmailAndPassword","signInWithCredential._catch$argument_0","sendSignInLinkToEmail","setActionCodeSettings","isSignInWithEmailLink","signInWithEmailLink","createAuthUri","fetchSignInMethodsForEmail","sendEmailVerification","verifyBeforeUpdateEmail","updateProfile$1","updateProfile","userInternal.providerData.find$argument_0","updateEmail","updatePassword","updateEmailOrPassword","_fromIdTokenResponse","GenericAdditionalUserInfo","GenericAdditionalUserInfo#constructor","FederatedAdditionalUserInfoWithUsername","FederatedAdditionalUserInfoWithUsername#constructor","FacebookAdditionalUserInfo","FacebookAdditionalUserInfo#constructor","GithubAdditionalUserInfo","GithubAdditionalUserInfo#constructor","GoogleAdditionalUserInfo","GoogleAdditionalUserInfo#constructor","TwitterAdditionalUserInfo","TwitterAdditionalUserInfo#constructor","getAdditionalUserInfo","setPersistence","initializeRecaptchaConfig","validatePassword","onIdTokenChanged","beforeAuthStateChanged","onAuthStateChanged","useDeviceLanguage","updateCurrentUser","signOut","revokeAccessToken","deleteUser","MultiFactorSessionImpl","MultiFactorSessionImpl#constructor","MultiFactorSessionImpl._fromIdtoken","MultiFactorSessionImpl._fromMfaPendingCredential","MultiFactorSessionImpl#toJSON","MultiFactorSessionImpl.fromJSON","MultiFactorResolverImpl","MultiFactorResolverImpl#constructor","MultiFactorResolverImpl._fromError","map$argument_0","MultiFactorResolverImpl$argument_2","MultiFactorResolverImpl#resolveSignIn","getMultiFactorResolver","startEnrollPhoneMfa","finalizeEnrollPhoneMfa","startEnrollTotpMfa","finalizeEnrollTotpMfa","withdrawMfa","MultiFactorUserImpl","MultiFactorUserImpl#constructor","user._onReload$argument_0","userInfo.mfaInfo.map$argument_0","MultiFactorUserImpl._fromUser","MultiFactorUserImpl#getSession","MultiFactorUserImpl#enroll","MultiFactorUserImpl#unenroll","enrolledFactors.filter$argument_0","multiFactor","BrowserPersistenceClass","BrowserPersistenceClass#constructor","BrowserPersistenceClass#_isAvailable","BrowserPersistenceClass#_set","BrowserPersistenceClass#_get","BrowserPersistenceClass#_remove","BrowserPersistenceClass#get__storage","BrowserLocalPersistence","BrowserLocalPersistence#constructor","boundEventHandler","BrowserLocalPersistence#forAllChangedKeys","BrowserLocalPersistence#onStorageEvent","forAllChangedKeys$argument_0","triggerListeners","BrowserLocalPersistence#notifyListeners","BrowserLocalPersistence#startPolling","setInterval$argument_0","BrowserLocalPersistence#stopPolling","BrowserLocalPersistence#attachListener","BrowserLocalPersistence#detachListener","BrowserLocalPersistence#_addListener","BrowserLocalPersistence#_removeListener","BrowserLocalPersistence#_set","BrowserLocalPersistence#_get","BrowserLocalPersistence#_remove","getDocumentCookie","getCookieName","CookiePersistence","CookiePersistence#constructor","CookiePersistence#_getFinalTarget","CookiePersistence#_isAvailable","CookiePersistence#_set","CookiePersistence#_get","CookiePersistence#_remove","fetch._catch$argument_0","CookiePersistence#_addListener","cb","event.changed.find$argument_0","event.deleted.find$argument_0","unsubscribe","CookiePersistence#_removeListener","BrowserSessionPersistence","BrowserSessionPersistence#constructor","BrowserSessionPersistence#_addListener","BrowserSessionPersistence#_removeListener","_allSettled","promises.map$argument_0","Receiver","Receiver#constructor","Receiver._getInstance","receivers.find$argument_0","Receiver#isListeningto","Receiver#handleEvent","Array.from.map$argument_0","Receiver#_subscribe","Receiver#_unsubscribe","_generateEventId","Sender","Sender#constructor","Sender#removeMessageHandler","Sender#_send","handler.onMessage","Promise._finally$argument_0","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","_getServiceWorkerController","_getWorkerGlobalScope","DBPromise","DBPromise#constructor","DBPromise#toPromise","request.addEventListener$argument_1","getObjectStore","_deleteDatabase","_openDatabase","_putObject","getObject","_deleteObject","IndexedDBLocalPersistence","IndexedDBLocalPersistence#constructor","initializeServiceWorkerMessaging.then$argument_0","initializeServiceWorkerMessaging.then$argument_1","IndexedDBLocalPersistence#_openDb","IndexedDBLocalPersistence#_withRetries","IndexedDBLocalPersistence#initializeServiceWorkerMessaging","IndexedDBLocalPersistence#initializeReceiver","receiver._subscribe$argument_1","IndexedDBLocalPersistence#initializeSender","IndexedDBLocalPersistence#notifyServiceWorker","IndexedDBLocalPersistence#_isAvailable","IndexedDBLocalPersistence#_withPendingWrite","IndexedDBLocalPersistence#_set","_withPendingWrite$argument_0","_withRetries$argument_0","IndexedDBLocalPersistence#_get","IndexedDBLocalPersistence#_remove","IndexedDBLocalPersistence#_poll","IndexedDBLocalPersistence#notifyListeners","IndexedDBLocalPersistence#startPolling","IndexedDBLocalPersistence#stopPolling","IndexedDBLocalPersistence#_addListener","IndexedDBLocalPersistence#_removeListener","startSignInPhoneMfa","finalizeSignInPhoneMfa","finalizeSignInTotpMfa","ReCaptchaLoaderImpl","ReCaptchaLoaderImpl#constructor","ReCaptchaLoaderImpl#load","_window.setTimeout$argument_0","_window._JSLOAD_CALLBACK","recaptcha.render","_loadJS._catch$argument_0","ReCaptchaLoaderImpl#clearedOneInstance","ReCaptchaLoaderImpl#shouldResolveImmediately","isHostLanguageValid","MockReCaptchaLoaderImpl","MockReCaptchaLoaderImpl#load","MockReCaptchaLoaderImpl#clearedOneInstance","RecaptchaVerifier","RecaptchaVerifier#constructor","RecaptchaVerifier#verify","tokenChange","RecaptchaVerifier#render","makeRenderPromise._catch$argument_0","RecaptchaVerifier#_reset","RecaptchaVerifier#clear","container.childNodes.forEach$argument_0","RecaptchaVerifier#validateStartingState","RecaptchaVerifier#makeTokenCallback","tokenChangeListeners.forEach$argument_0","RecaptchaVerifier#assertNotDestroyed","RecaptchaVerifier#makeRenderPromise","RecaptchaVerifier#init","RecaptchaVerifier#getAssertedRecaptcha","domReady","resolver","Promise._catch$argument_0","ConfirmationResultImpl","ConfirmationResultImpl#constructor","ConfirmationResultImpl#confirm","signInWithPhoneNumber","ConfirmationResultImpl$argument_1","linkWithPhoneNumber","reauthenticateWithPhoneNumber","_verifyPhoneNumber","startEnrollPhoneMfaActionCallback","startPhoneMfaEnrollmentResponse._catch$argument_0","startSignInPhoneMfaActionCallback","startPhoneMfaSignInResponse._catch$argument_0","sendPhoneVerificationCodeActionCallback","sendPhoneVerificationCodeResponse._catch$argument_0","updatePhoneNumber","injectRecaptchaV2Token","PhoneAuthProvider","PhoneAuthProvider#constructor","PhoneAuthProvider#verifyPhoneNumber","PhoneAuthProvider.credential","PhoneAuthProvider.credentialFromResult","PhoneAuthProvider.credentialFromError","PhoneAuthProvider.credentialFromTaggedObject","_withDefaultResolver","IdpCredential","IdpCredential#constructor","IdpCredential#_getIdTokenResponse","IdpCredential#_linkToIdToken","IdpCredential#_getReauthenticationResolver","IdpCredential#_buildIdpRequest","_signIn","_reauth","_link","AbstractPopupRedirectOperation","AbstractPopupRedirectOperation#constructor","AbstractPopupRedirectOperation#execute","AbstractPopupRedirectOperation#onAuthEvent","AbstractPopupRedirectOperation#onError","AbstractPopupRedirectOperation#getIdpTask","AbstractPopupRedirectOperation#resolve","AbstractPopupRedirectOperation#reject","AbstractPopupRedirectOperation#unregisterAndCleanUp","signInWithPopup","reauthenticateWithPopup","linkWithPopup","PopupOperation","PopupOperation#constructor","PopupOperation#executeNotNull","PopupOperation#onExecution","resolver._originValidation._catch$argument_0","resolver._isIframeWebStorageSupported$argument_1","PopupOperation#get__eventId","PopupOperation#cancel","PopupOperation#cleanUp","PopupOperation#pollUserCancellation","poll","RedirectAction","RedirectAction#constructor","RedirectAction#execute","readyOutcome","redirectOutcomeMap.set$argument_1","RedirectAction#onAuthEvent","RedirectAction#onExecution","RedirectAction#cleanUp","_getAndClearPendingRedirectStatus","_setPendingRedirectStatus","_clearRedirectOutcomes","_overrideRedirectResult","resolverPersistence","pendingRedirectKey","signInWithRedirect","_signInWithRedirect","reauthenticateWithRedirect","_reauthenticateWithRedirect","linkWithRedirect","_linkWithRedirect","getRedirectResult","_getRedirectResult","prepareUserForRedirect","AuthEventManager","AuthEventManager#constructor","AuthEventManager#registerConsumer","AuthEventManager#unregisterConsumer","AuthEventManager#onEvent","consumers.forEach$argument_0","AuthEventManager#sendToConsumer","AuthEventManager#isEventForConsumer","AuthEventManager#hasEventBeenHandled","AuthEventManager#saveEventToCache","eventUid","isNullRedirectEvent","isRedirectEvent","_getProjectConfig","_validateOrigin","matchDomain","resetUnloadedGapiModules","loadGapi","loadGapiIframe","gapi.load$argument_1.callback","gapi.load$argument_1.ontimeout","_window.cbName","_loadGapi","getIframeUrl","_openIframe","context.open$argument_1","clearTimerAndResolve","iframe.ping.then$argument_1","AuthPopup","AuthPopup#constructor","AuthPopup#close","_open","Object.entries.reduce$argument_0","openAsNewWindowIOS","_getRedirectUrl","provider.getScopes.filter$argument_0","getHandlerBase","BrowserPopupRedirectResolver","BrowserPopupRedirectResolver#constructor","BrowserPopupRedirectResolver#_openPopup","BrowserPopupRedirectResolver#_openRedirect","BrowserPopupRedirectResolver#_initialize","promise._catch$argument_0","BrowserPopupRedirectResolver#initAndGetManager","iframe.register$argument_1","BrowserPopupRedirectResolver#_isIframeWebStorageSupported","iframe.send$argument_2","BrowserPopupRedirectResolver#_originValidation","BrowserPopupRedirectResolver#get___shouldInitProactively","MultiFactorAssertionImpl","MultiFactorAssertionImpl#constructor","MultiFactorAssertionImpl#_process","PhoneMultiFactorAssertionImpl","PhoneMultiFactorAssertionImpl#constructor","PhoneMultiFactorAssertionImpl._fromCredential","PhoneMultiFactorAssertionImpl#_finalizeEnroll","PhoneMultiFactorAssertionImpl#_finalizeSignIn","PhoneMultiFactorGenerator","PhoneMultiFactorGenerator#constructor","PhoneMultiFactorGenerator.assertion","TotpMultiFactorGenerator","TotpMultiFactorGenerator.assertionForEnrollment","TotpMultiFactorGenerator.assertionForSignIn","TotpMultiFactorGenerator.generateSecret","TotpMultiFactorAssertionImpl","TotpMultiFactorAssertionImpl#constructor","TotpMultiFactorAssertionImpl._fromSecret","TotpMultiFactorAssertionImpl._fromEnrollmentId","TotpMultiFactorAssertionImpl#_finalizeEnroll","TotpMultiFactorAssertionImpl#_finalizeSignIn","TotpSecret","TotpSecret#constructor","TotpSecret._fromStartTotpMfaEnrollmentResponse","TotpSecret#_makeTotpVerificationInfo","TotpSecret#generateQrCodeUrl","_isEmptyString","AuthInterop","AuthInterop#constructor","AuthInterop#getUid","AuthInterop#getToken","AuthInterop#addAuthTokenListener","auth.onIdTokenChanged$argument_0","AuthInterop#removeAuthTokenListener","AuthInterop#assertAuthConfigured","AuthInterop#updateProactiveRefresh","getVersionForPlatform","registerAuth","Component$argument_1","Component.setInstantiationMode.setInstanceCreatedCallback$argument_0","mintCookieFactory","getAuth","beforeAuthStateChanged$argument_2","onIdTokenChanged$argument_1","getScriptParentElement","_setExternalJSProvider$argument_0.loadJS","el.onerror"],"mappings":"AAA;ACwH;CDgK;AEC;CFS;AG0J;CHI;AIC;CJI;AKkB;CLE;AMC;CNE;AOC;CPS;AQC;CRE;ASC;CTS;AUC;CVU;AWC;CXI;AYO;CZS;AaQ;CbI;AckB;CdE;AeC;CfE;AgBC;ChBE;AiBqB;CjBe;AkBC;ClBa;AmBuB;ICC;KDM;IEC;KFU;CnBC;AsBkB;CtBO;AuBkB;ICC;KDQ;IEC;KFc;IGC;KHc;IIC;KJc;CvBC;A4ByH;C5BQ;A6BC;gECC;KDsC;C7BC;A+BC;C/BoD;AgCC;ChCQ;AiCC;CjCmB;AkCC;ClCW;AmCC;ICC;KDE;IEC;mCCM;oCCC;aDE;SDC;KFC;CnCC;AwCC;CxCc;AyCkB;CzCG;A0CC;C1CG;A2CC;ICC;KDe;IEO;KFY;IGO;KHI;IIO;KJG;C3CC;AgDkB;ChDE;AiDC;CjDE;AkDkB;ClDE;AmDC;CnDE;AoDC;CpDE;AqDkB;CrDiB;AsD8B;CtDE;AuDa;CvDgB;AwDC;CxDE;AyDC;CzDoB;A0DI;C1DM;A2DkB;C3De;A4DC;C5DG;A6DkB;ICC;KDS;IEC;KFM;IGC;KHQ;IIC;KJa;IKC;kC3BM;S2BE;KLC;IMC;KNa;C7DC;AoEkB;ICC;KDI;IEC;KFG;IGC;KHI;IIC;KJK;CpEC;AyEkB;CzEgC;A0EQ;C1EQ;A2EC;oCCC,mBC,kCD,CD;C3EE;A8EC;yBCC;KDS;C9EC;AgFkB;oElDC;KkDmB;ChFO;AiFC;CjFE;AkFwB;ICC;KDI;IEC;KFG;IGC;KHQ;IIC;KJI;IKC;KLU;IMC;KNE;IOC;KPG;IQC;KRI;ISC;KTsB;IUC;KVM;IWC;KXI;IYC;KZE;IaC;KbE;ClFC;AgGkB;ChGE;AiGC;ICC;KDmB;IEC;KFS;IGC;KHE;IIC;KJE;IKC;kDCY,6BD;KLG;IOC;KPQ;IQC;KRQ;ISC;KTQ;IUC;KVE;IWC;KXE;IYC;KZc;IaC;KbU;IcC;gDCU,6BD;KdY;IgBC;KhBE;IiBC;iDFsC,6BE;KjBM;IkBM;KlBa;ImBM;KnBgC;CjGC;AqHmB;CrHU;AsHkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJG;IKC;KLE;IMC;KNG;IOC;KPG;CtHC;A8HyB;C9HE;A+HC;ICC;KDS;IEC;KFE;IGC;sFCM,eD;KHO;IKC;KLE;IMC;KNE;IOC;KPU;IQC;KRE;ISC;kFCK;SDK,WE,0BF;iCLmB,eK;gEGoB,4BH;mDCc;SDO;KTE;C/HC;A4IqB;C5IiD;A6IC;C7IE;A8IC;C9IM;A+IC;C/IE;AgJC;ChJE;AiJC;CjJE;AkJC;ClJE;AmJC;CnJE;AoJC;CpJG;AqJC;CrJG;AsJC;CtJE;AuJC;CvJE;AwJC;CxJQ;AyJqB;CzJoB;A0JkB;ICC;KDG;IEC;gCCG,sBvH;SuHW,CD;eEK;gCCG,uBD;SFC;KFC;IMC;KNgC;C1JC;AiKyB;CjKE;AkKyB;ICC;KDoC;IEC;KFgB;IGO;KHS;IIO;KJmB;IKY;KLa;ClKC;AwKkB;ICC;wDnIuC,+DmI;KDC;IEC;iDCM;SD0B;KFE;III;KJqB;IKC;KLU;IMC;mCxIM;+BCC,2ED;iBwIC;8ECwC,uBD;KNoB;IQC;KR4B;ISC;KTa;IUC;KVE;IWC;KXE;IYC;KZa;IaC;0BVU;SUG;KbC;IcC;Kda;IeC;0BZI;SYE;KfC;IgBC;KhBO;IiBC;KjBa;IkBC;KlBO;ImBC;KnBS;IoBC;KpBE;IqBC;KrBE;IsBC;KtBE;IuBC;KvBE;IwBC;KxBE;IyBC;KzBE;I0BC;2B5JC;4D6JK;iB7JG;S4JE;K1BC;I4BI;K5Be;I6BC;K7BO;I8BC;K9BK;I+BC;K/BU;IgCC;6B7BI,e6B;KhCS;IiCC;8B9BE,6C8B;KjCE;IkCE;KlCI;ImCC;KnCE;IoCC;KpCK;IqCC;KrCK;IsCE;KtCE;IuCC;KvCU;IwCC;mBlDE,SkD;qBCY;SDK;mBlDG;akDG;mBlDI;akDG;KxCE;I0CM;K1Cc;I2CC;K3CK;I4CC;K5CG;I6CC;K7CS;I8CC;K9CE;I+CC;K/CuB;IgDC;KhDe;CxKC;AyNO;CzNE;A0NE;ICC;2CCG,sCD;KDC;IGC;KHG;C1NC;I8NmB;K9NE;A+NK;C/NE;AgOC;ChOE;AiOC;CjOE;AkOC;ClOE;AmOC;CnOE;AoOC;CpOE;AqOqB;ICC;KDI;IEC;KFK;IGC;KHI;IIC;KJG;IKC;KLI;CrOC;A2OC;ICC;KDE;IEC;KFE;IGC;KHI;IIC;KJI;C3OC;AgPC;ICC;KDE;IEC;KFI;IGC;KHI;ChPC;AoPC;ICC;4BCK;SDE;KDa;IGC;KHG;IIC;KJQ;IKC;yCCK;SDsB;KLC;IOC;KPI;CpPC;A4PC;C5PO;A6PK;ICM;KDM;IEM;QCC;+B1NU;0B2NK;iB3Nc;2B4NC;iB5NE;a0NC;SDC;QIC;4CCG;8BCG;qBDE;+BEC;qBFE;iBDC;SJK;2BzNM;sBiOE;8BCc;qBDE;+BEC;qBFE;ajOE;uBoOC;apOE;SyNC;KFC;C7PC;A2QC;C3QsD;A4QC;6DCS;aDS;0ECQ;aDoB;C5Qc;A8QC;C9QiB;A+Q2C;C/Qc;AgRC;ChRU;AiRwB;CjRuC;AkRC;ClRG;AmRC;CnRgB;AoRC;CpRS;AqRC;ICC;KDiB;CrRc;AuR0B;ICE;KDmB;IEM;KFE;IGE;KHE;IIE;KJE;IKE;KLE;CvRC;A6RkB;C7RE;A8RC;C9RE;A+RG;C/RE;AgSC;ChSE;AiSkB;CjSE;AkSC;ClSE;AmSC;CnSE;AoSC;CpSE;AqSC;CrSE;AsSC;CtSE;AuSkB;CvSE;AwSC;CxSE;AyS4B;ICE;KDW;IEE;KFE;IGE;KHE;IIE;KJO;IKS;KLW;IME;KNkB;IOE;KPoB;IQE;KRE;CzSC;AkTkB;ClTE;AmT2B;ICC;KDG;IEE;KF2B;IGE;KHU;IIU;KJa;IKE;KLG;IME;KNI;IOE;KPI;IQC;KR0B;CnTC;A4TkB;C5TE;A6TC;C7TE;A8TC;C9TM;A+TI;C/TM;AgUuB;ICC;KDG;IEE;KFE;IGE;KHE;IIE;KJE;IKE;KLK;IME;KNE;IOE;KPS;IQE;KRiB;ISE;KTiB;ChUC;A0UuB;C1UiB;A2UM;C3UY;A4UO;ICO;KDa;IEU;KFQ;C5UC;A+UO;C/UE;AgVuB;ICC;KDK;IEmB;KFE;IGuB;KHI;ChVC;AoVqC;ICM;KDM;IEM;KFE;IGW;KHG;III;KJE;CpVC;AyVwB;ICC;KDI;IEM;KFM;IGI;KHE;CzVC;A6VyC;ICK;KDI;IEsB;KFE;IGE;KHQ;IIM;KJE;IKO;KLE;IMC;KNyB;C7VC;AoWyD;ICC;KDE;IEa;KFM;IGM;KHE;IIO;KJE;IKC;KLa;CpWC;A0W+D;ICC;KDG;IEc;KFO;IGM;KHE;IIO;KJE;IKC;KLe;C1WC;AgXgE;ICC;KDE;IEM;KFM;IGM;KHE;IIO;KJE;IKC;KLa;ChXC;AsX0B;ICE;KDG;IEE;KFG;IGE;KHI;IIE;KJI;IKE;KLM;IMU;KNU;IOM;KPE;IQC;KRM;CtXC;A+XwB;ICK;KDG;IEiB;KFE;IGO;KHE;IIK;KJI;IKC;KLc;C/XC;AqYyD;ICC;KDE;IEO;KFO;IGM;KHE;IIO;KJE;IKC;KLc;CrYC;A2YsB;C3YE;A4YkB;ICC;KDK;IEC;KFU;IGC;KHS;C5YC;AgZC;ChZQ;AiZgC;CjZoB;AkZkB;ICC;KDY;IEC;KFE;ClZC;AqZC;iCCI;KDK;CrZC;AuZqB;avSE,8BuS;gBCC,YD;CvZC;AyZ0B;iECQ,sCD;CzZM;A2ZC;C3ZG;A4ZC;C5ZO;A6ZkB;C7ZsB;A8ZkB;C9ZW;A+Ze;C/ZE;AgaY;ChaI;AiaiB;CjaE;AkakB;ClaE;AmaqC;CnaY;AoakB;ICC;KDK;IEC;KFQ;CpaC;AuaC;ICC;KDG;IEC;KFE;CvaC;A0aC;ICC;KDE;IEC;KFE;C1aC;A6akB;C7aqB;A8a+B;C9aK;A+aoC;C/aW;AgbU;eCK;KDM;ChbE;AkbS;ClbE;AmbW;CnbwC;AobW;CpbI;AqbqB;gDCY;KDK;CrbI;AubwB;+GCI;KDK;CvbC;AybwD;ICO;KDK;CzbG;A2bS;C3bG;A4b0C;C5bU;A6bkB;C7bE;A8bsC;C9bW;A+b+B;C/bc;AgcmC;ChciB;AickB;CjcE;Akc0B;4DCgB,6CD;ClcM;AocyB;CpcM;Aqcc;CrcE;AscC;Ctce;AucsB;CvcuC;AwcC;ICC;KDI;CxcC;A0cC;ICC;KDG;C1cC;A4cC;ICC;KDE;C5cC;A8cC;ICC;KDE;C9cC;AgdC;ICC;KDE;ChdC;AkdC;ICC;KDE;CldC;AodQ;CpdY;Aqd2C;CrdE;Asd4B;CtdE;AudwB;CvdG;AwdiB;CxdE;AydW;CzdE;A0dgB;C1dE;A2dQ;C3dE;A4dsB;C5dE;A6dY;C7dE;A8dS;C9dG;A+da;C/dE;AgekB;ICC;KDI;IEC;KFE;IGC;KHE;IIC;KJS;IKC;KLU;CheC;AsekB;ICC;KDI;IEE;yDCG,uED;2DEG;SFuB;KFC;IKC;KLG;CteC;A4eW;C5eM;A6ekB;C7eE;A8eC;C9eE;A+eC;C/eE;AgfC;ChfE;AifC;CjfE;AkfE;ICC;uBCG;4DCE,4ED;SDE;KDC;IIC;KJE;IKC;KLE;IMC;KNW;IOC;+DCS,oCD;KPW;ClfC;A2fY;C3fM;A4fuB;ICC;KDG;IEC;KFY;IGC;KHG;IIC;KJG;IKC;KLG;IMC;KNE;C5fC;AmgBsB;ICC;ctWC,yBsW;iCCC,iDD;KDS;IGC;KHY;IIC;mCCG;aDE;iCEgB;SFU;KJc;IOC;KPQ;IQC;qCCE;mCJC;aIO;SDC;KRC;IUC;KVK;IWC;KXE;IYC;KZE;IaC;KbmB;IcC;KdW;IeE;KfG;IgBC;KhBI;IiBC;KjBG;CngBC;AqhB4B;CrhBI;AshBE;CthBM;AuhBC;ICC;KDG;IEE;KFO;IGI;KHQ;IIE;KJE;IKE;KLU;IME;gECa,eD;KNC;IQE;wBCM;yDCC,8BD;yDEI,8BF;aDI;gCIC,0DJ;qCnBK;SmBM;4BIC,6BJ;KRE;IaC;KbO;CvhBC;AqiB6B;ICC;cxYC,2BwY;KDC;IEC;KFG;IGC;KHG;CriBC;AyiB+B;oCCC;KDc;CziBC;A2iBsB;ICC;KDI;IEO;qDCI,+CD;KFO;IIC;KJE;IKW;kDCY,qDD;KLQ;IOQ;KPQ;IQQ;KRU;C3iBC;AojBmB;CpjBM;AqjBsB;ICC;KDG;IEM;KFM;IGc;2BlhBW;wCCG;aDE;gBmhBG;yDlhBS;6BkhBE;iBnhBa;SkhBS,UE;SFI;KHC;CrjBC;A2jBsB;C3jBE;A4jBC;C5jBE;A6jBkB;C7jBG;A8jBC;C9jBW;A+jBC;C/jBE;AgkBC;ChkBE;AikB4B;ICC;KDE;IEC;2B7hBC;qD8hBC;a9hBE;mD8hBC;a9hBE;S6hBC;KFC;CjkBC;AqkBC;CrkBI;AskBC;CtkBG;AukBC;uBjiBE;0C8hBC;S9hBE;kD8hBC;S9hBQ;4C8hBC;S9hBe;KiiBC;CvkBC;AwkBC;CxkBM;AykBC;CzkBI;A0kBC;C1kBG;A2kBG;ICC;yDCe,SD,EE,SF;KDC;IIC;KJM;IKC;KLkB;IMK;KNE;IOI;4ECG;SDK;+DCE;SDE;KPC;ISQ;KTgB;IUU;KVgB;IWC;KXY;IYC;KZQ;IaC;sCCC;oCCC,kCD;SDG;KbC;IgBC;6CDC,0BC;KhBG;IiBC;sCHC;oCCC,8BD;SGG;KjBC;IkBC;+CHE;SGG;KlB2B;ImBC;KnBQ;IoBC;qCnFE,wBmF;KpBC;IqBC;KrBK;IsBC;KtBU;IuBC;KvBU;C3kBC;AmmB0B;CnmBE;AomBC;CpmBE;AqmBC;CrmBE;AsmByB;ICC;KDS;IEC;2BlkBK;wDmkBC;ankBE;0CokBC;mCCW;iBDI;apkBG;+BskBM;atkBG;SkkBC;KFC;IOC;KPE;IQC;KRY;CtmBC;A+mBC;C/mBE;AgnBC;ICC;KDE;IEC,wBF;ChnBC;AmnB+B;ICoB;KD8B;IEM;2B/kBQ;gCglBC;ahlBM;S+kBK;KFC;IIM;4DCa;SDG;KJE;IME;KNK;IOI;8CCK;aDE;KPE;ISC;KTI;IUC;e/dC;8CgeC,2Bhe;S+dU;KVC;IYC;KZE;IaC;KbY;IcC;KdO;IeC;KfG;CnnBC;AmoBC;uB7lBE;mB8lBQ,e9lB;K6lBE,QE;KFK;CnoBC;AsoBkB;ICC;KDG;IEC;KFG;CtoBC;AyoBqC;sDCM,gDD;CzoBC;A2oBa;sDDI,8CC;C3oBC;A4oBgB;sDFM,wDE;C5oBC;A6oBK;0DCkC;iBDQ;6EEE;iBFE;0DGe;iBHQ;yEIE;iBJE;4DKS;aLQ;2EME;aNE;C7oBO;AopBwB;CppBM;AqpBE;CrpByC;AspBqC;ICK;KDI;IEkC;KFE;IG4B;KHE;IIK;KJG;IKiC;KLE;IMC;KNS;CtpBC;A6pB2B;C7pBM;A8pBkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJE;IKC;KLc;C9pBC;AoqBC;CpqBE;AqqBC;CrqBI;AsqBC;CtqBI;AuqBsB;ICC;KDQ;IEC;2BnoBC;SmoBU;KFC;IGC;KHqB;IIC;KJE;IKC;KLc;IMC;KNI;IOC;KPI;IQC;KRM;CvqBC;AgrBkD;ChrBS;AirB6B;CjrBS;AkrB0B;ClrBM;AmrBM;ICC;KDS;IEC;KFI;IGC;yDCa;SDE;8DEC;SFI;KHG;IMC;KNE;IOC;KPE;IQC;KRU;ISC;qBCC;gDncO;iBmcG;SDI;KTE;CnrBC;A8rByB;ICC;KDQ;IEK;+BCM,6BD;+BCG,uBD;qDEO,2BF;KFG;IKC;KLmB;IMC,uBN;IOC,aP;C9rBC;AssBC;CtsBS;AusBC;CvsBE;AwsBC;CxsBE;AysBC;CzsBE;A0sBC;C1sBE;A2sBC;C3sBE;A4sB8D;C5sBE;A6sBC;C7sBa;A8sBoC;C9sBE;A+sBC;C/sBe;AgtBgC;ChtBE;AitBC;CjtBa;AktB0C;CltBG;AmtBC;CntBc;AotBC;CptBM;AqtBqB;ICC;KDO;IEC;KFQ;IGC;KHE;IIC;+BCM;SDM;KJa;IMC;KNS;IOC;KPI;IQC;KRM;ISC;KTG;CrtBC;A+tBC;+DrlBC,MqlB;C/tBC;AguBC;ChuBG;AiuBC;CjuBW;AkuBkB;CluBE;AmuBoB;CnuBkB;AouBC;CpuB2B;AquBuB;CruBwB;AsuBC;uBhsBC;QisBE;0BCK;iBDE;2BEC;iBFS;SjsBG;gCosBiB;apsBS;uBskBG,ctkB;KgsBE,QjG;KiGI;CtuBC;A2uBE;C3uBG;A4uBsC;C5uBoB;A6uBC;OCU,wBxsB;uDmkBQ;SnkBE;QysBE;SzsBG;qE0sBG;S1sBE;KwsBC,CD;C7uBC;AivB4B;ICC;KDG;IEC;KFO;CjvBC;AovBC;yDCwB,mDD;CpvBe;AsvBC;CtvBO;AuvBoC;mDCuB,qBD;CvvBuB;AyvBC;CzvBK;A0vBuB;ICC;KDO;IEG;KFI;IGC;2BvtBI,SutB;KHC;IIC;sBCgB;SDE;KJE;IMC;qCCG;SDK;KNI;IQC;gFCE;SDM;KRC;IUC;KVM;IWC;KXG;C1vBC;AswBY;ICC;KDE;IEC;KFS;CtwBC;AywBO;ICC;KDG;IEE;KFE;IGE;KHM;IIE;KJK;CzwBC;A8wBM;ICC,iBD;IEW;KFE;C9wBC;AixBW;ICW;KDE;IEU;KFE;IGU;KHQ;CjxBC;AqxBK;ICC;KDK;IEE;KFE;IGE;KHE;IIE;KJO;IKE;KLQ;CrxBC;A2xBQ;ICE;KDQ;IEE;KFE;IGE;KHE;IIW;KJc;C3xBC;AgyBE;ChyBE;AiyBqB;ICC;KDG;IEC;KFG;IGC;KHQ;IIC;uDCK;SDE;KJG;IMC;KNS;IOC;KPE;IQC;KRO;CjyBC;A0yBkB;C1yBe;A2yBE;uECC;KDkB;oCEU;KFG;yFCC;gB9oBE,6B8oB;KDC;C3yBI;0B8yBqB,ShpB;C9JqB;A+yBS;qDCsB,kCD;mCEC,wBF;C/yBQ;AkzBC;ClzBE;ImzBE;2B7wBE;yB8wBI;a9wBI;S6wBI;KnzBC"},"hasCjsExports":false},"type":"js/module"}]}