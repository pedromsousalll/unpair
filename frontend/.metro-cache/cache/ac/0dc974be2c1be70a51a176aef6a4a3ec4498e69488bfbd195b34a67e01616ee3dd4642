{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":14,"index":213},"end":{"line":5,"column":30,"index":229}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"],"imports":1}},{"name":"./regex.generated","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":24,"index":255},"end":{"line":6,"column":52,"index":283}}],"key":"IlrU7zwS/GKMdBfghS/ElP5M0IU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parseNumberSkeletonFromString = parseNumberSkeletonFromString;\n  exports.parseNumberSkeleton = parseNumberSkeleton;\n  var tslib_1 = require(_dependencyMap[0], \"tslib\");\n  var regex_generated_1 = require(_dependencyMap[1], \"./regex.generated\");\n  function parseNumberSkeletonFromString(skeleton) {\n    if (skeleton.length === 0) {\n      throw new Error('Number skeleton cannot be empty');\n    }\n    // Parse the skeleton\n    var stringTokens = skeleton.split(regex_generated_1.WHITE_SPACE_REGEX).filter(function (x) {\n      return x.length > 0;\n    });\n    var tokens = [];\n    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n      var stringToken = stringTokens_1[_i];\n      var stemAndOptions = stringToken.split('/');\n      if (stemAndOptions.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n      var stem = stemAndOptions[0],\n        options = stemAndOptions.slice(1);\n      for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n        var option = options_1[_a];\n        if (option.length === 0) {\n          throw new Error('Invalid number skeleton');\n        }\n      }\n      tokens.push({\n        stem: stem,\n        options: options\n      });\n    }\n    return tokens;\n  }\n  function icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, '');\n  }\n  var FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\n  var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\n  var INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\n  var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\n  function parseSignificantPrecision(str) {\n    var result = {};\n    if (str[str.length - 1] === 'r') {\n      result.roundingPriority = 'morePrecision';\n    } else if (str[str.length - 1] === 's') {\n      result.roundingPriority = 'lessPrecision';\n    }\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n      // @@@ case\n      if (typeof g2 !== 'string') {\n        result.minimumSignificantDigits = g1.length;\n        result.maximumSignificantDigits = g1.length;\n      }\n      // @@@+ case\n      else if (g2 === '+') {\n        result.minimumSignificantDigits = g1.length;\n      }\n      // .### case\n      else if (g1[0] === '#') {\n        result.maximumSignificantDigits = g1.length;\n      }\n      // .@@## or .@@@ case\n      else {\n        result.minimumSignificantDigits = g1.length;\n        result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n      }\n      return '';\n    });\n    return result;\n  }\n  function parseSign(str) {\n    switch (str) {\n      case 'sign-auto':\n        return {\n          signDisplay: 'auto'\n        };\n      case 'sign-accounting':\n      case '()':\n        return {\n          currencySign: 'accounting'\n        };\n      case 'sign-always':\n      case '+!':\n        return {\n          signDisplay: 'always'\n        };\n      case 'sign-accounting-always':\n      case '()!':\n        return {\n          signDisplay: 'always',\n          currencySign: 'accounting'\n        };\n      case 'sign-except-zero':\n      case '+?':\n        return {\n          signDisplay: 'exceptZero'\n        };\n      case 'sign-accounting-except-zero':\n      case '()?':\n        return {\n          signDisplay: 'exceptZero',\n          currencySign: 'accounting'\n        };\n      case 'sign-never':\n      case '+_':\n        return {\n          signDisplay: 'never'\n        };\n    }\n  }\n  function parseConciseScientificAndEngineeringStem(stem) {\n    // Engineering\n    var result;\n    if (stem[0] === 'E' && stem[1] === 'E') {\n      result = {\n        notation: 'engineering'\n      };\n      stem = stem.slice(2);\n    } else if (stem[0] === 'E') {\n      result = {\n        notation: 'scientific'\n      };\n      stem = stem.slice(1);\n    }\n    if (result) {\n      var signDisplay = stem.slice(0, 2);\n      if (signDisplay === '+!') {\n        result.signDisplay = 'always';\n        stem = stem.slice(2);\n      } else if (signDisplay === '+?') {\n        result.signDisplay = 'exceptZero';\n        stem = stem.slice(2);\n      }\n      if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n        throw new Error('Malformed concise eng/scientific notation');\n      }\n      result.minimumIntegerDigits = stem.length;\n    }\n    return result;\n  }\n  function parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n      return signOpts;\n    }\n    return result;\n  }\n  /**\n   * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n   */\n  function parseNumberSkeleton(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n      var token = tokens_1[_i];\n      switch (token.stem) {\n        case 'percent':\n        case '%':\n          result.style = 'percent';\n          continue;\n        case '%x100':\n          result.style = 'percent';\n          result.scale = 100;\n          continue;\n        case 'currency':\n          result.style = 'currency';\n          result.currency = token.options[0];\n          continue;\n        case 'group-off':\n        case ',_':\n          result.useGrouping = false;\n          continue;\n        case 'precision-integer':\n        case '.':\n          result.maximumFractionDigits = 0;\n          continue;\n        case 'measure-unit':\n        case 'unit':\n          result.style = 'unit';\n          result.unit = icuUnitToEcma(token.options[0]);\n          continue;\n        case 'compact-short':\n        case 'K':\n          result.notation = 'compact';\n          result.compactDisplay = 'short';\n          continue;\n        case 'compact-long':\n        case 'KK':\n          result.notation = 'compact';\n          result.compactDisplay = 'long';\n          continue;\n        case 'scientific':\n          result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), {\n            notation: 'scientific'\n          }), token.options.reduce(function (all, opt) {\n            return tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt));\n          }, {}));\n          continue;\n        case 'engineering':\n          result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), {\n            notation: 'engineering'\n          }), token.options.reduce(function (all, opt) {\n            return tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt));\n          }, {}));\n          continue;\n        case 'notation-simple':\n          result.notation = 'standard';\n          continue;\n        // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n        case 'unit-width-narrow':\n          result.currencyDisplay = 'narrowSymbol';\n          result.unitDisplay = 'narrow';\n          continue;\n        case 'unit-width-short':\n          result.currencyDisplay = 'code';\n          result.unitDisplay = 'short';\n          continue;\n        case 'unit-width-full-name':\n          result.currencyDisplay = 'name';\n          result.unitDisplay = 'long';\n          continue;\n        case 'unit-width-iso-code':\n          result.currencyDisplay = 'symbol';\n          continue;\n        case 'scale':\n          result.scale = parseFloat(token.options[0]);\n          continue;\n        case 'rounding-mode-floor':\n          result.roundingMode = 'floor';\n          continue;\n        case 'rounding-mode-ceiling':\n          result.roundingMode = 'ceil';\n          continue;\n        case 'rounding-mode-down':\n          result.roundingMode = 'trunc';\n          continue;\n        case 'rounding-mode-up':\n          result.roundingMode = 'expand';\n          continue;\n        case 'rounding-mode-half-even':\n          result.roundingMode = 'halfEven';\n          continue;\n        case 'rounding-mode-half-down':\n          result.roundingMode = 'halfTrunc';\n          continue;\n        case 'rounding-mode-half-up':\n          result.roundingMode = 'halfExpand';\n          continue;\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n        case 'integer-width':\n          if (token.options.length > 1) {\n            throw new RangeError('integer-width stems only accept a single optional option');\n          }\n          token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n            if (g1) {\n              result.minimumIntegerDigits = g2.length;\n            } else if (g3 && g4) {\n              throw new Error('We currently do not support maximum integer digits');\n            } else if (g5) {\n              throw new Error('We currently do not support exact integer digits');\n            }\n            return '';\n          });\n          continue;\n      }\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n      if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n        result.minimumIntegerDigits = token.stem.length;\n        continue;\n      }\n      if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n        // Precision\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n        // precision-integer case\n        if (token.options.length > 1) {\n          throw new RangeError('Fraction-precision stems only accept a single optional option');\n        }\n        token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n          // .000* case (before ICU67 it was .000+)\n          if (g2 === '*') {\n            result.minimumFractionDigits = g1.length;\n          }\n          // .### case\n          else if (g3 && g3[0] === '#') {\n            result.maximumFractionDigits = g3.length;\n          }\n          // .00## case\n          else if (g4 && g5) {\n            result.minimumFractionDigits = g4.length;\n            result.maximumFractionDigits = g4.length + g5.length;\n          } else {\n            result.minimumFractionDigits = g1.length;\n            result.maximumFractionDigits = g1.length;\n          }\n          return '';\n        });\n        var opt = token.options[0];\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n        if (opt === 'w') {\n          result = tslib_1.__assign(tslib_1.__assign({}, result), {\n            trailingZeroDisplay: 'stripIfInteger'\n          });\n        } else if (opt) {\n          result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(opt));\n        }\n        continue;\n      }\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n      if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n        result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(token.stem));\n        continue;\n      }\n      var signOpts = parseSign(token.stem);\n      if (signOpts) {\n        result = tslib_1.__assign(tslib_1.__assign({}, result), signOpts);\n      }\n      var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n      if (conciseScientificAndEngineeringOpts) {\n        result = tslib_1.__assign(tslib_1.__assign({}, result), conciseScientificAndEngineeringOpts);\n      }\n    }\n    return result;\n  }\n});","lineCount":331,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"parseNumberSkeletonFromString"],[7,39,3,37],[7,42,3,40,"parseNumberSkeletonFromString"],[7,71,3,69],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"parseNumberSkeleton"],[8,29,4,27],[8,32,4,30,"parseNumberSkeleton"],[8,51,4,49],[9,2,5,0],[9,6,5,4,"tslib_1"],[9,13,5,11],[9,16,5,14,"require"],[9,23,5,21],[9,24,5,21,"_dependencyMap"],[9,38,5,21],[9,50,5,29],[9,51,5,30],[10,2,6,0],[10,6,6,4,"regex_generated_1"],[10,23,6,21],[10,26,6,24,"require"],[10,33,6,31],[10,34,6,31,"_dependencyMap"],[10,48,6,31],[10,72,6,51],[10,73,6,52],[11,2,7,0],[11,11,7,9,"parseNumberSkeletonFromString"],[11,40,7,38,"parseNumberSkeletonFromString"],[11,41,7,39,"skeleton"],[11,49,7,47],[11,51,7,49],[12,4,8,4],[12,8,8,8,"skeleton"],[12,16,8,16],[12,17,8,17,"length"],[12,23,8,23],[12,28,8,28],[12,29,8,29],[12,31,8,31],[13,6,9,8],[13,12,9,14],[13,16,9,18,"Error"],[13,21,9,23],[13,22,9,24],[13,55,9,57],[13,56,9,58],[14,4,10,4],[15,4,11,4],[16,4,12,4],[16,8,12,8,"stringTokens"],[16,20,12,20],[16,23,12,23,"skeleton"],[16,31,12,31],[16,32,13,9,"split"],[16,37,13,14],[16,38,13,15,"regex_generated_1"],[16,55,13,32],[16,56,13,33,"WHITE_SPACE_REGEX"],[16,73,13,50],[16,74,13,51],[16,75,14,9,"filter"],[16,81,14,15],[16,82,14,16],[16,92,14,26,"x"],[16,93,14,27],[16,95,14,29],[17,6,14,31],[17,13,14,38,"x"],[17,14,14,39],[17,15,14,40,"length"],[17,21,14,46],[17,24,14,49],[17,25,14,50],[18,4,14,52],[18,5,14,53],[18,6,14,54],[19,4,15,4],[19,8,15,8,"tokens"],[19,14,15,14],[19,17,15,17],[19,19,15,19],[20,4,16,4],[20,9,16,9],[20,13,16,13,"_i"],[20,15,16,15],[20,18,16,18],[20,19,16,19],[20,21,16,21,"stringTokens_1"],[20,35,16,35],[20,38,16,38,"stringTokens"],[20,50,16,50],[20,52,16,52,"_i"],[20,54,16,54],[20,57,16,57,"stringTokens_1"],[20,71,16,71],[20,72,16,72,"length"],[20,78,16,78],[20,80,16,80,"_i"],[20,82,16,82],[20,84,16,84],[20,86,16,86],[21,6,17,8],[21,10,17,12,"stringToken"],[21,21,17,23],[21,24,17,26,"stringTokens_1"],[21,38,17,40],[21,39,17,41,"_i"],[21,41,17,43],[21,42,17,44],[22,6,18,8],[22,10,18,12,"stemAndOptions"],[22,24,18,26],[22,27,18,29,"stringToken"],[22,38,18,40],[22,39,18,41,"split"],[22,44,18,46],[22,45,18,47],[22,48,18,50],[22,49,18,51],[23,6,19,8],[23,10,19,12,"stemAndOptions"],[23,24,19,26],[23,25,19,27,"length"],[23,31,19,33],[23,36,19,38],[23,37,19,39],[23,39,19,41],[24,8,20,12],[24,14,20,18],[24,18,20,22,"Error"],[24,23,20,27],[24,24,20,28],[24,49,20,53],[24,50,20,54],[25,6,21,8],[26,6,22,8],[26,10,22,12,"stem"],[26,14,22,16],[26,17,22,19,"stemAndOptions"],[26,31,22,33],[26,32,22,34],[26,33,22,35],[26,34,22,36],[27,8,22,38,"options"],[27,15,22,45],[27,18,22,48,"stemAndOptions"],[27,32,22,62],[27,33,22,63,"slice"],[27,38,22,68],[27,39,22,69],[27,40,22,70],[27,41,22,71],[28,6,23,8],[28,11,23,13],[28,15,23,17,"_a"],[28,17,23,19],[28,20,23,22],[28,21,23,23],[28,23,23,25,"options_1"],[28,32,23,34],[28,35,23,37,"options"],[28,42,23,44],[28,44,23,46,"_a"],[28,46,23,48],[28,49,23,51,"options_1"],[28,58,23,60],[28,59,23,61,"length"],[28,65,23,67],[28,67,23,69,"_a"],[28,69,23,71],[28,71,23,73],[28,73,23,75],[29,8,24,12],[29,12,24,16,"option"],[29,18,24,22],[29,21,24,25,"options_1"],[29,30,24,34],[29,31,24,35,"_a"],[29,33,24,37],[29,34,24,38],[30,8,25,12],[30,12,25,16,"option"],[30,18,25,22],[30,19,25,23,"length"],[30,25,25,29],[30,30,25,34],[30,31,25,35],[30,33,25,37],[31,10,26,16],[31,16,26,22],[31,20,26,26,"Error"],[31,25,26,31],[31,26,26,32],[31,51,26,57],[31,52,26,58],[32,8,27,12],[33,6,28,8],[34,6,29,8,"tokens"],[34,12,29,14],[34,13,29,15,"push"],[34,17,29,19],[34,18,29,20],[35,8,29,22,"stem"],[35,12,29,26],[35,14,29,28,"stem"],[35,18,29,32],[36,8,29,34,"options"],[36,15,29,41],[36,17,29,43,"options"],[37,6,29,51],[37,7,29,52],[37,8,29,53],[38,4,30,4],[39,4,31,4],[39,11,31,11,"tokens"],[39,17,31,17],[40,2,32,0],[41,2,33,0],[41,11,33,9,"icuUnitToEcma"],[41,24,33,22,"icuUnitToEcma"],[41,25,33,23,"unit"],[41,29,33,27],[41,31,33,29],[42,4,34,4],[42,11,34,11,"unit"],[42,15,34,15],[42,16,34,16,"replace"],[42,23,34,23],[42,24,34,24],[42,33,34,33],[42,35,34,35],[42,37,34,37],[42,38,34,38],[43,2,35,0],[44,2,36,0],[44,6,36,4,"FRACTION_PRECISION_REGEX"],[44,30,36,28],[44,33,36,31],[44,67,36,65],[45,2,37,0],[45,6,37,4,"SIGNIFICANT_PRECISION_REGEX"],[45,33,37,31],[45,36,37,34],[45,59,37,57],[46,2,38,0],[46,6,38,4,"INTEGER_WIDTH_REGEX"],[46,25,38,23],[46,28,38,26],[46,53,38,51],[47,2,39,0],[47,6,39,4,"CONCISE_INTEGER_WIDTH_REGEX"],[47,33,39,31],[47,36,39,34],[47,44,39,42],[48,2,40,0],[48,11,40,9,"parseSignificantPrecision"],[48,36,40,34,"parseSignificantPrecision"],[48,37,40,35,"str"],[48,40,40,38],[48,42,40,40],[49,4,41,4],[49,8,41,8,"result"],[49,14,41,14],[49,17,41,17],[49,18,41,18],[49,19,41,19],[50,4,42,4],[50,8,42,8,"str"],[50,11,42,11],[50,12,42,12,"str"],[50,15,42,15],[50,16,42,16,"length"],[50,22,42,22],[50,25,42,25],[50,26,42,26],[50,27,42,27],[50,32,42,32],[50,35,42,35],[50,37,42,37],[51,6,43,8,"result"],[51,12,43,14],[51,13,43,15,"roundingPriority"],[51,29,43,31],[51,32,43,34],[51,47,43,49],[52,4,44,4],[52,5,44,5],[52,11,45,9],[52,15,45,13,"str"],[52,18,45,16],[52,19,45,17,"str"],[52,22,45,20],[52,23,45,21,"length"],[52,29,45,27],[52,32,45,30],[52,33,45,31],[52,34,45,32],[52,39,45,37],[52,42,45,40],[52,44,45,42],[53,6,46,8,"result"],[53,12,46,14],[53,13,46,15,"roundingPriority"],[53,29,46,31],[53,32,46,34],[53,47,46,49],[54,4,47,4],[55,4,48,4,"str"],[55,7,48,7],[55,8,48,8,"replace"],[55,15,48,15],[55,16,48,16,"SIGNIFICANT_PRECISION_REGEX"],[55,43,48,43],[55,45,48,45],[55,55,48,55,"_"],[55,56,48,56],[55,58,48,58,"g1"],[55,60,48,60],[55,62,48,62,"g2"],[55,64,48,64],[55,66,48,66],[56,6,49,8],[57,6,50,8],[57,10,50,12],[57,17,50,19,"g2"],[57,19,50,21],[57,24,50,26],[57,32,50,34],[57,34,50,36],[58,8,51,12,"result"],[58,14,51,18],[58,15,51,19,"minimumSignificantDigits"],[58,39,51,43],[58,42,51,46,"g1"],[58,44,51,48],[58,45,51,49,"length"],[58,51,51,55],[59,8,52,12,"result"],[59,14,52,18],[59,15,52,19,"maximumSignificantDigits"],[59,39,52,43],[59,42,52,46,"g1"],[59,44,52,48],[59,45,52,49,"length"],[59,51,52,55],[60,6,53,8],[61,6,54,8],[62,6,54,8],[62,11,55,13],[62,15,55,17,"g2"],[62,17,55,19],[62,22,55,24],[62,25,55,27],[62,27,55,29],[63,8,56,12,"result"],[63,14,56,18],[63,15,56,19,"minimumSignificantDigits"],[63,39,56,43],[63,42,56,46,"g1"],[63,44,56,48],[63,45,56,49,"length"],[63,51,56,55],[64,6,57,8],[65,6,58,8],[66,6,58,8],[66,11,59,13],[66,15,59,17,"g1"],[66,17,59,19],[66,18,59,20],[66,19,59,21],[66,20,59,22],[66,25,59,27],[66,28,59,30],[66,30,59,32],[67,8,60,12,"result"],[67,14,60,18],[67,15,60,19,"maximumSignificantDigits"],[67,39,60,43],[67,42,60,46,"g1"],[67,44,60,48],[67,45,60,49,"length"],[67,51,60,55],[68,6,61,8],[69,6,62,8],[70,6,62,8],[70,11,63,13],[71,8,64,12,"result"],[71,14,64,18],[71,15,64,19,"minimumSignificantDigits"],[71,39,64,43],[71,42,64,46,"g1"],[71,44,64,48],[71,45,64,49,"length"],[71,51,64,55],[72,8,65,12,"result"],[72,14,65,18],[72,15,65,19,"maximumSignificantDigits"],[72,39,65,43],[72,42,66,16,"g1"],[72,44,66,18],[72,45,66,19,"length"],[72,51,66,25],[72,55,66,29],[72,62,66,36,"g2"],[72,64,66,38],[72,69,66,43],[72,77,66,51],[72,80,66,54,"g2"],[72,82,66,56],[72,83,66,57,"length"],[72,89,66,63],[72,92,66,66],[72,93,66,67],[72,94,66,68],[73,6,67,8],[74,6,68,8],[74,13,68,15],[74,15,68,17],[75,4,69,4],[75,5,69,5],[75,6,69,6],[76,4,70,4],[76,11,70,11,"result"],[76,17,70,17],[77,2,71,0],[78,2,72,0],[78,11,72,9,"parseSign"],[78,20,72,18,"parseSign"],[78,21,72,19,"str"],[78,24,72,22],[78,26,72,24],[79,4,73,4],[79,12,73,12,"str"],[79,15,73,15],[80,6,74,8],[80,11,74,13],[80,22,74,24],[81,8,75,12],[81,15,75,19],[82,10,76,16,"signDisplay"],[82,21,76,27],[82,23,76,29],[83,8,77,12],[83,9,77,13],[84,6,78,8],[84,11,78,13],[84,28,78,30],[85,6,79,8],[85,11,79,13],[85,15,79,17],[86,8,80,12],[86,15,80,19],[87,10,81,16,"currencySign"],[87,22,81,28],[87,24,81,30],[88,8,82,12],[88,9,82,13],[89,6,83,8],[89,11,83,13],[89,24,83,26],[90,6,84,8],[90,11,84,13],[90,15,84,17],[91,8,85,12],[91,15,85,19],[92,10,86,16,"signDisplay"],[92,21,86,27],[92,23,86,29],[93,8,87,12],[93,9,87,13],[94,6,88,8],[94,11,88,13],[94,35,88,37],[95,6,89,8],[95,11,89,13],[95,16,89,18],[96,8,90,12],[96,15,90,19],[97,10,91,16,"signDisplay"],[97,21,91,27],[97,23,91,29],[97,31,91,37],[98,10,92,16,"currencySign"],[98,22,92,28],[98,24,92,30],[99,8,93,12],[99,9,93,13],[100,6,94,8],[100,11,94,13],[100,29,94,31],[101,6,95,8],[101,11,95,13],[101,15,95,17],[102,8,96,12],[102,15,96,19],[103,10,97,16,"signDisplay"],[103,21,97,27],[103,23,97,29],[104,8,98,12],[104,9,98,13],[105,6,99,8],[105,11,99,13],[105,40,99,42],[106,6,100,8],[106,11,100,13],[106,16,100,18],[107,8,101,12],[107,15,101,19],[108,10,102,16,"signDisplay"],[108,21,102,27],[108,23,102,29],[108,35,102,41],[109,10,103,16,"currencySign"],[109,22,103,28],[109,24,103,30],[110,8,104,12],[110,9,104,13],[111,6,105,8],[111,11,105,13],[111,23,105,25],[112,6,106,8],[112,11,106,13],[112,15,106,17],[113,8,107,12],[113,15,107,19],[114,10,108,16,"signDisplay"],[114,21,108,27],[114,23,108,29],[115,8,109,12],[115,9,109,13],[116,4,110,4],[117,2,111,0],[118,2,112,0],[118,11,112,9,"parseConciseScientificAndEngineeringStem"],[118,51,112,49,"parseConciseScientificAndEngineeringStem"],[118,52,112,50,"stem"],[118,56,112,54],[118,58,112,56],[119,4,113,4],[120,4,114,4],[120,8,114,8,"result"],[120,14,114,14],[121,4,115,4],[121,8,115,8,"stem"],[121,12,115,12],[121,13,115,13],[121,14,115,14],[121,15,115,15],[121,20,115,20],[121,23,115,23],[121,27,115,27,"stem"],[121,31,115,31],[121,32,115,32],[121,33,115,33],[121,34,115,34],[121,39,115,39],[121,42,115,42],[121,44,115,44],[122,6,116,8,"result"],[122,12,116,14],[122,15,116,17],[123,8,117,12,"notation"],[123,16,117,20],[123,18,117,22],[124,6,118,8],[124,7,118,9],[125,6,119,8,"stem"],[125,10,119,12],[125,13,119,15,"stem"],[125,17,119,19],[125,18,119,20,"slice"],[125,23,119,25],[125,24,119,26],[125,25,119,27],[125,26,119,28],[126,4,120,4],[126,5,120,5],[126,11,121,9],[126,15,121,13,"stem"],[126,19,121,17],[126,20,121,18],[126,21,121,19],[126,22,121,20],[126,27,121,25],[126,30,121,28],[126,32,121,30],[127,6,122,8,"result"],[127,12,122,14],[127,15,122,17],[128,8,123,12,"notation"],[128,16,123,20],[128,18,123,22],[129,6,124,8],[129,7,124,9],[130,6,125,8,"stem"],[130,10,125,12],[130,13,125,15,"stem"],[130,17,125,19],[130,18,125,20,"slice"],[130,23,125,25],[130,24,125,26],[130,25,125,27],[130,26,125,28],[131,4,126,4],[132,4,127,4],[132,8,127,8,"result"],[132,14,127,14],[132,16,127,16],[133,6,128,8],[133,10,128,12,"signDisplay"],[133,21,128,23],[133,24,128,26,"stem"],[133,28,128,30],[133,29,128,31,"slice"],[133,34,128,36],[133,35,128,37],[133,36,128,38],[133,38,128,40],[133,39,128,41],[133,40,128,42],[134,6,129,8],[134,10,129,12,"signDisplay"],[134,21,129,23],[134,26,129,28],[134,30,129,32],[134,32,129,34],[135,8,130,12,"result"],[135,14,130,18],[135,15,130,19,"signDisplay"],[135,26,130,30],[135,29,130,33],[135,37,130,41],[136,8,131,12,"stem"],[136,12,131,16],[136,15,131,19,"stem"],[136,19,131,23],[136,20,131,24,"slice"],[136,25,131,29],[136,26,131,30],[136,27,131,31],[136,28,131,32],[137,6,132,8],[137,7,132,9],[137,13,133,13],[137,17,133,17,"signDisplay"],[137,28,133,28],[137,33,133,33],[137,37,133,37],[137,39,133,39],[138,8,134,12,"result"],[138,14,134,18],[138,15,134,19,"signDisplay"],[138,26,134,30],[138,29,134,33],[138,41,134,45],[139,8,135,12,"stem"],[139,12,135,16],[139,15,135,19,"stem"],[139,19,135,23],[139,20,135,24,"slice"],[139,25,135,29],[139,26,135,30],[139,27,135,31],[139,28,135,32],[140,6,136,8],[141,6,137,8],[141,10,137,12],[141,11,137,13,"CONCISE_INTEGER_WIDTH_REGEX"],[141,38,137,40],[141,39,137,41,"test"],[141,43,137,45],[141,44,137,46,"stem"],[141,48,137,50],[141,49,137,51],[141,51,137,53],[142,8,138,12],[142,14,138,18],[142,18,138,22,"Error"],[142,23,138,27],[142,24,138,28],[142,67,138,71],[142,68,138,72],[143,6,139,8],[144,6,140,8,"result"],[144,12,140,14],[144,13,140,15,"minimumIntegerDigits"],[144,33,140,35],[144,36,140,38,"stem"],[144,40,140,42],[144,41,140,43,"length"],[144,47,140,49],[145,4,141,4],[146,4,142,4],[146,11,142,11,"result"],[146,17,142,17],[147,2,143,0],[148,2,144,0],[148,11,144,9,"parseNotationOptions"],[148,31,144,29,"parseNotationOptions"],[148,32,144,30,"opt"],[148,35,144,33],[148,37,144,35],[149,4,145,4],[149,8,145,8,"result"],[149,14,145,14],[149,17,145,17],[149,18,145,18],[149,19,145,19],[150,4,146,4],[150,8,146,8,"signOpts"],[150,16,146,16],[150,19,146,19,"parseSign"],[150,28,146,28],[150,29,146,29,"opt"],[150,32,146,32],[150,33,146,33],[151,4,147,4],[151,8,147,8,"signOpts"],[151,16,147,16],[151,18,147,18],[152,6,148,8],[152,13,148,15,"signOpts"],[152,21,148,23],[153,4,149,4],[154,4,150,4],[154,11,150,11,"result"],[154,17,150,17],[155,2,151,0],[156,2,152,0],[157,0,153,0],[158,0,154,0],[159,2,155,0],[159,11,155,9,"parseNumberSkeleton"],[159,30,155,28,"parseNumberSkeleton"],[159,31,155,29,"tokens"],[159,37,155,35],[159,39,155,37],[160,4,156,4],[160,8,156,8,"result"],[160,14,156,14],[160,17,156,17],[160,18,156,18],[160,19,156,19],[161,4,157,4],[161,9,157,9],[161,13,157,13,"_i"],[161,15,157,15],[161,18,157,18],[161,19,157,19],[161,21,157,21,"tokens_1"],[161,29,157,29],[161,32,157,32,"tokens"],[161,38,157,38],[161,40,157,40,"_i"],[161,42,157,42],[161,45,157,45,"tokens_1"],[161,53,157,53],[161,54,157,54,"length"],[161,60,157,60],[161,62,157,62,"_i"],[161,64,157,64],[161,66,157,66],[161,68,157,68],[162,6,158,8],[162,10,158,12,"token"],[162,15,158,17],[162,18,158,20,"tokens_1"],[162,26,158,28],[162,27,158,29,"_i"],[162,29,158,31],[162,30,158,32],[163,6,159,8],[163,14,159,16,"token"],[163,19,159,21],[163,20,159,22,"stem"],[163,24,159,26],[164,8,160,12],[164,13,160,17],[164,22,160,26],[165,8,161,12],[165,13,161,17],[165,16,161,20],[166,10,162,16,"result"],[166,16,162,22],[166,17,162,23,"style"],[166,22,162,28],[166,25,162,31],[166,34,162,40],[167,10,163,16],[168,8,164,12],[168,13,164,17],[168,20,164,24],[169,10,165,16,"result"],[169,16,165,22],[169,17,165,23,"style"],[169,22,165,28],[169,25,165,31],[169,34,165,40],[170,10,166,16,"result"],[170,16,166,22],[170,17,166,23,"scale"],[170,22,166,28],[170,25,166,31],[170,28,166,34],[171,10,167,16],[172,8,168,12],[172,13,168,17],[172,23,168,27],[173,10,169,16,"result"],[173,16,169,22],[173,17,169,23,"style"],[173,22,169,28],[173,25,169,31],[173,35,169,41],[174,10,170,16,"result"],[174,16,170,22],[174,17,170,23,"currency"],[174,25,170,31],[174,28,170,34,"token"],[174,33,170,39],[174,34,170,40,"options"],[174,41,170,47],[174,42,170,48],[174,43,170,49],[174,44,170,50],[175,10,171,16],[176,8,172,12],[176,13,172,17],[176,24,172,28],[177,8,173,12],[177,13,173,17],[177,17,173,21],[178,10,174,16,"result"],[178,16,174,22],[178,17,174,23,"useGrouping"],[178,28,174,34],[178,31,174,37],[178,36,174,42],[179,10,175,16],[180,8,176,12],[180,13,176,17],[180,32,176,36],[181,8,177,12],[181,13,177,17],[181,16,177,20],[182,10,178,16,"result"],[182,16,178,22],[182,17,178,23,"maximumFractionDigits"],[182,38,178,44],[182,41,178,47],[182,42,178,48],[183,10,179,16],[184,8,180,12],[184,13,180,17],[184,27,180,31],[185,8,181,12],[185,13,181,17],[185,19,181,23],[186,10,182,16,"result"],[186,16,182,22],[186,17,182,23,"style"],[186,22,182,28],[186,25,182,31],[186,31,182,37],[187,10,183,16,"result"],[187,16,183,22],[187,17,183,23,"unit"],[187,21,183,27],[187,24,183,30,"icuUnitToEcma"],[187,37,183,43],[187,38,183,44,"token"],[187,43,183,49],[187,44,183,50,"options"],[187,51,183,57],[187,52,183,58],[187,53,183,59],[187,54,183,60],[187,55,183,61],[188,10,184,16],[189,8,185,12],[189,13,185,17],[189,28,185,32],[190,8,186,12],[190,13,186,17],[190,16,186,20],[191,10,187,16,"result"],[191,16,187,22],[191,17,187,23,"notation"],[191,25,187,31],[191,28,187,34],[191,37,187,43],[192,10,188,16,"result"],[192,16,188,22],[192,17,188,23,"compactDisplay"],[192,31,188,37],[192,34,188,40],[192,41,188,47],[193,10,189,16],[194,8,190,12],[194,13,190,17],[194,27,190,31],[195,8,191,12],[195,13,191,17],[195,17,191,21],[196,10,192,16,"result"],[196,16,192,22],[196,17,192,23,"notation"],[196,25,192,31],[196,28,192,34],[196,37,192,43],[197,10,193,16,"result"],[197,16,193,22],[197,17,193,23,"compactDisplay"],[197,31,193,37],[197,34,193,40],[197,40,193,46],[198,10,194,16],[199,8,195,12],[199,13,195,17],[199,25,195,29],[200,10,196,16,"result"],[200,16,196,22],[200,19,196,25,"tslib_1"],[200,26,196,32],[200,27,196,33,"__assign"],[200,35,196,41],[200,36,196,42,"tslib_1"],[200,43,196,49],[200,44,196,50,"__assign"],[200,52,196,58],[200,53,196,59,"tslib_1"],[200,60,196,66],[200,61,196,67,"__assign"],[200,69,196,75],[200,70,196,76],[200,71,196,77],[200,72,196,78],[200,74,196,80,"result"],[200,80,196,86],[200,81,196,87],[200,83,196,89],[201,12,196,91,"notation"],[201,20,196,99],[201,22,196,101],[202,10,196,114],[202,11,196,115],[202,12,196,116],[202,14,196,118,"token"],[202,19,196,123],[202,20,196,124,"options"],[202,27,196,131],[202,28,196,132,"reduce"],[202,34,196,138],[202,35,196,139],[202,45,196,149,"all"],[202,48,196,152],[202,50,196,154,"opt"],[202,53,196,157],[202,55,196,159],[203,12,196,161],[203,19,196,169,"tslib_1"],[203,26,196,176],[203,27,196,177,"__assign"],[203,35,196,185],[203,36,196,186,"tslib_1"],[203,43,196,193],[203,44,196,194,"__assign"],[203,52,196,202],[203,53,196,203],[203,54,196,204],[203,55,196,205],[203,57,196,207,"all"],[203,60,196,210],[203,61,196,211],[203,63,196,213,"parseNotationOptions"],[203,83,196,233],[203,84,196,234,"opt"],[203,87,196,237],[203,88,196,238],[203,89,196,239],[204,10,196,242],[204,11,196,243],[204,13,196,245],[204,14,196,246],[204,15,196,247],[204,16,196,248],[204,17,196,249],[205,10,197,16],[206,8,198,12],[206,13,198,17],[206,26,198,30],[207,10,199,16,"result"],[207,16,199,22],[207,19,199,25,"tslib_1"],[207,26,199,32],[207,27,199,33,"__assign"],[207,35,199,41],[207,36,199,42,"tslib_1"],[207,43,199,49],[207,44,199,50,"__assign"],[207,52,199,58],[207,53,199,59,"tslib_1"],[207,60,199,66],[207,61,199,67,"__assign"],[207,69,199,75],[207,70,199,76],[207,71,199,77],[207,72,199,78],[207,74,199,80,"result"],[207,80,199,86],[207,81,199,87],[207,83,199,89],[208,12,199,91,"notation"],[208,20,199,99],[208,22,199,101],[209,10,199,115],[209,11,199,116],[209,12,199,117],[209,14,199,119,"token"],[209,19,199,124],[209,20,199,125,"options"],[209,27,199,132],[209,28,199,133,"reduce"],[209,34,199,139],[209,35,199,140],[209,45,199,150,"all"],[209,48,199,153],[209,50,199,155,"opt"],[209,53,199,158],[209,55,199,160],[210,12,199,162],[210,19,199,170,"tslib_1"],[210,26,199,177],[210,27,199,178,"__assign"],[210,35,199,186],[210,36,199,187,"tslib_1"],[210,43,199,194],[210,44,199,195,"__assign"],[210,52,199,203],[210,53,199,204],[210,54,199,205],[210,55,199,206],[210,57,199,208,"all"],[210,60,199,211],[210,61,199,212],[210,63,199,214,"parseNotationOptions"],[210,83,199,234],[210,84,199,235,"opt"],[210,87,199,238],[210,88,199,239],[210,89,199,240],[211,10,199,243],[211,11,199,244],[211,13,199,246],[211,14,199,247],[211,15,199,248],[211,16,199,249],[211,17,199,250],[212,10,200,16],[213,8,201,12],[213,13,201,17],[213,30,201,34],[214,10,202,16,"result"],[214,16,202,22],[214,17,202,23,"notation"],[214,25,202,31],[214,28,202,34],[214,38,202,44],[215,10,203,16],[216,8,204,12],[217,8,205,12],[217,13,205,17],[217,32,205,36],[218,10,206,16,"result"],[218,16,206,22],[218,17,206,23,"currencyDisplay"],[218,32,206,38],[218,35,206,41],[218,49,206,55],[219,10,207,16,"result"],[219,16,207,22],[219,17,207,23,"unitDisplay"],[219,28,207,34],[219,31,207,37],[219,39,207,45],[220,10,208,16],[221,8,209,12],[221,13,209,17],[221,31,209,35],[222,10,210,16,"result"],[222,16,210,22],[222,17,210,23,"currencyDisplay"],[222,32,210,38],[222,35,210,41],[222,41,210,47],[223,10,211,16,"result"],[223,16,211,22],[223,17,211,23,"unitDisplay"],[223,28,211,34],[223,31,211,37],[223,38,211,44],[224,10,212,16],[225,8,213,12],[225,13,213,17],[225,35,213,39],[226,10,214,16,"result"],[226,16,214,22],[226,17,214,23,"currencyDisplay"],[226,32,214,38],[226,35,214,41],[226,41,214,47],[227,10,215,16,"result"],[227,16,215,22],[227,17,215,23,"unitDisplay"],[227,28,215,34],[227,31,215,37],[227,37,215,43],[228,10,216,16],[229,8,217,12],[229,13,217,17],[229,34,217,38],[230,10,218,16,"result"],[230,16,218,22],[230,17,218,23,"currencyDisplay"],[230,32,218,38],[230,35,218,41],[230,43,218,49],[231,10,219,16],[232,8,220,12],[232,13,220,17],[232,20,220,24],[233,10,221,16,"result"],[233,16,221,22],[233,17,221,23,"scale"],[233,22,221,28],[233,25,221,31,"parseFloat"],[233,35,221,41],[233,36,221,42,"token"],[233,41,221,47],[233,42,221,48,"options"],[233,49,221,55],[233,50,221,56],[233,51,221,57],[233,52,221,58],[233,53,221,59],[234,10,222,16],[235,8,223,12],[235,13,223,17],[235,34,223,38],[236,10,224,16,"result"],[236,16,224,22],[236,17,224,23,"roundingMode"],[236,29,224,35],[236,32,224,38],[236,39,224,45],[237,10,225,16],[238,8,226,12],[238,13,226,17],[238,36,226,40],[239,10,227,16,"result"],[239,16,227,22],[239,17,227,23,"roundingMode"],[239,29,227,35],[239,32,227,38],[239,38,227,44],[240,10,228,16],[241,8,229,12],[241,13,229,17],[241,33,229,37],[242,10,230,16,"result"],[242,16,230,22],[242,17,230,23,"roundingMode"],[242,29,230,35],[242,32,230,38],[242,39,230,45],[243,10,231,16],[244,8,232,12],[244,13,232,17],[244,31,232,35],[245,10,233,16,"result"],[245,16,233,22],[245,17,233,23,"roundingMode"],[245,29,233,35],[245,32,233,38],[245,40,233,46],[246,10,234,16],[247,8,235,12],[247,13,235,17],[247,38,235,42],[248,10,236,16,"result"],[248,16,236,22],[248,17,236,23,"roundingMode"],[248,29,236,35],[248,32,236,38],[248,42,236,48],[249,10,237,16],[250,8,238,12],[250,13,238,17],[250,38,238,42],[251,10,239,16,"result"],[251,16,239,22],[251,17,239,23,"roundingMode"],[251,29,239,35],[251,32,239,38],[251,43,239,49],[252,10,240,16],[253,8,241,12],[253,13,241,17],[253,36,241,40],[254,10,242,16,"result"],[254,16,242,22],[254,17,242,23,"roundingMode"],[254,29,242,35],[254,32,242,38],[254,44,242,50],[255,10,243,16],[256,8,244,12],[257,8,245,12],[257,13,245,17],[257,28,245,32],[258,10,246,16],[258,14,246,20,"token"],[258,19,246,25],[258,20,246,26,"options"],[258,27,246,33],[258,28,246,34,"length"],[258,34,246,40],[258,37,246,43],[258,38,246,44],[258,40,246,46],[259,12,247,20],[259,18,247,26],[259,22,247,30,"RangeError"],[259,32,247,40],[259,33,247,41],[259,91,247,99],[259,92,247,100],[260,10,248,16],[261,10,249,16,"token"],[261,15,249,21],[261,16,249,22,"options"],[261,23,249,29],[261,24,249,30],[261,25,249,31],[261,26,249,32],[261,27,249,33,"replace"],[261,34,249,40],[261,35,249,41,"INTEGER_WIDTH_REGEX"],[261,54,249,60],[261,56,249,62],[261,66,249,72,"_"],[261,67,249,73],[261,69,249,75,"g1"],[261,71,249,77],[261,73,249,79,"g2"],[261,75,249,81],[261,77,249,83,"g3"],[261,79,249,85],[261,81,249,87,"g4"],[261,83,249,89],[261,85,249,91,"g5"],[261,87,249,93],[261,89,249,95],[262,12,250,20],[262,16,250,24,"g1"],[262,18,250,26],[262,20,250,28],[263,14,251,24,"result"],[263,20,251,30],[263,21,251,31,"minimumIntegerDigits"],[263,41,251,51],[263,44,251,54,"g2"],[263,46,251,56],[263,47,251,57,"length"],[263,53,251,63],[264,12,252,20],[264,13,252,21],[264,19,253,25],[264,23,253,29,"g3"],[264,25,253,31],[264,29,253,35,"g4"],[264,31,253,37],[264,33,253,39],[265,14,254,24],[265,20,254,30],[265,24,254,34,"Error"],[265,29,254,39],[265,30,254,40],[265,82,254,92],[265,83,254,93],[266,12,255,20],[266,13,255,21],[266,19,256,25],[266,23,256,29,"g5"],[266,25,256,31],[266,27,256,33],[267,14,257,24],[267,20,257,30],[267,24,257,34,"Error"],[267,29,257,39],[267,30,257,40],[267,80,257,90],[267,81,257,91],[268,12,258,20],[269,12,259,20],[269,19,259,27],[269,21,259,29],[270,10,260,16],[270,11,260,17],[270,12,260,18],[271,10,261,16],[272,6,262,8],[273,6,263,8],[274,6,264,8],[274,10,264,12,"CONCISE_INTEGER_WIDTH_REGEX"],[274,37,264,39],[274,38,264,40,"test"],[274,42,264,44],[274,43,264,45,"token"],[274,48,264,50],[274,49,264,51,"stem"],[274,53,264,55],[274,54,264,56],[274,56,264,58],[275,8,265,12,"result"],[275,14,265,18],[275,15,265,19,"minimumIntegerDigits"],[275,35,265,39],[275,38,265,42,"token"],[275,43,265,47],[275,44,265,48,"stem"],[275,48,265,52],[275,49,265,53,"length"],[275,55,265,59],[276,8,266,12],[277,6,267,8],[278,6,268,8],[278,10,268,12,"FRACTION_PRECISION_REGEX"],[278,34,268,36],[278,35,268,37,"test"],[278,39,268,41],[278,40,268,42,"token"],[278,45,268,47],[278,46,268,48,"stem"],[278,50,268,52],[278,51,268,53],[278,53,268,55],[279,8,269,12],[280,8,270,12],[281,8,271,12],[282,8,272,12],[282,12,272,16,"token"],[282,17,272,21],[282,18,272,22,"options"],[282,25,272,29],[282,26,272,30,"length"],[282,32,272,36],[282,35,272,39],[282,36,272,40],[282,38,272,42],[283,10,273,16],[283,16,273,22],[283,20,273,26,"RangeError"],[283,30,273,36],[283,31,273,37],[283,94,273,100],[283,95,273,101],[284,8,274,12],[285,8,275,12,"token"],[285,13,275,17],[285,14,275,18,"stem"],[285,18,275,22],[285,19,275,23,"replace"],[285,26,275,30],[285,27,275,31,"FRACTION_PRECISION_REGEX"],[285,51,275,55],[285,53,275,57],[285,63,275,67,"_"],[285,64,275,68],[285,66,275,70,"g1"],[285,68,275,72],[285,70,275,74,"g2"],[285,72,275,76],[285,74,275,78,"g3"],[285,76,275,80],[285,78,275,82,"g4"],[285,80,275,84],[285,82,275,86,"g5"],[285,84,275,88],[285,86,275,90],[286,10,276,16],[287,10,277,16],[287,14,277,20,"g2"],[287,16,277,22],[287,21,277,27],[287,24,277,30],[287,26,277,32],[288,12,278,20,"result"],[288,18,278,26],[288,19,278,27,"minimumFractionDigits"],[288,40,278,48],[288,43,278,51,"g1"],[288,45,278,53],[288,46,278,54,"length"],[288,52,278,60],[289,10,279,16],[290,10,280,16],[291,10,280,16],[291,15,281,21],[291,19,281,25,"g3"],[291,21,281,27],[291,25,281,31,"g3"],[291,27,281,33],[291,28,281,34],[291,29,281,35],[291,30,281,36],[291,35,281,41],[291,38,281,44],[291,40,281,46],[292,12,282,20,"result"],[292,18,282,26],[292,19,282,27,"maximumFractionDigits"],[292,40,282,48],[292,43,282,51,"g3"],[292,45,282,53],[292,46,282,54,"length"],[292,52,282,60],[293,10,283,16],[294,10,284,16],[295,10,284,16],[295,15,285,21],[295,19,285,25,"g4"],[295,21,285,27],[295,25,285,31,"g5"],[295,27,285,33],[295,29,285,35],[296,12,286,20,"result"],[296,18,286,26],[296,19,286,27,"minimumFractionDigits"],[296,40,286,48],[296,43,286,51,"g4"],[296,45,286,53],[296,46,286,54,"length"],[296,52,286,60],[297,12,287,20,"result"],[297,18,287,26],[297,19,287,27,"maximumFractionDigits"],[297,40,287,48],[297,43,287,51,"g4"],[297,45,287,53],[297,46,287,54,"length"],[297,52,287,60],[297,55,287,63,"g5"],[297,57,287,65],[297,58,287,66,"length"],[297,64,287,72],[298,10,288,16],[298,11,288,17],[298,17,289,21],[299,12,290,20,"result"],[299,18,290,26],[299,19,290,27,"minimumFractionDigits"],[299,40,290,48],[299,43,290,51,"g1"],[299,45,290,53],[299,46,290,54,"length"],[299,52,290,60],[300,12,291,20,"result"],[300,18,291,26],[300,19,291,27,"maximumFractionDigits"],[300,40,291,48],[300,43,291,51,"g1"],[300,45,291,53],[300,46,291,54,"length"],[300,52,291,60],[301,10,292,16],[302,10,293,16],[302,17,293,23],[302,19,293,25],[303,8,294,12],[303,9,294,13],[303,10,294,14],[304,8,295,12],[304,12,295,16,"opt"],[304,15,295,19],[304,18,295,22,"token"],[304,23,295,27],[304,24,295,28,"options"],[304,31,295,35],[304,32,295,36],[304,33,295,37],[304,34,295,38],[305,8,296,12],[306,8,297,12],[306,12,297,16,"opt"],[306,15,297,19],[306,20,297,24],[306,23,297,27],[306,25,297,29],[307,10,298,16,"result"],[307,16,298,22],[307,19,298,25,"tslib_1"],[307,26,298,32],[307,27,298,33,"__assign"],[307,35,298,41],[307,36,298,42,"tslib_1"],[307,43,298,49],[307,44,298,50,"__assign"],[307,52,298,58],[307,53,298,59],[307,54,298,60],[307,55,298,61],[307,57,298,63,"result"],[307,63,298,69],[307,64,298,70],[307,66,298,72],[308,12,298,74,"trailingZeroDisplay"],[308,31,298,93],[308,33,298,95],[309,10,298,112],[309,11,298,113],[309,12,298,114],[310,8,299,12],[310,9,299,13],[310,15,300,17],[310,19,300,21,"opt"],[310,22,300,24],[310,24,300,26],[311,10,301,16,"result"],[311,16,301,22],[311,19,301,25,"tslib_1"],[311,26,301,32],[311,27,301,33,"__assign"],[311,35,301,41],[311,36,301,42,"tslib_1"],[311,43,301,49],[311,44,301,50,"__assign"],[311,52,301,58],[311,53,301,59],[311,54,301,60],[311,55,301,61],[311,57,301,63,"result"],[311,63,301,69],[311,64,301,70],[311,66,301,72,"parseSignificantPrecision"],[311,91,301,97],[311,92,301,98,"opt"],[311,95,301,101],[311,96,301,102],[311,97,301,103],[312,8,302,12],[313,8,303,12],[314,6,304,8],[315,6,305,8],[316,6,306,8],[316,10,306,12,"SIGNIFICANT_PRECISION_REGEX"],[316,37,306,39],[316,38,306,40,"test"],[316,42,306,44],[316,43,306,45,"token"],[316,48,306,50],[316,49,306,51,"stem"],[316,53,306,55],[316,54,306,56],[316,56,306,58],[317,8,307,12,"result"],[317,14,307,18],[317,17,307,21,"tslib_1"],[317,24,307,28],[317,25,307,29,"__assign"],[317,33,307,37],[317,34,307,38,"tslib_1"],[317,41,307,45],[317,42,307,46,"__assign"],[317,50,307,54],[317,51,307,55],[317,52,307,56],[317,53,307,57],[317,55,307,59,"result"],[317,61,307,65],[317,62,307,66],[317,64,307,68,"parseSignificantPrecision"],[317,89,307,93],[317,90,307,94,"token"],[317,95,307,99],[317,96,307,100,"stem"],[317,100,307,104],[317,101,307,105],[317,102,307,106],[318,8,308,12],[319,6,309,8],[320,6,310,8],[320,10,310,12,"signOpts"],[320,18,310,20],[320,21,310,23,"parseSign"],[320,30,310,32],[320,31,310,33,"token"],[320,36,310,38],[320,37,310,39,"stem"],[320,41,310,43],[320,42,310,44],[321,6,311,8],[321,10,311,12,"signOpts"],[321,18,311,20],[321,20,311,22],[322,8,312,12,"result"],[322,14,312,18],[322,17,312,21,"tslib_1"],[322,24,312,28],[322,25,312,29,"__assign"],[322,33,312,37],[322,34,312,38,"tslib_1"],[322,41,312,45],[322,42,312,46,"__assign"],[322,50,312,54],[322,51,312,55],[322,52,312,56],[322,53,312,57],[322,55,312,59,"result"],[322,61,312,65],[322,62,312,66],[322,64,312,68,"signOpts"],[322,72,312,76],[322,73,312,77],[323,6,313,8],[324,6,314,8],[324,10,314,12,"conciseScientificAndEngineeringOpts"],[324,45,314,47],[324,48,314,50,"parseConciseScientificAndEngineeringStem"],[324,88,314,90],[324,89,314,91,"token"],[324,94,314,96],[324,95,314,97,"stem"],[324,99,314,101],[324,100,314,102],[325,6,315,8],[325,10,315,12,"conciseScientificAndEngineeringOpts"],[325,45,315,47],[325,47,315,49],[326,8,316,12,"result"],[326,14,316,18],[326,17,316,21,"tslib_1"],[326,24,316,28],[326,25,316,29,"__assign"],[326,33,316,37],[326,34,316,38,"tslib_1"],[326,41,316,45],[326,42,316,46,"__assign"],[326,50,316,54],[326,51,316,55],[326,52,316,56],[326,53,316,57],[326,55,316,59,"result"],[326,61,316,65],[326,62,316,66],[326,64,316,68,"conciseScientificAndEngineeringOpts"],[326,99,316,103],[326,100,316,104],[327,6,317,8],[328,4,318,4],[329,4,319,4],[329,11,319,11,"result"],[329,17,319,17],[330,2,320,0],[331,0,320,1],[331,3]],"functionMap":{"names":["<global>","parseNumberSkeletonFromString","skeleton.split.filter$argument_0","icuUnitToEcma","parseSignificantPrecision","str.replace$argument_1","parseSign","parseConciseScientificAndEngineeringStem","parseNotationOptions","parseNumberSkeleton","token.options.reduce$argument_0","token.options._.replace$argument_1","token.stem.replace$argument_1"],"mappings":"AAA;ACM;gBCO,qCD;CDkB;AGC;CHE;AIK;6CCQ;KDqB;CJE;AMC;CNuC;AOC;CP+B;AQC;CRO;ASI;2ICyC,wGD;4ICG,wGD;8DEkD;iBFW;yDGe;aHmB;CT0B"},"hasCjsExports":true},"type":"js/module"}]}