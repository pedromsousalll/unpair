{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parseDateTimeSkeleton = parseDateTimeSkeleton;\n  /**\n   * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n   * with some tweaks\n   */\n  var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n  /**\n   * Parse Date time skeleton into Intl.DateTimeFormatOptions\n   * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   * @public\n   * @param skeleton skeleton string\n   */\n  function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n      var len = match.length;\n      switch (match[0]) {\n        // Era\n        case 'G':\n          result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n          break;\n        // Year\n        case 'y':\n          result.year = len === 2 ? '2-digit' : 'numeric';\n          break;\n        case 'Y':\n        case 'u':\n        case 'U':\n        case 'r':\n          throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n        // Quarter\n        case 'q':\n        case 'Q':\n          throw new RangeError('`q/Q` (quarter) patterns are not supported');\n        // Month\n        case 'M':\n        case 'L':\n          result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n          break;\n        // Week\n        case 'w':\n        case 'W':\n          throw new RangeError('`w/W` (week) patterns are not supported');\n        case 'd':\n          result.day = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'D':\n        case 'F':\n        case 'g':\n          throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n        // Weekday\n        case 'E':\n          result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n          break;\n        case 'e':\n          if (len < 4) {\n            throw new RangeError('`e..eee` (weekday) patterns are not supported');\n          }\n          result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n          break;\n        case 'c':\n          if (len < 4) {\n            throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n          }\n          result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n          break;\n        // Period\n        case 'a':\n          // AM, PM\n          result.hour12 = true;\n          break;\n        case 'b': // am, pm, noon, midnight\n        case 'B':\n          // flexible day periods\n          throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n        // Hour\n        case 'h':\n          result.hourCycle = 'h12';\n          result.hour = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'H':\n          result.hourCycle = 'h23';\n          result.hour = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'K':\n          result.hourCycle = 'h11';\n          result.hour = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'k':\n          result.hourCycle = 'h24';\n          result.hour = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'j':\n        case 'J':\n        case 'C':\n          throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n        // Minute\n        case 'm':\n          result.minute = ['numeric', '2-digit'][len - 1];\n          break;\n        // Second\n        case 's':\n          result.second = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'S':\n        case 'A':\n          throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n        // Zone\n        case 'z':\n          // 1..3, 4: specific non-location format\n          result.timeZoneName = len < 4 ? 'short' : 'long';\n          break;\n        case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n        case 'O': // 1, 4: milliseconds in day short, long\n        case 'v': // 1, 4: generic non-location format\n        case 'V': // 1, 2, 3, 4: time zone ID or city\n        case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n        case 'x':\n          // 1, 2, 3, 4: The ISO8601 varios formats\n          throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n      }\n      return '';\n    });\n    return result;\n  }\n});","lineCount":133,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"parseDateTimeSkeleton"],[7,31,3,29],[7,34,3,32,"parseDateTimeSkeleton"],[7,55,3,53],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,2,9,0],[13,6,9,4,"DATE_TIME_REGEX"],[13,21,9,19],[13,24,9,22],[13,195,9,193],[14,2,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,16,0],[20,11,16,9,"parseDateTimeSkeleton"],[20,32,16,30,"parseDateTimeSkeleton"],[20,33,16,31,"skeleton"],[20,41,16,39],[20,43,16,41],[21,4,17,4],[21,8,17,8,"result"],[21,14,17,14],[21,17,17,17],[21,18,17,18],[21,19,17,19],[22,4,18,4,"skeleton"],[22,12,18,12],[22,13,18,13,"replace"],[22,20,18,20],[22,21,18,21,"DATE_TIME_REGEX"],[22,36,18,36],[22,38,18,38],[22,48,18,48,"match"],[22,53,18,53],[22,55,18,55],[23,6,19,8],[23,10,19,12,"len"],[23,13,19,15],[23,16,19,18,"match"],[23,21,19,23],[23,22,19,24,"length"],[23,28,19,30],[24,6,20,8],[24,14,20,16,"match"],[24,19,20,21],[24,20,20,22],[24,21,20,23],[24,22,20,24],[25,8,21,12],[26,8,22,12],[26,13,22,17],[26,16,22,20],[27,10,23,16,"result"],[27,16,23,22],[27,17,23,23,"era"],[27,20,23,26],[27,23,23,29,"len"],[27,26,23,32],[27,31,23,37],[27,32,23,38],[27,35,23,41],[27,41,23,47],[27,44,23,50,"len"],[27,47,23,53],[27,52,23,58],[27,53,23,59],[27,56,23,62],[27,64,23,70],[27,67,23,73],[27,74,23,80],[28,10,24,16],[29,8,25,12],[30,8,26,12],[30,13,26,17],[30,16,26,20],[31,10,27,16,"result"],[31,16,27,22],[31,17,27,23,"year"],[31,21,27,27],[31,24,27,30,"len"],[31,27,27,33],[31,32,27,38],[31,33,27,39],[31,36,27,42],[31,45,27,51],[31,48,27,54],[31,57,27,63],[32,10,28,16],[33,8,29,12],[33,13,29,17],[33,16,29,20],[34,8,30,12],[34,13,30,17],[34,16,30,20],[35,8,31,12],[35,13,31,17],[35,16,31,20],[36,8,32,12],[36,13,32,17],[36,16,32,20],[37,10,33,16],[37,16,33,22],[37,20,33,26,"RangeError"],[37,30,33,36],[37,31,33,37],[37,93,33,99],[37,94,33,100],[38,8,34,12],[39,8,35,12],[39,13,35,17],[39,16,35,20],[40,8,36,12],[40,13,36,17],[40,16,36,20],[41,10,37,16],[41,16,37,22],[41,20,37,26,"RangeError"],[41,30,37,36],[41,31,37,37],[41,75,37,81],[41,76,37,82],[42,8,38,12],[43,8,39,12],[43,13,39,17],[43,16,39,20],[44,8,40,12],[44,13,40,17],[44,16,40,20],[45,10,41,16,"result"],[45,16,41,22],[45,17,41,23,"month"],[45,22,41,28],[45,25,41,31],[45,26,41,32],[45,35,41,41],[45,37,41,43],[45,46,41,52],[45,48,41,54],[45,55,41,61],[45,57,41,63],[45,63,41,69],[45,65,41,71],[45,73,41,79],[45,74,41,80],[45,75,41,81,"len"],[45,78,41,84],[45,81,41,87],[45,82,41,88],[45,83,41,89],[46,10,42,16],[47,8,43,12],[48,8,44,12],[48,13,44,17],[48,16,44,20],[49,8,45,12],[49,13,45,17],[49,16,45,20],[50,10,46,16],[50,16,46,22],[50,20,46,26,"RangeError"],[50,30,46,36],[50,31,46,37],[50,72,46,78],[50,73,46,79],[51,8,47,12],[51,13,47,17],[51,16,47,20],[52,10,48,16,"result"],[52,16,48,22],[52,17,48,23,"day"],[52,20,48,26],[52,23,48,29],[52,24,48,30],[52,33,48,39],[52,35,48,41],[52,44,48,50],[52,45,48,51],[52,46,48,52,"len"],[52,49,48,55],[52,52,48,58],[52,53,48,59],[52,54,48,60],[53,10,49,16],[54,8,50,12],[54,13,50,17],[54,16,50,20],[55,8,51,12],[55,13,51,17],[55,16,51,20],[56,8,52,12],[56,13,52,17],[56,16,52,20],[57,10,53,16],[57,16,53,22],[57,20,53,26,"RangeError"],[57,30,53,36],[57,31,53,37],[57,90,53,96],[57,91,53,97],[58,8,54,12],[59,8,55,12],[59,13,55,17],[59,16,55,20],[60,10,56,16,"result"],[60,16,56,22],[60,17,56,23,"weekday"],[60,24,56,30],[60,27,56,33,"len"],[60,30,56,36],[60,35,56,41],[60,36,56,42],[60,39,56,45],[60,45,56,51],[60,48,56,54,"len"],[60,51,56,57],[60,56,56,62],[60,57,56,63],[60,60,56,66],[60,68,56,74],[60,71,56,77],[60,78,56,84],[61,10,57,16],[62,8,58,12],[62,13,58,17],[62,16,58,20],[63,10,59,16],[63,14,59,20,"len"],[63,17,59,23],[63,20,59,26],[63,21,59,27],[63,23,59,29],[64,12,60,20],[64,18,60,26],[64,22,60,30,"RangeError"],[64,32,60,40],[64,33,60,41],[64,80,60,88],[64,81,60,89],[65,10,61,16],[66,10,62,16,"result"],[66,16,62,22],[66,17,62,23,"weekday"],[66,24,62,30],[66,27,62,33],[66,28,62,34],[66,35,62,41],[66,37,62,43],[66,43,62,49],[66,45,62,51],[66,53,62,59],[66,55,62,61],[66,62,62,68],[66,63,62,69],[66,64,62,70,"len"],[66,67,62,73],[66,70,62,76],[66,71,62,77],[66,72,62,78],[67,10,63,16],[68,8,64,12],[68,13,64,17],[68,16,64,20],[69,10,65,16],[69,14,65,20,"len"],[69,17,65,23],[69,20,65,26],[69,21,65,27],[69,23,65,29],[70,12,66,20],[70,18,66,26],[70,22,66,30,"RangeError"],[70,32,66,40],[70,33,66,41],[70,80,66,88],[70,81,66,89],[71,10,67,16],[72,10,68,16,"result"],[72,16,68,22],[72,17,68,23,"weekday"],[72,24,68,30],[72,27,68,33],[72,28,68,34],[72,35,68,41],[72,37,68,43],[72,43,68,49],[72,45,68,51],[72,53,68,59],[72,55,68,61],[72,62,68,68],[72,63,68,69],[72,64,68,70,"len"],[72,67,68,73],[72,70,68,76],[72,71,68,77],[72,72,68,78],[73,10,69,16],[74,8,70,12],[75,8,71,12],[75,13,71,17],[75,16,71,20],[76,10,71,22],[77,10,72,16,"result"],[77,16,72,22],[77,17,72,23,"hour12"],[77,23,72,29],[77,26,72,32],[77,30,72,36],[78,10,73,16],[79,8,74,12],[79,13,74,17],[79,16,74,20],[79,17,74,21],[79,18,74,22],[80,8,75,12],[80,13,75,17],[80,16,75,20],[81,10,75,22],[82,10,76,16],[82,16,76,22],[82,20,76,26,"RangeError"],[82,30,76,36],[82,31,76,37],[82,91,76,97],[82,92,76,98],[83,8,77,12],[84,8,78,12],[84,13,78,17],[84,16,78,20],[85,10,79,16,"result"],[85,16,79,22],[85,17,79,23,"hourCycle"],[85,26,79,32],[85,29,79,35],[85,34,79,40],[86,10,80,16,"result"],[86,16,80,22],[86,17,80,23,"hour"],[86,21,80,27],[86,24,80,30],[86,25,80,31],[86,34,80,40],[86,36,80,42],[86,45,80,51],[86,46,80,52],[86,47,80,53,"len"],[86,50,80,56],[86,53,80,59],[86,54,80,60],[86,55,80,61],[87,10,81,16],[88,8,82,12],[88,13,82,17],[88,16,82,20],[89,10,83,16,"result"],[89,16,83,22],[89,17,83,23,"hourCycle"],[89,26,83,32],[89,29,83,35],[89,34,83,40],[90,10,84,16,"result"],[90,16,84,22],[90,17,84,23,"hour"],[90,21,84,27],[90,24,84,30],[90,25,84,31],[90,34,84,40],[90,36,84,42],[90,45,84,51],[90,46,84,52],[90,47,84,53,"len"],[90,50,84,56],[90,53,84,59],[90,54,84,60],[90,55,84,61],[91,10,85,16],[92,8,86,12],[92,13,86,17],[92,16,86,20],[93,10,87,16,"result"],[93,16,87,22],[93,17,87,23,"hourCycle"],[93,26,87,32],[93,29,87,35],[93,34,87,40],[94,10,88,16,"result"],[94,16,88,22],[94,17,88,23,"hour"],[94,21,88,27],[94,24,88,30],[94,25,88,31],[94,34,88,40],[94,36,88,42],[94,45,88,51],[94,46,88,52],[94,47,88,53,"len"],[94,50,88,56],[94,53,88,59],[94,54,88,60],[94,55,88,61],[95,10,89,16],[96,8,90,12],[96,13,90,17],[96,16,90,20],[97,10,91,16,"result"],[97,16,91,22],[97,17,91,23,"hourCycle"],[97,26,91,32],[97,29,91,35],[97,34,91,40],[98,10,92,16,"result"],[98,16,92,22],[98,17,92,23,"hour"],[98,21,92,27],[98,24,92,30],[98,25,92,31],[98,34,92,40],[98,36,92,42],[98,45,92,51],[98,46,92,52],[98,47,92,53,"len"],[98,50,92,56],[98,53,92,59],[98,54,92,60],[98,55,92,61],[99,10,93,16],[100,8,94,12],[100,13,94,17],[100,16,94,20],[101,8,95,12],[101,13,95,17],[101,16,95,20],[102,8,96,12],[102,13,96,17],[102,16,96,20],[103,10,97,16],[103,16,97,22],[103,20,97,26,"RangeError"],[103,30,97,36],[103,31,97,37],[103,97,97,103],[103,98,97,104],[104,8,98,12],[105,8,99,12],[105,13,99,17],[105,16,99,20],[106,10,100,16,"result"],[106,16,100,22],[106,17,100,23,"minute"],[106,23,100,29],[106,26,100,32],[106,27,100,33],[106,36,100,42],[106,38,100,44],[106,47,100,53],[106,48,100,54],[106,49,100,55,"len"],[106,52,100,58],[106,55,100,61],[106,56,100,62],[106,57,100,63],[107,10,101,16],[108,8,102,12],[109,8,103,12],[109,13,103,17],[109,16,103,20],[110,10,104,16,"result"],[110,16,104,22],[110,17,104,23,"second"],[110,23,104,29],[110,26,104,32],[110,27,104,33],[110,36,104,42],[110,38,104,44],[110,47,104,53],[110,48,104,54],[110,49,104,55,"len"],[110,52,104,58],[110,55,104,61],[110,56,104,62],[110,57,104,63],[111,10,105,16],[112,8,106,12],[112,13,106,17],[112,16,106,20],[113,8,107,12],[113,13,107,17],[113,16,107,20],[114,10,108,16],[114,16,108,22],[114,20,108,26,"RangeError"],[114,30,108,36],[114,31,108,37],[114,91,108,97],[114,92,108,98],[115,8,109,12],[116,8,110,12],[116,13,110,17],[116,16,110,20],[117,10,110,22],[118,10,111,16,"result"],[118,16,111,22],[118,17,111,23,"timeZoneName"],[118,29,111,35],[118,32,111,38,"len"],[118,35,111,41],[118,38,111,44],[118,39,111,45],[118,42,111,48],[118,49,111,55],[118,52,111,58],[118,58,111,64],[119,10,112,16],[120,8,113,12],[120,13,113,17],[120,16,113,20],[120,17,113,21],[120,18,113,22],[121,8,114,12],[121,13,114,17],[121,16,114,20],[121,17,114,21],[121,18,114,22],[122,8,115,12],[122,13,115,17],[122,16,115,20],[122,17,115,21],[122,18,115,22],[123,8,116,12],[123,13,116,17],[123,16,116,20],[123,17,116,21],[123,18,116,22],[124,8,117,12],[124,13,117,17],[124,16,117,20],[124,17,117,21],[124,18,117,22],[125,8,118,12],[125,13,118,17],[125,16,118,20],[126,10,118,22],[127,10,119,16],[127,16,119,22],[127,20,119,26,"RangeError"],[127,30,119,36],[127,31,119,37],[127,101,119,107],[127,102,119,108],[128,6,120,8],[129,6,121,8],[129,13,121,15],[129,15,121,17],[130,4,122,4],[130,5,122,5],[130,6,122,6],[131,4,123,4],[131,11,123,11,"result"],[131,17,123,17],[132,2,124,0],[133,0,124,1],[133,3]],"functionMap":{"names":["<global>","parseDateTimeSkeleton","skeleton.replace$argument_1"],"mappings":"AAA;ACe;sCCE;KDwG;CDE"},"hasCjsExports":true},"type":"js/module"}]}