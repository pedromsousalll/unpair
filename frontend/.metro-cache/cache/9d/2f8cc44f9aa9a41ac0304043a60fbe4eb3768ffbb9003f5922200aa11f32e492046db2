{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.parseDateTimeSkeleton = parseDateTimeSkeleton;\n  /**\n   * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n   * with some tweaks\n   */\n  var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n  /**\n   * Parse Date time skeleton into Intl.DateTimeFormatOptions\n   * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   * @public\n   * @param skeleton skeleton string\n   */\n  function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n      var len = match.length;\n      switch (match[0]) {\n        // Era\n        case 'G':\n          result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n          break;\n        // Year\n        case 'y':\n          result.year = len === 2 ? '2-digit' : 'numeric';\n          break;\n        case 'Y':\n        case 'u':\n        case 'U':\n        case 'r':\n          throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n        // Quarter\n        case 'q':\n        case 'Q':\n          throw new RangeError('`q/Q` (quarter) patterns are not supported');\n        // Month\n        case 'M':\n        case 'L':\n          result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n          break;\n        // Week\n        case 'w':\n        case 'W':\n          throw new RangeError('`w/W` (week) patterns are not supported');\n        case 'd':\n          result.day = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'D':\n        case 'F':\n        case 'g':\n          throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n        // Weekday\n        case 'E':\n          result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n          break;\n        case 'e':\n          if (len < 4) {\n            throw new RangeError('`e..eee` (weekday) patterns are not supported');\n          }\n          result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n          break;\n        case 'c':\n          if (len < 4) {\n            throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n          }\n          result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n          break;\n        // Period\n        case 'a':\n          // AM, PM\n          result.hour12 = true;\n          break;\n        case 'b': // am, pm, noon, midnight\n        case 'B':\n          // flexible day periods\n          throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n        // Hour\n        case 'h':\n          result.hourCycle = 'h12';\n          result.hour = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'H':\n          result.hourCycle = 'h23';\n          result.hour = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'K':\n          result.hourCycle = 'h11';\n          result.hour = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'k':\n          result.hourCycle = 'h24';\n          result.hour = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'j':\n        case 'J':\n        case 'C':\n          throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n        // Minute\n        case 'm':\n          result.minute = ['numeric', '2-digit'][len - 1];\n          break;\n        // Second\n        case 's':\n          result.second = ['numeric', '2-digit'][len - 1];\n          break;\n        case 'S':\n        case 'A':\n          throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n        // Zone\n        case 'z':\n          // 1..3, 4: specific non-location format\n          result.timeZoneName = len < 4 ? 'short' : 'long';\n          break;\n        case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n        case 'O': // 1, 4: milliseconds in day short, long\n        case 'v': // 1, 4: generic non-location format\n        case 'V': // 1, 2, 3, 4: time zone ID or city\n        case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n        case 'x':\n          // 1, 2, 3, 4: The ISO8601 varios formats\n          throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n      }\n      return '';\n    });\n    return result;\n  }\n});","lineCount":133,"map":[[7,2,13,0,"exports"],[7,9,13,0],[7,10,13,0,"parseDateTimeSkeleton"],[7,31,13,0],[7,34,13,0,"parseDateTimeSkeleton"],[7,55,13,0],[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,2,6,0],[13,6,6,4,"DATE_TIME_REGEX"],[13,21,6,19],[13,24,6,22],[13,195,6,193],[14,2,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,2,13,7],[20,11,13,16,"parseDateTimeSkeleton"],[20,32,13,37,"parseDateTimeSkeleton"],[20,33,13,38,"skeleton"],[20,41,13,46],[20,43,13,48],[21,4,14,4],[21,8,14,8,"result"],[21,14,14,14],[21,17,14,17],[21,18,14,18],[21,19,14,19],[22,4,15,4,"skeleton"],[22,12,15,12],[22,13,15,13,"replace"],[22,20,15,20],[22,21,15,21,"DATE_TIME_REGEX"],[22,36,15,36],[22,38,15,38],[22,48,15,48,"match"],[22,53,15,53],[22,55,15,55],[23,6,16,8],[23,10,16,12,"len"],[23,13,16,15],[23,16,16,18,"match"],[23,21,16,23],[23,22,16,24,"length"],[23,28,16,30],[24,6,17,8],[24,14,17,16,"match"],[24,19,17,21],[24,20,17,22],[24,21,17,23],[24,22,17,24],[25,8,18,12],[26,8,19,12],[26,13,19,17],[26,16,19,20],[27,10,20,16,"result"],[27,16,20,22],[27,17,20,23,"era"],[27,20,20,26],[27,23,20,29,"len"],[27,26,20,32],[27,31,20,37],[27,32,20,38],[27,35,20,41],[27,41,20,47],[27,44,20,50,"len"],[27,47,20,53],[27,52,20,58],[27,53,20,59],[27,56,20,62],[27,64,20,70],[27,67,20,73],[27,74,20,80],[28,10,21,16],[29,8,22,12],[30,8,23,12],[30,13,23,17],[30,16,23,20],[31,10,24,16,"result"],[31,16,24,22],[31,17,24,23,"year"],[31,21,24,27],[31,24,24,30,"len"],[31,27,24,33],[31,32,24,38],[31,33,24,39],[31,36,24,42],[31,45,24,51],[31,48,24,54],[31,57,24,63],[32,10,25,16],[33,8,26,12],[33,13,26,17],[33,16,26,20],[34,8,27,12],[34,13,27,17],[34,16,27,20],[35,8,28,12],[35,13,28,17],[35,16,28,20],[36,8,29,12],[36,13,29,17],[36,16,29,20],[37,10,30,16],[37,16,30,22],[37,20,30,26,"RangeError"],[37,30,30,36],[37,31,30,37],[37,93,30,99],[37,94,30,100],[38,8,31,12],[39,8,32,12],[39,13,32,17],[39,16,32,20],[40,8,33,12],[40,13,33,17],[40,16,33,20],[41,10,34,16],[41,16,34,22],[41,20,34,26,"RangeError"],[41,30,34,36],[41,31,34,37],[41,75,34,81],[41,76,34,82],[42,8,35,12],[43,8,36,12],[43,13,36,17],[43,16,36,20],[44,8,37,12],[44,13,37,17],[44,16,37,20],[45,10,38,16,"result"],[45,16,38,22],[45,17,38,23,"month"],[45,22,38,28],[45,25,38,31],[45,26,38,32],[45,35,38,41],[45,37,38,43],[45,46,38,52],[45,48,38,54],[45,55,38,61],[45,57,38,63],[45,63,38,69],[45,65,38,71],[45,73,38,79],[45,74,38,80],[45,75,38,81,"len"],[45,78,38,84],[45,81,38,87],[45,82,38,88],[45,83,38,89],[46,10,39,16],[47,8,40,12],[48,8,41,12],[48,13,41,17],[48,16,41,20],[49,8,42,12],[49,13,42,17],[49,16,42,20],[50,10,43,16],[50,16,43,22],[50,20,43,26,"RangeError"],[50,30,43,36],[50,31,43,37],[50,72,43,78],[50,73,43,79],[51,8,44,12],[51,13,44,17],[51,16,44,20],[52,10,45,16,"result"],[52,16,45,22],[52,17,45,23,"day"],[52,20,45,26],[52,23,45,29],[52,24,45,30],[52,33,45,39],[52,35,45,41],[52,44,45,50],[52,45,45,51],[52,46,45,52,"len"],[52,49,45,55],[52,52,45,58],[52,53,45,59],[52,54,45,60],[53,10,46,16],[54,8,47,12],[54,13,47,17],[54,16,47,20],[55,8,48,12],[55,13,48,17],[55,16,48,20],[56,8,49,12],[56,13,49,17],[56,16,49,20],[57,10,50,16],[57,16,50,22],[57,20,50,26,"RangeError"],[57,30,50,36],[57,31,50,37],[57,90,50,96],[57,91,50,97],[58,8,51,12],[59,8,52,12],[59,13,52,17],[59,16,52,20],[60,10,53,16,"result"],[60,16,53,22],[60,17,53,23,"weekday"],[60,24,53,30],[60,27,53,33,"len"],[60,30,53,36],[60,35,53,41],[60,36,53,42],[60,39,53,45],[60,45,53,51],[60,48,53,54,"len"],[60,51,53,57],[60,56,53,62],[60,57,53,63],[60,60,53,66],[60,68,53,74],[60,71,53,77],[60,78,53,84],[61,10,54,16],[62,8,55,12],[62,13,55,17],[62,16,55,20],[63,10,56,16],[63,14,56,20,"len"],[63,17,56,23],[63,20,56,26],[63,21,56,27],[63,23,56,29],[64,12,57,20],[64,18,57,26],[64,22,57,30,"RangeError"],[64,32,57,40],[64,33,57,41],[64,80,57,88],[64,81,57,89],[65,10,58,16],[66,10,59,16,"result"],[66,16,59,22],[66,17,59,23,"weekday"],[66,24,59,30],[66,27,59,33],[66,28,59,34],[66,35,59,41],[66,37,59,43],[66,43,59,49],[66,45,59,51],[66,53,59,59],[66,55,59,61],[66,62,59,68],[66,63,59,69],[66,64,59,70,"len"],[66,67,59,73],[66,70,59,76],[66,71,59,77],[66,72,59,78],[67,10,60,16],[68,8,61,12],[68,13,61,17],[68,16,61,20],[69,10,62,16],[69,14,62,20,"len"],[69,17,62,23],[69,20,62,26],[69,21,62,27],[69,23,62,29],[70,12,63,20],[70,18,63,26],[70,22,63,30,"RangeError"],[70,32,63,40],[70,33,63,41],[70,80,63,88],[70,81,63,89],[71,10,64,16],[72,10,65,16,"result"],[72,16,65,22],[72,17,65,23,"weekday"],[72,24,65,30],[72,27,65,33],[72,28,65,34],[72,35,65,41],[72,37,65,43],[72,43,65,49],[72,45,65,51],[72,53,65,59],[72,55,65,61],[72,62,65,68],[72,63,65,69],[72,64,65,70,"len"],[72,67,65,73],[72,70,65,76],[72,71,65,77],[72,72,65,78],[73,10,66,16],[74,8,67,12],[75,8,68,12],[75,13,68,17],[75,16,68,20],[76,10,68,22],[77,10,69,16,"result"],[77,16,69,22],[77,17,69,23,"hour12"],[77,23,69,29],[77,26,69,32],[77,30,69,36],[78,10,70,16],[79,8,71,12],[79,13,71,17],[79,16,71,20],[79,17,71,21],[79,18,71,22],[80,8,72,12],[80,13,72,17],[80,16,72,20],[81,10,72,22],[82,10,73,16],[82,16,73,22],[82,20,73,26,"RangeError"],[82,30,73,36],[82,31,73,37],[82,91,73,97],[82,92,73,98],[83,8,74,12],[84,8,75,12],[84,13,75,17],[84,16,75,20],[85,10,76,16,"result"],[85,16,76,22],[85,17,76,23,"hourCycle"],[85,26,76,32],[85,29,76,35],[85,34,76,40],[86,10,77,16,"result"],[86,16,77,22],[86,17,77,23,"hour"],[86,21,77,27],[86,24,77,30],[86,25,77,31],[86,34,77,40],[86,36,77,42],[86,45,77,51],[86,46,77,52],[86,47,77,53,"len"],[86,50,77,56],[86,53,77,59],[86,54,77,60],[86,55,77,61],[87,10,78,16],[88,8,79,12],[88,13,79,17],[88,16,79,20],[89,10,80,16,"result"],[89,16,80,22],[89,17,80,23,"hourCycle"],[89,26,80,32],[89,29,80,35],[89,34,80,40],[90,10,81,16,"result"],[90,16,81,22],[90,17,81,23,"hour"],[90,21,81,27],[90,24,81,30],[90,25,81,31],[90,34,81,40],[90,36,81,42],[90,45,81,51],[90,46,81,52],[90,47,81,53,"len"],[90,50,81,56],[90,53,81,59],[90,54,81,60],[90,55,81,61],[91,10,82,16],[92,8,83,12],[92,13,83,17],[92,16,83,20],[93,10,84,16,"result"],[93,16,84,22],[93,17,84,23,"hourCycle"],[93,26,84,32],[93,29,84,35],[93,34,84,40],[94,10,85,16,"result"],[94,16,85,22],[94,17,85,23,"hour"],[94,21,85,27],[94,24,85,30],[94,25,85,31],[94,34,85,40],[94,36,85,42],[94,45,85,51],[94,46,85,52],[94,47,85,53,"len"],[94,50,85,56],[94,53,85,59],[94,54,85,60],[94,55,85,61],[95,10,86,16],[96,8,87,12],[96,13,87,17],[96,16,87,20],[97,10,88,16,"result"],[97,16,88,22],[97,17,88,23,"hourCycle"],[97,26,88,32],[97,29,88,35],[97,34,88,40],[98,10,89,16,"result"],[98,16,89,22],[98,17,89,23,"hour"],[98,21,89,27],[98,24,89,30],[98,25,89,31],[98,34,89,40],[98,36,89,42],[98,45,89,51],[98,46,89,52],[98,47,89,53,"len"],[98,50,89,56],[98,53,89,59],[98,54,89,60],[98,55,89,61],[99,10,90,16],[100,8,91,12],[100,13,91,17],[100,16,91,20],[101,8,92,12],[101,13,92,17],[101,16,92,20],[102,8,93,12],[102,13,93,17],[102,16,93,20],[103,10,94,16],[103,16,94,22],[103,20,94,26,"RangeError"],[103,30,94,36],[103,31,94,37],[103,97,94,103],[103,98,94,104],[104,8,95,12],[105,8,96,12],[105,13,96,17],[105,16,96,20],[106,10,97,16,"result"],[106,16,97,22],[106,17,97,23,"minute"],[106,23,97,29],[106,26,97,32],[106,27,97,33],[106,36,97,42],[106,38,97,44],[106,47,97,53],[106,48,97,54],[106,49,97,55,"len"],[106,52,97,58],[106,55,97,61],[106,56,97,62],[106,57,97,63],[107,10,98,16],[108,8,99,12],[109,8,100,12],[109,13,100,17],[109,16,100,20],[110,10,101,16,"result"],[110,16,101,22],[110,17,101,23,"second"],[110,23,101,29],[110,26,101,32],[110,27,101,33],[110,36,101,42],[110,38,101,44],[110,47,101,53],[110,48,101,54],[110,49,101,55,"len"],[110,52,101,58],[110,55,101,61],[110,56,101,62],[110,57,101,63],[111,10,102,16],[112,8,103,12],[112,13,103,17],[112,16,103,20],[113,8,104,12],[113,13,104,17],[113,16,104,20],[114,10,105,16],[114,16,105,22],[114,20,105,26,"RangeError"],[114,30,105,36],[114,31,105,37],[114,91,105,97],[114,92,105,98],[115,8,106,12],[116,8,107,12],[116,13,107,17],[116,16,107,20],[117,10,107,22],[118,10,108,16,"result"],[118,16,108,22],[118,17,108,23,"timeZoneName"],[118,29,108,35],[118,32,108,38,"len"],[118,35,108,41],[118,38,108,44],[118,39,108,45],[118,42,108,48],[118,49,108,55],[118,52,108,58],[118,58,108,64],[119,10,109,16],[120,8,110,12],[120,13,110,17],[120,16,110,20],[120,17,110,21],[120,18,110,22],[121,8,111,12],[121,13,111,17],[121,16,111,20],[121,17,111,21],[121,18,111,22],[122,8,112,12],[122,13,112,17],[122,16,112,20],[122,17,112,21],[122,18,112,22],[123,8,113,12],[123,13,113,17],[123,16,113,20],[123,17,113,21],[123,18,113,22],[124,8,114,12],[124,13,114,17],[124,16,114,20],[124,17,114,21],[124,18,114,22],[125,8,115,12],[125,13,115,17],[125,16,115,20],[126,10,115,22],[127,10,116,16],[127,16,116,22],[127,20,116,26,"RangeError"],[127,30,116,36],[127,31,116,37],[127,101,116,107],[127,102,116,108],[128,6,117,8],[129,6,118,8],[129,13,118,15],[129,15,118,17],[130,4,119,4],[130,5,119,5],[130,6,119,6],[131,4,120,4],[131,11,120,11,"result"],[131,17,120,17],[132,2,121,0],[133,0,121,1],[133,3]],"functionMap":{"names":["<global>","parseDateTimeSkeleton","skeleton.replace$argument_1"],"mappings":"AAA;OCY;sCCE;KDwG;CDE"},"hasCjsExports":false},"type":"js/module"}]}