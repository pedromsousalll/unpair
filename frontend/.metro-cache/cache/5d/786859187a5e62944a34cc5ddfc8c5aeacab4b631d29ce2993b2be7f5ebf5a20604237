{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"isStatic\", {\n    enumerable: true,\n    get: function () {\n      return $6818b1c4fc67028d$export$1994a077b98ee0d5;\n    }\n  });\n  Object.defineProperty(exports, \"parseFractionalUnit\", {\n    enumerable: true,\n    get: function () {\n      return $6818b1c4fc67028d$export$9078bad4c3934604;\n    }\n  });\n  Object.defineProperty(exports, \"parseStaticWidth\", {\n    enumerable: true,\n    get: function () {\n      return $6818b1c4fc67028d$export$7bbad27896f7ae9f;\n    }\n  });\n  Object.defineProperty(exports, \"getMaxWidth\", {\n    enumerable: true,\n    get: function () {\n      return $6818b1c4fc67028d$export$59185c62a7544aa0;\n    }\n  });\n  Object.defineProperty(exports, \"getMinWidth\", {\n    enumerable: true,\n    get: function () {\n      return $6818b1c4fc67028d$export$f556054ce4358701;\n    }\n  });\n  Object.defineProperty(exports, \"calculateColumnSizes\", {\n    enumerable: true,\n    get: function () {\n      return $6818b1c4fc67028d$export$55d50dc687385491;\n    }\n  });\n  /*\n   * Copyright 2022 Adobe. All rights reserved.\n   * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License. You may obtain a copy\n   * of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n   * OF ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   */\n  function $6818b1c4fc67028d$export$1994a077b98ee0d5(width) {\n    return width != null && (!isNaN(width) || String(width).match(/^(\\d+)(?=%$)/) !== null);\n  }\n  function $6818b1c4fc67028d$export$9078bad4c3934604(width) {\n    if (!width || typeof width === 'number') return 1;\n    let match = width.match(/^(.+)(?=fr$)/);\n    // if width is the incorrect format, just default it to a 1fr\n    if (!match) {\n      if (process.env.NODE_ENV !== 'production') console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, 'defaulting to \\'1fr\\'');\n      return 1;\n    }\n    return parseFloat(match[0]);\n  }\n  function $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, tableWidth) {\n    if (typeof width === 'string') {\n      let match = width.match(/^(\\d+)(?=%$)/);\n      if (!match) throw new Error('Only percentages or numbers are supported for static column widths');\n      return tableWidth * (parseFloat(match[0]) / 100);\n    }\n    return width;\n  }\n  function $6818b1c4fc67028d$export$59185c62a7544aa0(maxWidth, tableWidth) {\n    return maxWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;\n  }\n  function $6818b1c4fc67028d$export$f556054ce4358701(minWidth, tableWidth) {\n    return minWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(minWidth, tableWidth) : 0;\n  }\n  function $6818b1c4fc67028d$export$55d50dc687385491(availableWidth, columns, changedColumns, getDefaultWidth, getDefaultMinWidth) {\n    let hasNonFrozenItems = false;\n    let flexItems = columns.map((column, index) => {\n      var _changedColumns_get, _column_width, _ref, _ref1;\n      let width = changedColumns.get(column.key) != null ? (_changedColumns_get = changedColumns.get(column.key)) !== null && _changedColumns_get !== void 0 ? _changedColumns_get : '1fr' : (_ref1 = (_ref = (_column_width = column.width) !== null && _column_width !== void 0 ? _column_width : column.defaultWidth) !== null && _ref !== void 0 ? _ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(index)) !== null && _ref1 !== void 0 ? _ref1 : '1fr';\n      let frozen = false;\n      let baseSize = 0;\n      let flex = 0;\n      let targetMainSize = 0;\n      if ($6818b1c4fc67028d$export$1994a077b98ee0d5(width)) {\n        baseSize = $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, availableWidth);\n        frozen = true;\n      } else {\n        flex = $6818b1c4fc67028d$export$9078bad4c3934604(width);\n        if (flex <= 0) frozen = true;\n      }\n      var _column_minWidth, _ref2;\n      let min = $6818b1c4fc67028d$export$f556054ce4358701((_ref2 = (_column_minWidth = column.minWidth) !== null && _column_minWidth !== void 0 ? _column_minWidth : getDefaultMinWidth === null || getDefaultMinWidth === void 0 ? void 0 : getDefaultMinWidth(index)) !== null && _ref2 !== void 0 ? _ref2 : 0, availableWidth);\n      let max = $6818b1c4fc67028d$export$59185c62a7544aa0(column.maxWidth, availableWidth);\n      let hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));\n      // 9.7.1\n      // We don't make use of flex basis, it's always 0, so we are always in 'grow' mode.\n      // 9.7.2\n      if (frozen) targetMainSize = hypotheticalMainSize;else if (baseSize > hypotheticalMainSize) {\n        frozen = true;\n        targetMainSize = hypotheticalMainSize;\n      }\n      // 9.7.3\n      if (!frozen) hasNonFrozenItems = true;\n      return {\n        frozen: frozen,\n        baseSize: baseSize,\n        hypotheticalMainSize: hypotheticalMainSize,\n        min: min,\n        max: max,\n        flex: flex,\n        targetMainSize: targetMainSize,\n        violation: 0\n      };\n    });\n    // 9.7.4\n    // 9.7.4.a\n    while (hasNonFrozenItems) {\n      // 9.7.4.b\n      /**\n      * Calculate the remaining free space as for initial free space,\n      * above (9.7.3). If the sum of the unfrozen flex items’ flex factors is\n      * less than one, multiply the initial free space by this sum (of flex factors).\n      * If the magnitude of this value is less than the magnitude of\n      * the remaining free space, use this as the remaining free space.\n      */\n      let usedWidth = 0;\n      let flexFactors = 0;\n      flexItems.forEach(item => {\n        if (item.frozen) usedWidth += item.targetMainSize;else {\n          usedWidth += item.baseSize;\n          flexFactors += item.flex;\n        }\n      });\n      let remainingFreeSpace = availableWidth - usedWidth;\n      // we only support integer FR's, and because of hasNonFrozenItems, we know that flexFactors > 0\n      // so no need to check for flexFactors < 1\n      // 9.7.4.c\n      /**\n      * If the remaining free space is zero\n      * - Do nothing.\n      * Else // remember, we're always in grow mode\n      * - Find the ratio of the item’s flex grow factor to the\n      * sum of the flex grow factors of all unfrozen items on\n      * the line. Set the item’s target main size to its flex\n      * base size plus a fraction of the remaining free space\n      * proportional to the ratio.\n      */\n      if (remainingFreeSpace > 0) flexItems.forEach(item => {\n        if (!item.frozen) {\n          let ratio = item.flex / flexFactors;\n          item.targetMainSize = item.baseSize + ratio * remainingFreeSpace;\n        }\n      });\n      // 9.7.4.d\n      /**\n      * Fix min/max violations. Clamp each non-frozen item’s\n      * target main size by its used min and max main sizes\n      * and floor its content-box size at zero. If the item’s\n      * target main size was made smaller by this, it’s a max\n      * violation. If the item’s target main size was made\n      * larger by this, it’s a min violation.\n      */\n      let totalViolation = 0;\n      flexItems.forEach(item => {\n        item.violation = 0;\n        if (!item.frozen) {\n          let {\n            min: min,\n            max: max,\n            targetMainSize: targetMainSize\n          } = item;\n          item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));\n          item.violation = item.targetMainSize - targetMainSize;\n          totalViolation += item.violation;\n        }\n      });\n      // 9.7.4.e\n      /**\n      * Freeze over-flexed items. The total violation is the\n      * sum of the adjustments from the previous step\n      * ∑(clamped size - unclamped size). If the total violation is:\n      * Zero\n      * - Freeze all items.\n      *\n      * Positive\n      * - Freeze all the items with min violations.\n      *\n      * Negative\n      * - Freeze all the items with max violations.\n      */\n      hasNonFrozenItems = false;\n      flexItems.forEach(item => {\n        if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) item.frozen = true;else if (!item.frozen) hasNonFrozenItems = true;\n      });\n    }\n    return $6818b1c4fc67028d$var$cascadeRounding(flexItems);\n  }\n  function $6818b1c4fc67028d$var$cascadeRounding(flexItems) {\n    /*\n    Given an array of floats that sum to an integer, this rounds the floats\n    and returns an array of integers with the same sum.\n    */\n    let fpTotal = 0;\n    let intTotal = 0;\n    let roundedArray = [];\n    flexItems.forEach(function (item) {\n      let float = item.targetMainSize;\n      let integer = Math.round(float + fpTotal) - intTotal;\n      fpTotal += float;\n      intTotal += integer;\n      roundedArray.push(integer);\n    });\n    return roundedArray;\n  }\n});","lineCount":221,"map":[[7,2,174,0,"Object"],[7,8,174,0],[7,9,174,0,"defineProperty"],[7,23,174,0],[7,24,174,0,"exports"],[7,31,174,0],[8,4,174,0,"enumerable"],[8,14,174,0],[9,4,174,0,"get"],[9,7,174,0],[9,18,174,0,"get"],[9,19,174,0],[10,6,174,0],[10,13,174,8,"$6818b1c4fc67028d$export$1994a077b98ee0d5"],[10,54,174,49],[11,4,174,49],[12,2,174,49],[13,2,174,0,"Object"],[13,8,174,0],[13,9,174,0,"defineProperty"],[13,23,174,0],[13,24,174,0,"exports"],[13,31,174,0],[14,4,174,0,"enumerable"],[14,14,174,0],[15,4,174,0,"get"],[15,7,174,0],[15,18,174,0,"get"],[15,19,174,0],[16,6,174,0],[16,13,174,63,"$6818b1c4fc67028d$export$9078bad4c3934604"],[16,54,174,104],[17,4,174,104],[18,2,174,104],[19,2,174,0,"Object"],[19,8,174,0],[19,9,174,0,"defineProperty"],[19,23,174,0],[19,24,174,0,"exports"],[19,31,174,0],[20,4,174,0,"enumerable"],[20,14,174,0],[21,4,174,0,"get"],[21,7,174,0],[21,18,174,0,"get"],[21,19,174,0],[22,6,174,0],[22,13,174,129,"$6818b1c4fc67028d$export$7bbad27896f7ae9f"],[22,54,174,170],[23,4,174,170],[24,2,174,170],[25,2,174,0,"Object"],[25,8,174,0],[25,9,174,0,"defineProperty"],[25,23,174,0],[25,24,174,0,"exports"],[25,31,174,0],[26,4,174,0,"enumerable"],[26,14,174,0],[27,4,174,0,"get"],[27,7,174,0],[27,18,174,0,"get"],[27,19,174,0],[28,6,174,0],[28,13,174,192,"$6818b1c4fc67028d$export$59185c62a7544aa0"],[28,54,174,233],[29,4,174,233],[30,2,174,233],[31,2,174,0,"Object"],[31,8,174,0],[31,9,174,0,"defineProperty"],[31,23,174,0],[31,24,174,0,"exports"],[31,31,174,0],[32,4,174,0,"enumerable"],[32,14,174,0],[33,4,174,0,"get"],[33,7,174,0],[33,18,174,0,"get"],[33,19,174,0],[34,6,174,0],[34,13,174,250,"$6818b1c4fc67028d$export$f556054ce4358701"],[34,54,174,291],[35,4,174,291],[36,2,174,291],[37,2,174,0,"Object"],[37,8,174,0],[37,9,174,0,"defineProperty"],[37,23,174,0],[37,24,174,0,"exports"],[37,31,174,0],[38,4,174,0,"enumerable"],[38,14,174,0],[39,4,174,0,"get"],[39,7,174,0],[39,18,174,0,"get"],[39,19,174,0],[40,6,174,0],[40,13,174,308,"$6818b1c4fc67028d$export$55d50dc687385491"],[40,54,174,349],[41,4,174,349],[42,2,174,349],[43,2,1,0],[44,0,2,0],[45,0,3,0],[46,0,4,0],[47,0,5,0],[48,0,6,0],[49,0,7,0],[50,0,8,0],[51,0,9,0],[52,0,10,0],[53,0,11,0],[54,2,11,4],[54,11,11,13,"$6818b1c4fc67028d$export$1994a077b98ee0d5"],[54,52,11,54,"$6818b1c4fc67028d$export$1994a077b98ee0d5"],[54,53,11,55,"width"],[54,58,11,60],[54,60,11,62],[55,4,12,4],[55,11,12,11,"width"],[55,16,12,16],[55,20,12,20],[55,24,12,24],[55,29,12,29],[55,30,12,30,"isNaN"],[55,35,12,35],[55,36,12,36,"width"],[55,41,12,41],[55,42,12,42],[55,46,12,46,"String"],[55,52,12,52],[55,53,12,53,"width"],[55,58,12,58],[55,59,12,59],[55,60,12,60,"match"],[55,65,12,65],[55,66,12,66],[55,80,12,80],[55,81,12,81],[55,86,12,86],[55,90,12,90],[55,91,12,91],[56,2,13,0],[57,2,14,0],[57,11,14,9,"$6818b1c4fc67028d$export$9078bad4c3934604"],[57,52,14,50,"$6818b1c4fc67028d$export$9078bad4c3934604"],[57,53,14,51,"width"],[57,58,14,56],[57,60,14,58],[58,4,15,4],[58,8,15,8],[58,9,15,9,"width"],[58,14,15,14],[58,18,15,18],[58,25,15,25,"width"],[58,30,15,30],[58,35,15,35],[58,43,15,43],[58,45,15,45],[58,52,15,52],[58,53,15,53],[59,4,16,4],[59,8,16,8,"match"],[59,13,16,13],[59,16,16,16,"width"],[59,21,16,21],[59,22,16,22,"match"],[59,27,16,27],[59,28,16,28],[59,42,16,42],[59,43,16,43],[60,4,17,4],[61,4,18,4],[61,8,18,8],[61,9,18,9,"match"],[61,14,18,14],[61,16,18,16],[62,6,19,8],[62,10,19,12,"process"],[62,17,19,19],[62,18,19,20,"env"],[62,21,19,23],[62,22,19,24,"NODE_ENV"],[62,30,19,32],[62,35,19,37],[62,47,19,49],[62,49,19,51,"console"],[62,56,19,58],[62,57,19,59,"warn"],[62,61,19,63],[62,62,19,64],[62,72,19,74,"width"],[62,77,19,79],[62,188,19,190],[62,190,19,192],[62,213,19,215],[62,214,19,216],[63,6,20,8],[63,13,20,15],[63,14,20,16],[64,4,21,4],[65,4,22,4],[65,11,22,11,"parseFloat"],[65,21,22,21],[65,22,22,22,"match"],[65,27,22,27],[65,28,22,28],[65,29,22,29],[65,30,22,30],[65,31,22,31],[66,2,23,0],[67,2,24,0],[67,11,24,9,"$6818b1c4fc67028d$export$7bbad27896f7ae9f"],[67,52,24,50,"$6818b1c4fc67028d$export$7bbad27896f7ae9f"],[67,53,24,51,"width"],[67,58,24,56],[67,60,24,58,"tableWidth"],[67,70,24,68],[67,72,24,70],[68,4,25,4],[68,8,25,8],[68,15,25,15,"width"],[68,20,25,20],[68,25,25,25],[68,33,25,33],[68,35,25,35],[69,6,26,8],[69,10,26,12,"match"],[69,15,26,17],[69,18,26,20,"width"],[69,23,26,25],[69,24,26,26,"match"],[69,29,26,31],[69,30,26,32],[69,44,26,46],[69,45,26,47],[70,6,27,8],[70,10,27,12],[70,11,27,13,"match"],[70,16,27,18],[70,18,27,20],[70,24,27,26],[70,28,27,30,"Error"],[70,33,27,35],[70,34,27,36],[70,102,27,104],[70,103,27,105],[71,6,28,8],[71,13,28,15,"tableWidth"],[71,23,28,25],[71,27,28,29,"parseFloat"],[71,37,28,39],[71,38,28,40,"match"],[71,43,28,45],[71,44,28,46],[71,45,28,47],[71,46,28,48],[71,47,28,49],[71,50,28,52],[71,53,28,55],[71,54,28,56],[72,4,29,4],[73,4,30,4],[73,11,30,11,"width"],[73,16,30,16],[74,2,31,0],[75,2,32,0],[75,11,32,9,"$6818b1c4fc67028d$export$59185c62a7544aa0"],[75,52,32,50,"$6818b1c4fc67028d$export$59185c62a7544aa0"],[75,53,32,51,"maxWidth"],[75,61,32,59],[75,63,32,61,"tableWidth"],[75,73,32,71],[75,75,32,73],[76,4,33,4],[76,11,33,11,"maxWidth"],[76,19,33,19],[76,23,33,23],[76,27,33,27],[76,30,33,30,"$6818b1c4fc67028d$export$7bbad27896f7ae9f"],[76,71,33,71],[76,72,33,72,"maxWidth"],[76,80,33,80],[76,82,33,82,"tableWidth"],[76,92,33,92],[76,93,33,93],[76,96,33,96,"Number"],[76,102,33,102],[76,103,33,103,"MAX_SAFE_INTEGER"],[76,119,33,119],[77,2,34,0],[78,2,35,0],[78,11,35,9,"$6818b1c4fc67028d$export$f556054ce4358701"],[78,52,35,50,"$6818b1c4fc67028d$export$f556054ce4358701"],[78,53,35,51,"minWidth"],[78,61,35,59],[78,63,35,61,"tableWidth"],[78,73,35,71],[78,75,35,73],[79,4,36,4],[79,11,36,11,"minWidth"],[79,19,36,19],[79,23,36,23],[79,27,36,27],[79,30,36,30,"$6818b1c4fc67028d$export$7bbad27896f7ae9f"],[79,71,36,71],[79,72,36,72,"minWidth"],[79,80,36,80],[79,82,36,82,"tableWidth"],[79,92,36,92],[79,93,36,93],[79,96,36,96],[79,97,36,97],[80,2,37,0],[81,2,38,0],[81,11,38,9,"$6818b1c4fc67028d$export$55d50dc687385491"],[81,52,38,50,"$6818b1c4fc67028d$export$55d50dc687385491"],[81,53,38,51,"availableWidth"],[81,67,38,65],[81,69,38,67,"columns"],[81,76,38,74],[81,78,38,76,"changedColumns"],[81,92,38,90],[81,94,38,92,"getDefaultWidth"],[81,109,38,107],[81,111,38,109,"getDefaultMinWidth"],[81,129,38,127],[81,131,38,129],[82,4,39,4],[82,8,39,8,"hasNonFrozenItems"],[82,25,39,25],[82,28,39,28],[82,33,39,33],[83,4,40,4],[83,8,40,8,"flexItems"],[83,17,40,17],[83,20,40,20,"columns"],[83,27,40,27],[83,28,40,28,"map"],[83,31,40,31],[83,32,40,32],[83,33,40,33,"column"],[83,39,40,39],[83,41,40,41,"index"],[83,46,40,46],[83,51,40,49],[84,6,41,8],[84,10,41,12,"_changedColumns_get"],[84,29,41,31],[84,31,41,33,"_column_width"],[84,44,41,46],[84,46,41,48,"_ref"],[84,50,41,52],[84,52,41,54,"_ref1"],[84,57,41,59],[85,6,42,8],[85,10,42,12,"width"],[85,15,42,17],[85,18,42,20,"changedColumns"],[85,32,42,34],[85,33,42,35,"get"],[85,36,42,38],[85,37,42,39,"column"],[85,43,42,45],[85,44,42,46,"key"],[85,47,42,49],[85,48,42,50],[85,52,42,54],[85,56,42,58],[85,59,42,61],[85,60,42,62,"_changedColumns_get"],[85,79,42,81],[85,82,42,84,"changedColumns"],[85,96,42,98],[85,97,42,99,"get"],[85,100,42,102],[85,101,42,103,"column"],[85,107,42,109],[85,108,42,110,"key"],[85,111,42,113],[85,112,42,114],[85,118,42,120],[85,122,42,124],[85,126,42,128,"_changedColumns_get"],[85,145,42,147],[85,150,42,152],[85,155,42,157],[85,156,42,158],[85,159,42,161,"_changedColumns_get"],[85,178,42,180],[85,181,42,183],[85,186,42,188],[85,189,42,191],[85,190,42,192,"_ref1"],[85,195,42,197],[85,198,42,200],[85,199,42,201,"_ref"],[85,203,42,205],[85,206,42,208],[85,207,42,209,"_column_width"],[85,220,42,222],[85,223,42,225,"column"],[85,229,42,231],[85,230,42,232,"width"],[85,235,42,237],[85,241,42,243],[85,245,42,247],[85,249,42,251,"_column_width"],[85,262,42,264],[85,267,42,269],[85,272,42,274],[85,273,42,275],[85,276,42,278,"_column_width"],[85,289,42,291],[85,292,42,294,"column"],[85,298,42,300],[85,299,42,301,"defaultWidth"],[85,311,42,313],[85,317,42,319],[85,321,42,323],[85,325,42,327,"_ref"],[85,329,42,331],[85,334,42,336],[85,339,42,341],[85,340,42,342],[85,343,42,345,"_ref"],[85,347,42,349],[85,350,42,352,"getDefaultWidth"],[85,365,42,367],[85,370,42,372],[85,374,42,376],[85,378,42,380,"getDefaultWidth"],[85,393,42,395],[85,398,42,400],[85,403,42,405],[85,404,42,406],[85,407,42,409],[85,412,42,414],[85,413,42,415],[85,416,42,418,"getDefaultWidth"],[85,431,42,433],[85,432,42,434,"index"],[85,437,42,439],[85,438,42,440],[85,444,42,446],[85,448,42,450],[85,452,42,454,"_ref1"],[85,457,42,459],[85,462,42,464],[85,467,42,469],[85,468,42,470],[85,471,42,473,"_ref1"],[85,476,42,478],[85,479,42,481],[85,484,42,486],[86,6,43,8],[86,10,43,12,"frozen"],[86,16,43,18],[86,19,43,21],[86,24,43,26],[87,6,44,8],[87,10,44,12,"baseSize"],[87,18,44,20],[87,21,44,23],[87,22,44,24],[88,6,45,8],[88,10,45,12,"flex"],[88,14,45,16],[88,17,45,19],[88,18,45,20],[89,6,46,8],[89,10,46,12,"targetMainSize"],[89,24,46,26],[89,27,46,29],[89,28,46,30],[90,6,47,8],[90,10,47,12,"$6818b1c4fc67028d$export$1994a077b98ee0d5"],[90,51,47,53],[90,52,47,54,"width"],[90,57,47,59],[90,58,47,60],[90,60,47,62],[91,8,48,12,"baseSize"],[91,16,48,20],[91,19,48,23,"$6818b1c4fc67028d$export$7bbad27896f7ae9f"],[91,60,48,64],[91,61,48,65,"width"],[91,66,48,70],[91,68,48,72,"availableWidth"],[91,82,48,86],[91,83,48,87],[92,8,49,12,"frozen"],[92,14,49,18],[92,17,49,21],[92,21,49,25],[93,6,50,8],[93,7,50,9],[93,13,50,15],[94,8,51,12,"flex"],[94,12,51,16],[94,15,51,19,"$6818b1c4fc67028d$export$9078bad4c3934604"],[94,56,51,60],[94,57,51,61,"width"],[94,62,51,66],[94,63,51,67],[95,8,52,12],[95,12,52,16,"flex"],[95,16,52,20],[95,20,52,24],[95,21,52,25],[95,23,52,27,"frozen"],[95,29,52,33],[95,32,52,36],[95,36,52,40],[96,6,53,8],[97,6,54,8],[97,10,54,12,"_column_minWidth"],[97,26,54,28],[97,28,54,30,"_ref2"],[97,33,54,35],[98,6,55,8],[98,10,55,12,"min"],[98,13,55,15],[98,16,55,18,"$6818b1c4fc67028d$export$f556054ce4358701"],[98,57,55,59],[98,58,55,60],[98,59,55,61,"_ref2"],[98,64,55,66],[98,67,55,69],[98,68,55,70,"_column_minWidth"],[98,84,55,86],[98,87,55,89,"column"],[98,93,55,95],[98,94,55,96,"minWidth"],[98,102,55,104],[98,108,55,110],[98,112,55,114],[98,116,55,118,"_column_minWidth"],[98,132,55,134],[98,137,55,139],[98,142,55,144],[98,143,55,145],[98,146,55,148,"_column_minWidth"],[98,162,55,164],[98,165,55,167,"getDefaultMinWidth"],[98,183,55,185],[98,188,55,190],[98,192,55,194],[98,196,55,198,"getDefaultMinWidth"],[98,214,55,216],[98,219,55,221],[98,224,55,226],[98,225,55,227],[98,228,55,230],[98,233,55,235],[98,234,55,236],[98,237,55,239,"getDefaultMinWidth"],[98,255,55,257],[98,256,55,258,"index"],[98,261,55,263],[98,262,55,264],[98,268,55,270],[98,272,55,274],[98,276,55,278,"_ref2"],[98,281,55,283],[98,286,55,288],[98,291,55,293],[98,292,55,294],[98,295,55,297,"_ref2"],[98,300,55,302],[98,303,55,305],[98,304,55,306],[98,306,55,308,"availableWidth"],[98,320,55,322],[98,321,55,323],[99,6,56,8],[99,10,56,12,"max"],[99,13,56,15],[99,16,56,18,"$6818b1c4fc67028d$export$59185c62a7544aa0"],[99,57,56,59],[99,58,56,60,"column"],[99,64,56,66],[99,65,56,67,"maxWidth"],[99,73,56,75],[99,75,56,77,"availableWidth"],[99,89,56,91],[99,90,56,92],[100,6,57,8],[100,10,57,12,"hypotheticalMainSize"],[100,30,57,32],[100,33,57,35,"Math"],[100,37,57,39],[100,38,57,40,"max"],[100,41,57,43],[100,42,57,44,"min"],[100,45,57,47],[100,47,57,49,"Math"],[100,51,57,53],[100,52,57,54,"min"],[100,55,57,57],[100,56,57,58,"baseSize"],[100,64,57,66],[100,66,57,68,"max"],[100,69,57,71],[100,70,57,72],[100,71,57,73],[101,6,58,8],[102,6,59,8],[103,6,60,8],[104,6,61,8],[104,10,61,12,"frozen"],[104,16,61,18],[104,18,61,20,"targetMainSize"],[104,32,61,34],[104,35,61,37,"hypotheticalMainSize"],[104,55,61,57],[104,56,61,58],[104,61,62,13],[104,65,62,17,"baseSize"],[104,73,62,25],[104,76,62,28,"hypotheticalMainSize"],[104,96,62,48],[104,98,62,50],[105,8,63,12,"frozen"],[105,14,63,18],[105,17,63,21],[105,21,63,25],[106,8,64,12,"targetMainSize"],[106,22,64,26],[106,25,64,29,"hypotheticalMainSize"],[106,45,64,49],[107,6,65,8],[108,6,66,8],[109,6,67,8],[109,10,67,12],[109,11,67,13,"frozen"],[109,17,67,19],[109,19,67,21,"hasNonFrozenItems"],[109,36,67,38],[109,39,67,41],[109,43,67,45],[110,6,68,8],[110,13,68,15],[111,8,69,12,"frozen"],[111,14,69,18],[111,16,69,20,"frozen"],[111,22,69,26],[112,8,70,12,"baseSize"],[112,16,70,20],[112,18,70,22,"baseSize"],[112,26,70,30],[113,8,71,12,"hypotheticalMainSize"],[113,28,71,32],[113,30,71,34,"hypotheticalMainSize"],[113,50,71,54],[114,8,72,12,"min"],[114,11,72,15],[114,13,72,17,"min"],[114,16,72,20],[115,8,73,12,"max"],[115,11,73,15],[115,13,73,17,"max"],[115,16,73,20],[116,8,74,12,"flex"],[116,12,74,16],[116,14,74,18,"flex"],[116,18,74,22],[117,8,75,12,"targetMainSize"],[117,22,75,26],[117,24,75,28,"targetMainSize"],[117,38,75,42],[118,8,76,12,"violation"],[118,17,76,21],[118,19,76,23],[119,6,77,8],[119,7,77,9],[120,4,78,4],[120,5,78,5],[120,6,78,6],[121,4,79,4],[122,4,80,4],[123,4,81,4],[123,11,81,10,"hasNonFrozenItems"],[123,28,81,27],[123,30,81,28],[124,6,82,8],[125,6,83,8],[126,0,84,0],[127,0,85,0],[128,0,86,0],[129,0,87,0],[130,0,88,0],[131,0,89,0],[132,6,89,8],[132,10,89,12,"usedWidth"],[132,19,89,21],[132,22,89,24],[132,23,89,25],[133,6,90,8],[133,10,90,12,"flexFactors"],[133,21,90,23],[133,24,90,26],[133,25,90,27],[134,6,91,8,"flexItems"],[134,15,91,17],[134,16,91,18,"forEach"],[134,23,91,25],[134,24,91,27,"item"],[134,28,91,31],[134,32,91,34],[135,8,92,12],[135,12,92,16,"item"],[135,16,92,20],[135,17,92,21,"frozen"],[135,23,92,27],[135,25,92,29,"usedWidth"],[135,34,92,38],[135,38,92,42,"item"],[135,42,92,46],[135,43,92,47,"targetMainSize"],[135,57,92,61],[135,58,92,62],[135,63,93,17],[136,10,94,16,"usedWidth"],[136,19,94,25],[136,23,94,29,"item"],[136,27,94,33],[136,28,94,34,"baseSize"],[136,36,94,42],[137,10,95,16,"flexFactors"],[137,21,95,27],[137,25,95,31,"item"],[137,29,95,35],[137,30,95,36,"flex"],[137,34,95,40],[138,8,96,12],[139,6,97,8],[139,7,97,9],[139,8,97,10],[140,6,98,8],[140,10,98,12,"remainingFreeSpace"],[140,28,98,30],[140,31,98,33,"availableWidth"],[140,45,98,47],[140,48,98,50,"usedWidth"],[140,57,98,59],[141,6,99,8],[142,6,100,8],[143,6,101,8],[144,6,102,8],[145,0,103,0],[146,0,104,0],[147,0,105,0],[148,0,106,0],[149,0,107,0],[150,0,108,0],[151,0,109,0],[152,0,110,0],[153,0,111,0],[154,6,111,8],[154,10,111,12,"remainingFreeSpace"],[154,28,111,30],[154,31,111,33],[154,32,111,34],[154,34,111,36,"flexItems"],[154,43,111,45],[154,44,111,46,"forEach"],[154,51,111,53],[154,52,111,55,"item"],[154,56,111,59],[154,60,111,62],[155,8,112,12],[155,12,112,16],[155,13,112,17,"item"],[155,17,112,21],[155,18,112,22,"frozen"],[155,24,112,28],[155,26,112,30],[156,10,113,16],[156,14,113,20,"ratio"],[156,19,113,25],[156,22,113,28,"item"],[156,26,113,32],[156,27,113,33,"flex"],[156,31,113,37],[156,34,113,40,"flexFactors"],[156,45,113,51],[157,10,114,16,"item"],[157,14,114,20],[157,15,114,21,"targetMainSize"],[157,29,114,35],[157,32,114,38,"item"],[157,36,114,42],[157,37,114,43,"baseSize"],[157,45,114,51],[157,48,114,54,"ratio"],[157,53,114,59],[157,56,114,62,"remainingFreeSpace"],[157,74,114,80],[158,8,115,12],[159,6,116,8],[159,7,116,9],[159,8,116,10],[160,6,117,8],[161,6,118,8],[162,0,119,0],[163,0,120,0],[164,0,121,0],[165,0,122,0],[166,0,123,0],[167,0,124,0],[168,0,125,0],[169,6,125,8],[169,10,125,12,"totalViolation"],[169,24,125,26],[169,27,125,29],[169,28,125,30],[170,6,126,8,"flexItems"],[170,15,126,17],[170,16,126,18,"forEach"],[170,23,126,25],[170,24,126,27,"item"],[170,28,126,31],[170,32,126,34],[171,8,127,12,"item"],[171,12,127,16],[171,13,127,17,"violation"],[171,22,127,26],[171,25,127,29],[171,26,127,30],[172,8,128,12],[172,12,128,16],[172,13,128,17,"item"],[172,17,128,21],[172,18,128,22,"frozen"],[172,24,128,28],[172,26,128,30],[173,10,129,16],[173,14,129,20],[174,12,129,22,"min"],[174,15,129,25],[174,17,129,27,"min"],[174,20,129,30],[175,12,129,32,"max"],[175,15,129,35],[175,17,129,37,"max"],[175,20,129,40],[176,12,129,42,"targetMainSize"],[176,26,129,56],[176,28,129,58,"targetMainSize"],[177,10,129,73],[177,11,129,74],[177,14,129,77,"item"],[177,18,129,81],[178,10,130,16,"item"],[178,14,130,20],[178,15,130,21,"targetMainSize"],[178,29,130,35],[178,32,130,38,"Math"],[178,36,130,42],[178,37,130,43,"max"],[178,40,130,46],[178,41,130,47,"min"],[178,44,130,50],[178,46,130,52,"Math"],[178,50,130,56],[178,51,130,57,"min"],[178,54,130,60],[178,55,130,61,"targetMainSize"],[178,69,130,75],[178,71,130,77,"max"],[178,74,130,80],[178,75,130,81],[178,76,130,82],[179,10,131,16,"item"],[179,14,131,20],[179,15,131,21,"violation"],[179,24,131,30],[179,27,131,33,"item"],[179,31,131,37],[179,32,131,38,"targetMainSize"],[179,46,131,52],[179,49,131,55,"targetMainSize"],[179,63,131,69],[180,10,132,16,"totalViolation"],[180,24,132,30],[180,28,132,34,"item"],[180,32,132,38],[180,33,132,39,"violation"],[180,42,132,48],[181,8,133,12],[182,6,134,8],[182,7,134,9],[182,8,134,10],[183,6,135,8],[184,6,136,8],[185,0,137,0],[186,0,138,0],[187,0,139,0],[188,0,140,0],[189,0,141,0],[190,0,142,0],[191,0,143,0],[192,0,144,0],[193,0,145,0],[194,0,146,0],[195,0,147,0],[196,0,148,0],[197,6,148,8,"hasNonFrozenItems"],[197,23,148,25],[197,26,148,28],[197,31,148,33],[198,6,149,8,"flexItems"],[198,15,149,17],[198,16,149,18,"forEach"],[198,23,149,25],[198,24,149,27,"item"],[198,28,149,31],[198,32,149,34],[199,8,150,12],[199,12,150,16,"totalViolation"],[199,26,150,30],[199,31,150,35],[199,32,150,36],[199,36,150,40,"Math"],[199,40,150,44],[199,41,150,45,"sign"],[199,45,150,49],[199,46,150,50,"totalViolation"],[199,60,150,64],[199,61,150,65],[199,66,150,70,"Math"],[199,70,150,74],[199,71,150,75,"sign"],[199,75,150,79],[199,76,150,80,"item"],[199,80,150,84],[199,81,150,85,"violation"],[199,90,150,94],[199,91,150,95],[199,93,150,97,"item"],[199,97,150,101],[199,98,150,102,"frozen"],[199,104,150,108],[199,107,150,111],[199,111,150,115],[199,112,150,116],[199,117,151,17],[199,121,151,21],[199,122,151,22,"item"],[199,126,151,26],[199,127,151,27,"frozen"],[199,133,151,33],[199,135,151,35,"hasNonFrozenItems"],[199,152,151,52],[199,155,151,55],[199,159,151,59],[200,6,152,8],[200,7,152,9],[200,8,152,10],[201,4,153,4],[202,4,154,4],[202,11,154,11,"$6818b1c4fc67028d$var$cascadeRounding"],[202,48,154,48],[202,49,154,49,"flexItems"],[202,58,154,58],[202,59,154,59],[203,2,155,0],[204,2,156,0],[204,11,156,9,"$6818b1c4fc67028d$var$cascadeRounding"],[204,48,156,46,"$6818b1c4fc67028d$var$cascadeRounding"],[204,49,156,47,"flexItems"],[204,58,156,56],[204,60,156,58],[205,4,157,4],[206,0,158,0],[207,0,159,0],[208,0,160,0],[209,4,160,5],[209,8,160,9,"fpTotal"],[209,15,160,16],[209,18,160,19],[209,19,160,20],[210,4,161,4],[210,8,161,8,"intTotal"],[210,16,161,16],[210,19,161,19],[210,20,161,20],[211,4,162,4],[211,8,162,8,"roundedArray"],[211,20,162,20],[211,23,162,23],[211,25,162,25],[212,4,163,4,"flexItems"],[212,13,163,13],[212,14,163,14,"forEach"],[212,21,163,21],[212,22,163,22],[212,32,163,31,"item"],[212,36,163,35],[212,38,163,37],[213,6,164,8],[213,10,164,12,"float"],[213,15,164,17],[213,18,164,20,"item"],[213,22,164,24],[213,23,164,25,"targetMainSize"],[213,37,164,39],[214,6,165,8],[214,10,165,12,"integer"],[214,17,165,19],[214,20,165,22,"Math"],[214,24,165,26],[214,25,165,27,"round"],[214,30,165,32],[214,31,165,33,"float"],[214,36,165,38],[214,39,165,41,"fpTotal"],[214,46,165,48],[214,47,165,49],[214,50,165,52,"intTotal"],[214,58,165,60],[215,6,166,8,"fpTotal"],[215,13,166,15],[215,17,166,19,"float"],[215,22,166,24],[216,6,167,8,"intTotal"],[216,14,167,16],[216,18,167,20,"integer"],[216,25,167,27],[217,6,168,8,"roundedArray"],[217,18,168,20],[217,19,168,21,"push"],[217,23,168,25],[217,24,168,26,"integer"],[217,31,168,33],[217,32,168,34],[218,4,169,4],[218,5,169,5],[218,6,169,6],[219,4,170,4],[219,11,170,11,"roundedArray"],[219,23,170,23],[220,2,171,0],[221,0,171,1],[221,3]],"functionMap":{"names":["<global>","$6818b1c4fc67028d$export$1994a077b98ee0d5","$6818b1c4fc67028d$export$9078bad4c3934604","$6818b1c4fc67028d$export$7bbad27896f7ae9f","$6818b1c4fc67028d$export$59185c62a7544aa0","$6818b1c4fc67028d$export$f556054ce4358701","$6818b1c4fc67028d$export$55d50dc687385491","columns.map$argument_0","flexItems.forEach$argument_0","$6818b1c4fc67028d$var$cascadeRounding"],"mappings":"AAA;ICU;CDE;AEC;CFS;AGC;CHO;AIC;CJE;AKC;CLE;AMC;gCCE;KDsC;0BEa;SFM;sDEc;SFK;0BEU;SFQ;0BEe;SFG;CNG;ASC;sBDO;KCM;CTE"},"hasCjsExports":false},"type":"js/module"}]}